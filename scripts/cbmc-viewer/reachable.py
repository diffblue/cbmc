"""The statically reachable functions."""
from __future__ import print_function

# pylint: disable=too-few-public-methods

from builtins import object
import re
import subprocess
import json


def clean(s):
    """Replace whitespace with a space and strip whitespace from ends."""
    return re.sub('\b+', ' ', s).strip()


class Reachable(object):
    """The statically reachable functions.

    The statically reachable functions in a goto program as reported in the
    xml file generated by 'goto-analyzer --reachable-functions'.
    """

    def __init__(self, pgm="", srcloc=None):
        """Initialize the statically reachable functions."""
        self.functions = {}
        if not pgm:
            return

        try:
            cmd = ["goto-analyzer", "--reachable-functions", "--json", "-",
                   pgm]
            output = subprocess.check_output(cmd).decode('utf-8')
        except subprocess.CalledProcessError as err:
            print ("Can't find reachable functions: "
                   'Unable to run command "{}": "{}"'
                   .format(" ".join(cmd), str(err)))
            return
        except OSError as err:
            print ("Can't find goto-analyzer, "
                   "it must be installed and in your PATH: "
                   'Unable to run command "{}": "{}"'
                   .format(" ".join(cmd), str(err)))
            exit()

        # strip the noise sent to stdout before the actual json
        jsn = re.sub(r'^.*\n\[', '[', output, flags=re.DOTALL)
        # add last line numbers omitted by json_output_function (eg, builtins)
        jsn = jsn.replace('"last line": \n', '"last line": 0\n')

        for function in json.loads(jsn):
            funcname = function['function']
            filename = function['file name']
            filename = srcloc.clean_path(filename)

            # goto-analyzer constructs useless file names for built-ins
            match = re.match('^.*(<[^>]*>)$', filename)
            if match:
                filename = match.group(1)

            if not funcname.startswith('__CPROVER'):
                if self.functions.get(filename) is None:
                    self.functions[filename] = []
                # goto-analyzer may list a reachable function more than once
                if funcname not in self.functions[filename]:
                    self.functions[filename].append(funcname)

        for filename in self.functions:
            self.functions[filename].sort()

        return

################################################################
