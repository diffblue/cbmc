#!/bin/sh
_cbmc_autocomplete()
{
  #list of all switches cbmc has. IMPORTANT: in the template file, this variable must be defined on line 5.
  local switches=""
  #word on which the cursor is
  local cur=${COMP_WORDS[COMP_CWORD]}
  #previous word (in case it is a switch with a parameter)
  local prev=${COMP_WORDS[COMP_CWORD-1]}
 
  #check if the command before cursor is a switch that takes parameters, if yes,
  #offer a choice of parameters
  case "$prev" in
   --cover) #for coverage we list the options explicitly
     COMPREPLY=( $( compgen -W "assertion path branch location decision condition mcdc cover" -- $cur ) )
     return 0
     ;;
   --mm) #for memory models we list the options explicitly
     COMPREPLY=( $( compgen -W "sc tso pso" -- $cur ) )
     return 0
     ;;
   --arch) #for architecture we list the options explicitly; this list is populated using
     # `grep -w 'arch[[:space:]]*==' src/util/config.cpp | cut # -f2 -d'"' | sort`
     COMPREPLY=( $( compgen -W "alpha arm arm64 armel armhf hppa i386 ia64 mips mips64 mips64el mipsel mipsn32 mipsn32el none powerpc ppc64 ppc64le riscv64 s390 s390x sh4 sparc sparc64 v850 x32 x86_64" -- $cur ) )
     return 0
     ;;
   --os) #for architecture we list the options explicitly
     COMPREPLY=( $( compgen -W "freebsd linux macos solaris windows" -- $cur ) )
     return 0
     ;;
   --timestamp) #for timestamp we list the options explicitly
     COMPREPLY=( $( compgen -W "monotonic wall" -- $cur ) )
     return 0
     ;;
   --paths) #for paths we list the options explicitly
     COMPREPLY=( $( compgen -W "fifo lifo" -- $cur ) )
     return 0
     ;;
   -I|--classpath|-cp) # a directory
     _filedir -d
     return 0
     ;;
   --external-sat-solver|--incremental-smt2-solver)
     #a switch that takes a file parameter of which we don't know an extension
     _filedir -f
     return 0
     ;;
  esac
 
  #complete a switch from a standard list, if the parameter under cursor starts with a hyphen
  if [[ "$cur" == -* ]]; then
     COMPREPLY=( $( compgen -W "$switches" -- $cur ) )
     return 0
  fi

  #if none of the above applies, offer directories and files that we can analyze
  COMPREPLY=( $(compgen -G '*.class|*.jar|*.cpp|*.cc|*.c\+\+|*.ii|*.cxx|*.c|*.i|*.gb' -- $cur) )
}
complete -F _cbmc_autocomplete cbmc
