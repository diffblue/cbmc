---
AWSTemplateFormatVersion: 2010-09-09

Parameters:
    InstanceType:
        Type: String

    Ami:
        Type: String

    SnapshotId:
        Type: String

    AvailabilityZone:
        Type: String

    S3Bucket:
        Type: String

    PerfTestId:
        Type: String

    SnsTopic:
        Type: String

    SqsArn:
        Type: String

    SqsUrl:
        Type: String

    MaxPrice:
        Type: String

    FleetSize:
        Type: String

    SSHKeyName:
        Type: String

Conditions:
    UseSpot: !Not [!Equals [!Ref MaxPrice, ""]]

    UseKey: !Not [!Equals [!Ref SSHKeyName, ""]]

Resources:
    EC2Role:
        Type: "AWS::IAM::Role"
        Properties:
            AssumeRolePolicyDocument:
                Version: 2012-10-17
                Statement:
                    Effect: Allow
                    Principal:
                        Service: ec2.amazonaws.com
                    Action: "sts:AssumeRole"
            RoleName: !Sub "ER-${PerfTestId}"
            Policies:
                - PolicyName: !Sub "EP-${PerfTestId}"
                  PolicyDocument:
                    Version: 2012-10-17
                    Statement:
                        - Action:
                            - "s3:PutObject"
                            - "s3:GetObject"
                          Effect: Allow
                          Resource: !Join ["/", [!Sub "arn:aws:s3:::${S3Bucket}", "*"]]
                        - Action:
                            - "sns:Publish"
                          Effect: Allow
                          Resource: !Ref SnsTopic
                        - Action:
                            - "sqs:DeleteMessage"
                            - "sqs:DeleteQueue"
                            - "sqs:GetQueueAttributes"
                            - "sqs:ReceiveMessage"
                          Effect: Allow
                          Resource: !Ref SqsArn
                        - Action:
                            - "sqs:DeleteMessage"
                            - "sqs:DeleteQueue"
                            - "sqs:GetQueueAttributes"
                            - "sqs:ReceiveMessage"
                            - "sqs:SendMessage"
                          Effect: Allow
                          Resource: !Sub "${SqsArn}-run"
                        - Action:
                            - "cloudformation:DeleteStack"
                          Effect: Allow
                          Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/perf-test-*/*"
                        - Action:
                            - "autoscaling:DeleteAutoScalingGroup"
                            - "autoscaling:DeleteLaunchConfiguration"
                            - "autoscaling:DescribeAutoScalingGroups"
                            - "autoscaling:DescribeScalingActivities"
                            - "autoscaling:UpdateAutoScalingGroup"
                            - "ec2:DeleteSecurityGroup"
                            - "iam:DeleteInstanceProfile"
                            - "iam:DeleteRole"
                            - "iam:DeleteRolePolicy"
                            - "iam:RemoveRoleFromInstanceProfile"
                          Effect: Allow
                          Resource: "*"

    EC2InstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            Roles:
                - !Ref EC2Role

    SecurityGroupInSSHWorld:
        Type: "AWS::EC2::SecurityGroup"
        DependsOn: EC2Role
        Properties:
            GroupDescription: SSH access
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: 22
                  ToPort: 22
                  CidrIp: '0.0.0.0/0'

    LaunchConfiguration:
        Type: "AWS::AutoScaling::LaunchConfiguration"
        Properties:
            BlockDeviceMappings:
                - DeviceName: "/dev/sdf"
                  Ebs:
                      DeleteOnTermination: True
                      SnapshotId: !Ref SnapshotId
                      VolumeSize: 64
            IamInstanceProfile: !Ref EC2InstanceProfile
            ImageId: !Ref Ami
            InstanceType: !Ref InstanceType
            KeyName:
                !If [UseKey, !Ref SSHKeyName, !Ref "AWS::NoValue"]
            SecurityGroups:
                - !Ref SecurityGroupInSSHWorld
            SpotPrice:
                !If [UseSpot, !Ref MaxPrice, !Ref "AWS::NoValue"]
            UserData:
                Fn::Base64: !Sub |
                    #!/bin/bash
                    set -x -e

                    # wait to make sure volume is available
                    sleep 10
                    e2fsck -f -y /dev/xvdf
                    resize2fs /dev/xvdf
                    mount /dev/xvdf /mnt

                    # install packages
                    apt-get -y update
                    apt-get install -y git time wget binutils awscli make jq
                    apt-get install -y zip unzip
                    apt-get install -y gcc libc6-dev-i386

                    # cgroup set up for benchexec
                    chmod o+wt '/sys/fs/cgroup/cpuset/'
                    chmod o+wt '/sys/fs/cgroup/cpu,cpuacct/user.slice'
                    chmod o+wt '/sys/fs/cgroup/memory/user.slice'
                    chmod o+wt '/sys/fs/cgroup/freezer/'

                    # AWS Sig-v4 access
                    aws configure set s3.signature_version s3v4

                    # send instance-terminated message
                    # http://rogueleaderr.com/post/48795010760/how-to-notifyemail-yourself-when-an-ec2-instance/amp
                    cat >/etc/init.d/ec2-terminate <<"EOF"
                    #!/bin/bash
                    ### BEGIN INIT INFO
                    # Provides: ec2-terminate
                    # Required-Start: $network $syslog
                    # Required-Stop:
                    # Default-Start:
                    # Default-Stop: 0 1 6
                    # Short-Description: ec2-terminate
                    # Description: send termination email
                    ### END INIT INFO
                    #

                    case "$1" in
                        start|status)
                            exit 0
                            ;;
                        stop)
                            # run the below
                            ;;
                        *)
                            exit 1
                            ;;
                    esac

                    ut=$(cat /proc/uptime | cut -f1 -d" ")
                    aws --region us-east-1 sns publish \
                            --topic-arn ${SnsTopic} \
                            --message "instance terminating after $ut s at ${MaxPrice} USD/h"
                    sleep 3 # make sure the message has time to send
                    aws s3 cp /var/log/cloud-init-output.log \
                      s3://${S3Bucket}/${PerfTestId}/$HOSTNAME.cloud-init-output.log

                    exit 0
                    EOF
                    chmod a+x /etc/init.d/ec2-terminate
                    update-rc.d ec2-terminate defaults
                    systemctl start ec2-terminate

                    # update benchexec
                    cd /mnt/benchexec
                    git pull

                    # prepare for tool packaging
                    cd /mnt
                    cd cprover-sv-comp
                    git pull
                    mkdir -p src/cbmc/
                    touch LICENSE
                    cd ..
                    mkdir -p run
                    cd run
                    wget -O cbmc.xml https://raw.githubusercontent.com/sosy-lab/sv-comp/master/benchmark-defs/cbmc.xml
                    sed -i 's/witness.graphml/${!logfile_path_abs}${!inputfile_name}-witness.graphml/' cbmc.xml
                    cd ..
                    mkdir -p tmp
                    export TMPDIR=/mnt/tmp

                    # reduce the likelihood of multiple hosts processing the
                    # same message (in addition to SQS's message hiding)
                    sleep $(expr $RANDOM % 30)
                    retry=1

                    while true
                    do
                        sqs=$(aws --region ${AWS::Region} sqs receive-message \
                            --queue-url ${SqsUrl} | \
                            jq -r '.Messages[0].Body,.Messages[0].ReceiptHandle')

                        if [ -z "$sqs" ]
                        then
                            # no un-read messages in the input queue; let's look
                            # at -run
                            n_msgs=$(aws --region ${AWS::Region} sqs \
                                      get-queue-attributes \
                                      --queue-url ${SqsUrl}-run \
                                      --attribute-names \
                                          ApproximateNumberOfMessages | \
                                jq -r '.Attributes.ApproximateNumberOfMessages')

                            if [ $retry -eq 1 ]
                            then
                                retry=0
                                sleep 30
                                continue
                            elif [ -n "$n_msgs" ] && [ "$n_msgs" = "0" ]
                            then
                                # shut down the infrastructure
                                aws --region us-east-1 sns publish \
                                        --topic-arn ${SnsTopic} \
                                        --message "Trying to delete stacks in ${AWS::Region}"
                                aws --region ${AWS::Region} cloudformation \
                                        delete-stack --stack-name \
                                        perf-test-sqs-${PerfTestId}
                                aws --region ${AWS::Region} cloudformation \
                                        delete-stack --stack-name \
                                        perf-test-exec-${PerfTestId}
                                halt
                            fi

                            # the queue is gone, or other host will be turning
                            # off the lights
                            halt
                        fi

                        retry=1
                        bm=$(echo $sqs | cut -f1 -d" ")
                        cfg=$(echo $bm | cut -f1 -d"-")
                        t=$(echo $bm | cut -f2- -d"-")
                        msg=$(echo $sqs | cut -f2- -d" ")

                        # mark $bm in-progress
                        aws --region ${AWS::Region} sqs send-message \
                                --queue-url ${SqsUrl}-run \
                                --message-body $bm-$(hostname)

                        # there is no guarantee of cross-queue action ordering
                        # sleep for a bit to reduce the likelihood of missing
                        # in-progress messages while the input queue is empty
                        sleep 3

                        # remove it from the input queue
                        aws --region ${AWS::Region} sqs delete-message \
                                --queue-url ${SqsUrl} \
                                --receipt-handle $msg

                        cd /mnt/cprover-sv-comp
                        rm -f src/cbmc/cbmc
                        aws s3 cp s3://${S3Bucket}/${PerfTestId}/$cfg/cbmc \
                                src/cbmc/cbmc
                        chmod a+x src/cbmc/cbmc
                        make CBMC=. cbmc.zip
                        cd ../run
                        unzip ../cprover-sv-comp/cbmc.zip
                        mv cbmc cbmc-zip
                        mv cbmc-zip/* .
                        rmdir cbmc-zip
                        rm ../cprover-sv-comp/cbmc.zip

                        date
                        echo "Task: $t"

                        # compute the number of possible executors
                        max_par=$(cat /proc/cpuinfo | grep ^processor | wc -l)
                        mem=$(free -g | grep ^Mem | awk '{print $2}')
                        if [ $cfg != "profiling" ]
                        then
                            mem=$(expr $mem / 15)
                        else
                            mem=$(expr $mem / 7)
                        fi
                        if [ $mem -lt $max_par ]
                        then
                            max_par=$mem
                        fi

                        if [ $cfg != "profiling" ]
                        then
                            ../benchexec/bin/benchexec cbmc.xml --no-container \
                                --task $t -T 900s -M 15GB -o logs-$t/ \
                                -N $max_par -c 1
                            if [ -d logs-$t/cbmc.*.logfiles ]
                            then
                                cd logs-$t
                                tar czf witnesses.tar.gz cbmc.*.logfiles
                                rm -rf cbmc.*.logfiles
                                cd ..
                            fi
                            if [ -f logs-$t/*.xml.bz2 ]
                            then
                                start_date="$(echo ${PerfTestId} | cut -f1-3 -d-) $(echo ${PerfTestId} | cut -f4-6 -d- | sed 's/-/:/g')"
                                cd logs-$t
                                bunzip2 *.xml.bz2
                                perl -p -i -e \
                                  "s/^(<result.*version=\"[^\"]*)/\$1:${PerfTestId}/" *.xml
                                perl -p -i -e \
                                  's/systeminfo hostname=".*"/systeminfo hostname="${InstanceType}"/' *.xml
                                perl -p -i -e \
                                  "s/^(<result.*date=)\"[^\"]*/\$1\"$start_date/" *.xml
                                bzip2 *.xml
                                cd ..
                            fi
                            aws s3 cp logs-$t \
                                s3://${S3Bucket}/${PerfTestId}/$cfg/logs-$t/ \
                                --recursive
                        else
                            rm -f gmon.sum gmon.out *.gmon.out.*
                            ../benchexec/bin/benchexec cbmc.xml --no-container \
                                --task $t -T 600s -M 7GB -o logs-$t/ \
                                -N $max_par -c 1
                            if ls *.gmon.out.* >/dev/null 2>&1
                            then
                                gprof --sum ./cbmc-binary *.gmon.out.*
                                gprof ./cbmc-binary gmon.sum > sum.profile-$t
                                rm -f gmon.sum gmon.out *.gmon.out.*
                                aws s3 cp sum.profile-$t \
                                    s3://${S3Bucket}/${PerfTestId}/$cfg/sum.profile-$t
                            fi
                        fi
                        rm -rf logs-$t sum.profile-$t
                        date

                        # clear out the in-progress message
                        while true
                        do
                            sqs=$(aws --region ${AWS::Region} sqs \
                                    receive-message \
                                    --queue-url ${SqsUrl}-run \
                                    --visibility-timeout 10 | \
                              jq -r '.Messages[0].Body,.Messages[0].ReceiptHandle')
                            bm2=$(echo $sqs | cut -f1 -d" ")
                            msg2=$(echo $sqs | cut -f2- -d" ")

                            if [ "$bm2" = "$bm-$(hostname)" ]
                            then
                                aws --region ${AWS::Region} sqs delete-message \
                                    --queue-url ${SqsUrl}-run \
                                    --receipt-handle $msg2
                                break
                            fi
                        done
                    done

    AutoScalingGroup:
        Type: "AWS::AutoScaling::AutoScalingGroup"
        Properties:
            AvailabilityZones:
                - !Ref AvailabilityZone
            DesiredCapacity: !Ref FleetSize
            LaunchConfigurationName: !Ref LaunchConfiguration
            MaxSize: !Ref FleetSize
            MinSize: 1

Outputs:
    ASGId:
       Value: !Ref AutoScalingGroup
