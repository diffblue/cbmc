"RMO"

let fr = rf^-1;co
let po-loc-llh = po-loc \ R*R
let com = rf | co | fr
acyclic po-loc-llh | com as sc-per-loc-llh
(*note:
  RMO allows load-load hazard therefore we need a weaker version of
  sc-per-location*)

let dp = addr | data | ctrl
let ppo = dp 
acyclic ppo | rfe | co | fr as rmo 
(*note: 
  this forbids thin-air cycles*)
