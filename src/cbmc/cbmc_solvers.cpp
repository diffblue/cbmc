/*******************************************************************\

Module: Solvers for VCs Generated by Symbolic Execution of ANSI-C

Author: Daniel Kroening, kroening@kroening.com

\*******************************************************************/

#include <memory>
#include <iostream>
#include <fstream>

#include <util/unicode.h>

#include <solvers/sat/satcheck.h>
#include <solvers/refinement/bv_refinement.h>
#include <solvers/smt1/smt1_dec.h>
#include <solvers/smt2/smt2_dec.h>
#include <solvers/cvc/cvc_dec.h>
#include <solvers/prop/aig_prop.h>
#include <solvers/sat/dimacs_cnf.h>

#include "cbmc_solvers.h"
#include "bv_cbmc.h"
#include "cbmc_dimacs.h"
#include "counterexample_beautification.h"
#include "version.h"

/*******************************************************************\

Function: cbmc_solverst::get_smt1_solver_type

  Inputs: None

 Outputs: An smt1_dect::solvert giving the solver to use.

 Purpose: Uses the options to pick an SMT 1.2 solver

\*******************************************************************/

smt1_dect::solvert cbmc_solverst::get_smt1_solver_type() const
{
  assert(options.get_bool_option("smt1"));

  smt1_dect::solvert s=smt1_dect::solvert::GENERIC;

  if(options.get_bool_option("boolector"))
    s=smt1_dect::solvert::BOOLECTOR;
  else if(options.get_bool_option("mathsat"))
    s=smt1_dect::solvert::MATHSAT;
  else if(options.get_bool_option("cvc3"))
    s=smt1_dect::solvert::CVC3;
  else if(options.get_bool_option("cvc4"))
    s=smt1_dect::solvert::CVC4;
  else if(options.get_bool_option("opensmt"))
    s=smt1_dect::solvert::OPENSMT;
  else if(options.get_bool_option("yices"))
    s=smt1_dect::solvert::YICES;
  else if(options.get_bool_option("z3"))
    s=smt1_dect::solvert::Z3;
  else if(options.get_bool_option("generic"))
    s=smt1_dect::solvert::GENERIC;

  return s;
}

/*******************************************************************\

Function: cbmc_solverst::get_smt2_solver_type

  Inputs: None

 Outputs: An smt2_dect::solvert giving the solver to use.

 Purpose: Uses the options to pick an SMT 2.0 solver

\*******************************************************************/

smt2_dect::solvert cbmc_solverst::get_smt2_solver_type() const
{
  assert(options.get_bool_option("smt2"));

  smt2_dect::solvert s=smt2_dect::solvert::GENERIC;

  if(options.get_bool_option("boolector"))
    s=smt2_dect::solvert::BOOLECTOR;
  else if(options.get_bool_option("mathsat"))
    s=smt2_dect::solvert::MATHSAT;
  else if(options.get_bool_option("cvc3"))
    s=smt2_dect::solvert::CVC3;
  else if(options.get_bool_option("cvc4"))
    s=smt2_dect::solvert::CVC4;
  else if(options.get_bool_option("opensmt"))
    s=smt2_dect::solvert::OPENSMT;
  else if(options.get_bool_option("yices"))
    s=smt2_dect::solvert::YICES;
  else if(options.get_bool_option("z3"))
    s=smt2_dect::solvert::Z3;
  else if(options.get_bool_option("generic"))
    s=smt2_dect::solvert::GENERIC;

  return s;
}

/*******************************************************************\

Function: cbmc_solverst::get_default

  Inputs:

 Outputs:

 Purpose: Get the default decision procedure

\*******************************************************************/

std::unique_ptr<cbmc_solverst::solvert> cbmc_solverst::get_default()
{
  auto solver=std::unique_ptr<solvert>(new solvert);

  if(options.get_bool_option("beautify") ||
     !options.get_bool_option("sat-preprocessor")) // no simplifier
  {
    // simplifier won't work with beautification
    solver->set_prop(
      std::unique_ptr<satcheck_no_simplifiert>(new satcheck_no_simplifiert));
  }
  else // with simplifier
  {
    solver->set_prop(std::unique_ptr<satcheckt>(new satcheckt));
  }

  solver->prop().set_message_handler(get_message_handler());

  auto bv_cbmc=std::unique_ptr<bv_cbmct>(new bv_cbmct(ns, solver->prop()));

  if(options.get_option("arrays-uf")=="never")
    bv_cbmc->unbounded_array=bv_cbmct::unbounded_arrayt::U_NONE;
  else if(options.get_option("arrays-uf")=="always")
    bv_cbmc->unbounded_array=bv_cbmct::unbounded_arrayt::U_ALL;

  solver->set_prop_conv(std::move(bv_cbmc));

  return solver;
}

/*******************************************************************\

Function: cbmc_solverst::get_dimacs

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

std::unique_ptr<cbmc_solverst::solvert> cbmc_solverst::get_dimacs()
{
  no_beautification();
  no_incremental_check();

  auto prop=std::unique_ptr<dimacs_cnft>(new dimacs_cnft);
  prop->set_message_handler(get_message_handler());

  std::string filename=options.get_option("outfile");

  auto cbmc_dimcas=
    std::unique_ptr<cbmc_dimacst>(new cbmc_dimacst(ns, *prop, filename));

  return std::unique_ptr<solvert>(
    new solvert(std::move(cbmc_dimcas), std::move(prop)));
}

/*******************************************************************\

Function: cbmc_solverst::get_bv_refinement

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

std::unique_ptr<cbmc_solverst::solvert> cbmc_solverst::get_bv_refinement()
{
  auto prop=[this]
  {
    // We offer the option to disable the SAT preprocessor
    if(options.get_bool_option("sat-preprocessor"))
    {
      no_beautification();
      return std::unique_ptr<propt>(new satcheckt);
    }
    return std::unique_ptr<propt>(new satcheck_no_simplifiert);
  }();

  prop->set_message_handler(get_message_handler());

  auto bv_refinement=
    std::unique_ptr<bv_refinementt>(new bv_refinementt(ns, *prop));
  bv_refinement->set_ui(ui);

  // we allow setting some parameters
  if(options.get_option("max-node-refinement")!="")
    bv_refinement->max_node_refinement =
      options.get_unsigned_int_option("max-node-refinement");

  bv_refinement->do_array_refinement =
    options.get_bool_option("refine-arrays");
  bv_refinement->do_arithmetic_refinement =
    options.get_bool_option("refine-arithmetic");

  return std::unique_ptr<solvert>(
    new solvert(std::move(bv_refinement), std::move(prop)));
}

/*******************************************************************\

Function: cbmc_solverst::get_smt1

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

std::unique_ptr<cbmc_solverst::solvert> cbmc_solverst::get_smt1(
  smt1_dect::solvert solver)
{
  no_beautification();
  no_incremental_check();

  const std::string &filename=options.get_option("outfile");

  if(filename=="")
  {
    if(solver==smt1_dect::solvert::GENERIC)
    {
      error() << "please use --outfile" << eom;
      throw 0;
    }

    auto smt1_dec=std::unique_ptr<smt1_dect>(new smt1_dect(
      ns,
      "cbmc",
      "Generated by CBMC " CBMC_VERSION,
      "QF_AUFBV",
      solver));

    return std::unique_ptr<solvert>(new solvert(std::move(smt1_dec)));
  }
  else if(filename=="-")
  {
    auto smt1_conv=std::unique_ptr<smt1_convt>(new smt1_convt(
      ns,
      "cbmc",
      "Generated by CBMC " CBMC_VERSION,
      "QF_AUFBV",
      solver,
      std::cout));

    smt1_conv->set_message_handler(get_message_handler());

    return std::unique_ptr<solvert>(new solvert(std::move(smt1_conv)));
  }
  else
  {
    auto out=std::unique_ptr<std::ofstream>(new std::ofstream(
    #ifdef _MSC_VER
      widen(filename)
    #else
      filename
    #endif
    )); // NOLINT(whitespace/parens)

    if(!out)
    {
      error() << "failed to open " << filename << eom;
      throw 0;
    }

    auto smt1_conv=std::unique_ptr<smt1_convt>(new smt1_convt(
      ns,
      "cbmc",
      "Generated by CBMC " CBMC_VERSION,
      "QF_AUFBV",
      solver,
      *out));

    smt1_conv->set_message_handler(get_message_handler());

    return std::unique_ptr<solvert>(
      new solvert(std::move(smt1_conv), std::move(out)));
  }
}

/*******************************************************************\

Function: cbmc_solverst::get_smt2

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

std::unique_ptr<cbmc_solverst::solvert> cbmc_solverst::get_smt2(
  smt2_dect::solvert solver)
{
  no_beautification();

  const std::string &filename=options.get_option("outfile");

  if(filename=="")
  {
    if(solver==smt2_dect::solvert::GENERIC)
    {
      error() << "please use --outfile" << eom;
      throw 0;
    }

    auto smt2_dec=std::unique_ptr<smt2_dect>(new smt2_dect(
      ns,
      "cbmc",
      "Generated by CBMC " CBMC_VERSION,
      "QF_AUFBV",
      solver));

    if(options.get_bool_option("fpa"))
      smt2_dec->use_FPA_theory=true;

    return std::unique_ptr<solvert>(new solvert(std::move(smt2_dec)));
  }
  else if(filename=="-")
  {
    auto smt2_conv=std::unique_ptr<smt2_convt>(new smt2_convt(
      ns,
      "cbmc",
      "Generated by CBMC " CBMC_VERSION,
      "QF_AUFBV",
      solver,
      std::cout));

    if(options.get_bool_option("fpa"))
      smt2_conv->use_FPA_theory=true;

    smt2_conv->set_message_handler(get_message_handler());

    return std::unique_ptr<solvert>(new solvert(std::move(smt2_conv)));
  }
  else
  {
    auto out=std::unique_ptr<std::ofstream>(new std::ofstream(
    #ifdef _MSC_VER
      widen(filename)
    #else
      filename
    #endif
    )); // NOLINT(whitespace/parens)

    if(!*out)
    {
      error() << "failed to open " << filename << eom;
      throw 0;
    }

    auto smt2_conv=std::unique_ptr<smt2_convt>(new smt2_convt(
      ns,
      "cbmc",
      "Generated by CBMC " CBMC_VERSION,
      "QF_AUFBV",
      solver,
      *out));

    if(options.get_bool_option("fpa"))
      smt2_conv->use_FPA_theory=true;

    smt2_conv->set_message_handler(get_message_handler());

    return std::unique_ptr<solvert>(
      new solvert(std::move(smt2_conv), std::move(out)));
  }
}

/*******************************************************************\

Function: cbmc_solverst::no_beautification

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

void cbmc_solverst::no_beautification()
{
  if(options.get_bool_option("beautify"))
  {
    error() << "sorry, this solver does not support beautification" << eom;
    throw 0;
  }
}

/*******************************************************************\

Function: cbmc_solverst::no_incremental_check

  Inputs:

 Outputs:

 Purpose:

\*******************************************************************/

void cbmc_solverst::no_incremental_check()
{
  if(options.get_bool_option("all-properties") ||
     options.get_option("cover")!="" ||
     options.get_option("incremental-check")!="")
  {
    error() << "sorry, this solver does not support incremental solving" << eom;
    throw 0;
  }
}
