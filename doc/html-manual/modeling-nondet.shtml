<!--#include virtual="header.inc" -->

<p><a href="./">CPROVER Manual TOC</a></p>

<h2>Nondeterminism</h2>

<h3>Rationale</h3>

<p class="justified">Programs typically read inputs from an environment. 
These inputs can take the form of data read from a file, keyboard or network
socket, or arguments passed on the command line.  It is usually desirable to
analyze the program for any choice of these inputs.  In Model Checking,
inputs are therefore modeled by means of <i>nondeterminism</i>, which means
that the value of the input is not specified. The program may follow any
computation that results from any choice of inputs.</p>

<h3>Sources of Nondeterminism</h3>

<p>The CPROVER tools support the following sources of nondeterminism:</p>

<ul>
<li>functions that read inputs from the environments;</li>
<li>the thread schedule in concurrent programs;</li>
<li>initial values of local-scoped variables and memory allocated with
<code>malloc</code>;</li>
<li>initial values of variables that are <code>extern</code> in all
compilation units;</li>
<li>explicit functions for generating nondeterminism.</li>
</ul>

<p class="justified">The CPROVER tools are shipped with a number of stubs
for the most commonly used library functions. When executing a statement
such as <code>getchar()</code>, a nondeterministic value is chosen instead
of reading a character from the keyboard.

<p class="justified">When desired, nondeterminism can be introduced
explicitly into the program by means of functions that begin with the
prefix <code>nondet_</code>. As an example, the following function
returns a nondeterministically chosen unsigned short int:
</p>

<code>
unsigned short int nondet_ushortint();
</code>

<p class="justified">Note that the body of the function is not defined.  The
name of the function itself is irrelevant (save for the prefix), but must be
unique.  Also note that a nondeterministic choice is not to be confused with
a probabilistic (or random) choice.</p>

<h3>Uninterpreted Functions</h3>

<p class="justified">It may be necessary to check parts of a program
independently. Nondeterminism can be used to over-approximate the
behaviour of part of the system which is not being checked.  Rather
than calling a complex or unrelated function, a nondeterministic stub
is used. However, separate calls to the function can return different
results, even for the same inputs.  If the function output only
depends on its inputs then this can introduce spurious errors.  To
avoid this problem, functions whose names begin with the
prefix <code>__CPROVER_uninterpreted_</code> are treated as
uninterpreted functions.  Their value is non-deterministic but different
invocations will return the same value if their inputs are the same.
Note that uninterpreted functions are not supported by all back-end solvers.</p>

<!--#include virtual="footer.inc" -->
