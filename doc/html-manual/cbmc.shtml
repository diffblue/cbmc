<!--#include virtual="header.inc" -->

<link rel="stylesheet" href="highlight/styles/default.css">
<script src="highlight/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>

<p><a href="./">CPROVER Manual TOC</a></p>

<h2>CBMC: Bounded Model Checking for C/C++ and Java</h2>

<h3>A Short Tutorial</h3>

<h4>First Steps</h4>

<p class="justified">
We assume you have already installed CBMC and the necessary support files
on your system. If not so, please follow <a href="installation-cbmc.shtml">
these instructions</a>.
</p>

<p class="justified">
Like a compiler, CBMC takes the names of .c files as command line
arguments. CBMC then translates the program and merges the function
definitions from the various .c files, just like a linker. But instead
of producing a binary for execution, CBMC performs symbolic simulation on
the program.
</p>

<p class="justified">
As an example, consider the following simple program, named
<a href="file1.c">file1.c</a>:
<p/>

<pre><code class="c">int puts(const char *s) { }

int main(int argc, char **argv) {
  puts(argv[2]);
}
</code></pre>

<p class="justified">
Of course, this program is faulty, as the <code>argv</code> array might have fewer
than three elements, and then the array access <code>argv[2]</code> is out of bounds.
Now, run CBMC as follows:
</p>

<code>
&nbsp;&nbsp;cbmc file1.c --show-properties --bounds-check --pointer-check
</code>

<p class="justified">The two options <code>--bounds-check</code> and <code>--pointer-check</code>
instruct CBMC to look for errors related to pointers and array bounds.
CBMC will print the list of properties it checks. Note that it lists,
among others, a property labeled with "object bounds in argv" together with
the location of the faulty array access.  As you can see, CBMC largely
determines the property it needs to check itself.  This is realized by means
of a preliminary static analysis, which relies on computing a fixed point on
various <a
href="http://en.wikipedia.org/wiki/Abstract_interpretation">abstract
domains</a>.  More detail on automatically generated properties is provided
<a href="properties.shtml">here</a>.</p>

<p class="justified">
Note that these automatically generated properties need not necessarily
correspond to bugs &ndash; these are just <i>potential</i> flaws, as
abstract interpretation might be imprecise.  Whether these properties
hold or correspond to actual bugs needs to be determined by further analysis.
</p>

<p class="justified">
CBMC performs this analysis using <i>symbolic simulation</i>, which
corresponds to a translation of the program into a formula.  The formula is
then combined with the property.  Let's look at the formula that is
generated by CBMC's symbolic simulation:</p>

<code>
&nbsp;&nbsp;cbmc file1.c --show-vcc --bounds-check --pointer-check
</code>

<p class="justified">
With this option, CBMC performs the symbolic simulation and prints the
verification conditions on the screen. A verification condition needs
to be proven to be valid by a <i><a href="http://en.wikipedia.org/wiki/Decision_problem">
decision procedure</a></i> in order to assert that the corresponding property
holds. Let's run the decision procedure:</p>

<code>
&nbsp;&nbsp;cbmc file1.c --bounds-check --pointer-check
</code>

<p class="justified">
CBMC transforms the equation you have seen before into CNF and passes it to
a SAT solver (more background on this step is in the book on <a
href="http://www.decision-procedures.org/">Decision Procedures</a>).  It
then determines which of the properties that it has generated for the
program hold and which do not.  Using the SAT solver, CBMC detects that the
property for the object bounds of <code>argv</code> does not hold, and will
thus print a line as follows:
</p>

<code>
[main.pointer_dereference.6] dereference failure: object bounds in argv[(signed long int)2]: FAILURE
</code>

<h3>Counterexample Traces</h3>

<p class="justified">
Let us have a closer look at this property and why it fails. To aid the
understanding of the problem, CBMC can generate a <i>counterexample
trace</i> for failed properties. To obtain this trace, run
</P

<code>
&nbsp;&nbsp;cbmc file1.c --bounds-check --pointer-check --property main.pointer_dereference.6
</code>

<p class="justified">
CBMC then prints a counterexample trace, i.e., a program trace that begins
with <code>main</code> and ends in a state which violates the property.  In
our example, the program trace ends in the faulty array access.  It also
shows the values the input variables must have for the bug to occur.  In
this example, <code>argc</code> must be one to trigger the out-of-bounds
array access.  If you add a branch to the example that requires that
<code>argc&gt;=3</code>, the bug is fixed and CBMC will report that the
proofs of all properties have been successful.</p>

<h3>Verifying Modules</h3>

<p class="justified">
In the example above, we used a program that starts with a <code>main</code>
function. However, CBMC is aimed at embedded software, and these
kinds of programs usually have different entry points. Furthermore, CBMC
is also useful for verifying program modules. Consider the following example,
called <a href="file2.c">file2.c</a>:
</p>

<pre><code>int array[10];
int sum() {
  unsigned i, sum;

  sum=0;
  for(i=0; i&lt;10; i++)
    sum+=array[i];
}
</code></pre>

<p class="justified">
In order to set the entry point to the <code>sum</code> function, run
</p>

<code>
&nbsp;&nbsp;cbmc file2.c --function sum --bounds-check
</code>

<p class="justified">
It is often necessary to build a suitable <i>harness</i> for the function
in order to set up the environment appropriately.
</p>

<h3>Loop Unwinding</h3>

<p class="justified">
When running the previous example, you will have noted that CBMC unwinds the
<code>for</code> loop in the program.  As CBMC performs Bounded Model
Checking, all loops have to have a finite upper run-time bound in order to
guarantee that all bugs are found.  CBMC can optionally check that enough
unwinding is performed.  As an example, consider the program <a
href="binsearch.c">binsearch.c</a>:
</p>

<pre><code>int binsearch(int x) {
  int a[16];
  signed low=0, high=16;

  while(low&lt;high) {
    signed middle=low+((high-low)>>1);

    if(a[middle]&lt;x)
      high=middle;
    else if(a[middle]&gt;x)
      low=middle+1;
    else // a[middle]==x
      return middle;
  }

  return -1;
}
</code></pre>

<p class="justified">
If you run CBMC on this function, you will notice that the unwinding
does not stop on its own.  The built-in simplifier is not able to determine
a run time bound for this loop.  The unwinding bound has to be given as a
command line argument:</p>

<code>
&nbsp;&nbsp;cbmc binsearch.c --function binsearch --unwind 6 --bounds-check --unwinding-assertions
</code>

<p class="justified">
CBMC verifies that verifies the array accesses are within the bounds; note
that this actually depends on the result of the right shift.  In addition,
as CBMC is given the option
<nobr><code>--unwinding-assertions</code></nobr>, it also checks that enough
unwinding is done, i.e., it proves a run-time bound.  For any lower
unwinding bound, there are traces that require more loop iterations.  Thus,
CBMC will report that the unwinding assertion has failed. As usual, a counterexample
trace that documents this can be obtained with the option
<code>--property</code>.
</p>

<h3>Unbounded Loops</h3>

<p class="justified">
CBMC can also be used for programs with unbounded loops. In this
case, CBMC is used for bug hunting only; CBMC does not attempt to find
all bugs. The following program
(<a href="lock-example.c">lock-example.c</a>) is an example
of a program with a user-specified property:</p>

<pre><code>_Bool nondet_bool();
_Bool LOCK = 0;

_Bool lock() {
  if(nondet_bool()) {
    assert(!LOCK);
    LOCK=1;
    return 1; }

  return 0;
}

void unlock() {
  assert(LOCK);
  LOCK=0;
}

int main() {
  unsigned got_lock = 0;
  int times;

  while(times > 0) {
    if(lock()) {
      got_lock++;
      /* critical section */
    }

    if(got_lock!=0)
      unlock();

    got_lock--;
    times--;
} }
</code></pre>

<p class="justified">
The <code>while</code> loop in the <code>main</code> function has no
(useful) run-time bound.  Thus, a bound has to be set on the amount of
unwinding that CBMC performs.  There are two ways to do so:
</p>

<ol>

<li>The <code>--unwind</code> command-line parameter can to be used to limit
the number of times loops are unwound.</li>

<li>The <code>--depth</code> command-line parameter can be used to limit
the number of program steps to be processed.</li>

</ol>

<p class="justified">
Given the option <code>--unwinding-assertions</code>, CBMC checks whether
the arugment to <code>--unwind</code> is large enough to cover all program
paths. If the argument is too small, CBMC will detect that not enough
unwinding is done reports that an unwinding assertion has failed.
</p>

<p class="justified">
Reconsider the example. For a loop unwinding bound of one, no bug is found.
But already for a bound of two, CBMC detects a trace that violates an
assertion. Without unwinding assertions, or when using the <code>--depth</code>
command line switch, CBMC does not prove the program correct, but it can be
helpful to find program bugs. The various command line options that CBMC
offers for loop unwinding are described in the section on
<a href="cbmc-loops.shtml">understanding loop unwinding</a>.</p>

<h3>A Note About Compilers and the ANSI-C Library</h3>

<p class="justified">
Most C programs make use of functions provided by a library; instances are
functions from the standard ANSI-C library such as <code>malloc</code> or
<code>printf</code>. The verification of programs that use such functions
has two requirements:</p>

<ol>

<li>Appropriate header files have to be provided. These header files
contain <i>declarations</i> of the functions that are to be used.
</li>

<li>Appropriate <i>definitions</i> have to be provided.</li>

</ol>

<p class="justified">
Most C compilers come with header files for the ANSI-C library functions. 
We briefly discuss how to obtain/install these library files.
</p>

<h4>Linux</h4>

<p class="justified">
Linux systems that are able to compile software are usually equipped with
the appropriate header files. Consult the documentation of your distribution
on how to install the compiler and the header files. First try to compile
some significant program before attempting to verify it.
</p>

<h4>Windows</h4>

<p class="justified">
On Microsoft Windows, CBMC is pre-configured to use the compiler that is
part of Microsoft's Visual Studio.  Microsoft's <a
href="http://www.visualstudio.com/en-us/products/visual-studio-community-vs">
Visual Studio Community</a> is fully featured and available for download for
free from the Microsoft webpage.  Visual Studio installs the usual set of
header files together with the compiler.  However, the Visual Studio
compiler requires a large set of environment variables to function
correctly.  It is therefore required to run CBMC from the <i>Visual Studio
Command Prompt</i>, which can be found in the menu <i>Visual Studio
Tools</i>.
</p>

<p class="justified">
Note that in both cases, only header files are available. CBMC only
comes with a small set of definitions, which includes functions such as
<code>malloc</code>. Detailed information about the built-in definitions is
<a href="libraries.shtml">here</a>.</p>

<h3>Command Line Interface</h3>

<p class="justified">
This section describes the command line interface of CBMC. Like a C
compiler, CBMC takes the names of the .c source files as arguments.
Additional options allow to customize the behavior of CBMC. Use
<code>cbmc --help</code> to get a full list of the available options.
</p>

<p class="justified">
Structured output can be obtained from CBMC using the option <code>--xml-ui</code>.
Any output from CBMC (e.g., counterexamples) will then use an XML
representation.
</p>

<div class="box1">
<div class="caption">Further Reading</div>

<p>
<ul>
<li><a href="cbmc-loops.shtml">Understanding Loop Unwinding</a></li>
<li><a target=_top href="http://www-2.cs.cmu.edu/~svc/papers/view-publications-ck03.html">
    Hardware Verification using ANSI-C Programs as a Reference</a></li>
<li><a target=_top href="http://www-2.cs.cmu.edu/~svc/papers/view-publications-cky03.html">
    Behavioral Consistency of C and Verilog Programs Using Bounded Model
    Checking</a></li>
<li><a target=_top href="http://www-2.cs.cmu.edu/~svc/papers/view-publications-ckl2004.html">A
    Tool for Checking ANSI-C Programs</a></li>
</ul>
</p>

<p class="justified">
We also have a <a href="http://www.cprover.org/cbmc/applications.shtml">list of
interesting applications of CBMC</a>.</p>

</div>

<!--#include virtual="footer.inc" -->

