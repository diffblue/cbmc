<!--#include virtual="header.inc" -->

<link rel="stylesheet" href="highlight/styles/default.css">
<script src="highlight/highlight.pack.js"></script>
<script>hljs.initHighlightingOnLoad();</script>

<p><a href="./">CPROVER Manual TOC</a></p>

<h2>The CPROVER Source Code Reference</h2>

<p class="justified">
The following sections provide an introduction for anybody who
wishes to modify CBMC or build new tools on top of the APIs used
by CBMC. They summarize key components, data structures and APIs
that are used to build the CPROVER tools.
</p>

<h3>Source Code Availability and Compilation</h3>

<p class="justified">
The most recent source code of CBMC and the CPROVER infrastructure can be obtained
via git at <a
href="https://github.com/diffblue/cbmc.git">https://github.com/diffblue/cbmc.git</a>.
Tar balls for releases are available at <a
href="https://github.com/diffblue/cbmc/releases">https://github.com/diffblue/cbmc/releases</a>.
</p>

<p class="justified">
Detailed instructions on how to build CBMC from source are given
in the file <a href="https://raw.githubusercontent.com/diffblue/cbmc/master/COMPILING">COMPILING</a>.
</p>

<h3>Components</h3>

<center><img src="c_to_ir.svg" width=500></center>
<center>From C source code file to CPROVER's IR</center>

<p class="justified">
The sources of the C frontend are located in the "src/ansi-c" directory.  It
uses a standard Flex/Bison setup for scanning and parsing the files. The
Flex scanner produces a token sequence, which is turned into a tree
representation of the input program using the Bison grammar.  The
typechecker subsequently annotates this parse tree with types and generates
a symbol table.  The symbol table is a map from identifiers (functions,
variables and types) to their definitions.
</p>

<p class="justified">
The following example illustrates how to use the frontend for parsing files and
for translating them into a symbol table.  A call to <i>parse</i> generates
the parse tree of the program.  The conversion into the symbol table is
performed during type checking, which is done by a call to the
<i>typecheck</i> method.  The symbol table is a map from identifiers to the
<i>symbolt</i> data structure.
</p>

<pre><code class="c++">#include &lt;iostream&gt;
#include &lt;fstream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

#include &lt;ansi-c/ansi_c_language.h&gt;
#include &lt;util/cmdline.h&gt;
#include &lt;util/config.h&gt;

int main(int argc, const char* argv[])
{
   // Command line: parse  -I incl_dir file1 ...
   cmdlinet cmdl;
   cmdl.parse(argc, argv, "I:");

   config.init();

   if(cmdl.isset('I'))	
     config.ansi_c.include_paths=cmdl.get_values('I');

   // Set language to C
   std::auto_ptr&lt;languaget&gt; clang=new_ansi_c_language();

   // Symbol table
   symbol_tablet my_symbol_table;

   for(const auto & arg : cmdl.args)
   {
     // Source code stream
     std::ifstream in(arg.c_str());	

     // Parse
     clang-&gt;parse(in, "", std::cerr);

     // Typecheck
     clang-&gt;typecheck(my_symbol_table, arg, std::cerr);
  }

  // Do some final adjustements
  clang-&gt;final(my_symbol_table, std::cerr);

  my_symbol_table.show(std::cout);

  return 0;
}
</code></pre>

<p class="justified">
The parse trees are implemented using a class called <i>irept</i>.  Its
declaration and definiton can be found in the files "src/util/irep.h" and
"src/util/irep.cpp", respectively.
</p>

<p class="justified">
The excerpt below gives some details of the class <i>irept</i>:
</p>

<pre><code class="c++">class irept
{
public:
  typedef std::vector<irept> subt;
  typedef std::map<irep_name_string, irept> named_subt;
  ...

public:
  class dt
  {
  public:
    unsigned ref_count;
    dstring data;
    named_subt named_sub;
    named_subt comments;
    subt sub;
    ...
  };

protected:
  dt *data;
  ...
};
</pre></code>

<p class="justified">
Every node of any tree is an object of class <i>irept</i>. Each node has a
pointer to an object of class <i>dt</i>. The <i>dt</i> objects are used
for storing the actual content of nodes. Objects of class <i>dt</i> are
dynamically allocated and can be shared between nodes. A reference-counter
mechanism is implemented to automatically free unreachable <i>dt</i>
objects. A shallow copy of a tree is an <i>O</i>(1) operation.
</p>

<p class="justified">
The field <i>data</i> of class <i>dt</i> is a (hashed) string
representing the label of the nodes. The fields <i>named_sub</i>,
<i>comments</i> and <i>sub</i> are links to childs. Edges are either
labeled with a string or ordered. The string-labeled edges are stored in the
map <i>comments</i> if their first character is '#'. Otherwise, they are
stored in the map <i>named_sub</i>. The labels of edges are unique for a
given node; however, their ordering is not preserved. The field <i>sub</i>
is a vector of nodes that is used for storing the ordered children. The order
of edges of this kind is preserved during copy.
</p>

<center><img src="ireptree.svg" width=350></center>
<center>Tree for the expression <i>a+b</i> with <i>int a; char
b;</i>.</center>

<h4>Interface of Class <i>irept</i></h4>

<h5>id</h5>

<pre><code class="c++">const irep_idt &amp;id();
void id(const irep_idt &amp;_data);
</code></pre>

<p class="justified">
The first method returns a constant reference to the label of the node. The
second method sets the label of the node.
</p>

<h5>is_nil and is_not_nil</h5>

<pre><code class="c++">virtual bool is_nil() const;
virtual bool is_not_nil() const;
</code></pre>

<p class="justified">
The first  method returns true if the label of the node is equal to  "nil".
The second method returns false if the label of the node is equal to "nil".
</p>

<h5>find, add and get</h5>

<pre><code class="c++">const irept &amp;find(const irep_namet &amp;name) const;
irept &amp;add(const irep_namet &amp;name);
const irep_idt &amp;get(const irep_namet &amp;name) const;
</code></pre>

<ol>

<li>The first method looks for an edge with label <i>name</i>
and returns the corresponding child. If no edge with label <i>name</i>
is found, then <i>nil_rep</i> is returned.</li>

<li>The second method does the same as the first except that if
no edge with label <i>name</i> if found, then a new child is created
and returned.
</li>

<li>The third method does the same as the first except that the label
of the child is returned (instead of a reference).
If no edge with label <i>name</i> is found, then an empty
string is returned.
</li>

</ol>

<h5>set</h5>

<pre><code class="c++">void set(const irep_namet &amp;name,
         const irep_idt &amp;value);
void set(const irep_namet &amp;name, const long value);
void set(const irep_namet &amp;name, const irept &amp;irep);
</code></pre>

<p class="justified">
These methods create a new edge with label <i>name</i>.
</p>

<p class="justified">
If the second argument is an object of class <i>irept</i>, then it is
assigned to the new child.

<p class="justified">
If the second argument is a string, then it is set as node-label of the new child.

<p class="justified">
If the second argument is a number, then it is converted to a
string and set as node-label of the new child.

<h5>remove</h5>

<pre><code class="c++">void remove(const irep_namet &amp;name);
</code></pre>

<p class="justified">
This method looks for an edge with label <i>name</i>
and removes it.

<h5>move_to_sub and move_to_named_sub</h5>

<pre><code class="c++">void move_to_sub(irept &amp;irep);
void move_to_named_sub(const irep_namet &amp;name, irept &amp;irep);
</code></pre>

<p class="justified">
The first method creates a new ordered edge with a child equal to
<i>irep</i>. Then it sets <i>irep</i> to <i>nil</i>. The index of the
edge is equal to the size of vector <i>sub</i> before the call.
</p>

<p class="justified">
The second method does the same but for labeled edges.
</p>

<h5>swap</h5>

<pre><code class="c++">void swap(irept &amp;irep);
</code></pre>

<p class="justified">
Exchange the content of the invoked node with the one of <i>irep</i>.
</p>

<h5>make_nil</h5>

<pre><code class="c++">void make_nil();
</code></pre>

<p class="justified">
Set the label of the node to "nil" and remove all outgoing edges.
</p>

<h5>get_sub and get_named_sub and get_comments</h5>

<pre><code class="c++">const subt &amp;get_sub();
const named_subt &amp;get_named_sub();
const named_subt &amp;get_comments();
</code></pre>

<p class="justified">
Return a constant reference to
<i>sub</i>, <i>named_sub</i>, and <i>comments</i>,  respectively.
</p>

<h3>Types</h3>

<p class="justified">
The class <i>typet</i> inherits from <i>irept</i>. Types may have
subtypes. This is modeled with two edges named "subtype" and "subtypes". The
class <i>typet</i> only add specialized methods for accessing the subtype
information to the interface of <i>irept</i>.
</p>

<h4>Interface of class <i>typet</i></h4>

<h5>has_subtype and has_subtypes</h5>

<pre><code class="c++">bool has_subtype() const;
bool has_subtypes() const;
</code></pre>

<p class="justified">
The first method returns true if the a subtype node exists. is not
<i>nil</i>. The second method returns true is a subtypes node exists.
</p>

<h5>subtype and subtypes</h5>

<pre><code class="c++">typet &amp;subtype();
typest &amp;subtypes();
</code></pre>

<p class="justified">
The first method returns a reference to the 'subtype' node.
The second method returns a reference to the vector of subtypes.
</p>

<h4>Subtypes of <i>typet</i></h4>

<p class="justified">
A number of subtypes of <code>typet</code> exist which allow convenient
creation and manipulation of <code>typet</code> objects for special types.
</p>

<table>
<tr><th>Class</th><th>Description</th></tr>

<tr><td valign=top><code>bool_typet</code></td>
<td>Boolean type</td></tr>

<tr><td valign=top><code>symbol_typet</code></td>
<td>Symbol type. Has edge "identifier" to a string value, which can be accessed with <code>get_identifier</code> and <code>set_identifier</code>.</td></tr>

<tr><td valign=top><code>struct_typet</code>, <code>union_typet</code></td>
<td>Represent a struct, resp.&nbsp;union types. Convenience functions to access components <code>components()</code>.</td></tr>

<tr><td valign=top><code>code_typet</code></td>
<td>The type of a function/procedure. Convenience functions to access <code>arguments()</code> and <code>return_type()</code>. </td></tr>

<tr><td valign=top><code>array_typet</code></td>
<td>Convenience function <code>size()</code> to access size of the array.</td></tr>

<tr><td valign=top><code>pointer_typet</code></td>
<td>Pointer type, subtype stores the type of the object pointed to.</td></tr>

<tr><td valign=top><code>reference_typet</code></td>
<td>Represents a reference type, subtype stores the type of the object referenced to. </td></tr>

<tr><td valign=top><code>bv_typet</code></td>
<td>Represents a bit vector type with variable width.</td></tr>

<tr><td valign=top><code>fixed_bv_typet</code></td>
<td>Represents a bit vector that encodes a fixed-point number.</td></tr>

<tr><td valign=top><code>floatbv_typet</code></td>
<td>Represents a bit vector that encodes a floating-point number.</td></tr>

<tr><td valign=top><code>string_typet</code></td>
<td>Represents a string type.</td></tr>

</table>

<h3>Source Locations</h3>

<p class="justified">
The class <i>source_locationt</i> inherits from the class <i>irept</i>.  It
is used to store locations in text files.  It adds specialized methods to
manipulate the edges named "file", "line", "column", "function".
</p>

<h3>Expressions</h3>

<p class="justified">
The class <i>exprt</i> inherits from class <i>irept</i>. Expressions
have operands and a type. This is modeled with ordered edges for the
operands and an edge labeled"type", respectively. The class <i>exprt</i>
only adds specialized methods for accessing operands and type information
to the interface of <i>irept</i>.
</p>

<center><img src="expr.svg" width=150></center>
<center>Representation of a binary expression</center>

<h4>Interface of class <i>exprt</i></h4>

<h5>constructors</h5>

<pre><code class="c++">explicit exprt(const irep_idt &amp;id);
</code></pre>

<p class="justified">
Creates an <i>exprt</i> object with a given label and no type.
</p>
 
<pre><code class="c++">exprt(const irep_idt &amp;id, const typet &amp;type);
</code></pre>

<p class="justified">
Creates an <i>exprt</i> object with a given label and type.
</p>

<h5>type</h5>

<pre><code class="c++">const typet &amp;type() const;
typet &amp;type();
</code></pre>

<p class="justified">
Return a reference to the 'type' node
</p>

<h5>has_operands</h5>

<pre><code class="c++">bool has_operands() const;
</code></pre>

<p class="justified">
Return true if the expression has at least one operand.
</p>

<h5>operands</h5>

<pre><code class="c++">const operandst &amp;operands() const;
</code></pre>

<p class="justified">
Return a reference to the vector of operands.
</p>

<pre><code class="c++">const exprt &amp;op0();
const exprt &amp;op1();
const exprt &amp;op2();
const exprt &amp;op3();
exprt &amp;op0();
exprt &amp;op1();
exprt &amp;op2();
exprt &amp;op3();
</code></pre>

<p class="justified">
Return a reference to a specific operand. Avoid calling
if the operand does not exist. 
</p>

<h5>Constructing common expressions</h5>

<pre><code class="c++">void make_true();
void make_false();
void make_bool(bool value);
</code></pre>

<p class="justified">
Turn the current <i>exprt</i> instance into a expression of type "bool"
with label "constant" and a single edge labeled "value", which points to
a new node with label either "true" or "false".
</p>

<pre><code class="c++">void make_typecast(const typet &amp;_type);
</code></pre> 

<p class="justified">
Turns the current <i>exprt</i> instance into a typecast.  The old value of
the instance is appended as the single operand of the typecast, i.e., the
result is a typecast-expression of the old expression to the indicated type.
</p>

<pre><code class="c++">void make_not();
</code></pre> 

<p class="justified">
Turns the current <i>exprt</i> instance into an expression with label
"not" of the same type as the original expression.  The old value of the
instance is appended as the operand of the "not"-node.  If the original
expression is of type "bool", the result represents the negation of the
original expression with the following simplifications possibly applied:
</p>

<ul>
<li>&not; &not; f = f</li>
<li>&not; <i>true</i> = <i>false</i></li>
<li>&not; <i>false</i> = <i>true</i></li>
</ul>

<pre>
void negate();
</pre> 

<p class="justified">
Turns the current <i>exprt</i> instance into a negation of itself, depending
on its type:
</p>

<ul>

<li>For boolean expressions, <code>make_not</code> is called.</li>

<li>For integers, the current instance is turned into a numeric negation
expression "unary-" of its old value.  Chains of "unary-" nodes and
negations of integer constants are simplified.</li>

<li>For all other types, <code>irept::make_nil</code> is called.</li>

</ul>

<pre><code class="c++">bool sum(const exprt &amp;expr);
bool mul(const exprt &amp;expr);
bool subtract(const exprt &amp;expr);
</code></pre> 

<p class="justified">
Expect the "this" object and the function argument to be constants of the
same numeric type.  Turn the current <code>exprt</code> instance into a
constant expression of the same type, whose "value" edge points to the
result of the sum, product, or difference of the two expressions.  If the
operation fails for some reason (e.g., the types are different),
<code>true</code> is returned.
</p>

<h5>Testing common expressions</h5>
 
<pre><code class="c++">bool is_constant() const;
</code></pre> 

<p class="justified">
Returns true if the expression label is "constant".
</p>

<pre><code class="c++">bool is_boolean() const;
</code></pre> 

<p class="justified">
Returns true if the label of the type is "bool".

<pre><code class="c++">bool is_false() const;
bool is_true() const;
</code></pre> 

<p class="justified">
The first function returns true if the expression is a boolean constant with
value "false".  The second function returns true for any boolean constant
that is not of value "false".
</p>

<pre><code class="c++">bool is_zero() const;
bool is_one() const;
</code></pre> 

<p class="justified">
The first function returns true if the expression represents a zero numeric
constant, or if the expression represents a null pointer. The second
function returns true if the expression represents a numeric constant with
value "1".
</p>

<h4>Subtypes of <i>exprt</i></h4>

<p class="justified">
A number of subtypes of <code>exprt</code> provide further convenience functions
for edge access or other specialized behaviour:
</p>

<table>

<tr><th>Class</th><th>Description</th></tr>

<tr><td valign=top><code>transt</code></td>
<td valign=top>Represents an SMV-style transition system with invariants
<code>invar()</code>, initial state <code>init()</code> and transition
function <code>trans()</code>.</td>
</tr>

<tr><td valign=top><code>true_exprt</code></td>
<td valign=top>Boolean constant true expression.</td>
</tr>

<tr><td valign=top><code>false_exprt</code></td>
<td valign=top>Boolean constant false expression.</td>
</tr>

<tr><td valign=top><code>symbol_exprt</code></td>
<td valign=top>Represents a symbol (e.g., a variable occurrence), convenience function for manipulating "identifier"-edge <code>set_identifier</code> and <code>get_identifier</code></td>
</tr>

<tr><td valign=top><code>predicate_exprt</code></td>
<td valign=top>Convenience constructors to create expressions of type "bool".</td>
</tr>

<tr><td valign=top><code>binary_relation_exprt : predicate_exprt</code></td>
<td valign=top>Convenience functions to create and manipulate binary expressions of type "bool".</td>
</tr>

<tr><td valign=top><code>equality_exprt : binary_relation_exprt</code></td>
<td valign=top>Convenience functions to create and manipulate equality expressions such as "a == b".</td>
</tr>

<tr><td valign=top><code>ieee_float_equal_exprt : binary_relation_exprt</code></td>
<td valign=top>Convenience functions to create and manipulate equality expressions between floating-point numbers.
</td>
</tr>

<tr><td valign=top><code>index_exprt</code></td>
<td valign=top>Represents an array access expression such as "a[i]". Convenience functions <code>array()</code> and <code>index()</code> for accessing the array expressions and indexing expression.</td>
</tr>

<tr><td valign=top><code>typecast_exprt</code></td>
<td valign=top>Represents a cast to the type of the expression.</td>
</tr>

<tr><td valign=top> 
<code>and_exprt</code>,
<code>implies_exprt</code>,
<code>or_exprt</code>,
<code>not_exprt</code></td>
<td valign=top>Representations of logical operators with convenience constructors.</td>
</tr>

<tr><td valign=top><code>address_of_exprt</code></td>
<td>Representation of a C-style <code>&amp;a</code> address-of operation. Convenience function <code>object()</code> for accessing operand.</td>
</tr>

<tr><td valign=top><code>dereference_exprt</code></td>
<td>Representation of a C-style <code>*a</code> pointer-dereference operation. Convenience function <code>object()</code> for accessing operand.</td>
</tr>

<tr><td valign=top><code>if_exprt</code></td>
<td>Representation of a conditional expresion, with convenience functions <code>cond()</code>, <code>true_case()</code> and <code>false_case()</code> for accessing operands.</td>
</tr>

<tr><td valign=top><code>member_exprt</code></td>
<td>Represents a <code>some_struct.some_field</code> member access.</td>
</tr>

<tr><td valign=top><code>codet</code></td>
<td>Represents a segment of code.</td>
</tr>

</table>

<h3>Symbols and the Symbol Table</h3>

<h4>Symbol</h4>

<p class="justified">
A symbol is an object of class <code>symbolt</code>. This class
is declared in "util/symbol.h". The code below shows a partial
declaration of the interface:
</p>

<pre><code class="c++">class symbolt
{
public:
  typet type;
  exprt value;
  std::string name;
  std::string base_name;
  ...
};
</code></pre>

<p class="justified">
Symbol names are unique. Scopes are handled by adding prefixes
to symbols:
</p>

<pre><code class="c++">int main(int argc, char* argv[]) {
	
	               // Symbol name: c::main::0::alice
   char alice = 0;     // Symbol base: alice
   
   {
	               // Symbol name: c::main::1::alice
       int alice = 0;  // Symbol base: alice
   }
}</code></pre>

<h4>Symbol Table</h4>

<p class="justified">
A symbol table is an object of class <code>contextt</code>. This class
is declared in "util/context.h". The code below shows a partial
declaration of the interface:
</p>

<pre><code class="c++">class symbol_tablett
{
public:
                                 // Insert the symbol
  bool add(const symbolt &symb);
                                 // Insert symb into the
                                 // table and erase it.
                                 // New_symbol points to the
                                 // newly inserted element.
  bool move(symbolt &symbol, symbolt *&new_symbol);

                                 // Insert symb into the
                                 // table. Then symb is erased.
  bool move(symbolt &symb);

                                 // Return the entry of the
                                 // symbol with given name.
  const irept &value(const std::string &name) const;
};
</code></pre>

<h2>Goto Programs</h2>

<p class="justified">
Goto programs are a representation of the control flow graph of a program
that uses only guarded goto and assume statements to model non-sequential
flow.  The main definition can be found in
"src/goto-programs/goto_program_template.h", which is a template class.  The
concrete instantiation of the template that is used in the framework can be
found in "src/goto-programs/goto_program.h".  A single instruction in a goto
program is represented by the class <i>goto_programt::instructiont</i>
whose definition can be found again in
"goto-programs/goto_program_template.h".
</p>

<p class="justified">
In the class <code>goto_programt</code>, the control flow graph is represented
as a mixture of sequential transitions between nodes, and non-sequential
transitions at goto-nodes.  The sequential flow of the program is captured
by the list <code>instructions</code> that is a field of the class
<code>goto_programt</code>.  Transitions via goto statements are represented in
the list <code>targets</code>, which is a field of the class
<code>goto_programt::instructiont</code>, i.e., each goto-instruction carries a
list of possible jump destinations.  The latter list <code>targets</code> is a
list of iterators which point to elements of the list <code>instructions</code>. 
An illustration is given in the figure below.
</p>

<center><img src="goto_program.svg" width=500></center>
<center>Representation of program flow in <i>goto_programt</i></center>

<p class="justified">
Instructions can have a number of different types as represented by
<code>enum goto_program_instruction_typet</code> and can be accessed via the
field <code>type</code> in <code>instructiont</code>.  These include:
</p>

<table>
<tr><td valign=top><code>GOTO</code></td>
<td>Represents a non-deterministic branch to the instructions given in the
list <code>targets</code>.  Goto statements are guarded, i.e., the
non-deterministic branch is only taken if the expression in
<code>guard</code> evaluates to true, otherwise the program continues
sequentially.  Guarded gotos can be used, for example, to model if
statements.  The guard is then set to the negated condition of the
statement, and goto target is set to bypass the conditionally executed code
if this guard evaluates to true.
</td>
</tr>

<tr><td valign=top><code>ASSUME</code></td>
<td>An assumption statement that restricts viable paths reaching the
instruction location to the ones that make the expression <code>guard</code>
evaluate to true.</td>
</tr>

<tr><td valign=top><code>ASSERT</code></td>
<td>An assertion whose <code>guard</code> is checked for validity when the instruction is
reached.</td>
</tr>

<tr><td valign=top><code>RETURN</code></td>
<td>A return statement in a function.</td>
</tr>

<tr><td valign=top><code>END_FUNCTION</code></td>
<td>Denotes the end of a function.</td>
</tr>

<tr><td valign=top><code>ASSIGN</code></td>
<td>A variable assignment.</td>
</tr>

<tr><td valign=top><code>SKIP</code></td>
<td>No operation.</td>
</tr>

<tr><td valign=top><code>OTHER</code></td>
<td>Any operation not covered by <code>enum
goto_program_instruction_typet</code>.</td>
</tr>

</table>

<p class="justified">
A number of convenience functions in <code>instructiont</code>, such as
<code>is_goto()</code>, <code>is_assume()</code>, etc., simplify type queries. 
The following code segment gives a partial interface declaration of
<code>goto_program_template</code> and <code>instructiont</code>.
</p>

<pre><code class="c++">template &lt;class codeT, class guardT&gt;
class goto_program_templatet
{
public:
  //list of instruction type
  typedef std::list&lt;class instructiont&gt; instructionst;

  //a reference to an instruction in the list
  typedef typename 
    std::list<class instructiont>::iterator targett;

  //Sequential list of instructions, 
  //representing sequential program flow
  instructionst instructions;

  typedef typename 
    std::map<const_targett, unsigned> target_numberst;

  //A map containing the unique number of each target
  target_numberst target_numbers;

  //Get the successors of a given instruction 
  void get_successors(targett target, targetst &amp;successors); 

  ...

 
  class instructiont
  {
  public:
    codeT code;
    
    //identifier of enclosing function
    irep_idt function;
    
    //location in the source file
    locationt location;
    
    //type of instruction?
    goto_program_instruction_typet type;

    //Guard statement for gotos, assume, assert 
    guardT guard;
    
    //targets for gotos
    targetst targets;
   
    //set of all predecessors (sequential, and gotos)
    std::set&lt;targett&gt; incoming_edges;
    
    // a globally unique number to identify a 
    // program location. It is guaranteed to be 
    // ordered in program order within one 
    // goto_program
    unsigned location_number;
    
    // a globally unique number to identify loops
    unsigned loop_number;
    
    // true if this is a goto jumping back to an 
    // earlier instruction in the sequential program 
    // flow
    bool is_backwards_goto() const;
  };

}
</code></pre>

<!--
<h3>Data Structures</h3>
-->

<!-- <h3>APIs</h3>
-->

<!--#include virtual="footer.inc" -->
