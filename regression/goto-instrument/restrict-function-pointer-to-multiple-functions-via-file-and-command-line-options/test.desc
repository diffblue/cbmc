CORE
test.c
--no-standard-checks --function-pointer-restrictions-file restrictions.json --restrict-function-pointer use_f.function_pointer_call.1/g --restrict-function-pointer-by-name use_f::fptr/h
\[use_f\.pointer_dereference\.1\] line \d+ dereferenced function pointer must be one of \[(f|g|h), (f|g|h), (f|g|h)\]: FAILURE
^EXIT=10$
^SIGNAL=0$
--
--
This test checks that the restrictions for a function pointer are the union of
the restrictions given in a file and on the command line (both with functions
pointers being numbered and named)

The test further checks that the correct safety assertions are generated. The
function pointer restriction feature outputs safety assertions for all calls
that it replaces. That is, when it replaces a call with a case distinction over
a given set of functions, it adds an assertion checking that in the original
program, indeed no other function could have been called at that location. In
this case, the function h could also be called, but the given restrictions only
include f and g, hence the safety assertion fails.
