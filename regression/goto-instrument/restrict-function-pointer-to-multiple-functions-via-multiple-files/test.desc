CORE
test.c
--no-standard-checks --function-pointer-restrictions-file restrictions_1.json --function-pointer-restrictions-file restrictions_2.json
\[use_f\.pointer_dereference\.1\] line \d+ dereferenced function pointer must be one of \[(f|g), (f|g)\]: FAILURE
^EXIT=10$
^SIGNAL=0$
--
--
This test checks that the restrictions for a function pointer are the union of
the restrictions given in multiple files. In this case, the restrictions for the
first function pointer call in use_f are f and g, provided by the files
restrictions_1.json and restrictions_2.json.

The test further checks that the correct safety assertions are generated. The
function pointer restriction feature outputs safety assertions for all calls
that it replaces. That is, when it replaces a call with a case distinction over
a given set of functions, it adds an assertion checking that in the original
program, indeed no other function could have been called at that location. In
this case, the function h could also be called, but the given restrictions only
include f and g, hence the safety assertion fails.
