CORE
test.c
--show-vcc
main::1::array!0@1#2\[\[1\]\] = main::1::array!0@1#1\[1\]
main::1::array!0@1#2\[\[2\]\] = main::1::array!0@1#1\[2\]
main::1::array!0@1#2\[\[3\]\] = main::1::array!0@1#1\[3\]
main::1::array!0@1#2\[\[4\]\] = main::1::array!0@1#1\[4\]
main::1::array!0@1#2\[\[5\]\] = main::1::array!0@1#1\[5\]
main::1::array!0@1#2\[\[6\]\] = main::1::array!0@1#1\[6\]
main::1::array!0@1#2\[\[7\]\] = main::1::array!0@1#1\[7\]
main::1::array!0@1#2\[\[8\]\] = main::1::array!0@1#1\[8\]
main::1::array!0@1#2\[\[9\]\] = main::1::array!0@1#1\[9\]
main::1::array!0@1#3\[\[0\]\] =
^EXIT=0$
^SIGNAL=0$
--
main::1::array!0@1#[2-9]\[[0-9]+\]
main::1::array!0@1#3\[\[[1-9]\]\] =
--
This checks that a write with a non-constant index leads to a whole-array
operation followed by expansion into individual array cells, while a write with
a constant index leads to direct use of a single cell symbol, even when the array
is addressed via a pointer cast to a smaller type.
