CORE
test.c
--show-vcc
main::1::array!0@1#2\[\[1\]\] = main::1::array!0@1#1\[1\]
main::1::array!0@1#2\[\[2\]\] = main::1::array!0@1#1\[2\]
main::1::array!0@1#2\[\[3\]\] = main::1::array!0@1#1\[3\]
main::1::array!0@1#2\[\[4\]\] = main::1::array!0@1#1\[4\]
main::1::array!0@1#2\[\[5\]\] = main::1::array!0@1#1\[5\]
main::1::array!0@1#2\[\[6\]\] = main::1::array!0@1#1\[6\]
main::1::array!0@1#2\[\[7\]\] = main::1::array!0@1#1\[7\]
main::1::array!0@1#2\[\[8\]\] = main::1::array!0@1#1\[8\]
main::1::array!0@1#2\[\[9\]\] = main::1::array!0@1#1\[9\]
main::1::array!0@1#2 =.*byte_extract_little_endian
main::1::array!0@1#3\[\[0\]\] = main::1::array!0@1#2\[0\]
main::1::array!0@1#3\[\[1\]\] = main::1::array!0@1#2\[1\]
main::1::array!0@1#3\[\[2\]\] = main::1::array!0@1#2\[2\]
main::1::array!0@1#3\[\[3\]\] = main::1::array!0@1#2\[3\]
main::1::array!0@1#3\[\[4\]\] = main::1::array!0@1#2\[4\]
main::1::array!0@1#3\[\[5\]\] = main::1::array!0@1#2\[5\]
main::1::array!0@1#3\[\[6\]\] = main::1::array!0@1#2\[6\]
main::1::array!0@1#3\[\[7\]\] = main::1::array!0@1#2\[7\]
main::1::array!0@1#3\[\[8\]\] = main::1::array!0@1#2\[8\]
main::1::array!0@1#3\[\[9\]\] = main::1::array!0@1#2\[9\]
^EXIT=0$
^SIGNAL=0$
--
--
This checks that when an array cell is accessed via a pointer to a large enough
type that multiple cells are required then whole-array operations are used,
rather than attempting to operate on single cell symbols.
