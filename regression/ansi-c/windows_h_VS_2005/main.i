#line 1 "test.c"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"


























#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"





#pragma once
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

















































#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"




















#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"



#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"



#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"



#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"



#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"





#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"




#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"




#pragma warning(disable:4116)       
                                    
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"



#pragma warning(disable:4514)

#pragma warning(disable:4103)
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

#pragma warning(push)
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\excpt.h"















#pragma once
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\excpt.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"














 





#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"














#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"



#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"




















    

#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\sal.h"

























































































































































































































#pragma once











#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\sal.h"
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\sal.h"



























































































































































































































#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\sal.h"



































































































































































































































    
    
#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\sal.h"






#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\sal.h"
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\sal.h"







#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"































































































#pragma pack(push,8)
#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"













#pragma once
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"






#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"









#pragma pack(push,8)
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"











#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"





typedef __w64 unsigned int   uintptr_t;
#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"

#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"





typedef char *  va_list;
#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"

#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"





#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"











#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"


#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"













#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"












































#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"






#pragma pack(pop)
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"

#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\vadefs.h"
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"









#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"




#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"








#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"






#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"






#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"













#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"





#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"







#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"







#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"




#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"




#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"


 

#line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
  
 #line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"










#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"






#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

















#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"




#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"






#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"





#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"






#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 342 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"





#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"






#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"






#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"




#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"


#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 376 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"





#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"










#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 395 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"










#line 408 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"






#line 415 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"







#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 426 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"



 
  
 



#line 437 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"


 
  
  
 



#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"


 
  
   
  

#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
 



#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 463 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"





#line 469 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"




#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"





typedef __w64 unsigned int   size_t;
#line 484 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"



typedef size_t rsize_t;

#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"





typedef __w64 int            intptr_t;
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"














typedef __w64 int            ptrdiff_t;
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"


typedef unsigned short wchar_t;

#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"


typedef unsigned short wint_t;
typedef unsigned short wctype_t;

#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"


















#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"





__declspec(deprecated("This name was supported during some Whidbey pre-releases. Instead, use the standard name errno_t.")) typedef int errcode;


#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

typedef int errno_t;
#line 563 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"


typedef __w64 long __time32_t;   

#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"



typedef __int64 __time64_t;     
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 575 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"





typedef __time64_t time_t;      
#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"







#line 592 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 593 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"




#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 600 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 601 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"




#line 606 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"






#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"




#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"



#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"











#line 638 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"




#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"




#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 650 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"







#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"



















































































































































#line 807 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"














#line 822 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1889 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"















































































































































#line 2033 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"
#line 2034 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;


typedef struct tagLC_ID {
        unsigned short wLanguage;
        unsigned short wCountry;
        unsigned short wCodePage;
} LC_ID, *LPLC_ID;

#line 2055 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"


typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned long lc_handle[6]; 
        LC_ID lc_id[6];
        struct {
            char *locale;
            wchar_t *wlocale;
            int *refcount;
            int *wrefcount;
        } lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
} threadlocinfo;

#line 2084 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"







#line 2092 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 2094 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"



#line 2098 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 2100 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"



#line 2104 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 2106 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"






#line 2113 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"



#line 2117 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"


#pragma pack(pop)
#line 2121 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 2123 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"

#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\excpt.h"






#pragma pack(push,8)
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\excpt.h"








typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;











struct _EXCEPTION_RECORD;
struct _CONTEXT;

EXCEPTION_DISPOSITION __cdecl _except_handler (
         struct _EXCEPTION_RECORD *_ExceptionRecord,
         void * _EstablisherFrame,
         struct _CONTEXT *_ContextRecord,
         void * _DispatcherContext
    );





























#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\excpt.h"















unsigned long __cdecl _exception_code(void);
void *        __cdecl _exception_info(void);
int           __cdecl _abnormal_termination(void);

#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\excpt.h"

















#pragma pack(pop)
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\excpt.h"

#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\excpt.h"
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdarg.h"















#pragma once
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdarg.h"






#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdarg.h"








#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdarg.h"
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"















#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"













#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"















typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef char *PSZ;
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"








#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"



#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"



#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"



#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"



#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"



#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"











#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"






#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"



#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"


























#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"





#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"







#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"

typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;
typedef FLOAT               *PFLOAT;
typedef BOOL            *PBOOL;
typedef BOOL             *LPBOOL;
typedef BYTE            *PBYTE;
typedef BYTE             *LPBYTE;
typedef int             *PINT;
typedef int              *LPINT;
typedef WORD            *PWORD;
typedef WORD             *LPWORD;
typedef long             *LPLONG;
typedef DWORD           *PDWORD;
typedef DWORD            *LPDWORD;
typedef void             *LPVOID;
typedef const void       *LPCVOID;

typedef int                 INT;
typedef unsigned int        UINT;
typedef unsigned int        *PUINT;


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
























#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"














#pragma once
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"














 




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"







#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"








#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"

#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"

 const unsigned short * __cdecl __pctype_func(void);

 extern const unsigned short *_pctype;


#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"
#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"





 extern const unsigned short _wctype[];
#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"

 const wctype_t * __cdecl __pwctype_func(void);

 extern const wctype_t *_pwctype;


#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"
#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"


#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"










                                













  int __cdecl _isctype(     int _C,      int _Type);
  int __cdecl _isctype_l(     int _C,      int _Type,        _locale_t _Locale);
   int __cdecl isalpha(     int _C);
  int __cdecl _isalpha_l(     int _C,        _locale_t _Locale);
   int __cdecl isupper(     int _C);
  int __cdecl _isupper_l(     int _C,        _locale_t _Locale);
   int __cdecl islower(     int _C);
  int __cdecl _islower_l(     int _C,        _locale_t _Locale);
   int __cdecl isdigit(     int _C);
  int __cdecl _isdigit_l(     int _C,        _locale_t _Locale);
  int __cdecl isxdigit(     int _C);
  int __cdecl _isxdigit_l(     int _C,        _locale_t _Locale);
   int __cdecl isspace(     int _C);
  int __cdecl _isspace_l(     int _C,        _locale_t _Locale);
  int __cdecl ispunct(     int _C);
  int __cdecl _ispunct_l(     int _C,        _locale_t _Locale);
   int __cdecl isalnum(     int _C);
  int __cdecl _isalnum_l(     int _C,        _locale_t _Locale);
  int __cdecl isprint(     int _C);
  int __cdecl _isprint_l(     int _C,        _locale_t _Locale);
  int __cdecl isgraph(     int _C);
  int __cdecl _isgraph_l(     int _C,        _locale_t _Locale);
  int __cdecl iscntrl(     int _C);
  int __cdecl _iscntrl_l(     int _C,        _locale_t _Locale);
   int __cdecl toupper(     int _C);
   int __cdecl tolower(     int _C);
   int __cdecl _tolower(     int _C);
  int __cdecl _tolower_l(     int _C,        _locale_t _Locale);
   int __cdecl _toupper(     int _C);
  int __cdecl _toupper_l(     int _C,        _locale_t _Locale);
  int __cdecl __isascii(     int _C);
  int __cdecl __toascii(     int _C);
  int __cdecl __iscsymf(     int _C);
  int __cdecl __iscsym(     int _C);

#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"







  int __cdecl iswalpha(     wint_t _C);
  int __cdecl _iswalpha_l(     wint_t _C,        _locale_t _Locale);
  int __cdecl iswupper(     wint_t _C);
  int __cdecl _iswupper_l(     wint_t _C,        _locale_t _Locale);
  int __cdecl iswlower(     wint_t _C);
  int __cdecl _iswlower_l(     wint_t _C,        _locale_t _Locale);
  int __cdecl iswdigit(     wint_t _C);
  int __cdecl _iswdigit_l(     wint_t _C,        _locale_t _Locale);
  int __cdecl iswxdigit(     wint_t _C);
  int __cdecl _iswxdigit_l(     wint_t _C,        _locale_t _Locale);
  int __cdecl iswspace(     wint_t _C);
  int __cdecl _iswspace_l(     wint_t _C,        _locale_t _Locale);
  int __cdecl iswpunct(     wint_t _C);
  int __cdecl _iswpunct_l(     wint_t _C,        _locale_t _Locale);
  int __cdecl iswalnum(     wint_t _C);
  int __cdecl _iswalnum_l(     wint_t _C,        _locale_t _Locale);
  int __cdecl iswprint(     wint_t _C);
  int __cdecl _iswprint_l(     wint_t _C,        _locale_t _Locale);
  int __cdecl iswgraph(     wint_t _C);
  int __cdecl _iswgraph_l(     wint_t _C,        _locale_t _Locale);
  int __cdecl iswcntrl(     wint_t _C);
  int __cdecl _iswcntrl_l(     wint_t _C,        _locale_t _Locale);
  int __cdecl iswascii(     wint_t _C);
  int __cdecl isleadbyte(     int _C);
  int __cdecl _isleadbyte_l(     int _C,        _locale_t _Locale);

  wint_t __cdecl towupper(     wint_t _C);
  wint_t __cdecl _towupper_l(     wint_t _C,        _locale_t _Locale);
  wint_t __cdecl towlower(     wint_t _C);
  wint_t __cdecl _towlower_l(     wint_t _C,        _locale_t _Locale); 
  int __cdecl iswctype(     wint_t _C,      wctype_t _Type);
  int __cdecl _iswctype_l(     wint_t _C,      wctype_t _Type,        _locale_t _Locale);

  int __cdecl __iswcsymf(     wint_t _C);
  int __cdecl _iswcsymf_l(     wint_t _C,        _locale_t _Locale);
  int __cdecl __iswcsym(     wint_t _C);
  int __cdecl _iswcsym_l(     wint_t _C,        _locale_t _Locale);

__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "iswctype" " instead. See online help for details."))  int __cdecl is_wctype(     wint_t _C,      wctype_t _Type);


#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"













#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"

#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"


 extern int __mb_cur_max;


#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"
 int __cdecl ___mb_cur_max_func(void);
 int __cdecl ___mb_cur_max_l_func(_locale_t);
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"









#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"












































#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"






#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"













































































#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"

#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"













#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"
















#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"

#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"





#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\ctype.h"
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\specstrings.h"






























































































































































































































#pragma once
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\specstrings.h"












#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\specstrings.h"














































































































































































































#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\specstrings.h"



    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\specstrings.h"


















































































































































































#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"



#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"








#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"













#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"














#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"



#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"










#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"





























#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"



#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"




#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"
typedef unsigned long POINTER_64_INT;
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"

#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"



#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"

#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"



#pragma once
#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"





typedef signed char         INT8, *PINT8;
typedef signed short        INT16, *PINT16;
typedef signed int          INT32, *PINT32;
typedef signed __int64      INT64, *PINT64;
typedef unsigned char       UINT8, *PUINT8;
typedef unsigned short      UINT16, *PUINT16;
typedef unsigned int        UINT32, *PUINT32;
typedef unsigned __int64    UINT64, *PUINT64;





typedef signed int LONG32, *PLONG32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;







#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"

















#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"











#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"
    typedef __w64 int INT_PTR, *PINT_PTR;
    typedef __w64 unsigned int UINT_PTR, *PUINT_PTR;

    typedef __w64 long LONG_PTR, *PLONG_PTR;
    typedef __w64 unsigned long ULONG_PTR, *PULONG_PTR;

    

#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"
#line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"





























































































































































































typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;
typedef __w64 long SHANDLE_PTR;
typedef __w64 unsigned long HANDLE_PTR;

















__inline
void * __ptr64
PtrToPtr64(
    const void *p
    )
{
    return((void * __ptr64) (unsigned __int64) (ULONG_PTR)p );
}

__inline
void *
Ptr64ToPtr(
    const void * __ptr64 p
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) p);
}

__inline
void * __ptr64
HandleToHandle64(
    const void *h
    )
{
    return((void * __ptr64) h );
}

__inline
void *
Handle64ToHandle(
    const void * __ptr64 h
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) h );
}
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"






#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"























typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;





typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;





typedef __int64 LONG64, *PLONG64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;





typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;





#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\basetsd.h"
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"






#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"






#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"






#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"






#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"



#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"






#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"






#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"






#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"






#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"








#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"














#line 216 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





typedef void *PVOID;
typedef void * __ptr64 PVOID64;







#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
















#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"








typedef char CHAR;
typedef short SHORT;
typedef long LONG;
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"






typedef wchar_t WCHAR;    



#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;
typedef  WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef  PWSTR *PZPWSTR;
typedef  const PWSTR *PCZPWSTR;
typedef  WCHAR  *LPUWSTR, *PUWSTR;
typedef  const WCHAR *LPCWSTR, *PCWSTR;
typedef  PCWSTR *PZPCWSTR;
typedef  const WCHAR  *LPCUWSTR, *PCUWSTR;




typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;

typedef  CHAR *NPSTR, *LPSTR, *PSTR;
typedef  PSTR *PZPSTR;
typedef  const PSTR *PCZPSTR;
typedef  const CHAR *LPCSTR, *PCSTR;
typedef  PCSTR *PZPCSTR;























typedef char TCHAR, *PTCHAR;
typedef unsigned char TBYTE , *PTBYTE ;

#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

typedef LPSTR LPTCH, PTCH;
typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR;
typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;


#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"



typedef SHORT *PSHORT;  
typedef LONG *PLONG;    


typedef void *HANDLE;




#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
typedef HANDLE *PHANDLE;





typedef BYTE   FCHAR;
typedef WORD   FSHORT;
typedef DWORD  FLONG;





typedef LONG HRESULT;

#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




    
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"









#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"













#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
















typedef char CCHAR;          
typedef DWORD LCID;         
typedef PDWORD PLCID;       
typedef WORD   LANGID;      






















#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;









typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;














#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;



#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    };
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;
#line 483 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;



#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    };
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;








typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG  DWORDLONG;
typedef DWORDLONG *PDWORDLONG;






















#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"











ULONGLONG
__stdcall
Int64ShllMod32 (
    ULONGLONG Value,
    DWORD ShiftCount
    );

LONGLONG
__stdcall
Int64ShraMod32 (
    LONGLONG Value,
    DWORD ShiftCount
    );

ULONGLONG
__stdcall
Int64ShrlMod32 (
    ULONGLONG Value,
    DWORD ShiftCount
    );


#pragma warning(push)
#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#pragma warning(disable:4035 4793)               

__inline ULONGLONG
__stdcall
Int64ShllMod32 (
    ULONGLONG Value,
    DWORD ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shld    edx, eax, cl
        shl     eax, cl
    }
}

__inline LONGLONG
__stdcall
Int64ShraMod32 (
    LONGLONG Value,
    DWORD ShiftCount
    )
{
    __asm {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        sar     edx, cl
    }
}

__inline ULONGLONG
__stdcall
Int64ShrlMod32 (
    ULONGLONG Value,
    DWORD ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        shr     edx, cl
    }
}


#pragma warning(pop)


#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


































#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

















































#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"








unsigned int
__cdecl
_rotl (
     unsigned int Value,
     int Shift
    );

unsigned __int64
__cdecl
_rotl64 (
     unsigned __int64 Value,
     int Shift
    );

unsigned int
__cdecl
_rotr (
     unsigned int Value,
     int Shift
    );

unsigned __int64
__cdecl
_rotr64 (
     unsigned __int64 Value,
     int Shift
    );

#pragma intrinsic(_rotl)
#pragma intrinsic(_rotl64)
#pragma intrinsic(_rotr)
#pragma intrinsic(_rotr64)

#line 761 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"









typedef BYTE  BOOLEAN;           
typedef BOOLEAN *PBOOLEAN;       





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;





typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"




















#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"
typedef struct _GUID {
    unsigned long  Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char  Data4[ 8 ];
} GUID;
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"




































#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"








typedef GUID *LPGUID;
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"



typedef const GUID *LPCGUID;
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"




typedef GUID IID;
typedef IID *LPIID;


typedef GUID CLSID;
typedef CLSID *LPCLSID;


typedef GUID FMTID;
typedef FMTID *LPFMTID;







#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"







#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"







#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"







#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"







#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"















#pragma once
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"














 




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"








#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"
















 void *  __cdecl _memccpy(        void * _Dst,      const void * _Src,      int _Val,      size_t _MaxCount);
   void *  __cdecl memchr(          const void * _Buf ,      int _Val,      size_t _MaxCount);
  int     __cdecl _memicmp(         const void * _Buf1,          const void * _Buf2,      size_t _Size);
  int     __cdecl _memicmp_l(         const void * _Buf1,          const void * _Buf2,      size_t _Size,        _locale_t _Locale);
         int     __cdecl memcmp(         const void * _Buf1,          const void * _Buf2,      size_t _Size);
         void *  __cdecl memcpy(         void * _Dst,          const void * _Src,      size_t _Size);

 errno_t  __cdecl memcpy_s(         void * _Dst,      rsize_t _DstSize,          const void * _Src,      rsize_t _MaxCount);
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"
        void *  __cdecl memset(         void * _Dst,      int _Val,      size_t _Size);



__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memccpy" ". See online help for details."))  void * __cdecl memccpy(       void * _Dst,          const void * _Src,      int _Val,      size_t _Size);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memicmp" ". See online help for details."))   int __cdecl memicmp(         const void * _Buf1,          const void * _Buf2,      size_t _Size);
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

  errno_t __cdecl _strset_s(           char * _Dst,      size_t _DstSize,      int _Value);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strset( char *_Dest,  int _Value);

  errno_t __cdecl strcpy_s(       char * _Dst,      rsize_t _DstSize,        const char * _Src);
#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl strcpy( char *_Dest,  const char * _Source);

  errno_t __cdecl strcat_s(           char * _Dst,      rsize_t _DstSize,        const char * _Src);
#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl strcat( char *_Dest,  const char * _Source);
         int     __cdecl strcmp(       const char * _Str1,        const char * _Str2);
         size_t  __cdecl strlen(       const char * _Str);
  size_t  __cdecl strnlen(       const char * _Str,      size_t _MaxCount);

static __inline  size_t  __cdecl strnlen_s(        const char * _Str,      size_t _MaxCount)
{
    return strnlen(_Str, _MaxCount);
}
#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

  errno_t __cdecl memmove_s(         void * _Dst,      rsize_t _DstSize,          const void * _Src,      rsize_t _MaxCount);
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"



#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"
  void *  __cdecl memmove(         void * _Dst,          const void * _Src,      size_t _Size);
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"




#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

  char *  __cdecl _strdup(         const char * _Src);



#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

   char *  __cdecl strchr(       const char * _Str,      int _Val);
  int     __cdecl _stricmp(        const char * _Str1,         const char * _Str2);
  int     __cdecl _strcmpi(        const char * _Str1,         const char * _Str2);
  int     __cdecl _stricmp_l(        const char * _Str1,         const char * _Str2,        _locale_t _Locale);
  int     __cdecl strcoll(        const char * _Str1,         const  char * _Str2);
  int     __cdecl _strcoll_l(        const char * _Str1,         const char * _Str2,        _locale_t _Locale);
  int     __cdecl _stricoll(        const char * _Str1,         const char * _Str2);
  int     __cdecl _stricoll_l(        const char * _Str1,         const char * _Str2,        _locale_t _Locale);
  int     __cdecl _strncoll  (       const char * _Str1,        const char * _Str2,      size_t _MaxCount);
  int     __cdecl _strncoll_l(       const char * _Str1,        const char * _Str2,      size_t _MaxCount,        _locale_t _Locale);
  int     __cdecl _strnicoll (       const char * _Str1,        const char * _Str2,      size_t _MaxCount);
  int     __cdecl _strnicoll_l(       const char * _Str1,        const char * _Str2,      size_t _MaxCount,        _locale_t _Locale);
  size_t  __cdecl strcspn(        const char * _Str,         const char * _Control);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))   char *  __cdecl _strerror(         const char * _ErrMsg);
  errno_t __cdecl _strerror_s(       char * _Buf,      size_t _SizeInBytes,          const char * _ErrMsg);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))   char *  __cdecl strerror(     int);

  errno_t __cdecl strerror_s(       char * _Buf,      size_t _SizeInBytes,      int _ErrNum);
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

  errno_t __cdecl _strlwr_s(           char * _Str,      size_t _Size);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strlwr( char *_String);
  errno_t __cdecl _strlwr_s_l(           char * _Str,      size_t _Size,        _locale_t _Locale);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strlwr_l(         char *_String,        _locale_t _Locale);

  errno_t __cdecl strncat_s(           char * _Dst,      rsize_t _DstSize,        const char * _Src,      rsize_t _MaxCount);
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

#pragma warning(push)
#pragma warning(disable:6059)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl strncat(           char *_Dest,        const char * _Source,      size_t _Count);
#pragma warning(pop)


#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"
  int     __cdecl strncmp(       const char * _Str1,        const char * _Str2,      size_t _MaxCount);
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"
  int     __cdecl _strnicmp(       const char * _Str1,        const char * _Str2,      size_t _MaxCount);
  int     __cdecl _strnicmp_l(       const char * _Str1,        const char * _Str2,      size_t _MaxCount,        _locale_t _Locale);

  errno_t __cdecl strncpy_s(       char * _Dst,      rsize_t _DstSize,          const char * _Src,      rsize_t _MaxCount);
#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl strncpy(     char *_Dest,        const char * _Source,      size_t _Count);
  errno_t __cdecl _strnset_s(           char * _Str,      size_t _Size,      int _Val,      size_t _MaxCount);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strnset(           char *_Dest,      int _Val,      size_t _Count);
   char *  __cdecl strpbrk(       const char * _Str,        const char * _Control);
   char *  __cdecl strrchr(       const char * _Str,      int _Ch);
 char *  __cdecl _strrev(         char * _Str);
  size_t  __cdecl strspn(       const char * _Str,        const char * _Control);
   char *  __cdecl strstr(       const char * _Str,        const char * _SubStr);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))   char *  __cdecl strtok(           char * _Str,        const char * _Delim);

  char *  __cdecl strtok_s(           char * _Str,        const char * _Delim,                        char ** _Context);
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"
  errno_t __cdecl _strupr_s(           char * _Str,      size_t _Size);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strupr( char *_String);
  errno_t __cdecl _strupr_s_l(           char * _Str,      size_t _Size, _locale_t _Locale);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strupr_l(         char *_String,        _locale_t _Locale);
  size_t  __cdecl strxfrm (         char * _Dst,        const char * _Src,      size_t _MaxCount);
  size_t  __cdecl _strxfrm_l(         char * _Dst,        const char * _Src,      size_t _MaxCount,        _locale_t _Locale);



























#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strdup" ". See online help for details."))   char * __cdecl strdup(         const char * _Src);



#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"


__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strcmpi" ". See online help for details."))   int __cdecl strcmpi(       const char * _Str1,        const char * _Str2);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_stricmp" ". See online help for details."))   int __cdecl stricmp(       const char * _Str1,        const char * _Str2);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strlwr" ". See online help for details."))  char * __cdecl strlwr(         char * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnicmp" ". See online help for details."))   int __cdecl strnicmp(       const char * _Str1,        const char * _Str,      size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnset" ". See online help for details."))  char * __cdecl strnset(           char * _Str,      int _Val,      size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strrev" ". See online help for details."))  char * __cdecl strrev(         char * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strset" ". See online help for details."))         char * __cdecl strset(         char * _Str,      int _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strupr" ". See online help for details."))  char * __cdecl strupr(         char * _Str);

#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"









#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

  wchar_t * __cdecl _wcsdup(       const wchar_t * _Str);



#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"


  errno_t __cdecl wcscat_s(           wchar_t * _Dst,      rsize_t _DstSize, const wchar_t * _Src);
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcscat( wchar_t *_Dest,  const wchar_t * _Source);
   wchar_t * __cdecl wcschr(       const wchar_t * _Str, wchar_t _Ch);
  int __cdecl wcscmp(       const wchar_t * _Str1,        const wchar_t * _Str2);

  errno_t __cdecl wcscpy_s(       wchar_t * _Dst,      rsize_t _DstSize,        const wchar_t * _Src);
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcscpy( wchar_t *_Dest,  const wchar_t * _Source);
  size_t __cdecl wcscspn(       const wchar_t * _Str,        const wchar_t * _Control);
  size_t __cdecl wcslen(       const wchar_t * _Str);
  size_t __cdecl wcsnlen(       const wchar_t * _Src,      size_t _MaxCount);

static __inline  size_t __cdecl wcsnlen_s(       const wchar_t * _Src,      size_t _MaxCount)
{
    return wcsnlen(_Src, _MaxCount);
}
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

  errno_t __cdecl wcsncat_s(           wchar_t * _Dst,      rsize_t _DstSize,        const wchar_t * _Src,      rsize_t _MaxCount);
#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcsncat(     wchar_t *_Dest,        const wchar_t * _Source,      size_t _Count);
  int __cdecl wcsncmp(       const wchar_t * _Str1,        const wchar_t * _Str2,      size_t _MaxCount);

  errno_t __cdecl wcsncpy_s(       wchar_t * _Dst,      rsize_t _DstSize,        const wchar_t * _Src,      rsize_t _MaxCount);
#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcsncpy(     wchar_t *_Dest,        const wchar_t * _Source,      size_t _Count);
   wchar_t * __cdecl wcspbrk(       const wchar_t * _Str,        const wchar_t * _Control);
   wchar_t * __cdecl wcsrchr(       const wchar_t * _Str,      wchar_t _Ch);
  size_t __cdecl wcsspn(       const wchar_t * _Str,        const wchar_t * _Control);
   wchar_t * __cdecl wcsstr(       const wchar_t * _Str,        const wchar_t * _SubStr);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))   wchar_t * __cdecl wcstok(           wchar_t * _Str,        const wchar_t * _Delim);
  wchar_t * __cdecl wcstok_s(           wchar_t * _Str,        const wchar_t * _Delim,                        wchar_t ** _Context);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))   wchar_t * __cdecl _wcserror(     int _ErrNum);
  errno_t __cdecl _wcserror_s(         wchar_t * _Buf,      size_t _SizeInWords,      int _ErrNum);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))   wchar_t * __cdecl __wcserror(         const wchar_t * _Str);
  errno_t __cdecl __wcserror_s(         wchar_t * _Buffer,      size_t _SizeInWords,        const wchar_t * _ErrMsg);


  int __cdecl _wcsicmp(       const wchar_t * _Str1,        const wchar_t * _Str2);
  int __cdecl _wcsicmp_l(       const wchar_t * _Str1,        const wchar_t * _Str2,        _locale_t _Locale);
  int __cdecl _wcsnicmp(       const wchar_t * _Str1,        const wchar_t * _Str2,      size_t _MaxCount);
  int __cdecl _wcsnicmp_l(       const wchar_t * _Str1,        const wchar_t * _Str2,      size_t _MaxCount,        _locale_t _Locale);
  errno_t __cdecl _wcsnset_s(           wchar_t * _Dst,      size_t _DstSizeInWords, wchar_t _Val,      size_t _MaxCount);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcsnset(           wchar_t *_Str, wchar_t _Val,      size_t _MaxCount);
 wchar_t * __cdecl _wcsrev(         wchar_t * _Str);
  errno_t __cdecl _wcsset_s(           wchar_t * _Str,      size_t _SizeInWords, wchar_t _Val);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcsset(         wchar_t *_Str, wchar_t _Val);

  errno_t __cdecl _wcslwr_s(           wchar_t * _Str,      size_t _SizeInWords);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcslwr( wchar_t *_String);
  errno_t __cdecl _wcslwr_s_l(           wchar_t * _Str,      size_t _SizeInWords,        _locale_t _Locale);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcslwr_l(         wchar_t *_String,        _locale_t _Locale);
  errno_t __cdecl _wcsupr_s(           wchar_t * _Str,      size_t _Size);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcsupr( wchar_t *_String);
  errno_t __cdecl _wcsupr_s_l(           wchar_t * _Str,      size_t _Size,        _locale_t _Locale);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcsupr_l(         wchar_t *_String,        _locale_t _Locale);
  size_t __cdecl wcsxfrm(         wchar_t * _Dst,        const wchar_t * _Src,      size_t _MaxCount);
  size_t __cdecl _wcsxfrm_l(         wchar_t * _Dst,        const wchar_t *_Src,      size_t _MaxCount,        _locale_t _Locale);
  int __cdecl wcscoll(       const wchar_t * _Str1,        const wchar_t * _Str2);
  int __cdecl _wcscoll_l(       const wchar_t * _Str1,        const wchar_t * _Str2,        _locale_t _Locale);
  int __cdecl _wcsicoll(       const wchar_t * _Str1,        const wchar_t * _Str2);
  int __cdecl _wcsicoll_l(       const wchar_t * _Str1,        const wchar_t *_Str2,        _locale_t _Locale);
  int __cdecl _wcsncoll(       const wchar_t * _Str1,        const wchar_t * _Str2,      size_t _MaxCount);
  int __cdecl _wcsncoll_l(       const wchar_t * _Str1,        const wchar_t * _Str2,      size_t _MaxCount,        _locale_t _Locale);
  int __cdecl _wcsnicoll(       const wchar_t * _Str1,        const wchar_t * _Str2,      size_t _MaxCount);
  int __cdecl _wcsnicoll_l(       const wchar_t * _Str1,        const wchar_t * _Str2,      size_t _MaxCount,        _locale_t _Locale);






















#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsdup" ". See online help for details."))   wchar_t * __cdecl wcsdup(       const wchar_t * _Str);



#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"





__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicmp" ". See online help for details."))   int __cdecl wcsicmp(       const wchar_t * _Str1,        const wchar_t * _Str2);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnicmp" ". See online help for details."))   int __cdecl wcsnicmp(       const wchar_t * _Str1,        const wchar_t * _Str2,      size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnset" ". See online help for details."))  wchar_t * __cdecl wcsnset(           wchar_t * _Str,        wchar_t _Val,      size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsrev" ". See online help for details."))  wchar_t * __cdecl wcsrev(         wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsset" ". See online help for details."))  wchar_t * __cdecl wcsset(         wchar_t * _Str, wchar_t _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcslwr" ". See online help for details."))  wchar_t * __cdecl wcslwr(         wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsupr" ". See online help for details."))  wchar_t * __cdecl wcsupr(         wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicoll" ". See online help for details."))   int __cdecl wcsicoll(       const wchar_t * _Str1,        const wchar_t * _Str2);

#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"


#line 367 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"






#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\string.h"
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"



























#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"



























#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"
#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




typedef struct  _OBJECTID {     
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
#line 818 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"















































































































#line 935 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

#line 937 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"







































#line 983 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

#line 985 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"







































































































































































































#line 1185 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




























































































































































































#line 1374 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
























#line 1399 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


  












































#line 1447 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
  
#line 1449 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2566 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"













#pragma warning(push)
#line 2581 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#pragma warning(disable:4164)   
                                

#pragma function(_enable)
#pragma function(_disable)
#line 2587 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


#pragma warning(pop)


#line 2593 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

#line 2595 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 2596 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





















BOOLEAN
_bittest (
     LONG const *Base,
     LONG Offset
    );

BOOLEAN
_bittestandcomplement (
     LONG *Base,
     LONG Offset
    );

BOOLEAN
_bittestandset (
     LONG *Base,
     LONG Offset
    );

BOOLEAN
_bittestandreset (
     LONG *Base,
     LONG Offset
    );

BOOLEAN
_interlockedbittestandset (
     LONG *Base,
     LONG Offset
    );

BOOLEAN
_interlockedbittestandreset (
     LONG *Base,
     LONG Offset
    );

#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)








BOOLEAN
_BitScanForward (
     DWORD *Index,
     DWORD Mask
    );

BOOLEAN
_BitScanReverse (
     DWORD *Index,
     DWORD Mask
    );

#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)





































#line 2719 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


#pragma warning(push)
#pragma warning(disable:4035 4793)

BOOLEAN
__forceinline
InterlockedBitTestAndComplement (
     LONG *Base,
     LONG Bit
    )
{
    __asm {
           mov eax, Bit
           mov ecx, Base
           lock btc [ecx], eax
           setc al
    };
}
#pragma warning(pop)
#line 2740 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"











BYTE 
__readfsbyte (
     DWORD Offset
    );
 
WORD  
__readfsword (
     DWORD Offset
    );
 
DWORD
__readfsdword (
     DWORD Offset
    );
 
void
__writefsbyte (
     DWORD Offset,
     BYTE  Data
    );
 
void
__writefsword (
     DWORD Offset,
     WORD   Data
    );
 
void
__writefsdword (
     DWORD Offset,
     DWORD Data
    );

#pragma intrinsic(__readfsbyte)
#pragma intrinsic(__readfsword)
#pragma intrinsic(__readfsdword)
#pragma intrinsic(__writefsbyte)
#pragma intrinsic(__writefsword)
#pragma intrinsic(__writefsdword)

#line 2792 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





#line 2798 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




#pragma warning( push )
#pragma warning( disable : 4793 )
__forceinline
void
MemoryBarrier (
    void
    )
{
    LONG Barrier;
    __asm {
        xchg Barrier, eax
    }
}
#pragma warning( pop )


#line 2819 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




















void
__int2c (
    void
    );

#pragma intrinsic(__int2c)







#line 2853 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




__inline PVOID GetFiberData( void )    { return *(PVOID *) (ULONG_PTR) __readfsdword (0x10);}
__inline PVOID GetCurrentFiber( void ) { return (PVOID) (ULONG_PTR) __readfsdword (0x10);}


















#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


#line 2881 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"











































#line 2925 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"



typedef struct _FLOATING_SAVE_AREA {
    DWORD   ControlWord;
    DWORD   StatusWord;
    DWORD   TagWord;
    DWORD   ErrorOffset;
    DWORD   ErrorSelector;
    DWORD   DataOffset;
    DWORD   DataSelector;
    BYTE    RegisterArea[80];
    DWORD   Cr0NpxState;
} FLOATING_SAVE_AREA;

typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;











typedef struct _CONTEXT {

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DWORD ContextFlags;

    
    
    
    
    

    DWORD   Dr0;
    DWORD   Dr1;
    DWORD   Dr2;
    DWORD   Dr3;
    DWORD   Dr6;
    DWORD   Dr7;

    
    
    
    

    FLOATING_SAVE_AREA FloatSave;

    
    
    
    

    DWORD   SegGs;
    DWORD   SegFs;
    DWORD   SegEs;
    DWORD   SegDs;

    
    
    
    

    DWORD   Edi;
    DWORD   Esi;
    DWORD   Ebx;
    DWORD   Edx;
    DWORD   Ecx;
    DWORD   Eax;

    
    
    
    

    DWORD   Ebp;
    DWORD   Eip;
    DWORD   SegCs;              
    DWORD   EFlags;             
    DWORD   Esp;
    DWORD   SegSs;

    
    
    
    
    

    BYTE    ExtendedRegisters[512];

} CONTEXT;



typedef CONTEXT *PCONTEXT;



#line 3045 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





typedef struct _LDT_ENTRY {
    WORD    LimitLow;
    WORD    BaseLow;
    union {
        struct {
            BYTE    BaseMid;
            BYTE    Flags1;     
            BYTE    Flags2;     
            BYTE    BaseHi;
        } Bytes;
        struct {
            DWORD   BaseMid : 8;
            DWORD   Type : 5;
            DWORD   Dpl : 2;
            DWORD   Pres : 1;
            DWORD   LimitHi : 4;
            DWORD   Sys : 1;
            DWORD   Reserved_0 : 1;
            DWORD   Default_Big : 1;
            DWORD   Granularity : 1;
            DWORD   BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;

#line 3076 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


























































































































































































#line 3263 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"























































































































#line 3383 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"






















































































































































































































































































































































































































































typedef struct _EXCEPTION_RECORD {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32 {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64 {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;
typedef PVOID PACCESS_TOKEN;            
typedef PVOID PSECURITY_DESCRIPTOR;     
typedef PVOID PSID;     







































typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;
























































typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;












#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack4.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack4.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack4.h"
#line 3979 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 3988 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


































typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE  Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;
#line 4026 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




typedef struct _SID {
   BYTE  Revision;
   BYTE  SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];
#line 4039 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
} SID, *PISID;
#line 4041 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





                                                



#line 4051 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {
    PSID Sid;
    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;
























































































































































































typedef enum {

    WinNullSid                                  = 0,
    WinWorldSid                                 = 1,
    WinLocalSid                                 = 2,
    WinCreatorOwnerSid                          = 3,
    WinCreatorGroupSid                          = 4,
    WinCreatorOwnerServerSid                    = 5,
    WinCreatorGroupServerSid                    = 6,
    WinNtAuthoritySid                           = 7,
    WinDialupSid                                = 8,
    WinNetworkSid                               = 9,
    WinBatchSid                                 = 10,
    WinInteractiveSid                           = 11,
    WinServiceSid                               = 12,
    WinAnonymousSid                             = 13,
    WinProxySid                                 = 14,
    WinEnterpriseControllersSid                 = 15,
    WinSelfSid                                  = 16,
    WinAuthenticatedUserSid                     = 17,
    WinRestrictedCodeSid                        = 18,
    WinTerminalServerSid                        = 19,
    WinRemoteLogonIdSid                         = 20,
    WinLogonIdsSid                              = 21,
    WinLocalSystemSid                           = 22,
    WinLocalServiceSid                          = 23,
    WinNetworkServiceSid                        = 24,
    WinBuiltinDomainSid                         = 25,
    WinBuiltinAdministratorsSid                 = 26,
    WinBuiltinUsersSid                          = 27,
    WinBuiltinGuestsSid                         = 28,
    WinBuiltinPowerUsersSid                     = 29,
    WinBuiltinAccountOperatorsSid               = 30,
    WinBuiltinSystemOperatorsSid                = 31,
    WinBuiltinPrintOperatorsSid                 = 32,
    WinBuiltinBackupOperatorsSid                = 33,
    WinBuiltinReplicatorSid                     = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid             = 36,
    WinBuiltinNetworkConfigurationOperatorsSid  = 37,
    WinAccountAdministratorSid                  = 38,
    WinAccountGuestSid                          = 39,
    WinAccountKrbtgtSid                         = 40,
    WinAccountDomainAdminsSid                   = 41,
    WinAccountDomainUsersSid                    = 42,
    WinAccountDomainGuestsSid                   = 43,
    WinAccountComputersSid                      = 44,
    WinAccountControllersSid                    = 45,
    WinAccountCertAdminsSid                     = 46,
    WinAccountSchemaAdminsSid                   = 47,
    WinAccountEnterpriseAdminsSid               = 48,
    WinAccountPolicyAdminsSid                   = 49,
    WinAccountRasAndIasServersSid               = 50,
    WinNTLMAuthenticationSid                    = 51,
    WinDigestAuthenticationSid                  = 52,
    WinSChannelAuthenticationSid                = 53,
    WinThisOrganizationSid                      = 54,
    WinOtherOrganizationSid                     = 55,
    WinBuiltinIncomingForestTrustBuildersSid    = 56,
    WinBuiltinPerfMonitoringUsersSid            = 57,
    WinBuiltinPerfLoggingUsersSid               = 58,
    WinBuiltinAuthorizationAccessSid            = 59,
    WinBuiltinTerminalServerLicenseServersSid   = 60,
    WinBuiltinDCOMUsersSid                      = 61,

} WELL_KNOWN_SID_TYPE;






















































































typedef struct _ACL {
    BYTE  AclRevision;
    BYTE  Sbz1;
    WORD   AclSize;
    WORD   AceCount;
    WORD   Sbz2;
} ACL;
typedef ACL *PACL;





















typedef struct _ACE_HEADER {
    BYTE  AceType;
    BYTE  AceFlags;
    WORD   AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;








































































































typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;




typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;






typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;















typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;


























typedef WORD   SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;

























































































typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE  Revision;
    BYTE  Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   BYTE  Revision;
   BYTE  Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;


















































typedef struct _OBJECT_TYPE_LIST {
    WORD   Level;
    WORD   Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;















typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;













































typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;
























































typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;











































#line 5093 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


















typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    MaxTokenInfoClass  
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;






typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;

typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;
    SID_AND_ATTRIBUTES Groups[1];
} TOKEN_GROUPS, *PTOKEN_GROUPS;


typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;


typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;


















typedef struct _TOKEN_AUDIT_POLICY_ELEMENT {
    DWORD Category;
    DWORD PolicyMask;
} TOKEN_AUDIT_POLICY_ELEMENT, *PTOKEN_AUDIT_POLICY_ELEMENT;

typedef struct _TOKEN_AUDIT_POLICY {
    DWORD PolicyCount;
    TOKEN_AUDIT_POLICY_ELEMENT Policy[1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;









typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_ORIGIN {
    LUID OriginatingLogonSession ;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN ;








typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;




typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;































#line 5330 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"



#line 5334 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


























typedef struct _JOB_SET_ARRAY {
    HANDLE JobHandle;   
    DWORD MemberLevel;  
    DWORD Flags;        
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;




typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;
    union {
        PVOID FiberData;
        DWORD Version;
    };
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;




typedef struct _NT_TIB32 {
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;
    union {
        DWORD FiberData;
        DWORD Version;
    };
    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64 {
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;
    union {
        DWORD64 FiberData;
        DWORD Version;
    };
    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;




#line 5416 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"






typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;






typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
    SIZE_T Reserved1;
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD  Flags;
    DWORD  Reserved5;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;

typedef struct _IO_COUNTERS {
    ULONGLONG  ReadOperationCount;
    ULONGLONG  WriteOperationCount;
    ULONGLONG  OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;


typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;

typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;


















































































typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    MaxJobObjectInfoClass
    } JOBOBJECTINFOCLASS;
























typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache
} LOGICAL_PROCESSOR_RELATIONSHIP;



typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;



typedef struct _CACHE_DESCRIPTOR {
    BYTE   Level;
    BYTE   Associativity;
    WORD   LineSize;
    DWORD  Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG_PTR   ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union {
        struct {
            BYTE  Flags;
        } ProcessorCore;
        struct {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG  Reserved[2];
    };
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;






















































typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MEMORY_BASIC_INFORMATION32 {
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;

typedef struct __declspec(align(16)) _MEMORY_BASIC_INFORMATION64 {
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD     AllocationProtect;
    DWORD     __alignment1;
    ULONGLONG RegionSize;
    DWORD     State;
    DWORD     Protect;
    DWORD     Type;
    DWORD     __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;



























































































































































typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;






typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;









typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD  ReparseTag;
    WORD   ReparseDataLength;
    WORD   Reserved;
    GUID   ReparseGuid;
    struct {
        BYTE   DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;













































































typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking     = 1,
    PowerSystemSleeping1   = 2,
    PowerSystemSleeping2   = 3,
    PowerSystemSleeping3   = 4,
    PowerSystemHibernate   = 5,
    PowerSystemShutdown    = 6,
    PowerSystemMaximum     = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;



typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject
} POWER_ACTION, *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;







typedef DWORD EXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;

















typedef struct CM_Power_Data_s {
    DWORD               PD_Size;
    DEVICE_POWER_STATE  PD_MostRecentPowerState;
    DWORD               PD_Capabilities;
    DWORD               PD_D1Latency;
    DWORD               PD_D2Latency;
    DWORD               PD_D3Latency;
    DEVICE_POWER_STATE  PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE  PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;



typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,                                   
    LastSleepTime,                                  
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry
} POWER_INFORMATION_LEVEL;







typedef struct {
    DWORD       Granularity;
    DWORD       Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;






typedef struct {
    POWER_ACTION    Action;
    DWORD           Flags;
    DWORD           EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;



















typedef struct {
    BOOLEAN                 Enable;
    BYTE                    Spare[3];
    DWORD                   BatteryLevel;
    POWER_ACTION_POLICY     PowerPolicy;
    SYSTEM_POWER_STATE      MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;
















typedef struct _SYSTEM_POWER_POLICY {
    DWORD                   Revision;       

    
    POWER_ACTION_POLICY     PowerButton;
    POWER_ACTION_POLICY     SleepButton;
    POWER_ACTION_POLICY     LidClose;
    SYSTEM_POWER_STATE      LidOpenWake;
    DWORD                   Reserved;

    
    POWER_ACTION_POLICY     Idle;
    DWORD                   IdleTimeout;
    BYTE                    IdleSensitivity;

    
    
    BYTE                    DynamicThrottle;

    BYTE                    Spare2[2];

    
    SYSTEM_POWER_STATE      MinSleep;
    SYSTEM_POWER_STATE      MaxSleep;
    SYSTEM_POWER_STATE      ReducedLatencySleep;
    DWORD                   WinLogonFlags;

    
    DWORD                   Spare3;
    DWORD                   DozeS4Timeout;

    
    DWORD                   BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL      DischargePolicy[4];

    
    DWORD                   VideoTimeout;
    BOOLEAN                 VideoDimDisplay;
    DWORD                   VideoReserved[3];

    
    DWORD                   SpindownTimeout;

    
    BOOLEAN                 OptimizeForPower;
    BYTE                    FanThrottleTolerance;
    BYTE                    ForcedThrottle;
    BYTE                    MinThrottle;
    POWER_ACTION_POLICY     OverThrottled;

} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;


typedef struct _PROCESSOR_POWER_POLICY_INFO {

    
    DWORD                   TimeCheck;                      
    DWORD                   DemoteLimit;                    
    DWORD                   PromoteLimit;                   

    
    BYTE                    DemotePercent;
    BYTE                    PromotePercent;
    BYTE                    Spare[2];

    
    DWORD                   AllowDemotion:1;
    DWORD                   AllowPromotion:1;
    DWORD                   Reserved:30;

} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;


typedef struct _PROCESSOR_POWER_POLICY {
    DWORD                       Revision;       

    
    BYTE                        DynamicThrottle;
    BYTE                        Spare[3];

    
    DWORD                       DisableCStates:1;
    DWORD                       Reserved:31;

    
    
    
    DWORD                       PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];

} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;


typedef struct _ADMINISTRATOR_POWER_POLICY {

    
    SYSTEM_POWER_STATE      MinSleep;
    SYSTEM_POWER_STATE      MaxSleep;

    
    DWORD                   MinVideoTimeout;
    DWORD                   MaxVideoTimeout;

    
    DWORD                   MinSpindownTimeout;
    DWORD                   MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;


typedef struct {
    
    BOOLEAN             PowerButtonPresent;
    BOOLEAN             SleepButtonPresent;
    BOOLEAN             LidPresent;
    BOOLEAN             SystemS1;
    BOOLEAN             SystemS2;
    BOOLEAN             SystemS3;
    BOOLEAN             SystemS4;           
    BOOLEAN             SystemS5;           
    BOOLEAN             HiberFilePresent;
    BOOLEAN             FullWake;
    BOOLEAN             VideoDimPresent;
    BOOLEAN             ApmPresent;
    BOOLEAN             UpsPresent;

    
    BOOLEAN             ThermalControl;
    BOOLEAN             ProcessorThrottle;
    BYTE                ProcessorMinThrottle;
    BYTE                ProcessorMaxThrottle;
    BYTE                spare2[4];

    
    BOOLEAN             DiskSpinDown;
    BYTE                spare3[8];

    
    BOOLEAN             SystemBatteriesPresent;
    BOOLEAN             BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];

    
    SYSTEM_POWER_STATE  AcOnLineWake;
    SYSTEM_POWER_STATE  SoftLidWake;
    SYSTEM_POWER_STATE  RtcWake;
    SYSTEM_POWER_STATE  MinDeviceWakeState; 
    SYSTEM_POWER_STATE  DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

typedef struct {
    BOOLEAN             AcOnLine;
    BOOLEAN             BatteryPresent;
    BOOLEAN             Charging;
    BOOLEAN             Discharging;
    BOOLEAN             Spare1[4];

    DWORD               MaxCapacity;
    DWORD               RemainingCapacity;
    DWORD               Rate;
    DWORD               EstimatedTime;

    DWORD               DefaultAlert1;
    DWORD               DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;










#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack4.h"


#line 33 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack4.h"
#line 34 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack4.h"
#line 6379 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"







#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack2.h"


#line 33 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack2.h"
#line 34 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack2.h"
#line 6387 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"









#line 6397 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

typedef struct _IMAGE_DOS_HEADER {      
    WORD   e_magic;                     
    WORD   e_cblp;                      
    WORD   e_cp;                        
    WORD   e_crlc;                      
    WORD   e_cparhdr;                   
    WORD   e_minalloc;                  
    WORD   e_maxalloc;                  
    WORD   e_ss;                        
    WORD   e_sp;                        
    WORD   e_csum;                      
    WORD   e_ip;                        
    WORD   e_cs;                        
    WORD   e_lfarlc;                    
    WORD   e_ovno;                      
    WORD   e_res[4];                    
    WORD   e_oemid;                     
    WORD   e_oeminfo;                   
    WORD   e_res2[10];                  
    LONG   e_lfanew;                    
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {      
    WORD   ne_magic;                    
    CHAR   ne_ver;                      
    CHAR   ne_rev;                      
    WORD   ne_enttab;                   
    WORD   ne_cbenttab;                 
    LONG   ne_crc;                      
    WORD   ne_flags;                    
    WORD   ne_autodata;                 
    WORD   ne_heap;                     
    WORD   ne_stack;                    
    LONG   ne_csip;                     
    LONG   ne_sssp;                     
    WORD   ne_cseg;                     
    WORD   ne_cmod;                     
    WORD   ne_cbnrestab;                
    WORD   ne_segtab;                   
    WORD   ne_rsrctab;                  
    WORD   ne_restab;                   
    WORD   ne_modtab;                   
    WORD   ne_imptab;                   
    LONG   ne_nrestab;                  
    WORD   ne_cmovent;                  
    WORD   ne_align;                    
    WORD   ne_cres;                     
    BYTE   ne_exetyp;                   
    BYTE   ne_flagsothers;              
    WORD   ne_pretthunks;               
    WORD   ne_psegrefbytes;             
    WORD   ne_swaparea;                 
    WORD   ne_expver;                   
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {      
    WORD   e32_magic;                   
    BYTE   e32_border;                  
    BYTE   e32_worder;                  
    DWORD  e32_level;                   
    WORD   e32_cpu;                     
    WORD   e32_os;                      
    DWORD  e32_ver;                     
    DWORD  e32_mflags;                  
    DWORD  e32_mpages;                  
    DWORD  e32_startobj;                
    DWORD  e32_eip;                     
    DWORD  e32_stackobj;                
    DWORD  e32_esp;                     
    DWORD  e32_pagesize;                
    DWORD  e32_lastpagesize;            
    DWORD  e32_fixupsize;               
    DWORD  e32_fixupsum;                
    DWORD  e32_ldrsize;                 
    DWORD  e32_ldrsum;                  
    DWORD  e32_objtab;                  
    DWORD  e32_objcnt;                  
    DWORD  e32_objmap;                  
    DWORD  e32_itermap;                 
    DWORD  e32_rsrctab;                 
    DWORD  e32_rsrccnt;                 
    DWORD  e32_restab;                  
    DWORD  e32_enttab;                  
    DWORD  e32_dirtab;                  
    DWORD  e32_dircnt;                  
    DWORD  e32_fpagetab;                
    DWORD  e32_frectab;                 
    DWORD  e32_impmod;                  
    DWORD  e32_impmodcnt;               
    DWORD  e32_impproc;                 
    DWORD  e32_pagesum;                 
    DWORD  e32_datapage;                
    DWORD  e32_preload;                 
    DWORD  e32_nrestab;                 
    DWORD  e32_cbnrestab;               
    DWORD  e32_nressum;                 
    DWORD  e32_autodata;                
    DWORD  e32_debuginfo;               
    DWORD  e32_debuglen;                
    DWORD  e32_instpreload;             
    DWORD  e32_instdemand;              
    DWORD  e32_heapsize;                
    BYTE   e32_res3[12];                
    DWORD  e32_winresoff;
    DWORD  e32_winreslen;
    WORD   e32_devid;                   
    WORD   e32_ddkver;                  
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;


#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"


#line 36 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"
#line 37 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"
#line 6509 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 6510 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





typedef struct _IMAGE_FILE_HEADER {
    WORD    Machine;
    WORD    NumberOfSections;
    DWORD   TimeDateStamp;
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
    WORD    SizeOfOptionalHeader;
    WORD    Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;






















































typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD   VirtualAddress;
    DWORD   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {
    
    
    

    WORD    Magic;
    BYTE    MajorLinkerVersion;
    BYTE    MinorLinkerVersion;
    DWORD   SizeOfCode;
    DWORD   SizeOfInitializedData;
    DWORD   SizeOfUninitializedData;
    DWORD   AddressOfEntryPoint;
    DWORD   BaseOfCode;
    DWORD   BaseOfData;

    
    
    

    DWORD   ImageBase;
    DWORD   SectionAlignment;
    DWORD   FileAlignment;
    WORD    MajorOperatingSystemVersion;
    WORD    MinorOperatingSystemVersion;
    WORD    MajorImageVersion;
    WORD    MinorImageVersion;
    WORD    MajorSubsystemVersion;
    WORD    MinorSubsystemVersion;
    DWORD   Win32VersionValue;
    DWORD   SizeOfImage;
    DWORD   SizeOfHeaders;
    DWORD   CheckSum;
    WORD    Subsystem;
    WORD    DllCharacteristics;
    DWORD   SizeOfStackReserve;
    DWORD   SizeOfStackCommit;
    DWORD   SizeOfHeapReserve;
    DWORD   SizeOfHeapCommit;
    DWORD   LoaderFlags;
    DWORD   NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD   Magic;
    BYTE   MajorLinkerVersion;
    BYTE   MinorLinkerVersion;
    DWORD  SizeOfCode;
    DWORD  SizeOfInitializedData;
    DWORD  SizeOfUninitializedData;
    DWORD  AddressOfEntryPoint;
    DWORD  BaseOfCode;
    DWORD  BaseOfData;
    DWORD  BaseOfBss;
    DWORD  GprMask;
    DWORD  CprMask[4];
    DWORD  GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD        Magic;
    BYTE        MajorLinkerVersion;
    BYTE        MinorLinkerVersion;
    DWORD       SizeOfCode;
    DWORD       SizeOfInitializedData;
    DWORD       SizeOfUninitializedData;
    DWORD       AddressOfEntryPoint;
    DWORD       BaseOfCode;
    ULONGLONG   ImageBase;
    DWORD       SectionAlignment;
    DWORD       FileAlignment;
    WORD        MajorOperatingSystemVersion;
    WORD        MinorOperatingSystemVersion;
    WORD        MajorImageVersion;
    WORD        MinorImageVersion;
    WORD        MajorSubsystemVersion;
    WORD        MinorSubsystemVersion;
    DWORD       Win32VersionValue;
    DWORD       SizeOfImage;
    DWORD       SizeOfHeaders;
    DWORD       CheckSum;
    WORD        Subsystem;
    WORD        DllCharacteristics;
    ULONGLONG   SizeOfStackReserve;
    ULONGLONG   SizeOfStackCommit;
    ULONGLONG   SizeOfHeapReserve;
    ULONGLONG   SizeOfHeapCommit;
    DWORD       LoaderFlags;
    DWORD       NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;
















typedef IMAGE_OPTIONAL_HEADER32             IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32            PIMAGE_OPTIONAL_HEADER;


#line 6701 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;





typedef IMAGE_NT_HEADERS32                  IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32                 PIMAGE_NT_HEADERS;
#line 6726 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"






























































typedef struct ANON_OBJECT_HEADER {
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
} ANON_OBJECT_HEADER;







typedef struct _IMAGE_SECTION_HEADER {
    BYTE    Name[8];
    union {
            DWORD   PhysicalAddress;
            DWORD   VirtualSize;
    } Misc;
    DWORD   VirtualAddress;
    DWORD   SizeOfRawData;
    DWORD   PointerToRawData;
    DWORD   PointerToRelocations;
    DWORD   PointerToLinenumbers;
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

































































#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack2.h"


#line 33 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack2.h"
#line 34 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack2.h"
#line 6885 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 6886 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





typedef struct _IMAGE_SYMBOL {
    union {
        BYTE    ShortName[8];
        struct {
            DWORD   Short;     
            DWORD   Long;      
        } Name;
        DWORD   LongName[2];    
    } N;
    DWORD   Value;
    SHORT   SectionNumber;
    WORD    Type;
    BYTE    StorageClass;
    BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL  *PIMAGE_SYMBOL;


































































































#line 7006 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




#line 7011 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





#line 7017 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




#line 7022 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"



#line 7026 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


#line 7029 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD    TagIndex;                      
        union {
            struct {
                WORD    Linenumber;             
                WORD    Size;                   
            } LnSz;
           DWORD    TotalSize;
        } Misc;
        union {
            struct {                            
                DWORD    PointerToLinenumber;
                DWORD    PointerToNextFunction;
            } Function;
            struct {                            
                WORD     Dimension[4];
            } Array;
        } FcnAry;
        WORD    TvIndex;                        
    } Sym;
    struct {
        BYTE    Name[18];
    } File;
    struct {
        DWORD   Length;                         
        WORD    NumberOfRelocations;            
        WORD    NumberOfLinenumbers;            
        DWORD   CheckSum;                       
        SHORT   Number;                         
        BYTE    Selection;                      
    } Section;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL  *PIMAGE_AUX_SYMBOL;



typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"
#line 7076 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    BYTE  bAuxType;                  
    BYTE  bReserved;                 
    DWORD SymbolTableIndex;
    BYTE  rgbReserved[12];           
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF  *PIMAGE_AUX_SYMBOL_TOKEN_DEF;

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 7087 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





















typedef struct _IMAGE_RELOCATION {
    union {
        DWORD   VirtualAddress;
        DWORD   RelocCount;             
    };
    DWORD   SymbolTableIndex;
    WORD    Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION  *PIMAGE_RELOCATION;


























































































































































































































































































































































typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD   SymbolTableIndex;               
        DWORD   VirtualAddress;                 
    } Type;
    WORD    Linenumber;                         
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER  *PIMAGE_LINENUMBER;




#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"


#line 36 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"
#line 37 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"
#line 7476 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#line 7477 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





typedef struct _IMAGE_BASE_RELOCATION {
    DWORD   VirtualAddress;
    DWORD   SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION  * PIMAGE_BASE_RELOCATION;





























typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE     Name[16];                          
    BYTE     Date[12];                          
    BYTE     UserID[6];                         
    BYTE     GroupID[6];                        
    BYTE     Mode[8];                           
    BYTE     Size[10];                          
    BYTE     EndHeader[2];                      
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;











typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Name;
    DWORD   Base;
    DWORD   NumberOfFunctions;
    DWORD   NumberOfNames;
    DWORD   AddressOfFunctions;     
    DWORD   AddressOfNames;         
    DWORD   AddressOfNameOrdinals;  
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD    Hint;
    BYTE    Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack8.h"


#line 33 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack8.h"
#line 34 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\pshpack8.h"
#line 7561 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString;  
        ULONGLONG Function;         
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;    
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;

#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"


#line 36 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"
#line 37 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"
#line 7573 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

typedef struct _IMAGE_THUNK_DATA32 {
    union {
        DWORD ForwarderString;      
        DWORD Function;             
        DWORD Ordinal;
        DWORD AddressOfData;        
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;












typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG   StartAddressOfRawData;
    ULONGLONG   EndAddressOfRawData;
    ULONGLONG   AddressOfIndex;         
    ULONGLONG   AddressOfCallBacks;     
    DWORD   SizeOfZeroFill;
    DWORD   Characteristics;
} IMAGE_TLS_DIRECTORY64;
typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD   StartAddressOfRawData;
    DWORD   EndAddressOfRawData;
    DWORD   AddressOfIndex;             
    DWORD   AddressOfCallBacks;         
    DWORD   SizeOfZeroFill;
    DWORD   Characteristics;
} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;












typedef IMAGE_THUNK_DATA32              IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32             PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY32           IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32          PIMAGE_TLS_DIRECTORY;
#line 7639 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD   Characteristics;            
        DWORD   OriginalFirstThunk;         
    };
    DWORD   TimeDateStamp;                  
                                            
                                            
                                            

    DWORD   ForwarderChain;                 
    DWORD   Name;
    DWORD   FirstThunk;                     
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR  *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;



















typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    WORD    NumberOfNamedEntries;
    WORD    NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;


















typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        };
        DWORD   Name;
        WORD    Id;
    };
    union {
        DWORD   OffsetToData;
        struct {
            DWORD   OffsetToDirectory:31;
            DWORD   DataIsDirectory:1;
        };
    };
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;










typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD    Length;
    CHAR    NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD    Length;
    WCHAR   NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;











typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD   OffsetToData;
    DWORD   Size;
    DWORD   CodePage;
    DWORD   Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;





typedef struct {
    DWORD   Size;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   GlobalFlagsClear;
    DWORD   GlobalFlagsSet;
    DWORD   CriticalSectionDefaultTimeout;
    DWORD   DeCommitFreeBlockThreshold;
    DWORD   DeCommitTotalFreeThreshold;
    DWORD   LockPrefixTable;            
    DWORD   MaximumAllocationSize;
    DWORD   VirtualMemoryThreshold;
    DWORD   ProcessHeapFlags;
    DWORD   ProcessAffinityMask;
    WORD    CSDVersion;
    WORD    Reserved1;
    DWORD   EditList;                   
    DWORD   SecurityCookie;             
    DWORD   SEHandlerTable;             
    DWORD   SEHandlerCount;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct {
    DWORD      Size;
    DWORD      TimeDateStamp;
    WORD       MajorVersion;
    WORD       MinorVersion;
    DWORD      GlobalFlagsClear;
    DWORD      GlobalFlagsSet;
    DWORD      CriticalSectionDefaultTimeout;
    ULONGLONG  DeCommitFreeBlockThreshold;
    ULONGLONG  DeCommitTotalFreeThreshold;
    ULONGLONG  LockPrefixTable;         
    ULONGLONG  MaximumAllocationSize;
    ULONGLONG  VirtualMemoryThreshold;
    ULONGLONG  ProcessAffinityMask;
    DWORD      ProcessHeapFlags;
    WORD       CSDVersion;
    WORD       Reserved1;
    ULONGLONG  EditList;                
    ULONGLONG  SecurityCookie;          
    ULONGLONG  SEHandlerTable;          
    ULONGLONG  SEHandlerCount;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;





typedef IMAGE_LOAD_CONFIG_DIRECTORY32     IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32    PIMAGE_LOAD_CONFIG_DIRECTORY;
#line 7830 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"










typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD UnwindInfoAddress;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;








#line 7881 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"




#line 7886 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;

#line 7891 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Type;
    DWORD   SizeOfData;
    DWORD   AddressOfRawData;
    DWORD   PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;















typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD   NumberOfSymbols;
    DWORD   LvaToFirstSymbol;
    DWORD   NumberOfLinenumbers;
    DWORD   LvaToFirstLinenumber;
    DWORD   RvaToFirstByteOfCode;
    DWORD   RvaToLastByteOfCode;
    DWORD   RvaToFirstByteOfData;
    DWORD   RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD       ulOffStart;             
    DWORD       cbProcSize;             
    DWORD       cdwLocals;              
    WORD        cdwParams;              
    WORD        cbProlog : 8;           
    WORD        cbRegs   : 3;           
    WORD        fHasSEH  : 1;           
    WORD        fUseBP   : 1;           
    WORD        reserved : 1;           
    WORD        cbFrame  : 2;           
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD       DataType;               
    DWORD       Length;                 
                                        
    BOOLEAN     Unicode;                
    BYTE        Reserved[ 3 ];
    BYTE        Data[ 1 ];              
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;








typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD   StartingAddress;
    DWORD   EndingAddress;
    DWORD   EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG   StartingAddress;
    ULONGLONG   EndingAddress;
    union {
        ULONGLONG   EndOfPrologue;
        ULONGLONG   UnwindInfoAddress;
    };
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;





















typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD        Signature;
    WORD        Flags;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       ImageBase;
    DWORD       SizeOfImage;
    DWORD       NumberOfSections;
    DWORD       ExportedNamesSize;
    DWORD       DebugDirectorySize;
    DWORD       SectionAlignment;
    DWORD       Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;

typedef struct _NON_PAGED_DEBUG_INFO {
    WORD        Signature;
    WORD        Flags;
    DWORD       Size;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       SizeOfImage;
    ULONGLONG   ImageBase;
    
    
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;







#line 8042 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"



                                                









typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;                 
                                                
    int :7;                                     
    unsigned int AmaskShift: 8;                 
    int :16;                                    
    DWORD FirstEntryRVA;                        
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;                         
    DWORD NewInst;                              
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;

#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"


#line 36 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"
#line 37 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\poppack.h"
#line 8070 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"








typedef struct IMPORT_OBJECT_HEADER {
    WORD    Sig1;                       
    WORD    Sig2;                       
    WORD    Version;
    WORD    Machine;
    DWORD   TimeDateStamp;              
    DWORD   SizeOfData;                 

    union {
        WORD    Ordinal;                
        WORD    Hint;
    };

    WORD    Type : 2;                   
    WORD    NameType : 3;               
    WORD    Reserved : 11;              
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,          
    IMPORT_OBJECT_NAME = 1,             
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,   
    IMPORT_OBJECT_NAME_UNDECORATE = 3,  
                                        
} IMPORT_OBJECT_NAME_TYPE;





typedef enum ReplacesCorHdrNumericDefines
{

    COMIMAGE_FLAGS_ILONLY               =0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED        =0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY           =0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED     =0x00000008,
    COMIMAGE_FLAGS_TRACKDEBUGDATA       =0x00010000,


    COR_VERSION_MAJOR_V2                =2,
    COR_VERSION_MAJOR                   =COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR                   =0,
    COR_DELETED_NAME_LENGTH             =8,
    COR_VTABLEGAP_NAME_LENGTH           =8,


    NATIVE_TYPE_MAX_CB                  =1,   
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,


    IMAGE_COR_MIH_METHODRVA             =0x01,
    IMAGE_COR_MIH_EHRVA                 =0x02,    
    IMAGE_COR_MIH_BASICBLOCK            =0x08,


    COR_VTABLE_32BIT                    =0x01,          
    COR_VTABLE_64BIT                    =0x02,          
    COR_VTABLE_FROM_UNMANAGED           =0x04,          
    COR_VTABLE_CALL_MOST_DERIVED        =0x10,          


    IMAGE_COR_EATJ_THUNK_SIZE           =32,            


    
    MAX_CLASS_NAME                      =1024,
    MAX_PACKAGE_NAME                    =1024,
} ReplacesCorHdrNumericDefines;


typedef struct IMAGE_COR20_HEADER
{
    
    DWORD                   cb;              
    WORD                    MajorRuntimeVersion;
    WORD                    MinorRuntimeVersion;
    
    
    IMAGE_DATA_DIRECTORY    MetaData;        
    DWORD                   Flags;           
    DWORD                   EntryPointToken;
    
    
    IMAGE_DATA_DIRECTORY    Resources;
    IMAGE_DATA_DIRECTORY    StrongNameSignature;

    
    IMAGE_DATA_DIRECTORY    CodeManagerTable;
    IMAGE_DATA_DIRECTORY    VTableFixups;
    IMAGE_DATA_DIRECTORY    ExportAddressTableJumps;

    
    IMAGE_DATA_DIRECTORY    ManagedNativeHeader;
    
} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;

#line 8184 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"














#line 8199 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
























#line 8224 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





#line 8230 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"










#line 8241 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

typedef union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct {
        SINGLE_LIST_ENTRY Next;
        WORD   Depth;
        WORD   Sequence;
    };
} SLIST_HEADER, *PSLIST_HEADER;

#line 8252 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

#line 8254 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


__declspec(dllimport)
void
__stdcall
RtlInitializeSListHead (
     PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
RtlFirstEntrySList (
     const SLIST_HEADER *ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
RtlInterlockedPopEntrySList (
     PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
RtlInterlockedPushEntrySList (
     PSLIST_HEADER ListHead,
     PSINGLE_LIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
RtlInterlockedFlushSList (
     PSLIST_HEADER ListHead
    );

__declspec(dllimport)
WORD  
__stdcall
RtlQueryDepthSList (
     PSLIST_HEADER ListHead
    );

















__declspec(dllimport)
void
__stdcall
RtlCaptureContext (
     PCONTEXT ContextRecord
    );





















































#line 8375 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

__declspec(dllimport)
SIZE_T
__stdcall
RtlCompareMemory (
    const void *Source1,
    const void *Source2,
    SIZE_T Length
    );











__forceinline
PVOID
RtlSecureZeroMemory(
     PVOID ptr,
     SIZE_T cnt
    )
{
    volatile char *vptr = (volatile char *)ptr;





#line 8409 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

    while (cnt) {
        *vptr = 0;
        vptr++;
        cnt--;
    }

#line 8417 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

    return ptr;
}

#line 8422 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD   Length;
    WORD   Flags;
    BYTE  Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;





typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
#line 8469 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
    WORD   wServicePackMajor;
    WORD   wServicePackMinor;
    WORD   wSuiteMask;
    BYTE  wProductType;
    BYTE  wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
    WORD   wServicePackMajor;
    WORD   wServicePackMinor;
    WORD   wSuiteMask;
    BYTE  wProductType;
    BYTE  wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;





typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
#line 8505 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


























































__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
          ULONGLONG   ConditionMask,
          DWORD   TypeMask,
          BYTE    Condition
        );


typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD   Type;
    WORD   CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Spare[ 2 ];
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;




typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;

    
    
    
    

    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;        
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;        
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

typedef void (__stdcall * RTL_VERIFIER_DLL_LOAD_CALLBACK) (
    PWSTR DllName,
    PVOID DllBase,
    SIZE_T DllSize,
    PVOID Reserved
    );

typedef void (__stdcall * RTL_VERIFIER_DLL_UNLOAD_CALLBACK) (
    PWSTR DllName,
    PVOID DllBase,
    SIZE_T DllSize,
    PVOID Reserved
    );

typedef void (__stdcall * RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK) (
    PVOID AllocationBase,
    SIZE_T AllocationSize
    );

typedef struct _RTL_VERIFIER_THUNK_DESCRIPTOR {

    PCHAR ThunkName;
    PVOID ThunkOldAddress;
    PVOID ThunkNewAddress;

} RTL_VERIFIER_THUNK_DESCRIPTOR, *PRTL_VERIFIER_THUNK_DESCRIPTOR;

typedef struct _RTL_VERIFIER_DLL_DESCRIPTOR {

    PWCHAR DllName;
    DWORD DllFlags;
    PVOID DllAddress;
    PRTL_VERIFIER_THUNK_DESCRIPTOR DllThunks;

} RTL_VERIFIER_DLL_DESCRIPTOR, *PRTL_VERIFIER_DLL_DESCRIPTOR;

typedef struct _RTL_VERIFIER_PROVIDER_DESCRIPTOR {

    
    
    

    DWORD Length;        
    PRTL_VERIFIER_DLL_DESCRIPTOR ProviderDlls;
    RTL_VERIFIER_DLL_LOAD_CALLBACK ProviderDllLoadCallback;
    RTL_VERIFIER_DLL_UNLOAD_CALLBACK ProviderDllUnloadCallback;
    
    
    
    
        
    PWSTR VerifierImage;
    DWORD VerifierFlags;
    DWORD VerifierDebug;
    
    PVOID RtlpGetStackTraceAddress;
    PVOID RtlpDebugPageHeapCreate;
    PVOID RtlpDebugPageHeapDestroy;

    
    
    
    
    RTL_VERIFIER_NTDLLHEAPFREE_CALLBACK ProviderNtdllHeapFreeCallback;

} RTL_VERIFIER_PROVIDER_DESCRIPTOR, *PRTL_VERIFIER_PROVIDER_DESCRIPTOR;


























































































































void
__stdcall
RtlApplicationVerifierStop (
         ULONG_PTR Code,
         PSTR Message,
         ULONG_PTR Param1,
         PSTR Description1,
         ULONG_PTR Param2,
         PSTR Description2,
         ULONG_PTR Param3,
         PSTR Description3,
         ULONG_PTR Param4,
         PSTR Description4
    );

typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );








typedef enum _HEAP_INFORMATION_CLASS {

    HeapCompatibilityInformation

} HEAP_INFORMATION_CLASS;

__declspec(dllimport)
DWORD   
__stdcall
RtlSetHeapInformation (
     PVOID HeapHandle,
     HEAP_INFORMATION_CLASS HeapInformationClass,
     PVOID HeapInformation ,
     SIZE_T HeapInformationLength 
    );

__declspec(dllimport)
DWORD   
__stdcall
RtlQueryHeapInformation (
     PVOID HeapHandle,
     HEAP_INFORMATION_CLASS HeapInformationClass,
     PVOID HeapInformation ,
     SIZE_T HeapInformationLength ,
     PSIZE_T ReturnLength 
    );





DWORD
__stdcall
RtlMultipleAllocateHeap (
     PVOID HeapHandle,
     DWORD Flags,
     SIZE_T Size,
     DWORD Count,
     PVOID * Array
    );

DWORD
__stdcall
RtlMultipleFreeHeap (
     PVOID HeapHandle,
     DWORD Flags,
     DWORD Count,
     PVOID * Array
    );
    











typedef void (__stdcall * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );   
typedef void (__stdcall * WORKERCALLBACKFUNC) (PVOID );                 
typedef void (__stdcall * APC_CALLBACK_FUNCTION) (DWORD   , PVOID, PVOID); 
typedef
void
(__stdcall *PFLS_CALLBACK_FUNCTION) (
     PVOID lpFlsData
    );



typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation                       = 1,
    ActivationContextDetailedInformation                    = 2,
    AssemblyDetailedInformationInActivationContext          = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext  = 4,
    MaxActivationContextInfoClass,

    
    
    
    AssemblyDetailedInformationInActivationContxt           = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt   = 4
} ACTIVATION_CONTEXT_INFO_CLASS;




typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex; 
    DWORD ulFileIndexInAssembly; 
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX * PCACTIVATION_CONTEXT_QUERY_INDEX;







typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength; 

    PCWSTR lpFileName;
    PCWSTR lpFilePath;   
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;










typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;      
    DWORD ulManifestPathType;                   
    DWORD ulManifestPathLength;                 
    LARGE_INTEGER liManifestLastWriteTime;      
    DWORD ulPolicyPathType;                     
    DWORD ulPolicyPathLength;                   
    LARGE_INTEGER liPolicyLastWriteTime;        
    DWORD ulMetadataSatelliteRosterIndex;
    
    DWORD ulManifestVersionMajor;               
    DWORD ulManifestVersionMinor;               
    DWORD ulPolicyVersionMajor;                 
    DWORD ulPolicyVersionMinor;                 
    DWORD ulAssemblyDirectoryNameLength;        

    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;

    DWORD  ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;













































typedef struct _EVENTLOGRECORD {
    DWORD  Length;        
    DWORD  Reserved;      
    DWORD  RecordNumber;  
    DWORD  TimeGenerated; 
    DWORD  TimeWritten;   
    DWORD  EventID;
    WORD   EventType;
    WORD   NumStrings;
    WORD   EventCategory;
    WORD   ReservedFlags; 
    DWORD  ClosingRecordNumber; 
    DWORD  StringOffset;  
    DWORD  UserSidLength;
    DWORD  UserSidOffset;
    DWORD  DataLength;
    DWORD  DataOffset;    
    
    
    
    
    
    
    
    
    
    
    
} EVENTLOGRECORD, *PEVENTLOGRECORD;






#pragma warning(push)
#line 9061 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"
#pragma warning(disable : 4200)
typedef struct _EVENTSFORLOGFILE{
	DWORD			ulSize;
    WCHAR   		szLogicalLogFile[256];        
    DWORD			ulNumRecords;
	EVENTLOGRECORD 	pEventLogRecords[];
}EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

typedef struct _PACKEDEVENTINFO{
    DWORD               ulSize;  
    DWORD               ulNumEventsForLogFile; 
    DWORD 				ulOffsets[];           
}PACKEDEVENTINFO, *PPACKEDEVENTINFO;


#pragma warning(pop)


#line 9080 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





















































                                                    


                                                    


                                                    


                                                    
                                                    































































                                            






























































typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType               = 0x00000001,
    FileSystemType           = 0x00000002,
    Win32ServiceOwnProcess   = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType              = 0x00000004,
    RecognizerType           = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad    = 0x00000000,
    SystemLoad  = 0x00000001,
    AutoLoad    = 0x00000002,
    DemandLoad  = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError   = 0x00000000,
    NormalError   = 0x00000001,
    SevereError   = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;










typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;












typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;










typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;









typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
















typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;























































































typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;









typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;











typedef struct _TAPE_WMI_OPERATIONS {
   DWORD Method;
   DWORD DataBufferSize;
   PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;




typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
   TapeDriveProblemNone, TapeDriveReadWriteWarning,
   TapeDriveReadWriteError, TapeDriveReadWarning,
   TapeDriveWriteWarning, TapeDriveReadError,
   TapeDriveWriteError, TapeDriveHardwareError,
   TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
   TapeDriveTimetoClean, TapeDriveCleanDriveNow,
   TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;




































#line 9586 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"








__inline struct _TEB * NtCurrentTeb( void ) { return (struct _TEB *) (ULONG_PTR) __readfsdword (0x18); }

















#line 9613 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"

#line 9615 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"











#line 9627 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"





#line 9633 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnt.h"


#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"




typedef UINT_PTR            WPARAM;
typedef LONG_PTR            LPARAM;
typedef LONG_PTR            LRESULT;





#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"



#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"

#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"










struct HWND__ { int unused; }; typedef struct HWND__ *HWND;
struct HHOOK__ { int unused; }; typedef struct HHOOK__ *HHOOK;



#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"

typedef WORD                ATOM;

typedef HANDLE          *SPHANDLE;
typedef HANDLE           *LPHANDLE;
typedef HANDLE              HGLOBAL;
typedef HANDLE              HLOCAL;
typedef HANDLE              GLOBALHANDLE;
typedef HANDLE              LOCALHANDLE;






typedef int ( __stdcall *FARPROC)();
typedef int ( __stdcall *NEARPROC)();
typedef int (__stdcall *PROC)();
#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"




#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"



typedef void * HGDIOBJ;


#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"

struct HKEY__ { int unused; }; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;


struct HACCEL__ { int unused; }; typedef struct HACCEL__ *HACCEL;
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"

struct HBITMAP__ { int unused; }; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__ { int unused; }; typedef struct HBRUSH__ *HBRUSH;
#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"

struct HCOLORSPACE__ { int unused; }; typedef struct HCOLORSPACE__ *HCOLORSPACE;
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"

struct HDC__ { int unused; }; typedef struct HDC__ *HDC;
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"
struct HGLRC__ { int unused; }; typedef struct HGLRC__ *HGLRC;          
struct HDESK__ { int unused; }; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__ { int unused; }; typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__ { int unused; }; typedef struct HFONT__ *HFONT;
#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"
struct HICON__ { int unused; }; typedef struct HICON__ *HICON;

struct HMENU__ { int unused; }; typedef struct HMENU__ *HMENU;
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"
struct HMETAFILE__ { int unused; }; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__ { int unused; }; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;      

struct HPALETTE__ { int unused; }; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__ { int unused; }; typedef struct HPEN__ *HPEN;
#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"
struct HRGN__ { int unused; }; typedef struct HRGN__ *HRGN;
struct HRSRC__ { int unused; }; typedef struct HRSRC__ *HRSRC;
struct HSTR__ { int unused; }; typedef struct HSTR__ *HSTR;
struct HTASK__ { int unused; }; typedef struct HTASK__ *HTASK;
struct HWINSTA__ { int unused; }; typedef struct HWINSTA__ *HWINSTA;
struct HKL__ { int unused; }; typedef struct HKL__ *HKL;



struct HMONITOR__ { int unused; }; typedef struct HMONITOR__ *HMONITOR;
struct HWINEVENTHOOK__ { int unused; }; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"
struct HUMPD__ { int unused; }; typedef struct HUMPD__ *HUMPD;
#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"


typedef int HFILE;
typedef HICON HCURSOR;      



#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"

typedef DWORD   COLORREF;
typedef DWORD   *LPCOLORREF;



typedef struct tagRECT
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECT, *PRECT,  *NPRECT,  *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL       
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG  x;
    LONG  y;
} POINT, *PPOINT,  *NPPOINT,  *LPPOINT;

typedef struct _POINTL      
{
    LONG  x;
    LONG  y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG        cx;
    LONG        cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE               SIZEL;
typedef SIZE               *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT   x;
    SHORT   y;



#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"
} POINTS, *PPOINTS, *LPPOINTS;





typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;






































#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windef.h"

#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"












#pragma once
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"













#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"





#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"





#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



















































































































#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"









#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


























































typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union {
        struct {
            DWORD Offset;
            DWORD OffsetHigh;
        };

        PVOID Pointer;
    };

    HANDLE  hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;



















typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;






#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;

__declspec(dllimport)
      
PVOID
__stdcall
EncodePointer (
           PVOID Ptr
    );

__declspec(dllimport)
      
PVOID
__stdcall
DecodePointer (
           PVOID Ptr
    );

__declspec(dllimport)
      
PVOID
__stdcall
EncodeSystemPointer (
           PVOID Ptr
    );

__declspec(dllimport)
      
PVOID
__stdcall
DecodeSystemPointer (
           PVOID Ptr
    );


typedef PLDT_ENTRY LPLDT_ENTRY;


#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"









































































































typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
















typedef struct _DCB {
    DWORD DCBlength;      
    DWORD BaudRate;       
    DWORD fBinary: 1;     
    DWORD fParity: 1;     
    DWORD fOutxCtsFlow:1; 
    DWORD fOutxDsrFlow:1; 
    DWORD fDtrControl:2;  
    DWORD fDsrSensitivity:1; 
    DWORD fTXContinueOnXoff: 1; 
    DWORD fOutX: 1;       
    DWORD fInX: 1;        
    DWORD fErrorChar: 1;  
    DWORD fNull: 1;       
    DWORD fRtsControl:2;  
    DWORD fAbortOnError:1; 
    DWORD fDummy2:17;     
    WORD wReserved;       
    WORD XonLim;          
    WORD XoffLim;         
    BYTE ByteSize;        
    BYTE Parity;          
    BYTE StopBits;        
    char XonChar;         
    char XoffChar;        
    char ErrorChar;       
    char EofChar;         
    char EvtChar;         
    WORD wReserved1;      
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;          
    DWORD ReadTotalTimeoutMultiplier;   
    DWORD ReadTotalTimeoutConstant;     
    DWORD WriteTotalTimeoutMultiplier;  
    DWORD WriteTotalTimeoutConstant;    
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;               
    WORD wVersion;              
    WORD wReserved;             
    DCB dcb;                    
    DWORD dwProviderSubType;    

    DWORD dwProviderOffset;     

    DWORD dwProviderSize;       
    WCHAR wcProviderData[1];    
} COMMCONFIG,*LPCOMMCONFIG;

typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;          
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        };
    };
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;




































typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;
























































































typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;


typedef PCONTEXT LPCONTEXT;
typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
#line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"














#line 798 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"











































































































































































































typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;



















































































































































































































































































































































































































































#line 1445 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"




























































































































#line 1570 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
LONG
__stdcall
InterlockedIncrement (
         LONG volatile *lpAddend
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedDecrement (
         LONG volatile *lpAddend
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedExchange (
         LONG volatile *Target,
            LONG Value
    );




__declspec(dllimport)
LONG
__stdcall
InterlockedExchangeAdd (
         LONG volatile *Addend,
            LONG Value
    );

__declspec(dllimport)
LONG
__stdcall
InterlockedCompareExchange (
         LONG volatile *Destination,
            LONG Exchange,
            LONG Comperand
    );












#line 1625 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

































































































































#line 1755 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

#line 1757 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"




























#line 1786 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"














#line 1801 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



__declspec(dllimport)
void
__stdcall
InitializeSListHead (
         PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
InterlockedPopEntrySList (
         PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
InterlockedPushEntrySList (
         PSLIST_HEADER ListHead,
         PSINGLE_LIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSINGLE_LIST_ENTRY
__stdcall
InterlockedFlushSList (
         PSLIST_HEADER ListHead
    );

__declspec(dllimport)
USHORT
__stdcall
QueryDepthSList (
         PSLIST_HEADER ListHead
    );

#line 1841 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

#line 1843 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

#line 1845 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FreeResource(
         HGLOBAL hResData
    );

__declspec(dllimport)
LPVOID
__stdcall
LockResource(
         HGLOBAL hResData
    );






int



#line 1870 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
__stdcall
#line 1872 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


#line 1875 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
WinMain (
         HINSTANCE hInstance,
           HINSTANCE hPrevInstance,
           LPSTR lpCmdLine,
         int nShowCmd
    );

__declspec(dllimport)
BOOL
__stdcall
FreeLibrary (
         HMODULE hLibModule
    );


__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
FreeLibraryAndExitThread (
         HMODULE hLibModule,
         DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
DisableThreadLibraryCalls (
         HMODULE hLibModule
    );

__declspec(dllimport)
FARPROC
__stdcall
GetProcAddress (
         HMODULE hModule,
         LPCSTR lpProcName
    );

__declspec(dllimport)
DWORD
__stdcall
GetVersion (
    void
    );

__declspec(dllimport)
    
HGLOBAL
__stdcall
GlobalAlloc (
         UINT uFlags,
         SIZE_T dwBytes
    );

__declspec(dllimport)
    
HGLOBAL
__stdcall
GlobalReAlloc (
         HGLOBAL hMem,
         SIZE_T dwBytes,
         UINT uFlags
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalSize (
         HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalFlags (
         HGLOBAL hMem
    );

__declspec(dllimport)
    
LPVOID
__stdcall
GlobalLock ( 
         HGLOBAL hMem
    );

__declspec(dllimport)
    
HGLOBAL
__stdcall
GlobalHandle (
         LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnlock(
         HGLOBAL hMem
    );

__declspec(dllimport)
    
HGLOBAL
__stdcall
GlobalFree(
     HGLOBAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalCompact(
         DWORD dwMinFree
    );

__declspec(dllimport)
void
__stdcall
GlobalFix(
         HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalUnfix(
         HGLOBAL hMem
    );

__declspec(dllimport)
    
LPVOID
__stdcall
GlobalWire(
         HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnWire(
         HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalMemoryStatus(
         LPMEMORYSTATUS lpBuffer
    );

typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

__declspec(dllimport)
BOOL
__stdcall
GlobalMemoryStatusEx(
         LPMEMORYSTATUSEX lpBuffer
    );

__declspec(dllimport)
    
HLOCAL
__stdcall
LocalAlloc(
         UINT uFlags,
         SIZE_T uBytes
    );

__declspec(dllimport)
    
HLOCAL
__stdcall
LocalReAlloc(
         HLOCAL hMem,
         SIZE_T uBytes,
         UINT uFlags
    );

__declspec(dllimport)
    
LPVOID
__stdcall
LocalLock(
         HLOCAL hMem
    );

__declspec(dllimport)
    
HLOCAL
__stdcall
LocalHandle(
         LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
LocalUnlock(
         HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalSize(
         HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalFlags(
         HLOCAL hMem
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalFree(
     HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalShrink(
         HLOCAL hMem,
         UINT cbNewSize
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalCompact(
         UINT uMinFree
    );

__declspec(dllimport)
BOOL
__stdcall
FlushInstructionCache(
         HANDLE hProcess,
             LPCVOID lpBaseAddress,
         SIZE_T dwSize
    );

__declspec(dllimport)
 
LPVOID
__stdcall
VirtualAlloc(
           LPVOID lpAddress,
             SIZE_T dwSize,
             DWORD flAllocationType,
             DWORD flProtect
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualFree(
         LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD dwFreeType
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualProtect(
          LPVOID lpAddress,
          SIZE_T dwSize,
          DWORD flNewProtect,
         PDWORD lpflOldProtect
    );

__declspec(dllimport)
SIZE_T
__stdcall
VirtualQuery(
           LPCVOID lpAddress,
           PMEMORY_BASIC_INFORMATION lpBuffer,
             SIZE_T dwLength
    );

__declspec(dllimport)
 
LPVOID
__stdcall
VirtualAllocEx(
             HANDLE hProcess,
           LPVOID lpAddress,
             SIZE_T dwSize,
             DWORD flAllocationType,
             DWORD flProtect
    );

__declspec(dllimport)
UINT
__stdcall
GetWriteWatch(
         DWORD dwFlags,
         PVOID lpBaseAddress,
         SIZE_T dwRegionSize,
           PVOID *lpAddresses,
         ULONG_PTR *lpdwCount,
         PULONG lpdwGranularity
    );

__declspec(dllimport)
UINT
__stdcall
ResetWriteWatch(
         LPVOID lpBaseAddress,
         SIZE_T dwRegionSize
    );

__declspec(dllimport)
SIZE_T
__stdcall
GetLargePageMinimum(
    void
    );

__declspec(dllimport)
UINT
__stdcall
EnumSystemFirmwareTables(
         DWORD FirmwareTableProviderSignature,
             PVOID pFirmwareTableEnumBuffer,
         DWORD BufferSize
    );
    
__declspec(dllimport)
UINT
__stdcall
GetSystemFirmwareTable(
         DWORD FirmwareTableProviderSignature,
         DWORD FirmwareTableID,
             PVOID pFirmwareTableBuffer,
         DWORD BufferSize
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualFreeEx(
         HANDLE hProcess,
         LPVOID lpAddress,
         SIZE_T dwSize,
         DWORD  dwFreeType
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualProtectEx(
          HANDLE hProcess,
          LPVOID lpAddress,
          SIZE_T dwSize,
          DWORD flNewProtect,
         PDWORD lpflOldProtect
    );

__declspec(dllimport)
SIZE_T
__stdcall
VirtualQueryEx(
             HANDLE hProcess,
           LPCVOID lpAddress,
           PMEMORY_BASIC_INFORMATION lpBuffer,
             SIZE_T dwLength
    );

__declspec(dllimport)
    
HANDLE
__stdcall
HeapCreate(
         DWORD flOptions,
         SIZE_T dwInitialSize,
         SIZE_T dwMaximumSize
    );

__declspec(dllimport)
BOOL
__stdcall
HeapDestroy(
         HANDLE hHeap
    );


__declspec(dllimport)
 
LPVOID
__stdcall
HeapAlloc(
         HANDLE hHeap,
         DWORD dwFlags,
         SIZE_T dwBytes
    );

__declspec(dllimport)
 
LPVOID
__stdcall
HeapReAlloc(
         HANDLE hHeap,
            DWORD dwFlags,
     LPVOID lpMem,
            SIZE_T dwBytes
    );

__declspec(dllimport)
BOOL
__stdcall
HeapFree(
         HANDLE hHeap,
            DWORD dwFlags,
     LPVOID lpMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
HeapSize(
         HANDLE hHeap,
         DWORD dwFlags,
         LPCVOID lpMem
    );

__declspec(dllimport)
BOOL
__stdcall
HeapValidate(
             HANDLE hHeap,
             DWORD dwFlags,
           LPCVOID lpMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
HeapCompact(
         HANDLE hHeap,
         DWORD dwFlags
    );

__declspec(dllimport)
    
HANDLE
__stdcall
GetProcessHeap( void );

__declspec(dllimport)
DWORD
__stdcall
GetProcessHeaps(
         DWORD NumberOfHeaps,
           PHANDLE ProcessHeaps
    );

typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    };
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;







__declspec(dllimport)
BOOL
__stdcall
HeapLock(
         HANDLE hHeap
    );

__declspec(dllimport)
BOOL
__stdcall
HeapUnlock(
         HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapWalk(
            HANDLE hHeap,
         LPPROCESS_HEAP_ENTRY lpEntry
    );

__declspec(dllimport)
BOOL
__stdcall
HeapSetInformation (
         HANDLE HeapHandle, 
         HEAP_INFORMATION_CLASS HeapInformationClass,
             PVOID HeapInformation,
         SIZE_T HeapInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
HeapQueryInformation (
              HANDLE HeapHandle, 
              HEAP_INFORMATION_CLASS HeapInformationClass,
             PVOID HeapInformation,
              SIZE_T HeapInformationLength,
           PSIZE_T ReturnLength
    );













#line 2433 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

#line 2435 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeA(
          LPCSTR lpApplicationName,
         LPDWORD  lpBinaryType
    );
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeW(
          LPCWSTR lpApplicationName,
         LPDWORD  lpBinaryType
    );




#line 2455 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetShortPathNameA(
         LPCSTR lpszLongPath,
           LPSTR  lpszShortPath,
         DWORD cchBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetShortPathNameW(
         LPCWSTR lpszLongPath,
           LPWSTR  lpszShortPath,
         DWORD cchBuffer
    );




#line 2477 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetLongPathNameA(
         LPCSTR lpszShortPath,
           LPSTR  lpszLongPath,
         DWORD cchBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetLongPathNameW(
         LPCWSTR lpszShortPath,
           LPWSTR  lpszLongPath,
         DWORD cchBuffer
    );




#line 2499 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetProcessAffinityMask(
          HANDLE hProcess,
         PDWORD_PTR lpProcessAffinityMask,
         PDWORD_PTR lpSystemAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityMask(
         HANDLE hProcess,
         DWORD_PTR dwProcessAffinityMask
    );











#line 2528 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetProcessTimes(
          HANDLE hProcess,
         LPFILETIME lpCreationTime,
         LPFILETIME lpExitTime,
         LPFILETIME lpKernelTime,
         LPFILETIME lpUserTime
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessIoCounters(
          HANDLE hProcess,
         PIO_COUNTERS lpIoCounters
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSize(
          HANDLE hProcess,
         PSIZE_T lpMinimumWorkingSetSize,
         PSIZE_T lpMaximumWorkingSetSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSizeEx(
          HANDLE hProcess,
         PSIZE_T lpMinimumWorkingSetSize,
         PSIZE_T lpMaximumWorkingSetSize,
         PDWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSize(
         HANDLE hProcess,
         SIZE_T dwMinimumWorkingSetSize,
         SIZE_T dwMaximumWorkingSetSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSizeEx(
         HANDLE hProcess,
         SIZE_T dwMinimumWorkingSetSize,
         SIZE_T dwMaximumWorkingSetSize,
         DWORD Flags
    );

__declspec(dllimport)
    
HANDLE
__stdcall
OpenProcess(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwProcessId
    );

__declspec(dllimport)
    
HANDLE
__stdcall
GetCurrentProcess(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessId(
    void
    );

__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitProcess(
         UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateProcess(
         HANDLE hProcess,
         UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetExitCodeProcess(
          HANDLE hProcess,
         LPDWORD lpExitCode
    );

__declspec(dllimport)
void
__stdcall
FatalExit(
         int ExitCode
    );

__declspec(dllimport)
    

LPCH
__stdcall
GetEnvironmentStrings(
    void
    );

__declspec(dllimport)
    

LPWCH
__stdcall
GetEnvironmentStringsW(
    void
    );





#line 2665 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsA(
          LPCH NewEnvironment
    );
__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsW(
          LPWCH NewEnvironment
    );




#line 2683 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsA(
          LPCH
    );
__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsW(
          LPWCH
    );




#line 2701 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
void
__stdcall
RaiseException(
         DWORD dwExceptionCode,
         DWORD dwExceptionFlags,
         DWORD nNumberOfArguments,
             const ULONG_PTR *lpArguments
    );


__declspec(dllimport)
LONG
__stdcall
UnhandledExceptionFilter(
         struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
         struct _EXCEPTION_POINTERS *ExceptionInfo
    );
typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;

__declspec(dllimport)
LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
         LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );












































































#line 2808 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HANDLE
__stdcall
CreateThread(
            LPSECURITY_ATTRIBUTES lpThreadAttributes,
              SIZE_T dwStackSize,
              LPTHREAD_START_ROUTINE lpStartAddress,
            LPVOID lpParameter,
              DWORD dwCreationFlags,
           LPDWORD lpThreadId
    );

__declspec(dllimport)
    
HANDLE
__stdcall
CreateRemoteThread(
              HANDLE hProcess,
            LPSECURITY_ATTRIBUTES lpThreadAttributes,
              SIZE_T dwStackSize,
              LPTHREAD_START_ROUTINE lpStartAddress,
            LPVOID lpParameter,
              DWORD dwCreationFlags,
           LPDWORD lpThreadId
    );

__declspec(dllimport)
    
HANDLE
__stdcall
GetCurrentThread(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentThreadId(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadStackGuarantee (
         PULONG StackSizeInBytes
    );

__declspec(dllimport)
DWORD
__stdcall
GetProcessIdOfThread(
         HANDLE Thread
    );

__declspec(dllimport)
DWORD
__stdcall
GetThreadId(
         HANDLE Thread
    );

__declspec(dllimport)
DWORD
__stdcall
GetProcessId(
         HANDLE Process
    );

__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessorNumber(
    void
    );

__declspec(dllimport)
DWORD_PTR
__stdcall
SetThreadAffinityMask(
         HANDLE hThread,
         DWORD_PTR dwThreadAffinityMask
    );









#line 2903 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetProcessPriorityBoost(
         HANDLE hProcess,
         BOOL bDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessPriorityBoost(
          HANDLE hProcess,
         PBOOL  pDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
RequestWakeupLatency(
         LATENCY_TIME latency
    );

__declspec(dllimport)
BOOL
__stdcall
IsSystemResumeAutomatic(
    void
    );

__declspec(dllimport)
    
HANDLE
__stdcall
OpenThread(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         DWORD dwThreadId
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadPriority(
         HANDLE hThread,
         int nPriority
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadPriorityBoost(
         HANDLE hThread,
         BOOL bDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadPriorityBoost(
          HANDLE hThread,
         PBOOL pDisablePriorityBoost
    );

__declspec(dllimport)
int
__stdcall
GetThreadPriority(
         HANDLE hThread
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadTimes(
          HANDLE hThread,
         LPFILETIME lpCreationTime,
         LPFILETIME lpExitTime,
         LPFILETIME lpKernelTime,
         LPFILETIME lpUserTime
    );











#line 2997 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitThread(
         DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateThread(
         HANDLE hThread,
         DWORD dwExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetExitCodeThread(
          HANDLE hThread,
         LPDWORD lpExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
GetThreadSelectorEntry(
          HANDLE hThread,
          DWORD dwSelector,
         LPLDT_ENTRY lpSelectorEntry
    );

__declspec(dllimport)
EXECUTION_STATE
__stdcall
SetThreadExecutionState(
         EXECUTION_STATE esFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetLastError(
    void
    );

__declspec(dllimport)
void
__stdcall
SetLastError(
         DWORD dwErrCode
    );

















#line 3069 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
#line 3070 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResult(
          HANDLE hFile,
          LPOVERLAPPED lpOverlapped,
         LPDWORD lpNumberOfBytesTransferred,
          BOOL bWait
    );

__declspec(dllimport)
    
HANDLE
__stdcall
CreateIoCompletionPort(
             HANDLE FileHandle,
           HANDLE ExistingCompletionPort,
             ULONG_PTR CompletionKey,
             DWORD NumberOfConcurrentThreads
    );

__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatus(
          HANDLE CompletionPort,
         LPDWORD lpNumberOfBytesTransferred,
         PULONG_PTR lpCompletionKey,
         LPOVERLAPPED *lpOverlapped,
          DWORD dwMilliseconds
    );

__declspec(dllimport)
BOOL
__stdcall
PostQueuedCompletionStatus(
             HANDLE CompletionPort,
             DWORD dwNumberOfBytesTransferred,
             ULONG_PTR dwCompletionKey,
           LPOVERLAPPED lpOverlapped
    );






__declspec(dllimport)
UINT
__stdcall
SetErrorMode(
         UINT uMode
    );

__declspec(dllimport)
BOOL
__stdcall
ReadProcessMemory(
              HANDLE hProcess,
              LPCVOID lpBaseAddress,
           LPVOID lpBuffer,
              SIZE_T nSize,
           SIZE_T * lpNumberOfBytesRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteProcessMemory(
              HANDLE hProcess,
              LPVOID lpBaseAddress,
           LPCVOID lpBuffer,
              SIZE_T nSize,
           SIZE_T * lpNumberOfBytesWritten
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadContext(
            HANDLE hThread,
         LPCONTEXT lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadContext(
         HANDLE hThread,
         const CONTEXT *lpContext
    );
#line 3166 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
SuspendThread(
         HANDLE hThread
    );

__declspec(dllimport)
DWORD
__stdcall
ResumeThread(
         HANDLE hThread
    );



















#line 3200 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"








#line 3209 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"











#line 3221 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
void
__stdcall
DebugBreak(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEvent(
         LPDEBUG_EVENT lpDebugEvent,
         DWORD dwMilliseconds
    );

__declspec(dllimport)
BOOL
__stdcall
ContinueDebugEvent(
         DWORD dwProcessId,
         DWORD dwThreadId,
         DWORD dwContinueStatus
    );

__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcess(
         DWORD dwProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcessStop(
         DWORD dwProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
DebugSetProcessKillOnExit(
         BOOL KillOnExit
    );

__declspec(dllimport)
BOOL
__stdcall
DebugBreakProcess (
         HANDLE Process
    );

__declspec(dllimport)
void
__stdcall
InitializeCriticalSection(
         LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
void
__stdcall
EnterCriticalSection(
         LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
void
__stdcall
LeaveCriticalSection(
         LPCRITICAL_SECTION lpCriticalSection
    );

















#line 3312 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"








#line 3321 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
void
__stdcall
DeleteCriticalSection(
         LPCRITICAL_SECTION lpCriticalSection
    );

__declspec(dllimport)
BOOL
__stdcall
SetEvent(
         HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ResetEvent(
         HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
PulseEvent(
         HANDLE hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ReleaseSemaphore(
              HANDLE hSemaphore,
              LONG lReleaseCount,
           LPLONG lpPreviousCount
    );

__declspec(dllimport)
BOOL
__stdcall
ReleaseMutex(
         HANDLE hMutex
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObject(
         HANDLE hHandle,
         DWORD dwMilliseconds
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjects(
         DWORD nCount,
           const HANDLE *lpHandles,
         BOOL bWaitAll,
         DWORD dwMilliseconds
    );

__declspec(dllimport)
void
__stdcall
Sleep(
         DWORD dwMilliseconds
    );

__declspec(dllimport)
    
HGLOBAL
__stdcall
LoadResource(
           HMODULE hModule,
         HRSRC hResInfo
    );

__declspec(dllimport)
DWORD
__stdcall
SizeofResource(
           HMODULE hModule,
         HRSRC hResInfo
    );


__declspec(dllimport)
    
ATOM
__stdcall
GlobalDeleteAtom(
         ATOM nAtom
    );

__declspec(dllimport)
BOOL
__stdcall
InitAtomTable(
         DWORD nSize
    );

__declspec(dllimport)
    
ATOM
__stdcall
DeleteAtom(
         ATOM nAtom
    );

__declspec(dllimport)
UINT
__stdcall
SetHandleCount(
         UINT uNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetLogicalDrives(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
LockFile(
         HANDLE hFile,
         DWORD dwFileOffsetLow,
         DWORD dwFileOffsetHigh,
         DWORD nNumberOfBytesToLockLow,
         DWORD nNumberOfBytesToLockHigh
    );

__declspec(dllimport)
BOOL
__stdcall
UnlockFile(
         HANDLE hFile,
         DWORD dwFileOffsetLow,
         DWORD dwFileOffsetHigh,
         DWORD nNumberOfBytesToUnlockLow,
         DWORD nNumberOfBytesToUnlockHigh
    );

__declspec(dllimport)
BOOL
__stdcall
LockFileEx(
               HANDLE hFile,
               DWORD dwFlags,
      DWORD dwReserved,
               DWORD nNumberOfBytesToLockLow,
               DWORD nNumberOfBytesToLockHigh,
            LPOVERLAPPED lpOverlapped
    );




__declspec(dllimport)
BOOL
__stdcall
UnlockFileEx(
               HANDLE hFile,
      DWORD dwReserved,
               DWORD nNumberOfBytesToUnlockLow,
               DWORD nNumberOfBytesToUnlockHigh,
            LPOVERLAPPED lpOverlapped
    );

typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandle(
          HANDLE hFile,
         LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileType(
         HANDLE hFile
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileSize(
              HANDLE hFile,
           LPDWORD lpFileSizeHigh
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileSizeEx(
          HANDLE hFile,
         PLARGE_INTEGER lpFileSize
    );


__declspec(dllimport)
    
HANDLE
__stdcall
GetStdHandle(
         DWORD nStdHandle
    );

__declspec(dllimport)
BOOL
__stdcall
SetStdHandle(
         DWORD nStdHandle,
         HANDLE hHandle
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFile(
                HANDLE hFile,
           LPCVOID lpBuffer,
                DWORD nNumberOfBytesToWrite,
             LPDWORD lpNumberOfBytesWritten,
           LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
ReadFile(
                HANDLE hFile,
           LPVOID lpBuffer,
                DWORD nNumberOfBytesToRead,
             LPDWORD lpNumberOfBytesRead,
           LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
FlushFileBuffers(
         HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
DeviceIoControl(
                HANDLE hDevice,
                DWORD dwIoControlCode,
             LPVOID lpInBuffer,
                DWORD nInBufferSize,
             LPVOID lpOutBuffer,
                DWORD nOutBufferSize,
             LPDWORD lpBytesReturned,
           LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
RequestDeviceWakeup(
         HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
CancelDeviceWakeupRequest(
         HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
GetDevicePowerState(
          HANDLE hDevice,
         BOOL *pfOn
    );

__declspec(dllimport)
BOOL
__stdcall
SetMessageWaitingIndicator(
         HANDLE hMsgIndicator,
         ULONG ulMsgCount
    );

__declspec(dllimport)
BOOL
__stdcall
SetEndOfFile(
         HANDLE hFile
    );

__declspec(dllimport)
DWORD
__stdcall
SetFilePointer(
             HANDLE hFile,
             LONG lDistanceToMove,
           PLONG lpDistanceToMoveHigh,
             DWORD dwMoveMethod
    );

__declspec(dllimport)
BOOL
__stdcall
SetFilePointerEx(
              HANDLE hFile,
              LARGE_INTEGER liDistanceToMove,
           PLARGE_INTEGER lpNewFilePointer,
              DWORD dwMoveMethod
    );

__declspec(dllimport)
BOOL
__stdcall
FindClose(
         HANDLE hFindFile
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileTime(
              HANDLE hFile,
           LPFILETIME lpCreationTime,
           LPFILETIME lpLastAccessTime,
           LPFILETIME lpLastWriteTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileTime(
             HANDLE hFile,
           const FILETIME *lpCreationTime,
           const FILETIME *lpLastAccessTime,
           const FILETIME *lpLastWriteTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileValidData(
         HANDLE hFile,
         LONGLONG ValidDataLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameA(
         HANDLE hFile,
         LPCSTR lpShortName
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameW(
         HANDLE hFile,
         LPCWSTR lpShortName
    );




#line 3709 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CloseHandle(
         HANDLE hObject
    );

__declspec(dllimport)
BOOL
__stdcall
DuplicateHandle(
                HANDLE hSourceProcessHandle,
                HANDLE hSourceHandle,
                HANDLE hTargetProcessHandle,
                  LPHANDLE lpTargetHandle,
                DWORD dwDesiredAccess,
                BOOL bInheritHandle,
                DWORD dwOptions
    );

__declspec(dllimport)
BOOL
__stdcall
GetHandleInformation(
          HANDLE hObject,
         LPDWORD lpdwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetHandleInformation(
         HANDLE hObject,
         DWORD dwMask,
         DWORD dwFlags
    );






__declspec(dllimport)
DWORD
__stdcall
LoadModule(
         LPCSTR lpModuleName,
         LPVOID lpParameterBlock
    );

__declspec(dllimport)
UINT
__stdcall
WinExec(
         LPCSTR lpCmdLine,
         UINT uCmdShow
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommBreak(
         HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommError(
              HANDLE hFile,
           LPDWORD lpErrors,
           LPCOMSTAT lpStat
    );

__declspec(dllimport)
BOOL
__stdcall
SetupComm(
         HANDLE hFile,
         DWORD dwInQueue,
         DWORD dwOutQueue
    );

__declspec(dllimport)
BOOL
__stdcall
EscapeCommFunction(
         HANDLE hFile,
         DWORD dwFunc
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommConfig(
              HANDLE hCommDev,
           LPCOMMCONFIG lpCC,
           LPDWORD lpdwSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommMask(
          HANDLE hFile,
         LPDWORD lpEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommProperties(
          HANDLE hFile,
         LPCOMMPROP lpCommProp
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommModemStatus(
          HANDLE hFile,
         LPDWORD lpModemStat
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommState(
          HANDLE hFile,
         LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommTimeouts(
          HANDLE hFile,
         LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
PurgeComm(
         HANDLE hFile,
         DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommBreak(
         HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommConfig(
         HANDLE hCommDev,
           LPCOMMCONFIG lpCC,
         DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommMask(
         HANDLE hFile,
         DWORD dwEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommState(
         HANDLE hFile,
         LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommTimeouts(
         HANDLE hFile,
         LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
TransmitCommChar(
         HANDLE hFile,
         char cChar
    );

__declspec(dllimport)
BOOL
__stdcall
WaitCommEvent(
                HANDLE hFile,
             LPDWORD lpEvtMask,
           LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
DWORD
__stdcall
SetTapePosition(
         HANDLE hDevice,
         DWORD dwPositionMethod,
         DWORD dwPartition,
         DWORD dwOffsetLow,
         DWORD dwOffsetHigh,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapePosition(
          HANDLE hDevice,
          DWORD dwPositionType,
         LPDWORD lpdwPartition,
         LPDWORD lpdwOffsetLow,
         LPDWORD lpdwOffsetHigh
    );

__declspec(dllimport)
DWORD
__stdcall
PrepareTape(
         HANDLE hDevice,
         DWORD dwOperation,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
EraseTape(
         HANDLE hDevice,
         DWORD dwEraseType,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
CreateTapePartition(
         HANDLE hDevice,
         DWORD dwPartitionMethod,
         DWORD dwCount,
         DWORD dwSize
    );

__declspec(dllimport)
DWORD
__stdcall
WriteTapemark(
         HANDLE hDevice,
         DWORD dwTapemarkType,
         DWORD dwTapemarkCount,
         BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeStatus(
         HANDLE hDevice
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeParameters(
            HANDLE hDevice,
            DWORD dwOperation,
         LPDWORD lpdwSize,
         LPVOID lpTapeInformation
    );




__declspec(dllimport)
DWORD
__stdcall
SetTapeParameters(
         HANDLE hDevice,
         DWORD dwOperation,
         LPVOID lpTapeInformation
    );




__declspec(dllimport)
BOOL
__stdcall
Beep(
         DWORD dwFreq,
         DWORD dwDuration
    );

__declspec(dllimport)
int
__stdcall
MulDiv(
         int nNumber,
         int nNumerator,
         int nDenominator
    );

__declspec(dllimport)
void
__stdcall
GetSystemTime(
         LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetSystemTimeAsFileTime(
         LPFILETIME lpSystemTimeAsFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemTime(
         const SYSTEMTIME *lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetLocalTime(
         LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetLocalTime(
         const SYSTEMTIME *lpSystemTime
    );

__declspec(dllimport)
void
__stdcall
GetSystemInfo(
         LPSYSTEM_INFO lpSystemInfo
    );





















#line 4089 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



















#line 4109 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"








#line 4118 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
IsProcessorFeaturePresent(
         DWORD ProcessorFeature
    );

typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
           LPTIME_ZONE_INFORMATION lpTimeZoneInformation,
             LPSYSTEMTIME lpUniversalTime,
            LPSYSTEMTIME lpLocalTime
    );

__declspec(dllimport)
BOOL
__stdcall
TzSpecificLocalTimeToSystemTime(
           LPTIME_ZONE_INFORMATION lpTimeZoneInformation,
             LPSYSTEMTIME lpLocalTime,
            LPSYSTEMTIME lpUniversalTime
    );

__declspec(dllimport)
DWORD
__stdcall
GetTimeZoneInformation(
         LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );

__declspec(dllimport)
BOOL
__stdcall
SetTimeZoneInformation(
         const TIME_ZONE_INFORMATION *lpTimeZoneInformation
    );






__declspec(dllimport)
BOOL
__stdcall
SystemTimeToFileTime(
          const SYSTEMTIME *lpSystemTime,
         LPFILETIME lpFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToLocalFileTime(
          const FILETIME *lpFileTime,
         LPFILETIME lpLocalFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
LocalFileTimeToFileTime(
          const FILETIME *lpLocalFileTime,
         LPFILETIME lpFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToSystemTime(
          const FILETIME *lpFileTime,
         LPSYSTEMTIME lpSystemTime
    );

__declspec(dllimport)
LONG
__stdcall
CompareFileTime(
         const FILETIME *lpFileTime1,
         const FILETIME *lpFileTime2
    );

__declspec(dllimport)
BOOL
__stdcall
FileTimeToDosDateTime(
          const FILETIME *lpFileTime,
         LPWORD lpFatDate,
         LPWORD lpFatTime
    );

__declspec(dllimport)
BOOL
__stdcall
DosDateTimeToFileTime(
          WORD wFatDate,
          WORD wFatTime,
         LPFILETIME lpFileTime
    );

__declspec(dllimport)
DWORD
__stdcall
GetTickCount(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemTimeAdjustment(
         DWORD dwTimeAdjustment,
         BOOL  bTimeAdjustmentDisabled
    );

__declspec(dllimport)
BOOL
__stdcall
GetSystemTimeAdjustment(
         PDWORD lpTimeAdjustment,
         PDWORD lpTimeIncrement,
         PBOOL  lpTimeAdjustmentDisabled
    );


__declspec(dllimport)
DWORD
__stdcall
FormatMessageA(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );
__declspec(dllimport)
DWORD
__stdcall
FormatMessageW(
    DWORD dwFlags,
    LPCVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPWSTR lpBuffer,
    DWORD nSize,
    va_list *Arguments
    );




#line 4285 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
    




























#line 4315 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
#line 4316 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"










__declspec(dllimport)
BOOL
__stdcall
CreatePipe(
           PHANDLE hReadPipe,
           PHANDLE hWritePipe,
           LPSECURITY_ATTRIBUTES lpPipeAttributes,
             DWORD nSize
    );

__declspec(dllimport)
BOOL
__stdcall
ConnectNamedPipe(
                HANDLE hNamedPipe,
           LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
DisconnectNamedPipe(
         HANDLE hNamedPipe
    );

__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeHandleState(
             HANDLE hNamedPipe,
           LPDWORD lpMode,
           LPDWORD lpMaxCollectionCount,
           LPDWORD lpCollectDataTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeInfo(
              HANDLE hNamedPipe,
           LPDWORD lpFlags,
           LPDWORD lpOutBufferSize,
           LPDWORD lpInBufferSize,
           LPDWORD lpMaxInstances
    );

__declspec(dllimport)
BOOL
__stdcall
PeekNamedPipe(
              HANDLE hNamedPipe,
             LPVOID lpBuffer,
              DWORD nBufferSize,
           LPDWORD lpBytesRead,
           LPDWORD lpTotalBytesAvail,
           LPDWORD lpBytesLeftThisMessage
    );

__declspec(dllimport)
BOOL
__stdcall
TransactNamedPipe(
                HANDLE hNamedPipe,
             LPVOID lpInBuffer,
                DWORD nInBufferSize,
             LPVOID lpOutBuffer,
                DWORD nOutBufferSize,
               LPDWORD lpBytesRead,
           LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
    
HANDLE
__stdcall
CreateMailslotA(
             LPCSTR lpName,
             DWORD nMaxMessageSize,
             DWORD lReadTimeout,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
    
HANDLE
__stdcall
CreateMailslotW(
             LPCWSTR lpName,
             DWORD nMaxMessageSize,
             DWORD lReadTimeout,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 4422 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetMailslotInfo(
              HANDLE hMailslot,
           LPDWORD lpMaxMessageSize,
           LPDWORD lpNextSize,
           LPDWORD lpMessageCount,
           LPDWORD lpReadTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
SetMailslotInfo(
         HANDLE hMailslot,
         DWORD lReadTimeout
    );

__declspec(dllimport)
    
LPVOID
__stdcall
MapViewOfFile(
         HANDLE hFileMappingObject,
         DWORD dwDesiredAccess,
         DWORD dwFileOffsetHigh,
         DWORD dwFileOffsetLow,
         SIZE_T dwNumberOfBytesToMap
    );

__declspec(dllimport)
BOOL
__stdcall
FlushViewOfFile(
         LPCVOID lpBaseAddress,
         SIZE_T dwNumberOfBytesToFlush
    );

__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile(
         LPCVOID lpBaseAddress
    );





__declspec(dllimport)
BOOL
__stdcall
EncryptFileA(
         LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
EncryptFileW(
         LPCWSTR lpFileName
    );




#line 4490 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DecryptFileA(
               LPCSTR lpFileName,
      DWORD dwReserved
    );
__declspec(dllimport)
BOOL
__stdcall
DecryptFileW(
               LPCWSTR lpFileName,
      DWORD dwReserved
    );




#line 4510 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
















__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusA(
          LPCSTR lpFileName,
         LPDWORD  lpStatus
    );
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusW(
          LPCWSTR lpFileName,
         LPDWORD  lpStatus
    );




#line 4545 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"







typedef
DWORD
(__stdcall *PFE_EXPORT_FUNC)(
           PBYTE pbData,
           PVOID pvCallbackContext,
             ULONG ulLength
    );

typedef
DWORD
(__stdcall *PFE_IMPORT_FUNC)(
           PBYTE pbData,
           PVOID pvCallbackContext,
          PULONG ulLength
    );











__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawA(
                LPCSTR lpFileName,
                ULONG    ulFlags,
                  PVOID   *pvContext
    );
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawW(
                LPCWSTR lpFileName,
                ULONG    ulFlags,
                  PVOID   *pvContext
    );




#line 4599 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
ReadEncryptedFileRaw(
             PFE_EXPORT_FUNC pfExportCallback,
           PVOID           pvCallbackContext,
             PVOID           pvContext
    );

__declspec(dllimport)
DWORD
__stdcall
WriteEncryptedFileRaw(
             PFE_IMPORT_FUNC pfImportCallback,
           PVOID           pvCallbackContext,
             PVOID           pvContext
    );

__declspec(dllimport)
void
__stdcall
CloseEncryptedFileRaw(
         PVOID           pvContext
    );





__declspec(dllimport)
int
__stdcall
lstrcmpA(
         LPCSTR lpString1,
         LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpW(
         LPCWSTR lpString1,
         LPCWSTR lpString2
    );




#line 4648 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrcmpiA(
         LPCSTR lpString1,
         LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpiW(
         LPCWSTR lpString1,
         LPCWSTR lpString2
    );




#line 4668 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
LPSTR
__stdcall
lstrcpynA(
         LPSTR lpString1,
         LPCSTR lpString2,
         int iMaxLength
    );
__declspec(dllimport)
    
LPWSTR
__stdcall
lstrcpynW(
         LPWSTR lpString1,
         LPCWSTR lpString2,
         int iMaxLength
    );




#line 4692 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
LPSTR
__stdcall
lstrcpyA(
         LPSTR lpString1,
          LPCSTR lpString2
    );
__declspec(dllimport)
    
LPWSTR
__stdcall
lstrcpyW(
         LPWSTR lpString1,
          LPCWSTR lpString2
    );




#line 4714 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
LPSTR
__stdcall
lstrcatA(
         LPSTR lpString1,
            LPCSTR lpString2
    );
__declspec(dllimport)
    
LPWSTR
__stdcall
lstrcatW(
         LPWSTR lpString1,
            LPCWSTR lpString2
    );




#line 4736 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrlenA(
         LPCSTR lpString
    );
__declspec(dllimport)
int
__stdcall
lstrlenW(
         LPCWSTR lpString
    );




#line 4754 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HFILE
__stdcall
OpenFile(
            LPCSTR lpFileName,
         LPOFSTRUCT lpReOpenBuff,
            UINT uStyle
    );

__declspec(dllimport)
    
HFILE
__stdcall
_lopen(
         LPCSTR lpPathName,
         int iReadWrite
    );

__declspec(dllimport)
    
HFILE
__stdcall
_lcreat(
         LPCSTR lpPathName,
         int  iAttribute
    );

__declspec(dllimport)
UINT
__stdcall
_lread(
         HFILE hFile,
           LPVOID lpBuffer,
         UINT uBytes
    );

__declspec(dllimport)
UINT
__stdcall
_lwrite(
         HFILE hFile,
           LPCCH lpBuffer,
         UINT uBytes
    );

__declspec(dllimport)
long
__stdcall
_hread(
         HFILE hFile,
           LPVOID lpBuffer,
         long lBytes
    );

__declspec(dllimport)
long
__stdcall
_hwrite(
         HFILE hFile,
           LPCCH lpBuffer,
         long lBytes
    );

__declspec(dllimport)
HFILE
__stdcall
_lclose(
         HFILE hFile
    );

__declspec(dllimport)
LONG
__stdcall
_llseek(
         HFILE hFile,
         LONG lOffset,
         int iOrigin
    );

__declspec(dllimport)
BOOL
__stdcall
IsTextUnicode(
           const void* lpv,
                int iSize,
           LPINT lpiResult
    );



__declspec(dllimport)
DWORD
__stdcall
FlsAlloc(
           PFLS_CALLBACK_FUNCTION lpCallback
    );

__declspec(dllimport)
PVOID
__stdcall
FlsGetValue(
         DWORD dwFlsIndex
    );

__declspec(dllimport)
BOOL
__stdcall
FlsSetValue(
             DWORD dwFlsIndex,
           PVOID lpFlsData
    );

__declspec(dllimport)
BOOL
__stdcall
FlsFree(
         DWORD dwFlsIndex
    );



__declspec(dllimport)
DWORD
__stdcall
TlsAlloc(
    void
    );

__declspec(dllimport)
LPVOID
__stdcall
TlsGetValue(
         DWORD dwTlsIndex
    );

__declspec(dllimport)
BOOL
__stdcall
TlsSetValue(
             DWORD dwTlsIndex,
           LPVOID lpTlsValue
    );

__declspec(dllimport)
BOOL
__stdcall
TlsFree(
         DWORD dwTlsIndex
    );

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
            DWORD dwErrorCode,
            DWORD dwNumberOfBytesTransfered,
         LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
DWORD
__stdcall
SleepEx(
         DWORD dwMilliseconds,
         BOOL bAlertable
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObjectEx(
         HANDLE hHandle,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjectsEx(
         DWORD nCount,
           const HANDLE *lpHandles,
         BOOL bWaitAll,
         DWORD dwMilliseconds,
         BOOL bAlertable
    );











#line 4953 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReadFileEx(
             HANDLE hFile,
         LPVOID lpBuffer,
             DWORD nNumberOfBytesToRead,
          LPOVERLAPPED lpOverlapped,
           LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFileEx(
             HANDLE hFile,
           LPCVOID lpBuffer,
             DWORD nNumberOfBytesToWrite,
          LPOVERLAPPED lpOverlapped,
           LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );

__declspec(dllimport)
BOOL
__stdcall
BackupRead(
            HANDLE hFile,
           LPBYTE lpBuffer,
            DWORD nNumberOfBytesToRead,
           LPDWORD lpNumberOfBytesRead,
            BOOL bAbort,
            BOOL bProcessSecurity,
         LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupSeek(
            HANDLE hFile,
            DWORD  dwLowBytesToSeek,
            DWORD  dwHighBytesToSeek,
           LPDWORD lpdwLowByteSeeked,
           LPDWORD lpdwHighByteSeeked,
         LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupWrite(
            HANDLE hFile,
           LPBYTE lpBuffer,
            DWORD nNumberOfBytesToWrite,
           LPDWORD lpNumberOfBytesWritten,
            BOOL bAbort,
            BOOL bProcessSecurity,
         LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD          dwStreamId ;
        DWORD          dwStreamAttributes ;
        LARGE_INTEGER  Size ;
        DWORD          dwStreamNameSize ;
        WCHAR          cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;



























__declspec(dllimport)
BOOL
__stdcall
ReadFileScatter(
               HANDLE hFile,
               FILE_SEGMENT_ELEMENT aSegmentArray[],
               DWORD nNumberOfBytesToRead,
      LPDWORD lpReserved,
            LPOVERLAPPED lpOverlapped
    );

__declspec(dllimport)
BOOL
__stdcall
WriteFileGather(
               HANDLE hFile,
               FILE_SEGMENT_ELEMENT aSegmentArray[],
               DWORD nNumberOfBytesToWrite,
      LPDWORD lpReserved,
            LPOVERLAPPED lpOverlapped
    );


















#line 5091 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

typedef struct _STARTUPINFOA {
    DWORD   cb;
    LPSTR   lpReserved;
    LPSTR   lpDesktop;
    LPSTR   lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD   cb;
    LPWSTR  lpReserved;
    LPWSTR  lpDesktop;
    LPWSTR  lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;




typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
#line 5139 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR   cFileName[ 260 ];
    CHAR   cAlternateFileName[ 14 ];





} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR  cFileName[ 260 ];
    WCHAR  cAlternateFileName[ 14 ];





} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;





typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
#line 5185 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;

__declspec(dllimport)
    
HANDLE
__stdcall
CreateMutexA(
           LPSECURITY_ATTRIBUTES lpMutexAttributes,
             BOOL bInitialOwner,
           LPCSTR lpName
    );
__declspec(dllimport)
    
HANDLE
__stdcall
CreateMutexW(
           LPSECURITY_ATTRIBUTES lpMutexAttributes,
             BOOL bInitialOwner,
           LPCWSTR lpName
    );




#line 5218 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HANDLE
__stdcall
OpenMutexA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
__declspec(dllimport)
    
HANDLE
__stdcall
OpenMutexW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );




#line 5242 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HANDLE
__stdcall
CreateEventA(
           LPSECURITY_ATTRIBUTES lpEventAttributes,
             BOOL bManualReset,
             BOOL bInitialState,
           LPCSTR lpName
    );
__declspec(dllimport)
    
HANDLE
__stdcall
CreateEventW(
           LPSECURITY_ATTRIBUTES lpEventAttributes,
             BOOL bManualReset,
             BOOL bInitialState,
           LPCWSTR lpName
    );




#line 5268 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HANDLE
__stdcall
OpenEventA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
__declspec(dllimport)
    
HANDLE
__stdcall
OpenEventW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );




#line 5292 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HANDLE
__stdcall
CreateSemaphoreA(
           LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
           LPCSTR lpName
    );
__declspec(dllimport)
    
HANDLE
__stdcall
CreateSemaphoreW(
           LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
           LPCWSTR lpName
    );




#line 5318 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HANDLE
__stdcall
OpenSemaphoreA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
__declspec(dllimport)
    
HANDLE
__stdcall
OpenSemaphoreW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );




#line 5342 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"












































































#line 5419 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HANDLE
__stdcall
CreateFileMappingA(
             HANDLE hFile,
           LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
             DWORD flProtect,
             DWORD dwMaximumSizeHigh,
             DWORD dwMaximumSizeLow,
           LPCSTR lpName
    );
__declspec(dllimport)
    
HANDLE
__stdcall
CreateFileMappingW(
             HANDLE hFile,
           LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
             DWORD flProtect,
             DWORD dwMaximumSizeHigh,
             DWORD dwMaximumSizeLow,
           LPCWSTR lpName
    );




#line 5449 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HANDLE
__stdcall
OpenFileMappingA(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCSTR lpName
    );
__declspec(dllimport)
    
HANDLE
__stdcall
OpenFileMappingW(
         DWORD dwDesiredAccess,
         BOOL bInheritHandle,
         LPCWSTR lpName
    );




#line 5473 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsA(
         DWORD nBufferLength,
             LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsW(
         DWORD nBufferLength,
             LPWSTR lpBuffer
    );




#line 5493 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
























#line 5518 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
    
HMODULE
__stdcall
LoadLibraryA(
         LPCSTR lpLibFileName
    );
__declspec(dllimport)
    
HMODULE
__stdcall
LoadLibraryW(
         LPCWSTR lpLibFileName
    );




#line 5539 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HMODULE
__stdcall
LoadLibraryExA(
               LPCSTR lpLibFileName,
      HANDLE hFile,
               DWORD dwFlags
    );
__declspec(dllimport)
    
HMODULE
__stdcall
LoadLibraryExW(
               LPCWSTR lpLibFileName,
      HANDLE hFile,
               DWORD dwFlags
    );




#line 5563 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"







__declspec(dllimport)
DWORD
__stdcall
GetModuleFileNameA(
           HMODULE hModule,
           LPCH lpFilename,
             DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetModuleFileNameW(
           HMODULE hModule,
           LPWCH lpFilename,
             DWORD nSize
    );




#line 5591 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HMODULE
__stdcall
GetModuleHandleA(
           LPCSTR lpModuleName
    );
__declspec(dllimport)
    
HMODULE
__stdcall
GetModuleHandleW(
           LPCWSTR lpModuleName
    );




#line 5611 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"




















































#line 5664 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
#line 5665 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"





















#line 5687 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateProcessA(
              LPCSTR lpApplicationName,
           LPSTR lpCommandLine,
              LPSECURITY_ATTRIBUTES lpProcessAttributes,
              LPSECURITY_ATTRIBUTES lpThreadAttributes,
                BOOL bInheritHandles,
                DWORD dwCreationFlags,
              LPVOID lpEnvironment,
              LPCSTR lpCurrentDirectory,
                LPSTARTUPINFOA lpStartupInfo,
               LPPROCESS_INFORMATION lpProcessInformation
    );
__declspec(dllimport)
BOOL
__stdcall
CreateProcessW(
              LPCWSTR lpApplicationName,
           LPWSTR lpCommandLine,
              LPSECURITY_ATTRIBUTES lpProcessAttributes,
              LPSECURITY_ATTRIBUTES lpThreadAttributes,
                BOOL bInheritHandles,
                DWORD dwCreationFlags,
              LPVOID lpEnvironment,
              LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
               LPPROCESS_INFORMATION lpProcessInformation
    );




#line 5723 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
SetProcessShutdownParameters(
         DWORD dwLevel,
         DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessShutdownParameters(
         LPDWORD lpdwLevel,
         LPDWORD lpdwFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetProcessVersion(
         DWORD ProcessId
    );

__declspec(dllimport)
void
__stdcall
FatalAppExitA(
         UINT uAction,
         LPCSTR lpMessageText
    );
__declspec(dllimport)
void
__stdcall
FatalAppExitW(
         UINT uAction,
         LPCWSTR lpMessageText
    );




#line 5768 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
void
__stdcall
GetStartupInfoA(
         LPSTARTUPINFOA lpStartupInfo
    );
__declspec(dllimport)
void
__stdcall
GetStartupInfoW(
         LPSTARTUPINFOW lpStartupInfo
    );




#line 5786 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
LPSTR
__stdcall
GetCommandLineA(
    void
    );
__declspec(dllimport)
    
LPWSTR
__stdcall
GetCommandLineW(
    void
    );




#line 5806 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetEnvironmentVariableA(
         LPCSTR lpName,
             LPSTR lpBuffer,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetEnvironmentVariableW(
         LPCWSTR lpName,
             LPWSTR lpBuffer,
         DWORD nSize
    );




#line 5828 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableA(
             LPCSTR lpName,
           LPCSTR lpValue
    );
__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableW(
             LPCWSTR lpName,
           LPCWSTR lpValue
    );




#line 5848 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
    


















#line 5868 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
ExpandEnvironmentStringsA(
         LPCSTR lpSrc,
             LPSTR lpDst,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
ExpandEnvironmentStringsW(
         LPCWSTR lpSrc,
             LPWSTR lpDst,
         DWORD nSize
    );




#line 5890 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableA(
         LPCSTR lpName,
         LPCSTR lpGuid,
             PVOID pBuffer,
         DWORD    nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
             PVOID pBuffer,
         DWORD    nSize
    );




#line 5914 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableA(
         LPCSTR lpName,
         LPCSTR lpGuid,
             PVOID pValue,
         DWORD    nSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableW(
         LPCWSTR lpName,
         LPCWSTR lpGuid,
             PVOID pValue,
         DWORD    nSize
    );




#line 5938 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
void
__stdcall
OutputDebugStringA(
         LPCSTR lpOutputString
    );
__declspec(dllimport)
void
__stdcall
OutputDebugStringW(
         LPCWSTR lpOutputString
    );




#line 5957 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HRSRC
__stdcall
FindResourceA(
           HMODULE hModule,
             LPCSTR lpName,
             LPCSTR lpType
    );
__declspec(dllimport)
    
HRSRC
__stdcall
FindResourceW(
           HMODULE hModule,
             LPCWSTR lpName,
             LPCWSTR lpType
    );




#line 5981 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HRSRC
__stdcall
FindResourceExA(
           HMODULE hModule,
             LPCSTR lpType,
             LPCSTR lpName,
             WORD    wLanguage
    );
__declspec(dllimport)
    
HRSRC
__stdcall
FindResourceExW(
           HMODULE hModule,
             LPCWSTR lpType,
             LPCWSTR lpName,
             WORD    wLanguage
    );




#line 6007 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


typedef BOOL (__stdcall* ENUMRESTYPEPROCA)(       HMODULE hModule,      LPSTR lpType,
     LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESTYPEPROCW)(       HMODULE hModule,      LPWSTR lpType,
     LONG_PTR lParam);




#line 6018 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
typedef BOOL (__stdcall* ENUMRESNAMEPROCA)(       HMODULE hModule,      LPCSTR lpType,
     LPSTR lpName,      LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROCW)(       HMODULE hModule,      LPCWSTR lpType,
     LPWSTR lpName,      LONG_PTR lParam);




#line 6027 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
typedef BOOL (__stdcall* ENUMRESLANGPROCA)(       HMODULE hModule,      LPCSTR lpType,
     LPCSTR lpName,      WORD  wLanguage,      LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROCW)(       HMODULE hModule,      LPCWSTR lpType,
     LPCWSTR lpName,      WORD  wLanguage,      LONG_PTR lParam);




#line 6036 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"






















#line 6059 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesA(
           HMODULE hModule,
             ENUMRESTYPEPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesW(
           HMODULE hModule,
             ENUMRESTYPEPROCW lpEnumFunc,
             LONG_PTR lParam
    );




#line 6081 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesA(
           HMODULE hModule,
             LPCSTR lpType,
             ENUMRESNAMEPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesW(
           HMODULE hModule,
             LPCWSTR lpType,
             ENUMRESNAMEPROCW lpEnumFunc,
             LONG_PTR lParam
    );




#line 6105 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesA(
           HMODULE hModule,
             LPCSTR lpType,
             LPCSTR lpName,
             ENUMRESLANGPROCA lpEnumFunc,
             LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesW(
           HMODULE hModule,
             LPCWSTR lpType,
             LPCWSTR lpName,
             ENUMRESLANGPROCW lpEnumFunc,
             LONG_PTR lParam
    );




#line 6131 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HANDLE
__stdcall
BeginUpdateResourceA(
         LPCSTR pFileName,
         BOOL bDeleteExistingResources
    );
__declspec(dllimport)
    
HANDLE
__stdcall
BeginUpdateResourceW(
         LPCWSTR pFileName,
         BOOL bDeleteExistingResources
    );




#line 6153 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateResourceA(
         HANDLE hUpdate,
         LPCSTR lpType,
         LPCSTR lpName,
         WORD wLanguage,
             LPVOID lpData,
         DWORD cb
    );
__declspec(dllimport)
BOOL
__stdcall
UpdateResourceW(
         HANDLE hUpdate,
         LPCWSTR lpType,
         LPCWSTR lpName,
         WORD wLanguage,
             LPVOID lpData,
         DWORD cb
    );




#line 6181 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceA(
         HANDLE hUpdate,
         BOOL   fDiscard
    );
__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceW(
         HANDLE hUpdate,
         BOOL   fDiscard
    );




#line 6201 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
ATOM
__stdcall
GlobalAddAtomA(
           LPCSTR lpString
    );
__declspec(dllimport)
    
ATOM
__stdcall
GlobalAddAtomW(
           LPCWSTR lpString
    );




#line 6221 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
ATOM
__stdcall
GlobalFindAtomA(
           LPCSTR lpString
    );
__declspec(dllimport)
    
ATOM
__stdcall
GlobalFindAtomW(
           LPCWSTR lpString
    );




#line 6241 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameA(
         ATOM nAtom,
           LPSTR lpBuffer,
         int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameW(
         ATOM nAtom,
           LPWSTR lpBuffer,
         int nSize
    );




#line 6263 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
ATOM
__stdcall
AddAtomA(
           LPCSTR lpString
    );
__declspec(dllimport)
    
ATOM
__stdcall
AddAtomW(
           LPCWSTR lpString
    );




#line 6283 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
ATOM
__stdcall
FindAtomA(
           LPCSTR lpString
    );
__declspec(dllimport)
    
ATOM
__stdcall
FindAtomW(
           LPCWSTR lpString
    );




#line 6303 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetAtomNameA(
         ATOM nAtom,
           LPSTR lpBuffer,
         int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GetAtomNameW(
         ATOM nAtom,
           LPWSTR lpBuffer,
         int nSize
    );




#line 6325 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetProfileIntA(
         LPCSTR lpAppName,
         LPCSTR lpKeyName,
         INT nDefault
    );
__declspec(dllimport)
UINT
__stdcall
GetProfileIntW(
         LPCWSTR lpAppName,
         LPCWSTR lpKeyName,
         INT nDefault
    );




#line 6347 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetProfileStringA(
           LPCSTR lpAppName,
           LPCSTR lpKeyName,
           LPCSTR lpDefault,
             LPSTR lpReturnedString,
             DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileStringW(
           LPCWSTR lpAppName,
           LPCWSTR lpKeyName,
           LPCWSTR lpDefault,
             LPWSTR lpReturnedString,
             DWORD nSize
    );




#line 6373 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringA(
           LPCSTR lpAppName,
           LPCSTR lpKeyName,
           LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringW(
           LPCWSTR lpAppName,
           LPCWSTR lpKeyName,
           LPCWSTR lpString
    );




#line 6395 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionA(
         LPCSTR lpAppName,
             LPSTR lpReturnedString,
         DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionW(
         LPCWSTR lpAppName,
             LPWSTR lpReturnedString,
         DWORD nSize
    );




#line 6417 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionA(
         LPCSTR lpAppName,
         LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionW(
         LPCWSTR lpAppName,
         LPCWSTR lpString
    );




#line 6437 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntA(
             LPCSTR lpAppName,
             LPCSTR lpKeyName,
             INT nDefault,
           LPCSTR lpFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntW(
             LPCWSTR lpAppName,
             LPCWSTR lpKeyName,
             INT nDefault,
           LPCWSTR lpFileName
    );




#line 6461 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringA(
           LPCSTR lpAppName,
           LPCSTR lpKeyName,
           LPCSTR lpDefault,
             LPSTR lpReturnedString,
             DWORD nSize,
           LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringW(
           LPCWSTR lpAppName,
           LPCWSTR lpKeyName,
           LPCWSTR lpDefault,
             LPWSTR lpReturnedString,
             DWORD nSize,
           LPCWSTR lpFileName
    );




#line 6489 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringA(
           LPCSTR lpAppName,
           LPCSTR lpKeyName,
           LPCSTR lpString,
           LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringW(
           LPCWSTR lpAppName,
           LPCWSTR lpKeyName,
           LPCWSTR lpString,
           LPCWSTR lpFileName
    );




#line 6513 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionA(
             LPCSTR lpAppName,
             LPSTR lpReturnedString,
             DWORD nSize,
           LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionW(
             LPCWSTR lpAppName,
             LPWSTR lpReturnedString,
             DWORD nSize,
           LPCWSTR lpFileName
    );




#line 6537 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionA(
             LPCSTR lpAppName,
             LPCSTR lpString,
           LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionW(
             LPCWSTR lpAppName,
             LPCWSTR lpString,
           LPCWSTR lpFileName
    );




#line 6559 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
             LPSTR lpszReturnBuffer,
             DWORD nSize,
           LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesW(
             LPWSTR lpszReturnBuffer,
             DWORD nSize,
           LPCWSTR lpFileName
    );




#line 6582 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructA(
             LPCSTR lpszSection,
             LPCSTR lpszKey,
           LPVOID   lpStruct,
             UINT     uSizeStruct,
           LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructW(
             LPCWSTR lpszSection,
             LPCWSTR lpszKey,
           LPVOID   lpStruct,
             UINT     uSizeStruct,
           LPCWSTR szFile
    );




#line 6608 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructA(
             LPCSTR lpszSection,
             LPCSTR lpszKey,
             LPVOID lpStruct,
             UINT     uSizeStruct,
           LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructW(
             LPCWSTR lpszSection,
             LPCWSTR lpszKey,
             LPVOID lpStruct,
             UINT     uSizeStruct,
           LPCWSTR szFile
    );




#line 6634 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
UINT
__stdcall
GetDriveTypeA(
           LPCSTR lpRootPathName
    );
__declspec(dllimport)
UINT
__stdcall
GetDriveTypeW(
           LPCWSTR lpRootPathName
    );




#line 6653 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetSystemDirectoryA(
             LPSTR lpBuffer,
         UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetSystemDirectoryW(
             LPWSTR lpBuffer,
         UINT uSize
    );




#line 6673 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetTempPathA(
         DWORD nBufferLength,
           LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetTempPathW(
         DWORD nBufferLength,
           LPWSTR lpBuffer
    );




#line 6693 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetTempFileNameA(
         LPCSTR lpPathName,
         LPCSTR lpPrefixString,
         UINT uUnique,
         LPSTR lpTempFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetTempFileNameW(
         LPCWSTR lpPathName,
         LPCWSTR lpPrefixString,
         UINT uUnique,
         LPWSTR lpTempFileName
    );




#line 6717 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
    






















#line 6741 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetWindowsDirectoryA(
             LPSTR lpBuffer,
         UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetWindowsDirectoryW(
             LPWSTR lpBuffer,
         UINT uSize
    );




#line 6761 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetSystemWindowsDirectoryA(
             LPSTR lpBuffer,
         UINT uSize
    );
__declspec(dllimport)
UINT
__stdcall
GetSystemWindowsDirectoryW(
             LPWSTR lpBuffer,
         UINT uSize
    );




#line 6781 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"










































































#line 6856 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
#line 6857 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryA(
         LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryW(
         LPCWSTR lpPathName
    );




#line 6875 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
    
















#line 6893 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetCurrentDirectoryA(
         DWORD nBufferLength,
             LPSTR lpBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
GetCurrentDirectoryW(
         DWORD nBufferLength,
             LPWSTR lpBuffer
    );




#line 6913 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"









































#line 6955 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceA(
            LPCSTR lpRootPathName,
           LPDWORD lpSectorsPerCluster,
           LPDWORD lpBytesPerSector,
           LPDWORD lpNumberOfFreeClusters,
           LPDWORD lpTotalNumberOfClusters
    );
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceW(
            LPCWSTR lpRootPathName,
           LPDWORD lpSectorsPerCluster,
           LPDWORD lpBytesPerSector,
           LPDWORD lpNumberOfFreeClusters,
           LPDWORD lpTotalNumberOfClusters
    );




#line 6981 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExA(
            LPCSTR lpDirectoryName,
           PULARGE_INTEGER lpFreeBytesAvailableToCaller,
           PULARGE_INTEGER lpTotalNumberOfBytes,
           PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );
__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExW(
            LPCWSTR lpDirectoryName,
           PULARGE_INTEGER lpFreeBytesAvailableToCaller,
           PULARGE_INTEGER lpTotalNumberOfBytes,
           PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );




#line 7005 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryA(
             LPCSTR lpPathName,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryW(
             LPCWSTR lpPathName,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 7025 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



















#line 7045 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExA(
             LPCSTR lpTemplateDirectory,
             LPCSTR lpNewDirectory,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExW(
             LPCWSTR lpTemplateDirectory,
             LPCWSTR lpNewDirectory,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 7067 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryA(
         LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryW(
         LPCWSTR lpPathName
    );




#line 7085 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameA(
                    LPCSTR lpFileName,
                    DWORD nBufferLength,
             LPSTR lpBuffer,
                    LPSTR *lpFilePart
    );
__declspec(dllimport)
DWORD
__stdcall
GetFullPathNameW(
                    LPCWSTR lpFileName,
                    DWORD nBufferLength,
             LPWSTR lpBuffer,
                    LPWSTR *lpFilePart
    );




#line 7109 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"







__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceA(
             DWORD dwFlags,
             LPCSTR lpDeviceName,
           LPCSTR lpTargetPath
    );
__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceW(
             DWORD dwFlags,
             LPCWSTR lpDeviceName,
           LPCWSTR lpTargetPath
    );




#line 7137 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceA(
           LPCSTR lpDeviceName,
             LPSTR lpTargetPath,
             DWORD ucchMax
    );
__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceW(
           LPCWSTR lpDeviceName,
             LPWSTR lpTargetPath,
             DWORD ucchMax
    );




#line 7159 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



__declspec(dllimport)
    
HANDLE
__stdcall
CreateFileA(
             LPCSTR lpFileName,
             DWORD dwDesiredAccess,
             DWORD dwShareMode,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             DWORD dwCreationDisposition,
             DWORD dwFlagsAndAttributes,
           HANDLE hTemplateFile
    );
__declspec(dllimport)
    
HANDLE
__stdcall
CreateFileW(
             LPCWSTR lpFileName,
             DWORD dwDesiredAccess,
             DWORD dwShareMode,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes,
             DWORD dwCreationDisposition,
             DWORD dwFlagsAndAttributes,
           HANDLE hTemplateFile
    );




#line 7193 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"














#line 7208 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesA(
         LPCSTR lpFileName,
         DWORD dwFileAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesW(
         LPCWSTR lpFileName,
         DWORD dwFileAttributes
    );




#line 7228 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesA(
         LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesW(
         LPCWSTR lpFileName
    );




#line 7246 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExA(
          LPCSTR lpFileName,
          GET_FILEEX_INFO_LEVELS fInfoLevelId,
         LPVOID lpFileInformation
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExW(
          LPCWSTR lpFileName,
          GET_FILEEX_INFO_LEVELS fInfoLevelId,
         LPVOID lpFileInformation
    );




#line 7273 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeA(
          LPCSTR lpFileName,
         LPDWORD  lpFileSizeHigh
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeW(
          LPCWSTR lpFileName,
         LPDWORD  lpFileSizeHigh
    );




#line 7293 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteFileA(
         LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileW(
         LPCWSTR lpFileName
    );




#line 7311 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

















#line 7329 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"






























#line 7360 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"













































#line 7406 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HANDLE
__stdcall
FindFirstFileA(
          LPCSTR lpFileName,
         LPWIN32_FIND_DATAA lpFindFileData
    );
__declspec(dllimport)
    
HANDLE
__stdcall
FindFirstFileW(
          LPCWSTR lpFileName,
         LPWIN32_FIND_DATAW lpFindFileData
    );




#line 7428 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextFileA(
          HANDLE hFindFile,
         LPWIN32_FIND_DATAA lpFindFileData
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextFileW(
          HANDLE hFindFile,
         LPWIN32_FIND_DATAW lpFindFileData
    );




#line 7448 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
DWORD
__stdcall
SearchPathA(
            LPCSTR lpPath,
              LPCSTR lpFileName,
            LPCSTR lpExtension,
              DWORD nBufferLength,
             LPSTR lpBuffer,
           LPSTR *lpFilePart
    );
__declspec(dllimport)
DWORD
__stdcall
SearchPathW(
            LPCWSTR lpPath,
              LPCWSTR lpFileName,
            LPCWSTR lpExtension,
              DWORD nBufferLength,
             LPWSTR lpBuffer,
           LPWSTR *lpFilePart
    );




#line 7477 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CopyFileA(
         LPCSTR lpExistingFileName,
         LPCSTR lpNewFileName,
         BOOL bFailIfExists
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileW(
         LPCWSTR lpExistingFileName,
         LPCWSTR lpNewFileName,
         BOOL bFailIfExists
    );




#line 7499 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
    




















#line 7521 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"











































#line 7565 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
MoveFileA(
         LPCSTR lpExistingFileName,
         LPCSTR lpNewFileName
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileW(
         LPCWSTR lpExistingFileName,
         LPCWSTR lpNewFileName
    );




#line 7585 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



















#line 7605 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
MoveFileExA(
         LPCSTR lpExistingFileName,
         LPCSTR lpNewFileName,
         DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileExW(
         LPCWSTR lpExistingFileName,
         LPCWSTR lpNewFileName,
         DWORD dwFlags
    );




#line 7627 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



























#line 7655 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"








#line 7664 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"































#line 7696 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"





























#line 7726 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"







































#line 7766 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



__declspec(dllimport)
    
HANDLE
__stdcall
CreateNamedPipeA(
             LPCSTR lpName,
             DWORD dwOpenMode,
             DWORD dwPipeMode,
             DWORD nMaxInstances,
             DWORD nOutBufferSize,
             DWORD nInBufferSize,
             DWORD nDefaultTimeOut,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
    
HANDLE
__stdcall
CreateNamedPipeW(
             LPCWSTR lpName,
             DWORD dwOpenMode,
             DWORD dwPipeMode,
             DWORD nMaxInstances,
             DWORD nOutBufferSize,
             DWORD nInBufferSize,
             DWORD nDefaultTimeOut,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 7802 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateA(
              HANDLE hNamedPipe,
           LPDWORD lpState,
           LPDWORD lpCurInstances,
           LPDWORD lpMaxCollectionCount,
           LPDWORD lpCollectDataTimeout,
           LPSTR lpUserName,
              DWORD nMaxUserNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateW(
              HANDLE hNamedPipe,
           LPDWORD lpState,
           LPDWORD lpCurInstances,
           LPDWORD lpMaxCollectionCount,
           LPDWORD lpCollectDataTimeout,
           LPWSTR lpUserName,
              DWORD nMaxUserNameSize
    );




#line 7832 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeA(
          LPCSTR lpNamedPipeName,
             LPVOID lpInBuffer,
          DWORD nInBufferSize,
             LPVOID lpOutBuffer,
          DWORD nOutBufferSize,
         LPDWORD lpBytesRead,
          DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeW(
          LPCWSTR lpNamedPipeName,
             LPVOID lpInBuffer,
          DWORD nInBufferSize,
             LPVOID lpOutBuffer,
          DWORD nOutBufferSize,
         LPDWORD lpBytesRead,
          DWORD nTimeOut
    );




#line 7862 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeA(
         LPCSTR lpNamedPipeName,
         DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeW(
         LPCWSTR lpNamedPipeName,
         DWORD nTimeOut
    );




#line 7882 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelA(
           LPCSTR lpRootPathName,
           LPCSTR lpVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelW(
           LPCWSTR lpRootPathName,
           LPCWSTR lpVolumeName
    );




#line 7902 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
void
__stdcall
SetFileApisToOEM( void );

__declspec(dllimport)
void
__stdcall
SetFileApisToANSI( void );

__declspec(dllimport)
BOOL
__stdcall
AreFileApisANSI( void );

__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationA(
            LPCSTR lpRootPathName,
           LPSTR lpVolumeNameBuffer,
              DWORD nVolumeNameSize,
           LPDWORD lpVolumeSerialNumber,
           LPDWORD lpMaximumComponentLength,
           LPDWORD lpFileSystemFlags,
           LPSTR lpFileSystemNameBuffer,
              DWORD nFileSystemNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationW(
            LPCWSTR lpRootPathName,
           LPWSTR lpVolumeNameBuffer,
              DWORD nVolumeNameSize,
           LPDWORD lpVolumeSerialNumber,
           LPDWORD lpMaximumComponentLength,
           LPDWORD lpFileSystemFlags,
           LPWSTR lpFileSystemNameBuffer,
              DWORD nFileSystemNameSize
    );




#line 7949 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CancelIo(
         HANDLE hFile
    );





__declspec(dllimport)
BOOL
__stdcall
ClearEventLogA (
             HANDLE hEventLog,
           LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
ClearEventLogW (
             HANDLE hEventLog,
           LPCWSTR lpBackupFileName
    );




#line 7980 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BackupEventLogA (
         HANDLE hEventLog,
         LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
BackupEventLogW (
         HANDLE hEventLog,
         LPCWSTR lpBackupFileName
    );




#line 8000 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CloseEventLog (
         HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
DeregisterEventSource (
         HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyChangeEventLog(
         HANDLE  hEventLog,
         HANDLE  hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfEventLogRecords (
          HANDLE hEventLog,
         PDWORD NumberOfRecords
    );

__declspec(dllimport)
BOOL
__stdcall
GetOldestEventLogRecord (
          HANDLE hEventLog,
         PDWORD OldestRecord
    );

__declspec(dllimport)
    
HANDLE
__stdcall
OpenEventLogA (
           LPCSTR lpUNCServerName,
             LPCSTR lpSourceName
    );
__declspec(dllimport)
    
HANDLE
__stdcall
OpenEventLogW (
           LPCWSTR lpUNCServerName,
             LPCWSTR lpSourceName
    );




#line 8060 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HANDLE
__stdcall
RegisterEventSourceA (
           LPCSTR lpUNCServerName,
             LPCSTR lpSourceName
    );
__declspec(dllimport)
    
HANDLE
__stdcall
RegisterEventSourceW (
           LPCWSTR lpUNCServerName,
             LPCWSTR lpSourceName
    );




#line 8082 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
    
HANDLE
__stdcall
OpenBackupEventLogA (
           LPCSTR lpUNCServerName,
             LPCSTR lpFileName
    );
__declspec(dllimport)
    
HANDLE
__stdcall
OpenBackupEventLogW (
           LPCWSTR lpUNCServerName,
             LPCWSTR lpFileName
    );




#line 8104 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReadEventLogA (
          HANDLE     hEventLog,
          DWORD      dwReadFlags,
          DWORD      dwRecordOffset,
           LPVOID     lpBuffer,
          DWORD      nNumberOfBytesToRead,
         DWORD      *pnBytesRead,
         DWORD      *pnMinNumberOfBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
ReadEventLogW (
          HANDLE     hEventLog,
          DWORD      dwReadFlags,
          DWORD      dwRecordOffset,
           LPVOID     lpBuffer,
          DWORD      nNumberOfBytesToRead,
         DWORD      *pnBytesRead,
         DWORD      *pnMinNumberOfBytesNeeded
    );




#line 8134 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReportEventA (
             HANDLE     hEventLog,
             WORD       wType,
             WORD       wCategory,
             DWORD      dwEventID,
           PSID       lpUserSid,
             WORD       wNumStrings,
             DWORD      dwDataSize,
           LPCSTR   *lpStrings,
             LPVOID lpRawData
    );
__declspec(dllimport)
BOOL
__stdcall
ReportEventW (
             HANDLE     hEventLog,
             WORD       wType,
             WORD       wCategory,
             DWORD      dwEventID,
           PSID       lpUserSid,
             WORD       wNumStrings,
             DWORD      dwDataSize,
           LPCWSTR   *lpStrings,
             LPVOID lpRawData
    );




#line 8168 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"




typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD    dwFull;
}
EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetEventLogInformation (
          HANDLE     hEventLog,
          DWORD      dwInfoLevel,
           LPVOID lpBuffer,
          DWORD      cbBufSize,
         LPDWORD    pcbBytesNeeded
    );







__declspec(dllimport)
BOOL
__stdcall
DuplicateToken(
                HANDLE ExistingTokenHandle,
                SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
                  PHANDLE DuplicateTokenHandle
    );

__declspec(dllimport)
BOOL
__stdcall
GetKernelObjectSecurity (
          HANDLE Handle,
          SECURITY_INFORMATION RequestedInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          DWORD nLength,
         LPDWORD lpnLengthNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
ImpersonateNamedPipeClient(
         HANDLE hNamedPipe
    );

__declspec(dllimport)
BOOL
__stdcall
ImpersonateSelf(
         SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );


__declspec(dllimport)
BOOL
__stdcall
RevertToSelf (
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadToken (
           PHANDLE Thread,
           HANDLE Token
    );

__declspec(dllimport)
BOOL
__stdcall
AccessCheck (
            PSECURITY_DESCRIPTOR pSecurityDescriptor,
            HANDLE ClientToken,
            DWORD DesiredAccess,
            PGENERIC_MAPPING GenericMapping,
           PPRIVILEGE_SET PrivilegeSet,
         LPDWORD PrivilegeSetLength,
           LPDWORD GrantedAccess,
           LPBOOL AccessStatus
    );



































#line 8294 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
OpenProcessToken (
                HANDLE ProcessHandle,
                DWORD DesiredAccess,
                  PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
OpenThreadToken (
                HANDLE ThreadHandle,
                DWORD DesiredAccess,
                BOOL OpenAsSelf,
                  PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
GetTokenInformation (
              HANDLE TokenHandle,
              TOKEN_INFORMATION_CLASS TokenInformationClass,
             LPVOID TokenInformation,
              DWORD TokenInformationLength,
           PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetTokenInformation (
         HANDLE TokenHandle,
         TOKEN_INFORMATION_CLASS TokenInformationClass,
           LPVOID TokenInformation,
         DWORD TokenInformationLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenPrivileges (
              HANDLE TokenHandle,
              BOOL DisableAllPrivileges,
            PTOKEN_PRIVILEGES NewState,
              DWORD BufferLength,
             PTOKEN_PRIVILEGES PreviousState,
           PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenGroups (
              HANDLE TokenHandle,
              BOOL ResetToDefault,
            PTOKEN_GROUPS NewState,
              DWORD BufferLength,
             PTOKEN_GROUPS PreviousState,
           PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
PrivilegeCheck (
            HANDLE ClientToken,
         PPRIVILEGE_SET RequiredPrivileges,
           LPBOOL pfResult
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPSTR ObjectTypeName,
           LPSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             DWORD DesiredAccess,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
            LPDWORD GrantedAccess,
            LPBOOL AccessStatus,
            LPBOOL pfGenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmW (
             LPCWSTR SubsystemName,
             LPVOID HandleId,
             LPWSTR ObjectTypeName,
           LPWSTR ObjectName,
             PSECURITY_DESCRIPTOR SecurityDescriptor,
             DWORD DesiredAccess,
             PGENERIC_MAPPING GenericMapping,
             BOOL ObjectCreation,
            LPDWORD GrantedAccess,
            LPBOOL AccessStatus,
            LPBOOL pfGenerateOnClose
    );




#line 8413 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"





















































































































































#line 8563 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmA (
             LPCSTR SubsystemName,
             LPVOID HandleId,
             LPSTR ObjectTypeName,
           LPSTR ObjectName,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             HANDLE ClientToken,
             DWORD DesiredAccess,
             DWORD GrantedAccess,
           PPRIVILEGE_SET Privileges,
             BOOL ObjectCreation,
             BOOL AccessGranted,
            LPBOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmW (
             LPCWSTR SubsystemName,
             LPVOID HandleId,
             LPWSTR ObjectTypeName,
           LPWSTR ObjectName,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
             HANDLE ClientToken,
             DWORD DesiredAccess,
             DWORD GrantedAccess,
           PPRIVILEGE_SET Privileges,
             BOOL ObjectCreation,
             BOOL AccessGranted,
            LPBOOL GenerateOnClose
    );




#line 8603 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmW (
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         HANDLE ClientToken,
         DWORD DesiredAccess,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );




#line 8632 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmW (
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );




#line 8655 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmA (
         LPCSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );
__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmW (
         LPCWSTR SubsystemName,
         LPVOID HandleId,
         BOOL GenerateOnClose
    );




#line 8678 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
         LPCSTR SubsystemName,
         LPCSTR ServiceName,
         HANDLE ClientToken,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );
__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmW (
         LPCWSTR SubsystemName,
         LPCWSTR ServiceName,
         HANDLE ClientToken,
         PPRIVILEGE_SET Privileges,
         BOOL AccessGranted
    );




#line 8705 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"










































#line 8748 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
IsValidSid (
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
EqualSid (
         PSID pSid1,
         PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
EqualPrefixSid (
         PSID pSid1,
         PSID pSid2
    );


__declspec(dllimport)
DWORD
__stdcall
GetSidLengthRequired (
         UCHAR nSubAuthorityCount
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateAndInitializeSid (
                PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
                BYTE nSubAuthorityCount,
                DWORD nSubAuthority0,
                DWORD nSubAuthority1,
                DWORD nSubAuthority2,
                DWORD nSubAuthority3,
                DWORD nSubAuthority4,
                DWORD nSubAuthority5,
                DWORD nSubAuthority6,
                DWORD nSubAuthority7,
                  PSID *pSid
    );

__declspec(dllimport)
PVOID
__stdcall
FreeSid(
         PSID pSid
    );

__declspec(dllimport)
BOOL
__stdcall
InitializeSid (
         PSID Sid,
          PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
          BYTE nSubAuthorityCount
    );


__declspec(dllimport)
    
PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority (
         PSID pSid
    );


__declspec(dllimport)
    
PDWORD
__stdcall
GetSidSubAuthority (
         PSID pSid,
         DWORD nSubAuthority
    );


__declspec(dllimport)
    
PUCHAR
__stdcall
GetSidSubAuthorityCount (
         PSID pSid
    );


__declspec(dllimport)
DWORD
__stdcall
GetLengthSid (
         PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
CopySid (
         DWORD nDestinationSidLength,
         PSID pDestinationSid,
         PSID pSourceSid
    );


__declspec(dllimport)
BOOL
__stdcall
AreAllAccessesGranted (
         DWORD GrantedAccess,
         DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
AreAnyAccessesGranted (
         DWORD GrantedAccess,
         DWORD DesiredAccess
    );


__declspec(dllimport)
void
__stdcall
MapGenericMask (
         PDWORD AccessMask,
            PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidAcl (
         PACL pAcl
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeAcl (
         PACL pAcl,
         DWORD nAclLength,
         DWORD dwAclRevision
    );


__declspec(dllimport)
BOOL
__stdcall
GetAclInformation (
         PACL pAcl,
         LPVOID pAclInformation,
         DWORD nAclInformationLength,
         ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetAclInformation (
         PACL pAcl,
           LPVOID pAclInformation,
            DWORD nAclInformationLength,
            ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
AddAce (
         PACL pAcl,
            DWORD dwAceRevision,
            DWORD dwStartingAceIndex,
           LPVOID pAceList,
            DWORD nAceListLength
    );


__declspec(dllimport)
BOOL
__stdcall
DeleteAce (
         PACL pAcl,
            DWORD dwAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
GetAce (
                PACL pAcl,
                DWORD dwAceIndex,
                  LPVOID *pAce
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAce (
         PACL pAcl,
            DWORD dwAceRevision,
            DWORD AccessMask,
            PSID pSid
    );












#line 8983 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAce (
         PACL pAcl,
            DWORD dwAceRevision,
            DWORD AccessMask,
            PSID pSid
    );












#line 9007 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAce(
         PACL pAcl,
            DWORD dwAceRevision,
            DWORD dwAccessMask,
            PSID pSid,
            BOOL bAuditSuccess,
            BOOL bAuditFailure
    );























































#line 9075 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindFirstFreeAce (
                PACL pAcl,
                  LPVOID *pAce
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSecurityDescriptor (
         PSECURITY_DESCRIPTOR pSecurityDescriptor,
          DWORD dwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSecurityDescriptor (
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorLength (
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorControl (
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
         PSECURITY_DESCRIPTOR_CONTROL pControl,
         LPDWORD lpdwRevision
    );










#line 9129 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorDacl (
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
             BOOL bDaclPresent,
           PACL pDacl,
             BOOL bDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorDacl (
                PSECURITY_DESCRIPTOR pSecurityDescriptor,
               LPBOOL lpbDaclPresent,
                  PACL *pDacl,
               LPBOOL lpbDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorSacl (
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
             BOOL bSaclPresent,
           PACL pSacl,
             BOOL bSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorSacl (
                PSECURITY_DESCRIPTOR pSecurityDescriptor,
               LPBOOL lpbSaclPresent,
                  PACL *pSacl,
               LPBOOL lpbSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorOwner (
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
           PSID pOwner,
             BOOL bOwnerDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorOwner (
                PSECURITY_DESCRIPTOR pSecurityDescriptor,
                  PSID *pOwner,
               LPBOOL lpbOwnerDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorGroup (
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
           PSID pGroup,
             BOOL bGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorGroup (
                PSECURITY_DESCRIPTOR pSecurityDescriptor,
                  PSID *pGroup,
               LPBOOL lpbGroupDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
SetSecurityDescriptorRMControl(
          PSECURITY_DESCRIPTOR SecurityDescriptor,
           PUCHAR RMControl
    );

__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorRMControl(
          PSECURITY_DESCRIPTOR SecurityDescriptor,
         PUCHAR RMControl
    );

__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurity (
              PSECURITY_DESCRIPTOR ParentDescriptor,
              PSECURITY_DESCRIPTOR CreatorDescriptor,
                  PSECURITY_DESCRIPTOR * NewDescriptor,
                BOOL IsDirectoryObject,
              HANDLE Token,
                PGENERIC_MAPPING GenericMapping
    );










































#line 9284 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurity (
                  SECURITY_INFORMATION SecurityInformation,
                  PSECURITY_DESCRIPTOR ModificationDescriptor,
             PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,
                  PGENERIC_MAPPING GenericMapping,
                HANDLE Token
    );













#line 9309 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetPrivateObjectSecurity (
          PSECURITY_DESCRIPTOR ObjectDescriptor,
          SECURITY_INFORMATION SecurityInformation,
             PSECURITY_DESCRIPTOR ResultantDescriptor,
          DWORD DescriptorLength,
         PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
DestroyPrivateObjectSecurity (
     PSECURITY_DESCRIPTOR * ObjectDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
MakeSelfRelativeSD (
            PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
             PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
         LPDWORD lpdwBufferLength
    );


__declspec(dllimport)
BOOL
__stdcall
MakeAbsoluteSD (
            PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
             PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
         LPDWORD lpdwAbsoluteSecurityDescriptorSize,
             PACL pDacl,
         LPDWORD lpdwDaclSize,
             PACL pSacl,
         LPDWORD lpdwSaclSize,
             PSID pOwner,
         LPDWORD lpdwOwnerSize,
             PSID pPrimaryGroup,
         LPDWORD lpdwPrimaryGroupSize
    );


__declspec(dllimport)
BOOL
__stdcall
MakeAbsoluteSD2 (
               PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
         LPDWORD lpdwBufferSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityA (
         LPCSTR lpFileName,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityW (
         LPCWSTR lpFileName,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );




#line 9387 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityA (
          LPCSTR lpFileName,
          SECURITY_INFORMATION RequestedInformation,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
          DWORD nLength,
         LPDWORD lpnLengthNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityW (
          LPCWSTR lpFileName,
          SECURITY_INFORMATION RequestedInformation,
             PSECURITY_DESCRIPTOR pSecurityDescriptor,
          DWORD nLength,
         LPDWORD lpnLengthNeeded
    );




#line 9414 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
SetKernelObjectSecurity (
         HANDLE Handle,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR SecurityDescriptor
    );

__declspec(dllimport)
    
HANDLE
__stdcall
FindFirstChangeNotificationA(
         LPCSTR lpPathName,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter
    );
__declspec(dllimport)
    
HANDLE
__stdcall
FindFirstChangeNotificationW(
         LPCWSTR lpPathName,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter
    );




#line 9448 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextChangeNotification(
         HANDLE hChangeHandle
    );

__declspec(dllimport)
BOOL
__stdcall
FindCloseChangeNotification(
         HANDLE hChangeHandle
    );















#line 9478 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
VirtualLock(
         LPVOID lpAddress,
         SIZE_T dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
VirtualUnlock(
         LPVOID lpAddress,
         SIZE_T dwSize
    );

__declspec(dllimport)
    
LPVOID
__stdcall
MapViewOfFileEx(
             HANDLE hFileMappingObject,
             DWORD dwDesiredAccess,
             DWORD dwFileOffsetHigh,
             DWORD dwFileOffsetLow,
             SIZE_T dwNumberOfBytesToMap,
           LPVOID lpBaseAddress
    );

__declspec(dllimport)
BOOL
__stdcall
SetPriorityClass(
         HANDLE hProcess,
         DWORD dwPriorityClass
    );

__declspec(dllimport)
DWORD
__stdcall
GetPriorityClass(
         HANDLE hProcess
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadReadPtr(
           const void *lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadWritePtr(
           LPVOID lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeReadPtr(
           const void *lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeWritePtr(
           LPVOID lp,
             UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadCodePtr(
           FARPROC lpfn
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrA(
           LPCSTR lpsz,
             UINT_PTR ucchMax
    );
__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrW(
           LPCWSTR lpsz,
             UINT_PTR ucchMax
    );




#line 9581 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupAccountSidA(
           LPCSTR lpSystemName,
         PSID Sid,
             LPSTR Name,
          LPDWORD cchName,
             LPSTR ReferencedDomainName,
         LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );
__declspec(dllimport)
BOOL
__stdcall
LookupAccountSidW(
           LPCWSTR lpSystemName,
         PSID Sid,
             LPWSTR Name,
          LPDWORD cchName,
             LPWSTR ReferencedDomainName,
         LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );




#line 9611 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupAccountNameA(
           LPCSTR lpSystemName,
             LPCSTR lpAccountName,
             PSID Sid,
          LPDWORD cbSid,
             LPSTR ReferencedDomainName,
          LPDWORD cchReferencedDomainName,
            PSID_NAME_USE peUse
    );
__declspec(dllimport)
BOOL
__stdcall
LookupAccountNameW(
           LPCWSTR lpSystemName,
             LPCWSTR lpAccountName,
             PSID Sid,
          LPDWORD cbSid,
             LPWSTR ReferencedDomainName,
          LPDWORD cchReferencedDomainName,
            PSID_NAME_USE peUse
    );




#line 9641 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueA(
           LPCSTR lpSystemName,
             LPCSTR lpName,
            PLUID   lpLuid
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueW(
           LPCWSTR lpSystemName,
             LPCWSTR lpName,
            PLUID   lpLuid
    );




#line 9663 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeNameA(
           LPCSTR lpSystemName,
             PLUID   lpLuid,
             LPSTR lpName,
          LPDWORD cchName
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeNameW(
           LPCWSTR lpSystemName,
             PLUID   lpLuid,
             LPWSTR lpName,
          LPDWORD cchName
    );




#line 9687 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeDisplayNameA(
           LPCSTR lpSystemName,
             LPCSTR lpName,
             LPSTR lpDisplayName,
          LPDWORD cchDisplayName,
            LPDWORD lpLanguageId
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeDisplayNameW(
           LPCWSTR lpSystemName,
             LPCWSTR lpName,
             LPWSTR lpDisplayName,
          LPDWORD cchDisplayName,
            LPDWORD lpLanguageId
    );




#line 9713 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AllocateLocallyUniqueId(
         PLUID Luid
    );

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBA(
          LPCSTR lpDef,
         LPDCB lpDCB
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBW(
          LPCWSTR lpDef,
         LPDCB lpDCB
    );




#line 9740 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
          LPCSTR lpDef,
         LPDCB lpDCB,
         LPCOMMTIMEOUTS lpCommTimeouts
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
          LPCWSTR lpDef,
         LPDCB lpDCB,
         LPCOMMTIMEOUTS lpCommTimeouts
    );




#line 9762 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogA(
             LPCSTR lpszName,
           HWND hWnd,
          LPCOMMCONFIG lpCC
    );
__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogW(
             LPCWSTR lpszName,
           HWND hWnd,
          LPCOMMCONFIG lpCC
    );




#line 9784 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigA(
            LPCSTR lpszName,
           LPCOMMCONFIG lpCC,
         LPDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigW(
            LPCWSTR lpszName,
           LPCOMMCONFIG lpCC,
         LPDWORD lpdwSize
    );




#line 9806 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigA(
         LPCSTR lpszName,
           LPCOMMCONFIG lpCC,
         DWORD dwSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigW(
         LPCWSTR lpszName,
           LPCOMMCONFIG lpCC,
         DWORD dwSize
    );




#line 9828 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"





#line 9834 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetComputerNameA (
           LPSTR lpBuffer,
         LPDWORD nSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetComputerNameW (
           LPWSTR lpBuffer,
         LPDWORD nSize
    );




#line 9854 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetComputerNameA (
         LPCSTR lpComputerName
    );
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameW (
         LPCWSTR lpComputerName
    );




#line 9872 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

















































































#line 9954 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetUserNameA (
           LPSTR lpBuffer,
         LPDWORD pcbBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetUserNameW (
           LPWSTR lpBuffer,
         LPDWORD pcbBuffer
    );




#line 9974 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"













#line 9988 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"





#line 9994 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


#line 9997 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
LogonUserA (
                LPCSTR lpszUsername,
              LPCSTR lpszDomain,
                LPCSTR lpszPassword,
                DWORD dwLogonType,
                DWORD dwLogonProvider,
                  PHANDLE phToken
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserW (
                LPCWSTR lpszUsername,
              LPCWSTR lpszDomain,
                LPCWSTR lpszPassword,
                DWORD dwLogonType,
                DWORD dwLogonProvider,
                  PHANDLE phToken
    );




#line 10027 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LogonUserExA (
                    LPCSTR lpszUsername,
                  LPCSTR lpszDomain,
                    LPCSTR lpszPassword,
                    DWORD dwLogonType,
                    DWORD dwLogonProvider,
                    PHANDLE phToken,
                    PSID  *ppLogonSid,
                       PVOID *ppProfileBuffer,
                 LPDWORD pdwProfileLength,
                 PQUOTA_LIMITS pQuotaLimits
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserExW (
                    LPCWSTR lpszUsername,
                  LPCWSTR lpszDomain,
                    LPCWSTR lpszPassword,
                    DWORD dwLogonType,
                    DWORD dwLogonProvider,
                    PHANDLE phToken,
                    PSID  *ppLogonSid,
                       PVOID *ppProfileBuffer,
                 LPDWORD pdwProfileLength,
                 PQUOTA_LIMITS pQuotaLimits
    );




#line 10063 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ImpersonateLoggedOnUser(
         HANDLE  hToken
    );

__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserA (
              HANDLE hToken,
              LPCSTR lpApplicationName,
           LPSTR lpCommandLine,
              LPSECURITY_ATTRIBUTES lpProcessAttributes,
              LPSECURITY_ATTRIBUTES lpThreadAttributes,
                BOOL bInheritHandles,
                DWORD dwCreationFlags,
              LPVOID lpEnvironment,
              LPCSTR lpCurrentDirectory,
                LPSTARTUPINFOA lpStartupInfo,
               LPPROCESS_INFORMATION lpProcessInformation
    );
__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserW (
              HANDLE hToken,
              LPCWSTR lpApplicationName,
           LPWSTR lpCommandLine,
              LPSECURITY_ATTRIBUTES lpProcessAttributes,
              LPSECURITY_ATTRIBUTES lpThreadAttributes,
                BOOL bInheritHandles,
                DWORD dwCreationFlags,
              LPVOID lpEnvironment,
              LPCWSTR lpCurrentDirectory,
                LPSTARTUPINFOW lpStartupInfo,
               LPPROCESS_INFORMATION lpProcessInformation
    );




#line 10108 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"











































#line 10152 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ImpersonateAnonymousToken(
         HANDLE ThreadHandle
    );

__declspec(dllimport)
BOOL
__stdcall
DuplicateTokenEx(
                HANDLE hExistingToken,
                DWORD dwDesiredAccess,
              LPSECURITY_ATTRIBUTES lpTokenAttributes,
                SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
                TOKEN_TYPE TokenType,
                  PHANDLE phNewToken);

__declspec(dllimport)
BOOL
__stdcall
CreateRestrictedToken(
                HANDLE ExistingTokenHandle,
                DWORD Flags,
                DWORD DisableSidCount,
             PSID_AND_ATTRIBUTES SidsToDisable,
                DWORD DeletePrivilegeCount,
             PLUID_AND_ATTRIBUTES PrivilegesToDelete,
                DWORD RestrictedSidCount,
             PSID_AND_ATTRIBUTES SidsToRestrict,
                  PHANDLE NewTokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
IsTokenRestricted(
         HANDLE TokenHandle
    );

__declspec(dllimport)
BOOL
__stdcall
IsTokenUntrusted(
         HANDLE TokenHandle
    );

__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembership(
           HANDLE TokenHandle,
             PSID SidToCheck,
            PBOOL IsMember
    );





















































































































































#line 10359 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"




















































#line 10412 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceCounter(
         LARGE_INTEGER *lpPerformanceCount
    );

__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceFrequency(
         LARGE_INTEGER *lpFrequency
    );



__declspec(dllimport)
BOOL
__stdcall
GetVersionExA(
         LPOSVERSIONINFOA lpVersionInformation
    );
__declspec(dllimport)
BOOL
__stdcall
GetVersionExW(
         LPOSVERSIONINFOW lpVersionInformation
    );




#line 10450 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoA(
         LPOSVERSIONINFOEXA lpVersionInformation,
            DWORD dwTypeMask,
            DWORDLONG dwlConditionMask
    );
__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoW(
         LPOSVERSIONINFOEXW lpVersionInformation,
            DWORD dwTypeMask,
            DWORDLONG dwlConditionMask
    );




#line 10474 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winerror.h"












#pragma once
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winerror.h"




















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 15300 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winerror.h"



















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 17176 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winerror.h"







































#line 17216 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winerror.h"


























































































































































































#line 17403 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winerror.h"






















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
 
 
 
 






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 27381 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winerror.h"

#line 10480 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"





























typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
}   SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

BOOL
__stdcall
GetSystemPowerStatus(
         LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );

BOOL
__stdcall
SetSystemPowerState(
         BOOL fSuspend,
         BOOL fForce
    );

#line 10532 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"





































































































































































































































































































































































































#line 10922 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"




















































#line 10975 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"








































































#line 11048 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"















































#line 11096 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"









































#line 11138 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"























#line 11162 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"



















































#line 11214 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ProcessIdToSessionId(
          DWORD dwProcessId,
         DWORD *pSessionId
    );
















#line 11240 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformation(
           PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
         PDWORD ReturnedLength
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaHighestNodeNumber(
         PULONG HighestNodeNumber
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNode(
          UCHAR Processor,
         PUCHAR NodeNumber
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMask(
          UCHAR Node,
         PULONGLONG ProcessorMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNode(
          UCHAR Node,
         PULONGLONG AvailableBytes
    );






#line 11290 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"
#line 11291 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"







#line 11299 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winbase.h"


#line 163 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"























#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"









#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




















































#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

































#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"













#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

















#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
















#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"














































































#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"









typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"







































































































typedef struct _PSINJECTDATA {

    DWORD   DataBytes;      
    WORD    InjectionPoint; 
    WORD    PageNumber;     

    

} PSINJECTDATA, *PPSINJECTDATA;

































































typedef struct _PSFEATURE_OUTPUT {

    BOOL bPageIndependent;
    BOOL bSetPageDevice;

} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;





typedef struct _PSFEATURE_CUSTPAPER {

    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;

} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;
















































typedef struct  tagXFORM
  {
    FLOAT   eM11;
    FLOAT   eM12;
    FLOAT   eM21;
    FLOAT   eM22;
    FLOAT   eDx;
    FLOAT   eDy;
  } XFORM, *PXFORM,  *LPXFORM;


typedef struct tagBITMAP
  {
    LONG        bmType;
    LONG        bmWidth;
    LONG        bmHeight;
    LONG        bmWidthBytes;
    WORD        bmPlanes;
    WORD        bmBitsPixel;
    LPVOID      bmBits;
  } BITMAP, *PBITMAP,  *NPBITMAP,  *LPBITMAP;

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"
#line 544 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
typedef struct tagRGBTRIPLE {
        BYTE    rgbtBlue;
        BYTE    rgbtGreen;
        BYTE    rgbtRed;
} RGBTRIPLE;
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

typedef struct tagRGBQUAD {
        BYTE    rgbBlue;
        BYTE    rgbGreen;
        BYTE    rgbRed;
        BYTE    rgbReserved;
} RGBQUAD;
typedef RGBQUAD * LPRGBQUAD;


















typedef LONG   LCSCSTYPE;


typedef LONG    LCSGAMUTMATCH;


























typedef long            FXPT16DOT16,  *LPFXPT16DOT16;
typedef long            FXPT2DOT30,  *LPFXPT2DOT30;




typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;
typedef CIEXYZ   *LPCIEXYZ;

typedef struct tagICEXYZTRIPLE
{
        CIEXYZ  ciexyzRed;
        CIEXYZ  ciexyzGreen;
        CIEXYZ  ciexyzBlue;
} CIEXYZTRIPLE;
typedef CIEXYZTRIPLE     *LPCIEXYZTRIPLE;






typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR   lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR  lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;




typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
#line 664 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


typedef struct tagBITMAPCOREHEADER {
        DWORD   bcSize;                 
        WORD    bcWidth;
        WORD    bcHeight;
        WORD    bcPlanes;
        WORD    bcBitCount;
} BITMAPCOREHEADER,  *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;

typedef struct tagBITMAPINFOHEADER{
        DWORD      biSize;
        LONG       biWidth;
        LONG       biHeight;
        WORD       biPlanes;
        WORD       biBitCount;
        DWORD      biCompression;
        DWORD      biSizeImage;
        LONG       biXPelsPerMeter;
        LONG       biYPelsPerMeter;
        DWORD      biClrUsed;
        DWORD      biClrImportant;
} BITMAPINFOHEADER,  *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;


typedef struct {
        DWORD        bV4Size;
        LONG         bV4Width;
        LONG         bV4Height;
        WORD         bV4Planes;
        WORD         bV4BitCount;
        DWORD        bV4V4Compression;
        DWORD        bV4SizeImage;
        LONG         bV4XPelsPerMeter;
        LONG         bV4YPelsPerMeter;
        DWORD        bV4ClrUsed;
        DWORD        bV4ClrImportant;
        DWORD        bV4RedMask;
        DWORD        bV4GreenMask;
        DWORD        bV4BlueMask;
        DWORD        bV4AlphaMask;
        DWORD        bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD        bV4GammaRed;
        DWORD        bV4GammaGreen;
        DWORD        bV4GammaBlue;
} BITMAPV4HEADER,  *LPBITMAPV4HEADER, *PBITMAPV4HEADER;
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


typedef struct {
        DWORD        bV5Size;
        LONG         bV5Width;
        LONG         bV5Height;
        WORD         bV5Planes;
        WORD         bV5BitCount;
        DWORD        bV5Compression;
        DWORD        bV5SizeImage;
        LONG         bV5XPelsPerMeter;
        LONG         bV5YPelsPerMeter;
        DWORD        bV5ClrUsed;
        DWORD        bV5ClrImportant;
        DWORD        bV5RedMask;
        DWORD        bV5GreenMask;
        DWORD        bV5BlueMask;
        DWORD        bV5AlphaMask;
        DWORD        bV5CSType;
        CIEXYZTRIPLE bV5Endpoints;
        DWORD        bV5GammaRed;
        DWORD        bV5GammaGreen;
        DWORD        bV5GammaBlue;
        DWORD        bV5Intent;
        DWORD        bV5ProfileData;
        DWORD        bV5ProfileSize;
        DWORD        bV5Reserved;
} BITMAPV5HEADER,  *LPBITMAPV5HEADER, *PBITMAPV5HEADER;




#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"









#line 757 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER    bmiHeader;
    RGBQUAD             bmiColors[1];
} BITMAPINFO,  *LPBITMAPINFO, *PBITMAPINFO;

typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER    bmciHeader;
    RGBTRIPLE           bmciColors[1];
} BITMAPCOREINFO,  *LPBITMAPCOREINFO, *PBITMAPCOREINFO;

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"
#line 769 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
typedef struct tagBITMAPFILEHEADER {
        WORD    bfType;
        DWORD   bfSize;
        WORD    bfReserved1;
        WORD    bfReserved2;
        DWORD   bfOffBits;
} BITMAPFILEHEADER,  *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 777 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"





typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO,  *NPCHARSETINFO,  *LPCHARSETINFO;






typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;


#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
#line 810 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




typedef struct tagHANDLETABLE
  {
    HGDIOBJ     objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE,  *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD       rdSize;
    WORD        rdFunction;
    WORD        rdParm[1];
  } METARECORD;
typedef struct tagMETARECORD  *PMETARECORD;
typedef struct tagMETARECORD   *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG        mm;
    LONG        xExt;
    LONG        yExt;
    HMETAFILE   hMF;
  } METAFILEPICT,  *LPMETAFILEPICT;

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"
#line 837 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
typedef struct tagMETAHEADER
{
    WORD        mtType;
    WORD        mtHeaderSize;
    WORD        mtVersion;
    DWORD       mtSize;
    WORD        mtNoObjects;
    DWORD       mtMaxRecord;
    WORD        mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER  *PMETAHEADER;
typedef struct tagMETAHEADER   *LPMETAHEADER;

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


typedef struct tagENHMETARECORD
{
    DWORD   iType;              
    DWORD   nSize;              
    DWORD   dParm[1];           
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD   iType;              
    DWORD   nSize;              
                                
    RECTL   rclBounds;          
    RECTL   rclFrame;           
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   nBytes;             
    DWORD   nRecords;           
    WORD    nHandles;           
                                
    WORD    sReserved;          
    DWORD   nDescription;       
                                
    DWORD   offDescription;     
                                
    DWORD   nPalEntries;        
    SIZEL   szlDevice;          
    SIZEL   szlMillimeters;     

    DWORD   cbPixelFormat;      
                                
    DWORD   offPixelFormat;     
                                
    DWORD   bOpenGL;            
                                
#line 889 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

    SIZEL   szlMicrometers;     
#line 892 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;

#line 896 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"















    typedef BYTE BCHAR;
#line 913 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



typedef struct tagTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA,  *NPTEXTMETRICA,  *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW,  *NPTEXTMETRICW,  *LPTEXTMETRICW;






typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;
#line 973 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
#line 974 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack4.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack4.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack4.h"
#line 990 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
typedef struct tagNEWTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA,  *NPNEWTEXTMETRICA,  *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW,  *NPNEWTEXTMETRICW,  *LPNEWTEXTMETRICW;






typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
#line 1055 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 1056 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXW;



typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
#line 1073 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
#line 1074 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

#line 1076 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



typedef struct tagPELARRAY
  {
    LONG        paXCount;
    LONG        paYCount;
    LONG        paXExt;
    LONG        paYExt;
    BYTE        paRGBs;
  } PELARRAY, *PPELARRAY,  *NPPELARRAY,  *LPPELARRAY;


typedef struct tagLOGBRUSH
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    ULONG_PTR    lbHatch;    
  } LOGBRUSH, *PLOGBRUSH,  *NPLOGBRUSH,  *LPLOGBRUSH;

typedef struct tagLOGBRUSH32
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    ULONG       lbHatch;
  } LOGBRUSH32, *PLOGBRUSH32,  *NPLOGBRUSH32,  *LPLOGBRUSH32;

typedef LOGBRUSH            PATTERN;
typedef PATTERN             *PPATTERN;
typedef PATTERN         *NPPATTERN;
typedef PATTERN          *LPPATTERN;


typedef struct tagLOGPEN
  {
    UINT        lopnStyle;
    POINT       lopnWidth;
    COLORREF    lopnColor;
  } LOGPEN, *PLOGPEN,  *NPLOGPEN,  *LPLOGPEN;

typedef struct tagEXTLOGPEN {
    DWORD       elpPenStyle;
    DWORD       elpWidth;
    UINT        elpBrushStyle;
    COLORREF    elpColor;
    ULONG_PTR    elpHatch;     
    DWORD       elpNumEntries;
    DWORD       elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN,  *NPEXTLOGPEN,  *LPEXTLOGPEN;



typedef struct tagPALETTEENTRY {
    BYTE        peRed;
    BYTE        peGreen;
    BYTE        peBlue;
    BYTE        peFlags;
} PALETTEENTRY, *PPALETTEENTRY,  *LPPALETTEENTRY;
#line 1135 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




typedef struct tagLOGPALETTE {
    WORD        palVersion;
    WORD        palNumEntries;
    PALETTEENTRY        palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE,  *NPLOGPALETTE,  *LPLOGPALETTE;
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"





typedef struct tagLOGFONTA
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    CHAR      lfFaceName[32];
} LOGFONTA, *PLOGFONTA,  *NPLOGFONTA,  *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    WCHAR     lfFaceName[32];
} LOGFONTW, *PLOGFONTW,  *NPLOGFONTW,  *LPLOGFONTW;






typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;
#line 1195 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE     elfFullName[64];
    BYTE     elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR    elfFullName[64];
    WCHAR    elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;




typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
#line 1219 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    BYTE        elfScript[32];
} ENUMLOGFONTEXA,  *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    WCHAR       elfScript[32];
} ENUMLOGFONTEXW,  *LPENUMLOGFONTEXW;




typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
#line 1242 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




























#line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



#line 1276 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



#line 1280 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"






#line 1287 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"








































#line 1328 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




                                    

                                    

                                    



































typedef struct tagPANOSE
{
    BYTE    bFamilyType;
    BYTE    bSerifStyle;
    BYTE    bWeight;
    BYTE    bProportion;
    BYTE    bContrast;
    BYTE    bStrokeVariation;
    BYTE    bArmStyle;
    BYTE    bLetterform;
    BYTE    bMidline;
    BYTE    bXHeight;
} PANOSE, * LPPANOSE;

















































































































typedef struct tagEXTLOGFONTA {
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA,  *NPEXTLOGFONTA,  *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW,  *NPEXTLOGFONTW,  *LPEXTLOGFONTW;






typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
#line 1533 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
















































































#line 1614 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




#line 1619 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



#line 1623 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



#line 1627 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

































































































                             

                             

                             





#line 1735 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"










































































#line 1810 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"





































#line 1848 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



























typedef struct _devicemodeA {
    BYTE   dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };
      
      struct {
        POINTL dmPosition;
        DWORD  dmDisplayOrientation;
        DWORD  dmDisplayFixedOutput; 
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE   dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    };
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
#line 1927 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
#line 1928 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR  dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };
      
      struct {
        POINTL dmPosition;
        DWORD  dmDisplayOrientation;
        DWORD  dmDisplayFixedOutput; 
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR  dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    };
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
#line 1981 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
#line 1982 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;






typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;
#line 1994 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"








#line 2003 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"










#line 2014 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


#line 2017 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"






















#line 2040 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


#line 2043 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"












































































#line 2120 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




















































#line 2173 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"







#line 2181 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"












































#line 2226 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
















#line 2243 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

















































#line 2293 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

typedef struct _DISPLAY_DEVICEA {
    DWORD  cb;
    CHAR   DeviceName[32];
    CHAR   DeviceString[128];
    DWORD  StateFlags;
    CHAR   DeviceID[128];
    CHAR   DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD  cb;
    WCHAR  DeviceName[32];
    WCHAR  DeviceString[128];
    DWORD  StateFlags;
    WCHAR  DeviceID[128];
    WCHAR  DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;





typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
#line 2319 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




















typedef struct _RGNDATAHEADER {
    DWORD   dwSize;
    DWORD   iType;
    DWORD   nCount;
    DWORD   nRgnSize;
    RECT    rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER   rdh;
    char            Buffer[1];
} RGNDATA, *PRGNDATA,  *NPRGNDATA,  *LPRGNDATA;





typedef struct _ABC {
    int     abcA;
    UINT    abcB;
    int     abcC;
} ABC, *PABC,  *NPABC,  *LPABC;

typedef struct _ABCFLOAT {
    FLOAT   abcfA;
    FLOAT   abcfB;
    FLOAT   abcfC;
} ABCFLOAT, *PABCFLOAT,  *NPABCFLOAT,  *LPABCFLOAT;






typedef struct _OUTLINETEXTMETRICA {
    UINT    otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA,  *NPOUTLINETEXTMETRICA,  *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT    otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW,  *NPOUTLINETEXTMETRICW,  *LPOUTLINETEXTMETRICW;






typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
#line 2452 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"





#line 2458 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


typedef struct tagPOLYTEXTA
{
    int       x;
    int       y;
    UINT      n;
    LPCSTR    lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTA, *PPOLYTEXTA,  *NPPOLYTEXTA,  *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int       x;
    int       y;
    UINT      n;
    LPCWSTR   lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTW, *PPOLYTEXTW,  *NPPOLYTEXTW,  *LPPOLYTEXTW;






typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;
#line 2491 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

typedef struct _FIXED {

    WORD    fract;
    short   value;



#line 2500 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
} FIXED;


typedef struct _MAT2 {
     FIXED  eM11;
     FIXED  eM12;
     FIXED  eM21;
     FIXED  eM22;
} MAT2,  *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT    gmBlackBoxX;
    UINT    gmBlackBoxY;
    POINT   gmptGlyphOrigin;
    short   gmCellIncX;
    short   gmCellIncY;
} GLYPHMETRICS,  *LPGLYPHMETRICS;













#line 2533 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



#line 2537 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"







typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD    wType;
    WORD    cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD   cb;
    DWORD   dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;













































typedef struct tagGCP_RESULTSA
    {
    DWORD   lStructSize;
    LPSTR     lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD   lStructSize;
    LPWSTR    lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;




typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
#line 2639 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
#line 2640 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

typedef struct _RASTERIZER_STATUS {
    short   nSize;
    short   wFlags;
    short   nLanguageID;
} RASTERIZER_STATUS,  *LPRASTERIZER_STATUS;






typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerType;
    BYTE  bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR,  *LPPIXELFORMATDESCRIPTOR;

































typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);




#line 2721 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"








#line 2730 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

typedef OLDFONTENUMPROCA    FONTENUMPROCA;
typedef OLDFONTENUMPROCW    FONTENUMPROCW;



typedef FONTENUMPROCA FONTENUMPROC;
#line 2738 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);











#line 2753 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



__declspec(dllimport) int __stdcall AddFontResourceA(     LPCSTR);
__declspec(dllimport) int __stdcall AddFontResourceW(     LPCWSTR);




#line 2763 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) BOOL	__stdcall AnimatePalette(      HPALETTE hPal,      UINT iStartIndex,     	UINT cEntries,        const PALETTEENTRY * ppe);
__declspec(dllimport) BOOL	__stdcall Arc(      HDC hdc,      int x1,      int y1,      int x2,      int y2,      int x3,      int y3,      int x4,      int y4);
__declspec(dllimport) BOOL	__stdcall BitBlt(      HDC hdc,      int x,      int y,      int cx,      int cy,        HDC hdcSrc,      int x1,      int y1,      DWORD rop);
__declspec(dllimport) BOOL  __stdcall CancelDC(      HDC hdc);
__declspec(dllimport) BOOL  __stdcall Chord(      HDC hdc,      int x1,      int y1,      int x2,      int y2,      int x3,      int y3,      int x4,      int y4);
__declspec(dllimport) int   __stdcall ChoosePixelFormat(      HDC hdc,      const PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) HMETAFILE  __stdcall CloseMetaFile(      HDC hdc);
__declspec(dllimport) int     __stdcall CombineRgn(        HRGN hrgnDst,        HRGN hrgnSrc1,        HRGN hrgnSrc2,      int iMode);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA(      HMETAFILE,        LPCSTR);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW(      HMETAFILE,        LPCWSTR);




#line 2779 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) HBITMAP __stdcall CreateBitmap(      int nWidth,      int nHeight,      UINT nPlanes,      UINT nBitCount,        const void *lpBits);
__declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect(      const BITMAP *pbm);
__declspec(dllimport) HBRUSH  __stdcall CreateBrushIndirect(      const LOGBRUSH *plbrush);
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap(      HDC hdc,      int cx,      int cy);
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap(      HDC hdc,      int cx,      int cy);
__declspec(dllimport) HDC     __stdcall CreateCompatibleDC(        HDC hdc);
__declspec(dllimport) HDC     __stdcall CreateDCA(        LPCSTR pwszDriver,        LPCSTR pwszDevice,        LPCSTR pszPort,        const DEVMODEA * pdm);
__declspec(dllimport) HDC     __stdcall CreateDCW(        LPCWSTR pwszDriver,        LPCWSTR pwszDevice,        LPCWSTR pszPort,        const DEVMODEW * pdm);




#line 2792 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap(      HDC hdc,        const BITMAPINFOHEADER *pbmih,      DWORD flInit,        const void *pjBits,        const BITMAPINFO *pbmi,      UINT iUsage);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrush(      HGLOBAL h,      UINT iUsage);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrushPt(      const void *lpPackedDIB,      UINT iUsage);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgn(      int x1,      int y1,      int x2,      int y2);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgnIndirect(      const RECT *lprect);
__declspec(dllimport) HFONT   __stdcall CreateFontIndirectA(      const LOGFONTA *lplf);
__declspec(dllimport) HFONT   __stdcall CreateFontIndirectW(      const LOGFONTW *lplf);




#line 2804 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) HFONT   __stdcall CreateFontA(      int cHeight,      int cWidth,      int cEscapement,      int cOrientation,      int cWeight,      DWORD bItalic,
                                  DWORD bUnderline,      DWORD bStrikeOut,      DWORD iCharSet,      DWORD iOutPrecision,      DWORD iClipPrecision,
                                  DWORD iQuality,      DWORD iPitchAndFamily,        LPCSTR pszFaceName);
__declspec(dllimport) HFONT   __stdcall CreateFontW(      int cHeight,      int cWidth,      int cEscapement,      int cOrientation,      int cWeight,      DWORD bItalic,
                                  DWORD bUnderline,      DWORD bStrikeOut,      DWORD iCharSet,      DWORD iOutPrecision,      DWORD iClipPrecision,
                                  DWORD iQuality,      DWORD iPitchAndFamily,        LPCWSTR pszFaceName);




#line 2815 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) HBRUSH  __stdcall CreateHatchBrush(      int iHatch,      COLORREF color);
__declspec(dllimport) HDC     __stdcall CreateICA(        LPCSTR pszDriver,        LPCSTR pszDevice,        LPCSTR pszPort,        const DEVMODEA * pdm);
__declspec(dllimport) HDC     __stdcall CreateICW(        LPCWSTR pszDriver,        LPCWSTR pszDevice,        LPCWSTR pszPort,        const DEVMODEW * pdm);




#line 2824 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) HDC     __stdcall CreateMetaFileA(        LPCSTR pszFile);
__declspec(dllimport) HDC     __stdcall CreateMetaFileW(        LPCWSTR pszFile);




#line 2831 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) HPALETTE __stdcall CreatePalette(      const LOGPALETTE * plpal);
__declspec(dllimport) HPEN    __stdcall CreatePen(      int iStyle,      int cWidth,      COLORREF color);
__declspec(dllimport) HPEN    __stdcall CreatePenIndirect(      const LOGPEN *plpen);
__declspec(dllimport) HRGN    __stdcall CreatePolyPolygonRgn(       const POINT *pptl,
                                                     const INT  *pc,
                                                     int cPoly,
                                                     int iMode);
__declspec(dllimport) HBRUSH  __stdcall CreatePatternBrush(      HBITMAP hbm);
__declspec(dllimport) HRGN    __stdcall CreateRectRgn(      int x1,      int y1,      int x2,      int y2);
__declspec(dllimport) HRGN    __stdcall CreateRectRgnIndirect(      const RECT *lprect);
__declspec(dllimport) HRGN    __stdcall CreateRoundRectRgn(      int x1,      int y1,      int x2,      int y2,      int w,      int h);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceA(      DWORD fdwHidden,      LPCSTR lpszFont,      LPCSTR lpszFile,        LPCSTR lpszPath);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceW(      DWORD fdwHidden,      LPCWSTR lpszFont,      LPCWSTR lpszFile,        LPCWSTR lpszPath);




#line 2849 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) HBRUSH  __stdcall CreateSolidBrush(      COLORREF color);

__declspec(dllimport) BOOL __stdcall DeleteDC(      HDC hdc);
__declspec(dllimport) BOOL __stdcall DeleteMetaFile(      HMETAFILE hmf);
__declspec(dllimport) BOOL __stdcall DeleteObject(      HGDIOBJ ho);
__declspec(dllimport) int  __stdcall DescribePixelFormat(       HDC hdc, 
                                                 int iPixelFormat, 
                                                 UINT nBytes,
                                                   LPPIXELFORMATDESCRIPTOR ppfd);





typedef UINT   (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD  (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);






































#line 2905 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

















#line 2923 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

















#line 2941 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesA(
         LPCSTR pDevice,
           LPCSTR pPort,
         WORD fwCapability,
           LPSTR pOutput,
           const DEVMODEA * pDevMode
    );
__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesW(
         LPCWSTR pDevice,
           LPCWSTR pPort,
         WORD fwCapability,
           LPWSTR pOutput,
           const DEVMODEW * pDevMode
    );




#line 2967 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) int  __stdcall DrawEscape(        HDC    hdc,         
                                         int    iEscape,     
                                         int    cjIn,        
                                             LPCSTR lpIn);
__declspec(dllimport) BOOL __stdcall Ellipse(      HDC hdc,      int left,      int top,       int right,      int bottom);


__declspec(dllimport) int  __stdcall EnumFontFamiliesExA(      HDC hdc,      LPLOGFONTA lpLogfont,      FONTENUMPROCA lpProc,      LPARAM lParam,      DWORD dwFlags);
__declspec(dllimport) int  __stdcall EnumFontFamiliesExW(      HDC hdc,      LPLOGFONTW lpLogfont,      FONTENUMPROCW lpProc,      LPARAM lParam,      DWORD dwFlags);




#line 2982 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
#line 2983 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) int  __stdcall EnumFontFamiliesA(      HDC hdc,        LPCSTR lpLogfont,      FONTENUMPROCA lpProc,      LPARAM lParam);
__declspec(dllimport) int  __stdcall EnumFontFamiliesW(      HDC hdc,        LPCWSTR lpLogfont,      FONTENUMPROCW lpProc,      LPARAM lParam);




#line 2991 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) int  __stdcall EnumFontsA(      HDC hdc,        LPCSTR lpLogfont,       FONTENUMPROCA lpProc,      LPARAM lParam);
__declspec(dllimport) int  __stdcall EnumFontsW(      HDC hdc,        LPCWSTR lpLogfont,       FONTENUMPROCW lpProc,      LPARAM lParam);




#line 2998 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


__declspec(dllimport) int  __stdcall EnumObjects(      HDC hdc,      int nType,      GOBJENUMPROC lpFunc,      LPARAM lParam);


#line 3004 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


__declspec(dllimport) BOOL __stdcall EqualRgn(      HRGN hrgn1,      HRGN hrgn2);
__declspec(dllimport) int  __stdcall Escape(        HDC hdc,           
                                     int iEscape,       
                                     int cjIn,          
                                         LPCSTR pvIn,
                                       LPVOID pvOut);
__declspec(dllimport) int  __stdcall ExtEscape(         HDC hdc,         
                                         int iEscape,     
                                         int cjInput,     
                                             LPCSTR lpInData,  
                                         int cjOutput,   
                                           LPSTR lpOutData);
__declspec(dllimport) int  __stdcall ExcludeClipRect(      HDC hdc,      int left,      int top,      int right,      int bottom);
__declspec(dllimport) HRGN __stdcall ExtCreateRegion(        const XFORM * lpx,      DWORD nCount,        const RGNDATA * lpData);
__declspec(dllimport) BOOL __stdcall ExtFloodFill(      HDC hdc,      int x,      int y,      COLORREF color,      UINT type);
__declspec(dllimport) BOOL __stdcall FillRgn(      HDC hdc,      HRGN hrgn,      HBRUSH hbr);
__declspec(dllimport) BOOL __stdcall FloodFill(      HDC hdc,      int x,      int y,      COLORREF color);
__declspec(dllimport) BOOL __stdcall FrameRgn(      HDC hdc,      HRGN hrgn,      HBRUSH hbr,      int w,      int h);
__declspec(dllimport) int  __stdcall GetROP2(      HDC hdc);
__declspec(dllimport) BOOL __stdcall GetAspectRatioFilterEx(      HDC hdc,      LPSIZE lpsize);
__declspec(dllimport) COLORREF __stdcall GetBkColor(      HDC hdc);




#line 3032 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport)
int
__stdcall
GetBkMode(
         HDC hdc
    );

__declspec(dllimport)
LONG
__stdcall
GetBitmapBits(
         HBITMAP hbit,
         LONG cb,
         LPVOID lpvBits
    );

__declspec(dllimport) BOOL  __stdcall GetBitmapDimensionEx(      HBITMAP hbit,      LPSIZE lpsize);
__declspec(dllimport) UINT  __stdcall GetBoundsRect(      HDC hdc,      LPRECT lprect,      UINT flags);

__declspec(dllimport) BOOL  __stdcall GetBrushOrgEx(      HDC hdc,      LPPOINT lppt);

__declspec(dllimport) BOOL  __stdcall GetCharWidthA(      HDC hdc,      UINT iFirst,      UINT iLast,      LPINT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidthW(      HDC hdc,      UINT iFirst,      UINT iLast,      LPINT lpBuffer);




#line 3061 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidth32A(      HDC hdc,      UINT iFirst,      UINT iLast,       LPINT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidth32W(      HDC hdc,      UINT iFirst,      UINT iLast,       LPINT lpBuffer);




#line 3068 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatA(      HDC hdc,      UINT iFirst,      UINT iLast,      PFLOAT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatW(      HDC hdc,      UINT iFirst,      UINT iLast,      PFLOAT lpBuffer);




#line 3075 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsA(      HDC hdc, 
                                                 UINT wFirst, 
                                                 UINT wLast, 
                                                 LPABC lpABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsW(      HDC hdc, 
                                                 UINT wFirst, 
                                                 UINT wLast, 
                                                 LPABC lpABC);




#line 3089 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatA(      HDC hdc,      UINT iFirst,      UINT iLast,      LPABCFLOAT lpABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatW(      HDC hdc,      UINT iFirst,      UINT iLast,      LPABCFLOAT lpABC);




#line 3097 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) int   __stdcall GetClipBox(      HDC hdc,       LPRECT lprect);
__declspec(dllimport) int	__stdcall GetClipRgn(      HDC hdc,      HRGN hrgn);
__declspec(dllimport) int	__stdcall GetMetaRgn(      HDC hdc,      HRGN hrgn);
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject(      HDC hdc,      UINT type);
__declspec(dllimport) BOOL  __stdcall GetCurrentPositionEx(      HDC hdc,       LPPOINT lppt);
__declspec(dllimport) int   __stdcall GetDeviceCaps(        HDC hdc,      int index);
__declspec(dllimport) int   __stdcall GetDIBits(      HDC hdc,      HBITMAP hbm,      UINT start,      UINT cLines,         LPVOID lpvBits,      LPBITMAPINFO lpbmi,      UINT usage);

__declspec(dllimport) DWORD __stdcall GetFontData (         HDC     hdc,
                                             DWORD   dwTable,
                                             DWORD   dwOffset,
                                                 PVOID pvBuffer,
                                             DWORD   cjBuffer
                                        );

__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA(         HDC hdc,
                                                 UINT uChar,
                                                 UINT fuFormat,
                                                 LPGLYPHMETRICS lpgm,
                                                 DWORD cjBuffer,
                                                   LPVOID pvBuffer,
                                                 const MAT2 *lpmat2
                                        );
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW(         HDC hdc,
                                                 UINT uChar,
                                                 UINT fuFormat,
                                                 LPGLYPHMETRICS lpgm,
                                                 DWORD cjBuffer,
                                                   LPVOID pvBuffer,
                                                 const MAT2 *lpmat2
                                        );




#line 3133 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) int   __stdcall GetGraphicsMode(      HDC hdc);
__declspec(dllimport) int   __stdcall GetMapMode(      HDC hdc);
__declspec(dllimport) UINT  __stdcall GetMetaFileBitsEx(     HMETAFILE hMF,      UINT cbBuffer,        LPVOID lpData);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileA(      LPCSTR lpName);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileW(      LPCWSTR lpName);




#line 3144 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) COLORREF __stdcall GetNearestColor(      HDC hdc,      COLORREF color);
__declspec(dllimport) UINT  __stdcall GetNearestPaletteIndex(      HPALETTE h,      COLORREF color);
__declspec(dllimport) DWORD __stdcall GetObjectType(      HGDIOBJ h);



__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA(      HDC hdc, 
                                                     UINT cjCopy, 
                                                       LPOUTLINETEXTMETRICA potm);
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW(      HDC hdc, 
                                                     UINT cjCopy, 
                                                       LPOUTLINETEXTMETRICW potm);




#line 3161 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

#line 3163 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) UINT	__stdcall GetPaletteEntries(        HPALETTE hpal,
                                                 UINT iStart,
                                                 UINT cEntries,
                                                 LPPALETTEENTRY pPalEntries);
__declspec(dllimport) COLORREF __stdcall GetPixel(      HDC hdc,      int x,      int y);
__declspec(dllimport) int   __stdcall GetPixelFormat(      HDC hdc);
__declspec(dllimport) int   __stdcall GetPolyFillMode(      HDC hdc);
__declspec(dllimport) BOOL  __stdcall GetRasterizerCaps(        LPRASTERIZER_STATUS lpraststat, 
                                                 UINT cjBytes);

__declspec(dllimport) int   __stdcall GetRandomRgn (     HDC hdc,      HRGN hrgn,      INT i);
__declspec(dllimport) DWORD __stdcall GetRegionData(        HRGN hrgn,
                                             DWORD nCount,
                                                 LPRGNDATA lpRgnData);
__declspec(dllimport) int   __stdcall GetRgnBox(      HRGN hrgn,       LPRECT lprc);
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject(      int i);
__declspec(dllimport) int   __stdcall GetStretchBltMode(     HDC hdc);
__declspec(dllimport)
UINT
__stdcall
GetSystemPaletteEntries(
         HDC  hdc,
         UINT iStart,
         UINT cEntries,
           LPPALETTEENTRY pPalEntries
    );

__declspec(dllimport) UINT  __stdcall GetSystemPaletteUse(     HDC hdc);
__declspec(dllimport) int   __stdcall GetTextCharacterExtra(     HDC hdc);
__declspec(dllimport) UINT  __stdcall GetTextAlign(     HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetTextColor(     HDC hdc);

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointA(
         HDC hdc,
           LPCSTR lpString,
         int c,
         LPSIZE lpsz
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointW(
         HDC hdc,
           LPCWSTR lpString,
         int c,
         LPSIZE lpsz
    );




#line 3219 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32A(
         HDC hdc,
           LPCSTR lpString,
         int c,
         LPSIZE psizl
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32W(
         HDC hdc,
           LPCWSTR lpString,
         int c,
         LPSIZE psizl
    );




#line 3243 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointA(
         HDC hdc,
           LPCSTR lpszString,
         int cchString,
         int nMaxExtent,
           LPINT lpnFit,
             LPINT lpnDx,
         LPSIZE lpSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointW(
         HDC hdc,
           LPCWSTR lpszString,
         int cchString,
         int nMaxExtent,
           LPINT lpnFit,
             LPINT lpnDx,
         LPSIZE lpSize
    );




#line 3273 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


__declspec(dllimport) int __stdcall GetTextCharset(      HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharsetInfo(      HDC hdc,        LPFONTSIGNATURE lpSig,      DWORD dwFlags);
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo(      DWORD  *lpSrc,       LPCHARSETINFO lpCs,      DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo(      HDC hdc);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA(       HDC hdc,        LPCSTR lpString,      int nCount,      int nMexExtent,      LPGCP_RESULTSA lpResults,      DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW(       HDC hdc,        LPCWSTR lpString,      int nCount,      int nMexExtent,      LPGCP_RESULTSW lpResults,      DWORD dwFlags);




#line 3286 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
#line 3287 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"








































































































































































































#line 3488 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetViewportExtEx(      HDC hdc,      LPSIZE lpsize);
__declspec(dllimport) BOOL  __stdcall GetViewportOrgEx(      HDC hdc,      LPPOINT lppoint);
__declspec(dllimport) BOOL  __stdcall GetWindowExtEx(      HDC hdc,      LPSIZE lpsize);
__declspec(dllimport) BOOL  __stdcall GetWindowOrgEx(      HDC hdc,      LPPOINT lppoint);

__declspec(dllimport) int  __stdcall IntersectClipRect(      HDC hdc,      int left,      int top,      int right,      int bottom);
__declspec(dllimport) BOOL __stdcall InvertRgn(      HDC hdc,      HRGN hrgn);
__declspec(dllimport) BOOL __stdcall LineDDA(      int xStart,      int yStart,      int xEnd,      int yEnd,      LINEDDAPROC lpProc,        LPARAM data);
__declspec(dllimport) BOOL __stdcall LineTo(      HDC hdc,      int x,      int y);
__declspec(dllimport) BOOL __stdcall MaskBlt(      HDC hdcDest,      int xDest,      int yDest,      int width,      int height,
                   HDC hdcSrc,      int xSrc,      int ySrc,      HBITMAP hbmMask,      int xMask,      int yMask,      DWORD rop);
__declspec(dllimport) BOOL __stdcall PlgBlt(      HDC hdcDest,        const POINT * lpPoint,      HDC hdcSrc,      int xSrc,      int ySrc,      int width,
                          int height,        HBITMAP hbmMask,      int xMask,      int yMask);

__declspec(dllimport) int  __stdcall OffsetClipRgn(     HDC hdc,      int x,      int y);
__declspec(dllimport) int  __stdcall OffsetRgn(     HRGN hrgn,      int x,      int y);
__declspec(dllimport) BOOL __stdcall PatBlt(     HDC hdc,      int x,      int y,      int w,      int h,      DWORD rop);
__declspec(dllimport) BOOL __stdcall Pie(     HDC hdc,      int left,      int top,      int right,      int bottom,      int xr1,      int yr1,      int xr2,      int yr2);
__declspec(dllimport) BOOL __stdcall PlayMetaFile(     HDC hdc,      HMETAFILE hmf);
__declspec(dllimport) BOOL __stdcall PaintRgn(     HDC hdc,      HRGN hrgn);
__declspec(dllimport) BOOL __stdcall PolyPolygon(     HDC hdc,       const POINT *apt,         const INT *asz,       int csz);
__declspec(dllimport) BOOL __stdcall PtInRegion(     HRGN hrgn,      int x,      int y);
__declspec(dllimport) BOOL __stdcall PtVisible(     HDC hdc,      int x,      int y);
__declspec(dllimport) BOOL __stdcall RectInRegion(     HRGN hrgn,      const RECT * lprect);
__declspec(dllimport) BOOL __stdcall RectVisible(     HDC hdc,      const RECT * lprect);
__declspec(dllimport) BOOL __stdcall Rectangle(     HDC hdc,      int left,      int top,      int right,      int bottom);
__declspec(dllimport) BOOL __stdcall RestoreDC(     HDC hdc,      int nSavedDC);
__declspec(dllimport) HDC  __stdcall ResetDCA(     HDC hdc,      const DEVMODEA * lpdm);
__declspec(dllimport) HDC  __stdcall ResetDCW(     HDC hdc,      const DEVMODEW * lpdm);




#line 3523 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) UINT __stdcall RealizePalette(     HDC hdc);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA(     LPCSTR lpFileName);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW(     LPCWSTR lpFileName);




#line 3531 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall RoundRect(     HDC hdc,      int left,      int top,      int right,      int bottom,      int width,      int height);
__declspec(dllimport) BOOL __stdcall ResizePalette(     HPALETTE hpal,      UINT n);

__declspec(dllimport) int  __stdcall SaveDC(     HDC hdc);
__declspec(dllimport) int  __stdcall SelectClipRgn(     HDC hdc,        HRGN hrgn);
__declspec(dllimport) int  __stdcall ExtSelectClipRgn(     HDC hdc,        HRGN hrgn,      int mode);
__declspec(dllimport) int  __stdcall SetMetaRgn(     HDC hdc);
__declspec(dllimport) HGDIOBJ __stdcall SelectObject(     HDC hdc,      HGDIOBJ h);
__declspec(dllimport) HPALETTE __stdcall SelectPalette(     HDC hdc,      HPALETTE hPal,      BOOL bForceBkgd);
__declspec(dllimport) COLORREF __stdcall SetBkColor(     HDC hdc,      COLORREF color);




#line 3546 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) int   __stdcall SetBkMode(     HDC hdc,      int mode);

__declspec(dllimport)
LONG __stdcall
SetBitmapBits(
         HBITMAP hbm,
         DWORD cb,
           const void *pvBits);

__declspec(dllimport) UINT  __stdcall SetBoundsRect(     HDC hdc,        const RECT * lprect,      UINT flags);
__declspec(dllimport) int	__stdcall SetDIBits(     HDC hdc,      HBITMAP hbm,      UINT start,      UINT cLines,      const void *lpBits,      const BITMAPINFO * lpbmi,      UINT ColorUse);
__declspec(dllimport) int   __stdcall SetDIBitsToDevice(     HDC hdc,      int xDest,      int yDest,      DWORD w,      DWORD h,      int xSrc,
             int ySrc,      UINT StartScan,      UINT cLines,      const void * lpvBits,      const BITMAPINFO * lpbmi,      UINT ColorUse);
__declspec(dllimport) DWORD __stdcall SetMapperFlags(     HDC hdc,      DWORD flags);
__declspec(dllimport) int   __stdcall SetGraphicsMode(     HDC hdc,      int iMode);
__declspec(dllimport) int   __stdcall SetMapMode(     HDC hdc,      int iMode);


__declspec(dllimport) DWORD __stdcall SetLayout(     HDC hdc,      DWORD l);
__declspec(dllimport) DWORD __stdcall GetLayout(     HDC hdc);
#line 3568 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) HMETAFILE   __stdcall SetMetaFileBitsEx(     UINT cbBuffer,        const BYTE *lpData);
__declspec(dllimport) UINT  __stdcall SetPaletteEntries(        HPALETTE hpal,
                                                 UINT iStart,
                                                 UINT cEntries,
                                                   const PALETTEENTRY *pPalEntries);
__declspec(dllimport) COLORREF __stdcall SetPixel(     HDC hdc,      int x,      int y,      COLORREF color);
__declspec(dllimport) BOOL   __stdcall SetPixelV(     HDC hdc,      int x,      int y,      COLORREF color);
__declspec(dllimport) BOOL  __stdcall SetPixelFormat(     HDC hdc,      int format,      const PIXELFORMATDESCRIPTOR * ppfd);
__declspec(dllimport) int   __stdcall SetPolyFillMode(     HDC hdc,      int mode);
__declspec(dllimport) BOOL	 __stdcall StretchBlt(     HDC hdcDest,      int xDest,      int yDest,      int wDest,      int hDest,      HDC hdcSrc,      int xSrc,      int ySrc,      int wSrc,      int hSrc,      DWORD rop);
__declspec(dllimport) BOOL   __stdcall SetRectRgn(     HRGN hrgn,      int left,      int top,      int right,      int bottom);
__declspec(dllimport) int   __stdcall StretchDIBits(     HDC hdc,      int xDest,      int yDest,      int DestWidth,      int DestHeight,      int xSrc,      int ySrc,      int SrcWidth,      int SrcHeight,
             const void * lpBits,      const BITMAPINFO * lpbmi,      UINT iUsage,      DWORD rop);
__declspec(dllimport) int   __stdcall SetROP2(     HDC hdc,      int rop2);
__declspec(dllimport) int   __stdcall SetStretchBltMode(     HDC hdc,      int mode);
__declspec(dllimport) UINT  __stdcall SetSystemPaletteUse(     HDC hdc,      UINT use);
__declspec(dllimport) int   __stdcall SetTextCharacterExtra(     HDC hdc,      int extra);
__declspec(dllimport) COLORREF __stdcall SetTextColor(     HDC hdc,      COLORREF color);
__declspec(dllimport) UINT  __stdcall SetTextAlign(     HDC hdc,      UINT align);
__declspec(dllimport) BOOL  __stdcall SetTextJustification(     HDC hdc,      int extra,      int count);
__declspec(dllimport) BOOL  __stdcall UpdateColors(     HDC hdc);







typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG    x;
    LONG    y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;

typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;

typedef struct _BLENDFUNCTION
{
    BYTE   BlendOp;
    BYTE   BlendFlags;
    BYTE   SourceConstantAlpha;
    BYTE   AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;














__declspec(dllimport) BOOL __stdcall AlphaBlend(      HDC hdcDest,      int xoriginDest,      int yoriginDest,      int wDest,      int hDest,      HDC hdcSrc,      int xoriginSrc,      int yoriginSrc,      int wSrc,      int hSrc,      BLENDFUNCTION ftn);

__declspec(dllimport) BOOL __stdcall TransparentBlt(     HDC hdcDest,     int xoriginDest,      int yoriginDest,      int wDest,      int hDest,      HDC hdcSrc,
                                                int xoriginSrc,      int yoriginSrc,      int wSrc,      int hSrc,      UINT crTransparent);










__declspec(dllimport)
BOOL
__stdcall
GradientFill(
         HDC hdc,
           PTRIVERTEX pVertex,
         ULONG nVertex,
         PVOID pMesh,
         ULONG nMesh,
         ULONG ulMode
    );

#line 3670 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




__declspec(dllimport) BOOL  __stdcall PlayMetaFileRecord(       HDC hdc,
                                                   LPHANDLETABLE lpHandleTable,
                                                 LPMETARECORD lpMR,
                                                 UINT noObjs);

typedef int (__stdcall* MFENUMPROC)(      HDC hdc,        HANDLETABLE * lpht,      METARECORD * lpMR,      int nObj,        LPARAM param);
__declspec(dllimport) BOOL	__stdcall EnumMetaFile(      HDC hdc,      HMETAFILE hmf,      MFENUMPROC proc,        LPARAM param);

typedef int (__stdcall* ENHMFENUMPROC)(     HDC hdc,        HANDLETABLE * lpht,      const ENHMETARECORD * lpmr,      int hHandles,        LPARAM data);



__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile(      HDC hdc);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA(      HENHMETAFILE hEnh,        LPCSTR lpFileName);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW(      HENHMETAFILE hEnh,        LPCWSTR lpFileName);




#line 3694 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileA(        HDC hdc,        LPCSTR lpFilename,        const RECT *lprc,        LPCSTR lpDesc);
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileW(        HDC hdc,        LPCWSTR lpFilename,        const RECT *lprc,        LPCWSTR lpDesc);




#line 3701 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall DeleteEnhMetaFile(      HENHMETAFILE hmf);
__declspec(dllimport) BOOL  __stdcall EnumEnhMetaFile(        HDC hdc,      HENHMETAFILE hmf,      ENHMFENUMPROC proc,
                                               LPVOID param,        const RECT * lpRect);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileA(      LPCSTR lpName);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileW(      LPCWSTR lpName);




#line 3711 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) UINT	__stdcall GetEnhMetaFileBits(       HENHMETAFILE hEMF,
                                                 UINT nSize,
                                                   LPBYTE lpData);
__declspec(dllimport) UINT	__stdcall GetEnhMetaFileDescriptionA(       HENHMETAFILE hemf,
                                                         UINT cchBuffer,
                                                           LPSTR lpDescription);
__declspec(dllimport) UINT	__stdcall GetEnhMetaFileDescriptionW(       HENHMETAFILE hemf,
                                                         UINT cchBuffer,
                                                           LPWSTR lpDescription);




#line 3725 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) UINT	__stdcall GetEnhMetaFileHeader(         HENHMETAFILE hemf,
                                                     UINT nSize,
                                                       LPENHMETAHEADER lpEnhMetaHeader);
__declspec(dllimport) UINT	__stdcall GetEnhMetaFilePaletteEntries(     HENHMETAFILE hemf,
                                                         UINT nNumEntries,
                                                           LPPALETTEENTRY lpPaletteEntries);

__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePixelFormat(        HENHMETAFILE hemf,
                                                         UINT cbBuffer,
                                                           PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) UINT	__stdcall GetWinMetaFileBits(       HENHMETAFILE hemf,
                                                 UINT cbData16,
                                                   LPBYTE pData16,
                                                 INT iMapMode,
                                                 HDC hdcRef);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFile(      HDC hdc,      HENHMETAFILE hmf,      const RECT * lprect);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFileRecord(        HDC hdc,
                                                       LPHANDLETABLE pht,
                                                     const ENHMETARECORD *pmr,
                                                     UINT cht);

__declspec(dllimport) HENHMETAFILE  __stdcall SetEnhMetaFileBits(       UINT nSize,
                                                           const BYTE * pb);

__declspec(dllimport) HENHMETAFILE  __stdcall SetWinMetaFileBits(       UINT nSize,
                                                           const BYTE *lpMeta16Data,
                                                           HDC hdcRef,
                                                           const METAFILEPICT *lpMFP);
__declspec(dllimport) BOOL  __stdcall GdiComment(     HDC hdc,      UINT nSize,        const BYTE *lpData);

#line 3756 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



__declspec(dllimport) BOOL __stdcall GetTextMetricsA(      HDC hdc,      LPTEXTMETRICA lptm);
__declspec(dllimport) BOOL __stdcall GetTextMetricsW(      HDC hdc,      LPTEXTMETRICW lptm);




#line 3766 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



















#line 3786 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

#line 3788 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



typedef struct tagDIBSECTION {
    BITMAP		 dsBm;
    BITMAPINFOHEADER    dsBmih;
    DWORD               dsBitfields[3];
    HANDLE              dshSection;
    DWORD               dsOffset;
} DIBSECTION,  *LPDIBSECTION, *PDIBSECTION;


__declspec(dllimport) BOOL __stdcall AngleArc(      HDC hdc,      int x,      int y,      DWORD r,      FLOAT StartAngle,      FLOAT SweepAngle);
__declspec(dllimport) BOOL __stdcall PolyPolyline(     HDC hdc,      const POINT *apt,        const DWORD *asz,      DWORD csz);
__declspec(dllimport) BOOL __stdcall GetWorldTransform(      HDC hdc,      LPXFORM lpxf);
__declspec(dllimport) BOOL __stdcall SetWorldTransform(      HDC hdc,      const XFORM * lpxf);
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform(      HDC hdc,        const XFORM * lpxf,      DWORD mode);
__declspec(dllimport) BOOL __stdcall CombineTransform(      LPXFORM lpxfOut,      const XFORM *lpxf1,      const XFORM *lpxf2);
__declspec(dllimport) HBITMAP __stdcall CreateDIBSection(       HDC hdc,      const BITMAPINFO *lpbmi,      UINT usage,                 void **ppvBits,        HANDLE hSection,      DWORD offset);
__declspec(dllimport) UINT __stdcall GetDIBColorTable(      HDC  hdc,
                                             UINT iStart,
                                             UINT cEntries,
                                             RGBQUAD *prgbq);
__declspec(dllimport) UINT __stdcall SetDIBColorTable(      HDC  hdc,
                                             UINT iStart,
                                             UINT cEntries,
                                               const RGBQUAD *prgbq);




































typedef struct  tagCOLORADJUSTMENT {
    WORD   caSize;
    WORD   caFlags;
    WORD   caIlluminantIndex;
    WORD   caRedGamma;
    WORD   caGreenGamma;
    WORD   caBlueGamma;
    WORD   caReferenceBlack;
    WORD   caReferenceWhite;
    SHORT  caContrast;
    SHORT  caBrightness;
    SHORT  caColorfulness;
    SHORT  caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT,  *LPCOLORADJUSTMENT;

__declspec(dllimport) BOOL __stdcall SetColorAdjustment(      HDC hdc,      const COLORADJUSTMENT *lpca);
__declspec(dllimport) BOOL __stdcall GetColorAdjustment(      HDC hdc,      LPCOLORADJUSTMENT lpca);
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette(        HDC hdc);


typedef BOOL (__stdcall* ABORTPROC)(      HDC,      int);


#line 3875 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

typedef struct _DOCINFOA {
    int     cbSize;
    LPCSTR   lpszDocName;
    LPCSTR   lpszOutput;

    LPCSTR   lpszDatatype;
    DWORD    fwType;
#line 3884 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int     cbSize;
    LPCWSTR  lpszDocName;
    LPCWSTR  lpszOutput;

    LPCWSTR  lpszDatatype;
    DWORD    fwType;
#line 3893 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
} DOCINFOW, *LPDOCINFOW;




typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;
#line 3901 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




#line 3906 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) int __stdcall StartDocA(     HDC hdc,      const DOCINFOA *lpdi);
__declspec(dllimport) int __stdcall StartDocW(     HDC hdc,      const DOCINFOW *lpdi);




#line 3914 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) int __stdcall EndDoc(     HDC hdc);
__declspec(dllimport) int __stdcall StartPage(     HDC hdc);
__declspec(dllimport) int __stdcall EndPage(     HDC hdc);
__declspec(dllimport) int __stdcall AbortDoc(     HDC hdc);
__declspec(dllimport) int __stdcall SetAbortProc(     HDC hdc,      ABORTPROC proc);

__declspec(dllimport) BOOL __stdcall AbortPath(     HDC hdc);
__declspec(dllimport) BOOL __stdcall ArcTo(     HDC hdc,      int left,      int top,      int right,      int bottom,      int xr1,      int yr1,      int xr2,      int yr2);
__declspec(dllimport) BOOL __stdcall BeginPath(     HDC hdc);
__declspec(dllimport) BOOL __stdcall CloseFigure(     HDC hdc);
__declspec(dllimport) BOOL __stdcall EndPath(     HDC hdc);
__declspec(dllimport) BOOL __stdcall FillPath(     HDC hdc);
__declspec(dllimport) BOOL __stdcall FlattenPath(     HDC hdc);
__declspec(dllimport) int  __stdcall GetPath(     HDC hdc,      LPPOINT apt,      LPBYTE aj, int cpt);
__declspec(dllimport) HRGN __stdcall PathToRegion(     HDC hdc);
__declspec(dllimport) BOOL __stdcall PolyDraw(     HDC hdc,        const POINT * apt,        const BYTE * aj,      int cpt);
__declspec(dllimport) BOOL __stdcall SelectClipPath(     HDC hdc,      int mode);
__declspec(dllimport) int  __stdcall SetArcDirection(     HDC hdc,      int dir);
__declspec(dllimport) BOOL __stdcall SetMiterLimit(     HDC hdc,      FLOAT limit,        PFLOAT old);
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath(     HDC hdc);
__declspec(dllimport) BOOL __stdcall StrokePath(     HDC hdc);
__declspec(dllimport) BOOL __stdcall WidenPath(     HDC hdc);
__declspec(dllimport) HPEN __stdcall ExtCreatePen(      DWORD iPenStyle,
                                         DWORD cWidth,
                                         const LOGBRUSH *plbrush,
                                         DWORD cStyle,
                                             const DWORD *pstyle);
__declspec(dllimport) BOOL __stdcall GetMiterLimit(     HDC hdc,      PFLOAT plimit);
__declspec(dllimport) int  __stdcall GetArcDirection(     HDC hdc);

__declspec(dllimport) int   __stdcall GetObjectA(     HANDLE h,      int c,        LPVOID pv);
__declspec(dllimport) int   __stdcall GetObjectW(     HANDLE h,      int c,        LPVOID pv);




#line 3951 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




















#line 3972 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


__declspec(dllimport) BOOL  __stdcall MoveToEx(      HDC hdc,      int x,      int y,        LPPOINT lppt);
__declspec(dllimport) BOOL  __stdcall TextOutA(      HDC hdc,      int x,      int y,        LPCSTR lpString,      int c);
__declspec(dllimport) BOOL  __stdcall TextOutW(      HDC hdc,      int x,      int y,        LPCWSTR lpString,      int c);




#line 3982 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) BOOL	__stdcall ExtTextOutA(      HDC hdc,      int x,      int y,      UINT options,        const RECT * lprect,        LPCSTR lpString,      UINT c,          const INT * lpDx);
__declspec(dllimport) BOOL	__stdcall ExtTextOutW(      HDC hdc,      int x,      int y,      UINT options,        const RECT * lprect,        LPCWSTR lpString,      UINT c,          const INT * lpDx);




#line 3989 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall PolyTextOutA(     HDC hdc,        const POLYTEXTA * ppt,      int nstrings);
__declspec(dllimport) BOOL  __stdcall PolyTextOutW(     HDC hdc,        const POLYTEXTW * ppt,      int nstrings);




#line 3996 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) HRGN  __stdcall CreatePolygonRgn(           const POINT *pptl,
                                                 int cPoint,
                                                 int iMode);
__declspec(dllimport) BOOL  __stdcall DPtoLP(      HDC hdc,        LPPOINT lppt,      int c);
__declspec(dllimport) BOOL  __stdcall LPtoDP(      HDC hdc,        LPPOINT lppt,      int c);
__declspec(dllimport) BOOL  __stdcall Polygon(     HDC hdc,        const POINT *apt,      int cpt);
__declspec(dllimport) BOOL  __stdcall Polyline(     HDC hdc,        const POINT *apt,      int cpt);

__declspec(dllimport) BOOL  __stdcall PolyBezier(     HDC hdc,        const POINT * apt,      DWORD cpt);
__declspec(dllimport) BOOL  __stdcall PolyBezierTo(     HDC hdc,        const POINT * apt,      DWORD cpt);
__declspec(dllimport) BOOL  __stdcall PolylineTo(     HDC hdc,        const POINT * apt,      DWORD cpt);

__declspec(dllimport) BOOL  __stdcall SetViewportExtEx(      HDC hdc,      int x,      int y,        LPSIZE lpsz);
__declspec(dllimport) BOOL  __stdcall SetViewportOrgEx(      HDC hdc,      int x,      int y,        LPPOINT lppt);
__declspec(dllimport) BOOL  __stdcall SetWindowExtEx(      HDC hdc,      int x,      int y,        LPSIZE lpsz);
__declspec(dllimport) BOOL  __stdcall SetWindowOrgEx(      HDC hdc,      int x,      int y,        LPPOINT lppt);

__declspec(dllimport) BOOL  __stdcall OffsetViewportOrgEx(      HDC hdc,      int x,      int y,        LPPOINT lppt);
__declspec(dllimport) BOOL  __stdcall OffsetWindowOrgEx(      HDC hdc,      int x,      int y,        LPPOINT lppt);
__declspec(dllimport) BOOL  __stdcall ScaleViewportExtEx(      HDC hdc,      int xn,      int dx,      int yn,      int yd,        LPSIZE lpsz);
__declspec(dllimport) BOOL  __stdcall ScaleWindowExtEx(      HDC hdc,      int xn,      int xd,      int yn,      int yd,        LPSIZE lpsz);
__declspec(dllimport) BOOL  __stdcall SetBitmapDimensionEx(      HBITMAP hbm,      int w,      int h,        LPSIZE lpsz);
__declspec(dllimport) BOOL  __stdcall SetBrushOrgEx(      HDC hdc,      int x,      int y,        LPPOINT lppt);

__declspec(dllimport) int   __stdcall GetTextFaceA(      HDC hdc,      int c,           LPSTR lpName);
__declspec(dllimport) int   __stdcall GetTextFaceW(      HDC hdc,      int c,           LPWSTR lpName);




#line 4028 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int  iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

__declspec(dllimport) DWORD __stdcall GetKerningPairsA(         HDC hdc, 
                                                 DWORD nPairs, 
                                                     LPKERNINGPAIR   lpKernPair);
__declspec(dllimport) DWORD __stdcall GetKerningPairsW(         HDC hdc, 
                                                 DWORD nPairs, 
                                                     LPKERNINGPAIR   lpKernPair);




#line 4048 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


__declspec(dllimport) BOOL  __stdcall GetDCOrgEx(      HDC hdc,      LPPOINT lppt);
__declspec(dllimport) BOOL  __stdcall FixBrushOrgEx(      HDC hdc,      int x,      int y,         LPPOINT ptl);
__declspec(dllimport) BOOL  __stdcall UnrealizeObject(      HGDIOBJ h);

__declspec(dllimport) BOOL  __stdcall GdiFlush();
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit(      DWORD dw);
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit();








typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);




#line 4072 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) int         __stdcall SetICMMode(      HDC hdc,      int mode);
__declspec(dllimport) BOOL        __stdcall CheckColorsInGamut(         HDC hdc,
                                                            LPVOID lpRGBTriple,
                                                         LPVOID dlpBuffer,
                                                         DWORD nCount);

__declspec(dllimport) HCOLORSPACE __stdcall GetColorSpace(      HDC hdc);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceA(      HCOLORSPACE hColorSpace, 
                                                     LPLOGCOLORSPACEA lpBuffer, 
                                                     DWORD nSize);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceW(      HCOLORSPACE hColorSpace, 
                                                     LPLOGCOLORSPACEW lpBuffer, 
                                                     DWORD nSize);




#line 4091 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceA(      LPLOGCOLORSPACEA lplcs);
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceW(      LPLOGCOLORSPACEW lplcs);




#line 4099 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) HCOLORSPACE __stdcall SetColorSpace(      HDC hdc,      HCOLORSPACE hcs);
__declspec(dllimport) BOOL        __stdcall DeleteColorSpace(      HCOLORSPACE hcs);
__declspec(dllimport) BOOL	      __stdcall GetICMProfileA(         HDC hdc, 
                                                     LPDWORD pBufSize,
                                                       LPSTR pszFilename);
__declspec(dllimport) BOOL	      __stdcall GetICMProfileW(         HDC hdc, 
                                                     LPDWORD pBufSize,
                                                       LPWSTR pszFilename);




#line 4112 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

__declspec(dllimport) BOOL        __stdcall SetICMProfileA(      HDC hdc,      LPSTR lpFileName);
__declspec(dllimport) BOOL        __stdcall SetICMProfileW(      HDC hdc,      LPWSTR lpFileName);




#line 4120 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) BOOL        __stdcall GetDeviceGammaRamp(      HDC hdc,      LPVOID lpRamp);
__declspec(dllimport) BOOL        __stdcall SetDeviceGammaRamp(      HDC hdc,         LPVOID lpRamp);
__declspec(dllimport) BOOL        __stdcall ColorMatchToTarget(      HDC hdc,      HDC hdcTarget,      DWORD action);
__declspec(dllimport) int         __stdcall EnumICMProfilesA(      HDC hdc,      ICMENUMPROCA proc,        LPARAM param);
__declspec(dllimport) int         __stdcall EnumICMProfilesW(      HDC hdc,      ICMENUMPROCW proc,        LPARAM param);




#line 4130 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) BOOL	      __stdcall UpdateICMRegKeyA(   DWORD reserved,      LPSTR lpszCMID,      LPSTR lpszFileName,      UINT command);
__declspec(dllimport) BOOL	      __stdcall UpdateICMRegKeyW(   DWORD reserved,      LPWSTR lpszCMID,      LPWSTR lpszFileName,      UINT command);




#line 4137 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
#line 4138 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


__declspec(dllimport) BOOL        __stdcall ColorCorrectPalette(      HDC hdc,      HPALETTE hPal,      DWORD deFirst,      DWORD num);
#line 4142 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"









#line 4152 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




















































































































#line 4269 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




















#line 4290 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"









#line 4300 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



typedef struct tagEMR
{
    DWORD   iType;              
    DWORD   nSize;              
                                
} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL  ptlReference;
    DWORD   nChars;
    DWORD   offString;          
    DWORD   fOptions;
    RECTL   rcl;
    DWORD   offDx;              
                                
} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR     emr;
} EMRABORTPATH,      *PEMRABORTPATH,
  EMRBEGINPATH,      *PEMRBEGINPATH,
  EMRENDPATH,        *PEMRENDPATH,
  EMRCLOSEFIGURE,    *PEMRCLOSEFIGURE,
  EMRFLATTENPATH,    *PEMRFLATTENPATH,
  EMRWIDENPATH,      *PEMRWIDENPATH,
  EMRSETMETARGN,     *PEMRSETMETARGN,
  EMRSAVEDC,         *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR     emr;
    DWORD   iMode;
} EMRSELECTCLIPPATH,    *PEMRSELECTCLIPPATH,
  EMRSETBKMODE,         *PEMRSETBKMODE,
  EMRSETMAPMODE,        *PEMRSETMAPMODE,

  EMRSETLAYOUT,         *PEMRSETLAYOUT,
#line 4348 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
  EMRSETPOLYFILLMODE,   *PEMRSETPOLYFILLMODE,
  EMRSETROP2,           *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE,        *PEMRSETICMMODE,
  EMRSETTEXTALIGN,      *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR     emr;
    FLOAT   eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR     emr;
    LONG    iRelative;          
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR     emr;
    DWORD   iArcDirection;      
                                
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR     emr;
    DWORD   dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR     emr;
    COLORREF crColor;
} EMRSETBKCOLOR,   *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR     emr;
    DWORD   ihObject;           
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;

typedef struct tagEMRSELECTPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   iStart;
    DWORD   cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR     emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR     emr;
    DWORD   nPalEntries;        
    DWORD   offPalEntries;      
    DWORD   nSizeLast;          
                                
                                
} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR     emr;
    POINTL  ptl;
} EMRLINETO,   *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR     emr;
    POINTL  ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR     emr;
    RECTL   rclBounds;          
} EMRFILLPATH,          *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH,        *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR     emr;
    RECTL   rclClip;
} EMREXCLUDECLIPRECT,   *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR     emr;
    POINTL  ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX,   *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX,    *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR     emr;
    SIZEL   szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX,   *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR     emr;
    LONG    xNum;
    LONG    xDenom;
    LONG    yNum;
    LONG    yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX,   *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
    DWORD   iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR     emr;
    POINTL  ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR     emr;
    POINTL  ptlStart;
    COLORREF crColor;
    DWORD   iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR     emr;
    RECTL   rclBox;             
} EMRELLIPSE,  *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;


typedef struct tagEMRROUNDRECT
{
    EMR     emr;
    RECTL   rclBox;             
    SIZEL   szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR     emr;
    RECTL   rclBox;             
    POINTL  ptlStart;
    POINTL  ptlEnd;
} EMRARC,   *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE,   *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR     emr;
    POINTL  ptlCenter;
    DWORD   nRadius;
    FLOAT   eStartAngle;
    FLOAT   eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;
    POINTL  aptl[1];
} EMRPOLYLINE,     *PEMRPOLYLINE,
  EMRPOLYBEZIER,   *PEMRPOLYBEZIER,
  EMRPOLYGON,      *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO,   *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;
    POINTS  apts[1];
} EMRPOLYLINE16,     *PEMRPOLYLINE16,
  EMRPOLYBEZIER16,   *PEMRPOLYBEZIER16,
  EMRPOLYGON16,      *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16,   *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;               
    POINTL  aptl[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;               
    POINTS  apts[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cptl;               
    DWORD   aPolyCounts[1];     
    POINTL  aptl[1];            
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON,  *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cpts;               
    DWORD   aPolyCounts[1];     
    POINTS  apts[1];            
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16,  *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    BYTE    RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN,  *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    BYTE    RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    SIZEL   szlStroke;
    BYTE    RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR     emr;
    DWORD   cbRgnData;          
    DWORD   iMode;
    BYTE    RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    EMRTEXT emrtext;            
                                
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    LONG    cStrings;
    EMRTEXT aemrtext[1];        
                                
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    POINTL  aptlDest[3];
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   iStartScan;
    DWORD   cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   dwRop;
    LONG    cxDest;
    LONG    cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR     emr;
    DWORD   ihFont;             
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    LOGPALETTE lgpl;            
                                
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct tagEMRCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    LOGPEN  lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
    EXTLOGPEN elp;              
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR        emr;
    DWORD      ihBrush;          
    LOGBRUSH32 lb;               
                                 
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   cbData;             
    DWORD   offData;            
                                
} EMRFORMAT, *PEMRFORMAT;



typedef struct tagEMRGLSRECORD
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR     emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;

typedef struct tagEMRCREATECOLORSPACE
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEA  lcs;        
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct tagEMRSETCOLORSPACE
{
    EMR     emr;
    DWORD   ihCS;               
} EMRSETCOLORSPACE,    *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;

#line 4931 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"



typedef struct tagEMREXTESCAPE
{
    EMR     emr;
    INT     iEscape;            
    INT     cbEscData;          
    BYTE    EscData[1];         
} EMREXTESCAPE,  *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;

typedef struct tagEMRNAMEDESCAPE
{
    EMR     emr;
    INT     iEscape;            
    INT     cbDriver;           
    INT     cbEscData;          
    BYTE    EscData[1];         
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;



typedef struct tagEMRSETICMPROFILE
{
    EMR     emr;
    DWORD   dwFlags;            
    DWORD   cbName;             
    DWORD   cbData;             
    BYTE    Data[1];            
} EMRSETICMPROFILE,  *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;



typedef struct tagEMRCREATECOLORSPACEW
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEW  lcs;        
    DWORD           dwFlags;    
    DWORD           cbData;     
    BYTE            Data[1];    
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;



typedef struct tagCOLORMATCHTOTARGET
{
    EMR     emr;
    DWORD   dwAction;           
    DWORD   dwFlags;            
    DWORD   cbName;             
    DWORD   cbData;             
    BYTE    Data[1];            
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;

typedef struct tagCOLORCORRECTPALETTE
{
    EMR     emr;
    DWORD   ihPalette;          
    DWORD   nFirstEntry;        
    DWORD   nPalEntries;        
    DWORD   nReserved;          
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;

typedef struct tagEMRALPHABLEND
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

typedef struct tagEMRGRADIENTFILL
{
    EMR       emr;
    RECTL     rclBounds;          
    DWORD     nVer;
    DWORD     nTri;
    ULONG     ulMode;
    TRIVERTEX Ver[1];
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;

typedef struct tagEMRTRANSPARENTBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;


#line 5056 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"










#line 5067 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"




__declspec(dllimport) BOOL  __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC);
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int);
__declspec(dllimport) BOOL  __stdcall wglDeleteContext(HGLRC);
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(void);
__declspec(dllimport) HDC   __stdcall wglGetCurrentDC(void);
__declspec(dllimport) PROC  __stdcall wglGetProcAddress(LPCSTR);
__declspec(dllimport) BOOL  __stdcall wglMakeCurrent(HDC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglShareLists(HGLRC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);




#line 5087 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT   x;
    FLOAT   y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT       gmfBlackBoxX;
    FLOAT       gmfBlackBoxY;
    POINTFLOAT  gmfptGlyphOrigin;
    FLOAT       gmfCellIncX;
    FLOAT       gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT,  *LPGLYPHMETRICSFLOAT;



__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);




#line 5113 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


typedef struct tagLAYERPLANEDESCRIPTOR { 
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerPlane;
    BYTE  bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR,  *LPLAYERPLANEDESCRIPTOR;

















































__declspec(dllimport) BOOL  __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
__declspec(dllimport) int   __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 const COLORREF *);
__declspec(dllimport) int   __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
__declspec(dllimport) BOOL  __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
__declspec(dllimport) BOOL  __stdcall wglSwapLayerBuffers(HDC, UINT);



typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP,  *LPWGLSWAP;



__declspec(dllimport) DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *);

#line 5212 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"

#line 5214 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"






#line 5221 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wingdi.h"


#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"























#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

















typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;



typedef MENUTEMPLATEA MENUTEMPLATE;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;



typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);



typedef INT_PTR (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);
typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





















#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






typedef PROPENUMPROCA        PROPENUMPROC;
typedef PROPENUMPROCEXA      PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA   EDITWORDBREAKPROC;
#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA   WINSTAENUMPROCA;
typedef NAMEENUMPROCA   DESKTOPENUMPROCA;
typedef NAMEENUMPROCW   WINSTAENUMPROCW;
typedef NAMEENUMPROCW   DESKTOPENUMPROCW;












#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







typedef WINSTAENUMPROCA     WINSTAENUMPROC;
typedef DESKTOPENUMPROCA    DESKTOPENUMPROC;

#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"








#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




























#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"















#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
wvsprintfA(
         LPSTR,
          LPCSTR,
         va_list arglist);
__declspec(dllimport)
int
__stdcall
wvsprintfW(
         LPWSTR,
          LPCWSTR,
         va_list arglist);




#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__cdecl
wsprintfA(
         LPSTR,
          LPCSTR,
    ...);
__declspec(dllimport)
int
__cdecl
wsprintfW(
         LPWSTR,
          LPCWSTR,
    ...);




#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




































#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









































#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"















#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


























#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"








































































































































































#line 535 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









































#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





































#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


















#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





#line 647 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 652 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 662 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
































typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;



typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;




typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
#line 714 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




typedef struct tagCBTACTIVATESTRUCT
{
    BOOL    fMouse;
    HWND    hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;


























#line 750 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



























#line 778 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 787 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"














































































#line 866 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

typedef struct
{
    HWND    hwnd;
    RECT    rc;
} SHELLHOOKINFO, *LPSHELLHOOKINFO;




typedef struct tagEVENTMSG {
    UINT    message;
    UINT    paramL;
    UINT    paramH;
    DWORD    time;
    HWND     hwnd;
} EVENTMSG, *PEVENTMSGMSG,  *NPEVENTMSGMSG,  *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG,  *NPEVENTMSG,  *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPSTRUCT, *PCWPSTRUCT,  *NPCWPSTRUCT,  *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT,  *NPCWPRETSTRUCT,  *LPCWPRETSTRUCT;

#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




































#line 946 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




typedef struct tagDEBUGHOOKINFO
{
    DWORD   idThread;
    DWORD   idThreadInstaller;
    LPARAM  lParam;
    WPARAM  wParam;
    int     code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO,  *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT   pt;
    HWND    hwnd;
    UINT    wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT,  *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;














#line 983 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





typedef struct tagHARDWAREHOOKSTRUCT {
    HWND    hwnd;
    UINT    message;
    WPARAM  wParam;
    LPARAM  lParam;
} HARDWAREHOOKSTRUCT,  *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
#line 995 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 996 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"














#line 1011 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 1016 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









#line 1026 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutA(
         LPCSTR pwszKLID,
         UINT Flags);
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutW(
         LPCWSTR pwszKLID,
         UINT Flags);




#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



__declspec(dllimport)
HKL
__stdcall
ActivateKeyboardLayout(
         HKL hkl,
         UINT Flags);







#line 1066 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
int
__stdcall
ToUnicodeEx(
         UINT wVirtKey,
         UINT wScanCode,
           const BYTE *lpKeyState,
         LPWSTR pwszBuff,
         int cchBuff,
         UINT wFlags,
           HKL dwhkl);
#line 1080 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnloadKeyboardLayout(
         HKL hkl);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameA(
         LPSTR pwszKLID);
__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameW(
         LPWSTR pwszKLID);




#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
int
__stdcall
GetKeyboardLayoutList(
         int nBuff,
             HKL  *lpList);

__declspec(dllimport)
HKL
__stdcall
GetKeyboardLayout(
         DWORD idThread);

#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



typedef struct tagMOUSEMOVEPOINT {
    int   x;
    int   y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;







__declspec(dllimport)
int
__stdcall
GetMouseMovePointsEx(
         UINT cbSize,
         LPMOUSEMOVEPOINT lppt,
         LPMOUSEMOVEPOINT lpptBuf,
         int nBufPoints,
         DWORD resolution);

#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"























__declspec(dllimport)
HDESK
__stdcall
CreateDesktopA(
         LPCSTR lpszDesktop,
      LPCSTR lpszDevice,
      LPDEVMODEA pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
           LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopW(
         LPCWSTR lpszDesktop,
      LPCWSTR lpszDevice,
      LPDEVMODEW pDevmode,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
           LPSECURITY_ATTRIBUTES lpsa);




#line 1193 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 1195 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 1196 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
OpenDesktopA(
         LPCSTR lpszDesktop,
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopW(
         LPCWSTR lpszDesktop,
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);




#line 1218 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
OpenInputDesktop(
         DWORD dwFlags,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);


__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsA(
           HWINSTA hwinsta,
         DESKTOPENUMPROCA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsW(
           HWINSTA hwinsta,
         DESKTOPENUMPROCW lpEnumFunc,
         LPARAM lParam);




#line 1247 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumDesktopWindows(
           HDESK hDesktop,
         WNDENUMPROC lpfn,
         LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
SwitchDesktop(
         HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
SetThreadDesktop(
          HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
CloseDesktop(
         HDESK hDesktop);

__declspec(dllimport)
HDESK
__stdcall
GetThreadDesktop(
         DWORD dwThreadId);

#line 1281 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





























__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationA(
           LPCSTR lpwinsta,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
           LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationW(
           LPCWSTR lpwinsta,
         DWORD dwFlags,
         ACCESS_MASK dwDesiredAccess,
           LPSECURITY_ATTRIBUTES lpsa);




#line 1331 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationA(
         LPCSTR lpszWinSta,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationW(
         LPCWSTR lpszWinSta,
         BOOL fInherit,
         ACCESS_MASK dwDesiredAccess);




#line 1351 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsA(
         WINSTAENUMPROCA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsW(
         WINSTAENUMPROCW lpEnumFunc,
         LPARAM lParam);




#line 1369 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CloseWindowStation(
         HWINSTA hWinSta);

__declspec(dllimport)
BOOL
__stdcall
SetProcessWindowStation(
         HWINSTA hWinSta);

__declspec(dllimport)
HWINSTA
__stdcall
GetProcessWindowStation(
    void);
#line 1388 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
SetUserObjectSecurity(
         HANDLE hObj,
         PSECURITY_INFORMATION pSIRequested,
         PSECURITY_DESCRIPTOR pSID);

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectSecurity(
         HANDLE hObj,
         PSECURITY_INFORMATION pSIRequested,
           PSECURITY_DESCRIPTOR pSID,
         DWORD nLength,
         LPDWORD lpnLengthNeeded);






typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationA(
         HANDLE hObj,
         int nIndex,
           PVOID pvInfo,
         DWORD nLength,
           LPDWORD lpnLengthNeeded);
__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationW(
         HANDLE hObj,
         int nIndex,
           PVOID pvInfo,
         DWORD nLength,
           LPDWORD lpnLengthNeeded);




#line 1443 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationA(
         HANDLE hObj,
         int nIndex,
           PVOID pvInfo,
         DWORD nLength);
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationW(
         HANDLE hObj,
         int nIndex,
           PVOID pvInfo,
         DWORD nLength);




#line 1465 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 1467 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


typedef struct tagWNDCLASSEXA {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA,  *NPWNDCLASSEXA,  *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW,  *NPWNDCLASSEXW,  *LPWNDCLASSEXW;






typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;
#line 1512 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 1513 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

typedef struct tagWNDCLASSA {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
} WNDCLASSA, *PWNDCLASSA,  *NPWNDCLASSA,  *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
} WNDCLASSW, *PWNDCLASSW,  *NPWNDCLASSW,  *LPWNDCLASSW;






typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;
#line 1549 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsHungAppWindow(
         HWND hwnd);



__declspec(dllimport)
void
__stdcall
DisableProcessWindowsGhosting(
    void);
#line 1564 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







typedef struct tagMSG {
    HWND        hwnd;
    UINT        message;
    WPARAM      wParam;
    LPARAM      lParam;
    DWORD       time;
    POINT       pt;



} MSG, *PMSG,  *NPMSG,  *LPMSG;











#line 1594 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"













































#line 1640 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





















#line 1662 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



































#line 1698 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







#line 1706 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
















typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;



















#line 1749 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 1750 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






















typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
    PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;


typedef struct tagMDINEXTMENU
{
    HMENU   hmenuIn;
    HMENU   hmenuNext;
    HWND    hwndNext;
} MDINEXTMENU, * PMDINEXTMENU,  * LPMDINEXTMENU;
#line 1786 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






















#line 1809 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"










#line 1820 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

















#line 1838 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 1843 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"














#line 1858 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 1860 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






#line 1867 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









































#line 1909 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 1910 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 1912 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 1913 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"























#line 1937 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 1942 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 1945 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 1947 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 1949 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









#line 1959 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"










#line 1970 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"










#line 1981 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



























#line 2009 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 2011 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 2015 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



























#line 2043 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 2046 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 2050 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 2055 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 2059 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






#line 2066 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
























#line 2091 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 2095 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 2099 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









#line 2109 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







#line 2117 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




















#line 2138 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




































#line 2175 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"










#line 2186 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 2187 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
















#line 2204 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageA(
         LPCSTR lpString);
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageW(
         LPCWSTR lpString);




#line 2221 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"























typedef struct tagWINDOWPOS {
    HWND    hwnd;
    HWND    hwndInsertAfter;
    int     x;
    int     y;
    int     cx;
    int     cy;
    UINT    flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT       rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;




























#line 2290 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 2292 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



































#line 2328 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 2331 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


































































#line 2398 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

















#line 2416 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 2421 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





#line 2427 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 2431 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 2434 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




















#line 2455 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 2459 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"























































__declspec(dllimport)
BOOL
__stdcall
DrawEdge(
         HDC hdc,
         LPRECT qrc,
         UINT edge,
         UINT grfFlags);









#line 2532 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

































#line 2566 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
DrawFrameControl(
         HDC,
         LPRECT,
         UINT,
         UINT);










#line 2590 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 2593 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DrawCaption(
         HWND hwnd,
         HDC hdc,
         const RECT * lprect,
         UINT flags);





__declspec(dllimport)
BOOL
__stdcall
DrawAnimatedRects(
           HWND hwnd,
         int idAni,
         const RECT *lprcFrom,
         const RECT *lprcTo);

#line 2617 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
























#line 2642 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 2645 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







#line 2653 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




















#line 2674 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"










typedef struct tagACCEL {

    BYTE   fVirt;               
    WORD   key;
    WORD   cmd;




#line 2694 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC         hdc;
    BOOL        fErase;
    RECT        rcPaint;
    BOOL        fRestore;
    BOOL        fIncUpdate;
    BYTE        rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCSTR      lpszName;
    LPCSTR      lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCWSTR     lpszName;
    LPCWSTR     lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;




typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
#line 2740 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

typedef struct tagWINDOWPLACEMENT {
    UINT  length;
    UINT  flags;
    UINT  showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT  rcNormalPosition;



} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;





#line 2759 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


typedef struct tagNMHDR
{
    HWND      hwndFrom;
    UINT_PTR  idFrom;
    UINT      code;         
}   NMHDR;
typedef NMHDR  * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD   styleOld;
    DWORD   styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;
#line 2775 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"











#line 2787 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



















#line 2807 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






#line 2814 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 2815 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




typedef struct tagMEASUREITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    UINT       itemWidth;
    UINT       itemHeight;
    ULONG_PTR  itemData;
} MEASUREITEMSTRUCT,  *PMEASUREITEMSTRUCT,  *LPMEASUREITEMSTRUCT;





typedef struct tagDRAWITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    UINT        itemID;
    UINT        itemAction;
    UINT        itemState;
    HWND        hwndItem;
    HDC         hDC;
    RECT        rcItem;
    ULONG_PTR   itemData;
} DRAWITEMSTRUCT,  *PDRAWITEMSTRUCT,  *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    HWND       hwndItem;
    ULONG_PTR  itemData;
} DELETEITEMSTRUCT,  *PDELETEITEMSTRUCT,  *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    HWND        hwndItem;
    UINT        itemID1;
    ULONG_PTR   itemData1;
    UINT        itemID2;
    ULONG_PTR   itemData2;
    DWORD       dwLocaleId;
} COMPAREITEMSTRUCT,  *PCOMPAREITEMSTRUCT,  *LPCOMPAREITEMSTRUCT;







__declspec(dllimport)
BOOL
__stdcall
GetMessageA(
         LPMSG lpMsg,
           HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax);
__declspec(dllimport)
BOOL
__stdcall
GetMessageW(
         LPMSG lpMsg,
           HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax);




#line 2896 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
    






















#line 2920 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
TranslateMessage(
         const MSG *lpMsg);

__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageA(
         const MSG *lpMsg);
__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageW(
         const MSG *lpMsg);




#line 2943 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
    
















#line 2961 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetMessageQueue(
         int cMessagesMax);

__declspec(dllimport)
BOOL
__stdcall
PeekMessageA(
         LPMSG lpMsg,
           HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax,
         UINT wRemoveMsg);
__declspec(dllimport)
BOOL
__stdcall
PeekMessageW(
         LPMSG lpMsg,
           HWND hWnd,
         UINT wMsgFilterMin,
         UINT wMsgFilterMax,
         UINT wRemoveMsg);




#line 2991 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"













#line 3005 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 3008 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
RegisterHotKey(
           HWND hWnd,
         int id,
         UINT fsModifiers,
         UINT vk);

__declspec(dllimport)
BOOL
__stdcall
UnregisterHotKey(
           HWND hWnd,
         int id);























#line 3048 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"








#line 3057 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




__declspec(dllimport)
BOOL
__stdcall
ExitWindowsEx(
         UINT uFlags,
         DWORD dwReason);

__declspec(dllimport)
BOOL
__stdcall
SwapMouseButton(
         BOOL fSwap);

__declspec(dllimport)
DWORD
__stdcall
GetMessagePos(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageTime(
    void);

__declspec(dllimport)
LPARAM
__stdcall
GetMessageExtraInfo(
    void);







#line 3099 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
LPARAM
__stdcall
SetMessageExtraInfo(
         LPARAM lParam);
#line 3107 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
SendMessageA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);




#line 3129 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
    






















#line 3153 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         UINT fuFlags,
         UINT uTimeout,
           PDWORD_PTR lpdwResult);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         UINT fuFlags,
         UINT uTimeout,
           PDWORD_PTR lpdwResult);




#line 3183 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);




#line 3205 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         SENDASYNCPROC lpResultCallBack,
         ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam,
         SENDASYNCPROC lpResultCallBack,
         ULONG_PTR dwData);




#line 3231 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


































#line 3266 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



























#line 3294 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"











#line 3306 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




















#line 3327 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 3331 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 3334 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




typedef  PVOID           HDEVNOTIFY;
typedef  HDEVNOTIFY     *PHDEVNOTIFY;





#line 3346 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationA(
         HANDLE hRecipient,
         LPVOID NotificationFilter,
         DWORD Flags);
__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationW(
         HANDLE hRecipient,
         LPVOID NotificationFilter,
         DWORD Flags);




#line 3366 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnregisterDeviceNotification(
         HDEVNOTIFY Handle);

#line 3374 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
PostMessageA(
           HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostMessageW(
           HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);




#line 3397 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageA(
         DWORD idThread,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageW(
         DWORD idThread,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);




#line 3419 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









#line 3429 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"








#line 3438 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
AttachThreadInput(
         DWORD idAttach,
         DWORD idAttachTo,
         BOOL fAttach);


__declspec(dllimport)
BOOL
__stdcall
ReplyMessage(
         LRESULT lResult);

__declspec(dllimport)
BOOL
__stdcall
WaitMessage(
    void);


__declspec(dllimport)
DWORD
__stdcall
WaitForInputIdle(
         HANDLE hProcess,
         DWORD dwMilliseconds);

__declspec(dllimport)

LRESULT
__stdcall



#line 3476 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
DefWindowProcA(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 3489 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
DefWindowProcW(
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);




#line 3499 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
void
__stdcall
PostQuitMessage(
         int nExitCode);



__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcA(
         WNDPROC lpPrevWndFunc,
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcW(
         WNDPROC lpPrevWndFunc,
         HWND hWnd,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);




#line 3531 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



























#line 3559 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
InSendMessage(
    void);


__declspec(dllimport)
DWORD
__stdcall
InSendMessageEx(
      LPVOID lpReserved);









#line 3582 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetDoubleClickTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetDoubleClickTime(
         UINT);

__declspec(dllimport)
ATOM
__stdcall
RegisterClassA(
         const WNDCLASSA *lpWndClass);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassW(
         const WNDCLASSW *lpWndClass);




#line 3610 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnregisterClassA(
         LPCSTR lpClassName,
         HINSTANCE hInstance);
__declspec(dllimport)
BOOL
__stdcall
UnregisterClassW(
         LPCWSTR lpClassName,
         HINSTANCE hInstance);




#line 3628 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoA(
           HINSTANCE hInstance,
         LPCSTR lpClassName,
         LPWNDCLASSA lpWndClass);
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoW(
           HINSTANCE hInstance,
         LPCWSTR lpClassName,
         LPWNDCLASSW lpWndClass);




#line 3648 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
ATOM
__stdcall
RegisterClassExA(
         const WNDCLASSEXA *);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassExW(
         const WNDCLASSEXW *);




#line 3665 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExA(
           HINSTANCE hInstance,
         LPCSTR lpszClass,
         LPWNDCLASSEXA lpwcx);
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExW(
           HINSTANCE hInstance,
         LPCWSTR lpszClass,
         LPWNDCLASSEXW lpwcx);




#line 3685 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 3687 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"










#line 3698 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateWindowExA(
         DWORD dwExStyle,
           LPCSTR lpClassName,
           LPCSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
           HWND hWndParent,
           HMENU hMenu,
           HINSTANCE hInstance,
           LPVOID lpParam);
__declspec(dllimport)
HWND
__stdcall
CreateWindowExW(
         DWORD dwExStyle,
           LPCWSTR lpClassName,
           LPCWSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
           HWND hWndParent,
           HMENU hMenu,
           HINSTANCE hInstance,
           LPVOID lpParam);




#line 3736 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"













#line 3750 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsWindow(
           HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsMenu(
         HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
IsChild(
         HWND hWndParent,
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
DestroyWindow(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowWindow(
         HWND hWnd,
         int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
AnimateWindow(
         HWND hWnd,
         DWORD dwTime,
         DWORD dwFlags);
#line 3792 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





























































































#line 3886 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
ShowWindowAsync(
          HWND hWnd,
          int nCmdShow);
#line 3895 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
FlashWindow(
          HWND hWnd,
          BOOL bInvert);


typedef struct {
    UINT  cbSize;
    HWND  hwnd;
    DWORD dwFlags;
    UINT  uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;

__declspec(dllimport)
BOOL
__stdcall
FlashWindowEx(
         PFLASHWINFO pfwi);








#line 3926 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ShowOwnedPopups(
          HWND hWnd,
          BOOL fShow);

__declspec(dllimport)
BOOL
__stdcall
OpenIcon(
          HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
CloseWindow(
          HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
MoveWindow(
         HWND hWnd,
         int X,
         int Y,
         int nWidth,
         int nHeight,
         BOOL bRepaint);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPos(
         HWND hWnd,
           HWND hWndInsertAfter,
         int X,
         int Y,
         int cx,
         int cy,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
GetWindowPlacement(
         HWND hWnd,
         WINDOWPLACEMENT *lpwndpl);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPlacement(
         HWND hWnd,
         const WINDOWPLACEMENT *lpwndpl);




__declspec(dllimport)
HDWP
__stdcall
BeginDeferWindowPos(
         int nNumWindows);

__declspec(dllimport)
HDWP
__stdcall
DeferWindowPos(
         HDWP hWinPosInfo,
         HWND hWnd,
           HWND hWndInsertAfter,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
EndDeferWindowPos(
         HDWP hWinPosInfo);

#line 4012 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsWindowVisible(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsIconic(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
AnyPopup(
    void);

__declspec(dllimport)
BOOL
__stdcall
BringWindowToTop(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsZoomed(
         HWND hWnd);






















#line 4065 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"














#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack2.h"
#line 4080 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;
typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;



typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
#line 4100 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;



typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
#line 4107 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;



typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
#line 4127 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;



typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
#line 4134 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 4137 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateDialogParamA(
           HINSTANCE hInstance,
         LPCSTR lpTemplateName,
           HWND hWndParent,
           DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogParamW(
           HINSTANCE hInstance,
         LPCWSTR lpTemplateName,
           HWND hWndParent,
           DLGPROC lpDialogFunc,
         LPARAM dwInitParam);




#line 4161 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamA(
           HINSTANCE hInstance,
         LPCDLGTEMPLATEA lpTemplate,
           HWND hWndParent,
           DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamW(
           HINSTANCE hInstance,
         LPCDLGTEMPLATEW lpTemplate,
           HWND hWndParent,
           DLGPROC lpDialogFunc,
         LPARAM dwInitParam);




#line 4185 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









#line 4195 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









#line 4205 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamA(
           HINSTANCE hInstance,
         LPCSTR lpTemplateName,
           HWND hWndParent,
           DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamW(
           HINSTANCE hInstance,
         LPCWSTR lpTemplateName,
           HWND hWndParent,
           DLGPROC lpDialogFunc,
         LPARAM dwInitParam);




#line 4229 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamA(
           HINSTANCE hInstance,
         LPCDLGTEMPLATEA hDialogTemplate,
           HWND hWndParent,
           DLGPROC lpDialogFunc,
         LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamW(
           HINSTANCE hInstance,
         LPCDLGTEMPLATEW hDialogTemplate,
           HWND hWndParent,
           DLGPROC lpDialogFunc,
         LPARAM dwInitParam);




#line 4253 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









#line 4263 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









#line 4273 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EndDialog(
         HWND hDlg,
         INT_PTR nResult);

__declspec(dllimport)
HWND
__stdcall
GetDlgItem(
           HWND hDlg,
         int nIDDlgItem);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemInt(
         HWND hDlg,
         int nIDDlgItem,
         UINT uValue,
         BOOL bSigned);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemInt(
         HWND hDlg,
         int nIDDlgItem,
           BOOL *lpTranslated,
         BOOL bSigned);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextA(
         HWND hDlg,
         int nIDDlgItem,
         LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextW(
         HWND hDlg,
         int nIDDlgItem,
         LPCWSTR lpString);




#line 4325 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextA(
         HWND hDlg,
         int nIDDlgItem,
         LPSTR lpString,
         int cchMax);
__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextW(
         HWND hDlg,
         int nIDDlgItem,
         LPWSTR lpString,
         int cchMax);




#line 4347 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CheckDlgButton(
         HWND hDlg,
         int nIDButton,
         UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
CheckRadioButton(
         HWND hDlg,
         int nIDFirstButton,
         int nIDLastButton,
         int nIDCheckButton);

__declspec(dllimport)
UINT
__stdcall
IsDlgButtonChecked(
         HWND hDlg,
         int nIDButton);

__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageA(
         HWND hDlg,
         int nIDDlgItem,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageW(
         HWND hDlg,
         int nIDDlgItem,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);




#line 4395 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetNextDlgGroupItem(
         HWND hDlg,
           HWND hCtl,
         BOOL bPrevious);

__declspec(dllimport)
HWND
__stdcall
GetNextDlgTabItem(
         HWND hDlg,
           HWND hCtl,
         BOOL bPrevious);

__declspec(dllimport)
int
__stdcall
GetDlgCtrlID(
         HWND hWnd);

__declspec(dllimport)
long
__stdcall
GetDialogBaseUnits(void);

__declspec(dllimport)

LRESULT
__stdcall



#line 4431 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
DefDlgProcA(
         HWND hDlg,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 4444 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
DefDlgProcW(
         HWND hDlg,
         UINT Msg,
         WPARAM wParam,
         LPARAM lParam);




#line 4454 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"








#line 4463 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 4465 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterA(
         LPMSG lpMsg,
         int nCode);
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterW(
         LPMSG lpMsg,
         int nCode);




#line 4485 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 4487 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







__declspec(dllimport)
BOOL
__stdcall
OpenClipboard(
           HWND hWndNewOwner);

__declspec(dllimport)
BOOL
__stdcall
CloseClipboard(
    void);




__declspec(dllimport)
DWORD
__stdcall
GetClipboardSequenceNumber(
    void);

#line 4516 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetClipboardOwner(
    void);

__declspec(dllimport)
HWND
__stdcall
SetClipboardViewer(
         HWND hWndNewViewer);

__declspec(dllimport)
HWND
__stdcall
GetClipboardViewer(
    void);

__declspec(dllimport)
BOOL
__stdcall
ChangeClipboardChain(
         HWND hWndRemove,
         HWND hWndNewNext);

__declspec(dllimport)
HANDLE
__stdcall
SetClipboardData(
         UINT uFormat,
           HANDLE hMem);

__declspec(dllimport)
HANDLE
__stdcall
GetClipboardData(
         UINT uFormat);

__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatA(
         LPCSTR lpszFormat);
__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatW(
         LPCWSTR lpszFormat);




#line 4570 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
CountClipboardFormats(
    void);

__declspec(dllimport)
UINT
__stdcall
EnumClipboardFormats(
         UINT format);

__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameA(
         UINT format,
         LPSTR lpszFormatName,
         int cchMaxCount);
__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameW(
         UINT format,
         LPWSTR lpszFormatName,
         int cchMaxCount);




#line 4602 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EmptyClipboard(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsClipboardFormatAvailable(
         UINT format);

__declspec(dllimport)
int
__stdcall
GetPriorityClipboardFormat(
           UINT *paFormatPriorityList,
         int cFormats);

__declspec(dllimport)
HWND
__stdcall
GetOpenClipboardWindow(
    void);

#line 4629 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
CharToOemA(
         LPCSTR lpszSrc,
         LPSTR lpszDst);
__declspec(dllimport)
BOOL
__stdcall
CharToOemW(
         LPCWSTR lpszSrc,
         LPSTR lpszDst);




#line 4651 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
OemToCharA(
         LPCSTR lpszSrc,
         LPSTR lpszDst);
__declspec(dllimport)
BOOL
__stdcall
OemToCharW(
         LPCSTR lpszSrc,
         LPWSTR lpszDst);




#line 4669 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffA(
         LPCSTR lpszSrc,
         LPSTR lpszDst,
         DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffW(
         LPCWSTR lpszSrc,
         LPSTR lpszDst,
         DWORD cchDstLength);




#line 4689 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffA(
         LPCSTR lpszSrc,
         LPSTR lpszDst,
         DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffW(
         LPCSTR lpszSrc,
         LPWSTR lpszDst,
         DWORD cchDstLength);




#line 4709 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharUpperA(
         LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharUpperW(
         LPWSTR lpsz);




#line 4725 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffA(
           LPSTR lpsz,
         DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffW(
           LPWSTR lpsz,
         DWORD cchLength);




#line 4743 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharLowerA(
         LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharLowerW(
         LPWSTR lpsz);




#line 4759 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffA(
           LPSTR lpsz,
         DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffW(
           LPWSTR lpsz,
         DWORD cchLength);




#line 4777 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharNextA(
         LPCSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharNextW(
         LPCWSTR lpsz);




#line 4793 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharPrevA(
         LPCSTR lpszStart,
         LPCSTR lpszCurrent);
__declspec(dllimport)
LPWSTR
__stdcall
CharPrevW(
         LPCWSTR lpszStart,
         LPCWSTR lpszCurrent);




#line 4811 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
LPSTR
__stdcall
CharNextExA(
          WORD CodePage,
          LPCSTR lpCurrentChar,
          DWORD dwFlags);

__declspec(dllimport)
LPSTR
__stdcall
CharPrevExA(
          WORD CodePage,
          LPCSTR lpStart,
          LPCSTR lpCurrentChar,
          DWORD dwFlags);
#line 4830 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




















__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaW(
         WCHAR ch);




#line 4865 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericW(
         WCHAR ch);




#line 4881 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharUpperA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharUpperW(
         WCHAR ch);




#line 4897 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharLowerA(
         CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharLowerW(
         WCHAR ch);




#line 4913 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 4915 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
SetFocus(
           HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetActiveWindow(
    void);

__declspec(dllimport)
HWND
__stdcall
GetFocus(
    void);

__declspec(dllimport)
UINT
__stdcall
GetKBCodePage(
    void);

__declspec(dllimport)
SHORT
__stdcall
GetKeyState(
         int nVirtKey);

__declspec(dllimport)
SHORT
__stdcall
GetAsyncKeyState(
         int vKey);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardState(
         PBYTE lpKeyState);

__declspec(dllimport)
BOOL
__stdcall
SetKeyboardState(
           LPBYTE lpKeyState);

__declspec(dllimport)
int
__stdcall
GetKeyNameTextA(
         LONG lParam,
         LPSTR lpString,
         int cchSize);
__declspec(dllimport)
int
__stdcall
GetKeyNameTextW(
         LONG lParam,
         LPWSTR lpString,
         int cchSize);




#line 4983 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetKeyboardType(
         int nTypeFlag);

__declspec(dllimport)
int
__stdcall
ToAscii(
         UINT uVirtKey,
         UINT uScanCode,
             const BYTE *lpKeyState,
         LPWORD lpChar,
         UINT uFlags);


__declspec(dllimport)
int
__stdcall
ToAsciiEx(
         UINT uVirtKey,
         UINT uScanCode,
             const BYTE *lpKeyState,
         LPWORD lpChar,
         UINT uFlags,
           HKL dwhkl);
#line 5012 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
ToUnicode(
         UINT wVirtKey,
         UINT wScanCode,
             const BYTE *lpKeyState,
         LPWSTR pwszBuff,
         int cchBuff,
         UINT wFlags);

__declspec(dllimport)
DWORD
__stdcall
OemKeyScan(
         WORD wOemChar);

__declspec(dllimport)
SHORT
__stdcall
VkKeyScanA(
         CHAR ch);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanW(
         WCHAR ch);




#line 5045 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExA(
         CHAR ch,
         HKL dwhkl);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExW(
         WCHAR ch,
         HKL dwhkl);




#line 5064 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 5065 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





#line 5071 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
void
__stdcall
keybd_event(
         BYTE bVk,
         BYTE bScan,
         DWORD dwFlags,
         ULONG_PTR dwExtraInfo);
















__declspec(dllimport)
void
__stdcall
mouse_event(
         DWORD dwFlags,
         DWORD dx,
         DWORD dy,
         DWORD dwData,
         ULONG_PTR dwExtraInfo);

















































#line 5155 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"












#line 5168 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyA(
         UINT uCode,
         UINT uMapType);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyW(
         UINT uCode,
         UINT uMapType);




#line 5186 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExA(
         UINT uCode,
         UINT uMapType,
           HKL dwhkl);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExW(
         UINT uCode,
         UINT uMapType,
           HKL dwhkl);




#line 5207 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 5208 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetInputState(
    void);

__declspec(dllimport)
DWORD
__stdcall
GetQueueStatus(
         UINT flags);


__declspec(dllimport)
HWND
__stdcall
GetCapture(
    void);

__declspec(dllimport)
HWND
__stdcall
SetCapture(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ReleaseCapture(
    void);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjects(
         DWORD nCount,
             const HANDLE *pHandles,
         BOOL fWaitAll,
         DWORD dwMilliseconds,
         DWORD dwWakeMask);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
         DWORD nCount,
             const HANDLE *pHandles,
         DWORD dwMilliseconds,
         DWORD dwWakeMask,
         DWORD dwFlags);




















#line 5280 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"








#line 5289 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 5292 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






















__declspec(dllimport)
UINT_PTR
__stdcall
SetTimer(
           HWND hWnd,
         UINT_PTR nIDEvent,
         UINT uElapse,
           TIMERPROC lpTimerFunc);

__declspec(dllimport)
BOOL
__stdcall
KillTimer(
           HWND hWnd,
         UINT_PTR uIDEvent);

__declspec(dllimport)
BOOL
__stdcall
IsWindowUnicode(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
EnableWindow(
         HWND hWnd,
         BOOL bEnable);

__declspec(dllimport)
BOOL
__stdcall
IsWindowEnabled(
         HWND hWnd);

__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsA(
           HINSTANCE hInstance,
         LPCSTR lpTableName);
__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsW(
           HINSTANCE hInstance,
         LPCWSTR lpTableName);




#line 5366 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableA(
           LPACCEL paccel, 
         int cAccel);
__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableW(
           LPACCEL paccel, 
         int cAccel);




#line 5384 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DestroyAcceleratorTable(
         HACCEL hAccel);

__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableA(
         HACCEL hAccelSrc,
             LPACCEL lpAccelDst,
         int cAccelEntries);
__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableW(
         HACCEL hAccelSrc,
             LPACCEL lpAccelDst,
         int cAccelEntries);




#line 5410 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



__declspec(dllimport)
int
__stdcall
TranslateAcceleratorA(
         HWND hWnd,
         HACCEL hAccTable,
         LPMSG lpMsg);
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorW(
         HWND hWnd,
         HACCEL hAccTable,
         LPMSG lpMsg);




#line 5432 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 5434 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

















































































#line 5516 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






#line 5523 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 5527 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







#line 5535 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 5538 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 5542 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






#line 5549 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 5553 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 5555 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 5557 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







#line 5565 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 5569 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 5573 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 5575 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
int
__stdcall
GetSystemMetrics(
         int nIndex);


#line 5585 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



__declspec(dllimport)
HMENU
__stdcall
LoadMenuA(
           HINSTANCE hInstance,
         LPCSTR lpMenuName);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuW(
           HINSTANCE hInstance,
         LPCWSTR lpMenuName);




#line 5605 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectA(
         const MENUTEMPLATEA *lpMenuTemplate);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectW(
         const MENUTEMPLATEW *lpMenuTemplate);




#line 5621 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
GetMenu(
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetMenu(
         HWND hWnd,
           HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
ChangeMenuA(
         HMENU hMenu,
         UINT cmd,
           LPCSTR lpszNewItem,
         UINT cmdInsert,
         UINT flags);
__declspec(dllimport)
BOOL
__stdcall
ChangeMenuW(
         HMENU hMenu,
         UINT cmd,
           LPCWSTR lpszNewItem,
         UINT cmdInsert,
         UINT flags);




#line 5658 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
HiliteMenuItem(
         HWND hWnd,
         HMENU hMenu,
         UINT uIDHiliteItem,
         UINT uHilite);

__declspec(dllimport)
int
__stdcall
GetMenuStringA(
         HMENU hMenu,
         UINT uIDItem,
           LPSTR lpString,
         int cchMax,
         UINT flags);
__declspec(dllimport)
int
__stdcall
GetMenuStringW(
         HMENU hMenu,
         UINT uIDItem,
           LPWSTR lpString,
         int cchMax,
         UINT flags);




#line 5691 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetMenuState(
         HMENU hMenu,
         UINT uId,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DrawMenuBar(
         HWND hWnd);




#line 5710 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
HMENU
__stdcall
GetSystemMenu(
         HWND hWnd,
         BOOL bRevert);


__declspec(dllimport)
HMENU
__stdcall
CreateMenu(
    void);

__declspec(dllimport)
HMENU
__stdcall
CreatePopupMenu(
    void);

__declspec(dllimport)
BOOL
__stdcall
DestroyMenu(
         HMENU hMenu);

__declspec(dllimport)
DWORD
__stdcall
CheckMenuItem(
         HMENU hMenu,
         UINT uIDCheckItem,
         UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
EnableMenuItem(
         HMENU hMenu,
         UINT uIDEnableItem,
         UINT uEnable);

__declspec(dllimport)
HMENU
__stdcall
GetSubMenu(
         HMENU hMenu,
         int nPos);

__declspec(dllimport)
UINT
__stdcall
GetMenuItemID(
         HMENU hMenu,
         int nPos);

__declspec(dllimport)
int
__stdcall
GetMenuItemCount(
           HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
InsertMenuA(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
           LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuW(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
           LPCWSTR lpNewItem);




#line 5797 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
AppendMenuA(
         HMENU hMenu,
         UINT uFlags,
         UINT_PTR uIDNewItem,
           LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
AppendMenuW(
         HMENU hMenu,
         UINT uFlags,
         UINT_PTR uIDNewItem,
           LPCWSTR lpNewItem);




#line 5819 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ModifyMenuA(
         HMENU hMnu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
           LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
ModifyMenuW(
         HMENU hMnu,
         UINT uPosition,
         UINT uFlags,
         UINT_PTR uIDNewItem,
           LPCWSTR lpNewItem);




#line 5843 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall RemoveMenu(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DeleteMenu(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemBitmaps(
         HMENU hMenu,
         UINT uPosition,
         UINT uFlags,
           HBITMAP hBitmapUnchecked,
           HBITMAP hBitmapChecked);

__declspec(dllimport)
LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenu(
         HMENU hMenu,
         UINT uFlags,
         int x,
         int y,
         int nReserved,
         HWND hWnd,
           const RECT *prcRect);








typedef struct tagTPMPARAMS
{
    UINT    cbSize;     
    RECT    rcExclude;  
}   TPMPARAMS;
typedef TPMPARAMS  *LPTPMPARAMS;

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenuEx(
         HMENU,
         UINT,
         int,
         int,
         HWND,
           LPTPMPARAMS);
#line 5912 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

















typedef struct tagMENUINFO
{
    DWORD   cbSize;
    DWORD   fMask;
    DWORD   dwStyle;
    UINT    cyMax;
    HBRUSH  hbrBack;
    DWORD   dwContextHelpID;
    ULONG_PTR dwMenuData;
}   MENUINFO,  *LPMENUINFO;
typedef MENUINFO const  *LPCMENUINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuInfo(
         HMENU,
         LPMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
SetMenuInfo(
         HMENU,
         LPCMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
EndMenu(
        void);







typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;












#line 5988 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"








#line 5997 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

















#line 6015 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


typedef struct tagMENUITEMINFOA
{
    UINT     cbSize;
    UINT     fMask;
    UINT     fType;         
    UINT     fState;        
    UINT     wID;           
    HMENU    hSubMenu;      
    HBITMAP  hbmpChecked;   
    HBITMAP  hbmpUnchecked; 
    ULONG_PTR dwItemData;   
    LPSTR    dwTypeData;    
    UINT     cch;           

    HBITMAP  hbmpItem;      
#line 6033 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
}   MENUITEMINFOA,  *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT     cbSize;
    UINT     fMask;
    UINT     fType;         
    UINT     fState;        
    UINT     wID;           
    HMENU    hSubMenu;      
    HBITMAP  hbmpChecked;   
    HBITMAP  hbmpUnchecked; 
    ULONG_PTR dwItemData;   
    LPWSTR   dwTypeData;    
    UINT     cch;           

    HBITMAP  hbmpItem;      
#line 6050 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
}   MENUITEMINFOW,  *LPMENUITEMINFOW;




typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
#line 6058 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
typedef MENUITEMINFOA const  *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const  *LPCMENUITEMINFOW;



typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
#line 6065 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemA(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPCMENUITEMINFOA lpmi);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemW(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPCMENUITEMINFOW lpmi);




#line 6088 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoA(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoW(
         HMENU hmenu,
         UINT item,
         BOOL fByPosition,
         LPMENUITEMINFOW lpmii);




#line 6110 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoA(
         HMENU hmenu,
         UINT item,
         BOOL fByPositon,
         LPCMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoW(
         HMENU hmenu,
         UINT item,
         BOOL fByPositon,
         LPCMENUITEMINFOW lpmii);




#line 6132 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





__declspec(dllimport)
UINT
__stdcall
GetMenuDefaultItem(
         HMENU hMenu,
         UINT fByPos,
         UINT gmdiFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuDefaultItem(
         HMENU hMenu,
         UINT uItem,
         UINT fByPos);

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemRect(
           HWND hWnd,
         HMENU hMenu,
         UINT uItem,
         LPRECT lprcItem);

__declspec(dllimport)
int
__stdcall
MenuItemFromPoint(
           HWND hWnd,
         HMENU hMenu,
         POINT ptScreen);
#line 6170 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


















#line 6189 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"








#line 6198 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 6201 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 6202 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 6205 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







typedef struct tagDROPSTRUCT
{
    HWND    hwndSource;
    HWND    hwndSink;
    DWORD   wFmt;
    ULONG_PTR dwData;
    POINT   ptDrop;
    DWORD   dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;











__declspec(dllimport)
DWORD
__stdcall
DragObject(
         HWND hwndParent,
         HWND hwndFrom,
         UINT fmt,
         ULONG_PTR data,
           HCURSOR hcur);

__declspec(dllimport)
BOOL
__stdcall
DragDetect(
         HWND hwnd,
         POINT pt);
#line 6249 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DrawIcon(
         HDC hDC,
         int X,
         int Y,
         HICON hIcon);


































#line 6293 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 6294 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

typedef struct tagDRAWTEXTPARAMS
{
    UINT    cbSize;
    int     iTabLength;
    int     iLeftMargin;
    int     iRightMargin;
    UINT    uiLengthDrawn;
} DRAWTEXTPARAMS,  *LPDRAWTEXTPARAMS;
#line 6304 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
int
__stdcall
DrawTextA(
         HDC hdc,
           LPCSTR lpchText,
         int cchText,
         LPRECT lprc,
         UINT format);
__declspec(dllimport)
int
__stdcall
DrawTextW(
         HDC hdc,
           LPCWSTR lpchText,
         int cchText,
         LPRECT lprc,
         UINT format);




#line 6329 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
    
























#line 6355 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



__declspec(dllimport)
int
__stdcall
DrawTextExA(
         HDC hdc,
           LPSTR lpchText,
         int cchText,
         LPRECT lprc,
         UINT format,
           LPDRAWTEXTPARAMS lpdtp);
__declspec(dllimport)
int
__stdcall
DrawTextExW(
         HDC hdc,
           LPWSTR lpchText,
         int cchText,
         LPRECT lprc,
         UINT format,
           LPDRAWTEXTPARAMS lpdtp);




#line 6383 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 6384 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 6386 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GrayStringA(
         HDC hDC,
           HBRUSH hBrush,
           GRAYSTRINGPROC lpOutputFunc,
         LPARAM lpData,
         int nCount,
         int X,
         int Y,
         int nWidth,
         int nHeight);
__declspec(dllimport)
BOOL
__stdcall
GrayStringW(
         HDC hDC,
           HBRUSH hBrush,
           GRAYSTRINGPROC lpOutputFunc,
         LPARAM lpData,
         int nCount,
         int X,
         int Y,
         int nWidth,
         int nHeight);




#line 6418 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


















#line 6437 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
DrawStateA(
         HDC hdc,
           HBRUSH hbrFore,
           DRAWSTATEPROC qfnCallBack,
         LPARAM lData,
         WPARAM wData,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);
__declspec(dllimport)
BOOL
__stdcall
DrawStateW(
         HDC hdc,
           HBRUSH hbrFore,
           DRAWSTATEPROC qfnCallBack,
         LPARAM lData,
         WPARAM wData,
         int x,
         int y,
         int cx,
         int cy,
         UINT uFlags);




#line 6472 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 6473 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
TabbedTextOutA(
         HDC hdc,
         int x,
         int y,
           LPCSTR lpString,
         int chCount,
         int nTabPositions,
             const INT *lpnTabStopPositions,
         int nTabOrigin);
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutW(
         HDC hdc,
         int x,
         int y,
           LPCWSTR lpString,
         int chCount,
         int nTabPositions,
             const INT *lpnTabStopPositions,
         int nTabOrigin);




#line 6503 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentA(
         HDC hdc,
           LPCSTR lpString,
         int chCount,
         int nTabPositions,
             const INT *lpnTabStopPositions);
__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentW(
         HDC hdc,
           LPCWSTR lpString,
         int chCount,
         int nTabPositions,
             const INT *lpnTabStopPositions);




#line 6527 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateWindow(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetActiveWindow(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetForegroundWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
PaintDesktop(
         HDC hdc);

__declspec(dllimport)
void
__stdcall
SwitchToThisWindow(
         HWND hwnd,
         BOOL fUnknown);
#line 6560 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetForegroundWindow(
         HWND hWnd);



















#line 6586 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
WindowFromDC(
         HDC hDC);

__declspec(dllimport)
HDC
__stdcall
GetDC(
           HWND hWnd);

__declspec(dllimport)
HDC
__stdcall
GetDCEx(
           HWND hWnd,
           HRGN hrgnClip,
         DWORD flags);


















__declspec(dllimport)
HDC
__stdcall
GetWindowDC(
           HWND hWnd);

__declspec(dllimport)
int
__stdcall
ReleaseDC(
           HWND hWnd,
         HDC hDC);

__declspec(dllimport)
HDC
__stdcall
BeginPaint(
         HWND hWnd,
         LPPAINTSTRUCT lpPaint);

__declspec(dllimport)
BOOL
__stdcall
EndPaint(
         HWND hWnd,
         const PAINTSTRUCT *lpPaint);

__declspec(dllimport)
BOOL
__stdcall
GetUpdateRect(
         HWND hWnd,
           LPRECT lpRect,
         BOOL bErase);

__declspec(dllimport)
int
__stdcall
GetUpdateRgn(
         HWND hWnd,
         HRGN hRgn,
         BOOL bErase);

__declspec(dllimport)
int
__stdcall
SetWindowRgn(
         HWND hWnd,
           HRGN hRgn,
         BOOL bRedraw);


__declspec(dllimport)
int
__stdcall
GetWindowRgn(
         HWND hWnd,
         HRGN hRgn);










#line 6693 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
ExcludeUpdateRgn(
         HDC hDC,
         HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRect(
           HWND hWnd,
           const RECT *lpRect,
         BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRect(
           HWND hWnd,
           const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRgn(
         HWND hWnd,
           HRGN hRgn,
         BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRgn(
         HWND hWnd,
           HRGN hRgn);


__declspec(dllimport)
BOOL
__stdcall
RedrawWindow(
           HWND hWnd,
           const RECT *lprcUpdate,
           HRGN hrgnUpdate,
         UINT flags);


























__declspec(dllimport)
BOOL
__stdcall
LockWindowUpdate(
           HWND hWndLock);

__declspec(dllimport)
BOOL
__stdcall
ScrollWindow(
         HWND hWnd,
         int XAmount,
         int YAmount,
           const RECT *lpRect,
           const RECT *lpClipRect);

__declspec(dllimport)
BOOL
__stdcall
ScrollDC(
         HDC hDC,
         int dx,
         int dy,
           const RECT *lprcScroll,
           const RECT *lprcClip,
           HRGN hrgnUpdate,
           LPRECT lprcUpdate);

__declspec(dllimport)
int
__stdcall
ScrollWindowEx(
         HWND hWnd,
         int dx,
         int dy,
           const RECT *prcScroll,
           const RECT *prcClip,
           HRGN hrgnUpdate,
           LPRECT prcUpdate,
         UINT flags);






#line 6813 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



__declspec(dllimport)
int
__stdcall
SetScrollPos(
         HWND hWnd,
         int nBar,
         int nPos,
         BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetScrollPos(
         HWND hWnd,
         int nBar);

__declspec(dllimport)
BOOL
__stdcall
SetScrollRange(
         HWND hWnd,
         int nBar,
         int nMinPos,
         int nMaxPos,
         BOOL bRedraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollRange(
         HWND hWnd,
         int nBar,
         LPINT lpMinPos,
         LPINT lpMaxPos);

__declspec(dllimport)
BOOL
__stdcall
ShowScrollBar(
         HWND hWnd,
         int wBar,
         BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
EnableScrollBar(
         HWND hWnd,
         UINT wSBflags,
         UINT wArrows);


















#line 6885 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetPropA(
         HWND hWnd,
         LPCSTR lpString,
           HANDLE hData);
__declspec(dllimport)
BOOL
__stdcall
SetPropW(
         HWND hWnd,
         LPCWSTR lpString,
           HANDLE hData);




#line 6905 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
GetPropA(
         HWND hWnd,
         LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
GetPropW(
         HWND hWnd,
         LPCWSTR lpString);




#line 6923 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
RemovePropA(
         HWND hWnd,
         LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
RemovePropW(
         HWND hWnd,
         LPCWSTR lpString);




#line 6941 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsExA(
         HWND hWnd,
         PROPENUMPROCEXA lpEnumFunc,
         LPARAM lParam);
__declspec(dllimport)
int
__stdcall
EnumPropsExW(
         HWND hWnd,
         PROPENUMPROCEXW lpEnumFunc,
         LPARAM lParam);




#line 6961 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsA(
         HWND hWnd,
         PROPENUMPROCA lpEnumFunc);
__declspec(dllimport)
int
__stdcall
EnumPropsW(
         HWND hWnd,
         PROPENUMPROCW lpEnumFunc);




#line 6979 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetWindowTextA(
         HWND hWnd,
           LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetWindowTextW(
         HWND hWnd,
           LPCWSTR lpString);




#line 6997 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetWindowTextA(
         HWND hWnd,
         LPSTR lpString,
         int nMaxCount);
__declspec(dllimport)
int
__stdcall
GetWindowTextW(
         HWND hWnd,
         LPWSTR lpString,
         int nMaxCount);




#line 7017 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetWindowTextLengthA(
         HWND hWnd);
__declspec(dllimport)
int
__stdcall
GetWindowTextLengthW(
         HWND hWnd);




#line 7033 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClientRect(
         HWND hWnd,
         LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetWindowRect(
         HWND hWnd,
         LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRect(
         LPRECT lpRect,
         DWORD dwStyle,
         BOOL bMenu);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectEx(
         LPRECT lpRect,
         DWORD dwStyle,
         BOOL bMenu,
         DWORD dwExStyle);





typedef struct tagHELPINFO      
{
    UINT    cbSize;             
    int     iContextType;       
    int     iCtrlId;            
    HANDLE  hItemHandle;        
    DWORD_PTR dwContextId;      
    POINT   MousePos;           
}  HELPINFO,  *LPHELPINFO;

__declspec(dllimport)
BOOL
__stdcall
SetWindowContextHelpId(
         HWND,
         DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetWindowContextHelpId(
         HWND);

__declspec(dllimport)
BOOL
__stdcall
SetMenuContextHelpId(
         HMENU,
         DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetMenuContextHelpId(
         HMENU);

#line 7106 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"















#line 7122 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"











#line 7134 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









#line 7144 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






#line 7151 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"











#line 7163 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
















__declspec(dllimport)
int
__stdcall
MessageBoxA(
           HWND hWnd,
           LPCSTR lpText,
           LPCSTR lpCaption,
         UINT uType);
__declspec(dllimport)
int
__stdcall
MessageBoxW(
           HWND hWnd,
           LPCWSTR lpText,
           LPCWSTR lpCaption,
         UINT uType);




#line 7200 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
    






















#line 7224 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
MessageBoxExA(
           HWND hWnd,
           LPCSTR lpText,
           LPCSTR lpCaption,
         UINT uType,
         WORD wLanguageId);
__declspec(dllimport)
int
__stdcall
MessageBoxExW(
           HWND hWnd,
           LPCWSTR lpText,
           LPCWSTR lpCaption,
         UINT uType,
         WORD wLanguageId);




#line 7248 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCSTR      lpszText;
    LPCSTR      lpszCaption;
    DWORD       dwStyle;
    LPCSTR      lpszIcon;
    DWORD_PTR   dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD       dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCWSTR     lpszText;
    LPCWSTR     lpszCaption;
    DWORD       dwStyle;
    LPCWSTR     lpszIcon;
    DWORD_PTR   dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD       dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;





typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
#line 7288 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
MessageBoxIndirectA(
         const MSGBOXPARAMSA * lpmbp);
__declspec(dllimport)
int
__stdcall
MessageBoxIndirectW(
         const MSGBOXPARAMSW * lpmbp);




#line 7304 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 7305 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
MessageBeep(
         UINT uType);

#line 7314 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
ShowCursor(
         BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
SetCursorPos(
         int X,
         int Y);

__declspec(dllimport)
HCURSOR
__stdcall
SetCursor(
           HCURSOR hCursor);

__declspec(dllimport)
BOOL
__stdcall
GetCursorPos(
         LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClipCursor(
           const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetClipCursor(
         LPRECT lpRect);

__declspec(dllimport)
HCURSOR
__stdcall
GetCursor(
    void);

__declspec(dllimport)
BOOL
__stdcall
CreateCaret(
         HWND hWnd,
           HBITMAP hBitmap,
         int nWidth,
         int nHeight);

__declspec(dllimport)
UINT
__stdcall
GetCaretBlinkTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetCaretBlinkTime(
         UINT uMSeconds);

__declspec(dllimport)
BOOL
__stdcall
DestroyCaret(
    void);

__declspec(dllimport)
BOOL
__stdcall
HideCaret(
           HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowCaret(
           HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetCaretPos(
         int X,
         int Y);

__declspec(dllimport)
BOOL
__stdcall
GetCaretPos(
         LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClientToScreen(
         HWND hWnd,
         LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ScreenToClient(
         HWND hWnd,
         LPPOINT lpPoint);

__declspec(dllimport)
int
__stdcall
MapWindowPoints(
           HWND hWndFrom,
           HWND hWndTo,
           LPPOINT lpPoints,
         UINT cPoints);

__declspec(dllimport)
HWND
__stdcall
WindowFromPoint(
         POINT Point);

__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPoint(
         HWND hWndParent,
         POINT Point);







__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPointEx(
         HWND hwnd,
         POINT pt,
         UINT flags);
#line 7460 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"










































#line 7503 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"








#line 7512 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 7513 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"








#line 7522 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
DWORD
__stdcall
GetSysColor(
         int nIndex);


__declspec(dllimport)
HBRUSH
__stdcall
GetSysColorBrush(
         int nIndex);


#line 7539 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetSysColors(
         int cElements,
           const INT * lpaElements,
           const COLORREF * lpaRgbValues);

#line 7549 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DrawFocusRect(
         HDC hDC,
         const RECT * lprc);

__declspec(dllimport)
int
__stdcall
FillRect(
         HDC hDC,
         const RECT *lprc,
         HBRUSH hbr);

__declspec(dllimport)
int
__stdcall
FrameRect(
         HDC hDC,
         const RECT *lprc,
         HBRUSH hbr);

__declspec(dllimport)
BOOL
__stdcall
InvertRect(
         HDC hDC,
         const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
SetRect(
         LPRECT lprc,
         int xLeft,
         int yTop,
         int xRight,
         int yBottom);

__declspec(dllimport)
BOOL
__stdcall
SetRectEmpty(
         LPRECT lprc);

__declspec(dllimport)
BOOL
__stdcall
CopyRect(
         LPRECT lprcDst,
         const RECT *lprcSrc);

__declspec(dllimport)
BOOL
__stdcall
InflateRect(
         LPRECT lprc,
         int dx,
         int dy);

__declspec(dllimport)
BOOL
__stdcall
IntersectRect(
         LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
UnionRect(
         LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
SubtractRect(
         LPRECT lprcDst,
         const RECT *lprcSrc1,
         const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
OffsetRect(
         LPRECT lprc,
         int dx,
         int dy);

__declspec(dllimport)
BOOL
__stdcall
IsRectEmpty(
         const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
EqualRect(
         const RECT *lprc1,
         const RECT *lprc2);

__declspec(dllimport)
BOOL
__stdcall
PtInRect(
         const RECT *lprc,
         POINT pt);



__declspec(dllimport)
WORD
__stdcall
GetWindowWord(
         HWND hWnd,
         int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetWindowWord(
         HWND hWnd,
         int nIndex,
         WORD wNewWord);

__declspec(dllimport)
LONG
__stdcall
GetWindowLongA(
         HWND hWnd,
         int nIndex);
__declspec(dllimport)
LONG
__stdcall
GetWindowLongW(
         HWND hWnd,
         int nIndex);




#line 7697 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
SetWindowLongA(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
__declspec(dllimport)
LONG
__stdcall
SetWindowLongW(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);




#line 7717 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

















































#line 7767 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







#line 7775 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 7777 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
WORD
__stdcall
GetClassWord(
         HWND hWnd,
         int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetClassWord(
         HWND hWnd,
         int nIndex,
         WORD wNewWord);

__declspec(dllimport)
DWORD
__stdcall
GetClassLongA(
         HWND hWnd,
         int nIndex);
__declspec(dllimport)
DWORD
__stdcall
GetClassLongW(
         HWND hWnd,
         int nIndex);




#line 7810 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
SetClassLongA(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);
__declspec(dllimport)
DWORD
__stdcall
SetClassLongW(
         HWND hWnd,
         int nIndex,
         LONG dwNewLong);




#line 7830 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

















































#line 7880 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







#line 7888 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 7890 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 7892 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
GetProcessDefaultLayout(
         DWORD *pdwDefaultLayout);

__declspec(dllimport)
BOOL
__stdcall
SetProcessDefaultLayout(
         DWORD dwDefaultLayout);
#line 7906 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetDesktopWindow(
    void);


__declspec(dllimport)
HWND
__stdcall
GetParent(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetParent(
         HWND hWndChild,
           HWND hWndNewParent);

__declspec(dllimport)
BOOL
__stdcall
EnumChildWindows(
           HWND hWndParent,
         WNDENUMPROC lpEnumFunc,
         LPARAM lParam);

__declspec(dllimport)
HWND
__stdcall
FindWindowA(
           LPCSTR lpClassName,
           LPCSTR lpWindowName);
__declspec(dllimport)
HWND
__stdcall
FindWindowW(
           LPCWSTR lpClassName,
           LPCWSTR lpWindowName);




#line 7952 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
HWND
__stdcall
FindWindowExA(
           HWND hWndParent,
           HWND hWndChildAfter,
           LPCSTR lpszClass,
           LPCSTR lpszWindow);
__declspec(dllimport)
HWND
__stdcall
FindWindowExW(
           HWND hWndParent,
           HWND hWndChildAfter,
           LPCWSTR lpszClass,
           LPCWSTR lpszWindow);




#line 7975 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetShellWindow(
    void);

#line 7983 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
RegisterShellHookWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
DeregisterShellHookWindow(
         HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
EnumWindows(
         WNDENUMPROC lpEnumFunc,
         LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumThreadWindows(
         DWORD dwThreadId,
         WNDENUMPROC lpfn,
         LPARAM lParam);



__declspec(dllimport)
int
__stdcall
GetClassNameA(
         HWND hWnd,
           LPSTR lpClassName,
         int nMaxCount
    );
__declspec(dllimport)
int
__stdcall
GetClassNameW(
         HWND hWnd,
           LPWSTR lpClassName,
         int nMaxCount
    );




#line 8035 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
    




















#line 8057 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



__declspec(dllimport)
HWND
__stdcall
GetTopWindow(
           HWND hWnd);





__declspec(dllimport)
DWORD
__stdcall
GetWindowThreadProcessId(
         HWND hWnd,
           LPDWORD lpdwProcessId);








#line 8085 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




__declspec(dllimport)
HWND
__stdcall
GetLastActivePopup(
         HWND hWnd);












#line 8107 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 8110 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetWindow(
         HWND hWnd,
         UINT uCmd);






__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookA(
         int nFilterType,
         HOOKPROC pfnFilterProc);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookW(
         int nFilterType,
         HOOKPROC pfnFilterProc);




#line 8140 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





















#line 8162 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHook(
         int nCode,
         HOOKPROC pfnFilterProc);

__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExA(
         int idHook,
         HOOKPROC lpfn,
           HINSTANCE hmod,
         DWORD dwThreadId);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExW(
         int idHook,
         HOOKPROC lpfn,
           HINSTANCE hmod,
         DWORD dwThreadId);




#line 8191 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHookEx(
         HHOOK hhk);

__declspec(dllimport)
LRESULT
__stdcall
CallNextHookEx(
           HHOOK hhk,
         int nCode,
         WPARAM wParam,
         LPARAM lParam);










#line 8217 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 8218 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"








































#line 8259 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 8264 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 8269 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






















#line 8292 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




__declspec(dllimport)
BOOL
__stdcall
CheckMenuRadioItem(
         HMENU hmenu,
         UINT first,
         UINT last,
         UINT check,
         UINT flags);
#line 8306 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {        
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;


#line 8323 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



























#line 8351 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







#line 8359 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapA(
           HINSTANCE hInstance,
         LPCSTR lpBitmapName);
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapW(
           HINSTANCE hInstance,
         LPCWSTR lpBitmapName);




#line 8381 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorA(
           HINSTANCE hInstance,
         LPCSTR lpCursorName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorW(
           HINSTANCE hInstance,
         LPCWSTR lpCursorName);




#line 8399 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileA(
         LPCSTR lpFileName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileW(
         LPCWSTR lpFileName);




#line 8415 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
CreateCursor(
           HINSTANCE hInst,
         int xHotSpot,
         int yHotSpot,
         int nWidth,
         int nHeight,
         const void *pvANDPlane,
         const void *pvXORPlane);

__declspec(dllimport)
BOOL
__stdcall
DestroyCursor(
         HCURSOR hCursor);









#line 8443 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



















#line 8463 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 8467 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetSystemCursor(
         HCURSOR hcur,
         DWORD id);

typedef struct _ICONINFO {
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;

__declspec(dllimport)
HICON
__stdcall
LoadIconA(
           HINSTANCE hInstance,
         LPCSTR lpIconName);
__declspec(dllimport)
HICON
__stdcall
LoadIconW(
           HINSTANCE hInstance,
         LPCWSTR lpIconName);




#line 8501 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsA(
         LPCSTR szFileName,
         int nIconIndex,
         int cxIcon,
         int cyIcon,
             HICON *phicon,
             UINT *piconid,
         UINT nIcons,
         UINT flags);
__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsW(
         LPCWSTR szFileName,
         int nIconIndex,
         int cxIcon,
         int cyIcon,
             HICON *phicon,
             UINT *piconid,
         UINT nIcons,
         UINT flags);




#line 8532 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIcon(
           HINSTANCE hInstance,
         int nWidth,
         int nHeight,
         BYTE cPlanes,
         BYTE cBitsPixel,
         const BYTE *lpbANDbits,
         const BYTE *lpbXORbits);

__declspec(dllimport)
BOOL
__stdcall
DestroyIcon(
         HICON hIcon);

__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectory(
         PBYTE presbits,
         BOOL fIcon);


__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectoryEx(
         PBYTE presbits,
         BOOL fIcon,
         int cxDesired,
         int cyDesired,
         UINT Flags);
#line 8569 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIconFromResource(
         PBYTE presbits,
         DWORD dwResSize,
         BOOL fIcon,
         DWORD dwVer);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResourceEx(
         PBYTE presbits,
         DWORD dwResSize,
         BOOL fIcon,
         DWORD dwVer,
         int cxDesired,
         int cyDesired,
         UINT Flags);


typedef struct tagCURSORSHAPE
{
    int     xHotSpot;
    int     yHotSpot;
    int     cx;
    int     cy;
    int     cbWidth;
    BYTE    Planes;
    BYTE    BitsPixel;
} CURSORSHAPE,  *LPCURSORSHAPE;
#line 8604 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





















__declspec(dllimport)
HANDLE
__stdcall
LoadImageA(
           HINSTANCE hInst,
         LPCSTR name,
         UINT type,
         int cx,
         int cy,
         UINT fuLoad);
__declspec(dllimport)
HANDLE
__stdcall
LoadImageW(
           HINSTANCE hInst,
         LPCWSTR name,
         UINT type,
         int cx,
         int cy,
         UINT fuLoad);




#line 8650 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
CopyImage(
         HANDLE h,
         UINT type,
         int cx,
         int cy,
         UINT flags);








#line 8669 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport) BOOL __stdcall DrawIconEx(
         HDC hdc,
         int xLeft,
         int yTop,
         HICON hIcon,
         int cxWidth,
         int cyWidth,
         UINT istepIfAniCur,
           HBRUSH hbrFlickerFreeDraw,
         UINT diFlags);

#line 8682 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIconIndirect(
         PICONINFO piconinfo);

__declspec(dllimport)
HICON
__stdcall
CopyIcon(
         HICON hIcon);

__declspec(dllimport)
BOOL
__stdcall
GetIconInfo(
         HICON hIcon,
         PICONINFO piconinfo);




#line 8706 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"












































































































#line 8815 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 8816 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





#line 8822 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 8825 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
LoadStringA(
           HINSTANCE hInstance,
         UINT uID,
         LPSTR lpBuffer,
         int cchBufferMax);
__declspec(dllimport)
int
__stdcall
LoadStringW(
           HINSTANCE hInstance,
         UINT uID,
         LPWSTR lpBuffer,
         int cchBufferMax);




#line 8847 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"















#line 8863 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 8868 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 8873 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 8874 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





























#line 8904 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 8907 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
















#line 8924 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






#line 8931 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









#line 8941 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"













































#line 8987 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 8992 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 8995 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









































#line 9037 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
















#line 9054 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



















#line 9074 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

























#line 9100 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 9103 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"












#line 9116 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
















#line 9133 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 9135 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"































__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageA(
         HWND hDlg,
         LPMSG lpMsg);
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageW(
         HWND hDlg,
         LPMSG lpMsg);




#line 9183 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 9185 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
MapDialogRect(
         HWND hDlg,
         LPRECT lpRect);

__declspec(dllimport)
int
__stdcall
DlgDirListA(
         HWND hDlg,
         LPSTR lpPathSpec,
         int nIDListBox,
         int nIDStaticPath,
         UINT uFileType);
__declspec(dllimport)
int
__stdcall
DlgDirListW(
         HWND hDlg,
         LPWSTR lpPathSpec,
         int nIDListBox,
         int nIDStaticPath,
         UINT uFileType);




#line 9216 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"















__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExA(
         HWND hwndDlg,
         LPSTR lpString,
         int chCount,
         int idListBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExW(
         HWND hwndDlg,
         LPWSTR lpString,
         int chCount,
         int idListBox);




#line 9252 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxA(
         HWND hDlg,
         LPSTR lpPathSpec,
         int nIDComboBox,
         int nIDStaticPath,
         UINT uFiletype);
__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxW(
         HWND hDlg,
         LPWSTR lpPathSpec,
         int nIDComboBox,
         int nIDStaticPath,
         UINT uFiletype);




#line 9276 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExA(
         HWND hwndDlg,
         LPSTR lpString,
         int cchOut,
         int idComboBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExW(
         HWND hwndDlg,
         LPWSTR lpString,
         int cchOut,
         int idComboBox);




#line 9298 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

























#line 9324 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 9328 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







#line 9336 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


































                                  




























































#line 9432 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 9435 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




#line 9440 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 9444 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 9446 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 9450 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 9452 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"























#line 9476 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





#line 9482 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"












































#line 9527 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 9529 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"











































#line 9573 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 9574 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 9578 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 9582 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 9584 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 9588 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 9589 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




















#line 9610 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 9613 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"














#line 9628 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



#line 9632 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









typedef struct tagSCROLLINFO
{
    UINT    cbSize;
    UINT    fMask;
    int     nMin;
    int     nMax;
    UINT    nPage;
    int     nPos;
    int     nTrackPos;
}   SCROLLINFO,  *LPSCROLLINFO;
typedef SCROLLINFO const  *LPCSCROLLINFO;

__declspec(dllimport)
int
__stdcall
SetScrollInfo(
         HWND hwnd,
         int nBar,
         LPCSCROLLINFO lpsi,
         BOOL redraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollInfo(
         HWND hwnd,
         int nBar,
         LPSCROLLINFO lpsi);

#line 9671 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 9672 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 9673 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
















#line 9690 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

typedef struct tagMDICREATESTRUCTA {
    LPCSTR   szClass;
    LPCSTR   szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR  szClass;
    LPCWSTR  szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;




typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
#line 9720 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcA(
         HWND hWnd,
           HWND hWndMDIClient,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcW(
         HWND hWnd,
           HWND hWndMDIClient,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);




#line 9749 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)

LRESULT
__stdcall



#line 9758 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
DefMDIChildProcA(
         HWND hWnd,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 9771 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
DefMDIChildProcW(
         HWND hWnd,
         UINT uMsg,
         WPARAM wParam,
         LPARAM lParam);




#line 9781 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
TranslateMDISysAccel(
         HWND hWndClient,
         LPMSG lpMsg);

#line 9792 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
ArrangeIconicWindows(
         HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowA(
         LPCSTR lpClassName,
         LPCSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
           HWND hWndParent,
           HINSTANCE hInstance,
         LPARAM lParam);
__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowW(
         LPCWSTR lpClassName,
         LPCWSTR lpWindowName,
         DWORD dwStyle,
         int X,
         int Y,
         int nWidth,
         int nHeight,
           HWND hWndParent,
           HINSTANCE hInstance,
         LPARAM lParam);




#line 9832 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport) 
WORD 
__stdcall 
TileWindows(
           HWND hwndParent,
         UINT wHow,
           const RECT * lpRect,
         UINT cKids,
             const HWND  * lpKids);

__declspec(dllimport)
WORD
__stdcall CascadeWindows(
           HWND hwndParent,
         UINT wHow,
           const RECT * lpRect,
         UINT cKids,
             const HWND  * lpKids);

#line 9854 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 9855 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 9857 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {

    DWORD  mkSize;


#line 9869 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
    CHAR   mkKeylist;
    CHAR   szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {

    DWORD  mkSize;


#line 9878 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
    WCHAR  mkKeylist;
    WCHAR  szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;





typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
#line 9890 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

typedef struct tagHELPWININFOA {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    CHAR   rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    WCHAR  rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;





typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;
#line 9918 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





































#line 9956 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
WinHelpA(
           HWND hWndMain,
           LPCSTR lpszHelp,
         UINT uCommand,
         ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
WinHelpW(
           HWND hWndMain,
           LPCWSTR lpszHelp,
         UINT uCommand,
         ULONG_PTR dwData);




#line 9980 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 9982 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






__declspec(dllimport)
DWORD
__stdcall
GetGuiResources(
         HANDLE hProcess,
         DWORD uiFlags);
#line 9995 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





















































































#line 10081 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"















#line 10097 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





#line 10103 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"















#line 10119 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







#line 10127 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"












































#line 10172 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





































#line 10210 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 10212 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"












typedef struct tagNONCLIENTMETRICSA
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;
}   NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;
}   NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;





typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
#line 10269 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 10270 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 10271 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"















typedef struct tagMINIMIZEDMETRICS
{
    UINT    cbSize;
    int     iWidth;
    int     iHorzGap;
    int     iVertGap;
    int     iArrange;
}   MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



typedef struct tagICONMETRICSA
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTA lfFont;
}   ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTW lfFont;
}   ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;





typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;
#line 10322 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 10323 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 10324 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

typedef struct tagANIMATIONINFO
{
    UINT    cbSize;
    int     iMinAnimate;
}   ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR     lpszActivePort;
    LPSTR     lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR    lpszActivePort;
    LPWSTR    lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSW, *LPSERIALKEYSW;




typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;
#line 10358 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







typedef struct tagHIGHCONTRASTA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR   lpszDefaultScheme;
}   HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR  lpszDefaultScheme;
}   HIGHCONTRASTW, *LPHIGHCONTRASTW;




typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
#line 10384 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"






















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\tvout.h"










#pragma once
#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\tvout.h"





typedef struct _VIDEOPARAMETERS {
    GUID  Guid;                         
    ULONG dwOffset;                     
    ULONG dwCommand;                    
    ULONG dwFlags;                      
    ULONG dwMode;                       
    ULONG dwTVStandard;                 
    ULONG dwAvailableModes;             
    ULONG dwAvailableTVStandard;        
    ULONG dwFlickerFilter;              
    ULONG dwOverScanX;                  
    ULONG dwOverScanY;                  
    ULONG dwMaxUnscaledX;               
    ULONG dwMaxUnscaledY;               
    ULONG dwPositionX;                  
    ULONG dwPositionY;                  
    ULONG dwBrightness;                 
    ULONG dwContrast;                   
    ULONG dwCPType;                     
    ULONG dwCPCommand;                  
    ULONG dwCPStandard;                 
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;           
    UCHAR bOEMCopyProtection[256];      
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;


                                        












































#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\tvout.h"
#line 10407 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"











#line 10419 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsA(
           LPDEVMODEA lpDevMode,
         DWORD dwFlags);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsW(
           LPDEVMODEW lpDevMode,
         DWORD dwFlags);




#line 10440 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExA(
           LPCSTR lpszDeviceName,
           LPDEVMODEA lpDevMode,
      HWND hwnd,
         DWORD dwflags,
           LPVOID lParam);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExW(
           LPCWSTR lpszDeviceName,
           LPDEVMODEW lpDevMode,
      HWND hwnd,
         DWORD dwflags,
           LPVOID lParam);




#line 10464 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsA(
           LPCSTR lpszDeviceName,
         DWORD iModeNum,
         LPDEVMODEA lpDevMode);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsW(
           LPCWSTR lpszDeviceName,
         DWORD iModeNum,
         LPDEVMODEW lpDevMode);




#line 10487 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExA(
           LPCSTR lpszDeviceName,
         DWORD iModeNum,
         LPDEVMODEA lpDevMode,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExW(
           LPCWSTR lpszDeviceName,
         DWORD iModeNum,
         LPDEVMODEW lpDevMode,
         DWORD dwFlags);




#line 10511 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesA(
           LPCSTR lpDevice,
         DWORD iDevNum,
         PDISPLAY_DEVICEA lpDisplayDevice,
         DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesW(
           LPCWSTR lpDevice,
         DWORD iDevNum,
         PDISPLAY_DEVICEW lpDisplayDevice,
         DWORD dwFlags);




#line 10536 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 10537 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

#line 10539 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 10540 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SystemParametersInfoA(
         UINT uiAction,
         UINT uiParam,
           PVOID pvParam,
         UINT fWinIni);
__declspec(dllimport)
BOOL
__stdcall
SystemParametersInfoW(
         UINT uiAction,
         UINT uiParam,
           PVOID pvParam,
         UINT fWinIni);




#line 10563 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


#line 10566 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




typedef struct tagFILTERKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;            
    DWORD iDelayMSec;           
    DWORD iRepeatMSec;          
    DWORD iBounceMSec;          
} FILTERKEYS, *LPFILTERKEYS;












typedef struct tagSTICKYKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;






























#line 10627 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;


















#line 10657 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

typedef struct tagACCESSTIMEOUT
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;
























typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR   lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR  lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;




typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
#line 10725 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"








typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;















__declspec(dllimport)
void
__stdcall
SetDebugErrorLevel(
         DWORD dwLevel);









__declspec(dllimport)
void
__stdcall
SetLastErrorEx(
         DWORD dwErrCode,
         DWORD dwType);

__declspec(dllimport)
int
__stdcall
InternalGetWindowText(
         HWND hWnd,
           LPWSTR pString,
         int cchMaxCount);









#line 10791 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"












__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromPoint(
         POINT pt,
         DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromRect(
         LPCRECT lprc,
         DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromWindow(
         HWND hwnd,
         DWORD dwFlags);







typedef struct tagMONITORINFO
{
    DWORD   cbSize;
    RECT    rcMonitor;
    RECT    rcWork;
    DWORD   dwFlags;
} MONITORINFO, *LPMONITORINFO;


















typedef struct tagMONITORINFOEXA
{
    MONITORINFO;
    CHAR        szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW
{
    MONITORINFO;
    WCHAR       szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;




typedef MONITORINFOEXA MONITORINFOEX;
typedef LPMONITORINFOEXA LPMONITORINFOEX;
#line 10872 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 10873 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoA(
         HMONITOR hMonitor,
         LPMONITORINFO lpmi);
__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoW(
         HMONITOR hMonitor,
         LPMONITORINFO lpmi);




#line 10891 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

typedef BOOL (__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDisplayMonitors(
           HDC hdc,
           LPCRECT lprcClip,
         MONITORENUMPROC lpfnEnum,
         LPARAM dwData);








__declspec(dllimport)
void
__stdcall
NotifyWinEvent(
         DWORD event,
         HWND  hwnd,
         LONG  idObject,
         LONG  idChild);

typedef void (__stdcall* WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD         event,
    HWND          hwnd,
    LONG          idObject,
    LONG          idChild,
    DWORD         idEventThread,
    DWORD         dwmsEventTime);

__declspec(dllimport)
HWINEVENTHOOK
__stdcall
SetWinEventHook(
         DWORD eventMin,
         DWORD eventMax,
           HMODULE hmodWinEventProc,
         WINEVENTPROC pfnWinEventProc,
         DWORD idProcess,
         DWORD idThread,
         DWORD dwFlags);







#line 10947 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"









__declspec(dllimport)
BOOL
__stdcall
UnhookWinEvent(
         HWINEVENTHOOK hWinEventHook);

































































































































































































































#line 11187 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




















































































































































































































typedef struct tagGUITHREADINFO
{
    DWORD   cbSize;
    DWORD   flags;
    HWND    hwndActive;
    HWND    hwndFocus;
    HWND    hwndCapture;
    HWND    hwndMenuOwner;
    HWND    hwndMoveSize;
    HWND    hwndCaret;
    RECT    rcCaret;
} GUITHREADINFO, *PGUITHREADINFO,  * LPGUITHREADINFO;








#line 11420 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetGUIThreadInfo(
         DWORD idThread,
         PGUITHREADINFO pgui);


__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameA(
         HWND hwnd,
           LPSTR pszFileName,
         UINT cchFileNameMax);
__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameW(
         HWND hwnd,
           LPWSTR pszFileName,
         UINT cchFileNameMax);




#line 11448 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"


































#line 11483 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







typedef struct tagCURSORINFO
{
    DWORD   cbSize;
    DWORD   flags;
    HCURSOR hCursor;
    POINT   ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;



__declspec(dllimport)
BOOL
__stdcall
GetCursorInfo(
         PCURSORINFO pci);




typedef struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;



__declspec(dllimport)
BOOL
__stdcall
GetWindowInfo(
         HWND hwnd,
         PWINDOWINFO pwi);




typedef struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetTitleBarInfo(
         HWND hwnd,
         PTITLEBARINFO pti);




typedef struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar;          
    HMENU hMenu;         
    HWND hwndMenu;       
    BOOL fBarFocused:1;  
    BOOL fFocused:1;     
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuBarInfo(
         HWND hwnd,
         LONG idObject,
         LONG idItem,
         PMENUBARINFO pmbi);




typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetScrollBarInfo(
         HWND hwnd,
         LONG idObject,
         PSCROLLBARINFO psbi);




typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

__declspec(dllimport)
BOOL
__stdcall
GetComboBoxInfo(
         HWND hwndCombo,
         PCOMBOBOXINFO pcbi);








__declspec(dllimport)
HWND
__stdcall
GetAncestor(
         HWND hwnd,
         UINT gaFlags);








__declspec(dllimport)
HWND
__stdcall
RealChildWindowFromPoint(
         HWND hwndParent,
         POINT ptParentClientCoords);






__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassA(
         HWND hwnd,
           LPSTR ptszClassName,
         UINT cchClassNameMax);




__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassW(
         HWND hwnd,
           LPWSTR ptszClassName,
         UINT cchClassNameMax);




#line 11670 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"




typedef struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoA(
           HWND hwnd,
         int iItem,
         PALTTABINFO pati,
           LPSTR pszItemText,
         UINT cchItemText);
__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoW(
           HWND hwnd,
         int iItem,
         PALTTABINFO pati,
           LPWSTR pszItemText,
         UINT cchItemText);




#line 11710 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





__declspec(dllimport)
DWORD
__stdcall
GetListBoxInfo(
         HWND hwnd);

#line 11722 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 11723 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"








#line 11732 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"











#line 11744 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"













































































































































































































































































































































































#line 12110 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"







#line 12118 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"
#line 12119 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





#line 12125 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winuser.h"





#line 165 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"































































#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"




















































































#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"















































































































































































































































#line 390 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"























































































































#line 510 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"










#line 521 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"





















#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"


























#line 570 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"























































#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"



























































typedef DWORD LGRPID;





typedef DWORD LCTYPE;





typedef DWORD CALTYPE;





typedef DWORD CALID;






typedef struct _cpinfo {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
} CPINFO, *LPCPINFO;

typedef struct _cpinfoexA {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    CHAR    CodePageName[260];         
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    WCHAR   CodePageName[260];         
} CPINFOEXW, *LPCPINFOEXW;




typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;
#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"






typedef struct _numberfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTW, *LPNUMBERFMTW;




typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;
#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"






typedef struct _currencyfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPSTR   lpCurrencySymbol;          
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPWSTR  lpCurrencySymbol;          
} CURRENCYFMTW, *LPCURRENCYFMTW;




typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"





enum SYSNLS_FUNCTION{
    COMPARE_STRING    =  0x0001,
};
typedef DWORD NLS_FUNCTION;






typedef struct _nlsversioninfo{ 
    DWORD dwNLSVersionInfoSize; 
    DWORD dwNLSVersion; 
    DWORD dwDefinedVersion; 
} NLSVERSIONINFO, *LPNLSVERSIONINFO; 






typedef LONG    GEOID;
typedef DWORD   GEOTYPE;
typedef DWORD   GEOCLASS;







enum SYSGEOTYPE {
    GEO_NATION      =       0x0001,
    GEO_LATITUDE    =       0x0002,
    GEO_LONGITUDE   =       0x0003,
    GEO_ISO2        =       0x0004,
    GEO_ISO3        =       0x0005,
    GEO_RFC1766     =       0x0006,
    GEO_LCID        =       0x0007,
    GEO_FRIENDLYNAME=       0x0008,
    GEO_OFFICIALNAME=       0x0009,
    GEO_TIMEZONES   =       0x000A,
    GEO_OFFICIALLANGUAGES = 0x000B,
};





enum SYSGEOCLASS {
    GEOCLASS_NATION  = 16,
    GEOCLASS_REGION  = 14,
};








typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);

typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* GEO_ENUMPROC)(GEOID);


























#line 916 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"



























#line 944 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"



























__declspec(dllimport)
BOOL
__stdcall
IsValidCodePage(
         UINT  CodePage);

__declspec(dllimport)
UINT
__stdcall
GetACP(void);

__declspec(dllimport)
UINT
__stdcall
GetOEMCP(void);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfo(
         UINT       CodePage,
         LPCPINFO  lpCPInfo);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExA(
         UINT          CodePage,
         DWORD         dwFlags,
         LPCPINFOEXA  lpCPInfoEx);
__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExW(
         UINT          CodePage,
         DWORD         dwFlags,
         LPCPINFOEXW  lpCPInfoEx);




#line 1013 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByte(
         BYTE  TestChar);

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByteEx(
         UINT  CodePage,
         BYTE  TestChar);

__declspec(dllimport)
int
__stdcall
MultiByteToWideChar(
         UINT     CodePage,
         DWORD    dwFlags,
         LPCSTR   lpMultiByteStr,
         int      cbMultiByte,
           LPWSTR  lpWideCharStr,
         int      cchWideChar);

__declspec(dllimport)
int
__stdcall
WideCharToMultiByte(
         UINT     CodePage,
         DWORD    dwFlags,
           LPCWSTR  lpWideCharStr,
         int      cchWideChar,
           LPSTR   lpMultiByteStr,
         int      cbMultiByte,
           LPCSTR   lpDefaultChar,
           LPBOOL  lpUsedDefaultChar);






__declspec(dllimport)
int
__stdcall
CompareStringA(
         LCID     Locale,
         DWORD    dwCmpFlags,
         LPCSTR  lpString1,
         int      cchCount1,
         LPCSTR  lpString2,
         int      cchCount2);
__declspec(dllimport)
int
__stdcall
CompareStringW(
         LCID     Locale,
         DWORD    dwCmpFlags,
         LPCWSTR  lpString1,
         int      cchCount1,
         LPCWSTR  lpString2,
         int      cchCount2);




#line 1081 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"



























#line 1109 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
int
__stdcall
LCMapStringA(
         LCID     Locale,
         DWORD    dwMapFlags,
         LPCSTR  lpSrcStr,
         int      cchSrc,
           LPSTR  lpDestStr,
         int      cchDest);
__declspec(dllimport)
int
__stdcall
LCMapStringW(
         LCID     Locale,
         DWORD    dwMapFlags,
         LPCWSTR  lpSrcStr,
         int      cchSrc,
           LPWSTR  lpDestStr,
         int      cchDest);




#line 1135 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetLocaleInfoA(
         LCID     Locale,
         LCTYPE   LCType,
           LPSTR  lpLCData,
         int      cchData);
__declspec(dllimport)
int
__stdcall
GetLocaleInfoW(
         LCID     Locale,
         LCTYPE   LCType,
           LPWSTR  lpLCData,
         int      cchData);




#line 1157 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoA(
         LCID     Locale,
         LCTYPE   LCType,
         LPCSTR  lpLCData);
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoW(
         LCID     Locale,
         LCTYPE   LCType,
         LPCWSTR  lpLCData);




#line 1177 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"


__declspec(dllimport)
int
__stdcall
GetCalendarInfoA(
         LCID     Locale,
         CALID    Calendar,
         CALTYPE  CalType,
           LPSTR   lpCalData,
         int      cchData,
           LPDWORD  lpValue);
__declspec(dllimport)
int
__stdcall
GetCalendarInfoW(
         LCID     Locale,
         CALID    Calendar,
         CALTYPE  CalType,
           LPWSTR   lpCalData,
         int      cchData,
           LPDWORD  lpValue);




#line 1204 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoA(
         LCID     Locale,
         CALID    Calendar,
         CALTYPE  CalType,
         LPCSTR  lpCalData);
__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoW(
         LCID     Locale,
         CALID    Calendar,
         CALTYPE  CalType,
         LPCWSTR  lpCalData);




#line 1226 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"
#line 1227 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetTimeFormatA(
         LCID             Locale,
         DWORD            dwFlags,
           const SYSTEMTIME *lpTime,
           LPCSTR          lpFormat,
           LPSTR          lpTimeStr,
         int              cchTime);
__declspec(dllimport)
int
__stdcall
GetTimeFormatW(
         LCID             Locale,
         DWORD            dwFlags,
           const SYSTEMTIME *lpTime,
           LPCWSTR          lpFormat,
           LPWSTR          lpTimeStr,
         int              cchTime);




#line 1253 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetDateFormatA(
         LCID             Locale,
         DWORD            dwFlags,
           const SYSTEMTIME *lpDate,
           LPCSTR          lpFormat,
           LPSTR          lpDateStr,
         int              cchDate);
__declspec(dllimport)
int
__stdcall
GetDateFormatW(
         LCID             Locale,
         DWORD            dwFlags,
           const SYSTEMTIME *lpDate,
           LPCWSTR          lpFormat,
           LPWSTR          lpDateStr,
         int              cchDate);




#line 1279 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetNumberFormatA(
         LCID             Locale,
         DWORD            dwFlags,
         LPCSTR          lpValue,
           const NUMBERFMTA *lpFormat,
           LPSTR          lpNumberStr,
         int              cchNumber);
__declspec(dllimport)
int
__stdcall
GetNumberFormatW(
         LCID             Locale,
         DWORD            dwFlags,
         LPCWSTR          lpValue,
           const NUMBERFMTW *lpFormat,
           LPWSTR          lpNumberStr,
         int              cchNumber);




#line 1305 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatA(
         LCID               Locale,
         DWORD              dwFlags,
         LPCSTR            lpValue,
           const CURRENCYFMTA *lpFormat,
           LPSTR            lpCurrencyStr,
         int                cchCurrency);
__declspec(dllimport)
int
__stdcall
GetCurrencyFormatW(
         LCID               Locale,
         DWORD              dwFlags,
         LPCWSTR            lpValue,
           const CURRENCYFMTW *lpFormat,
           LPWSTR            lpCurrencyStr,
         int                cchCurrency);




#line 1331 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoA(
         CALINFO_ENUMPROCA lpCalInfoEnumProc,
         LCID              Locale,
         CALID             Calendar,
         CALTYPE           CalType);
__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoW(
         CALINFO_ENUMPROCW lpCalInfoEnumProc,
         LCID              Locale,
         CALID             Calendar,
         CALTYPE           CalType);




#line 1353 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExA(
         CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
         LCID                Locale,
         CALID               Calendar,
         CALTYPE             CalType);
__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExW(
         CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
         LCID                Locale,
         CALID               Calendar,
         CALTYPE             CalType);




#line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"
#line 1377 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsA(
         TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
         LCID              Locale,
         DWORD             dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsW(
         TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
         LCID              Locale,
         DWORD             dwFlags);




#line 1397 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsA(
         DATEFMT_ENUMPROCA lpDateFmtEnumProc,
         LCID              Locale,
         DWORD             dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsW(
         DATEFMT_ENUMPROCW lpDateFmtEnumProc,
         LCID              Locale,
         DWORD             dwFlags);




#line 1417 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExA(
         DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
         LCID                Locale,
         DWORD               dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExW(
         DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
         LCID                Locale,
         DWORD               dwFlags);




#line 1438 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"
#line 1439 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
IsValidLanguageGroup(
         LGRPID  LanguageGroup,
         DWORD   dwFlags);
#line 1448 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
GetNLSVersion(
         NLS_FUNCTION     Function,
         LCID             Locale,
         LPNLSVERSIONINFO lpVersionInformation);

__declspec(dllimport)
BOOL
__stdcall
IsNLSDefinedString(
         NLS_FUNCTION     Function,
         DWORD            dwFlags,
         LPNLSVERSIONINFO lpVersionInformation,
         LPCWSTR          lpString,
         INT              cchStr);

__declspec(dllimport)
BOOL
__stdcall
IsValidLocale(
         LCID   Locale,
         DWORD  dwFlags);

__declspec(dllimport)
int
__stdcall
GetGeoInfoA(
         GEOID       Location,
         GEOTYPE     GeoType,
           LPSTR     lpGeoData,
         int         cchData,
         LANGID      LangId);
__declspec(dllimport)
int
__stdcall
GetGeoInfoW(
         GEOID       Location,
         GEOTYPE     GeoType,
           LPWSTR     lpGeoData,
         int         cchData,
         LANGID      LangId);




#line 1497 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumSystemGeoID(
         GEOCLASS        GeoClass,
         GEOID           ParentGeoId,
         GEO_ENUMPROC    lpGeoEnumProc);

__declspec(dllimport)
GEOID
__stdcall
GetUserGeoID(
         GEOCLASS    GeoClass);

__declspec(dllimport)
BOOL
__stdcall
SetUserGeoID(
         GEOID       GeoId);

__declspec(dllimport)
LCID
__stdcall
ConvertDefaultLocale(
         LCID   Locale);

__declspec(dllimport)
LCID
__stdcall
GetThreadLocale(void);

__declspec(dllimport)
BOOL
__stdcall
SetThreadLocale(
         LCID  Locale
    );


__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultUILanguage(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultUILanguage(void);
#line 1547 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultLangID(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultLangID(void);

__declspec(dllimport)
LCID
__stdcall
GetSystemDefaultLCID(void);

__declspec(dllimport)
LCID
__stdcall
GetUserDefaultLCID(void);







__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExA(
         LCID     Locale,
         DWORD    dwInfoType,
         LPCSTR  lpSrcStr,
         int      cchSrc,
         LPWORD  lpCharType);
__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExW(
         LCID     Locale,
         DWORD    dwInfoType,
         LPCWSTR  lpSrcStr,
         int      cchSrc,
         LPWORD  lpCharType);




#line 1597 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"












__declspec(dllimport)
BOOL
__stdcall
GetStringTypeA(
         LCID     Locale,
         DWORD    dwInfoType,
         LPCSTR   lpSrcStr,
         int      cchSrc,
         LPWORD  lpCharType);

__declspec(dllimport)
BOOL
__stdcall
GetStringTypeW(
         DWORD    dwInfoType,
         LPCWSTR  lpSrcStr,
         int      cchSrc,
         LPWORD  lpCharType);


__declspec(dllimport)
int
__stdcall
FoldStringA(
         DWORD    dwMapFlags,
         LPCSTR  lpSrcStr,
         int      cchSrc,
           LPSTR  lpDestStr,
         int      cchDest);
__declspec(dllimport)
int
__stdcall
FoldStringW(
         DWORD    dwMapFlags,
         LPCWSTR  lpSrcStr,
         int      cchSrc,
           LPWSTR  lpDestStr,
         int      cchDest);




#line 1652 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsA(
         LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
         DWORD                   dwFlags,
         LONG_PTR                lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsW(
         LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
         DWORD                   dwFlags,
         LONG_PTR                lParam);




#line 1673 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesA(
         LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
         LGRPID                    LanguageGroup,
         DWORD                     dwFlags,
         LONG_PTR                  lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesW(
         LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
         LGRPID                    LanguageGroup,
         DWORD                     dwFlags,
         LONG_PTR                  lParam);




#line 1695 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesA(
         UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
         DWORD                dwFlags,
         LONG_PTR             lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesW(
         UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
         DWORD                dwFlags,
         LONG_PTR             lParam);




#line 1715 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"
#line 1716 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesA(
         LOCALE_ENUMPROCA lpLocaleEnumProc,
         DWORD            dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesW(
         LOCALE_ENUMPROCW lpLocaleEnumProc,
         DWORD            dwFlags);




#line 1734 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesA(
         CODEPAGE_ENUMPROCA lpCodePageEnumProc,
         DWORD              dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesW(
         CODEPAGE_ENUMPROCW lpCodePageEnumProc,
         DWORD              dwFlags);




#line 1752 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"


#line 1755 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"






#line 1762 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnls.h"

#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"




























typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;

typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;

typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;






















typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;



















typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;











typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;
























typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD  wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_CURSOR_INFO {
    DWORD  dwSize;
    BOOL   bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

typedef struct _CONSOLE_FONT_INFO {
    DWORD  nFont;
    COORD  dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;

















#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"





typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
    DWORD CtrlType
    );






























__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputA(
     HANDLE hConsoleInput,
     PINPUT_RECORD lpBuffer,
     DWORD nLength,
     LPDWORD lpNumberOfEventsRead
    );
__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputW(
     HANDLE hConsoleInput,
     PINPUT_RECORD lpBuffer,
     DWORD nLength,
     LPDWORD lpNumberOfEventsRead
    );




#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleInputA(
     HANDLE hConsoleInput,
     PINPUT_RECORD lpBuffer,
     DWORD nLength,
     LPDWORD lpNumberOfEventsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleInputW(
     HANDLE hConsoleInput,
     PINPUT_RECORD lpBuffer,
     DWORD nLength,
     LPDWORD lpNumberOfEventsRead
    );




#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputA(
     HANDLE hConsoleInput,
     const INPUT_RECORD *lpBuffer,
     DWORD nLength,
     LPDWORD lpNumberOfEventsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputW(
     HANDLE hConsoleInput,
     const INPUT_RECORD *lpBuffer,
     DWORD nLength,
     LPDWORD lpNumberOfEventsWritten
    );




#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputA(
     HANDLE hConsoleOutput,
     PCHAR_INFO lpBuffer,
     COORD dwBufferSize,
     COORD dwBufferCoord,
      PSMALL_RECT lpReadRegion
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputW(
     HANDLE hConsoleOutput,
     PCHAR_INFO lpBuffer,
     COORD dwBufferSize,
     COORD dwBufferCoord,
      PSMALL_RECT lpReadRegion
    );




#line 335 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputA(
     HANDLE hConsoleOutput,
     const CHAR_INFO *lpBuffer,
     COORD dwBufferSize,
     COORD dwBufferCoord,
      PSMALL_RECT lpWriteRegion
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputW(
     HANDLE hConsoleOutput,
     const CHAR_INFO *lpBuffer,
     COORD dwBufferSize,
     COORD dwBufferCoord,
      PSMALL_RECT lpWriteRegion
    );




#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterA(
     HANDLE hConsoleOutput,
     LPSTR lpCharacter,
      DWORD nLength,
     COORD dwReadCoord,
     LPDWORD lpNumberOfCharsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterW(
     HANDLE hConsoleOutput,
     LPWSTR lpCharacter,
      DWORD nLength,
     COORD dwReadCoord,
     LPDWORD lpNumberOfCharsRead
    );




#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputAttribute(
     HANDLE hConsoleOutput,
     LPWORD lpAttribute,
     DWORD nLength,
     COORD dwReadCoord,
     LPDWORD lpNumberOfAttrsRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterA(
     HANDLE hConsoleOutput,
     LPCSTR lpCharacter,
     DWORD nLength,
     COORD dwWriteCoord,
     LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterW(
     HANDLE hConsoleOutput,
     LPCWSTR lpCharacter,
     DWORD nLength,
     COORD dwWriteCoord,
     LPDWORD lpNumberOfCharsWritten
    );




#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputAttribute(
     HANDLE hConsoleOutput,
     const WORD *lpAttribute,
     DWORD nLength,
     COORD dwWriteCoord,
     LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterA(
     HANDLE hConsoleOutput,
     CHAR  cCharacter,
     DWORD  nLength,
     COORD  dwWriteCoord,
     LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterW(
     HANDLE hConsoleOutput,
     WCHAR  cCharacter,
     DWORD  nLength,
     COORD  dwWriteCoord,
     LPDWORD lpNumberOfCharsWritten
    );




#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputAttribute(
     HANDLE hConsoleOutput,
     WORD   wAttribute,
     DWORD  nLength,
     COORD  dwWriteCoord,
     LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleMode(
     HANDLE hConsoleHandle,
     LPDWORD lpMode
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleInputEvents(
     HANDLE hConsoleInput,
     LPDWORD lpNumberOfEvents
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfo(
     HANDLE hConsoleOutput,
     PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );

__declspec(dllimport)
COORD
__stdcall
GetLargestConsoleWindowSize(
     HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleCursorInfo(
     HANDLE hConsoleOutput,
     PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );



























#line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
     LPDWORD lpNumberOfMouseButtons
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleMode(
     HANDLE hConsoleHandle,
     DWORD dwMode
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleActiveScreenBuffer(
     HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
FlushConsoleInputBuffer(
     HANDLE hConsoleInput
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferSize(
     HANDLE hConsoleOutput,
     COORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorPosition(
     HANDLE hConsoleOutput,
     COORD dwCursorPosition
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorInfo(
     HANDLE hConsoleOutput,
     const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferA(
     HANDLE hConsoleOutput,
     const SMALL_RECT *lpScrollRectangle,
     const SMALL_RECT *lpClipRectangle,
     COORD dwDestinationOrigin,
     const CHAR_INFO *lpFill
    );
__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferW(
     HANDLE hConsoleOutput,
     const SMALL_RECT *lpScrollRectangle,
     const SMALL_RECT *lpClipRectangle,
     COORD dwDestinationOrigin,
     const CHAR_INFO *lpFill
    );




#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleWindowInfo(
     HANDLE hConsoleOutput,
     BOOL bAbsolute,
     const SMALL_RECT *lpConsoleWindow
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTextAttribute(
     HANDLE hConsoleOutput,
     WORD wAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCtrlHandler(
     PHANDLER_ROUTINE HandlerRoutine,
     BOOL Add
    );

__declspec(dllimport)
BOOL
__stdcall
GenerateConsoleCtrlEvent(
     DWORD dwCtrlEvent,
     DWORD dwProcessGroupId
    );

__declspec(dllimport)
BOOL
__stdcall
AllocConsole( void );

__declspec(dllimport)
BOOL
__stdcall
FreeConsole( void );










#line 672 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleA(
     LPSTR lpConsoleTitle,
     DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleW(
     LPWSTR lpConsoleTitle,
     DWORD nSize
    );




#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleA(
     LPCSTR lpConsoleTitle
    );
__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleW(
     LPCWSTR lpConsoleTitle
    );




#line 710 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleA(
     HANDLE hConsoleInput,
     LPVOID lpBuffer,
     DWORD nNumberOfCharsToRead,
     LPDWORD lpNumberOfCharsRead,
     LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleW(
     HANDLE hConsoleInput,
     LPVOID lpBuffer,
     DWORD nNumberOfCharsToRead,
     LPDWORD lpNumberOfCharsRead,
     LPVOID lpReserved
    );




#line 736 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleA(
     HANDLE hConsoleOutput,
     const void *lpBuffer,
     DWORD nNumberOfCharsToWrite,
     LPDWORD lpNumberOfCharsWritten,
     LPVOID lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleW(
     HANDLE hConsoleOutput,
     const void *lpBuffer,
     DWORD nNumberOfCharsToWrite,
     LPDWORD lpNumberOfCharsWritten,
     LPVOID lpReserved
    );




#line 762 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"



__declspec(dllimport)
HANDLE
__stdcall
CreateConsoleScreenBuffer(
     DWORD dwDesiredAccess,
     DWORD dwShareMode,
     const SECURITY_ATTRIBUTES *lpSecurityAttributes,
     DWORD dwFlags,
     LPVOID lpScreenBufferData
    );

__declspec(dllimport)
UINT
__stdcall
GetConsoleCP( void );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCP(
     UINT wCodePageID
    );

__declspec(dllimport)
UINT
__stdcall
GetConsoleOutputCP( void );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleOutputCP(
     UINT wCodePageID
    );




















#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"






























































































































#line 947 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"





#line 953 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincon.h"

#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winver.h"





























#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winver.h"





































































































typedef struct tagVS_FIXEDFILEINFO
{
    DWORD   dwSignature;            
    DWORD   dwStrucVersion;         
    DWORD   dwFileVersionMS;        
    DWORD   dwFileVersionLS;        
    DWORD   dwProductVersionMS;     
    DWORD   dwProductVersionLS;     
    DWORD   dwFileFlagsMask;        
    DWORD   dwFileFlags;            
    DWORD   dwFileOS;               
    DWORD   dwFileType;             
    DWORD   dwFileSubtype;          
    DWORD   dwFileDateMS;           
    DWORD   dwFileDateLS;           
} VS_FIXEDFILEINFO;



DWORD
__stdcall
VerFindFileA(
        DWORD uFlags,
        LPSTR szFileName,
        LPSTR szWinDir,
        LPSTR szAppDir,
        LPSTR szCurDir,
        PUINT lpuCurDirLen,
        LPSTR szDestDir,
        PUINT lpuDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
        DWORD uFlags,
        LPWSTR szFileName,
        LPWSTR szWinDir,
        LPWSTR szAppDir,
        LPWSTR szCurDir,
        PUINT lpuCurDirLen,
        LPWSTR szDestDir,
        PUINT lpuDestDirLen
        );




#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winver.h"

DWORD
__stdcall
VerInstallFileA(
        DWORD uFlags,
        LPSTR szSrcFileName,
        LPSTR szDestFileName,
        LPSTR szSrcDir,
        LPSTR szDestDir,
        LPSTR szCurDir,
        LPSTR szTmpFile,
        PUINT lpuTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
        DWORD uFlags,
        LPWSTR szSrcFileName,
        LPWSTR szDestFileName,
        LPWSTR szSrcDir,
        LPWSTR szDestDir,
        LPWSTR szCurDir,
        LPWSTR szTmpFile,
        PUINT lpuTmpFileLen
        );




#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winver.h"


DWORD
__stdcall
GetFileVersionInfoSizeA(
         LPCSTR lptstrFilename, 
           LPDWORD lpdwHandle
    );                      

DWORD
__stdcall
GetFileVersionInfoSizeW(
         LPCWSTR lptstrFilename, 
           LPDWORD lpdwHandle
    );                      




#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winver.h"


BOOL
__stdcall
GetFileVersionInfoA(
         LPCSTR lptstrFilename, 
         DWORD dwHandle,         
         DWORD dwLen,            
         LPVOID lpData
    );                      

BOOL
__stdcall
GetFileVersionInfoW(
         LPCWSTR lptstrFilename, 
         DWORD dwHandle,         
         DWORD dwLen,            
         LPVOID lpData
    );                      




#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winver.h"

DWORD
__stdcall
VerLanguageNameA(
        DWORD wLang,
        LPSTR szLang,
        DWORD nSize
        );
DWORD
__stdcall
VerLanguageNameW(
        DWORD wLang,
        LPWSTR szLang,
        DWORD nSize
        );




#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winver.h"

BOOL
__stdcall
VerQueryValueA(
        const LPVOID pBlock,
        LPSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
        const LPVOID pBlock,
        LPWSTR lpSubBlock,
        LPVOID * lplpBuffer,
        PUINT puLen
        );




#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winver.h"

#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winver.h"





#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winver.h"

#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"






















































typedef ACCESS_MASK REGSAM;



























struct val_context {
    int valuelen;       
    LPVOID value_context;   
    LPVOID val_buff_ptr;    
};

typedef struct val_context  *PVALCONTEXT;

typedef struct pvalueA {           
    LPSTR   pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA,  *PPVALUEA;
typedef struct pvalueW {           
    LPWSTR  pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW,  *PPVALUEW;




typedef PVALUEA PVALUE;
typedef PPVALUEA PPVALUE;
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

typedef
DWORD _cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD  *total_outlen, DWORD input_blen);

typedef QUERYHANDLER  *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;    
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info  *PPROVIDER;

typedef struct value_entA {
    LPSTR   ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTA,  *PVALENTA;
typedef struct value_entW {
    LPWSTR  ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTW,  *PVALENTW;




typedef VALENTA VALENT;
typedef PVALENTA PVALENT;
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"


#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"













__declspec(dllimport)
LONG
__stdcall
RegCloseKey (
         HKEY hKey
    );

__declspec(dllimport)
LONG
__stdcall
RegOverridePredefKey (
         HKEY hKey,
           HKEY hNewHKey
    );

__declspec(dllimport)
LONG
__stdcall
RegOpenUserClassesRoot(
         HANDLE hToken,
      DWORD dwOptions,
         REGSAM samDesired,
         PHKEY  phkResult
    );

__declspec(dllimport)
LONG
__stdcall
RegOpenCurrentUser(
         REGSAM samDesired,
         PHKEY phkResult
    );

__declspec(dllimport)
LONG
__stdcall
RegDisablePredefinedCache(
    );

__declspec(dllimport)
LONG
__stdcall
RegConnectRegistryA (
           LPCSTR lpMachineName,
         HKEY hKey,
         PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegConnectRegistryW (
           LPCWSTR lpMachineName,
         HKEY hKey,
         PHKEY phkResult
    );




#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegConnectRegistryExA (
           LPCSTR lpMachineName,
         HKEY hKey,
         ULONG Flags,
         PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegConnectRegistryExW (
           LPCWSTR lpMachineName,
         HKEY hKey,
         ULONG Flags,
         PHKEY phkResult
    );




#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegCreateKeyA (
         HKEY hKey,
           LPCSTR lpSubKey,
         PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegCreateKeyW (
         HKEY hKey,
           LPCWSTR lpSubKey,
         PHKEY phkResult
    );




#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegCreateKeyExA (
         HKEY hKey,
         LPCSTR lpSubKey,
      DWORD Reserved,
           LPSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         PHKEY phkResult,
           LPDWORD lpdwDisposition
    );
__declspec(dllimport)
LONG
__stdcall
RegCreateKeyExW (
         HKEY hKey,
         LPCWSTR lpSubKey,
      DWORD Reserved,
           LPWSTR lpClass,
         DWORD dwOptions,
         REGSAM samDesired,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         PHKEY phkResult,
           LPDWORD lpdwDisposition
    );




#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegDeleteKeyA (
         HKEY hKey,
         LPCSTR lpSubKey
    );
__declspec(dllimport)
LONG
__stdcall
RegDeleteKeyW (
         HKEY hKey,
         LPCWSTR lpSubKey
    );




#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"
    
__declspec(dllimport)
LONG
__stdcall
RegDeleteKeyExA (
         HKEY hKey,
         LPCSTR lpSubKey,
         REGSAM samDesired,
      DWORD Reserved
    );
__declspec(dllimport)
LONG
__stdcall
RegDeleteKeyExW (
         HKEY hKey,
         LPCWSTR lpSubKey,
         REGSAM samDesired,
      DWORD Reserved
    );




#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegDisableReflectionKey (
         HKEY hBase
    );    

__declspec(dllimport)
LONG
__stdcall
RegEnableReflectionKey (
         HKEY hBase
    );    

__declspec(dllimport)
LONG
__stdcall
RegQueryReflectionKey (
         HKEY hBase,
         BOOL *bIsReflectionDisabled
    );    


__declspec(dllimport)
LONG
__stdcall
RegDeleteValueA (
         HKEY hKey,
           LPCSTR lpValueName
    );
__declspec(dllimport)
LONG
__stdcall
RegDeleteValueW (
         HKEY hKey,
           LPCWSTR lpValueName
    );




#line 393 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegEnumKeyA (
         HKEY hKey,
         DWORD dwIndex,
           LPSTR lpName,
         DWORD cchName
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumKeyW (
         HKEY hKey,
         DWORD dwIndex,
           LPWSTR lpName,
         DWORD cchName
    );




#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegEnumKeyExA (
         HKEY hKey,
         DWORD dwIndex,
           LPSTR lpName,
         LPDWORD lpcchName,
      LPDWORD lpReserved,
             LPSTR lpClass,
           LPDWORD lpcchClass,
           PFILETIME lpftLastWriteTime
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumKeyExW (
         HKEY hKey,
         DWORD dwIndex,
           LPWSTR lpName,
         LPDWORD lpcchName,
      LPDWORD lpReserved,
             LPWSTR lpClass,
           LPDWORD lpcchClass,
           PFILETIME lpftLastWriteTime
    );




#line 449 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegEnumValueA (
         HKEY hKey,
         DWORD dwIndex,
           LPSTR lpValueName,
         LPDWORD lpcchValueName,
      LPDWORD lpReserved,
           LPDWORD lpType,
           LPBYTE lpData,
           LPDWORD lpcbData
    );
__declspec(dllimport)
LONG
__stdcall
RegEnumValueW (
         HKEY hKey,
         DWORD dwIndex,
           LPWSTR lpValueName,
         LPDWORD lpcchValueName,
      LPDWORD lpReserved,
           LPDWORD lpType,
           LPBYTE lpData,
           LPDWORD lpcbData
    );




#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegFlushKey (
         HKEY hKey
    );

__declspec(dllimport)
LONG
__stdcall
RegGetKeySecurity (
         HKEY hKey,
         SECURITY_INFORMATION SecurityInformation,
           PSECURITY_DESCRIPTOR pSecurityDescriptor,
         LPDWORD lpcbSecurityDescriptor
    );

__declspec(dllimport)
LONG
__stdcall
RegLoadKeyA (
         HKEY    hKey,
           LPCSTR  lpSubKey,
         LPCSTR  lpFile
    );
__declspec(dllimport)
LONG
__stdcall
RegLoadKeyW (
         HKEY    hKey,
           LPCWSTR  lpSubKey,
         LPCWSTR  lpFile
    );




#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegNotifyChangeKeyValue (
         HKEY hKey,
         BOOL bWatchSubtree,
         DWORD dwNotifyFilter,
           HANDLE hEvent,
         BOOL fAsynchronous
    );

__declspec(dllimport)
LONG
__stdcall
RegOpenKeyA (
         HKEY hKey,
           LPCSTR lpSubKey,
         PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegOpenKeyW (
         HKEY hKey,
           LPCWSTR lpSubKey,
         PHKEY phkResult
    );




#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegOpenKeyExA (
         HKEY hKey,
           LPCSTR lpSubKey,
      DWORD ulOptions,
         REGSAM samDesired,
         PHKEY phkResult
    );
__declspec(dllimport)
LONG
__stdcall
RegOpenKeyExW (
         HKEY hKey,
           LPCWSTR lpSubKey,
      DWORD ulOptions,
         REGSAM samDesired,
         PHKEY phkResult
    );




#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegQueryInfoKeyA (
         HKEY hKey,
           LPSTR lpClass,
           LPDWORD lpcchClass,
      LPDWORD lpReserved,
           LPDWORD lpcSubKeys,
           LPDWORD lpcbMaxSubKeyLen,
           LPDWORD lpcbMaxClassLen,
           LPDWORD lpcValues,
           LPDWORD lpcbMaxValueNameLen,
           LPDWORD lpcbMaxValueLen,
           LPDWORD lpcbSecurityDescriptor,
           PFILETIME lpftLastWriteTime
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryInfoKeyW (
         HKEY hKey,
           LPWSTR lpClass,
           LPDWORD lpcchClass,
      LPDWORD lpReserved,
           LPDWORD lpcSubKeys,
           LPDWORD lpcbMaxSubKeyLen,
           LPDWORD lpcbMaxClassLen,
           LPDWORD lpcValues,
           LPDWORD lpcbMaxValueNameLen,
           LPDWORD lpcbMaxValueLen,
           LPDWORD lpcbSecurityDescriptor,
           PFILETIME lpftLastWriteTime
    );




#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegQueryValueA (
         HKEY hKey,
           LPCSTR lpSubKey,
           LPSTR lpData,
           PLONG lpcbData
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryValueW (
         HKEY hKey,
           LPCWSTR lpSubKey,
           LPWSTR lpData,
           PLONG lpcbData
    );




#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"


__declspec(dllimport)
LONG
__stdcall
RegQueryMultipleValuesA (
         HKEY hKey,
         PVALENTA val_list,
         DWORD num_vals,
           LPSTR lpValueBuf,
           LPDWORD ldwTotsize
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryMultipleValuesW (
         HKEY hKey,
         PVALENTW val_list,
         DWORD num_vals,
           LPWSTR lpValueBuf,
           LPDWORD ldwTotsize
    );




#line 670 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"
#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegQueryValueExA (
         HKEY hKey,
           LPCSTR lpValueName,
      LPDWORD lpReserved,
           LPDWORD lpType,
           LPBYTE lpData,
           LPDWORD lpcbData
    );
__declspec(dllimport)
LONG
__stdcall
RegQueryValueExW (
         HKEY hKey,
           LPCWSTR lpValueName,
      LPDWORD lpReserved,
           LPDWORD lpType,
           LPBYTE lpData,
           LPDWORD lpcbData
    );




#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegReplaceKeyA (
         HKEY hKey,
           LPCSTR lpSubKey,
         LPCSTR lpNewFile,
         LPCSTR lpOldFile
    );
__declspec(dllimport)
LONG
__stdcall
RegReplaceKeyW (
         HKEY hKey,
           LPCWSTR lpSubKey,
         LPCWSTR lpNewFile,
         LPCWSTR lpOldFile
    );




#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegRestoreKeyA (
         HKEY hKey,
         LPCSTR lpFile,
         DWORD dwFlags
    );
__declspec(dllimport)
LONG
__stdcall
RegRestoreKeyW (
         HKEY hKey,
         LPCWSTR lpFile,
         DWORD dwFlags
    );




#line 745 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegSaveKeyA (
         HKEY hKey,
         LPCSTR lpFile,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
LONG
__stdcall
RegSaveKeyW (
         HKEY hKey,
         LPCWSTR lpFile,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 767 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegSetKeySecurity (
         HKEY hKey,
         SECURITY_INFORMATION SecurityInformation,
         PSECURITY_DESCRIPTOR pSecurityDescriptor
    );

__declspec(dllimport)
LONG
__stdcall
RegSetValueA (
         HKEY hKey,
           LPCSTR lpSubKey,
         DWORD dwType,
             LPCSTR lpData,
         DWORD cbData
    );
__declspec(dllimport)
LONG
__stdcall
RegSetValueW (
         HKEY hKey,
           LPCWSTR lpSubKey,
         DWORD dwType,
             LPCWSTR lpData,
         DWORD cbData
    );




#line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"


__declspec(dllimport)
LONG
__stdcall
RegSetValueExA (
         HKEY hKey,
           LPCSTR lpValueName,
      DWORD Reserved,
         DWORD dwType,
             const BYTE* lpData,
         DWORD cbData
    );
__declspec(dllimport)
LONG
__stdcall
RegSetValueExW (
         HKEY hKey,
           LPCWSTR lpValueName,
      DWORD Reserved,
         DWORD dwType,
             const BYTE* lpData,
         DWORD cbData
    );




#line 831 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegUnLoadKeyA (
         HKEY    hKey,
           LPCSTR lpSubKey
    );
__declspec(dllimport)
LONG
__stdcall
RegUnLoadKeyW (
         HKEY    hKey,
           LPCWSTR lpSubKey
    );




#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegGetValueA (
         HKEY    hkey,
           LPCSTR  lpSubKey,
           LPCSTR  lpValue,
           DWORD    dwFlags,
           LPDWORD pdwType,
           PVOID   pvData,
           LPDWORD pcbData 
    );
__declspec(dllimport)
LONG
__stdcall
RegGetValueW (
         HKEY    hkey,
           LPCWSTR  lpSubKey,
           LPCWSTR  lpValue,
           DWORD    dwFlags,
           LPDWORD pdwType,
           PVOID   pvData,
           LPDWORD pcbData 
    );




#line 881 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"





__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownA(
           LPSTR lpMachineName,
           LPSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown
    );
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownW(
           LPWSTR lpMachineName,
           LPWSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown
    );




#line 911 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"


__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownA(
           LPSTR lpMachineName
    );
__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownW(
           LPWSTR lpMachineName
    );




#line 930 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\reason.h"



















































































































#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\reason.h"
#line 936 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"


















__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExA(
           LPSTR lpMachineName,
           LPSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown,
         DWORD dwReason
    );
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExW(
           LPWSTR lpMachineName,
           LPWSTR lpMessage,
         DWORD dwTimeout,
         BOOL bForceAppsClosed,
         BOOL bRebootAfterShutdown,
         DWORD dwReason
    );




#line 981 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"


__declspec(dllimport)
LONG
__stdcall
RegSaveKeyExA (
         HKEY hKey,
         LPCSTR lpFile,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD Flags
    );
__declspec(dllimport)
LONG
__stdcall
RegSaveKeyExW (
         HKEY hKey,
         LPCWSTR lpFile,
           LPSECURITY_ATTRIBUTES lpSecurityAttributes,
         DWORD Flags
    );




#line 1006 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
Wow64Win32ApiEntry (
         DWORD dwFuncNumber,
         DWORD dwFlag,
         DWORD dwRes
    );






#line 1022 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winreg.h"

#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"







































































































#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"






#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"









#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"













#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"



#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

typedef struct  _NETRESOURCEA {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPSTR    lpLocalName;
    LPSTR    lpRemoteName;
    LPSTR    lpComment ;
    LPSTR    lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct  _NETRESOURCEW {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPWSTR   lpLocalName;
    LPWSTR   lpRemoteName;
    LPWSTR   lpComment ;
    LPWSTR   lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;




typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"





















#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"



#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

DWORD __stdcall
WNetAddConnectionA(
      LPCSTR   lpRemoteName,
      LPCSTR   lpPassword,
      LPCSTR   lpLocalName
    );
DWORD __stdcall
WNetAddConnectionW(
      LPCWSTR   lpRemoteName,
      LPCWSTR   lpPassword,
      LPCWSTR   lpLocalName
    );




#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

DWORD __stdcall
WNetAddConnection2A(
      LPNETRESOURCEA lpNetResource,
      LPCSTR       lpPassword,
      LPCSTR       lpUserName,
      DWORD          dwFlags
    );
DWORD __stdcall
WNetAddConnection2W(
      LPNETRESOURCEW lpNetResource,
      LPCWSTR       lpPassword,
      LPCWSTR       lpUserName,
      DWORD          dwFlags
    );




#line 232 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

DWORD __stdcall
WNetAddConnection3A(
      HWND           hwndOwner,
      LPNETRESOURCEA lpNetResource,
      LPCSTR       lpPassword,
      LPCSTR       lpUserName,
      DWORD          dwFlags
    );
DWORD __stdcall
WNetAddConnection3W(
      HWND           hwndOwner,
      LPNETRESOURCEW lpNetResource,
      LPCWSTR       lpPassword,
      LPCWSTR       lpUserName,
      DWORD          dwFlags
    );




#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

DWORD __stdcall
WNetCancelConnectionA(
      LPCSTR lpName,
      BOOL     fForce
    );
DWORD __stdcall
WNetCancelConnectionW(
      LPCWSTR lpName,
      BOOL     fForce
    );




#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

DWORD __stdcall
WNetCancelConnection2A(
      LPCSTR lpName,
      DWORD    dwFlags,
      BOOL     fForce
    );
DWORD __stdcall
WNetCancelConnection2W(
      LPCWSTR lpName,
      DWORD    dwFlags,
      BOOL     fForce
    );




#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

DWORD __stdcall
WNetGetConnectionA(
      LPCSTR lpLocalName,
      LPSTR  lpRemoteName,
       LPDWORD  lpnLength
    );
DWORD __stdcall
WNetGetConnectionW(
      LPCWSTR lpLocalName,
      LPWSTR  lpRemoteName,
       LPDWORD  lpnLength
    );




#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"


DWORD __stdcall
WNetRestoreConnectionA(
     HWND     hwndParent,
     LPCSTR lpDevice
    );
DWORD __stdcall
WNetRestoreConnectionW(
     HWND     hwndParent,
     LPCWSTR lpDevice
    );




#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"



DWORD __stdcall
WNetUseConnectionA(
     HWND            hwndOwner,
     LPNETRESOURCEA  lpNetResource,
     LPCSTR        lpPassword,
     LPCSTR        lpUserID,
     DWORD           dwFlags,
     LPSTR        lpAccessName,
      LPDWORD     lpBufferSize,
     LPDWORD        lpResult
    );
DWORD __stdcall
WNetUseConnectionW(
     HWND            hwndOwner,
     LPNETRESOURCEW  lpNetResource,
     LPCWSTR        lpPassword,
     LPCWSTR        lpUserID,
     DWORD           dwFlags,
     LPWSTR        lpAccessName,
      LPDWORD     lpBufferSize,
     LPDWORD        lpResult
    );




#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"






DWORD __stdcall
WNetConnectionDialog(
     HWND  hwnd,
     DWORD dwType
    );

DWORD __stdcall
WNetDisconnectDialog(
     HWND  hwnd,
     DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTA,  *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTW,  *LPCONNECTDLGSTRUCTW;




typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"














DWORD __stdcall
WNetConnectionDialog1A(
      LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );
DWORD __stdcall
WNetConnectionDialog1W(
      LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );




#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

typedef struct _DISCDLGSTRUCTA{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPSTR           lpLocalName;      
    LPSTR           lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTA,  *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPWSTR          lpLocalName;      
    LPWSTR          lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTW,  *LPDISCDLGSTRUCTW;




typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"




DWORD __stdcall
WNetDisconnectDialog1A(
     LPDISCDLGSTRUCTA lpConnDlgStruct
    );
DWORD __stdcall
WNetDisconnectDialog1W(
     LPDISCDLGSTRUCTW lpConnDlgStruct
    );




#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"
#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"





DWORD __stdcall
WNetOpenEnumA(
      DWORD          dwScope,
      DWORD          dwType,
      DWORD          dwUsage,
      LPNETRESOURCEA lpNetResource,
      LPHANDLE       lphEnum
    );
DWORD __stdcall
WNetOpenEnumW(
      DWORD          dwScope,
      DWORD          dwType,
      DWORD          dwUsage,
      LPNETRESOURCEW lpNetResource,
      LPHANDLE       lphEnum
    );




#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

DWORD __stdcall
WNetEnumResourceA(
      HANDLE  hEnum,
       LPDWORD lpcCount,
      LPVOID  lpBuffer,
       LPDWORD lpBufferSize
    );
DWORD __stdcall
WNetEnumResourceW(
      HANDLE  hEnum,
       LPDWORD lpcCount,
      LPVOID  lpBuffer,
       LPDWORD lpBufferSize
    );




#line 507 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

DWORD __stdcall
WNetCloseEnum(
     HANDLE   hEnum
    );


DWORD __stdcall
WNetGetResourceParentA(
     LPNETRESOURCEA lpNetResource,
     LPVOID lpBuffer,
      LPDWORD lpcbBuffer
    );
DWORD __stdcall
WNetGetResourceParentW(
     LPNETRESOURCEW lpNetResource,
     LPVOID lpBuffer,
      LPDWORD lpcbBuffer
    );




#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

DWORD __stdcall
WNetGetResourceInformationA(
     LPNETRESOURCEA  lpNetResource,
     LPVOID          lpBuffer,
      LPDWORD         lpcbBuffer,
     LPSTR         *lplpSystem
    );
DWORD __stdcall
WNetGetResourceInformationW(
     LPNETRESOURCEW  lpNetResource,
     LPVOID          lpBuffer,
      LPDWORD         lpcbBuffer,
     LPWSTR         *lplpSystem
    );




#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"
#line 552 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"








typedef struct  _UNIVERSAL_NAME_INFOA {
    LPSTR    lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct  _UNIVERSAL_NAME_INFOW {
    LPWSTR   lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;




typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
#line 573 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

typedef struct  _REMOTE_NAME_INFOA {
    LPSTR    lpUniversalName;
    LPSTR    lpConnectionName;
    LPSTR    lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct  _REMOTE_NAME_INFOW {
    LPWSTR   lpUniversalName;
    LPWSTR   lpConnectionName;
    LPWSTR   lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;




typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

DWORD __stdcall
WNetGetUniversalNameA(
      LPCSTR lpLocalPath,
      DWORD    dwInfoLevel,
      LPVOID   lpBuffer,
       LPDWORD  lpBufferSize
     );
DWORD __stdcall
WNetGetUniversalNameW(
      LPCWSTR lpLocalPath,
      DWORD    dwInfoLevel,
      LPVOID   lpBuffer,
       LPDWORD  lpBufferSize
     );




#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"





DWORD __stdcall
WNetGetUserA(
      LPCSTR  lpName,
      LPSTR   lpUserName,
       LPDWORD   lpnLength
    );
DWORD __stdcall
WNetGetUserW(
      LPCWSTR  lpName,
      LPWSTR   lpUserName,
       LPDWORD   lpnLength
    );




#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"











#line 645 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"



DWORD __stdcall
WNetGetProviderNameA(
     DWORD   dwNetType,
     LPSTR lpProviderName,
      LPDWORD lpBufferSize
    );
DWORD __stdcall
WNetGetProviderNameW(
     DWORD   dwNetType,
     LPWSTR lpProviderName,
      LPDWORD lpBufferSize
    );




#line 665 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD  wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT,  *LPNETINFOSTRUCT;





DWORD __stdcall
WNetGetNetworkInformationA(
     LPCSTR          lpProvider,
     LPNETINFOSTRUCT   lpNetInfoStruct
    );
DWORD __stdcall
WNetGetNetworkInformationW(
     LPCWSTR          lpProvider,
     LPNETINFOSTRUCT   lpNetInfoStruct
    );




#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"





typedef UINT ( __stdcall *PFNGETPROFILEPATHA) (
    LPCSTR    pszUsername,
    LPSTR     pszBuffer,
    UINT        cbBuffer
    );
typedef UINT ( __stdcall *PFNGETPROFILEPATHW) (
    LPCWSTR    pszUsername,
    LPWSTR     pszBuffer,
    UINT        cbBuffer
    );




#line 716 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

typedef UINT ( __stdcall *PFNRECONCILEPROFILEA) (
    LPCSTR    pszCentralFile,
    LPCSTR    pszLocalFile,
    DWORD       dwFlags
    );
typedef UINT ( __stdcall *PFNRECONCILEPROFILEW) (
    LPCWSTR    pszCentralFile,
    LPCWSTR    pszLocalFile,
    DWORD       dwFlags
    );




#line 732 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"









typedef BOOL ( __stdcall *PFNPROCESSPOLICIESA) (
    HWND        hwnd,
    LPCSTR    pszPath,
    LPCSTR    pszUsername,
    LPCSTR    pszComputerName,
    DWORD       dwFlags
    );
typedef BOOL ( __stdcall *PFNPROCESSPOLICIESW) (
    HWND        hwnd,
    LPCWSTR    pszPath,
    LPCWSTR    pszUsername,
    LPCWSTR    pszComputerName,
    DWORD       dwFlags
    );




#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"


#line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"





DWORD __stdcall
WNetGetLastErrorA(
      LPDWORD    lpError,
      LPSTR    lpErrorBuf,
      DWORD      nErrorBufSize,
      LPSTR    lpNameBuf,
      DWORD      nNameBufSize
    );
DWORD __stdcall
WNetGetLastErrorW(
      LPDWORD    lpError,
      LPWSTR    lpErrorBuf,
      DWORD      nErrorBufSize,
      LPWSTR    lpNameBuf,
      DWORD      nNameBufSize
    );




#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"





























#line 819 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"




















#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"












#line 853 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"






typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT,  *LPNETCONNECTINFOSTRUCT;






DWORD __stdcall
MultinetGetConnectionPerformanceA(
         LPNETRESOURCEA lpNetResource,
         LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
        );
DWORD __stdcall
MultinetGetConnectionPerformanceW(
         LPNETRESOURCEW lpNetResource,
         LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
        );




#line 887 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"
#line 888 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"





#line 894 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winnetwk.h"

#line 177 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\cderr.h"














#pragma once
#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\cderr.h"













































#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\cderr.h"
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\dde.h"











#pragma once
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\dde.h"




































typedef struct {

        unsigned short bAppReturnCode:8,
                 reserved:6,
                 fBusy:1,
		 fAck:1;


#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\dde.h"
} DDEACK;









typedef struct {

        unsigned short reserved:14,
                 fDeferUpd:1,
		 fAckReq:1;


#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\dde.h"
	short     cfFormat;
} DDEADVISE;











typedef struct {

	unsigned short unused:12,
                 fResponse:1,
                 fRelease:1,
                 reserved:1,
                 fAckReq:1;


#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\dde.h"
	short	 cfFormat;
	BYTE	 Value[1];
} DDEDATA;











typedef struct {

	unsigned short unused:13,  
                             
		 fRelease:1,
		 fReserved:2;


#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\dde.h"
	short    cfFormat;
	BYTE	 Value[1];  
                            

} DDEPOKE;











typedef struct {

        unsigned short unused:13,
                 fRelease:1,
                 fDeferUpd:1,
		 fAckReq:1;


#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\dde.h"
	short	 cfFormat;
} DDELN;

typedef struct {

	unsigned short unused:12,
                 fAck:1,
                 fRelease:1,
                 fReserved:1,
                 fAckReq:1;


#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\dde.h"
	short	 cfFormat;
	BYTE	 rgb[1];
} DDEUP;






BOOL
__stdcall
DdeSetQualityOfService(
    HWND hwndClient,
    const SECURITY_QUALITY_OF_SERVICE *pqosNew,
    PSECURITY_QUALITY_OF_SERVICE pqosPrev);

BOOL
__stdcall
ImpersonateDdeClientWindow(
    HWND hWndClient,
    HWND hWndServer);




LPARAM __stdcall PackDDElParam(UINT msg, UINT_PTR uiLo, UINT_PTR uiHi);
BOOL   __stdcall UnpackDDElParam(UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi);
BOOL   __stdcall FreeDDElParam(UINT msg, LPARAM lParam);
LPARAM __stdcall ReuseDDElParam(LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi);





#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\dde.h"
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ddeml.h"





















struct HCONVLIST__ { int unused; }; typedef struct HCONVLIST__ *HCONVLIST;
struct HCONV__ { int unused; }; typedef struct HCONV__ *HCONV;
struct HSZ__ { int unused; }; typedef struct HSZ__ *HSZ;
struct HDDEDATA__ { int unused; }; typedef struct HDDEDATA__ *HDDEDATA;




typedef struct tagHSZPAIR {
    HSZ hszSvc;
    HSZ hszTopic;
} HSZPAIR;
typedef HSZPAIR  *PHSZPAIR;




typedef struct tagCONVCONTEXT {
    UINT        cb;             
    UINT        wFlags;         
    UINT        wCountryID;     
    int         iCodePage;      
    DWORD       dwLangID;       
    DWORD       dwSecurity;     
    SECURITY_QUALITY_OF_SERVICE qos;  
} CONVCONTEXT;
typedef CONVCONTEXT  *PCONVCONTEXT;




typedef struct tagCONVINFO {
    DWORD   cb;            
    DWORD_PTR hUser;       
    HCONV   hConvPartner;  
    HSZ     hszSvcPartner; 
    HSZ     hszServiceReq; 
    HSZ     hszTopic;      
    HSZ     hszItem;       
    UINT    wFmt;          
    UINT    wType;         
    UINT    wStatus;       
    UINT    wConvst;       
    UINT    wLastError;    
    HCONVLIST hConvList;   
    CONVCONTEXT ConvCtxt;  
    HWND    hwnd;          
    HWND    hwndPartner;   
} CONVINFO;
typedef CONVINFO  *PCONVINFO;
































































#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ddeml.h"




























































#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ddeml.h"




typedef HDDEDATA __stdcall FNCALLBACK(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
typedef HDDEDATA (__stdcall *PFNCALLBACK)(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);





UINT __stdcall DdeInitializeA(   LPDWORD pidInst,  PFNCALLBACK pfnCallback,
         DWORD afCmd,  DWORD ulRes);
UINT __stdcall DdeInitializeW(   LPDWORD pidInst,  PFNCALLBACK pfnCallback,
         DWORD afCmd,  DWORD ulRes);




#line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ddeml.h"
































BOOL __stdcall DdeUninitialize(  DWORD idInst);





HCONVLIST __stdcall DdeConnectList(  DWORD idInst,  HSZ hszService,  HSZ hszTopic,
         HCONVLIST hConvList,  PCONVCONTEXT pCC);
HCONV __stdcall DdeQueryNextServer(  HCONVLIST hConvList,  HCONV hConvPrev);
BOOL __stdcall DdeDisconnectList(  HCONVLIST hConvList);





HCONV __stdcall DdeConnect(  DWORD idInst,  HSZ hszService,  HSZ hszTopic,
         PCONVCONTEXT pCC);
BOOL __stdcall DdeDisconnect(   HCONV hConv);
HCONV __stdcall DdeReconnect(  HCONV hConv);
UINT __stdcall DdeQueryConvInfo(  HCONV hConv,  DWORD idTransaction,   PCONVINFO pConvInfo);
BOOL __stdcall DdeSetUserHandle(  HCONV hConv,  DWORD id,  DWORD_PTR hUser);
BOOL __stdcall DdeAbandonTransaction(  DWORD idInst,  HCONV hConv,  DWORD idTransaction);






BOOL __stdcall DdePostAdvise(  DWORD idInst,  HSZ hszTopic,  HSZ hszItem);
BOOL __stdcall DdeEnableCallback(  DWORD idInst,  HCONV hConv,  UINT wCmd);
BOOL __stdcall DdeImpersonateClient(  HCONV hConv);






HDDEDATA __stdcall DdeNameService(  DWORD idInst,  HSZ hsz1,  HSZ hsz2,  UINT afCmd);










HDDEDATA __stdcall DdeClientTransaction(  LPBYTE pData,  DWORD cbData,
         HCONV hConv,  HSZ hszItem,  UINT wFmt,  UINT wType,
         DWORD dwTimeout,  LPDWORD pdwResult);





HDDEDATA __stdcall DdeCreateDataHandle(  DWORD idInst,  LPBYTE pSrc,  DWORD cb,
         DWORD cbOff,  HSZ hszItem,  UINT wFmt,  UINT afCmd);
HDDEDATA __stdcall DdeAddData(  HDDEDATA hData,  LPBYTE pSrc,  DWORD cb,  DWORD cbOff);
DWORD __stdcall DdeGetData(  HDDEDATA hData,  LPBYTE pDst,  DWORD cbMax,  DWORD cbOff);
LPBYTE __stdcall DdeAccessData(  HDDEDATA hData,  LPDWORD pcbDataSize);
BOOL __stdcall DdeUnaccessData(  HDDEDATA hData);
BOOL __stdcall DdeFreeDataHandle(   HDDEDATA hData);




UINT __stdcall DdeGetLastError(  DWORD idInst);


























HSZ  __stdcall DdeCreateStringHandleA(  DWORD idInst,  LPCSTR psz,  int iCodePage);
HSZ  __stdcall DdeCreateStringHandleW(  DWORD idInst,  LPCWSTR psz,  int iCodePage);




#line 353 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ddeml.h"
DWORD __stdcall DdeQueryStringA(  DWORD idInst,  HSZ hsz,   LPSTR psz,  DWORD cchMax,  int iCodePage);
DWORD __stdcall DdeQueryStringW(  DWORD idInst,  HSZ hsz,   LPWSTR psz,  DWORD cchMax,  int iCodePage);




#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ddeml.h"
BOOL __stdcall DdeFreeStringHandle(  DWORD idInst,   HSZ hsz);
BOOL __stdcall DdeKeepStringHandle(  DWORD idInst,   HSZ hsz);
int __stdcall DdeCmpStringHandles(  HSZ hsz1,  HSZ hsz2);







typedef struct tagDDEML_MSG_HOOK_DATA {    
    UINT_PTR uiLo;  
    UINT_PTR uiHi;
    DWORD cbData;   
    DWORD Data[8];  
} DDEML_MSG_HOOK_DATA, *PDDEML_MSG_HOOK_DATA;


typedef struct tagMONMSGSTRUCT {
    UINT    cb;
    HWND    hwndTo;
    DWORD   dwTime;
    HANDLE  hTask;
    UINT    wMsg;
    WPARAM  wParam;
    LPARAM  lParam;
    DDEML_MSG_HOOK_DATA dmhd;       
} MONMSGSTRUCT, *PMONMSGSTRUCT;

typedef struct tagMONCBSTRUCT {
    UINT   cb;
    DWORD  dwTime;
    HANDLE hTask;
    DWORD  dwRet;
    UINT   wType;
    UINT   wFmt;
    HCONV  hConv;
    HSZ    hsz1;
    HSZ    hsz2;
    HDDEDATA hData;
    ULONG_PTR dwData1;
    ULONG_PTR dwData2;
    CONVCONTEXT cc;                 
    DWORD  cbData;                  
    DWORD  Data[8];                 
} MONCBSTRUCT, *PMONCBSTRUCT;

typedef struct tagMONHSZSTRUCTA {
    UINT   cb;
    BOOL   fsAction;    
    DWORD  dwTime;
    HSZ    hsz;
    HANDLE hTask;
    CHAR    str[1];
} MONHSZSTRUCTA, *PMONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW {
    UINT   cb;
    BOOL   fsAction;    
    DWORD  dwTime;
    HSZ    hsz;
    HANDLE hTask;
    WCHAR   str[1];
} MONHSZSTRUCTW, *PMONHSZSTRUCTW;




typedef MONHSZSTRUCTA MONHSZSTRUCT;
typedef PMONHSZSTRUCTA PMONHSZSTRUCT;
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ddeml.h"






typedef struct tagMONERRSTRUCT {
    UINT    cb;
    UINT    wLastError;
    DWORD   dwTime;
    HANDLE  hTask;
} MONERRSTRUCT, *PMONERRSTRUCT;

typedef struct tagMONLINKSTRUCT {
    UINT    cb;
    DWORD   dwTime;
    HANDLE  hTask;
    BOOL    fEstablished;
    BOOL    fNoData;
    HSZ     hszSvc;
    HSZ     hszTopic;
    HSZ     hszItem;
    UINT    wFmt;
    BOOL    fServer;
    HCONV   hConvServer;
    HCONV   hConvClient;
} MONLINKSTRUCT, *PMONLINKSTRUCT;

typedef struct tagMONCONVSTRUCT {
    UINT    cb;
    BOOL    fConnect;
    DWORD   dwTime;
    HANDLE  hTask;
    HSZ     hszSvc;
    HSZ     hszTopic;
    HCONV   hConvClient;        
    HCONV   hConvServer;        
} MONCONVSTRUCT, *PMONCONVSTRUCT;


















#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ddeml.h"





#line 493 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ddeml.h"


#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\dlgs.h"




























































































































































































































































#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\dlgs.h"









typedef struct tagCRGB
{
    BYTE    bRed;
    BYTE    bGreen;
    BYTE    bBlue;
    BYTE    bExtra;
} CRGB;           


#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\dlgs.h"
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\lzexpand.h"












































INT
__stdcall
LZStart(
	void
	);

void
__stdcall
LZDone(
	void
	);

LONG
__stdcall
CopyLZFile(
	INT,
	INT
	);

LONG
__stdcall
LZCopy(
	INT,
	INT
	);

INT
__stdcall
LZInit(
	INT
	);

INT
__stdcall
GetExpandedNameA(
	LPSTR,
	LPSTR
	);
INT
__stdcall
GetExpandedNameW(
	LPWSTR,
	LPWSTR
	);




#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\lzexpand.h"

INT
__stdcall
LZOpenFileA(
	LPSTR,
	LPOFSTRUCT,
	WORD
	);
INT
__stdcall
LZOpenFileW(
	LPWSTR,
	LPOFSTRUCT,
	WORD
	);




#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\lzexpand.h"

LONG
__stdcall
LZSeek(
	INT,
	LONG,
	INT
	);

INT
__stdcall
LZRead(
	INT,
	LPSTR,
	INT
	);

void
__stdcall
LZClose(
	INT
	);






#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\lzexpand.h"
#line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

































#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"




#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"




#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"








































#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"






typedef UINT        MMVERSION;  


#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
typedef UINT        MMRESULT;   
                                


typedef UINT    *LPUINT;




typedef struct mmtime_tag
{
    UINT            wType;      
    union
    {
        DWORD       ms;         
        DWORD       sample;     
        DWORD       cb;         
        DWORD       ticks;      

        
        struct
        {
            BYTE    hour;       
            BYTE    min;        
            BYTE    sec;        
            BYTE    frame;      
            BYTE    fps;        
            BYTE    dummy;      

            BYTE    pad[2];
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
        } smpte;

        
        struct
        {
            DWORD songptrpos;   
        } midi;
    } u;
} MMTIME, *PMMTIME,  *NPMMTIME,  *LPMMTIME;

























































 
 
 
 
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"











 
#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"




#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"












































                                                   
                                                   












struct HDRVR__ { int unused; }; typedef struct HDRVR__ *HDRVR;
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










typedef struct DRVCONFIGINFOEX {
    DWORD   dwDCISize;
    LPCWSTR  lpszDCISectionName;
    LPCWSTR  lpszDCIAliasName;
    DWORD    dnDevNode;
} DRVCONFIGINFOEX, *PDRVCONFIGINFOEX,  *NPDRVCONFIGINFOEX,  *LPDRVCONFIGINFOEX;








#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"























typedef struct tagDRVCONFIGINFO {
    DWORD   dwDCISize;
    LPCWSTR  lpszDCISectionName;
    LPCWSTR  lpszDCIAliasName;
} DRVCONFIGINFO, *PDRVCONFIGINFO,  *NPDRVCONFIGINFO,  *LPDRVCONFIGINFO;






#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"









typedef LRESULT (__stdcall* DRIVERPROC)(DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM);

__declspec(dllimport) LRESULT   __stdcall CloseDriver(  HDRVR hDriver,  LPARAM lParam1,  LPARAM lParam2);
__declspec(dllimport) HDRVR     __stdcall OpenDriver(  LPCWSTR szDriverName,  LPCWSTR szSectionName,  LPARAM lParam2);
__declspec(dllimport) LRESULT   __stdcall SendDriverMessage(  HDRVR hDriver,  UINT message,  LPARAM lParam1,  LPARAM lParam2);
__declspec(dllimport) HMODULE   __stdcall DrvGetModuleHandle(  HDRVR hDriver);
__declspec(dllimport) HMODULE   __stdcall GetDriverModuleHandle(  HDRVR hDriver);
__declspec(dllimport) LRESULT   __stdcall DefDriverProc(  DWORD_PTR dwDriverIdentifier,  HDRVR hdrvr,  UINT uMsg,  LPARAM lParam1,  LPARAM lParam2);







#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"







#line 382 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"




#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"


















#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
typedef void (__stdcall DRVCALLBACK)(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);

typedef DRVCALLBACK  *LPDRVCALLBACK;

typedef DRVCALLBACK     *PDRVCALLBACK;
#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"




#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










__declspec(dllimport) BOOL __stdcall sndPlaySoundA(  LPCSTR pszSound,  UINT fuSound);
__declspec(dllimport) BOOL __stdcall sndPlaySoundW(  LPCWSTR pszSound,  UINT fuSound);




#line 447 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



















#line 471 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
















__declspec(dllimport) BOOL __stdcall PlaySoundA(  LPCSTR pszSound,  HMODULE hmod,  DWORD fdwSound);
__declspec(dllimport) BOOL __stdcall PlaySoundW(  LPCWSTR pszSound,  HMODULE hmod,  DWORD fdwSound);




#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
















struct HWAVE__ { int unused; }; typedef struct HWAVE__ *HWAVE;
struct HWAVEIN__ { int unused; }; typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVEOUT__ { int unused; }; typedef struct HWAVEOUT__ *HWAVEOUT;
typedef HWAVEIN  *LPHWAVEIN;
typedef HWAVEOUT  *LPHWAVEOUT;
typedef DRVCALLBACK WAVECALLBACK;
typedef WAVECALLBACK  *LPWAVECALLBACK;



















#line 543 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"


typedef struct wavehdr_tag {
    LPSTR       lpData;                 
    DWORD       dwBufferLength;         
    DWORD       dwBytesRecorded;        
    DWORD_PTR   dwUser;                 
    DWORD       dwFlags;                
    DWORD       dwLoops;                
    struct wavehdr_tag  *lpNext;     
    DWORD_PTR   reserved;               
} WAVEHDR, *PWAVEHDR,  *NPWAVEHDR,  *LPWAVEHDR;











typedef struct tagWAVEOUTCAPSA {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    CHAR    szPname[32];  
    DWORD   dwFormats;             
    WORD    wChannels;             
    WORD    wReserved1;            
    DWORD   dwSupport;             
} WAVEOUTCAPSA, *PWAVEOUTCAPSA, *NPWAVEOUTCAPSA, *LPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    WCHAR   szPname[32];  
    DWORD   dwFormats;             
    WORD    wChannels;             
    WORD    wReserved1;            
    DWORD   dwSupport;             
} WAVEOUTCAPSW, *PWAVEOUTCAPSW, *NPWAVEOUTCAPSW, *LPWAVEOUTCAPSW;






typedef WAVEOUTCAPSA WAVEOUTCAPS;
typedef PWAVEOUTCAPSA PWAVEOUTCAPS;
typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS;
typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS;
#line 597 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
typedef struct tagWAVEOUTCAPS2A {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    CHAR    szPname[32];  
    DWORD   dwFormats;             
    WORD    wChannels;             
    WORD    wReserved1;            
    DWORD   dwSupport;             
    GUID    ManufacturerGuid;      
    GUID    ProductGuid;           
    GUID    NameGuid;              
} WAVEOUTCAPS2A, *PWAVEOUTCAPS2A, *NPWAVEOUTCAPS2A, *LPWAVEOUTCAPS2A;
typedef struct tagWAVEOUTCAPS2W {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    WCHAR   szPname[32];  
    DWORD   dwFormats;             
    WORD    wChannels;             
    WORD    wReserved1;            
    DWORD   dwSupport;             
    GUID    ManufacturerGuid;      
    GUID    ProductGuid;           
    GUID    NameGuid;              
} WAVEOUTCAPS2W, *PWAVEOUTCAPS2W, *NPWAVEOUTCAPS2W, *LPWAVEOUTCAPS2W;






typedef WAVEOUTCAPS2A WAVEOUTCAPS2;
typedef PWAVEOUTCAPS2A PWAVEOUTCAPS2;
typedef NPWAVEOUTCAPS2A NPWAVEOUTCAPS2;
typedef LPWAVEOUTCAPS2A LPWAVEOUTCAPS2;
#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"











#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"













typedef struct tagWAVEINCAPSA {
    WORD    wMid;                    
    WORD    wPid;                    
    MMVERSION vDriverVersion;        
    CHAR    szPname[32];    
    DWORD   dwFormats;               
    WORD    wChannels;               
    WORD    wReserved1;              
} WAVEINCAPSA, *PWAVEINCAPSA, *NPWAVEINCAPSA, *LPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW {
    WORD    wMid;                    
    WORD    wPid;                    
    MMVERSION vDriverVersion;        
    WCHAR   szPname[32];    
    DWORD   dwFormats;               
    WORD    wChannels;               
    WORD    wReserved1;              
} WAVEINCAPSW, *PWAVEINCAPSW, *NPWAVEINCAPSW, *LPWAVEINCAPSW;






typedef WAVEINCAPSA WAVEINCAPS;
typedef PWAVEINCAPSA PWAVEINCAPS;
typedef NPWAVEINCAPSA NPWAVEINCAPS;
typedef LPWAVEINCAPSA LPWAVEINCAPS;
#line 688 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
typedef struct tagWAVEINCAPS2A {
    WORD    wMid;                    
    WORD    wPid;                    
    MMVERSION vDriverVersion;        
    CHAR    szPname[32];    
    DWORD   dwFormats;               
    WORD    wChannels;               
    WORD    wReserved1;              
    GUID    ManufacturerGuid;        
    GUID    ProductGuid;             
    GUID    NameGuid;                
} WAVEINCAPS2A, *PWAVEINCAPS2A, *NPWAVEINCAPS2A, *LPWAVEINCAPS2A;
typedef struct tagWAVEINCAPS2W {
    WORD    wMid;                    
    WORD    wPid;                    
    MMVERSION vDriverVersion;        
    WCHAR   szPname[32];    
    DWORD   dwFormats;               
    WORD    wChannels;               
    WORD    wReserved1;              
    GUID    ManufacturerGuid;        
    GUID    ProductGuid;             
    GUID    NameGuid;                
} WAVEINCAPS2W, *PWAVEINCAPS2W, *NPWAVEINCAPS2W, *LPWAVEINCAPS2W;






typedef WAVEINCAPS2A WAVEINCAPS2;
typedef PWAVEINCAPS2A PWAVEINCAPS2;
typedef NPWAVEINCAPS2A NPWAVEINCAPS2;
typedef LPWAVEINCAPS2A LPWAVEINCAPS2;
#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










#line 734 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

































typedef struct waveformat_tag {
    WORD    wFormatTag;        
    WORD    nChannels;         
    DWORD   nSamplesPerSec;    
    DWORD   nAvgBytesPerSec;   
    WORD    nBlockAlign;       
} WAVEFORMAT, *PWAVEFORMAT,  *NPWAVEFORMAT,  *LPWAVEFORMAT;






typedef struct pcmwaveformat_tag {
    WAVEFORMAT  wf;
    WORD        wBitsPerSample;
} PCMWAVEFORMAT, *PPCMWAVEFORMAT,  *NPPCMWAVEFORMAT,  *LPPCMWAVEFORMAT;
#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"








typedef struct tWAVEFORMATEX
{
    WORD        wFormatTag;         
    WORD        nChannels;          
    DWORD       nSamplesPerSec;     
    DWORD       nAvgBytesPerSec;    
    WORD        nBlockAlign;        
    WORD        wBitsPerSample;     
    WORD        cbSize;             
                                    
} WAVEFORMATEX, *PWAVEFORMATEX,  *NPWAVEFORMATEX,  *LPWAVEFORMATEX;

#line 806 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
typedef const WAVEFORMATEX  *LPCWAVEFORMATEX;


__declspec(dllimport) UINT __stdcall waveOutGetNumDevs(void);



__declspec(dllimport) MMRESULT __stdcall waveOutGetDevCapsA(  UINT_PTR uDeviceID,  LPWAVEOUTCAPSA pwoc,  UINT cbwoc);
__declspec(dllimport) MMRESULT __stdcall waveOutGetDevCapsW(  UINT_PTR uDeviceID,  LPWAVEOUTCAPSW pwoc,  UINT cbwoc);




#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 824 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"


__declspec(dllimport) MMRESULT __stdcall waveOutGetVolume(  HWAVEOUT hwo,  LPDWORD pdwVolume);
__declspec(dllimport) MMRESULT __stdcall waveOutSetVolume(  HWAVEOUT hwo,  DWORD dwVolume);



#line 832 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



__declspec(dllimport) MMRESULT __stdcall waveOutGetErrorTextA(  MMRESULT mmrError,  LPSTR pszText,  UINT cchText);
__declspec(dllimport) MMRESULT __stdcall waveOutGetErrorTextW(  MMRESULT mmrError,  LPWSTR pszText,  UINT cchText);




#line 842 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 846 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall waveOutOpen(  LPHWAVEOUT phwo,  UINT uDeviceID,
     LPCWAVEFORMATEX pwfx,  DWORD_PTR dwCallback,  DWORD_PTR dwInstance,  DWORD fdwOpen);

__declspec(dllimport) MMRESULT __stdcall waveOutClose(   HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutPrepareHeader(  HWAVEOUT hwo,   LPWAVEHDR pwh,  UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveOutUnprepareHeader(  HWAVEOUT hwo,   LPWAVEHDR pwh,  UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveOutWrite(  HWAVEOUT hwo,   LPWAVEHDR pwh,  UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveOutPause(  HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutRestart(  HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutReset(  HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutBreakLoop(  HWAVEOUT hwo);
__declspec(dllimport) MMRESULT __stdcall waveOutGetPosition(  HWAVEOUT hwo,   LPMMTIME pmmt,  UINT cbmmt);
__declspec(dllimport) MMRESULT __stdcall waveOutGetPitch(  HWAVEOUT hwo,  LPDWORD pdwPitch);
__declspec(dllimport) MMRESULT __stdcall waveOutSetPitch(  HWAVEOUT hwo,  DWORD dwPitch);
__declspec(dllimport) MMRESULT __stdcall waveOutGetPlaybackRate(  HWAVEOUT hwo,  LPDWORD pdwRate);
__declspec(dllimport) MMRESULT __stdcall waveOutSetPlaybackRate(  HWAVEOUT hwo,  DWORD dwRate);
__declspec(dllimport) MMRESULT __stdcall waveOutGetID(  HWAVEOUT hwo,  LPUINT puDeviceID);



__declspec(dllimport) MMRESULT __stdcall waveOutMessage(  HWAVEOUT hwo,  UINT uMsg,  DWORD_PTR dw1,  DWORD_PTR dw2);


#line 871 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
#line 872 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

__declspec(dllimport) UINT __stdcall waveInGetNumDevs(void);



__declspec(dllimport) MMRESULT __stdcall waveInGetDevCapsA(  UINT_PTR uDeviceID,  LPWAVEINCAPSA pwic,  UINT cbwic);
__declspec(dllimport) MMRESULT __stdcall waveInGetDevCapsW(  UINT_PTR uDeviceID,  LPWAVEINCAPSW pwic,  UINT cbwic);




#line 884 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 888 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



__declspec(dllimport) MMRESULT __stdcall waveInGetErrorTextA( MMRESULT mmrError,  LPSTR pszText,  UINT cchText);
__declspec(dllimport) MMRESULT __stdcall waveInGetErrorTextW( MMRESULT mmrError,  LPWSTR pszText,  UINT cchText);




#line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 902 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall waveInOpen(  LPHWAVEIN phwi,  UINT uDeviceID,
     LPCWAVEFORMATEX pwfx,  DWORD_PTR dwCallback,  DWORD_PTR dwInstance,  DWORD fdwOpen);

__declspec(dllimport) MMRESULT __stdcall waveInClose(   HWAVEIN hwi);
__declspec(dllimport) MMRESULT __stdcall waveInPrepareHeader(  HWAVEIN hwi,   LPWAVEHDR pwh,  UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveInUnprepareHeader(  HWAVEIN hwi,   LPWAVEHDR pwh, UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveInAddBuffer(  HWAVEIN hwi,   LPWAVEHDR pwh,  UINT cbwh);
__declspec(dllimport) MMRESULT __stdcall waveInStart(  HWAVEIN hwi);
__declspec(dllimport) MMRESULT __stdcall waveInStop(  HWAVEIN hwi);
__declspec(dllimport) MMRESULT __stdcall waveInReset(  HWAVEIN hwi);
__declspec(dllimport) MMRESULT __stdcall waveInGetPosition(  HWAVEIN hwi,   LPMMTIME pmmt,  UINT cbmmt);
__declspec(dllimport) MMRESULT __stdcall waveInGetID(  HWAVEIN hwi,  LPUINT puDeviceID);



__declspec(dllimport) MMRESULT __stdcall waveInMessage(  HWAVEIN hwi,  UINT uMsg,  DWORD_PTR dw1,  DWORD_PTR dw2);


#line 922 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
#line 923 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

#line 925 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"




















struct HMIDI__ { int unused; }; typedef struct HMIDI__ *HMIDI;
struct HMIDIIN__ { int unused; }; typedef struct HMIDIIN__ *HMIDIIN;
struct HMIDIOUT__ { int unused; }; typedef struct HMIDIOUT__ *HMIDIOUT;
struct HMIDISTRM__ { int unused; }; typedef struct HMIDISTRM__ *HMIDISTRM;
typedef HMIDI  *LPHMIDI;
typedef HMIDIIN  *LPHMIDIIN;
typedef HMIDIOUT  *LPHMIDIOUT;
typedef HMIDISTRM  *LPHMIDISTRM;
typedef DRVCALLBACK MIDICALLBACK;
typedef MIDICALLBACK  *LPMIDICALLBACK;

typedef WORD PATCHARRAY[128];
typedef WORD  *LPPATCHARRAY;
typedef WORD KEYARRAY[128];
typedef WORD  *LPKEYARRAY;















#line 976 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"








#line 985 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










typedef struct tagMIDIOUTCAPSA {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    CHAR    szPname[32];  
    WORD    wTechnology;           
    WORD    wVoices;               
    WORD    wNotes;                
    WORD    wChannelMask;          
    DWORD   dwSupport;             
} MIDIOUTCAPSA, *PMIDIOUTCAPSA, *NPMIDIOUTCAPSA, *LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    WCHAR   szPname[32];  
    WORD    wTechnology;           
    WORD    wVoices;               
    WORD    wNotes;                
    WORD    wChannelMask;          
    DWORD   dwSupport;             
} MIDIOUTCAPSW, *PMIDIOUTCAPSW, *NPMIDIOUTCAPSW, *LPMIDIOUTCAPSW;






typedef MIDIOUTCAPSA MIDIOUTCAPS;
typedef PMIDIOUTCAPSA PMIDIOUTCAPS;
typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS;
typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;
#line 1028 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
typedef struct tagMIDIOUTCAPS2A {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    CHAR    szPname[32];  
    WORD    wTechnology;           
    WORD    wVoices;               
    WORD    wNotes;                
    WORD    wChannelMask;          
    DWORD   dwSupport;             
    GUID    ManufacturerGuid;      
    GUID    ProductGuid;           
    GUID    NameGuid;              
} MIDIOUTCAPS2A, *PMIDIOUTCAPS2A, *NPMIDIOUTCAPS2A, *LPMIDIOUTCAPS2A;
typedef struct tagMIDIOUTCAPS2W {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    WCHAR   szPname[32];  
    WORD    wTechnology;           
    WORD    wVoices;               
    WORD    wNotes;                
    WORD    wChannelMask;          
    DWORD   dwSupport;             
    GUID    ManufacturerGuid;      
    GUID    ProductGuid;           
    GUID    NameGuid;              
} MIDIOUTCAPS2W, *PMIDIOUTCAPS2W, *NPMIDIOUTCAPS2W, *LPMIDIOUTCAPS2W;






typedef MIDIOUTCAPS2A MIDIOUTCAPS2;
typedef PMIDIOUTCAPS2A PMIDIOUTCAPS2;
typedef NPMIDIOUTCAPS2A NPMIDIOUTCAPS2;
typedef LPMIDIOUTCAPS2A LPMIDIOUTCAPS2;
#line 1067 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"













#line 1081 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
















#line 1098 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"




typedef struct tagMIDIINCAPSA {
    WORD        wMid;                   
    WORD        wPid;                   
    MMVERSION   vDriverVersion;         
    CHAR        szPname[32];   

    DWORD   dwSupport;             
#line 1110 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
} MIDIINCAPSA, *PMIDIINCAPSA, *NPMIDIINCAPSA, *LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW {
    WORD        wMid;                   
    WORD        wPid;                   
    MMVERSION   vDriverVersion;         
    WCHAR       szPname[32];   

    DWORD   dwSupport;             
#line 1119 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
} MIDIINCAPSW, *PMIDIINCAPSW, *NPMIDIINCAPSW, *LPMIDIINCAPSW;






typedef MIDIINCAPSA MIDIINCAPS;
typedef PMIDIINCAPSA PMIDIINCAPS;
typedef NPMIDIINCAPSA NPMIDIINCAPS;
typedef LPMIDIINCAPSA LPMIDIINCAPS;
#line 1131 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
typedef struct tagMIDIINCAPS2A {
    WORD        wMid;                   
    WORD        wPid;                   
    MMVERSION   vDriverVersion;         
    CHAR        szPname[32];   

    DWORD       dwSupport;              
#line 1139 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
    GUID        ManufacturerGuid;       
    GUID        ProductGuid;            
    GUID        NameGuid;               
} MIDIINCAPS2A, *PMIDIINCAPS2A, *NPMIDIINCAPS2A, *LPMIDIINCAPS2A;
typedef struct tagMIDIINCAPS2W {
    WORD        wMid;                   
    WORD        wPid;                   
    MMVERSION   vDriverVersion;         
    WCHAR       szPname[32];   

    DWORD       dwSupport;              
#line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
    GUID        ManufacturerGuid;       
    GUID        ProductGuid;            
    GUID        NameGuid;               
} MIDIINCAPS2W, *PMIDIINCAPS2W, *NPMIDIINCAPS2W, *LPMIDIINCAPS2W;






typedef MIDIINCAPS2A MIDIINCAPS2;
typedef PMIDIINCAPS2A PMIDIINCAPS2;
typedef NPMIDIINCAPS2A NPMIDIINCAPS2;
typedef LPMIDIINCAPS2A LPMIDIINCAPS2;
#line 1166 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"











#line 1178 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



typedef struct midihdr_tag {
    LPSTR       lpData;               
    DWORD       dwBufferLength;       
    DWORD       dwBytesRecorded;      
    DWORD_PTR   dwUser;               
    DWORD       dwFlags;              
    struct midihdr_tag  *lpNext;   
    DWORD_PTR   reserved;             

    DWORD       dwOffset;             
    DWORD_PTR   dwReserved[8];        
#line 1193 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
} MIDIHDR, *PMIDIHDR,  *NPMIDIHDR,  *LPMIDIHDR;



typedef struct midievent_tag
{
    DWORD       dwDeltaTime;          
    DWORD       dwStreamID;           
    DWORD       dwEvent;              
    DWORD       dwParms[1];           
} MIDIEVENT;

typedef struct midistrmbuffver_tag
{
    DWORD       dwVersion;                  
    DWORD       dwMid;                      
    DWORD       dwOEMVersion;               
} MIDISTRMBUFFVER;
#line 1212 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



















































typedef struct midiproptimediv_tag
{
    DWORD       cbStruct;
    DWORD       dwTimeDiv;
} MIDIPROPTIMEDIV,  *LPMIDIPROPTIMEDIV;

typedef struct midiproptempo_tag
{
    DWORD       cbStruct;
    DWORD       dwTempo;
} MIDIPROPTEMPO,  *LPMIDIPROPTEMPO;

#line 1276 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"


__declspec(dllimport) UINT __stdcall midiOutGetNumDevs(void);

__declspec(dllimport) MMRESULT __stdcall midiStreamOpen(  LPHMIDISTRM phms,  LPUINT puDeviceID,  DWORD cMidi,  DWORD_PTR dwCallback,  DWORD_PTR dwInstance,  DWORD fdwOpen);
__declspec(dllimport) MMRESULT __stdcall midiStreamClose(  HMIDISTRM hms);

__declspec(dllimport) MMRESULT __stdcall midiStreamProperty(  HMIDISTRM hms,  LPBYTE lppropdata,  DWORD dwProperty);
__declspec(dllimport) MMRESULT __stdcall midiStreamPosition(  HMIDISTRM hms,  LPMMTIME lpmmt,  UINT cbmmt);

__declspec(dllimport) MMRESULT __stdcall midiStreamOut(  HMIDISTRM hms,  LPMIDIHDR pmh,  UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiStreamPause(  HMIDISTRM hms);
__declspec(dllimport) MMRESULT __stdcall midiStreamRestart(  HMIDISTRM hms);
__declspec(dllimport) MMRESULT __stdcall midiStreamStop(  HMIDISTRM hms);


__declspec(dllimport) MMRESULT __stdcall midiConnect(  HMIDI hmi,  HMIDIOUT hmo,  LPVOID pReserved);
__declspec(dllimport) MMRESULT __stdcall midiDisconnect(  HMIDI hmi,  HMIDIOUT hmo,  LPVOID pReserved);
#line 1295 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
#line 1296 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



__declspec(dllimport) MMRESULT __stdcall midiOutGetDevCapsA(  UINT_PTR uDeviceID,  LPMIDIOUTCAPSA pmoc,  UINT cbmoc);
__declspec(dllimport) MMRESULT __stdcall midiOutGetDevCapsW(  UINT_PTR uDeviceID,  LPMIDIOUTCAPSW pmoc,  UINT cbmoc);




#line 1306 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 1310 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"


__declspec(dllimport) MMRESULT __stdcall midiOutGetVolume(  HMIDIOUT hmo,  LPDWORD pdwVolume);
__declspec(dllimport) MMRESULT __stdcall midiOutSetVolume(  HMIDIOUT hmo,  DWORD dwVolume);



#line 1318 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



__declspec(dllimport) MMRESULT __stdcall midiOutGetErrorTextA(  MMRESULT mmrError,  LPSTR pszText,  UINT cchText);
__declspec(dllimport) MMRESULT __stdcall midiOutGetErrorTextW(  MMRESULT mmrError,  LPWSTR pszText,  UINT cchText);




#line 1328 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 1332 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall midiOutOpen(  LPHMIDIOUT phmo,  UINT uDeviceID,
     DWORD_PTR dwCallback,  DWORD_PTR dwInstance,  DWORD fdwOpen);
__declspec(dllimport) MMRESULT __stdcall midiOutClose(   HMIDIOUT hmo);
__declspec(dllimport) MMRESULT __stdcall midiOutPrepareHeader(  HMIDIOUT hmo,   LPMIDIHDR pmh,  UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiOutUnprepareHeader( HMIDIOUT hmo,   LPMIDIHDR pmh,  UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiOutShortMsg(  HMIDIOUT hmo,  DWORD dwMsg);
__declspec(dllimport) MMRESULT __stdcall midiOutLongMsg( HMIDIOUT hmo,  LPMIDIHDR pmh,  UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiOutReset(  HMIDIOUT hmo);
__declspec(dllimport) MMRESULT __stdcall midiOutCachePatches(  HMIDIOUT hmo,  UINT uBank,  LPWORD pwpa,  UINT fuCache);
__declspec(dllimport) MMRESULT __stdcall midiOutCacheDrumPatches(  HMIDIOUT hmo,  UINT uPatch,  LPWORD pwkya,  UINT fuCache);
__declspec(dllimport) MMRESULT __stdcall midiOutGetID(  HMIDIOUT hmo,  LPUINT puDeviceID);



__declspec(dllimport) MMRESULT __stdcall midiOutMessage(  HMIDIOUT hmo,  UINT uMsg,  DWORD_PTR dw1,  DWORD_PTR dw2);


#line 1351 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
#line 1352 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

__declspec(dllimport) UINT __stdcall midiInGetNumDevs(void);



__declspec(dllimport) MMRESULT __stdcall midiInGetDevCapsA(  UINT_PTR uDeviceID,  LPMIDIINCAPSA pmic,  UINT cbmic);
__declspec(dllimport) MMRESULT __stdcall midiInGetDevCapsW(  UINT_PTR uDeviceID,  LPMIDIINCAPSW pmic,  UINT cbmic);




#line 1364 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall midiInGetErrorTextA(  MMRESULT mmrError,  LPSTR pszText,  UINT cchText);
__declspec(dllimport) MMRESULT __stdcall midiInGetErrorTextW(  MMRESULT mmrError,  LPWSTR pszText,  UINT cchText);




#line 1371 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"




#line 1376 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall midiInOpen(  LPHMIDIIN phmi,  UINT uDeviceID,
         DWORD_PTR dwCallback,  DWORD_PTR dwInstance,  DWORD fdwOpen);
__declspec(dllimport) MMRESULT __stdcall midiInClose(   HMIDIIN hmi);
__declspec(dllimport) MMRESULT __stdcall midiInPrepareHeader(  HMIDIIN hmi,   LPMIDIHDR pmh,  UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiInUnprepareHeader(  HMIDIIN hmi,   LPMIDIHDR pmh,  UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiInAddBuffer(  HMIDIIN hmi,  LPMIDIHDR pmh,  UINT cbmh);
__declspec(dllimport) MMRESULT __stdcall midiInStart(  HMIDIIN hmi);
__declspec(dllimport) MMRESULT __stdcall midiInStop(  HMIDIIN hmi);
__declspec(dllimport) MMRESULT __stdcall midiInReset(  HMIDIIN hmi);
__declspec(dllimport) MMRESULT __stdcall midiInGetID(  HMIDIIN hmi,  LPUINT puDeviceID);



__declspec(dllimport) MMRESULT __stdcall midiInMessage(  HMIDIIN hmi,  UINT uMsg,  DWORD_PTR dw1,  DWORD_PTR dw2);


#line 1394 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
#line 1395 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"


#line 1398 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"















typedef struct tagAUXCAPSA {
    WORD        wMid;                
    WORD        wPid;                
    MMVERSION   vDriverVersion;      
    CHAR        szPname[32];
    WORD        wTechnology;         
    WORD        wReserved1;          
    DWORD       dwSupport;           
} AUXCAPSA, *PAUXCAPSA, *NPAUXCAPSA, *LPAUXCAPSA;
typedef struct tagAUXCAPSW {
    WORD        wMid;                
    WORD        wPid;                
    MMVERSION   vDriverVersion;      
    WCHAR       szPname[32];
    WORD        wTechnology;         
    WORD        wReserved1;          
    DWORD       dwSupport;           
} AUXCAPSW, *PAUXCAPSW, *NPAUXCAPSW, *LPAUXCAPSW;






typedef AUXCAPSA AUXCAPS;
typedef PAUXCAPSA PAUXCAPS;
typedef NPAUXCAPSA NPAUXCAPS;
typedef LPAUXCAPSA LPAUXCAPS;
#line 1442 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
typedef struct tagAUXCAPS2A {
    WORD        wMid;                
    WORD        wPid;                
    MMVERSION   vDriverVersion;      
    CHAR        szPname[32];
    WORD        wTechnology;         
    WORD        wReserved1;          
    DWORD       dwSupport;           
    GUID        ManufacturerGuid;    
    GUID        ProductGuid;         
    GUID        NameGuid;            
} AUXCAPS2A, *PAUXCAPS2A, *NPAUXCAPS2A, *LPAUXCAPS2A;
typedef struct tagAUXCAPS2W {
    WORD        wMid;                
    WORD        wPid;                
    MMVERSION   vDriverVersion;      
    WCHAR       szPname[32];
    WORD        wTechnology;         
    WORD        wReserved1;          
    DWORD       dwSupport;           
    GUID        ManufacturerGuid;    
    GUID        ProductGuid;         
    GUID        NameGuid;            
} AUXCAPS2W, *PAUXCAPS2W, *NPAUXCAPS2W, *LPAUXCAPS2W;






typedef AUXCAPS2A AUXCAPS2;
typedef PAUXCAPS2A PAUXCAPS2;
typedef NPAUXCAPS2A NPAUXCAPS2;
typedef LPAUXCAPS2A LPAUXCAPS2;
#line 1477 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










#line 1488 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










__declspec(dllimport) UINT __stdcall auxGetNumDevs(void);


__declspec(dllimport) MMRESULT __stdcall auxGetDevCapsA(  UINT_PTR uDeviceID,  LPAUXCAPSA pac,  UINT cbac);
__declspec(dllimport) MMRESULT __stdcall auxGetDevCapsW(  UINT_PTR uDeviceID,  LPAUXCAPSW pac,  UINT cbac);




#line 1508 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 1512 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall auxSetVolume(  UINT uDeviceID,  DWORD dwVolume);
__declspec(dllimport) MMRESULT __stdcall auxGetVolume(  UINT uDeviceID,  LPDWORD pdwVolume);



__declspec(dllimport) MMRESULT __stdcall auxOutMessage(  UINT uDeviceID,  UINT uMsg,  DWORD_PTR dw1,  DWORD_PTR dw2);


#line 1521 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
#line 1522 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

#line 1524 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"








struct HMIXEROBJ__ { int unused; }; typedef struct HMIXEROBJ__ *HMIXEROBJ;
typedef HMIXEROBJ  *LPHMIXEROBJ;

struct HMIXER__ { int unused; }; typedef struct HMIXER__ *HMIXER;
typedef HMIXER      *LPHMIXER;




























__declspec(dllimport) UINT __stdcall mixerGetNumDevs(void);



typedef struct tagMIXERCAPSA {
    WORD            wMid;                   
    WORD            wPid;                   
    MMVERSION       vDriverVersion;         
    CHAR            szPname[32];   
    DWORD           fdwSupport;             
    DWORD           cDestinations;          
} MIXERCAPSA, *PMIXERCAPSA, *LPMIXERCAPSA;
typedef struct tagMIXERCAPSW {
    WORD            wMid;                   
    WORD            wPid;                   
    MMVERSION       vDriverVersion;         
    WCHAR           szPname[32];   
    DWORD           fdwSupport;             
    DWORD           cDestinations;          
} MIXERCAPSW, *PMIXERCAPSW, *LPMIXERCAPSW;





typedef MIXERCAPSA MIXERCAPS;
typedef PMIXERCAPSA PMIXERCAPS;
typedef LPMIXERCAPSA LPMIXERCAPS;
#line 1594 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
typedef struct tagMIXERCAPS2A {
    WORD            wMid;                   
    WORD            wPid;                   
    MMVERSION       vDriverVersion;         
    CHAR            szPname[32];   
    DWORD           fdwSupport;             
    DWORD           cDestinations;          
    GUID            ManufacturerGuid;       
    GUID            ProductGuid;            
    GUID            NameGuid;               
} MIXERCAPS2A, *PMIXERCAPS2A, *LPMIXERCAPS2A;
typedef struct tagMIXERCAPS2W {
    WORD            wMid;                   
    WORD            wPid;                   
    MMVERSION       vDriverVersion;         
    WCHAR           szPname[32];   
    DWORD           fdwSupport;             
    DWORD           cDestinations;          
    GUID            ManufacturerGuid;       
    GUID            ProductGuid;            
    GUID            NameGuid;               
} MIXERCAPS2W, *PMIXERCAPS2W, *LPMIXERCAPS2W;





typedef MIXERCAPS2A MIXERCAPS2;
typedef PMIXERCAPS2A PMIXERCAPS2;
typedef LPMIXERCAPS2A LPMIXERCAPS2;
#line 1625 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










#line 1636 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"




__declspec(dllimport) MMRESULT __stdcall mixerGetDevCapsA(  UINT_PTR uMxId,  LPMIXERCAPSA pmxcaps,  UINT cbmxcaps);
__declspec(dllimport) MMRESULT __stdcall mixerGetDevCapsW(  UINT_PTR uMxId,  LPMIXERCAPSW pmxcaps,  UINT cbmxcaps);




#line 1647 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 1651 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall mixerOpen(  LPHMIXER phmx,  UINT uMxId,  DWORD_PTR dwCallback,  DWORD_PTR dwInstance,  DWORD fdwOpen);


__declspec(dllimport) MMRESULT __stdcall mixerClose(   HMIXER hmx);

__declspec(dllimport) DWORD __stdcall mixerMessage(  HMIXER hmx,  UINT uMsg,  DWORD_PTR dwParam1,  DWORD_PTR dwParam2);



typedef struct tagMIXERLINEA {
    DWORD       cbStruct;               
    DWORD       dwDestination;          
    DWORD       dwSource;               
    DWORD       dwLineID;               
    DWORD       fdwLine;                
    DWORD_PTR   dwUser;                 
    DWORD       dwComponentType;        
    DWORD       cChannels;              
    DWORD       cConnections;           
    DWORD       cControls;              
    CHAR        szShortName[16];
    CHAR        szName[64];
    struct {
        DWORD       dwType;                 
        DWORD       dwDeviceID;             
        WORD        wMid;                   
        WORD        wPid;                   
        MMVERSION   vDriverVersion;         
        CHAR        szPname[32];   
    } Target;
} MIXERLINEA, *PMIXERLINEA, *LPMIXERLINEA;
typedef struct tagMIXERLINEW {
    DWORD       cbStruct;               
    DWORD       dwDestination;          
    DWORD       dwSource;               
    DWORD       dwLineID;               
    DWORD       fdwLine;                
    DWORD_PTR   dwUser;                 
    DWORD       dwComponentType;        
    DWORD       cChannels;              
    DWORD       cConnections;           
    DWORD       cControls;              
    WCHAR       szShortName[16];
    WCHAR       szName[64];
    struct {
        DWORD       dwType;                 
        DWORD       dwDeviceID;             
        WORD        wMid;                   
        WORD        wPid;                   
        MMVERSION   vDriverVersion;         
        WCHAR       szPname[32];   
    } Target;
} MIXERLINEW, *PMIXERLINEW, *LPMIXERLINEW;





typedef MIXERLINEA MIXERLINE;
typedef PMIXERLINEA PMIXERLINE;
typedef LPMIXERLINEA LPMIXERLINE;
#line 1714 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
























#line 1739 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
























































__declspec(dllimport) MMRESULT __stdcall mixerGetLineInfoA(  HMIXEROBJ hmxobj,  LPMIXERLINEA pmxl,  DWORD fdwInfo);
__declspec(dllimport) MMRESULT __stdcall mixerGetLineInfoW(  HMIXEROBJ hmxobj,  LPMIXERLINEW pmxl,  DWORD fdwInfo);




#line 1802 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 1806 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










__declspec(dllimport) MMRESULT __stdcall mixerGetID(  HMIXEROBJ hmxobj,  UINT  *puMxId,  DWORD fdwId);








typedef struct tagMIXERCONTROLA {
    DWORD           cbStruct;           
    DWORD           dwControlID;        
    DWORD           dwControlType;      
    DWORD           fdwControl;         
    DWORD           cMultipleItems;     
    CHAR            szShortName[16];
    CHAR            szName[64];
    union {
        struct {
            LONG    lMinimum;           
            LONG    lMaximum;           
        };
        struct {
            DWORD   dwMinimum;          
            DWORD   dwMaximum;          
        };
        DWORD       dwReserved[6];
    } Bounds;
    union {
        DWORD       cSteps;             
        DWORD       cbCustomData;       
        DWORD       dwReserved[6];      
    } Metrics;
} MIXERCONTROLA, *PMIXERCONTROLA, *LPMIXERCONTROLA;
typedef struct tagMIXERCONTROLW {
    DWORD           cbStruct;           
    DWORD           dwControlID;        
    DWORD           dwControlType;      
    DWORD           fdwControl;         
    DWORD           cMultipleItems;     
    WCHAR           szShortName[16];
    WCHAR           szName[64];
    union {
        struct {
            LONG    lMinimum;           
            LONG    lMaximum;           
        };
        struct {
            DWORD   dwMinimum;          
            DWORD   dwMaximum;          
        };
        DWORD       dwReserved[6];
    } Bounds;
    union {
        DWORD       cSteps;             
        DWORD       cbCustomData;       
        DWORD       dwReserved[6];      
    } Metrics;
} MIXERCONTROLW, *PMIXERCONTROLW, *LPMIXERCONTROLW;





typedef MIXERCONTROLA MIXERCONTROL;
typedef PMIXERCONTROLA PMIXERCONTROL;
typedef LPMIXERCONTROLA LPMIXERCONTROL;
#line 1884 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



























#line 1912 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

























































































typedef struct tagMIXERLINECONTROLSA {
    DWORD           cbStruct;       
    DWORD           dwLineID;       
    union {
        DWORD       dwControlID;    
        DWORD       dwControlType;  
    };
    DWORD           cControls;      
    DWORD           cbmxctrl;       
    LPMIXERCONTROLA pamxctrl;       
} MIXERLINECONTROLSA, *PMIXERLINECONTROLSA, *LPMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW {
    DWORD           cbStruct;       
    DWORD           dwLineID;       
    union {
        DWORD       dwControlID;    
        DWORD       dwControlType;  
    };
    DWORD           cControls;      
    DWORD           cbmxctrl;       
    LPMIXERCONTROLW pamxctrl;       
} MIXERLINECONTROLSW, *PMIXERLINECONTROLSW, *LPMIXERLINECONTROLSW;





typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS;
typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;
#line 2032 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"













#line 2046 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"







__declspec(dllimport) MMRESULT __stdcall mixerGetLineControlsA(  HMIXEROBJ hmxobj,   LPMIXERLINECONTROLSA pmxlc,  DWORD fdwControls);
__declspec(dllimport) MMRESULT __stdcall mixerGetLineControlsW(  HMIXEROBJ hmxobj,   LPMIXERLINECONTROLSW pmxlc,  DWORD fdwControls);




#line 2060 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 2064 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"








typedef struct tMIXERCONTROLDETAILS {
    DWORD           cbStruct;       
    DWORD           dwControlID;    
    DWORD           cChannels;      
    union {
        HWND        hwndOwner;      
        DWORD       cMultipleItems; 
    };
    DWORD           cbDetails;      
    LPVOID          paDetails;      
} MIXERCONTROLDETAILS, *PMIXERCONTROLDETAILS,  *LPMIXERCONTROLDETAILS;








typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
    DWORD           dwParam1;
    DWORD           dwParam2;
    CHAR            szName[64];
} MIXERCONTROLDETAILS_LISTTEXTA, *PMIXERCONTROLDETAILS_LISTTEXTA, *LPMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
    DWORD           dwParam1;
    DWORD           dwParam2;
    WCHAR           szName[64];
} MIXERCONTROLDETAILS_LISTTEXTW, *PMIXERCONTROLDETAILS_LISTTEXTW, *LPMIXERCONTROLDETAILS_LISTTEXTW;





typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT;
typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;
#line 2110 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"







#line 2118 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"





typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
    LONG            fValue;
}       MIXERCONTROLDETAILS_BOOLEAN,
      *PMIXERCONTROLDETAILS_BOOLEAN,
  *LPMIXERCONTROLDETAILS_BOOLEAN;

typedef struct tMIXERCONTROLDETAILS_SIGNED {
    LONG            lValue;
}       MIXERCONTROLDETAILS_SIGNED,
      *PMIXERCONTROLDETAILS_SIGNED,
  *LPMIXERCONTROLDETAILS_SIGNED;


typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
    DWORD           dwValue;
}       MIXERCONTROLDETAILS_UNSIGNED,
      *PMIXERCONTROLDETAILS_UNSIGNED,
  *LPMIXERCONTROLDETAILS_UNSIGNED;




__declspec(dllimport) MMRESULT __stdcall mixerGetControlDetailsA(  HMIXEROBJ hmxobj,   LPMIXERCONTROLDETAILS pmxcd,  DWORD fdwDetails);
__declspec(dllimport) MMRESULT __stdcall mixerGetControlDetailsW(  HMIXEROBJ hmxobj,   LPMIXERCONTROLDETAILS pmxcd,  DWORD fdwDetails);




#line 2152 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 2156 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"







__declspec(dllimport) MMRESULT __stdcall mixerSetControlDetails(  HMIXEROBJ hmxobj,  LPMIXERCONTROLDETAILS pmxcd,  DWORD fdwDetails);







#line 2172 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"














typedef void (__stdcall TIMECALLBACK)(UINT uTimerID, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);

typedef TIMECALLBACK  *LPTIMECALLBACK;









#line 2199 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



                                        
                                        
#line 2205 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"




typedef struct timecaps_tag {
    UINT    wPeriodMin;     
    UINT    wPeriodMax;     
} TIMECAPS, *PTIMECAPS,  *NPTIMECAPS,  *LPTIMECAPS;


__declspec(dllimport) MMRESULT __stdcall timeGetSystemTime(  LPMMTIME pmmt,  UINT cbmmt);
__declspec(dllimport) DWORD __stdcall timeGetTime(void);
__declspec(dllimport) MMRESULT __stdcall timeSetEvent(  UINT uDelay,  UINT uResolution,
     LPTIMECALLBACK fptc,  DWORD_PTR dwUser,  UINT fuEvent);
__declspec(dllimport) MMRESULT __stdcall timeKillEvent(  UINT uTimerID);
__declspec(dllimport) MMRESULT __stdcall timeGetDevCaps(  LPTIMECAPS ptc,  UINT cbtc);
__declspec(dllimport) MMRESULT __stdcall timeBeginPeriod(  UINT uPeriod);
__declspec(dllimport) MMRESULT __stdcall timeEndPeriod(  UINT uPeriod);

#line 2225 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"











































































































typedef struct tagJOYCAPSA {
    WORD    wMid;                
    WORD    wPid;                
    CHAR    szPname[32];
    UINT    wXmin;               
    UINT    wXmax;               
    UINT    wYmin;               
    UINT    wYmax;               
    UINT    wZmin;               
    UINT    wZmax;               
    UINT    wNumButtons;         
    UINT    wPeriodMin;          
    UINT    wPeriodMax;          

    UINT    wRmin;               
    UINT    wRmax;               
    UINT    wUmin;               
    UINT    wUmax;               
    UINT    wVmin;               
    UINT    wVmax;               
    UINT    wCaps;               
    UINT    wMaxAxes;            
    UINT    wNumAxes;            
    UINT    wMaxButtons;         
    CHAR    szRegKey[32];
    CHAR    szOEMVxD[260]; 
#line 2359 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
} JOYCAPSA, *PJOYCAPSA, *NPJOYCAPSA, *LPJOYCAPSA;
typedef struct tagJOYCAPSW {
    WORD    wMid;                
    WORD    wPid;                
    WCHAR   szPname[32];
    UINT    wXmin;               
    UINT    wXmax;               
    UINT    wYmin;               
    UINT    wYmax;               
    UINT    wZmin;               
    UINT    wZmax;               
    UINT    wNumButtons;         
    UINT    wPeriodMin;          
    UINT    wPeriodMax;          

    UINT    wRmin;               
    UINT    wRmax;               
    UINT    wUmin;               
    UINT    wUmax;               
    UINT    wVmin;               
    UINT    wVmax;               
    UINT    wCaps;               
    UINT    wMaxAxes;            
    UINT    wNumAxes;            
    UINT    wMaxButtons;         
    WCHAR   szRegKey[32];
    WCHAR   szOEMVxD[260]; 
#line 2387 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
} JOYCAPSW, *PJOYCAPSW, *NPJOYCAPSW, *LPJOYCAPSW;






typedef JOYCAPSA JOYCAPS;
typedef PJOYCAPSA PJOYCAPS;
typedef NPJOYCAPSA NPJOYCAPS;
typedef LPJOYCAPSA LPJOYCAPS;
#line 2399 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
typedef struct tagJOYCAPS2A {
    WORD    wMid;                
    WORD    wPid;                
    CHAR    szPname[32];
    UINT    wXmin;               
    UINT    wXmax;               
    UINT    wYmin;               
    UINT    wYmax;               
    UINT    wZmin;               
    UINT    wZmax;               
    UINT    wNumButtons;         
    UINT    wPeriodMin;          
    UINT    wPeriodMax;          
    UINT    wRmin;               
    UINT    wRmax;               
    UINT    wUmin;               
    UINT    wUmax;               
    UINT    wVmin;               
    UINT    wVmax;               
    UINT    wCaps;               
    UINT    wMaxAxes;            
    UINT    wNumAxes;            
    UINT    wMaxButtons;         
    CHAR    szRegKey[32];
    CHAR    szOEMVxD[260]; 
    GUID    ManufacturerGuid;    
    GUID    ProductGuid;         
    GUID    NameGuid;            
} JOYCAPS2A, *PJOYCAPS2A, *NPJOYCAPS2A, *LPJOYCAPS2A;
typedef struct tagJOYCAPS2W {
    WORD    wMid;                
    WORD    wPid;                
    WCHAR   szPname[32];
    UINT    wXmin;               
    UINT    wXmax;               
    UINT    wYmin;               
    UINT    wYmax;               
    UINT    wZmin;               
    UINT    wZmax;               
    UINT    wNumButtons;         
    UINT    wPeriodMin;          
    UINT    wPeriodMax;          
    UINT    wRmin;               
    UINT    wRmax;               
    UINT    wUmin;               
    UINT    wUmax;               
    UINT    wVmin;               
    UINT    wVmax;               
    UINT    wCaps;               
    UINT    wMaxAxes;            
    UINT    wNumAxes;            
    UINT    wMaxButtons;         
    WCHAR   szRegKey[32];
    WCHAR   szOEMVxD[260]; 
    GUID    ManufacturerGuid;    
    GUID    ProductGuid;         
    GUID    NameGuid;            
} JOYCAPS2W, *PJOYCAPS2W, *NPJOYCAPS2W, *LPJOYCAPS2W;






typedef JOYCAPS2A JOYCAPS2;
typedef PJOYCAPS2A PJOYCAPS2;
typedef NPJOYCAPS2A NPJOYCAPS2;
typedef LPJOYCAPS2A LPJOYCAPS2;
#line 2468 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"






























#line 2499 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



typedef struct joyinfo_tag {
    UINT wXpos;                 
    UINT wYpos;                 
    UINT wZpos;                 
    UINT wButtons;              
} JOYINFO, *PJOYINFO,  *NPJOYINFO,  *LPJOYINFO;


typedef struct joyinfoex_tag {
    DWORD dwSize;                
    DWORD dwFlags;               
    DWORD dwXpos;                
    DWORD dwYpos;                
    DWORD dwZpos;                
    DWORD dwRpos;                
    DWORD dwUpos;                
    DWORD dwVpos;                
    DWORD dwButtons;             
    DWORD dwButtonNumber;        
    DWORD dwPOV;                 
    DWORD dwReserved1;           
    DWORD dwReserved2;           
} JOYINFOEX, *PJOYINFOEX,  *NPJOYINFOEX,  *LPJOYINFOEX;
#line 2526 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"


__declspec(dllimport) UINT __stdcall joyGetNumDevs(void);


__declspec(dllimport) MMRESULT __stdcall joyGetDevCapsA(  UINT_PTR uJoyID,  LPJOYCAPSA pjc,  UINT cbjc);
__declspec(dllimport) MMRESULT __stdcall joyGetDevCapsW(  UINT_PTR uJoyID,  LPJOYCAPSW pjc,  UINT cbjc);




#line 2538 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 2542 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall joyGetPos(  UINT uJoyID,  LPJOYINFO pji);


__declspec(dllimport) MMRESULT __stdcall joyGetPosEx(  UINT uJoyID,  LPJOYINFOEX pji);
#line 2547 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall joyGetThreshold(  UINT uJoyID,  LPUINT puThreshold);
__declspec(dllimport) MMRESULT __stdcall joyReleaseCapture(  UINT uJoyID);
__declspec(dllimport) MMRESULT __stdcall joySetCapture(  HWND hwnd,  UINT uJoyID,  UINT uPeriod,
     BOOL fChanged);
__declspec(dllimport) MMRESULT __stdcall joySetThreshold(  UINT uJoyID,  UINT uThreshold);


#line 2556 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"































typedef DWORD           FOURCC;         
typedef char  *    HPSTR;          
struct HMMIO__ { int unused; }; typedef struct HMMIO__ *HMMIO;                  
typedef LRESULT (__stdcall MMIOPROC)(LPSTR lpmmioinfo, UINT uMsg,
            LPARAM lParam1, LPARAM lParam2);
typedef MMIOPROC  *LPMMIOPROC;



typedef struct _MMIOINFO
{
        
        DWORD           dwFlags;        
        FOURCC          fccIOProc;      
        LPMMIOPROC      pIOProc;        
        UINT            wErrorRet;      
        HTASK           htask;          

        
        LONG            cchBuffer;      
        HPSTR           pchBuffer;      
        HPSTR           pchNext;        
        HPSTR           pchEndRead;     
        HPSTR           pchEndWrite;    
        LONG            lBufOffset;     

        
        LONG            lDiskOffset;    
        DWORD           adwInfo[3];     

        
        DWORD           dwReserved1;    
        DWORD           dwReserved2;    
        HMMIO           hmmio;          
} MMIOINFO, *PMMIOINFO,  *NPMMIOINFO,  *LPMMIOINFO;
typedef const MMIOINFO  *LPCMMIOINFO;


typedef struct _MMCKINFO
{
        FOURCC          ckid;           
        DWORD           cksize;         
        FOURCC          fccType;        
        DWORD           dwDataOffset;   
        DWORD           dwFlags;        
} MMCKINFO, *PMMCKINFO,  *NPMMCKINFO,  *LPMMCKINFO;
typedef const MMCKINFO *LPCMMCKINFO;






















































#line 2689 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
















#line 2706 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










__declspec(dllimport) FOURCC __stdcall mmioStringToFOURCCA(  LPCSTR sz,  UINT uFlags);
__declspec(dllimport) FOURCC __stdcall mmioStringToFOURCCW(  LPCWSTR sz,  UINT uFlags);




#line 2723 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
__declspec(dllimport) LPMMIOPROC __stdcall mmioInstallIOProcA(  FOURCC fccIOProc,  LPMMIOPROC pIOProc,  DWORD dwFlags);
__declspec(dllimport) LPMMIOPROC __stdcall mmioInstallIOProcW(  FOURCC fccIOProc,  LPMMIOPROC pIOProc,  DWORD dwFlags);




#line 2730 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
__declspec(dllimport) HMMIO __stdcall mmioOpenA(   LPSTR pszFileName,   LPMMIOINFO pmmioinfo,  DWORD fdwOpen);
__declspec(dllimport) HMMIO __stdcall mmioOpenW(   LPWSTR pszFileName,   LPMMIOINFO pmmioinfo,  DWORD fdwOpen);




#line 2737 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
__declspec(dllimport) MMRESULT __stdcall mmioRenameA(  LPCSTR pszFileName,  LPCSTR pszNewFileName,  LPCMMIOINFO pmmioinfo,  DWORD fdwRename);
__declspec(dllimport) MMRESULT __stdcall mmioRenameW(  LPCWSTR pszFileName,  LPCWSTR pszNewFileName,  LPCMMIOINFO pmmioinfo,  DWORD fdwRename);




#line 2744 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"







#line 2752 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

__declspec(dllimport) MMRESULT __stdcall mmioClose(  HMMIO hmmio,  UINT fuClose);
__declspec(dllimport) LONG __stdcall mmioRead(  HMMIO hmmio,  HPSTR pch,  LONG cch);
__declspec(dllimport) LONG __stdcall mmioWrite(  HMMIO hmmio,  const char * pch,  LONG cch);
__declspec(dllimport) LONG __stdcall mmioSeek(  HMMIO hmmio,  LONG lOffset,  int iOrigin);
__declspec(dllimport) MMRESULT __stdcall mmioGetInfo(  HMMIO hmmio,  LPMMIOINFO pmmioinfo,  UINT fuInfo);
__declspec(dllimport) MMRESULT __stdcall mmioSetInfo(  HMMIO hmmio,  LPCMMIOINFO pmmioinfo,  UINT fuInfo);
__declspec(dllimport) MMRESULT __stdcall mmioSetBuffer(  HMMIO hmmio,  LPSTR pchBuffer,  LONG cchBuffer,
     UINT fuBuffer);
__declspec(dllimport) MMRESULT __stdcall mmioFlush(  HMMIO hmmio,  UINT fuFlush);
__declspec(dllimport) MMRESULT __stdcall mmioAdvance(  HMMIO hmmio,   LPMMIOINFO pmmioinfo,  UINT fuAdvance);
__declspec(dllimport) LRESULT __stdcall mmioSendMessage(  HMMIO hmmio,  UINT uMsg,
     LPARAM lParam1,  LPARAM lParam2);
__declspec(dllimport) MMRESULT __stdcall mmioDescend(  HMMIO hmmio,   LPMMCKINFO pmmcki,
     const MMCKINFO * pmmckiParent,  UINT fuDescend);
__declspec(dllimport) MMRESULT __stdcall mmioAscend(  HMMIO hmmio,  LPMMCKINFO pmmcki,  UINT fuAscend);
__declspec(dllimport) MMRESULT __stdcall mmioCreateChunk( HMMIO hmmio,  LPMMCKINFO pmmcki,  UINT fuCreate);

#line 2771 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










typedef DWORD   MCIERROR;       
#line 2783 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



typedef UINT    MCIDEVICEID;    
#line 2788 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"


typedef UINT (__stdcall *YIELDPROC)(MCIDEVICEID mciId, DWORD dwYieldData);




__declspec(dllimport) MCIERROR __stdcall mciSendCommandA(  MCIDEVICEID mciId,  UINT uMsg,  DWORD_PTR dwParam1,  DWORD_PTR dwParam2);
__declspec(dllimport) MCIERROR __stdcall mciSendCommandW(  MCIDEVICEID mciId,  UINT uMsg,  DWORD_PTR dwParam1,  DWORD_PTR dwParam2);




#line 2802 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
__declspec(dllimport) MCIERROR  __stdcall mciSendStringA(  LPCSTR lpstrCommand,  LPSTR lpstrReturnString,  UINT uReturnLength,  HWND hwndCallback);
__declspec(dllimport) MCIERROR  __stdcall mciSendStringW(  LPCWSTR lpstrCommand,  LPWSTR lpstrReturnString,  UINT uReturnLength,  HWND hwndCallback);




#line 2809 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
__declspec(dllimport) MCIDEVICEID __stdcall mciGetDeviceIDA(  LPCSTR pszDevice);
__declspec(dllimport) MCIDEVICEID __stdcall mciGetDeviceIDW(  LPCWSTR pszDevice);




#line 2816 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
__declspec(dllimport) MCIDEVICEID __stdcall mciGetDeviceIDFromElementIDA(  DWORD dwElementID,  LPCSTR lpstrType );
__declspec(dllimport) MCIDEVICEID __stdcall mciGetDeviceIDFromElementIDW(  DWORD dwElementID,  LPCWSTR lpstrType );




#line 2823 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
__declspec(dllimport) BOOL __stdcall mciGetErrorStringA(  MCIERROR mcierr,  LPSTR pszText,  UINT cchText);
__declspec(dllimport) BOOL __stdcall mciGetErrorStringW(  MCIERROR mcierr,  LPWSTR pszText,  UINT cchText);




#line 2830 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"






#line 2837 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

__declspec(dllimport) BOOL __stdcall mciSetYieldProc(  MCIDEVICEID mciId,  YIELDPROC fpYieldProc,
     DWORD dwYieldData);


__declspec(dllimport) HTASK __stdcall mciGetCreatorTask(  MCIDEVICEID mciId);
__declspec(dllimport) YIELDPROC __stdcall mciGetYieldProc(  MCIDEVICEID mciId,  LPDWORD pdwYieldData);
#line 2845 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 2849 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"





































































































































































































































































































typedef struct tagMCI_GENERIC_PARMS {
    DWORD_PTR   dwCallback;
} MCI_GENERIC_PARMS, *PMCI_GENERIC_PARMS,  *LPMCI_GENERIC_PARMS;





typedef struct tagMCI_OPEN_PARMSA {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR     lpstrDeviceType;
    LPCSTR     lpstrElementName;
    LPCSTR     lpstrAlias;
} MCI_OPEN_PARMSA, *PMCI_OPEN_PARMSA, *LPMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR    lpstrDeviceType;
    LPCWSTR    lpstrElementName;
    LPCWSTR    lpstrAlias;
} MCI_OPEN_PARMSW, *PMCI_OPEN_PARMSW, *LPMCI_OPEN_PARMSW;





typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS;
typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;
#line 3173 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










#line 3184 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



typedef struct tagMCI_PLAY_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrom;
    DWORD       dwTo;
} MCI_PLAY_PARMS, *PMCI_PLAY_PARMS,  *LPMCI_PLAY_PARMS;



typedef struct tagMCI_SEEK_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwTo;
} MCI_SEEK_PARMS, *PMCI_SEEK_PARMS,  *LPMCI_SEEK_PARMS;



typedef struct tagMCI_STATUS_PARMS {
    DWORD_PTR   dwCallback;
    DWORD_PTR   dwReturn;
    DWORD       dwItem;
    DWORD       dwTrack;
} MCI_STATUS_PARMS, *PMCI_STATUS_PARMS,  * LPMCI_STATUS_PARMS;





typedef struct tagMCI_INFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR     lpstrReturn;
    DWORD     dwRetSize;
} MCI_INFO_PARMSA, * LPMCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR    lpstrReturn;
    DWORD     dwRetSize;
} MCI_INFO_PARMSW, * LPMCI_INFO_PARMSW;




typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;
#line 3230 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"







#line 3238 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



typedef struct tagMCI_GETDEVCAPS_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwReturn;
    DWORD       dwItem;
} MCI_GETDEVCAPS_PARMS, *PMCI_GETDEVCAPS_PARMS,  * LPMCI_GETDEVCAPS_PARMS;





typedef struct tagMCI_SYSINFO_PARMSA {
    DWORD_PTR   dwCallback;
    LPSTR       lpstrReturn;
    DWORD       dwRetSize;
    DWORD       dwNumber;
    UINT        wDeviceType;
} MCI_SYSINFO_PARMSA, *PMCI_SYSINFO_PARMSA, * LPMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW {
    DWORD_PTR   dwCallback;
    LPWSTR      lpstrReturn;
    DWORD       dwRetSize;
    DWORD       dwNumber;
    UINT        wDeviceType;
} MCI_SYSINFO_PARMSW, *PMCI_SYSINFO_PARMSW, * LPMCI_SYSINFO_PARMSW;





typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS;
typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;
#line 3274 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"









#line 3284 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



typedef struct tagMCI_SET_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwTimeFormat;
    DWORD       dwAudio;
} MCI_SET_PARMS, *PMCI_SET_PARMS,  *LPMCI_SET_PARMS;



typedef struct tagMCI_BREAK_PARMS {
    DWORD_PTR   dwCallback;

    int         nVirtKey;
    HWND        hwndBreak;





#line 3306 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
} MCI_BREAK_PARMS, *PMCI_BREAK_PARMS,  * LPMCI_BREAK_PARMS;





typedef struct tagMCI_SAVE_PARMSA {
    DWORD_PTR    dwCallback;
    LPCSTR       lpfilename;
} MCI_SAVE_PARMSA, *PMCI_SAVE_PARMSA, * LPMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW {
    DWORD_PTR    dwCallback;
    LPCWSTR      lpfilename;
} MCI_SAVE_PARMSW, *PMCI_SAVE_PARMSW, * LPMCI_SAVE_PARMSW;





typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS;
typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;
#line 3329 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"






#line 3336 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"





typedef struct tagMCI_LOAD_PARMSA {
    DWORD_PTR    dwCallback;
    LPCSTR       lpfilename;
} MCI_LOAD_PARMSA, *PMCI_LOAD_PARMSA, * LPMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW {
    DWORD_PTR    dwCallback;
    LPCWSTR      lpfilename;
} MCI_LOAD_PARMSW, *PMCI_LOAD_PARMSW, * LPMCI_LOAD_PARMSW;





typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS;
typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;
#line 3358 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"






#line 3365 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



typedef struct tagMCI_RECORD_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrom;
    DWORD       dwTo;
} MCI_RECORD_PARMS,  *LPMCI_RECORD_PARMS;























































typedef struct tagMCI_VD_PLAY_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrom;
    DWORD       dwTo;
    DWORD       dwSpeed;
} MCI_VD_PLAY_PARMS, *PMCI_VD_PLAY_PARMS,  *LPMCI_VD_PLAY_PARMS;



typedef struct tagMCI_VD_STEP_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrames;
} MCI_VD_STEP_PARMS, *PMCI_VD_STEP_PARMS,  *LPMCI_VD_STEP_PARMS;





typedef struct tagMCI_VD_ESCAPE_PARMSA {
    DWORD_PTR   dwCallback;
    LPCSTR      lpstrCommand;
} MCI_VD_ESCAPE_PARMSA, *PMCI_VD_ESCAPE_PARMSA, *LPMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW {
    DWORD_PTR   dwCallback;
    LPCWSTR     lpstrCommand;
} MCI_VD_ESCAPE_PARMSW, *PMCI_VD_ESCAPE_PARMSW, *LPMCI_VD_ESCAPE_PARMSW;





typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS;
typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;
#line 3463 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"






#line 3470 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"




















































typedef struct tagMCI_WAVE_OPEN_PARMSA {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR      lpstrDeviceType;
    LPCSTR      lpstrElementName;
    LPCSTR      lpstrAlias;
    DWORD   dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSA, *PMCI_WAVE_OPEN_PARMSA, *LPMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR     lpstrDeviceType;
    LPCWSTR     lpstrElementName;
    LPCWSTR     lpstrAlias;
    DWORD   dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSW, *PMCI_WAVE_OPEN_PARMSW, *LPMCI_WAVE_OPEN_PARMSW;





typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS;
typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;
#line 3547 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"











#line 3559 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



typedef struct tagMCI_WAVE_DELETE_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrom;
    DWORD       dwTo;
} MCI_WAVE_DELETE_PARMS, *PMCI_WAVE_DELETE_PARMS,  *LPMCI_WAVE_DELETE_PARMS;



typedef struct tagMCI_WAVE_SET_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwTimeFormat;
    DWORD       dwAudio;

    UINT    wInput;
    UINT    wOutput;





#line 3583 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
    WORD    wFormatTag;
    WORD    wReserved2;
    WORD    nChannels;
    WORD    wReserved3;
    DWORD   nSamplesPerSec;
    DWORD   nAvgBytesPerSec;
    WORD    nBlockAlign;
    WORD    wReserved4;
    WORD    wBitsPerSample;
    WORD    wReserved5;
} MCI_WAVE_SET_PARMS, *PMCI_WAVE_SET_PARMS,  * LPMCI_WAVE_SET_PARMS;








































typedef struct tagMCI_SEQ_SET_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwTimeFormat;
    DWORD       dwAudio;
    DWORD       dwTempo;
    DWORD       dwPort;
    DWORD       dwSlave;
    DWORD       dwMaster;
    DWORD       dwOffset;
} MCI_SEQ_SET_PARMS, *PMCI_SEQ_SET_PARMS,  * LPMCI_SEQ_SET_PARMS;






































































typedef struct tagMCI_ANIM_OPEN_PARMSA {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR      lpstrDeviceType;
    LPCSTR      lpstrElementName;
    LPCSTR      lpstrAlias;
    DWORD   dwStyle;
    HWND    hWndParent;
} MCI_ANIM_OPEN_PARMSA, *PMCI_ANIM_OPEN_PARMSA, *LPMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR     lpstrDeviceType;
    LPCWSTR     lpstrElementName;
    LPCWSTR     lpstrAlias;
    DWORD   dwStyle;
    HWND    hWndParent;
} MCI_ANIM_OPEN_PARMSW, *PMCI_ANIM_OPEN_PARMSW, *LPMCI_ANIM_OPEN_PARMSW;





typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS;
typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;
#line 3741 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"













#line 3755 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



typedef struct tagMCI_ANIM_PLAY_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrom;
    DWORD       dwTo;
    DWORD       dwSpeed;
} MCI_ANIM_PLAY_PARMS, *PMCI_ANIM_PLAY_PARMS,  *LPMCI_ANIM_PLAY_PARMS;



typedef struct tagMCI_ANIM_STEP_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrames;
} MCI_ANIM_STEP_PARMS, *PMCI_ANIM_STEP_PARMS,  *LPMCI_ANIM_STEP_PARMS;





typedef struct tagMCI_ANIM_WINDOW_PARMSA {
    DWORD_PTR   dwCallback;
    HWND        hWnd;
    UINT        nCmdShow;
    LPCSTR     lpstrText;
} MCI_ANIM_WINDOW_PARMSA, *PMCI_ANIM_WINDOW_PARMSA, * LPMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW {
    DWORD_PTR   dwCallback;
    HWND        hWnd;
    UINT        nCmdShow;
    LPCWSTR    lpstrText;
} MCI_ANIM_WINDOW_PARMSW, *PMCI_ANIM_WINDOW_PARMSW, * LPMCI_ANIM_WINDOW_PARMSW;





typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS;
typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;
#line 3797 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"










#line 3808 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



typedef struct tagMCI_ANIM_RECT_PARMS {
    DWORD_PTR   dwCallback;




    RECT    rc;
#line 3819 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
} MCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS * PMCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS  * LPMCI_ANIM_RECT_PARMS;



typedef struct tagMCI_ANIM_UPDATE_PARMS {
    DWORD_PTR   dwCallback;
    RECT        rc;
    HDC         hDC;
} MCI_ANIM_UPDATE_PARMS, *PMCI_ANIM_UPDATE_PARMS,  * LPMCI_ANIM_UPDATE_PARMS;















































typedef struct tagMCI_OVLY_OPEN_PARMSA {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR      lpstrDeviceType;
    LPCSTR      lpstrElementName;
    LPCSTR      lpstrAlias;
    DWORD   dwStyle;
    HWND    hWndParent;
} MCI_OVLY_OPEN_PARMSA, *PMCI_OVLY_OPEN_PARMSA, *LPMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR     lpstrDeviceType;
    LPCWSTR     lpstrElementName;
    LPCWSTR     lpstrAlias;
    DWORD   dwStyle;
    HWND    hWndParent;
} MCI_OVLY_OPEN_PARMSW, *PMCI_OVLY_OPEN_PARMSW, *LPMCI_OVLY_OPEN_PARMSW;





typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS;
typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;
#line 3904 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"













#line 3918 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"





typedef struct tagMCI_OVLY_WINDOW_PARMSA {
    DWORD_PTR   dwCallback;
    HWND        hWnd;
    UINT        nCmdShow;
    LPCSTR      lpstrText;
} MCI_OVLY_WINDOW_PARMSA, *PMCI_OVLY_WINDOW_PARMSA, * LPMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW {
    DWORD_PTR   dwCallback;
    HWND        hWnd;
    UINT        nCmdShow;
    LPCWSTR     lpstrText;
} MCI_OVLY_WINDOW_PARMSW, *PMCI_OVLY_WINDOW_PARMSW, * LPMCI_OVLY_WINDOW_PARMSW;





typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS;
typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;
#line 3944 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"









#line 3954 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



typedef struct tagMCI_OVLY_RECT_PARMS {
    DWORD_PTR   dwCallback;




    RECT    rc;
#line 3965 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"
} MCI_OVLY_RECT_PARMS, *PMCI_OVLY_RECT_PARMS,  * LPMCI_OVLY_RECT_PARMS;





typedef struct tagMCI_OVLY_SAVE_PARMSA {
    DWORD_PTR   dwCallback;
    LPCSTR      lpfilename;
    RECT        rc;
} MCI_OVLY_SAVE_PARMSA, *PMCI_OVLY_SAVE_PARMSA, * LPMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW {
    DWORD_PTR   dwCallback;
    LPCWSTR     lpfilename;
    RECT        rc;
} MCI_OVLY_SAVE_PARMSW, *PMCI_OVLY_SAVE_PARMSW, * LPMCI_OVLY_SAVE_PARMSW;





typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS;
typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;
#line 3990 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"






#line 3997 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"





typedef struct tagMCI_OVLY_LOAD_PARMSA {
    DWORD_PTR   dwCallback;
    LPCSTR      lpfilename;
    RECT    rc;
} MCI_OVLY_LOAD_PARMSA, *PMCI_OVLY_LOAD_PARMSA, * LPMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW {
    DWORD_PTR   dwCallback;
    LPCWSTR     lpfilename;
    RECT    rc;
} MCI_OVLY_LOAD_PARMSW, *PMCI_OVLY_LOAD_PARMSW, * LPMCI_OVLY_LOAD_PARMSW;





typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS;
typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;
#line 4021 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"






#line 4028 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

#line 4030 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"








    

    
#line 4042 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

































#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 4076 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"




#line 4081 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"

#line 4083 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mmsystem.h"



#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\nb30.h"



















#pragma once
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\nb30.h"


















typedef struct _NCB {
    UCHAR   ncb_command;            
    UCHAR   ncb_retcode;            
    UCHAR   ncb_lsn;                
    UCHAR   ncb_num;                
    PUCHAR  ncb_buffer;             
    WORD    ncb_length;             
    UCHAR   ncb_callname[16]; 
    UCHAR   ncb_name[16];     
    UCHAR   ncb_rto;                
    UCHAR   ncb_sto;                
    void (__stdcall *ncb_post)( struct _NCB * ); 
    UCHAR   ncb_lana_num;           
    UCHAR   ncb_cmd_cplt;           



    UCHAR   ncb_reserve[10];        
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\nb30.h"
    HANDLE  ncb_event;              
                                    
                                    
                                    
} NCB, *PNCB;






typedef struct _ADAPTER_STATUS {
    UCHAR   adapter_address[6];
    UCHAR   rev_major;
    UCHAR   reserved0;
    UCHAR   adapter_type;
    UCHAR   rev_minor;
    WORD    duration;
    WORD    frmr_recv;
    WORD    frmr_xmit;

    WORD    iframe_recv_err;

    WORD    xmit_aborts;
    DWORD   xmit_success;
    DWORD   recv_success;

    WORD    iframe_xmit_err;

    WORD    recv_buff_unavail;
    WORD    t1_timeouts;
    WORD    ti_timeouts;
    DWORD   reserved1;
    WORD    free_ncbs;
    WORD    max_cfg_ncbs;
    WORD    max_ncbs;
    WORD    xmit_buf_unavail;
    WORD    max_dgram_size;
    WORD    pending_sess;
    WORD    max_cfg_sess;
    WORD    max_sess;
    WORD    max_sess_pkt_size;
    WORD    name_count;
} ADAPTER_STATUS, *PADAPTER_STATUS;

typedef struct _NAME_BUFFER {
    UCHAR   name[16];
    UCHAR   name_num;
    UCHAR   name_flags;
} NAME_BUFFER, *PNAME_BUFFER;





















typedef struct _SESSION_HEADER {
    UCHAR   sess_name;
    UCHAR   num_sess;
    UCHAR   rcv_dg_outstanding;
    UCHAR   rcv_any_outstanding;
} SESSION_HEADER, *PSESSION_HEADER;

typedef struct _SESSION_BUFFER {
    UCHAR   lsn;
    UCHAR   state;
    UCHAR   local_name[16];
    UCHAR   remote_name[16];
    UCHAR   rcvs_outstanding;
    UCHAR   sends_outstanding;
} SESSION_BUFFER, *PSESSION_BUFFER;

















typedef struct _LANA_ENUM {
    UCHAR   length;         
    UCHAR   lana[254+1];
} LANA_ENUM, *PLANA_ENUM;






typedef struct _FIND_NAME_HEADER {
    WORD    node_count;
    UCHAR   reserved;
    UCHAR   unique_group;
} FIND_NAME_HEADER, *PFIND_NAME_HEADER;

typedef struct _FIND_NAME_BUFFER {
    UCHAR   length;
    UCHAR   access_control;
    UCHAR   frame_control;
    UCHAR   destination_addr[6];
    UCHAR   source_addr[6];
    UCHAR   routing_info[18];
} FIND_NAME_BUFFER, *PFIND_NAME_BUFFER;






typedef struct _ACTION_HEADER {
    ULONG   transport_id;
    USHORT  action_code;
    USHORT  reserved;
} ACTION_HEADER, *PACTION_HEADER;




















































                                















































UCHAR
__stdcall
Netbios(
    PNCB pncb
    );














#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\nb30.h"
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"
















#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"





#pragma once
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"


















#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"





#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"

#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"

#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"



#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"





#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"

typedef void * I_RPC_HANDLE;
typedef long RPC_STATUS;



#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"











#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"










#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"





#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"





#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"


































#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"


















#pragma once
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"































typedef  unsigned char  *RPC_CSTR;
typedef  unsigned short  *RPC_WSTR;

typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;








typedef GUID UUID;


#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"
#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"

typedef struct _RPC_BINDING_VECTOR
{
    unsigned long Count;
    RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;


#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"

typedef struct _UUID_VECTOR
{
  unsigned long Count;
  UUID *Uuid[1];
} UUID_VECTOR;


#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"

typedef void  * RPC_IF_HANDLE;



typedef struct _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"
























































typedef struct _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char  * Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short  * Protseq[1];
} RPC_PROTSEQ_VECTORW;





#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"









#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"
typedef struct _RPC_POLICY {
    unsigned int Length ;
    unsigned long EndpointFlags ;
    unsigned long NICFlags ;
    } RPC_POLICY,   *PRPC_POLICY ;

typedef void __stdcall
RPC_OBJECT_INQ_FN (
     UUID  * ObjectUuid,
     UUID  * TypeUuid,
     RPC_STATUS  * Status
    );

typedef RPC_STATUS __stdcall
RPC_IF_CALLBACK_FN (
     RPC_IF_HANDLE  InterfaceUuid,
     void *Context
    ) ;

typedef void __stdcall
RPC_SECURITY_CALLBACK_FN (
     void *Context
    ) ;



typedef struct
{
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;






typedef struct
{
  unsigned long Count;
  RPC_IF_ID  * IfId[1];
} RPC_IF_ID_VECTOR;


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCopy (
     RPC_BINDING_HANDLE SourceBinding,
     RPC_BINDING_HANDLE  * DestinationBinding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFree (
      RPC_BINDING_HANDLE  * Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetOption(  RPC_BINDING_HANDLE hBinding,
                      unsigned long      option,
                      ULONG_PTR          optionValue );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqOption(   RPC_BINDING_HANDLE hBinding,
                       unsigned long      option,
                      ULONG_PTR         *pOptionValue );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFromStringBindingA (
         RPC_CSTR StringBinding,
         RPC_BINDING_HANDLE  *Binding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFromStringBindingW (
         RPC_WSTR StringBinding,
         RPC_BINDING_HANDLE  *Binding
    );





#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"











#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsGetContextBinding (
     void *ContextHandle,
     RPC_BINDING_HANDLE  * Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqObject (
     RPC_BINDING_HANDLE Binding,
     UUID  * ObjectUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingReset (
     RPC_BINDING_HANDLE Binding
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetObject (
     RPC_BINDING_HANDLE Binding,
     UUID  * ObjectUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqDefaultProtectLevel(
      unsigned long AuthnSvc,
     unsigned long  *AuthnLevel
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingToStringBindingA (
         RPC_BINDING_HANDLE Binding,
                  RPC_CSTR  *StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingToStringBindingW (
         RPC_BINDING_HANDLE Binding,
                  RPC_WSTR  *StringBinding
    );





#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"











#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingVectorFree (
      RPC_BINDING_VECTOR  *  * BindingVector
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingComposeA (
           RPC_CSTR ObjUuid,
           RPC_CSTR Protseq,
           RPC_CSTR NetworkAddr,
           RPC_CSTR Endpoint,
           RPC_CSTR Options,
                    RPC_CSTR  *StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingComposeW (
           RPC_WSTR ObjUuid,
           RPC_WSTR Protseq,
           RPC_WSTR NetworkAddr,
           RPC_WSTR Endpoint,
           RPC_WSTR Options,
                    RPC_WSTR  *StringBinding
    );





#line 423 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"















#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingParseA (
         RPC_CSTR StringBinding,
                    RPC_CSTR  *ObjUuid,
                    RPC_CSTR  *Protseq,
                    RPC_CSTR  *NetworkAddr,
                    RPC_CSTR  *Endpoint,
                    RPC_CSTR  *NetworkOptions
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringBindingParseW (
         RPC_WSTR StringBinding,
                    RPC_WSTR  *ObjUuid,
                    RPC_WSTR  *Protseq,
                    RPC_WSTR  *NetworkAddr,
                    RPC_WSTR  *Endpoint,
                    RPC_WSTR  *NetworkOptions
    );





#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"















#line 489 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeA (
     RPC_CSTR  *String
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeW (
     RPC_WSTR  *String
    );





#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"










#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcIfInqId (
     RPC_IF_HANDLE RpcIfHandle,
     RPC_IF_ID  * RpcIfId
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidA (
         RPC_CSTR Protseq
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidW (
         RPC_WSTR Protseq
    );





#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"










#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqComTimeout (
     RPC_BINDING_HANDLE Binding,
     unsigned int  * Timeout
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetComTimeout (
     RPC_BINDING_HANDLE Binding,
     unsigned int Timeout
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetCancelTimeout(
    long Timeout
    );






__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkInqProtseqsA (
     RPC_PROTSEQ_VECTORA  *  * ProtseqVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNetworkInqProtseqsW (
     RPC_PROTSEQ_VECTORW  *  * ProtseqVector
    );





#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"










#line 630 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcObjectInqType (
     UUID  * ObjUuid,
     UUID  * TypeUuid 
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcObjectSetInqFn (
     RPC_OBJECT_INQ_FN  * InquiryFn
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcObjectSetType (
     UUID  * ObjUuid,
     UUID  * TypeUuid 
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeA (
      RPC_PROTSEQ_VECTORA  *  * ProtseqVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeW (
      RPC_PROTSEQ_VECTORW  *  * ProtseqVector
    );





#line 680 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"










#line 691 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqBindings (
     RPC_BINDING_VECTOR  *  * BindingVector
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqIf (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid, 
     void  *  * MgrEpv
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerListen (
     unsigned int MinimumCallThreads,
     unsigned int MaxCalls,
     unsigned int DontWait
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid ,
     void  * MgrEpv 
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIfEx (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid,
     void  * MgrEpv,
     unsigned int Flags,
     unsigned int MaxCalls,
     RPC_IF_CALLBACK_FN  *IfCallback
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf2 (
     RPC_IF_HANDLE IfSpec,
     UUID * MgrTypeUuid,
     void * MgrEpv,
     unsigned int Flags,
     unsigned int MaxCalls,
     unsigned int MaxRpcSize,
     RPC_IF_CALLBACK_FN *IfCallbackFn
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnregisterIf (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid, 
     unsigned int WaitForCallsToComplete
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnregisterIfEx (
     RPC_IF_HANDLE IfSpec,
     UUID  * MgrTypeUuid, 
     int RundownContextHandles
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqs (
     unsigned int MaxCalls,
     void  * SecurityDescriptor 
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsEx (
     unsigned int MaxCalls,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIf (
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor 
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIfEx (
     unsigned int MaxCalls,
     RPC_IF_HANDLE IfSpec,
     void  * SecurityDescriptor,
     PRPC_POLICY Policy
    );






__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
           void  *SecurityDescriptor
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
           void  *SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
           void  *SecurityDescriptor
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
           void  *SecurityDescriptor,
         PRPC_POLICY Policy
    );







#line 868 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"






















#line 891 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
           void  *SecurityDescriptor
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
           void  *SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
           void  *SecurityDescriptor
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqEpExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
           void  *SecurityDescriptor,
         PRPC_POLICY Policy
    );







#line 945 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"
























#line 970 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
           void  *SecurityDescriptor
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfExA (
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
           void  *SecurityDescriptor,
         PRPC_POLICY Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
           void  *SecurityDescriptor
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUseProtseqIfExW (
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_IF_HANDLE IfSpec,
           void  *SecurityDescriptor,
         PRPC_POLICY Policy
    );







#line 1024 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"
























#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"

__declspec(dllimport)
void
__stdcall
RpcServerYield (
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtStatsVectorFree (
     RPC_STATS_VECTOR ** StatsVector
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqStats (
     RPC_BINDING_HANDLE Binding,
     RPC_STATS_VECTOR ** Statistics
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtIsServerListening (
     RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtStopServerListening (
     RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtWaitServerListen (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetServerStackSize (
     unsigned long ThreadStackSize
    );


__declspec(dllimport)
void
__stdcall
RpcSsDontSerializeContext (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEnableIdleCleanup (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqIfIds (
     RPC_BINDING_HANDLE Binding,
     RPC_IF_ID_VECTOR  *  * IfIdVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcIfIdVectorFree (
      RPC_IF_ID_VECTOR  *  * IfIdVector
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameA (
         RPC_BINDING_HANDLE Binding,
         unsigned long AuthnSvc,
                  RPC_CSTR  *ServerPrincName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameW (
         RPC_BINDING_HANDLE Binding,
         unsigned long AuthnSvc,
                  RPC_WSTR  *ServerPrincName
    );





#line 1161 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"












#line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameA (
         unsigned long AuthnSvc,
                  RPC_CSTR  *PrincName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameW (
         unsigned long AuthnSvc,
                  RPC_WSTR  *PrincName
    );





#line 1198 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"











#line 1210 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpResolveBinding (
     RPC_BINDING_HANDLE Binding,
     RPC_IF_HANDLE IfSpec
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameA (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
                  RPC_CSTR  *EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameW (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
                  RPC_WSTR  *EntryName
    );





#line 1247 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"












#line 1260 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"

typedef void  * RPC_AUTH_IDENTITY_HANDLE;
typedef void  * RPC_AUTHZ_HANDLE;




















































typedef struct _RPC_SECURITY_QOS {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;







typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
  unsigned short  *User;
  unsigned long UserLength;
  unsigned short  *Domain;
  unsigned long DomainLength;
  unsigned short  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;

typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
  unsigned char  *User;
  unsigned long UserLength;
  unsigned char  *Domain;
  unsigned long DomainLength;
  unsigned char  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;









#line 1357 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"




















typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned short  *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char  *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;

typedef struct _RPC_SECURITY_QOS_V2_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W;

typedef struct _RPC_SECURITY_QOS_V2_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A;



typedef struct _RPC_SECURITY_QOS_V3_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_W, *PRPC_SECURITY_QOS_V3_W;

typedef struct _RPC_SECURITY_QOS_V3_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_A, *PRPC_SECURITY_QOS_V3_A;

#line 1450 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"





























#line 1480 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"

typedef enum _RPC_HTTP_REDIRECTOR_STAGE
{
    RPCHTTP_RS_REDIRECT = 1,
    RPCHTTP_RS_ACCESS_1,
    RPCHTTP_RS_SESSION,
    RPCHTTP_RS_ACCESS_2,
    RPCHTTP_RS_INTERFACE
} RPC_HTTP_REDIRECTOR_STAGE;

typedef RPC_STATUS
(__stdcall * RPC_NEW_HTTP_PROXY_CHANNEL) (
     RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,
     unsigned short  *ServerName,
     unsigned short  *ServerPort,
      unsigned short  *RemoteUser,
      unsigned short  *AuthType,
      void  *ResourceUuid,
      void  *Metadata,
      void  *SessionId,
      void  *Interface,
      void  *Reserved,
     unsigned long Flags,
      unsigned short  **NewServerName,
      unsigned short  **NewServerPort
    );

typedef void
(__stdcall * RPC_HTTP_PROXY_FREE_STRING) (
     unsigned short  *String
    );






__declspec(dllimport)
RPC_STATUS
__stdcall
RpcImpersonateClient (
     RPC_BINDING_HANDLE BindingHandle 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcRevertToSelfEx (
     RPC_BINDING_HANDLE BindingHandle 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcRevertToSelf (
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientA (
           RPC_BINDING_HANDLE ClientBinding,
         RPC_AUTHZ_HANDLE  *Privs,
                    RPC_CSTR  *ServerPrincName,
           unsigned long  *AuthnLevel, 
           unsigned long  *AuthnSvc,
           unsigned long  *AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientW (
           RPC_BINDING_HANDLE ClientBinding,
         RPC_AUTHZ_HANDLE  *Privs,
                    RPC_WSTR  *ServerPrincName,
           unsigned long  *AuthnLevel,
           unsigned long  *AuthnSvc,
           unsigned long  *AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExA (
           RPC_BINDING_HANDLE ClientBinding,
         RPC_AUTHZ_HANDLE  *Privs,
                    RPC_CSTR  *ServerPrincName,
           unsigned long  *AuthnLevel,
           unsigned long  *AuthnSvc,
           unsigned long  *AuthzSvc,
      unsigned long             Flags
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExW (
           RPC_BINDING_HANDLE ClientBinding,
         RPC_AUTHZ_HANDLE  *Privs,
                    RPC_WSTR  *ServerPrincName,
           unsigned long  *AuthnLevel,
           unsigned long  *AuthnSvc,
           unsigned long  *AuthzSvc,
      unsigned long             Flags
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoA (
         RPC_BINDING_HANDLE Binding,
                    RPC_CSTR  *ServerPrincName,
           unsigned long  *AuthnLevel,
           unsigned long  *AuthnSvc,
           RPC_AUTH_IDENTITY_HANDLE  *AuthIdentity,
           unsigned long  *AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoW (
         RPC_BINDING_HANDLE Binding,
                    RPC_WSTR  *ServerPrincName,
           unsigned long  *AuthnLevel,
           unsigned long  *AuthnSvc,
           RPC_AUTH_IDENTITY_HANDLE  *AuthIdentity,
           unsigned long  *AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoA (
         RPC_BINDING_HANDLE Binding,
         RPC_CSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
           RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExA (
         RPC_BINDING_HANDLE Binding,
         RPC_CSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
           RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc,
           RPC_SECURITY_QOS *SecurityQos
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoW (
         RPC_BINDING_HANDLE Binding,
         RPC_WSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
           RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExW (
         RPC_BINDING_HANDLE Binding,
         RPC_WSTR ServerPrincName,
         unsigned long AuthnLevel,
         unsigned long AuthnSvc,
           RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
         unsigned long AuthzSvc,
           RPC_SECURITY_QOS *SecurityQOS
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExA (
         RPC_BINDING_HANDLE Binding,
                    RPC_CSTR  *ServerPrincName,
           unsigned long  *AuthnLevel,
           unsigned long  *AuthnSvc,
           RPC_AUTH_IDENTITY_HANDLE  *AuthIdentity,
           unsigned long  *AuthzSvc,
         unsigned long RpcQosVersion,
           RPC_SECURITY_QOS *SecurityQOS
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExW (
         RPC_BINDING_HANDLE Binding,
                    RPC_WSTR  *ServerPrincName, 
           unsigned long  *AuthnLevel,
           unsigned long  *AuthnSvc,
           RPC_AUTH_IDENTITY_HANDLE  *AuthIdentity,
           unsigned long  *AuthzSvc,
         unsigned long RpcQosVersion,
           RPC_SECURITY_QOS *SecurityQOS
    );

typedef void
(__stdcall * RPC_AUTH_KEY_RETRIEVAL_FN) (
     void  * Arg,
     unsigned short  * ServerPrincName,
     unsigned long KeyVer,
     void  *  * Key,
     RPC_STATUS  * Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoA (
         RPC_CSTR ServerPrincName,
         unsigned long AuthnSvc,
           RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
           void  *Arg
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoW (
         RPC_WSTR ServerPrincName,
         unsigned long AuthnSvc,
           RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
           void  *Arg
    );

















#line 1737 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"







































































#line 1809 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"


typedef struct {
    unsigned char  * UserName;
    unsigned char  * ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1,  * PRPC_CLIENT_INFORMATION1;
#line 1818 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingServerFromClient (
     RPC_BINDING_HANDLE ClientBinding,
     RPC_BINDING_HANDLE  * ServerBinding
    );

__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
RpcRaiseException (
     RPC_STATUS exception
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcTestCancel(
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerTestCancel (
     RPC_BINDING_HANDLE BindingHandle 
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcCancelThread(
     void * Thread
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcCancelThreadEx(
     void * Thread,
     long Timeout
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreate (
     UUID  * Uuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreateSequential (
     UUID  * Uuid
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
UuidToStringA (
         UUID  *Uuid,
                  RPC_CSTR  *StringUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidFromStringA (
         RPC_CSTR StringUuid,
         UUID  *Uuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidToStringW (
         UUID  *Uuid,
                  RPC_WSTR  *StringUuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidFromStringW (
           RPC_WSTR StringUuid,
         UUID  *Uuid
    );







#line 1924 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"





















#line 1946 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"

__declspec(dllimport)
signed int
__stdcall
UuidCompare (
     UUID  * Uuid1,
     UUID  * Uuid2,
     RPC_STATUS  * Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreateNil (
     UUID  * NilUuid
    );

__declspec(dllimport)
int
__stdcall
UuidEqual (
     UUID  * Uuid1,
     UUID  * Uuid2,
     RPC_STATUS  * Status
    );

__declspec(dllimport)
unsigned short
__stdcall
UuidHash (
     UUID  * Uuid,
     RPC_STATUS  * Status
    );

__declspec(dllimport)
int
__stdcall
UuidIsNil (
     UUID  * Uuid,
     RPC_STATUS  * Status
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceA (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR *BindingVector,
           UUID_VECTOR *UuidVector,
           RPC_CSTR Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceW (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR *BindingVector,
           UUID_VECTOR *UuidVector,
           RPC_WSTR Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterA (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR *BindingVector,
           UUID_VECTOR *UuidVector,
           RPC_CSTR Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpRegisterW (
         RPC_IF_HANDLE IfSpec,
         RPC_BINDING_VECTOR *BindingVector,
           UUID_VECTOR *UuidVector,
           RPC_WSTR Annotation
    );







#line 2037 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"























#line 2061 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcEpUnregister(
     RPC_IF_HANDLE IfSpec,
     RPC_BINDING_VECTOR *BindingVector,
     UUID_VECTOR *UuidVector
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
DceErrorInqTextA (
         RPC_STATUS RpcStatus,
         RPC_CSTR ErrorText
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
DceErrorInqTextW (
         RPC_STATUS RpcStatus,
         RPC_WSTR ErrorText
    );





#line 2097 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"











#line 2109 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"

typedef I_RPC_HANDLE * RPC_EP_INQ_HANDLE;












__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqBegin (
     RPC_BINDING_HANDLE EpBinding ,
     unsigned long InquiryType,
     RPC_IF_ID  * IfId ,
     unsigned long VersOption ,
     UUID  * ObjectUuid ,
     RPC_EP_INQ_HANDLE  * InquiryContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqDone (
      RPC_EP_INQ_HANDLE  * InquiryContext
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextA (
         RPC_EP_INQ_HANDLE InquiryContext,
         RPC_IF_ID  *IfId,
           RPC_BINDING_HANDLE  *Binding,
           UUID  *ObjectUuid,
                    RPC_CSTR  *Annotation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextW (
         RPC_EP_INQ_HANDLE InquiryContext,
         RPC_IF_ID  *IfId,
           RPC_BINDING_HANDLE  *Binding,
           UUID  *ObjectUuid,
                    RPC_WSTR  *Annotation
    );





#line 2171 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"













#line 2185 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtEpUnregister (
     RPC_BINDING_HANDLE EpBinding ,
     RPC_IF_ID  * IfId,
     RPC_BINDING_HANDLE Binding,
     UUID  * ObjectUuid 
    );

typedef int
(__stdcall * RPC_MGMT_AUTHORIZATION_FN) (
     RPC_BINDING_HANDLE ClientBinding,
     unsigned long RequestedMgmtOperation,
     RPC_STATUS  * Status
    );







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtSetAuthorizationFn (
     RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
    );













#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdcep.h"




















#pragma once
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdcep.h"





typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER,  * PRPC_SYNTAX_IDENTIFIER;

typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void  * Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void  * RpcInterfaceInformation;
    void  * ReservedForRuntime;
    void  * ManagerEpv;
    void  * ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE,  * PRPC_MESSAGE;


typedef RPC_STATUS
__stdcall RPC_FORWARD_FUNCTION(
                        UUID              * InterfaceId,
                        RPC_VERSION       * InterfaceVersion,
                        UUID              * ObjectId,
                        unsigned char          * Rpcpro,
                        void  *  * ppDestEndpoint);

enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED,
    PROTOCOL_ADDRESS_CHANGE
};

typedef void
__stdcall RPC_ADDRESS_CHANGE_FN(
                         void * arg
                        );







































typedef
void
(__stdcall  * RPC_DISPATCH_FUNCTION) (
      PRPC_MESSAGE Message
    );

typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION  * DispatchTable;
    LONG_PTR                          Reserved;
} RPC_DISPATCH_TABLE,  * PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char  * RpcProtocolSequence;
    unsigned char  * Endpoint;
} RPC_PROTSEQ_ENDPOINT,  * PRPC_PROTSEQ_ENDPOINT;








typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void  *DefaultManagerEpv;
    void const  *InterpreterInfo;
    unsigned int Flags ;
} RPC_SERVER_INTERFACE,  * PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER   InterfaceId;
    RPC_SYNTAX_IDENTIFIER   TransferSyntax;
    PRPC_DISPATCH_TABLE     DispatchTable;
    unsigned int            RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT   RpcProtseqEndpoint;
    ULONG_PTR               Reserved;
    void const  *  InterpreterInfo;
    unsigned int Flags ;
} RPC_CLIENT_INTERFACE,  * PRPC_CLIENT_INTERFACE;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNegotiateTransferSyntax (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetBuffer (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetBufferWithObject (
      RPC_MESSAGE  * Message,
     UUID * ObjectUuid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSendReceive (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcFreeBuffer (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSend (
      PRPC_MESSAGE Message
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReceive (
      PRPC_MESSAGE Message,
     unsigned int Size
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcFreePipeBuffer (
      RPC_MESSAGE  * Message
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReallocPipeBuffer (
     PRPC_MESSAGE Message,
     unsigned int NewSize
    ) ;

typedef void * I_RPC_MUTEX;

__declspec(dllimport)
void
__stdcall
I_RpcRequestMutex (
      I_RPC_MUTEX * Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcClearMutex (
     I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcDeleteMutex (
     I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void  *
__stdcall
I_RpcAllocate (
     unsigned int Size
    );

__declspec(dllimport)
void
__stdcall
I_RpcFree (
     void  * Object
    );

__declspec(dllimport)
void
__stdcall
I_RpcPauseExecution (
     unsigned long Milliseconds
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetExtendedError (
    );

typedef
void
(__stdcall  * PRPC_RUNDOWN) (
    void  * AssociationContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcMonitorAssociation (
     RPC_BINDING_HANDLE Handle,
     PRPC_RUNDOWN RundownRoutine,
     void * Context
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcStopMonitorAssociation (
     RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
I_RpcGetCurrentCallHandle(
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetAssociationContext (
     RPC_BINDING_HANDLE BindingHandle,
     void  *  * AssociationContext
    );

__declspec(dllimport)
void *
__stdcall
I_RpcGetServerContextList (
     RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
void
__stdcall
I_RpcSetServerContextList (
     RPC_BINDING_HANDLE BindingHandle,
     void * ServerContextList
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceExported (
     unsigned long EntryNameSyntax,
     unsigned short *EntryName,
     RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceUnexported (
     unsigned long EntryNameSyntax,
     unsigned short *EntryName,
     RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingToStaticStringBindingW (
     RPC_BINDING_HANDLE Binding,
     unsigned short **StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContext (
     RPC_BINDING_HANDLE Binding,
     void **SecurityContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqWireIdForSnego (
         RPC_BINDING_HANDLE Binding,
         RPC_CSTR WireId
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqMarshalledTargetInfo (
         RPC_BINDING_HANDLE Binding,
         unsigned long *MarshalledTargetInfoLength,
                  RPC_CSTR *MarshalledTargetInfo
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqLocalClientPID (
     RPC_BINDING_HANDLE Binding,
     unsigned long *Pid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingHandleToAsyncHandle (
     RPC_BINDING_HANDLE Binding,
     void **AsyncHandle
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameW (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameA (
         RPC_BINDING_HANDLE Binding,
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2A (
         RPC_CSTR NetworkAddress,
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         RPC_CSTR Endpoint,
         void  * SecurityDescriptor,
         void *Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2W (
         RPC_WSTR NetworkAddress,
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         RPC_WSTR Endpoint,
         void  *SecurityDescriptor,
         void *Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2W (
         RPC_WSTR NetworkAddress,
         RPC_WSTR Protseq,
         unsigned int MaxCalls,
         void  *SecurityDescriptor,
         void *Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2A (
         RPC_CSTR NetworkAddress,
         RPC_CSTR Protseq,
         unsigned int MaxCalls,
         void  *SecurityDescriptor,
         void *Policy
    );










#line 474 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdcep.h"


































#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdcep.h"



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointW (
         RPC_BINDING_HANDLE Binding,
                      RPC_WSTR  *DynamicEndpoint
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointA (
         RPC_BINDING_HANDLE Binding,
                      RPC_CSTR  *DynamicEndpoint
    );





#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdcep.h"











#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdcep.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerCheckClientRestriction (
     RPC_BINDING_HANDLE Context
    );






__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqTransportType (
     RPC_BINDING_HANDLE Binding,
     unsigned int  * Type
    );

typedef struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcIfInqTransferSyntaxes (
     RPC_IF_HANDLE RpcIfHandle,
     RPC_TRANSFER_SYNTAX  * TransferSyntaxes,
     unsigned int TransferSyntaxSize,
     unsigned int  * TransferSyntaxCount
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_UuidCreate (
     UUID  * Uuid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingCopy (
     RPC_BINDING_HANDLE SourceBinding,
     RPC_BINDING_HANDLE  * DestinationBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsClientLocal (
     RPC_BINDING_HANDLE BindingHandle ,
     unsigned int  * ClientLocalFlag
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqConnId (
     RPC_BINDING_HANDLE Binding,
     void **ConnId,
     int *pfFirstCall
    );

__declspec(dllimport)
void
__stdcall
I_RpcSsDontSerializeContext (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcLaunchDatagramReceiveThread(
    void  * pAddress
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerRegisterForwardFunction (
     RPC_FORWARD_FUNCTION  * pForwardFunction
    );

RPC_ADDRESS_CHANGE_FN * __stdcall
I_RpcServerInqAddressChangeFn();

RPC_STATUS __stdcall
I_RpcServerSetAddressChangeFn(
     RPC_ADDRESS_CHANGE_FN * pAddressChangeFn
    );







__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqLocalConnAddress (
     RPC_BINDING_HANDLE Binding,
      void *Buffer,
      unsigned long *BufferSize,
     unsigned long *AddressFormat
    );

__declspec(dllimport)
void
__stdcall
I_RpcSessionStrictContextHandle (
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcTurnOnEEInfoPropagation (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcConnectionInqSockBuffSize(
   unsigned long  * RecvBuffSize,
   unsigned long  * SendBuffSize
  );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcConnectionSetSockBuffSize(
    unsigned long RecvBuffSize,
    unsigned long SendBuffSize
   );

typedef
void
(*RPCLT_PDU_FILTER_FUNC) (
     void *Buffer,
     unsigned int BufferLength,
     int fDatagram
    );

typedef
void
(__cdecl *RPC_SETFILTER_FUNC) (
     RPCLT_PDU_FILTER_FUNC pfnFilter
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStartListening(
    void * hWnd
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStopListening(
    ) ;

typedef RPC_STATUS (*RPC_BLOCKING_FN) (
     void * hWnd,
     void * Context,
      void * hSyncEvent
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingSetAsync(
     RPC_BINDING_HANDLE Binding,
     RPC_BLOCKING_FN BlockingFn,
     unsigned long ServerTid
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcSetThreadParams(
     int fClientFree,
      void *Context,
      void * hWndClient
    );

__declspec(dllimport)
unsigned int
__stdcall
I_RpcWindowProc(
     void * hWnd,
     unsigned int Message,
     unsigned int wParam,
     unsigned long lParam
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointA (
         RPC_CSTR Protseq,
         RPC_CSTR Endpoint
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointW (
         RPC_WSTR Protseq,
         RPC_WSTR Endpoint
    );





#line 772 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdcep.h"
#line 773 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdcep.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqTransportType(
     unsigned int  * Type
    ) ;

__declspec(dllimport)
long
__stdcall
I_RpcMapWin32Status (
     RPC_STATUS Status
    );

typedef struct _RPC_C_OPT_METADATA_DESCRIPTOR
{
    unsigned long BufferSize;   
    char *Buffer;               
} RPC_C_OPT_METADATA_DESCRIPTOR;

typedef struct _RDR_CALLOUT_STATE
{
    
    RPC_STATUS LastError;
    void *LastEEInfo;

    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;

    
    unsigned short *ServerName;   
    unsigned short *ServerPort;   
    unsigned short *RemoteUser;   
    unsigned short *AuthType;     
    unsigned char ResourceTypePresent;
    unsigned char MetadataPresent;
    unsigned char SessionIdPresent;
    unsigned char InterfacePresent;
    UUID ResourceType;
    RPC_C_OPT_METADATA_DESCRIPTOR Metadata;     
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void *CertContext;            
                                  
                                  
} RDR_CALLOUT_STATE;

typedef RPC_STATUS
(__stdcall *I_RpcProxyIsValidMachineFn)
        (
         char *pszMachine,
         char *pszDotMachine,
         unsigned long dwPortNumber        
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientAddressFn)
        (
         void *Context,
         char *Buffer,
         unsigned long *BufferLength
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetConnectionTimeoutFn)
        (
         unsigned long *ConnectionTimeout
        );

typedef RPC_STATUS
(__stdcall *I_RpcPerformCalloutFn) 
    (
     void *Context,
     RDR_CALLOUT_STATE *CallOutState,
     RPC_HTTP_REDIRECTOR_STAGE Stage
    );

typedef void
(__stdcall *I_RpcFreeCalloutStateFn)
    (
     RDR_CALLOUT_STATE *CallOutState
    );

typedef struct tagI_RpcProxyCallbackInterface
{
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
    I_RpcPerformCalloutFn PerformCalloutFn;
    I_RpcFreeCalloutStateFn FreeCalloutStateFn;
} I_RpcProxyCallbackInterface;




__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcProxyNewConnection (
     unsigned long ConnectionType,
     unsigned short *ServerAddress,
     unsigned short *ServerPort,
     unsigned short *MinConnTimeout,
     void *ConnectionParameter,
      RDR_CALLOUT_STATE *CallOutState, 
     I_RpcProxyCallbackInterface *ProxyCallbackInterface
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReplyToClientWithStatus (
     void *ConnectionParameter,
     RPC_STATUS RpcStatus
    );

__declspec(dllimport)
void
__stdcall
I_RpcRecordCalloutFailure (
     RPC_STATUS RpcStatus,
     RDR_CALLOUT_STATE *CallOutState,
     unsigned short *DllName
    );





#line 903 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdcep.h"
#line 2229 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"





#line 2235 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcdce.h"

#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsi.h"



















#pragma once
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsi.h"

typedef void  * RPC_NS_HANDLE;















__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportA(
         unsigned long EntryNameSyntax,
           RPC_CSTR EntryName,
           RPC_IF_HANDLE IfSpec,
           RPC_BINDING_VECTOR  *BindingVec,
           UUID_VECTOR  *ObjectUuidVec
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportA(
         unsigned long EntryNameSyntax,
           RPC_CSTR EntryName,
           RPC_IF_HANDLE IfSpec,
           UUID_VECTOR  *ObjectUuidVec
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportW(
         unsigned long EntryNameSyntax,
           RPC_WSTR EntryName,
           RPC_IF_HANDLE IfSpec,
           RPC_BINDING_VECTOR  *BindingVec,
           UUID_VECTOR  *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportW(
         unsigned long EntryNameSyntax,
           RPC_WSTR EntryName,
           RPC_IF_HANDLE IfSpec,
           UUID_VECTOR  *ObjectUuidVec
    );

#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsi.h"



RPC_STATUS __stdcall
RpcNsBindingExportPnPA(
         unsigned long EntryNameSyntax,
           RPC_CSTR EntryName,
           RPC_IF_HANDLE IfSpec,
           UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPA(
         unsigned long EntryNameSyntax,
           RPC_CSTR EntryName,
           RPC_IF_HANDLE IfSpec,
           UUID_VECTOR *ObjectVector
    );



RPC_STATUS __stdcall
RpcNsBindingExportPnPW(
         unsigned long EntryNameSyntax,
           RPC_WSTR EntryName,
           RPC_IF_HANDLE IfSpec,
           UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPW(
         unsigned long EntryNameSyntax,
           RPC_WSTR EntryName,
           RPC_IF_HANDLE IfSpec,
           UUID_VECTOR *ObjectVector
    );

#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsi.h"



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginA(
         unsigned long EntryNameSyntax,
           RPC_CSTR EntryName,
           RPC_IF_HANDLE IfSpec,
           UUID  *ObjUuid,
         unsigned long BindingMaxCount,
         RPC_NS_HANDLE  *LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginW(
         unsigned long EntryNameSyntax,
           RPC_WSTR EntryName,
           RPC_IF_HANDLE IfSpec,
           UUID  *ObjUuid,
         unsigned long BindingMaxCount,
         RPC_NS_HANDLE  *LookupContext
    );
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupNext(
      RPC_NS_HANDLE LookupContext,
     RPC_BINDING_VECTOR  *  * BindingVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupDone(
      RPC_NS_HANDLE  * LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteA(
         unsigned long GroupNameSyntax,
           RPC_CSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginA(
         unsigned long GroupNameSyntax,
         RPC_CSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_NS_HANDLE  *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextA(
         RPC_NS_HANDLE InquiryContext,
                  RPC_CSTR  *MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteW(
         unsigned long GroupNameSyntax,
           RPC_WSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginW(
         unsigned long GroupNameSyntax,
         RPC_WSTR GroupName,
         unsigned long MemberNameSyntax,
         RPC_NS_HANDLE  *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextW(
         RPC_NS_HANDLE InquiryContext,
                  RPC_WSTR  *MemberName
    );

#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
           RPC_IF_ID  *IfId,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName,
         unsigned long Priority,
           RPC_CSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
           RPC_IF_ID  *IfId,
         unsigned long MemberNameSyntax,
         RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginA(
         unsigned long ProfileNameSyntax,
         RPC_CSTR ProfileName,
         unsigned long InquiryType,
           RPC_IF_ID  *IfId,
         unsigned long VersOption,
         unsigned long MemberNameSyntax,
           RPC_CSTR MemberName,
         RPC_NS_HANDLE  *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextA(
         RPC_NS_HANDLE InquiryContext,
           RPC_IF_ID  *IfId,
         RPC_CSTR  *MemberName,
         unsigned long  *Priority,
         RPC_CSTR  *Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
           RPC_IF_ID  *IfId,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName,
         unsigned long Priority,
           RPC_WSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
           RPC_IF_ID  *IfId,
         unsigned long MemberNameSyntax,
         RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginW(
         unsigned long ProfileNameSyntax,
         RPC_WSTR ProfileName,
         unsigned long InquiryType,
           RPC_IF_ID  *IfId,
         unsigned long VersOption,
         unsigned long MemberNameSyntax,
           RPC_WSTR MemberName,
         RPC_NS_HANDLE  *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextW(
         RPC_NS_HANDLE InquiryContext,
           RPC_IF_ID  *IfId,
         RPC_WSTR  *MemberName,
         unsigned long  *Priority,
         RPC_WSTR  *Annotation
    );

#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
         RPC_NS_HANDLE  *InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
         RPC_NS_HANDLE  *InquiryContext
    );

#line 359 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqNext(
      RPC_NS_HANDLE InquiryContext,
     UUID  * ObjUuid
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
         RPC_CSTR  *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
           RPC_IF_ID  *IfId,
         unsigned long VersOption,
           UUID_VECTOR  *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsA(
         unsigned long EntryNameSyntax,
         RPC_CSTR EntryName,
         RPC_IF_ID_VECTOR  *  *IfIdVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtHandleSetExpAge(
     RPC_NS_HANDLE NsHandle,
     unsigned long ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtInqExpAge(
     unsigned long  * ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtSetExpAge(
     unsigned long ExpirationAge
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
         RPC_WSTR  *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
           RPC_IF_ID  *IfId,
         unsigned long VersOption,
           UUID_VECTOR  *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsW(
         unsigned long EntryNameSyntax,
         RPC_WSTR EntryName,
         RPC_IF_ID_VECTOR  *  *IfIdVec
    );

#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsi.h"



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginA(
         unsigned long EntryNameSyntax,
           RPC_CSTR EntryName,
           RPC_IF_HANDLE IfSpec,
           UUID  *ObjUuid,
         RPC_NS_HANDLE  *ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginW(
         unsigned long EntryNameSyntax,
           RPC_WSTR EntryName,
           RPC_IF_HANDLE IfSpec,
           UUID  *ObjUuid,
         RPC_NS_HANDLE  *ImportContext
    );

#line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportNext(
     RPC_NS_HANDLE ImportContext,
     RPC_BINDING_HANDLE   * Binding
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportDone(
      RPC_NS_HANDLE  * ImportContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingSelect(
      RPC_BINDING_VECTOR  * BindingVec,
     RPC_BINDING_HANDLE   * Binding
    );


















































#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsi.h"

#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsi.h"
#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnterr.h"
















#pragma once
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnterr.h"























#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnterr.h"
#line 143 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"






































#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcasync.h"



















#pragma once
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcasync.h"



#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcasync.h"







typedef
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,
    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,
    RpcNotificationTypeCallback
} RPC_NOTIFICATION_TYPES;

typedef
enum _RPC_ASYNC_EVENT {
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete
    } RPC_ASYNC_EVENT;

struct _RPC_ASYNC_STATE;

typedef void __stdcall
RPCNOTIFICATION_ROUTINE (
                  struct _RPC_ASYNC_STATE *pAsync,
                  void *Context,
                  RPC_ASYNC_EVENT Event);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

typedef struct _RPC_ASYNC_STATE {
    unsigned int    Size; 
    unsigned long   Signature;
    long   Lock;
    unsigned long   Flags;
    void           *StubInfo;
    void           *UserInfo;
    void           *RuntimeInfo;
    RPC_ASYNC_EVENT Event;

    RPC_NOTIFICATION_TYPES NotificationType;
    union {
        
        
        
        struct {
            PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
            HANDLE hThread;
            } APC;

        
        
        
        struct {
            HANDLE hIOPort;
            DWORD dwNumberOfBytesTransferred;
            DWORD_PTR dwCompletionKey;
            LPOVERLAPPED lpOverlapped;
            } IOC;

        
        
        
        struct {
            HWND hWnd;
            UINT Msg;
            } HWND;


        
        
        
        HANDLE hEvent;

        
        
        
        
        
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        } u;

    LONG_PTR Reserved[4];
    } RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;







__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncInitializeHandle (
    PRPC_ASYNC_STATE pAsync,
    unsigned int     Size
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncRegisterInfo (
    PRPC_ASYNC_STATE pAsync
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncGetCallStatus (
    PRPC_ASYNC_STATE pAsync
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCompleteCall (
    PRPC_ASYNC_STATE pAsync,
    void *Reply
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncAbortCall (
    PRPC_ASYNC_STATE pAsync,
    unsigned long ExceptionCode
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCancelCall (
     PRPC_ASYNC_STATE pAsync,
     BOOL fAbort
    ) ;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCleanupThread (
     DWORD dwTimeout
    );

typedef enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary
} ExtendedErrorParamTypes;




typedef struct tagBinaryParam
{
    void *Buffer;
    short Size;
} BinaryParam;

typedef struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    union
        {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        long LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
        } u;
} RPC_EE_INFO_PARAM;








typedef struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union
        {
        SYSTEMTIME SystemTime;
        FILETIME FileTime;
        } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
} RPC_EXTENDED_ERROR_INFO;

typedef struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void *CurrentPos;
    void *Head;
} RPC_ERROR_ENUM_HANDLE;

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorStartEnumeration (
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorGetNextRecord (
     RPC_ERROR_ENUM_HANDLE *EnumHandle, 
     BOOL CopyStrings, 
     RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorEndEnumeration (
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorResetEnumeration (
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorGetNumberOfRecords (
     RPC_ERROR_ENUM_HANDLE *EnumHandle, 
     int *Records
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorSaveErrorInfo (
     RPC_ERROR_ENUM_HANDLE *EnumHandle, 
     PVOID *ErrorBlob, 
     size_t *BlobSize
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorLoadErrorInfo (
     PVOID ErrorBlob, 
     size_t BlobSize, 
     RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorAddRecord (
     RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
void 
__stdcall
RpcErrorClearInformation (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcGetAuthorizationContextForClient (
     RPC_BINDING_HANDLE ClientBinding ,
     BOOL ImpersonateOnReturn,
     PVOID Reserved1,
     PLARGE_INTEGER pExpirationTime ,
     LUID Reserved2,
     DWORD Reserved3,
     PVOID Reserved4,
     PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcFreeAuthorizationContext (
      PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockExclusive (
     RPC_BINDING_HANDLE ServerBindingHandle,
     PVOID UserContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockShared (
     RPC_BINDING_HANDLE ServerBindingHandle,
     PVOID UserContext
    );





typedef struct tagRPC_CALL_ATTRIBUTES_V1_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V1_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_A;

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesW (
     RPC_BINDING_HANDLE ClientBinding, 
      void *RpcCallAttributes
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesA (
     RPC_BINDING_HANDLE ClientBinding, 
      void *RpcCallAttributes
    );







#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcasync.h"

typedef RPC_CALL_ATTRIBUTES_V1_A RPC_CALL_ATTRIBUTES;




RPC_STATUS __stdcall
I_RpcAsyncSetHandle (
      PRPC_MESSAGE Message,
      PRPC_ASYNC_STATE pAsync
    );

RPC_STATUS __stdcall
I_RpcAsyncAbortCall (
     PRPC_ASYNC_STATE pAsync,
     unsigned long ExceptionCode
    ) ;

int 
__stdcall
I_RpcExceptionFilter (
    unsigned long ExceptionCode
    );







#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcasync.h"

#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcasync.h"

#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"

#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"



#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"





#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpc.h"

#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
 



















#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"








#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"








#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"







struct HDROP__ { int unused; }; typedef struct HDROP__ *HDROP;

extern __declspec(dllimport) UINT __stdcall DragQueryFileA(HDROP,UINT,LPSTR,UINT);
extern __declspec(dllimport) UINT __stdcall DragQueryFileW(HDROP,UINT,LPWSTR,UINT);




#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
extern __declspec(dllimport) BOOL __stdcall DragQueryPoint(HDROP,LPPOINT);
extern __declspec(dllimport) void __stdcall DragFinish(HDROP);
extern __declspec(dllimport) void __stdcall DragAcceptFiles(HWND,BOOL);

extern __declspec(dllimport) HINSTANCE __stdcall ShellExecuteA(HWND hwnd, LPCSTR lpOperation, LPCSTR lpFile, LPCSTR lpParameters, LPCSTR lpDirectory, INT nShowCmd);
extern __declspec(dllimport) HINSTANCE __stdcall ShellExecuteW(HWND hwnd, LPCWSTR lpOperation, LPCWSTR lpFile, LPCWSTR lpParameters, LPCWSTR lpDirectory, INT nShowCmd);




#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
extern __declspec(dllimport) HINSTANCE __stdcall FindExecutableA(LPCSTR lpFile, LPCSTR lpDirectory, LPSTR lpResult);
extern __declspec(dllimport) HINSTANCE __stdcall FindExecutableW(LPCWSTR lpFile, LPCWSTR lpDirectory, LPWSTR lpResult);




#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
extern __declspec(dllimport) LPWSTR * __stdcall  CommandLineToArgvW(LPCWSTR lpCmdLine, int*pNumArgs);

extern __declspec(dllimport) INT __stdcall ShellAboutA(HWND hWnd, LPCSTR szApp, LPCSTR szOtherStuff, HICON hIcon);
extern __declspec(dllimport) INT __stdcall ShellAboutW(HWND hWnd, LPCWSTR szApp, LPCWSTR szOtherStuff, HICON hIcon);




#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
extern __declspec(dllimport) HICON __stdcall DuplicateIcon(HINSTANCE hInst, HICON hIcon);
extern __declspec(dllimport) HICON __stdcall ExtractAssociatedIconA(HINSTANCE hInst, LPSTR lpIconPath, LPWORD lpiIcon);
extern __declspec(dllimport) HICON __stdcall ExtractAssociatedIconW(HINSTANCE hInst, LPWSTR lpIconPath, LPWORD lpiIcon);




#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"








#line 108 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
extern __declspec(dllimport) HICON __stdcall ExtractIconA(HINSTANCE hInst, LPCSTR lpszExeFileName, UINT nIconIndex);
extern __declspec(dllimport) HICON __stdcall ExtractIconW(HINSTANCE hInst, LPCWSTR lpszExeFileName, UINT nIconIndex);




#line 115 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"


typedef struct _DRAGINFOA {
    UINT uSize;                 
    POINT pt;
    BOOL fNC;
    LPSTR   lpFileList;
    DWORD grfKeyState;
} DRAGINFOA, *LPDRAGINFOA;
typedef struct _DRAGINFOW {
    UINT uSize;                 
    POINT pt;
    BOOL fNC;
    LPWSTR  lpFileList;
    DWORD grfKeyState;
} DRAGINFOW, *LPDRAGINFOW;




typedef DRAGINFOA DRAGINFO;
typedef LPDRAGINFOA LPDRAGINFO;
#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"














                                        
                                        


















typedef struct _AppBarData
{
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam; 
} APPBARDATA, *PAPPBARDATA;


extern __declspec(dllimport) UINT_PTR __stdcall SHAppBarMessage(DWORD dwMessage, PAPPBARDATA pData);





extern __declspec(dllimport) DWORD __stdcall   DoEnvironmentSubstA(LPSTR szString, UINT cchString);
extern __declspec(dllimport) DWORD __stdcall   DoEnvironmentSubstW(LPWSTR szString, UINT cchString);




#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"


extern __declspec(dllimport) UINT __stdcall ExtractIconExA(LPCSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);
extern __declspec(dllimport) UINT __stdcall ExtractIconExW(LPCWSTR lpszFile, int nIconIndex, HICON *phiconLarge, HICON *phiconSmall, UINT nIcons);




#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"


















                                      










#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"


#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"

typedef WORD FILEOP_FLAGS;




                                
                                
                                
                                




typedef WORD PRINTEROP_FLAGS;

#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"








typedef struct _SHFILEOPSTRUCTA
{
        HWND            hwnd;
        UINT            wFunc;
        LPCSTR          pFrom;
        LPCSTR          pTo;
        FILEOP_FLAGS    fFlags;
        BOOL            fAnyOperationsAborted;
        LPVOID          hNameMappings;
        LPCSTR           lpszProgressTitle; 
} SHFILEOPSTRUCTA, *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW
{
        HWND            hwnd;
        UINT            wFunc;
        LPCWSTR         pFrom;
        LPCWSTR         pTo;
        FILEOP_FLAGS    fFlags;
        BOOL            fAnyOperationsAborted;
        LPVOID          hNameMappings;
        LPCWSTR          lpszProgressTitle; 
} SHFILEOPSTRUCTW, *LPSHFILEOPSTRUCTW;




typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"

extern __declspec(dllimport) int __stdcall SHFileOperationA(LPSHFILEOPSTRUCTA lpFileOp);
extern __declspec(dllimport) int __stdcall SHFileOperationW(LPSHFILEOPSTRUCTW lpFileOp);




#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
extern __declspec(dllimport) void __stdcall SHFreeNameMappings(HANDLE hNameMappings);

typedef struct _SHNAMEMAPPINGA
{
    LPSTR   pszOldPath;
    LPSTR   pszNewPath;
    int   cchOldPath;
    int   cchNewPath;
} SHNAMEMAPPINGA, *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW
{
    LPWSTR  pszOldPath;
    LPWSTR  pszNewPath;
    int   cchOldPath;
    int   cchNewPath;
} SHNAMEMAPPINGW, *LPSHNAMEMAPPINGW;




typedef SHNAMEMAPPINGA SHNAMEMAPPING;
typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"



















#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"






























#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"



#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"


#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"


















#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"

typedef struct _SHELLEXECUTEINFOA
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCSTR   lpVerb;
        LPCSTR   lpFile;
        LPCSTR   lpParameters;
        LPCSTR   lpDirectory;
        int nShow;
        HINSTANCE hInstApp;
        
        LPVOID lpIDList;
        LPCSTR   lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        union {
        HANDLE hIcon;
        HANDLE hMonitor;
        } ;
        HANDLE hProcess;
} SHELLEXECUTEINFOA, *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCWSTR  lpVerb;
        LPCWSTR  lpFile;
        LPCWSTR  lpParameters;
        LPCWSTR  lpDirectory;
        int nShow;
        HINSTANCE hInstApp;
        
        LPVOID lpIDList;
        LPCWSTR  lpClass;
        HKEY hkeyClass;
        DWORD dwHotKey;
        union {
        HANDLE hIcon;
        HANDLE hMonitor;
        } ;
        HANDLE hProcess;
} SHELLEXECUTEINFOW, *LPSHELLEXECUTEINFOW;




typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"

extern __declspec(dllimport) BOOL __stdcall ShellExecuteExA(LPSHELLEXECUTEINFOA lpExecInfo);
extern __declspec(dllimport) BOOL __stdcall ShellExecuteExW(LPSHELLEXECUTEINFOW lpExecInfo);




#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
extern __declspec(dllimport) void __stdcall WinExecErrorA(HWND hwnd, int error, LPCSTR lpstrFileName, LPCSTR lpstrTitle);
extern __declspec(dllimport) void __stdcall WinExecErrorW(HWND hwnd, int error, LPCWSTR lpstrFileName, LPCWSTR lpstrTitle);




#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"



typedef struct _SHCREATEPROCESSINFOW
{
        DWORD cbSize;
        ULONG fMask;
        HWND hwnd;
        LPCWSTR  pszFile;
        LPCWSTR  pszParameters;
        LPCWSTR  pszCurrentDirectory;
         HANDLE hUserToken;
         LPSECURITY_ATTRIBUTES lpProcessAttributes;
         LPSECURITY_ATTRIBUTES lpThreadAttributes;
         BOOL bInheritHandles;
         DWORD dwCreationFlags;
         LPSTARTUPINFOW lpStartupInfo;
         LPPROCESS_INFORMATION lpProcessInformation;
} SHCREATEPROCESSINFOW, *PSHCREATEPROCESSINFOW;

extern __declspec(dllimport) BOOL __stdcall SHCreateProcessAsUserW(PSHCREATEPROCESSINFOW pscpi);










typedef struct _SHQUERYRBINFO {
    DWORD   cbSize;

    __int64 i64Size;
    __int64 i64NumItems;



#line 508 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
} SHQUERYRBINFO, *LPSHQUERYRBINFO;









extern __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinA(LPCSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);
extern __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinW(LPCWSTR pszRootPath, LPSHQUERYRBINFO pSHQueryRBInfo);




#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
extern __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinA(HWND hwnd, LPCSTR pszRootPath, DWORD dwFlags);
extern __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinW(HWND hwnd, LPCWSTR pszRootPath, DWORD dwFlags);




#line 532 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"









typedef struct _NOTIFYICONDATAA {
        DWORD cbSize;
        HWND hWnd;
        UINT uID;
        UINT uFlags;
        UINT uCallbackMessage;
        HICON hIcon;

        CHAR   szTip[64];


#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"










#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"


#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW {
        DWORD cbSize;
        HWND hWnd;
        UINT uID;
        UINT uFlags;
        UINT uCallbackMessage;
        HICON hIcon;

        WCHAR  szTip[64];


#line 580 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"










#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"


#line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
} NOTIFYICONDATAW, *PNOTIFYICONDATAW;




typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
#line 602 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"








#line 611 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"







#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"






#line 626 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"






#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"









#line 643 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"







#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"


#line 654 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"





















#line 676 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"

extern __declspec(dllimport) BOOL __stdcall Shell_NotifyIconA(DWORD dwMessage, PNOTIFYICONDATAA lpData);
extern __declspec(dllimport) BOOL __stdcall Shell_NotifyIconW(DWORD dwMessage, PNOTIFYICONDATAW lpData);




#line 684 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"




























typedef struct _SHFILEINFOA
{
        HICON       hIcon;                      
        int         iIcon;                      
        DWORD       dwAttributes;               
        CHAR        szDisplayName[260];    
        CHAR        szTypeName[80];             
} SHFILEINFOA;
typedef struct _SHFILEINFOW
{
        HICON       hIcon;                      
        int         iIcon;                      
        DWORD       dwAttributes;               
        WCHAR       szDisplayName[260];    
        WCHAR       szTypeName[80];             
} SHFILEINFOW;



typedef SHFILEINFOA SHFILEINFO;
#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"



#line 737 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"






















#line 760 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"

extern __declspec(dllimport) DWORD_PTR __stdcall SHGetFileInfoA(LPCSTR pszPath, DWORD dwFileAttributes, SHFILEINFOA *psfi, UINT cbFileInfo, UINT uFlags);
extern __declspec(dllimport) DWORD_PTR __stdcall SHGetFileInfoW(LPCWSTR pszPath, DWORD dwFileAttributes, SHFILEINFOW *psfi, UINT cbFileInfo, UINT uFlags);




#line 768 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"




extern __declspec(dllimport) BOOL __stdcall SHGetDiskFreeSpaceExA(LPCSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller, ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
extern __declspec(dllimport) BOOL __stdcall SHGetDiskFreeSpaceExW(LPCWSTR pszDirectoryName, ULARGE_INTEGER* pulFreeBytesAvailableToCaller, ULARGE_INTEGER* pulTotalNumberOfBytes, ULARGE_INTEGER* pulTotalNumberOfFreeBytes);




#line 779 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
extern __declspec(dllimport) BOOL __stdcall SHGetNewLinkInfoA(LPCSTR pszLinkTo, LPCSTR pszDir, LPSTR pszName, BOOL *pfMustCopy, UINT uFlags);
extern __declspec(dllimport) BOOL __stdcall SHGetNewLinkInfoW(LPCWSTR pszLinkTo, LPCWSTR pszDir, LPWSTR pszName, BOOL *pfMustCopy, UINT uFlags);




#line 786 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"






#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"


















extern __declspec(dllimport) BOOL __stdcall SHInvokePrinterCommandA(HWND hwnd, UINT uAction, LPCSTR lpBuf1, LPCSTR lpBuf2, BOOL fModal);
extern __declspec(dllimport) BOOL __stdcall SHInvokePrinterCommandW(HWND hwnd, UINT uAction, LPCWSTR lpBuf1, LPCWSTR lpBuf2, BOOL fModal);




#line 818 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"


#line 821 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"












































#line 866 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"



extern __declspec(dllimport) HRESULT __stdcall SHSetLocalizedName(LPWSTR pszPath, LPCWSTR pszResModule, int idsRes);










































#line 913 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"









#line 923 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"


























#line 950 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"



#line 954 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"

















#line 972 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"






#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 979 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"
#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"

#line 982 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\shellapi.h"


#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winperf.h"




































#pragma once
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winperf.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winperf.h"

















typedef struct _PERF_DATA_BLOCK {
    WCHAR           Signature[4];       
    DWORD           LittleEndian;       
    DWORD           Version;            
                                        
    DWORD           Revision;           
                                        
    DWORD           TotalByteLength;    
    DWORD           HeaderLength;       
    DWORD           NumObjectTypes;     
                                        
    LONG            DefaultObject;      
                                        
                                        
                                        
                                        
    SYSTEMTIME      SystemTime;         
                                        
    LARGE_INTEGER   PerfTime;           
                                        
    LARGE_INTEGER   PerfFreq;           
                                        
    LARGE_INTEGER   PerfTime100nSec;    
                                        
    DWORD           SystemNameLength;   
    DWORD           SystemNameOffset;   
                                        
                                        
} PERF_DATA_BLOCK, *PPERF_DATA_BLOCK;









typedef struct _PERF_OBJECT_TYPE {
    DWORD           TotalByteLength;    
                                        
                                        
                                        
                                        
                                        
                                        
                                        
    DWORD           DefinitionLength;   
                                        
                                        
                                        
                                        
                                        
                                        
                                        
    DWORD           HeaderLength;       
                                        
                                        
                                        
    DWORD           ObjectNameTitleIndex;
                                        



    LPWSTR          ObjectNameTitle;    
                                        
                                        
#line 126 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winperf.h"
    DWORD           ObjectHelpTitleIndex;
                                        



    LPWSTR          ObjectHelpTitle;    
                                        
                                        
#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winperf.h"
    DWORD           DetailLevel;        
                                        
                                        
                                        
    DWORD           NumCounters;        
                                        
                                        
    LONG            DefaultCounter;     
                                        
                                        
                                        
    LONG            NumInstances;       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
    DWORD           CodePage;           
                                        
                                        
    LARGE_INTEGER   PerfTime;           
                                        
    LARGE_INTEGER   PerfFreq;           
                                        
} PERF_OBJECT_TYPE, *PPERF_OBJECT_TYPE;


























                                            
























































































































































































































































































                                        




































































typedef struct _PERF_COUNTER_DEFINITION {
    DWORD           ByteLength;         
    DWORD           CounterNameTitleIndex;
                                        
                                        



    LPWSTR          CounterNameTitle;   
                                        
                                        
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winperf.h"
    DWORD           CounterHelpTitleIndex;
                                        
                                        



    LPWSTR          CounterHelpTitle;   
                                        
                                        
#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winperf.h"
    LONG            DefaultScale;       
                                        
                                        
    DWORD           DetailLevel;        
                                        
    DWORD           CounterType;        
    DWORD           CounterSize;        
    DWORD           CounterOffset;      
                                        
                                        
} PERF_COUNTER_DEFINITION, *PPERF_COUNTER_DEFINITION;














typedef struct _PERF_INSTANCE_DEFINITION {
    DWORD           ByteLength;         
                                        
    DWORD           ParentObjectTitleIndex;
                                        
                                        
                                        
                                        
                                        
    DWORD           ParentObjectInstance;
                                        
                                        
                                        
    LONG            UniqueID;           
                                        
                                        
    DWORD           NameOffset;         
                                        
                                        
    DWORD           NameLength;         
                                        
                                        
                                        
                                        
                                        
} PERF_INSTANCE_DEFINITION, *PPERF_INSTANCE_DEFINITION;













typedef struct _PERF_COUNTER_BLOCK {
    DWORD           ByteLength;         
                                        
} PERF_COUNTER_BLOCK, *PPERF_COUNTER_BLOCK;
















typedef DWORD (__stdcall PM_OPEN_PROC) (LPWSTR);
typedef DWORD (__stdcall PM_COLLECT_PROC) (LPWSTR, LPVOID *, LPDWORD, LPDWORD);
typedef DWORD (__stdcall PM_CLOSE_PROC) (void);
typedef DWORD (__stdcall PM_QUERY_PROC) (LPDWORD, LPVOID *, LPDWORD, LPDWORD);
















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 669 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winperf.h"

#line 671 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winperf.h"

#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsock.h"
















#pragma once
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsock.h"











typedef unsigned char   u_char;
typedef unsigned short  u_short;
typedef unsigned int    u_int;
typedef unsigned long   u_long;






typedef UINT_PTR        SOCKET;











#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsock.h"

typedef struct fd_set {
        u_int   fd_count;               
        SOCKET  fd_array[64];   
} fd_set;





extern int __stdcall  __WSAFDIsSet(SOCKET, fd_set  *);

































struct timeval {
        long    tv_sec;         
        long    tv_usec;        
};



























                                        
























struct  hostent {
        char     * h_name;           
        char     *  * h_aliases;  
        short   h_addrtype;             
        short   h_length;               
        char     *  * h_addr_list; 

};





struct  netent {
        char     * n_name;           
        char     *  * n_aliases;  
        short   n_addrtype;             
        u_long  n_net;                  
};

struct  servent {
        char     * s_name;           
        char     *  * s_aliases;  




        short   s_port;                 
        char     * s_proto;          
#line 183 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsock.h"
};

struct  protoent {
        char     * p_name;           
        char     *  * p_aliases;  
        short   p_proto;                
};





























































                                        


















struct in_addr {
        union {
                struct { u_char s_b1,s_b2,s_b3,s_b4; } S_un_b;
                struct { u_short s_w1,s_w2; } S_un_w;
                u_long S_addr;
        } S_un;

                                

                                

                                

                                

                                

                                
};
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsock.h"































struct sockaddr_in {
        short   sin_family;
        u_short sin_port;
        struct  in_addr sin_addr;
        char    sin_zero[8];
};




typedef struct WSAData {
        WORD                    wVersion;
        WORD                    wHighVersion;







        char                    szDescription[256+1];
        char                    szSystemStatus[128+1];
        unsigned short          iMaxSockets;
        unsigned short          iMaxUdpDg;
        char  *              lpVendorInfo;
#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsock.h"
} WSADATA;

typedef WSADATA  *LPWSADATA;






















struct ip_mreq {
        struct in_addr  imr_multiaddr;  
        struct in_addr  imr_interface;  
};






















































































































struct sockaddr {
        u_short sa_family;              
        char    sa_data[14];            
};





struct sockproto {
        u_short sp_family;              
        u_short sp_protocol;            
};

































struct  linger {
        u_short l_onoff;                
        u_short l_linger;               
};
































































































































































































#line 737 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsock.h"







SOCKET __stdcall  accept (
                           SOCKET s,
                           struct sockaddr  *addr,
                            int  *addrlen);

int __stdcall  bind (
                      SOCKET s,
                      const struct sockaddr  *addr,
                      int namelen);

int __stdcall  closesocket (  SOCKET s);

int __stdcall  connect (
                         SOCKET s,
                         const struct sockaddr  *name,
                         int namelen);

int __stdcall  ioctlsocket (
                             SOCKET s,
                             long cmd,
                              u_long  *argp);

int __stdcall  getpeername (
                             SOCKET s,
                             struct sockaddr  *name,
                              int  * namelen);

int __stdcall  getsockname (
                             SOCKET s,
                             struct sockaddr  *name,
                              int  * namelen);

int __stdcall  getsockopt (
                            SOCKET s,
                            int level,
                            int optname,
                            char  * optval,
                             int  *optlen);

u_long __stdcall  htonl (  u_long hostlong);

u_short __stdcall  htons ( u_short hostshort);

unsigned long __stdcall  inet_addr ( const char  * cp);

char  * __stdcall  inet_ntoa ( struct in_addr in);

int __stdcall  listen (
                        SOCKET s,
                        int backlog);

u_long __stdcall  ntohl ( u_long netlong);

u_short __stdcall  ntohs ( u_short netshort);

int __stdcall  recv (
                      SOCKET s,
                      char  * buf,
                      int len,
                      int flags);

int __stdcall  recvfrom (
                          SOCKET s,
                          char  * buf,
                          int len,
                          int flags,
                          struct sockaddr  *from,
                           int  * fromlen);

int __stdcall  select (
                         int nfds,
                          fd_set  *readfds,
                          fd_set  *writefds,
                          fd_set  *exceptfds,
                         const struct timeval  *timeout);

int __stdcall  send (
                      SOCKET s,
                      const char  * buf,
                      int len,
                      int flags);

int __stdcall  sendto (
                        SOCKET s,
                        const char  * buf,
                        int len,
                        int flags,
                        const struct sockaddr  *to,
                        int tolen);

int __stdcall  setsockopt (
                            SOCKET s,
                            int level,
                            int optname,
                            const char  * optval,
                            int optlen);

int __stdcall  shutdown (
                          SOCKET s,
                          int how);

SOCKET __stdcall  socket (
                           int af,
                           int type,
                           int protocol);



struct hostent  * __stdcall  gethostbyaddr(
                                               const char  * addr,
                                               int len,
                                               int type);

struct hostent  * __stdcall  gethostbyname( const char  * name);

int __stdcall  gethostname (
                             char  * name,
                             int namelen);

struct servent  * __stdcall  getservbyport(
                                               int port,
                                               const char  * proto);

struct servent  * __stdcall  getservbyname(
                                               const char  * name,
                                               const char  * proto);

struct protoent  * __stdcall  getprotobynumber( int proto);

struct protoent  * __stdcall  getprotobyname( const char  * name);



int __stdcall  WSAStartup(
                           WORD wVersionRequired,
                           LPWSADATA lpWSAData);

int __stdcall  WSACleanup(void);

void __stdcall  WSASetLastError( int iError);

int __stdcall  WSAGetLastError(void);

BOOL __stdcall  WSAIsBlocking(void);

int __stdcall  WSAUnhookBlockingHook(void);

FARPROC __stdcall  WSASetBlockingHook( FARPROC lpBlockFunc);

int __stdcall  WSACancelBlockingCall(void);

HANDLE __stdcall  WSAAsyncGetServByName(
                                         HWND hWnd,
                                         u_int wMsg,
                                         const char  * name,
                                         const char  * proto,
                                         char  * buf,
                                         int buflen);

HANDLE __stdcall  WSAAsyncGetServByPort(
                                         HWND hWnd,
                                         u_int wMsg,
                                         int port,
                                         const char  * proto,
                                         char  * buf,
                                         int buflen);

HANDLE __stdcall  WSAAsyncGetProtoByName(
                                          HWND hWnd,
                                          u_int wMsg,
                                          const char  * name,
                                          char  * buf,
                                          int buflen);

HANDLE __stdcall  WSAAsyncGetProtoByNumber(
                                            HWND hWnd,
                                            u_int wMsg,
                                            int number,
                                            char  * buf,
                                            int buflen);

HANDLE __stdcall  WSAAsyncGetHostByName(
                                         HWND hWnd,
                                         u_int wMsg,
                                         const char  * name,
                                         char  * buf,
                                         int buflen);

HANDLE __stdcall  WSAAsyncGetHostByAddr(
                                         HWND hWnd,
                                         u_int wMsg,
                                         const char  * addr,
                                         int len,
                                         int type,
                                         char  * buf,
                                         int buflen);

int __stdcall  WSACancelAsyncRequest( HANDLE hAsyncTaskHandle);

int __stdcall  WSAAsyncSelect(
                               SOCKET s,
                               HWND hWnd,
                               u_int wMsg,
                               long lEvent);

int __stdcall  WSARecvEx (
                           SOCKET s,
                           char  * buf,
                           int len,
                            int  *flags);

typedef struct _TRANSMIT_FILE_BUFFERS {
    PVOID Head;
    DWORD HeadLength;
    PVOID Tail;
    DWORD TailLength;
} TRANSMIT_FILE_BUFFERS, *PTRANSMIT_FILE_BUFFERS, *LPTRANSMIT_FILE_BUFFERS;





BOOL
__stdcall 
TransmitFile (
     SOCKET hSocket,
     HANDLE hFile,
     DWORD nNumberOfBytesToWrite,
     DWORD nNumberOfBytesPerSend,
     LPOVERLAPPED lpOverlapped,
     LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,
     DWORD dwReserved
    );

BOOL
__stdcall 
AcceptEx (
     SOCKET sListenSocket,
     SOCKET sAcceptSocket,
     PVOID lpOutputBuffer,
     DWORD dwReceiveDataLength,
     DWORD dwLocalAddressLength,
     DWORD dwRemoteAddressLength,
     LPDWORD lpdwBytesReceived,
     LPOVERLAPPED lpOverlapped
    );

void
__stdcall 
GetAcceptExSockaddrs (
     PVOID lpOutputBuffer,
     DWORD dwReceiveDataLength,
     DWORD dwLocalAddressLength,
     DWORD dwRemoteAddressLength,
     struct sockaddr **LocalSockaddr,
     LPINT LocalSockaddrLength,
     struct sockaddr **RemoteSockaddr,
     LPINT RemoteSockaddrLength
    );






typedef struct sockaddr SOCKADDR;
typedef struct sockaddr *PSOCKADDR;
typedef struct sockaddr  *LPSOCKADDR;

typedef struct sockaddr_in SOCKADDR_IN;
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct sockaddr_in  *LPSOCKADDR_IN;

typedef struct linger LINGER;
typedef struct linger *PLINGER;
typedef struct linger  *LPLINGER;

typedef struct in_addr IN_ADDR;
typedef struct in_addr *PIN_ADDR;
typedef struct in_addr  *LPIN_ADDR;

typedef struct fd_set FD_SET;
typedef struct fd_set *PFD_SET;
typedef struct fd_set  *LPFD_SET;

typedef struct hostent HOSTENT;
typedef struct hostent *PHOSTENT;
typedef struct hostent  *LPHOSTENT;

typedef struct servent SERVENT;
typedef struct servent *PSERVENT;
typedef struct servent  *LPSERVENT;

typedef struct protoent PROTOENT;
typedef struct protoent *PPROTOENT;
typedef struct protoent  *LPPROTOENT;

typedef struct timeval TIMEVAL;
typedef struct timeval *PTIMEVAL;
typedef struct timeval  *LPTIMEVAL;











































#line 1088 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsock.h"

#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"


















#pragma warning(push)
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"
#pragma warning(disable:4201)    
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"


#pragma once
#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"
















































#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"





#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"




















































































































typedef unsigned int ALG_ID;
#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"















































typedef ULONG_PTR HCRYPTPROV;
typedef ULONG_PTR HCRYPTKEY;
typedef ULONG_PTR HCRYPTHASH;






































                                            
                                            

































































































































































































































#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"







#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"







#line 534 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"







#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"







#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"







#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"







#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"







#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"







#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"







#line 590 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"







#line 598 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"







































































































typedef struct _CMS_KEY_INFO {
    DWORD       dwVersion;                      
    ALG_ID  Algid;                              
    BYTE    *pbOID;                             
    DWORD   cbOID;                              
} CMS_KEY_INFO, *PCMS_KEY_INFO;


typedef struct _HMAC_Info {
    ALG_ID  HashAlgid;
    BYTE    *pbInnerString;
    DWORD   cbInnerString;
    BYTE    *pbOuterString;
    DWORD   cbOuterString;
} HMAC_INFO, *PHMAC_INFO;


typedef struct _SCHANNEL_ALG {
    DWORD   dwUse;
    ALG_ID  Algid;
    DWORD   cBits;
    DWORD   dwFlags;
    DWORD   dwReserved;
} SCHANNEL_ALG, *PSCHANNEL_ALG;








typedef struct _PROV_ENUMALGS {
    ALG_ID    aiAlgid;
    DWORD     dwBitLen;
    DWORD     dwNameLen;
    CHAR      szName[20];
} PROV_ENUMALGS;

typedef struct _PROV_ENUMALGS_EX {
    ALG_ID    aiAlgid;
    DWORD     dwDefaultLen;
    DWORD     dwMinLen;
    DWORD     dwMaxLen;
    DWORD     dwProtocols;
    DWORD     dwNameLen;
    CHAR      szName[20];
    DWORD     dwLongNameLen;
    CHAR      szLongName[40];
} PROV_ENUMALGS_EX;

typedef struct _PUBLICKEYSTRUC {
        BYTE    bType;
        BYTE    bVersion;
        WORD    reserved;
        ALG_ID  aiKeyAlg;
} BLOBHEADER, PUBLICKEYSTRUC;

typedef struct _RSAPUBKEY {
        DWORD   magic;                  
        DWORD   bitlen;                 
        DWORD   pubexp;                 
                                        
} RSAPUBKEY;

typedef struct _PUBKEY {
        DWORD   magic;
        DWORD   bitlen;                 
} DHPUBKEY, DSSPUBKEY, KEAPUBKEY, TEKPUBKEY;

typedef struct _DSSSEED {
        DWORD   counter;
        BYTE    seed[20];
} DSSSEED;

typedef struct _PUBKEYVER3 {
        DWORD   magic;
        DWORD   bitlenP;                
        DWORD   bitlenQ;                
        DWORD   bitlenJ;                
        DSSSEED DSSSeed;
} DHPUBKEY_VER3, DSSPUBKEY_VER3;

typedef struct _PRIVKEYVER3 {
        DWORD   magic;
        DWORD   bitlenP;                
        DWORD   bitlenQ;                
        DWORD   bitlenJ;                
        DWORD   bitlenX;                
        DSSSEED DSSSeed;
} DHPRIVKEY_VER3, DSSPRIVKEY_VER3;

typedef struct _KEY_TYPE_SUBTYPE {
        DWORD   dwKeySpec;
        GUID    Type;
        GUID    Subtype;
} KEY_TYPE_SUBTYPE, *PKEY_TYPE_SUBTYPE;

typedef struct _CERT_FORTEZZA_DATA_PROP {
    unsigned char   SerialNumber[8];
    int             CertIndex;
    unsigned char   CertLabel[36];
} CERT_FORTEZZA_DATA_PROP;

typedef struct _CRYPT_RC4_KEY_STATE {
    unsigned char Key[16];
    unsigned char SBox[256];
    unsigned char i;
    unsigned char j;
} CRYPT_RC4_KEY_STATE, *PCRYPT_RC4_KEY_STATE;

typedef struct _CRYPT_DES_KEY_STATE {
    unsigned char Key[8];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_DES_KEY_STATE, *PCRYPT_DES_KEY_STATE;

typedef struct _CRYPT_3DES_KEY_STATE {
    unsigned char Key[24];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_3DES_KEY_STATE, *PCRYPT_3DES_KEY_STATE;





typedef struct _CRYPTOAPI_BLOB {
    DWORD   cbData;
    BYTE    *pbData;
} CRYPT_INTEGER_BLOB, *PCRYPT_INTEGER_BLOB,
CRYPT_UINT_BLOB, *PCRYPT_UINT_BLOB,
CRYPT_OBJID_BLOB, *PCRYPT_OBJID_BLOB,
CERT_NAME_BLOB, *PCERT_NAME_BLOB,
CERT_RDN_VALUE_BLOB, *PCERT_RDN_VALUE_BLOB,
CERT_BLOB, *PCERT_BLOB,
CRL_BLOB, *PCRL_BLOB,
DATA_BLOB, *PDATA_BLOB,
CRYPT_DATA_BLOB, *PCRYPT_DATA_BLOB,
CRYPT_HASH_BLOB, *PCRYPT_HASH_BLOB,
CRYPT_DIGEST_BLOB, *PCRYPT_DIGEST_BLOB,
CRYPT_DER_BLOB, *PCRYPT_DER_BLOB,
CRYPT_ATTR_BLOB, *PCRYPT_ATTR_BLOB;


typedef struct _CMS_DH_KEY_INFO {
    DWORD               dwVersion;                      
    ALG_ID          Algid;                              
    LPSTR           pszContentEncObjId; 
    CRYPT_DATA_BLOB PubInfo;            
    void            *pReserved;         
} CMS_DH_KEY_INFO, *PCMS_DH_KEY_INFO;


__declspec(dllimport)
BOOL
__stdcall
CryptAcquireContextA(
    HCRYPTPROV *phProv,
    LPCSTR szContainer,
    LPCSTR szProvider,
    DWORD dwProvType,
    DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptAcquireContextW(
    HCRYPTPROV *phProv,
    LPCWSTR szContainer,
    LPCWSTR szProvider,
    DWORD dwProvType,
    DWORD dwFlags
    );




#line 880 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CryptReleaseContext(
    HCRYPTPROV hProv,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGenKey(
    HCRYPTPROV hProv,
    ALG_ID Algid,
    DWORD dwFlags,
    HCRYPTKEY *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDeriveKey(
    HCRYPTPROV hProv,
    ALG_ID Algid,
    HCRYPTHASH hBaseData,
    DWORD dwFlags,
    HCRYPTKEY *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDestroyKey(
    HCRYPTKEY hKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptSetKeyParam(
    HCRYPTKEY hKey,
    DWORD dwParam,
    const BYTE *pbData,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetKeyParam(
    HCRYPTKEY hKey,
    DWORD dwParam,
    BYTE *pbData,
    DWORD *pdwDataLen,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptSetHashParam(
    HCRYPTHASH hHash,
    DWORD dwParam,
    const BYTE *pbData,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetHashParam(
    HCRYPTHASH hHash,
    DWORD dwParam,
    BYTE *pbData,
    DWORD *pdwDataLen,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptSetProvParam(
    HCRYPTPROV hProv,
    DWORD dwParam,
    const BYTE *pbData,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetProvParam(
    HCRYPTPROV hProv,
    DWORD dwParam,
    BYTE *pbData,
    DWORD *pdwDataLen,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGenRandom(
    HCRYPTPROV hProv,
    DWORD dwLen,
    BYTE *pbBuffer
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetUserKey(
    HCRYPTPROV hProv,
    DWORD dwKeySpec,
    HCRYPTKEY *phUserKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptExportKey(
    HCRYPTKEY hKey,
    HCRYPTKEY hExpKey,
    DWORD dwBlobType,
    DWORD dwFlags,
    BYTE *pbData,
    DWORD *pdwDataLen
    );

__declspec(dllimport)
BOOL
__stdcall
CryptImportKey(
    HCRYPTPROV hProv,
    const BYTE *pbData,
    DWORD dwDataLen,
    HCRYPTKEY hPubKey,
    DWORD dwFlags,
    HCRYPTKEY *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptEncrypt(
    HCRYPTKEY hKey,
    HCRYPTHASH hHash,
    BOOL Final,
    DWORD dwFlags,
    BYTE *pbData,
    DWORD *pdwDataLen,
    DWORD dwBufLen
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDecrypt(
    HCRYPTKEY hKey,
    HCRYPTHASH hHash,
    BOOL Final,
    DWORD dwFlags,
    BYTE *pbData,
    DWORD *pdwDataLen
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCreateHash(
    HCRYPTPROV hProv,
    ALG_ID Algid,
    HCRYPTKEY hKey,
    DWORD dwFlags,
    HCRYPTHASH *phHash
    );

__declspec(dllimport)
BOOL
__stdcall
CryptHashData(
    HCRYPTHASH hHash,
    const BYTE *pbData,
    DWORD dwDataLen,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptHashSessionKey(
    HCRYPTHASH hHash,
    HCRYPTKEY hKey,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDestroyHash(
    HCRYPTHASH hHash
    );

__declspec(dllimport)
BOOL
__stdcall
CryptSignHashA(
    HCRYPTHASH hHash,
    DWORD dwKeySpec,
    LPCSTR szDescription,
    DWORD dwFlags,
    BYTE *pbSignature,
    DWORD *pdwSigLen
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSignHashW(
    HCRYPTHASH hHash,
    DWORD dwKeySpec,
    LPCWSTR szDescription,
    DWORD dwFlags,
    BYTE *pbSignature,
    DWORD *pdwSigLen
    );




#line 1111 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CryptVerifySignatureA(
    HCRYPTHASH hHash,
    const BYTE *pbSignature,
    DWORD dwSigLen,
    HCRYPTKEY hPubKey,
    LPCSTR szDescription,
    DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptVerifySignatureW(
    HCRYPTHASH hHash,
    const BYTE *pbSignature,
    DWORD dwSigLen,
    HCRYPTKEY hPubKey,
    LPCWSTR szDescription,
    DWORD dwFlags
    );




#line 1139 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderA(
    LPCSTR pszProvName,
    DWORD dwProvType
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderW(
    LPCWSTR pszProvName,
    DWORD dwProvType
    );




#line 1159 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderExA(
    LPCSTR pszProvName,
    DWORD dwProvType,
    DWORD *pdwReserved,
    DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderExW(
    LPCWSTR pszProvName,
    DWORD dwProvType,
    DWORD *pdwReserved,
    DWORD dwFlags
    );




#line 1183 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CryptGetDefaultProviderA(
    DWORD dwProvType,
    DWORD *pdwReserved,
    DWORD dwFlags,
    LPSTR pszProvName,
    DWORD *pcbProvName
    );
__declspec(dllimport)
BOOL
__stdcall
CryptGetDefaultProviderW(
    DWORD dwProvType,
    DWORD *pdwReserved,
    DWORD dwFlags,
    LPWSTR pszProvName,
    DWORD *pcbProvName
    );




#line 1209 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CryptEnumProviderTypesA(
    DWORD dwIndex,
    DWORD *pdwReserved,
    DWORD dwFlags,
    DWORD *pdwProvType,
    LPSTR szTypeName,
    DWORD *pcbTypeName
    );
__declspec(dllimport)
BOOL
__stdcall
CryptEnumProviderTypesW(
    DWORD dwIndex,
    DWORD *pdwReserved,
    DWORD dwFlags,
    DWORD *pdwProvType,
    LPWSTR szTypeName,
    DWORD *pcbTypeName
    );




#line 1237 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CryptEnumProvidersA(
    DWORD dwIndex,
    DWORD *pdwReserved,
    DWORD dwFlags,
    DWORD *pdwProvType,
    LPSTR szProvName,
    DWORD *pcbProvName
    );
__declspec(dllimport)
BOOL
__stdcall
CryptEnumProvidersW(
    DWORD dwIndex,
    DWORD *pdwReserved,
    DWORD dwFlags,
    DWORD *pdwProvType,
    LPWSTR szProvName,
    DWORD *pcbProvName
    );




#line 1265 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CryptContextAddRef(
    HCRYPTPROV hProv,
    DWORD *pdwReserved,
    DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDuplicateKey(
    HCRYPTKEY hKey,
    DWORD *pdwReserved,
    DWORD dwFlags,
    HCRYPTKEY *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDuplicateHash(
    HCRYPTHASH hHash,
    DWORD *pdwReserved,
    DWORD dwFlags,
    HCRYPTHASH *phHash
    );







BOOL 
__cdecl 
GetEncSChannel(
    BYTE **pData, 
    DWORD *dwDecSize
    );





typedef struct _CRYPT_BIT_BLOB {
    DWORD   cbData;
    BYTE    *pbData;
    DWORD   cUnusedBits;
} CRYPT_BIT_BLOB, *PCRYPT_BIT_BLOB;







typedef struct _CRYPT_ALGORITHM_IDENTIFIER {
    LPSTR               pszObjId;
    CRYPT_OBJID_BLOB    Parameters;
} CRYPT_ALGORITHM_IDENTIFIER, *PCRYPT_ALGORITHM_IDENTIFIER;


















































































































































typedef struct _CRYPT_OBJID_TABLE {
    DWORD   dwAlgId;
    LPCSTR  pszObjId;
} CRYPT_OBJID_TABLE, *PCRYPT_OBJID_TABLE;





typedef struct _CRYPT_HASH_INFO {
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    CRYPT_HASH_BLOB             Hash;
} CRYPT_HASH_INFO, *PCRYPT_HASH_INFO;






typedef struct _CERT_EXTENSION {
    LPSTR               pszObjId;
    BOOL                fCritical;
    CRYPT_OBJID_BLOB    Value;
} CERT_EXTENSION, *PCERT_EXTENSION;






typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE {
    LPSTR               pszObjId;
    CRYPT_OBJID_BLOB    Value;
} CRYPT_ATTRIBUTE_TYPE_VALUE, *PCRYPT_ATTRIBUTE_TYPE_VALUE;






typedef struct _CRYPT_ATTRIBUTE {
    LPSTR               pszObjId;
    DWORD               cValue;
    PCRYPT_ATTR_BLOB    rgValue;
} CRYPT_ATTRIBUTE, *PCRYPT_ATTRIBUTE;

typedef struct _CRYPT_ATTRIBUTES {
     DWORD                cAttr;
     PCRYPT_ATTRIBUTE     rgAttr;
} CRYPT_ATTRIBUTES, *PCRYPT_ATTRIBUTES;







typedef struct _CERT_RDN_ATTR {
    LPSTR                   pszObjId;
    DWORD                   dwValueType;
    CERT_RDN_VALUE_BLOB     Value;
} CERT_RDN_ATTR, *PCERT_RDN_ATTR;




































































































































































typedef struct _CERT_RDN {
    DWORD           cRDNAttr;
    PCERT_RDN_ATTR  rgRDNAttr;
} CERT_RDN, *PCERT_RDN;





typedef struct _CERT_NAME_INFO {
    DWORD       cRDN;
    PCERT_RDN   rgRDN;
} CERT_NAME_INFO, *PCERT_NAME_INFO;







typedef struct _CERT_NAME_VALUE {
    DWORD               dwValueType;
    CERT_RDN_VALUE_BLOB Value;
} CERT_NAME_VALUE, *PCERT_NAME_VALUE;







typedef struct _CERT_PUBLIC_KEY_INFO {
    CRYPT_ALGORITHM_IDENTIFIER    Algorithm;
    CRYPT_BIT_BLOB                PublicKey;
} CERT_PUBLIC_KEY_INFO, *PCERT_PUBLIC_KEY_INFO;









typedef struct _CRYPT_PRIVATE_KEY_INFO{
    DWORD                       Version;
    CRYPT_ALGORITHM_IDENTIFIER  Algorithm;
    CRYPT_DER_BLOB              PrivateKey;
    PCRYPT_ATTRIBUTES           pAttributes;
}  CRYPT_PRIVATE_KEY_INFO, *PCRYPT_PRIVATE_KEY_INFO;





typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO{
    CRYPT_ALGORITHM_IDENTIFIER  EncryptionAlgorithm;
    CRYPT_DATA_BLOB             EncryptedPrivateKey;
} CRYPT_ENCRYPTED_PRIVATE_KEY_INFO, *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;

















typedef BOOL (__stdcall *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(
                                                        CRYPT_ALGORITHM_IDENTIFIER  Algorithm,
                                                        CRYPT_DATA_BLOB             EncryptedPrivateKey,
                                                        BYTE                        *pbClearTextKey,
                                                        DWORD                       *pcbClearTextKey,
                                                        LPVOID                      pVoidDecryptFunc);

















typedef BOOL (__stdcall *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(
                                                        CRYPT_ALGORITHM_IDENTIFIER* pAlgorithm,
                                                        CRYPT_DATA_BLOB*            pClearTextPrivateKey,
                                                        BYTE                        *pbEncryptedKey,
                                                        DWORD                       *pcbEncryptedKey,
                                                        LPVOID                      pVoidEncryptFunc);













typedef BOOL (__stdcall *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(
                                                       CRYPT_PRIVATE_KEY_INFO      *pPrivateKeyInfo,
                                                       HCRYPTPROV                  *phCryptProv,
                                                       LPVOID                      pVoidResolveFunc);










typedef struct _CRYPT_PKCS8_IMPORT_PARAMS{
    CRYPT_DIGEST_BLOB               PrivateKey;             
    PCRYPT_RESOLVE_HCRYPTPROV_FUNC  pResolvehCryptProvFunc; 
    LPVOID                          pVoidResolveFunc;       
    PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
    LPVOID                          pVoidDecryptFunc;
} CRYPT_PKCS8_IMPORT_PARAMS, *PCRYPT_PKCS8_IMPORT_PARAMS, CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS, *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;









typedef struct _CRYPT_PKCS8_EXPORT_PARAMS{
    HCRYPTPROV                      hCryptProv;
    DWORD                           dwKeySpec;
    LPSTR                           pszPrivateKeyObjId;

    PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
    LPVOID                          pVoidEncryptFunc;
} CRYPT_PKCS8_EXPORT_PARAMS, *PCRYPT_PKCS8_EXPORT_PARAMS;







typedef struct _CERT_INFO {
    DWORD                       dwVersion;
    CRYPT_INTEGER_BLOB          SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER  SignatureAlgorithm;
    CERT_NAME_BLOB              Issuer;
    FILETIME                    NotBefore;
    FILETIME                    NotAfter;
    CERT_NAME_BLOB              Subject;
    CERT_PUBLIC_KEY_INFO        SubjectPublicKeyInfo;
    CRYPT_BIT_BLOB              IssuerUniqueId;
    CRYPT_BIT_BLOB              SubjectUniqueId;
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;
} CERT_INFO, *PCERT_INFO;




























typedef struct _CRL_ENTRY {
    CRYPT_INTEGER_BLOB  SerialNumber;
    FILETIME            RevocationDate;
    DWORD               cExtension;
    PCERT_EXTENSION     rgExtension;
} CRL_ENTRY, *PCRL_ENTRY;







typedef struct _CRL_INFO {
    DWORD                       dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER  SignatureAlgorithm;
    CERT_NAME_BLOB              Issuer;
    FILETIME                    ThisUpdate;
    FILETIME                    NextUpdate;
    DWORD                       cCRLEntry;
    PCRL_ENTRY                  rgCRLEntry;
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;
} CRL_INFO, *PCRL_INFO;














typedef struct _CERT_REQUEST_INFO {
    DWORD                   dwVersion;
    CERT_NAME_BLOB          Subject;
    CERT_PUBLIC_KEY_INFO    SubjectPublicKeyInfo;
    DWORD                   cAttribute;
    PCRYPT_ATTRIBUTE        rgAttribute;
} CERT_REQUEST_INFO, *PCERT_REQUEST_INFO;









typedef struct _CERT_KEYGEN_REQUEST_INFO {
    DWORD                   dwVersion;
    CERT_PUBLIC_KEY_INFO    SubjectPublicKeyInfo;
    LPWSTR                  pwszChallengeString;        
} CERT_KEYGEN_REQUEST_INFO, *PCERT_KEYGEN_REQUEST_INFO;











typedef struct _CERT_SIGNED_CONTENT_INFO {
    CRYPT_DER_BLOB              ToBeSigned;
    CRYPT_ALGORITHM_IDENTIFIER  SignatureAlgorithm;
    CRYPT_BIT_BLOB              Signature;
} CERT_SIGNED_CONTENT_INFO, *PCERT_SIGNED_CONTENT_INFO;









typedef struct _CTL_USAGE {
    DWORD               cUsageIdentifier;
    LPSTR               *rgpszUsageIdentifier;      
} CTL_USAGE, *PCTL_USAGE,
CERT_ENHKEY_USAGE, *PCERT_ENHKEY_USAGE;





typedef struct _CTL_ENTRY {
    CRYPT_DATA_BLOB     SubjectIdentifier;          
    DWORD               cAttribute;
    PCRYPT_ATTRIBUTE    rgAttribute;                
} CTL_ENTRY, *PCTL_ENTRY;




typedef struct _CTL_INFO {
    DWORD                       dwVersion;
    CTL_USAGE                   SubjectUsage;
    CRYPT_DATA_BLOB             ListIdentifier;     
    CRYPT_INTEGER_BLOB          SequenceNumber;     
    FILETIME                    ThisUpdate;
    FILETIME                    NextUpdate;         
    CRYPT_ALGORITHM_IDENTIFIER  SubjectAlgorithm;
    DWORD                       cCTLEntry;
    PCTL_ENTRY                  rgCTLEntry;         
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;        
} CTL_INFO, *PCTL_INFO;














typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO {
    LPSTR                   pszTimeStampAlgorithm;   
    LPSTR                   pszContentType;          
    CRYPT_OBJID_BLOB        Content;
    DWORD                   cAttribute;
    PCRYPT_ATTRIBUTE        rgAttribute;
} CRYPT_TIME_STAMP_REQUEST_INFO, *PCRYPT_TIME_STAMP_REQUEST_INFO;




typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
    LPWSTR      pwszName;
    LPWSTR      pwszValue;
} CRYPT_ENROLLMENT_NAME_VALUE_PAIR, * PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;




typedef struct _CRYPT_CSP_PROVIDER {
    DWORD           dwKeySpec;
    LPWSTR          pwszProviderName;
    CRYPT_BIT_BLOB  Signature;
} CRYPT_CSP_PROVIDER, * PCRYPT_CSP_PROVIDER;












































__declspec(dllimport)
BOOL
__stdcall
CryptFormatObject(
     DWORD dwCertEncodingType,
     DWORD dwFormatType,
     DWORD dwFormatStrType,
     void  *pFormatStruct,
     LPCSTR lpszStructType,
     const BYTE *pbEncoded,
     DWORD cbEncoded,
     void *pbFormat,
      DWORD *pcbFormat
    );





































































typedef LPVOID (__stdcall *PFN_CRYPT_ALLOC)(
     size_t cbSize
    );

typedef void (__stdcall *PFN_CRYPT_FREE)(
     LPVOID pv
    );


typedef struct _CRYPT_ENCODE_PARA {
    DWORD                   cbSize;
    PFN_CRYPT_ALLOC         pfnAlloc;           
    PFN_CRYPT_FREE          pfnFree;            
} CRYPT_ENCODE_PARA, *PCRYPT_ENCODE_PARA;


__declspec(dllimport)
BOOL
__stdcall
CryptEncodeObjectEx(
     DWORD dwCertEncodingType,
     LPCSTR lpszStructType,
     const void *pvStructInfo,
     DWORD dwFlags,
      PCRYPT_ENCODE_PARA pEncodePara,
     void *pvEncoded,
      DWORD *pcbEncoded
    );

__declspec(dllimport)
BOOL
__stdcall
CryptEncodeObject(
     DWORD        dwCertEncodingType,
     LPCSTR       lpszStructType,
     const void   *pvStructInfo,
     BYTE        *pbEncoded,
      DWORD    *pcbEncoded
    );























































typedef struct _CRYPT_DECODE_PARA {
    DWORD                   cbSize;
    PFN_CRYPT_ALLOC         pfnAlloc;           
    PFN_CRYPT_FREE          pfnFree;            
} CRYPT_DECODE_PARA, *PCRYPT_DECODE_PARA;

__declspec(dllimport)
BOOL
__stdcall
CryptDecodeObjectEx(
     DWORD dwCertEncodingType,
     LPCSTR lpszStructType,
     const BYTE *pbEncoded,
     DWORD cbEncoded,
     DWORD dwFlags,
      PCRYPT_DECODE_PARA pDecodePara,
      void *pvStructInfo,
      DWORD *pcbStructInfo
    );


__declspec(dllimport)
BOOL
__stdcall
CryptDecodeObject(
     DWORD        dwCertEncodingType,
     LPCSTR       lpszStructType,
     const BYTE   *pbEncoded,
     DWORD        cbEncoded,
     DWORD        dwFlags,
     void        *pvStructInfo,
      DWORD    *pcbStructInfo
    );























































































































































































































































































#line 2593 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"




#line 2598 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"




#line 2603 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"




















#line 2624 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"





















































































































#line 2742 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"



#line 2746 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"









































#line 2788 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"





#line 2794 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"




#line 2799 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"



#line 2803 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"



#line 2807 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"


































































typedef struct _CERT_EXTENSIONS {
    DWORD           cExtension;
    PCERT_EXTENSION rgExtension;
} CERT_EXTENSIONS, *PCERT_EXTENSIONS;


































































































































































typedef struct _CERT_AUTHORITY_KEY_ID_INFO {
    CRYPT_DATA_BLOB     KeyId;
    CERT_NAME_BLOB      CertIssuer;
    CRYPT_INTEGER_BLOB  CertSerialNumber;
} CERT_AUTHORITY_KEY_ID_INFO, *PCERT_AUTHORITY_KEY_ID_INFO;







typedef struct _CERT_PRIVATE_KEY_VALIDITY {
    FILETIME            NotBefore;
    FILETIME            NotAfter;
} CERT_PRIVATE_KEY_VALIDITY, *PCERT_PRIVATE_KEY_VALIDITY;

typedef struct _CERT_KEY_ATTRIBUTES_INFO {
    CRYPT_DATA_BLOB             KeyId;
    CRYPT_BIT_BLOB              IntendedKeyUsage;
    PCERT_PRIVATE_KEY_VALIDITY  pPrivateKeyUsagePeriod;     
} CERT_KEY_ATTRIBUTES_INFO, *PCERT_KEY_ATTRIBUTES_INFO;




















typedef struct _CERT_POLICY_ID {
    DWORD                   cCertPolicyElementId;
    LPSTR                   *rgpszCertPolicyElementId;  
} CERT_POLICY_ID, *PCERT_POLICY_ID;

typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO {
    DWORD                   cCertPolicyId;
    PCERT_POLICY_ID         rgCertPolicyId;
    CRYPT_BIT_BLOB          RestrictedKeyUsage;
} CERT_KEY_USAGE_RESTRICTION_INFO, *PCERT_KEY_USAGE_RESTRICTION_INFO;













typedef struct _CERT_OTHER_NAME {
    LPSTR               pszObjId;
    CRYPT_OBJID_BLOB    Value;
} CERT_OTHER_NAME, *PCERT_OTHER_NAME;

typedef struct _CERT_ALT_NAME_ENTRY {
    DWORD   dwAltNameChoice;
    union {
        PCERT_OTHER_NAME            pOtherName;         
        LPWSTR                      pwszRfc822Name;     
        LPWSTR                      pwszDNSName;        
        
        CERT_NAME_BLOB              DirectoryName;      
        
        LPWSTR                      pwszURL;            
        CRYPT_DATA_BLOB             IPAddress;          
        LPSTR                       pszRegisteredID;    
    };
} CERT_ALT_NAME_ENTRY, *PCERT_ALT_NAME_ENTRY;












typedef struct _CERT_ALT_NAME_INFO {
    DWORD                   cAltEntry;
    PCERT_ALT_NAME_ENTRY    rgAltEntry;
} CERT_ALT_NAME_INFO, *PCERT_ALT_NAME_INFO;






























typedef struct _CERT_BASIC_CONSTRAINTS_INFO {
    CRYPT_BIT_BLOB          SubjectType;
    BOOL                    fPathLenConstraint;
    DWORD                   dwPathLenConstraint;
    DWORD                   cSubtreesConstraint;
    CERT_NAME_BLOB          *rgSubtreesConstraint;
} CERT_BASIC_CONSTRAINTS_INFO, *PCERT_BASIC_CONSTRAINTS_INFO;










typedef struct _CERT_BASIC_CONSTRAINTS2_INFO {
    BOOL                    fCA;
    BOOL                    fPathLenConstraint;
    DWORD                   dwPathLenConstraint;
} CERT_BASIC_CONSTRAINTS2_INFO, *PCERT_BASIC_CONSTRAINTS2_INFO;



















typedef struct _CERT_POLICY_QUALIFIER_INFO {
    LPSTR                       pszPolicyQualifierId;   
    CRYPT_OBJID_BLOB            Qualifier;              
} CERT_POLICY_QUALIFIER_INFO, *PCERT_POLICY_QUALIFIER_INFO;

typedef struct _CERT_POLICY_INFO {
    LPSTR                       pszPolicyIdentifier;    
    DWORD                       cPolicyQualifier;       
    CERT_POLICY_QUALIFIER_INFO  *rgPolicyQualifier;
} CERT_POLICY_INFO, *PCERT_POLICY_INFO;

typedef struct _CERT_POLICIES_INFO {
    DWORD                       cPolicyInfo;
    CERT_POLICY_INFO            *rgPolicyInfo;
} CERT_POLICIES_INFO, *PCERT_POLICIES_INFO;








typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {
    LPSTR   pszOrganization;
    DWORD   cNoticeNumbers;
    int     *rgNoticeNumbers;
} CERT_POLICY_QUALIFIER_NOTICE_REFERENCE, *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;

typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE {
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE  *pNoticeReference;  
    LPWSTR                                  pszDisplayText;     
} CERT_POLICY_QUALIFIER_USER_NOTICE, *PCERT_POLICY_QUALIFIER_USER_NOTICE;







typedef struct _CPS_URLS {
    LPWSTR                      pszURL;
    CRYPT_ALGORITHM_IDENTIFIER  *pAlgorithm; 
    CRYPT_DATA_BLOB             *pDigest;    
} CPS_URLS, *PCPS_URLS;

typedef struct _CERT_POLICY95_QUALIFIER1 {
    LPWSTR      pszPracticesReference;      
    LPSTR       pszNoticeIdentifier;        
    LPSTR       pszNSINoticeIdentifier;     
    DWORD       cCPSURLs;
    CPS_URLS    *rgCPSURLs;                 
} CERT_POLICY95_QUALIFIER1, *PCERT_POLICY95_QUALIFIER1;









typedef struct _CERT_POLICY_MAPPING {
    LPSTR                       pszIssuerDomainPolicy;      
    LPSTR                       pszSubjectDomainPolicy;     
} CERT_POLICY_MAPPING, *PCERT_POLICY_MAPPING;

typedef struct _CERT_POLICY_MAPPINGS_INFO {
    DWORD                       cPolicyMapping;
    PCERT_POLICY_MAPPING        rgPolicyMapping;
} CERT_POLICY_MAPPINGS_INFO, *PCERT_POLICY_MAPPINGS_INFO;







typedef struct _CERT_POLICY_CONSTRAINTS_INFO {
    BOOL                        fRequireExplicitPolicy;
    DWORD                       dwRequireExplicitPolicySkipCerts;

    BOOL                        fInhibitPolicyMapping;
    DWORD                       dwInhibitPolicyMappingSkipCerts;
} CERT_POLICY_CONSTRAINTS_INFO, *PCERT_POLICY_CONSTRAINTS_INFO;

























































typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {
    LPSTR               pszObjId;
    DWORD               cValue;
    PCRYPT_DER_BLOB     rgValue;
} CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY, *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;









typedef struct _CRYPT_CONTENT_INFO {
    LPSTR               pszObjId;
    CRYPT_DER_BLOB      Content;
} CRYPT_CONTENT_INFO, *PCRYPT_CONTENT_INFO;






















































typedef struct _CRYPT_SEQUENCE_OF_ANY {
    DWORD               cValue;
    PCRYPT_DER_BLOB     rgValue;
} CRYPT_SEQUENCE_OF_ANY, *PCRYPT_SEQUENCE_OF_ANY;













typedef struct _CERT_AUTHORITY_KEY_ID2_INFO {
    CRYPT_DATA_BLOB     KeyId;
    CERT_ALT_NAME_INFO  AuthorityCertIssuer;    
                                                
    CRYPT_INTEGER_BLOB  AuthorityCertSerialNumber;
} CERT_AUTHORITY_KEY_ID2_INFO, *PCERT_AUTHORITY_KEY_ID2_INFO;
























typedef struct _CERT_ACCESS_DESCRIPTION {
    LPSTR               pszAccessMethod;        
    CERT_ALT_NAME_ENTRY AccessLocation;
} CERT_ACCESS_DESCRIPTION, *PCERT_ACCESS_DESCRIPTION;


typedef struct _CERT_AUTHORITY_INFO_ACCESS {
    DWORD                       cAccDescr;
    PCERT_ACCESS_DESCRIPTION    rgAccDescr;
} CERT_AUTHORITY_INFO_ACCESS, *PCERT_AUTHORITY_INFO_ACCESS;













































typedef struct _CRL_DIST_POINT_NAME {
    DWORD   dwDistPointNameChoice;
    union {
        CERT_ALT_NAME_INFO      FullName;       
        
    };
} CRL_DIST_POINT_NAME, *PCRL_DIST_POINT_NAME;





typedef struct _CRL_DIST_POINT {
    CRL_DIST_POINT_NAME     DistPointName;      
    CRYPT_BIT_BLOB          ReasonFlags;        
    CERT_ALT_NAME_INFO      CRLIssuer;          
} CRL_DIST_POINT, *PCRL_DIST_POINT;









typedef struct _CRL_DIST_POINTS_INFO {
    DWORD                   cDistPoint;
    PCRL_DIST_POINT         rgDistPoint;
} CRL_DIST_POINTS_INFO, *PCRL_DIST_POINTS_INFO;



























typedef struct _CROSS_CERT_DIST_POINTS_INFO {
    
    DWORD                   dwSyncDeltaTime;

    DWORD                   cDistPoint;
    PCERT_ALT_NAME_INFO     rgDistPoint;
} CROSS_CERT_DIST_POINTS_INFO, *PCROSS_CERT_DIST_POINTS_INFO;





















typedef struct _CERT_PAIR {
   CERT_BLOB    Forward;        
   CERT_BLOB    Reverse;        
} CERT_PAIR, *PCERT_PAIR;





























typedef struct _CRL_ISSUING_DIST_POINT {
    CRL_DIST_POINT_NAME     DistPointName;              
    BOOL                    fOnlyContainsUserCerts;
    BOOL                    fOnlyContainsCACerts;
    CRYPT_BIT_BLOB          OnlySomeReasonFlags;        
    BOOL                    fIndirectCRL;
} CRL_ISSUING_DIST_POINT, *PCRL_ISSUING_DIST_POINT;
























typedef struct _CERT_GENERAL_SUBTREE {
    CERT_ALT_NAME_ENTRY     Base;
    DWORD                   dwMinimum;
    BOOL                    fMaximum;
    DWORD                   dwMaximum;
} CERT_GENERAL_SUBTREE, *PCERT_GENERAL_SUBTREE;

typedef struct _CERT_NAME_CONSTRAINTS_INFO {
    DWORD                   cPermittedSubtree;
    PCERT_GENERAL_SUBTREE   rgPermittedSubtree;
    DWORD                   cExcludedSubtree;
    PCERT_GENERAL_SUBTREE   rgExcludedSubtree;
} CERT_NAME_CONSTRAINTS_INFO, *PCERT_NAME_CONSTRAINTS_INFO;
























































































typedef struct _CERT_DSS_PARAMETERS {
    CRYPT_UINT_BLOB     p;
    CRYPT_UINT_BLOB     q;
    CRYPT_UINT_BLOB     g;
} CERT_DSS_PARAMETERS, *PCERT_DSS_PARAMETERS;


























typedef struct _CERT_DH_PARAMETERS {
    CRYPT_UINT_BLOB     p;
    CRYPT_UINT_BLOB     g;
} CERT_DH_PARAMETERS, *PCERT_DH_PARAMETERS;








typedef struct _CERT_X942_DH_VALIDATION_PARAMS {
    CRYPT_BIT_BLOB      seed;
    DWORD               pgenCounter;
} CERT_X942_DH_VALIDATION_PARAMS, *PCERT_X942_DH_VALIDATION_PARAMS;

typedef struct _CERT_X942_DH_PARAMETERS {
    CRYPT_UINT_BLOB     p;          
    CRYPT_UINT_BLOB     g;          
    CRYPT_UINT_BLOB     q;          
    CRYPT_UINT_BLOB     j;          
    PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;  
} CERT_X942_DH_PARAMETERS, *PCERT_X942_DH_PARAMETERS;











typedef struct _CRYPT_X942_OTHER_INFO {
    LPSTR               pszContentEncryptionObjId;
    BYTE                rgbCounter[4];
    BYTE                rgbKeyLength[4];
    CRYPT_DATA_BLOB     PubInfo;    
} CRYPT_X942_OTHER_INFO, *PCRYPT_X942_OTHER_INFO;








typedef struct _CRYPT_RC2_CBC_PARAMETERS {
    DWORD               dwVersion;
    BOOL                fIV;            
    BYTE                rgbIV[8];
} CRYPT_RC2_CBC_PARAMETERS, *PCRYPT_RC2_CBC_PARAMETERS;


















typedef struct _CRYPT_SMIME_CAPABILITY {
    LPSTR               pszObjId;
    CRYPT_OBJID_BLOB    Parameters;
} CRYPT_SMIME_CAPABILITY, *PCRYPT_SMIME_CAPABILITY;

typedef struct _CRYPT_SMIME_CAPABILITIES {
    DWORD                   cCapability;
    PCRYPT_SMIME_CAPABILITY rgCapability;
} CRYPT_SMIME_CAPABILITIES, *PCRYPT_SMIME_CAPABILITIES;













































































































































































































































































typedef struct _CMC_TAGGED_ATTRIBUTE {
    DWORD               dwBodyPartID;
    CRYPT_ATTRIBUTE     Attribute;
} CMC_TAGGED_ATTRIBUTE, *PCMC_TAGGED_ATTRIBUTE;

typedef struct _CMC_TAGGED_CERT_REQUEST {
    DWORD               dwBodyPartID;
    CRYPT_DER_BLOB      SignedCertRequest;
} CMC_TAGGED_CERT_REQUEST, *PCMC_TAGGED_CERT_REQUEST;

typedef struct _CMC_TAGGED_REQUEST {
    DWORD               dwTaggedRequestChoice;
    union {
        
        PCMC_TAGGED_CERT_REQUEST   pTaggedCertRequest;
    };
} CMC_TAGGED_REQUEST, *PCMC_TAGGED_REQUEST;



typedef struct _CMC_TAGGED_CONTENT_INFO {
    DWORD               dwBodyPartID;
    CRYPT_DER_BLOB      EncodedContentInfo;
} CMC_TAGGED_CONTENT_INFO, *PCMC_TAGGED_CONTENT_INFO;

typedef struct _CMC_TAGGED_OTHER_MSG {
    DWORD               dwBodyPartID;
    LPSTR               pszObjId;
    CRYPT_OBJID_BLOB    Value;
} CMC_TAGGED_OTHER_MSG, *PCMC_TAGGED_OTHER_MSG;



typedef struct _CMC_DATA_INFO {
    DWORD                       cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE       rgTaggedAttribute;
    DWORD                       cTaggedRequest;
    PCMC_TAGGED_REQUEST         rgTaggedRequest;
    DWORD                       cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO    rgTaggedContentInfo;
    DWORD                       cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG       rgTaggedOtherMsg;
} CMC_DATA_INFO, *PCMC_DATA_INFO;



typedef struct _CMC_RESPONSE_INFO {
    DWORD                       cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE       rgTaggedAttribute;
    DWORD                       cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO    rgTaggedContentInfo;
    DWORD                       cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG       rgTaggedOtherMsg;
} CMC_RESPONSE_INFO, *PCMC_RESPONSE_INFO;









typedef struct _CMC_PEND_INFO {
    CRYPT_DATA_BLOB             PendToken;
    FILETIME                    PendTime;
} CMC_PEND_INFO, *PCMC_PEND_INFO;

typedef struct _CMC_STATUS_INFO {
    DWORD                       dwStatus;
    DWORD                       cBodyList;
    DWORD                       *rgdwBodyList;
    LPWSTR                      pwszStatusString;   
    DWORD                       dwOtherInfoChoice;
    union  {
        
        
        
        DWORD                       dwFailInfo;
        
        PCMC_PEND_INFO              pPendInfo;
    };
} CMC_STATUS_INFO, *PCMC_STATUS_INFO;













































































typedef struct _CMC_ADD_EXTENSIONS_INFO {
    DWORD                       dwCmcDataReference;
    DWORD                       cCertReference;
    DWORD                       *rgdwCertReference;
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;
} CMC_ADD_EXTENSIONS_INFO, *PCMC_ADD_EXTENSIONS_INFO;










typedef struct _CMC_ADD_ATTRIBUTES_INFO {
    DWORD                       dwCmcDataReference;
    DWORD                       cCertReference;
    DWORD                       *rgdwCertReference;
    DWORD                       cAttribute;
    PCRYPT_ATTRIBUTE            rgAttribute;
} CMC_ADD_ATTRIBUTES_INFO, *PCMC_ADD_ATTRIBUTES_INFO;









typedef struct _CERT_TEMPLATE_EXT {
    LPSTR               pszObjId;
    DWORD               dwMajorVersion;
    BOOL                fMinorVersion;      
    DWORD               dwMinorVersion;
} CERT_TEMPLATE_EXT, *PCERT_TEMPLATE_EXT;






typedef void *HCRYPTOIDFUNCSET;
typedef void *HCRYPTOIDFUNCADDR;











































































typedef struct _CRYPT_OID_FUNC_ENTRY {
    LPCSTR  pszOID;
    void    *pvFuncAddr;
} CRYPT_OID_FUNC_ENTRY, *PCRYPT_OID_FUNC_ENTRY;




















__declspec(dllimport)
BOOL
__stdcall
CryptInstallOIDFunctionAddress(
     HMODULE hModule,         
     DWORD dwEncodingType,
     LPCSTR pszFuncName,
     DWORD cFuncEntry,
     const CRYPT_OID_FUNC_ENTRY rgFuncEntry[],
     DWORD dwFlags
    );







__declspec(dllimport)
HCRYPTOIDFUNCSET
__stdcall
CryptInitOIDFunctionSet(
     LPCSTR pszFuncName,
     DWORD dwFlags
    );



















__declspec(dllimport)
BOOL
__stdcall
CryptGetOIDFunctionAddress(
     HCRYPTOIDFUNCSET hFuncSet,
     DWORD dwEncodingType,
     LPCSTR pszOID,
     DWORD dwFlags,
     void **ppvFuncAddr,
     HCRYPTOIDFUNCADDR *phFuncAddr
    );












__declspec(dllimport)
BOOL
__stdcall
CryptGetDefaultOIDDllList(
     HCRYPTOIDFUNCSET hFuncSet,
     DWORD dwEncodingType,
     LPWSTR pwszDllList,
      DWORD *pcchDllList
    );
























__declspec(dllimport)
BOOL
__stdcall
CryptGetDefaultOIDFunctionAddress(
     HCRYPTOIDFUNCSET hFuncSet,
     DWORD dwEncodingType,
      LPCWSTR pwszDll,
     DWORD dwFlags,
     void **ppvFuncAddr,
      HCRYPTOIDFUNCADDR *phFuncAddr
    );













__declspec(dllimport)
BOOL
__stdcall
CryptFreeOIDFunctionAddress(
     HCRYPTOIDFUNCADDR hFuncAddr,
     DWORD dwFlags
    );















__declspec(dllimport)
BOOL
__stdcall
CryptRegisterOIDFunction(
     DWORD dwEncodingType,
     LPCSTR pszFuncName,
     LPCSTR pszOID,
      LPCWSTR pwszDll,
      LPCSTR pszOverrideFuncName
    );





__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterOIDFunction(
     DWORD dwEncodingType,
     LPCSTR pszFuncName,
     LPCSTR pszOID
    );
















__declspec(dllimport)
BOOL
__stdcall
CryptRegisterDefaultOIDFunction(
     DWORD dwEncodingType,
     LPCSTR pszFuncName,
     DWORD dwIndex,
     LPCWSTR pwszDll
    );








__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterDefaultOIDFunction(
     DWORD dwEncodingType,
     LPCSTR pszFuncName,
     LPCWSTR pwszDll
    );









__declspec(dllimport)
BOOL
__stdcall
CryptSetOIDFunctionValue(
     DWORD dwEncodingType,
     LPCSTR pszFuncName,
     LPCSTR pszOID,
     LPCWSTR pwszValueName,
     DWORD dwValueType,
     const BYTE *pbValueData,
     DWORD cbValueData
    );









__declspec(dllimport)
BOOL
__stdcall
CryptGetOIDFunctionValue(
     DWORD dwEncodingType,
     LPCSTR pszFuncName,
     LPCSTR pszOID,
     LPCWSTR pwszValueName,
     DWORD *pdwValueType,
     BYTE *pbValueData,
      DWORD *pcbValueData
    );

typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_FUNC)(
     DWORD dwEncodingType,
     LPCSTR pszFuncName,
     LPCSTR pszOID,
     DWORD cValue,
     const DWORD rgdwValueType[],
     LPCWSTR const rgpwszValueName[],
     const BYTE * const rgpbValueData[],
     const DWORD rgcbValueData[],
     void *pvArg
    );














__declspec(dllimport)
BOOL
__stdcall
CryptEnumOIDFunction(
     DWORD dwEncodingType,
      LPCSTR pszFuncName,
      LPCSTR pszOID,
     DWORD dwFlags,
     void *pvArg,
     PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc
    );











typedef struct _CRYPT_OID_INFO {
    DWORD           cbSize;
    LPCSTR          pszOID;
    LPCWSTR         pwszName;
    DWORD           dwGroupId;
    union {
        DWORD       dwValue;
        ALG_ID      Algid;
        DWORD       dwLength;
    };
    CRYPT_DATA_BLOB ExtraInfo;
} CRYPT_OID_INFO, *PCRYPT_OID_INFO;
typedef const CRYPT_OID_INFO CCRYPT_OID_INFO, *PCCRYPT_OID_INFO;




































































__declspec(dllimport)
PCCRYPT_OID_INFO
__stdcall
CryptFindOIDInfo(
     DWORD dwKeyType,
     void *pvKey,
     DWORD dwGroupId
    );

















__declspec(dllimport)
BOOL
__stdcall
CryptRegisterOIDInfo(
     PCCRYPT_OID_INFO pInfo,
     DWORD dwFlags
    );







__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterOIDInfo(
     PCCRYPT_OID_INFO pInfo
    );


typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_INFO)(
     PCCRYPT_OID_INFO pInfo,
     void *pvArg
    );











__declspec(dllimport)
BOOL
__stdcall
CryptEnumOIDInfo(
     DWORD dwGroupId,
     DWORD dwFlags,
     void *pvArg,
     PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo
    );
























__declspec(dllimport)
LPCWSTR
__stdcall
CryptFindLocalizedName(
     LPCWSTR pwszCryptName
    );








typedef void *HCRYPTMSG;




































typedef struct _CERT_ISSUER_SERIAL_NUMBER {
    CERT_NAME_BLOB      Issuer;
    CRYPT_INTEGER_BLOB  SerialNumber;
} CERT_ISSUER_SERIAL_NUMBER, *PCERT_ISSUER_SERIAL_NUMBER;




typedef struct _CERT_ID {
    DWORD   dwIdChoice;
    union {
        
        CERT_ISSUER_SERIAL_NUMBER   IssuerSerialNumber;
        
        CRYPT_HASH_BLOB             KeyId;
        
        CRYPT_HASH_BLOB             HashId;
    };
} CERT_ID, *PCERT_ID;




















































typedef struct _CMSG_SIGNER_ENCODE_INFO {
    DWORD                       cbSize;
    PCERT_INFO                  pCertInfo;
    HCRYPTPROV                  hCryptProv;
    DWORD                       dwKeySpec;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    void                        *pvHashAuxInfo;
    DWORD                       cAuthAttr;
    PCRYPT_ATTRIBUTE            rgAuthAttr;
    DWORD                       cUnauthAttr;
    PCRYPT_ATTRIBUTE            rgUnauthAttr;






} CMSG_SIGNER_ENCODE_INFO, *PCMSG_SIGNER_ENCODE_INFO;

typedef struct _CMSG_SIGNED_ENCODE_INFO {
    DWORD                       cbSize;
    DWORD                       cSigners;
    PCMSG_SIGNER_ENCODE_INFO    rgSigners;
    DWORD                       cCertEncoded;
    PCERT_BLOB                  rgCertEncoded;
    DWORD                       cCrlEncoded;
    PCRL_BLOB                   rgCrlEncoded;





} CMSG_SIGNED_ENCODE_INFO, *PCMSG_SIGNED_ENCODE_INFO;





































typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCODE_INFO;

typedef struct _CMSG_ENVELOPED_ENCODE_INFO {
    DWORD                       cbSize;
    HCRYPTPROV                  hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
    void                        *pvEncryptionAuxInfo;
    DWORD                       cRecipients;

    
    
    
    PCERT_INFO                  *rgpRecipients;














} CMSG_ENVELOPED_ENCODE_INFO, *PCMSG_ENVELOPED_ENCODE_INFO;


















typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {
    DWORD                       cbSize;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    void                        *pvKeyEncryptionAuxInfo;
    HCRYPTPROV                  hCryptProv;
    CRYPT_BIT_BLOB              RecipientPublicKey;
    CERT_ID                     RecipientId;
} CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;






































typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {
    DWORD                       cbSize;
    CRYPT_BIT_BLOB              RecipientPublicKey;
    CERT_ID                     RecipientId;

    
    
    FILETIME                    Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;

typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {
    DWORD                       cbSize;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    void                        *pvKeyEncryptionAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER  KeyWrapAlgorithm;
    void                        *pvKeyWrapAuxInfo;

    
    
    
    
    
    HCRYPTPROV                  hCryptProv;
    DWORD                       dwKeySpec;

    DWORD                       dwKeyChoice;
    union {
        
        
        
        PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;

        
        
        
        PCERT_ID                    pSenderId;
    };
    CRYPT_DATA_BLOB             UserKeyingMaterial;     

    DWORD                                       cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO   *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;





















typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {
    DWORD                       cbSize;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    void                        *pvKeyEncryptionAuxInfo;
    HCRYPTPROV                  hCryptProv;
    DWORD                       dwKeyChoice;
    union {
        
        HCRYPTKEY                   hKeyEncryptionKey;
        
        void                        *pvKeyEncryptionKey;
    };
    CRYPT_DATA_BLOB             KeyId;

    
    FILETIME                    Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO, *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;








struct _CMSG_RECIPIENT_ENCODE_INFO {
    DWORD   dwRecipientChoice;
    union {
        
        PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO   pKeyTrans;
        
        PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO   pKeyAgree;
        
        PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO   pMailList;
    };
};





















typedef struct _CMSG_RC2_AUX_INFO {
    DWORD                       cbSize;
    DWORD                       dwBitLen;
} CMSG_RC2_AUX_INFO, *PCMSG_RC2_AUX_INFO;












typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO {
    DWORD                       cbSize;
    DWORD                       dwFlags;
} CMSG_SP3_COMPATIBLE_AUX_INFO, *PCMSG_SP3_COMPATIBLE_AUX_INFO;
















typedef struct _CMSG_RC4_AUX_INFO {
    DWORD                       cbSize;
    DWORD                       dwBitLen;
} CMSG_RC4_AUX_INFO, *PCMSG_RC4_AUX_INFO;










typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {
    DWORD                       cbSize;
    CMSG_SIGNED_ENCODE_INFO     SignedInfo;
    CMSG_ENVELOPED_ENCODE_INFO  EnvelopedInfo;
} CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO, *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;














typedef struct _CMSG_HASHED_ENCODE_INFO {
    DWORD                       cbSize;
    HCRYPTPROV                  hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    void                        *pvHashAuxInfo;
} CMSG_HASHED_ENCODE_INFO, *PCMSG_HASHED_ENCODE_INFO;











typedef struct _CMSG_ENCRYPTED_ENCODE_INFO {
    DWORD                       cbSize;
    CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
    void                        *pvEncryptionAuxInfo;
} CMSG_ENCRYPTED_ENCODE_INFO, *PCMSG_ENCRYPTED_ENCODE_INFO;
















typedef BOOL (__stdcall *PFN_CMSG_STREAM_OUTPUT)(
     const void *pvArg,
     BYTE *pbData,
     DWORD cbData,
     BOOL fFinal
    );



typedef struct _CMSG_STREAM_INFO {
    DWORD                   cbContent;
    PFN_CMSG_STREAM_OUTPUT  pfnStreamOutput;
    void                    *pvArg;
} CMSG_STREAM_INFO, *PCMSG_STREAM_INFO;
































__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgOpenToEncode(
     DWORD dwMsgEncodingType,
     DWORD dwFlags,
     DWORD dwMsgType,
     void const *pvMsgEncodeInfo,
      LPSTR pszInnerContentObjID,
      PCMSG_STREAM_INFO pStreamInfo
    );









__declspec(dllimport)
DWORD
__stdcall
CryptMsgCalculateEncodedLength(
     DWORD dwMsgEncodingType,
     DWORD dwFlags,
     DWORD dwMsgType,
     void const *pvMsgEncodeInfo,
      LPSTR pszInnerContentObjID,
     DWORD cbData
    );













__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgOpenToDecode(
     DWORD dwMsgEncodingType,
     DWORD dwFlags,
     DWORD dwMsgType,
     HCRYPTPROV hCryptProv,
      PCERT_INFO pRecipientInfo,
      PCMSG_STREAM_INFO pStreamInfo
    );




__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgDuplicate(
     HCRYPTMSG hCryptMsg
    );






__declspec(dllimport)
BOOL
__stdcall
CryptMsgClose(
     HCRYPTMSG hCryptMsg
    );










__declspec(dllimport)
BOOL
__stdcall
CryptMsgUpdate(
     HCRYPTMSG hCryptMsg,
     const BYTE *pbData,
     DWORD cbData,
     BOOL fFinal
    );

























__declspec(dllimport)
BOOL
__stdcall
CryptMsgGetParam(
     HCRYPTMSG hCryptMsg,
     DWORD dwParamType,
     DWORD dwIndex,
     void *pvData,
      DWORD *pcbData
    );





























































































































typedef struct _CMSG_SIGNER_INFO {
    DWORD                       dwVersion;
    CERT_NAME_BLOB              Issuer;
    CRYPT_INTEGER_BLOB          SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    CRYPT_ALGORITHM_IDENTIFIER  HashEncryptionAlgorithm;
    CRYPT_DATA_BLOB             EncryptedHash;
    CRYPT_ATTRIBUTES            AuthAttrs;
    CRYPT_ATTRIBUTES            UnauthAttrs;
} CMSG_SIGNER_INFO, *PCMSG_SIGNER_INFO;






















typedef struct _CMSG_CMS_SIGNER_INFO {
    DWORD                       dwVersion;
    CERT_ID                     SignerId;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    CRYPT_ALGORITHM_IDENTIFIER  HashEncryptionAlgorithm;
    CRYPT_DATA_BLOB             EncryptedHash;
    CRYPT_ATTRIBUTES            AuthAttrs;
    CRYPT_ATTRIBUTES            UnauthAttrs;
} CMSG_CMS_SIGNER_INFO, *PCMSG_CMS_SIGNER_INFO;





















typedef CRYPT_ATTRIBUTES CMSG_ATTR;
typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;















































































































































































































































typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO {
    DWORD                       dwVersion;

    
    CERT_ID                     RecipientId;

    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB             EncryptedKey;
} CMSG_KEY_TRANS_RECIPIENT_INFO, *PCMSG_KEY_TRANS_RECIPIENT_INFO;

typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {
    
    CERT_ID                     RecipientId;

    CRYPT_DATA_BLOB             EncryptedKey;

    
    FILETIME                    Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_INFO, *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;

typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO {
    DWORD                       dwVersion;
    DWORD                       dwOriginatorChoice;
    union {
        
        CERT_ID                     OriginatorCertId;
        
        CERT_PUBLIC_KEY_INFO        OriginatorPublicKeyInfo;
    };
    CRYPT_DATA_BLOB             UserKeyingMaterial;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;

    DWORD                                cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO   *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_INFO, *PCMSG_KEY_AGREE_RECIPIENT_INFO;





typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO {
    DWORD                       dwVersion;
    CRYPT_DATA_BLOB             KeyId;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB             EncryptedKey;

    
    FILETIME                    Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_INFO, *PCMSG_MAIL_LIST_RECIPIENT_INFO;

typedef struct _CMSG_CMS_RECIPIENT_INFO {
    DWORD   dwRecipientChoice;
    union {
        
        PCMSG_KEY_TRANS_RECIPIENT_INFO   pKeyTrans;
        
        PCMSG_KEY_AGREE_RECIPIENT_INFO   pKeyAgree;
        
        PCMSG_MAIL_LIST_RECIPIENT_INFO   pMailList;
    };
} CMSG_CMS_RECIPIENT_INFO, *PCMSG_CMS_RECIPIENT_INFO;
































__declspec(dllimport)
BOOL
__stdcall
CryptMsgControl(
     HCRYPTMSG hCryptMsg,
     DWORD dwFlags,
     DWORD dwCtrlType,
     void const *pvCtrlPara
    );





































































typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {
    DWORD               cbSize;
    HCRYPTPROV          hCryptProv;
    DWORD               dwSignerIndex;
    DWORD               dwSignerType;
    void                *pvSigner;
} CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA, *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;



    

    

    

    
























typedef struct _CMSG_CTRL_DECRYPT_PARA {
    DWORD       cbSize;
    HCRYPTPROV  hCryptProv;
    DWORD       dwKeySpec;
    DWORD       dwRecipientIndex;
} CMSG_CTRL_DECRYPT_PARA, *PCMSG_CTRL_DECRYPT_PARA;























typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {
    DWORD                           cbSize;
    HCRYPTPROV                      hCryptProv;
    DWORD                           dwKeySpec;
    PCMSG_KEY_TRANS_RECIPIENT_INFO  pKeyTrans;
    DWORD                           dwRecipientIndex;
} CMSG_CTRL_KEY_TRANS_DECRYPT_PARA, *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;



























typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {
    DWORD                           cbSize;
    HCRYPTPROV                      hCryptProv;
    DWORD                           dwKeySpec;
    PCMSG_KEY_AGREE_RECIPIENT_INFO  pKeyAgree;
    DWORD                           dwRecipientIndex;
    DWORD                           dwRecipientEncryptedKeyIndex;
    CRYPT_BIT_BLOB                  OriginatorPublicKey;
} CMSG_CTRL_KEY_AGREE_DECRYPT_PARA, *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;

























typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {
    DWORD                           cbSize;
    HCRYPTPROV                      hCryptProv;
    PCMSG_MAIL_LIST_RECIPIENT_INFO  pMailList;
    DWORD                           dwRecipientIndex;
    DWORD                           dwKeyChoice;
    union {
        
        HCRYPTKEY                       hKeyEncryptionKey;
        
        void                            *pvKeyEncryptionKey;
    };
} CMSG_CTRL_MAIL_LIST_DECRYPT_PARA, *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;

















































typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {
    DWORD               cbSize;
    DWORD               dwSignerIndex;
    CRYPT_DATA_BLOB     blob;
} CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;











typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {
    DWORD               cbSize;
    DWORD               dwSignerIndex;
    DWORD               dwUnauthAttrIndex;
} CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;


































































BOOL
__stdcall
CryptMsgVerifyCountersignatureEncoded(
     HCRYPTPROV   hCryptProv,
     DWORD        dwEncodingType,
     PBYTE        pbSignerInfo,
     DWORD        cbSignerInfo,
     PBYTE        pbSignerInfoCountersignature,
     DWORD        cbSignerInfoCountersignature,
     PCERT_INFO   pciCountersigner
    );












BOOL
__stdcall
CryptMsgVerifyCountersignatureEncodedEx(
     HCRYPTPROV   hCryptProv,
     DWORD        dwEncodingType,
     PBYTE        pbSignerInfo,
     DWORD        cbSignerInfo,
     PBYTE        pbSignerInfoCountersignature,
     DWORD        cbSignerInfoCountersignature,
     DWORD        dwSignerType,
     void         *pvSigner,
     DWORD        dwFlags,
      void *pvReserved
    );










BOOL
__stdcall
CryptMsgCountersign(
      HCRYPTMSG            hCryptMsg,
     DWORD                    dwIndex,
     DWORD                    cCountersigners,
     PCMSG_SIGNER_ENCODE_INFO rgCountersigners
    );







BOOL
__stdcall
CryptMsgCountersignEncoded(
     DWORD                    dwEncodingType,
     PBYTE                    pbSignerInfo,
     DWORD                    cbSignerInfo,
     DWORD                    cCountersigners,
     PCMSG_SIGNER_ENCODE_INFO rgCountersigners,
     PBYTE                   pbCountersignature,
      PDWORD               pcbCountersignature
    );








typedef void * (__stdcall *PFN_CMSG_ALLOC) (
     size_t cb
    );

typedef void (__stdcall *PFN_CMSG_FREE)(
     void *pv
    );














typedef BOOL (__stdcall *PFN_CMSG_GEN_ENCRYPT_KEY) (
      HCRYPTPROV               *phCryptProv,
     PCRYPT_ALGORITHM_IDENTIFIER  paiEncrypt,
     PVOID                        pvEncryptAuxInfo,
     PCERT_PUBLIC_KEY_INFO        pPublicKeyInfo,
     PFN_CMSG_ALLOC               pfnAlloc,
     HCRYPTKEY                   *phEncryptKey,
     PBYTE                       *ppbEncryptParameters,
     PDWORD                      pcbEncryptParameters
    );


typedef BOOL (__stdcall *PFN_CMSG_EXPORT_ENCRYPT_KEY) (
     HCRYPTPROV                   hCryptProv,
     HCRYPTKEY                    hEncryptKey,
     PCERT_PUBLIC_KEY_INFO        pPublicKeyInfo,
     PBYTE                       pbData,
      PDWORD                   pcbData
    );


typedef BOOL (__stdcall *PFN_CMSG_IMPORT_ENCRYPT_KEY) (
     HCRYPTPROV                   hCryptProv,
     DWORD                        dwKeySpec,
     PCRYPT_ALGORITHM_IDENTIFIER  paiEncrypt,
     PCRYPT_ALGORITHM_IDENTIFIER  paiPubKey,
     PBYTE                        pbEncodedKey,
     DWORD                        cbEncodedKey,
     HCRYPTKEY                   *phEncryptKey
    );
















typedef struct _CMSG_CONTENT_ENCRYPT_INFO {
    DWORD                       cbSize;
    HCRYPTPROV                  hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
    void                        *pvEncryptionAuxInfo;
    DWORD                       cRecipients;
    PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
    PFN_CMSG_ALLOC              pfnAlloc;
    PFN_CMSG_FREE               pfnFree;
    DWORD                       dwEncryptFlags;
    HCRYPTKEY                   hContentEncryptKey;
    DWORD                       dwFlags;
} CMSG_CONTENT_ENCRYPT_INFO, *PCMSG_CONTENT_ENCRYPT_INFO;










































typedef BOOL (__stdcall *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY) (
      PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
     DWORD dwFlags,
      void *pvReserved
    );







typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO {
    DWORD                       cbSize;
    DWORD                       dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB             EncryptedKey;
    DWORD                       dwFlags;
} CMSG_KEY_TRANS_ENCRYPT_INFO, *PCMSG_KEY_TRANS_ENCRYPT_INFO;


























typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_TRANS) (
     PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
     PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo,
      PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo,
     DWORD dwFlags,
      void *pvReserved
    );








typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {
    DWORD                       cbSize;
    CRYPT_DATA_BLOB             EncryptedKey;
} CMSG_KEY_AGREE_KEY_ENCRYPT_INFO, *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;







typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO {
    DWORD                       cbSize;
    DWORD                       dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB             UserKeyingMaterial;
    DWORD                       dwOriginatorChoice;
    union {
        
        CERT_ID                     OriginatorCertId;
        
        CERT_PUBLIC_KEY_INFO        OriginatorPublicKeyInfo;
    };
    DWORD                       cKeyAgreeKeyEncryptInfo;
    PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;
    DWORD                       dwFlags;
} CMSG_KEY_AGREE_ENCRYPT_INFO, *PCMSG_KEY_AGREE_ENCRYPT_INFO;




















































typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_AGREE) (
     PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
     PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo,
      PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo,
     DWORD dwFlags,
      void *pvReserved
    );







typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO {
    DWORD                       cbSize;
    DWORD                       dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB             EncryptedKey;
    DWORD                       dwFlags;
} CMSG_MAIL_LIST_ENCRYPT_INFO, *PCMSG_MAIL_LIST_ENCRYPT_INFO;


























typedef BOOL (__stdcall *PFN_CMSG_EXPORT_MAIL_LIST) (
     PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
     PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo,
      PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo,
     DWORD dwFlags,
      void *pvReserved
    );





















typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_TRANS) (
     PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
     PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
     DWORD dwFlags,
      void *pvReserved,
     HCRYPTKEY *phContentEncryptKey
    );


typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_AGREE) (
     PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
     PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
     DWORD dwFlags,
      void *pvReserved,
     HCRYPTKEY *phContentEncryptKey
    );


typedef BOOL (__stdcall *PFN_CMSG_IMPORT_MAIL_LIST) (
     PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
     PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara,
     DWORD dwFlags,
      void *pvReserved,
     HCRYPTKEY *phContentEncryptKey
    );













































































typedef void *HCERTSTORE;










typedef struct _CERT_CONTEXT {
    DWORD                   dwCertEncodingType;
    BYTE                    *pbCertEncoded;
    DWORD                   cbCertEncoded;
    PCERT_INFO              pCertInfo;
    HCERTSTORE              hCertStore;
} CERT_CONTEXT, *PCERT_CONTEXT;
typedef const CERT_CONTEXT *PCCERT_CONTEXT;










typedef struct _CRL_CONTEXT {
    DWORD                   dwCertEncodingType;
    BYTE                    *pbCrlEncoded;
    DWORD                   cbCrlEncoded;
    PCRL_INFO               pCrlInfo;
    HCERTSTORE              hCertStore;
} CRL_CONTEXT, *PCRL_CONTEXT;
typedef const CRL_CONTEXT *PCCRL_CONTEXT;











typedef struct _CTL_CONTEXT {
    DWORD                   dwMsgAndCertEncodingType;
    BYTE                    *pbCtlEncoded;
    DWORD                   cbCtlEncoded;
    PCTL_INFO               pCtlInfo;
    HCERTSTORE              hCertStore;
    HCRYPTMSG               hCryptMsg;
    BYTE                    *pbCtlContent;
    DWORD                   cbCtlContent;
} CTL_CONTEXT, *PCTL_CONTEXT;
typedef const CTL_CONTEXT *PCCTL_CONTEXT;













































































































typedef struct _CRYPT_KEY_PROV_PARAM {
    DWORD           dwParam;
    BYTE            *pbData;
    DWORD           cbData;
    DWORD           dwFlags;
} CRYPT_KEY_PROV_PARAM, *PCRYPT_KEY_PROV_PARAM;

typedef struct _CRYPT_KEY_PROV_INFO {
    LPWSTR                  pwszContainerName;
    LPWSTR                  pwszProvName;
    DWORD                   dwProvType;
    DWORD                   dwFlags;
    DWORD                   cProvParam;
    PCRYPT_KEY_PROV_PARAM   rgProvParam;
    DWORD                   dwKeySpec;
} CRYPT_KEY_PROV_INFO, *PCRYPT_KEY_PROV_INFO;

















typedef struct _CERT_KEY_CONTEXT {
    DWORD           cbSize;           
    HCRYPTPROV      hCryptProv;
    DWORD           dwKeySpec;
} CERT_KEY_CONTEXT, *PCERT_KEY_CONTEXT;





























































































typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA {
    union {
        HKEY                hKeyBase;
        void                *pvBase;
    };
    union {
        void                *pvSystemStore;
        LPCSTR              pszSystemStore;
        LPCWSTR             pwszSystemStore;
    };
} CERT_SYSTEM_STORE_RELOCATE_PARA, *PCERT_SYSTEM_STORE_RELOCATE_PARA;























































































































































































    






























































typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {
    HKEY                hKeyBase;
    LPWSTR              pwszRegPath;
} CERT_REGISTRY_STORE_CLIENT_GPT_PARA, *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;









typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA {
    HKEY                hKey;
    LPWSTR              pwszStoreDirectory;
} CERT_REGISTRY_STORE_ROAMING_PARA, *PCERT_REGISTRY_STORE_ROAMING_PARA;











































































typedef struct _CERT_LDAP_STORE_OPENED_PARA {
    void        *pvLdapSessionHandle;   
                                        
    LPCWSTR     pwszLdapUrl;
} CERT_LDAP_STORE_OPENED_PARA, *PCERT_LDAP_STORE_OPENED_PARA;











































































































































































































































































































































































__declspec(dllimport)
HCERTSTORE
__stdcall
CertOpenStore(
     LPCSTR lpszStoreProvider,
     DWORD dwEncodingType,
     HCRYPTPROV hCryptProv,
     DWORD dwFlags,
     const void *pvPara
    );







typedef void *HCERTSTOREPROV;










typedef struct _CERT_STORE_PROV_INFO {
    DWORD               cbSize;
    DWORD               cStoreProvFunc;
    void                **rgpvStoreProvFunc;
    HCERTSTOREPROV      hStoreProv;
    DWORD               dwStoreProvFlags;
    HCRYPTOIDFUNCADDR   hStoreProvFuncAddr2;
} CERT_STORE_PROV_INFO, *PCERT_STORE_PROV_INFO;








typedef BOOL (__stdcall *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(
     LPCSTR lpszStoreProvider,
     DWORD dwEncodingType,
     HCRYPTPROV hCryptProv,
     DWORD dwFlags,
     const void *pvPara,
     HCERTSTORE hCertStore,
      PCERT_STORE_PROV_INFO pStoreProvInfo
    );





















































typedef void (__stdcall *PFN_CERT_STORE_PROV_CLOSE)(
     HCERTSTOREPROV hStoreProv,
     DWORD dwFlags
    );






typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CERT)(
     HCERTSTOREPROV hStoreProv,
     PCCERT_CONTEXT pStoreCertContext,
     DWORD dwFlags,
     PCCERT_CONTEXT *ppProvCertContext
    );










typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CERT)(
     HCERTSTOREPROV hStoreProv,
     PCCERT_CONTEXT pCertContext,
     DWORD dwFlags
    );





typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CERT)(
     HCERTSTOREPROV hStoreProv,
     PCCERT_CONTEXT pCertContext,
     DWORD dwFlags
    );









typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(
     HCERTSTOREPROV hStoreProv,
     PCCERT_CONTEXT pCertContext,
     DWORD dwPropId,
     DWORD dwFlags,
     const void *pvData
    );






typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CRL)(
     HCERTSTOREPROV hStoreProv,
     PCCRL_CONTEXT pStoreCrlContext,
     DWORD dwFlags,
     PCCRL_CONTEXT *ppProvCrlContext
    );








typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CRL)(
     HCERTSTOREPROV hStoreProv,
     PCCRL_CONTEXT pCrlContext,
     DWORD dwFlags
    );




typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CRL)(
     HCERTSTOREPROV hStoreProv,
     PCCRL_CONTEXT pCrlContext,
     DWORD dwFlags
    );









typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(
     HCERTSTOREPROV hStoreProv,
     PCCRL_CONTEXT pCrlContext,
     DWORD dwPropId,
     DWORD dwFlags,
     const void *pvData
    );






typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CTL)(
     HCERTSTOREPROV hStoreProv,
     PCCTL_CONTEXT pStoreCtlContext,
     DWORD dwFlags,
     PCCTL_CONTEXT *ppProvCtlContext
    );








typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CTL)(
     HCERTSTOREPROV hStoreProv,
     PCCTL_CONTEXT pCtlContext,
     DWORD dwFlags
    );




typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CTL)(
     HCERTSTOREPROV hStoreProv,
     PCCTL_CONTEXT pCtlContext,
     DWORD dwFlags
                                                     );









typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(
     HCERTSTOREPROV hStoreProv,
     PCCTL_CONTEXT pCtlContext,
     DWORD dwPropId,
     DWORD dwFlags,
     const void *pvData
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_CONTROL)(
     HCERTSTOREPROV hStoreProv,
     DWORD dwFlags,
     DWORD dwCtrlType,
     void const *pvCtrlPara
    );

typedef struct _CERT_STORE_PROV_FIND_INFO {
    DWORD               cbSize;
    DWORD               dwMsgAndCertEncodingType;
    DWORD               dwFindFlags;
    DWORD               dwFindType;
    const void          *pvFindPara;
} CERT_STORE_PROV_FIND_INFO, *PCERT_STORE_PROV_FIND_INFO;
typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO,
*PCCERT_STORE_PROV_FIND_INFO;

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CERT)(
     HCERTSTOREPROV hStoreProv,
     PCCERT_STORE_PROV_FIND_INFO pFindInfo,
     PCCERT_CONTEXT pPrevCertContext,
     DWORD dwFlags,
      void **ppvStoreProvFindInfo,
     PCCERT_CONTEXT *ppProvCertContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(
     HCERTSTOREPROV hStoreProv,
     PCCERT_CONTEXT pCertContext,
     void *pvStoreProvFindInfo,
     DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(
     HCERTSTOREPROV hStoreProv,
     PCCERT_CONTEXT pCertContext,
     DWORD dwPropId,
     DWORD dwFlags,
     void *pvData,
      DWORD *pcbData
    );


typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CRL)(
     HCERTSTOREPROV hStoreProv,
     PCCERT_STORE_PROV_FIND_INFO pFindInfo,
     PCCRL_CONTEXT pPrevCrlContext,
     DWORD dwFlags,
      void **ppvStoreProvFindInfo,
     PCCRL_CONTEXT *ppProvCrlContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(
     HCERTSTOREPROV hStoreProv,
     PCCRL_CONTEXT pCrlContext,
     void *pvStoreProvFindInfo,
     DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(
     HCERTSTOREPROV hStoreProv,
     PCCRL_CONTEXT pCrlContext,
     DWORD dwPropId,
     DWORD dwFlags,
     void *pvData,
      DWORD *pcbData
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CTL)(
     HCERTSTOREPROV hStoreProv,
     PCCERT_STORE_PROV_FIND_INFO pFindInfo,
     PCCTL_CONTEXT pPrevCtlContext,
     DWORD dwFlags,
      void **ppvStoreProvFindInfo,
     PCCTL_CONTEXT *ppProvCtlContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(
     HCERTSTOREPROV hStoreProv,
     PCCTL_CONTEXT pCtlContext,
     void *pvStoreProvFindInfo,
     DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(
     HCERTSTOREPROV hStoreProv,
     PCCTL_CONTEXT pCtlContext,
     DWORD dwPropId,
     DWORD dwFlags,
     void *pvData,
      DWORD *pcbData
    );





__declspec(dllimport)
HCERTSTORE
__stdcall
CertDuplicateStore(
     HCERTSTORE hCertStore
    );






























































__declspec(dllimport)
BOOL
__stdcall
CertSaveStore(
     HCERTSTORE hCertStore,
     DWORD dwEncodingType,
     DWORD dwSaveAs,
     DWORD dwSaveTo,
      void *pvSaveToPara,
     DWORD dwFlags
    );































__declspec(dllimport)
BOOL
__stdcall
CertCloseStore(
     HCERTSTORE hCertStore,
    DWORD dwFlags
    );













__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertGetSubjectCertificateFromStore(
     HCERTSTORE hCertStore,
     DWORD dwCertEncodingType,
     PCERT_INFO pCertId           
    
    );

















__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertEnumCertificatesInStore(
     HCERTSTORE hCertStore,
     PCCERT_CONTEXT pPrevCertContext
    );

























__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertFindCertificateInStore(
     HCERTSTORE hCertStore,
     DWORD dwCertEncodingType,
     DWORD dwFindFlags,
     DWORD dwFindType,
     const void *pvFindPara,
     PCCERT_CONTEXT pPrevCertContext
    );


































































































































































































































































































































__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertGetIssuerCertificateFromStore(
     HCERTSTORE hCertStore,
     PCCERT_CONTEXT pSubjectContext,
      PCCERT_CONTEXT pPrevIssuerContext,
      DWORD *pdwFlags
    );











__declspec(dllimport)
BOOL
__stdcall
CertVerifySubjectCertificateContext(
     PCCERT_CONTEXT pSubject,
      PCCERT_CONTEXT pIssuer,
      DWORD *pdwFlags
    );




__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertDuplicateCertificateContext(
     PCCERT_CONTEXT pCertContext
    );















__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertCreateCertificateContext(
     DWORD dwCertEncodingType,
     const BYTE *pbCertEncoded,
     DWORD cbCertEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCertificateContext(
     PCCERT_CONTEXT pCertContext
    );

































































































__declspec(dllimport)
BOOL
__stdcall
CertSetCertificateContextProperty(
     PCCERT_CONTEXT pCertContext,
     DWORD dwPropId,
     DWORD dwFlags,
     const void *pvData
    );






















































__declspec(dllimport)
BOOL
__stdcall
CertGetCertificateContextProperty(
     PCCERT_CONTEXT pCertContext,
     DWORD dwPropId,
     void *pvData,
      DWORD *pcbData
    );















__declspec(dllimport)
DWORD
__stdcall
CertEnumCertificateContextProperties(
     PCCERT_CONTEXT pCertContext,
     DWORD dwPropId
    );


















__declspec(dllimport)
BOOL
__stdcall
CertCreateCTLEntryFromCertificateContextProperties(
     PCCERT_CONTEXT pCertContext,
     DWORD cOptAttr,
      PCRYPT_ATTRIBUTE rgOptAttr,
     DWORD dwFlags,
      void *pvReserved,
      PCTL_ENTRY pCtlEntry,
      DWORD *pcbCtlEntry
    );
















__declspec(dllimport)
BOOL
__stdcall
CertSetCertificateContextPropertiesFromCTLEntry(
     PCCERT_CONTEXT pCertContext,
     PCTL_ENTRY pCtlEntry,
     DWORD dwFlags
    );





















































__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertGetCRLFromStore(
     HCERTSTORE hCertStore,
      PCCERT_CONTEXT pIssuerContext,
     PCCRL_CONTEXT pPrevCrlContext,
      DWORD *pdwFlags
    );

















__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertEnumCRLsInStore(
     HCERTSTORE hCertStore,
     PCCRL_CONTEXT pPrevCrlContext
    );
























__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertFindCRLInStore(
     HCERTSTORE hCertStore,
     DWORD dwCertEncodingType,
     DWORD dwFindFlags,
     DWORD dwFindType,
     const void *pvFindPara,
     PCCRL_CONTEXT pPrevCrlContext
    );










































































typedef struct _CRL_FIND_ISSUED_FOR_PARA {
    PCCERT_CONTEXT              pSubjectCert;
    PCCERT_CONTEXT              pIssuerCert;
} CRL_FIND_ISSUED_FOR_PARA, *PCRL_FIND_ISSUED_FOR_PARA;





__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertDuplicateCRLContext(
     PCCRL_CONTEXT pCrlContext
    );















__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertCreateCRLContext(
     DWORD dwCertEncodingType,
     const BYTE *pbCrlEncoded,
     DWORD cbCrlEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCRLContext(
     PCCRL_CONTEXT pCrlContext
    );






__declspec(dllimport)
BOOL
__stdcall
CertSetCRLContextProperty(
     PCCRL_CONTEXT pCrlContext,
     DWORD dwPropId,
     DWORD dwFlags,
     const void *pvData
    );









__declspec(dllimport)
BOOL
__stdcall
CertGetCRLContextProperty(
     PCCRL_CONTEXT pCrlContext,
     DWORD dwPropId,
     void *pvData,
      DWORD *pcbData
    );











__declspec(dllimport)
DWORD
__stdcall
CertEnumCRLContextProperties(
     PCCRL_CONTEXT pCrlContext,
     DWORD dwPropId
    );














__declspec(dllimport)
BOOL
__stdcall
CertFindCertificateInCRL(
     PCCERT_CONTEXT pCert,
     PCCRL_CONTEXT pCrlContext,
     DWORD dwFlags,
      void *pvReserved,
     PCRL_ENTRY *ppCrlEntry
    );













__declspec(dllimport)
BOOL
__stdcall
CertIsValidCRLForCertificate(
     PCCERT_CONTEXT pCert,
     PCCRL_CONTEXT pCrl,
     DWORD dwFlags,
     void *pvReserved
    );



























































__declspec(dllimport)
BOOL
__stdcall
CertAddEncodedCertificateToStore(
     HCERTSTORE hCertStore,
     DWORD dwCertEncodingType,
     const BYTE *pbCertEncoded,
     DWORD cbCertEncoded,
     DWORD dwAddDisposition,
      PCCERT_CONTEXT *ppCertContext
    );


























































__declspec(dllimport)
BOOL
__stdcall
CertAddCertificateContextToStore(
     HCERTSTORE hCertStore,
     PCCERT_CONTEXT pCertContext,
     DWORD dwAddDisposition,
      PCCERT_CONTEXT *ppStoreContext
    );













































__declspec(dllimport)
BOOL
__stdcall
CertAddSerializedElementToStore(
     HCERTSTORE hCertStore,
     const BYTE *pbElement,
     DWORD cbElement,
     DWORD dwAddDisposition,
     DWORD dwFlags,
     DWORD dwContextTypeFlags,
      DWORD *pdwContextType,
      const void **ppvContext
    );
















__declspec(dllimport)
BOOL
__stdcall
CertDeleteCertificateFromStore(
     PCCERT_CONTEXT pCertContext
    );

















__declspec(dllimport)
BOOL
__stdcall
CertAddEncodedCRLToStore(
     HCERTSTORE hCertStore,
     DWORD dwCertEncodingType,
     const BYTE *pbCrlEncoded,
     DWORD cbCrlEncoded,
     DWORD dwAddDisposition,
      PCCRL_CONTEXT *ppCrlContext
    );





















__declspec(dllimport)
BOOL
__stdcall
CertAddCRLContextToStore(
     HCERTSTORE hCertStore,
     PCCRL_CONTEXT pCrlContext,
     DWORD dwAddDisposition,
      PCCRL_CONTEXT *ppStoreContext
    );













__declspec(dllimport)
BOOL
__stdcall
CertDeleteCRLFromStore(
     PCCRL_CONTEXT pCrlContext
    );





__declspec(dllimport)
BOOL
__stdcall
CertSerializeCertificateStoreElement(
     PCCERT_CONTEXT pCertContext,
     DWORD dwFlags,
     BYTE *pbElement,
      DWORD *pcbElement
    );





__declspec(dllimport)
BOOL
__stdcall
CertSerializeCRLStoreElement(
     PCCRL_CONTEXT pCrlContext,
     DWORD dwFlags,
     BYTE *pbElement,
      DWORD *pcbElement
    );










__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertDuplicateCTLContext(
     PCCTL_CONTEXT pCtlContext
    );















__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertCreateCTLContext(
     DWORD dwMsgAndCertEncodingType,
     const BYTE *pbCtlEncoded,
     DWORD cbCtlEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCTLContext(
     PCCTL_CONTEXT pCtlContext
    );






__declspec(dllimport)
BOOL
__stdcall
CertSetCTLContextProperty(
     PCCTL_CONTEXT pCtlContext,
     DWORD dwPropId,
     DWORD dwFlags,
     const void *pvData
    );









__declspec(dllimport)
BOOL
__stdcall
CertGetCTLContextProperty(
     PCCTL_CONTEXT pCtlContext,
     DWORD dwPropId,
     void *pvData,
      DWORD *pcbData
    );




__declspec(dllimport)
DWORD
__stdcall
CertEnumCTLContextProperties(
     PCCTL_CONTEXT pCtlContext,
     DWORD dwPropId
    );

















__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertEnumCTLsInStore(
     HCERTSTORE hCertStore,
     PCCTL_CONTEXT pPrevCtlContext
    );



















__declspec(dllimport)
PCTL_ENTRY
__stdcall
CertFindSubjectInCTL(
     DWORD dwEncodingType,
     DWORD dwSubjectType,
     void *pvSubject,
     PCCTL_CONTEXT pCtlContext,
     DWORD dwFlags
    );







typedef struct _CTL_ANY_SUBJECT_INFO {
    CRYPT_ALGORITHM_IDENTIFIER  SubjectAlgorithm;
    CRYPT_DATA_BLOB             SubjectIdentifier;
} CTL_ANY_SUBJECT_INFO, *PCTL_ANY_SUBJECT_INFO;
























__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertFindCTLInStore(
     HCERTSTORE hCertStore,
     DWORD dwMsgAndCertEncodingType,
     DWORD dwFindFlags,
     DWORD dwFindType,
     const void *pvFindPara,
     PCCTL_CONTEXT pPrevCtlContext
    );








typedef struct _CTL_FIND_USAGE_PARA {
    DWORD               cbSize;
    CTL_USAGE           SubjectUsage;   
    CRYPT_DATA_BLOB     ListIdentifier; 
    PCERT_INFO          pSigner;        
} CTL_FIND_USAGE_PARA, *PCTL_FIND_USAGE_PARA;







typedef struct _CTL_FIND_SUBJECT_PARA {
    DWORD                   cbSize;
    PCTL_FIND_USAGE_PARA    pUsagePara; 
    DWORD                   dwSubjectType;
    void                    *pvSubject;
} CTL_FIND_SUBJECT_PARA, *PCTL_FIND_SUBJECT_PARA;




































































__declspec(dllimport)
BOOL
__stdcall
CertAddEncodedCTLToStore(
     HCERTSTORE hCertStore,
     DWORD dwMsgAndCertEncodingType,
     const BYTE *pbCtlEncoded,
     DWORD cbCtlEncoded,
     DWORD dwAddDisposition,
      PCCTL_CONTEXT *ppCtlContext
    );





















__declspec(dllimport)
BOOL
__stdcall
CertAddCTLContextToStore(
     HCERTSTORE hCertStore,
     PCCTL_CONTEXT pCtlContext,
     DWORD dwAddDisposition,
      PCCTL_CONTEXT *ppStoreContext
    );




__declspec(dllimport)
BOOL
__stdcall
CertSerializeCTLStoreElement(
     PCCTL_CONTEXT pCtlContext,
     DWORD dwFlags,
     BYTE *pbElement,
      DWORD *pcbElement
    );













__declspec(dllimport)
BOOL
__stdcall
CertDeleteCTLFromStore(
     PCCTL_CONTEXT pCtlContext
    );


__declspec(dllimport)
BOOL
__stdcall
CertAddCertificateLinkToStore(
     HCERTSTORE hCertStore,
     PCCERT_CONTEXT pCertContext,
     DWORD dwAddDisposition,
      PCCERT_CONTEXT *ppStoreContext
    );

__declspec(dllimport)
BOOL
__stdcall
CertAddCRLLinkToStore(
     HCERTSTORE hCertStore,
     PCCRL_CONTEXT pCrlContext,
     DWORD dwAddDisposition,
      PCCRL_CONTEXT *ppStoreContext
    );

__declspec(dllimport)
BOOL
__stdcall
CertAddCTLLinkToStore(
     HCERTSTORE hCertStore,
     PCCTL_CONTEXT pCtlContext,
     DWORD dwAddDisposition,
      PCCTL_CONTEXT *ppStoreContext
    );

__declspec(dllimport)
BOOL
__stdcall
CertAddStoreToCollection(
     HCERTSTORE hCollectionStore,
      HCERTSTORE hSiblingStore,
     DWORD dwUpdateFlags,
     DWORD dwPriority
    );

__declspec(dllimport)
void
__stdcall
CertRemoveStoreFromCollection(
     HCERTSTORE hCollectionStore,
     HCERTSTORE hSiblingStore
    );


__declspec(dllimport)
BOOL
__stdcall
CertControlStore(
     HCERTSTORE hCertStore,
     DWORD dwFlags,
     DWORD dwCtrlType,
     void const *pvCtrlPara
    );





























































































































__declspec(dllimport)
BOOL
__stdcall
CertSetStoreProperty(
     HCERTSTORE hCertStore,
     DWORD dwPropId,
     DWORD dwFlags,
     const void *pvData
    );














__declspec(dllimport)
BOOL
__stdcall
CertGetStoreProperty(
     HCERTSTORE hCertStore,
     DWORD dwPropId,
     void *pvData,
      DWORD *pcbData
    );


typedef struct _CERT_CREATE_CONTEXT_PARA {
    DWORD                   cbSize;
    PFN_CRYPT_FREE          pfnFree;            
    void                    *pvFree;            
} CERT_CREATE_CONTEXT_PARA, *PCERT_CREATE_CONTEXT_PARA;


































__declspec(dllimport)
const void *
__stdcall
CertCreateContext(
     DWORD dwContextType,
     DWORD dwEncodingType,
     const BYTE *pbEncoded,
     DWORD cbEncoded,
     DWORD dwFlags,
      PCERT_CREATE_CONTEXT_PARA pCreatePara
    );














































typedef struct _CERT_SYSTEM_STORE_INFO {
    DWORD   cbSize;
} CERT_SYSTEM_STORE_INFO, *PCERT_SYSTEM_STORE_INFO;











































typedef struct _CERT_PHYSICAL_STORE_INFO {
    DWORD               cbSize;
    LPSTR               pszOpenStoreProvider;   
    DWORD               dwOpenEncodingType;     
    DWORD               dwOpenFlags;            
    CRYPT_DATA_BLOB     OpenParameters;         
    DWORD               dwFlags;                
    DWORD               dwPriority;             
} CERT_PHYSICAL_STORE_INFO, *PCERT_PHYSICAL_STORE_INFO;





































__declspec(dllimport)
BOOL
__stdcall
CertRegisterSystemStore(
     const void *pvSystemStore,
     DWORD dwFlags,
     PCERT_SYSTEM_STORE_INFO pStoreInfo,
      void *pvReserved
    );

















__declspec(dllimport)
BOOL
__stdcall
CertRegisterPhysicalStore(
     const void *pvSystemStore,
     DWORD dwFlags,
     LPCWSTR pwszStoreName,
     PCERT_PHYSICAL_STORE_INFO pStoreInfo,
      void *pvReserved
    );
















__declspec(dllimport)
BOOL
__stdcall
CertUnregisterSystemStore(
     const void *pvSystemStore,
     DWORD dwFlags
    );
















__declspec(dllimport)
BOOL
__stdcall
CertUnregisterPhysicalStore(
     const void *pvSystemStore,
     DWORD dwFlags,
     LPCWSTR pwszStoreName
    );


















typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(
     LPCWSTR pwszStoreLocation,
     DWORD dwFlags,
      void *pvReserved,
      void *pvArg
    );

typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE)(
     const void *pvSystemStore,
     DWORD dwFlags,
     PCERT_SYSTEM_STORE_INFO pStoreInfo,
      void *pvReserved,
      void *pvArg
    );

typedef BOOL (__stdcall *PFN_CERT_ENUM_PHYSICAL_STORE)(
     const void *pvSystemStore,
     DWORD dwFlags,
     LPCWSTR pwszStoreName,
     PCERT_PHYSICAL_STORE_INFO pStoreInfo,
      void *pvReserved,
      void *pvArg
    );



















__declspec(dllimport)
BOOL
__stdcall
CertEnumSystemStoreLocation(
     DWORD dwFlags,
     void *pvArg,
     PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum
    );
































__declspec(dllimport)
BOOL
__stdcall
CertEnumSystemStore(
     DWORD dwFlags,
      void *pvSystemStoreLocationPara,
     void *pvArg,
     PFN_CERT_ENUM_SYSTEM_STORE pfnEnum
    );

















__declspec(dllimport)
BOOL
__stdcall
CertEnumPhysicalStore(
     const void *pvSystemStore,
     DWORD dwFlags,
     void *pvArg,
     PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum
    );






















































__declspec(dllimport)
BOOL
__stdcall
CertGetEnhancedKeyUsage(
     PCCERT_CONTEXT pCertContext,
     DWORD dwFlags,
     PCERT_ENHKEY_USAGE pUsage,
      DWORD *pcbUsage
    );




__declspec(dllimport)
BOOL
__stdcall
CertSetEnhancedKeyUsage(
     PCCERT_CONTEXT pCertContext,
     PCERT_ENHKEY_USAGE pUsage
    );




__declspec(dllimport)
BOOL
__stdcall
CertAddEnhancedKeyUsageIdentifier(
     PCCERT_CONTEXT pCertContext,
     LPCSTR pszUsageIdentifier
    );






__declspec(dllimport)
BOOL
__stdcall
CertRemoveEnhancedKeyUsageIdentifier(
     PCCERT_CONTEXT pCertContext,
     LPCSTR pszUsageIdentifier
    );









__declspec(dllimport)
BOOL
__stdcall
CertGetValidUsages(
          DWORD           cCerts,
          PCCERT_CONTEXT  *rghCerts,
         int             *cNumOIDs,
         LPSTR           *rghOIDs,
       DWORD           *pcbOIDs);





























__declspec(dllimport)
BOOL
__stdcall
CryptMsgGetAndVerifySigner(
     HCRYPTMSG hCryptMsg,
     DWORD cSignerStore,
      HCERTSTORE *rghSignerStore,
     DWORD dwFlags,
      PCCERT_CONTEXT *ppSigner,
       DWORD *pdwSignerIndex
    );














__declspec(dllimport)
BOOL
__stdcall
CryptMsgSignCTL(
     DWORD dwMsgEncodingType,
     BYTE *pbCtlContent,
     DWORD cbCtlContent,
     PCMSG_SIGNED_ENCODE_INFO pSignInfo,
     DWORD dwFlags,
     BYTE *pbEncoded,
      DWORD *pcbEncoded
    );

















__declspec(dllimport)
BOOL
__stdcall
CryptMsgEncodeAndSignCTL(
     DWORD dwMsgEncodingType,
     PCTL_INFO pCtlInfo,
     PCMSG_SIGNED_ENCODE_INFO pSignInfo,
     DWORD dwFlags,
     BYTE *pbEncoded,
      DWORD *pcbEncoded
    );
















__declspec(dllimport)
BOOL
__stdcall
CertFindSubjectInSortedCTL(
     PCRYPT_DATA_BLOB pSubjectIdentifier,
     PCCTL_CONTEXT pCtlContext,
     DWORD dwFlags,
     void *pvReserved,
      PCRYPT_DER_BLOB pEncodedAttributes
    );














__declspec(dllimport)
BOOL
__stdcall
CertEnumSubjectInSortedCTL(
     PCCTL_CONTEXT pCtlContext,
      void **ppvNextSubject,
      PCRYPT_DER_BLOB pSubjectIdentifier,
      PCRYPT_DER_BLOB pEncodedAttributes
    );






typedef struct _CTL_VERIFY_USAGE_PARA {
    DWORD                   cbSize;
    CRYPT_DATA_BLOB         ListIdentifier;     
    DWORD                   cCtlStore;
    HCERTSTORE              *rghCtlStore;       
    DWORD                   cSignerStore;
    HCERTSTORE              *rghSignerStore;    
} CTL_VERIFY_USAGE_PARA, *PCTL_VERIFY_USAGE_PARA;

typedef struct _CTL_VERIFY_USAGE_STATUS {
    DWORD                   cbSize;
    DWORD                   dwError;
    DWORD                   dwFlags;
    PCCTL_CONTEXT           *ppCtl;             
    DWORD                   dwCtlEntryIndex;
    PCCERT_CONTEXT          *ppSigner;          
    DWORD                   dwSignerIndex;
} CTL_VERIFY_USAGE_STATUS, *PCTL_VERIFY_USAGE_STATUS;

























































__declspec(dllimport)
BOOL
__stdcall
CertVerifyCTLUsage(
     DWORD dwEncodingType,
     DWORD dwSubjectType,
     void *pvSubject,
     PCTL_USAGE pSubjectUsage,
     DWORD dwFlags,
      PCTL_VERIFY_USAGE_PARA pVerifyUsagePara,
      PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus
    );










typedef struct _CERT_REVOCATION_CRL_INFO {
    DWORD                   cbSize;
    PCCRL_CONTEXT           pBaseCrlContext;
    PCCRL_CONTEXT           pDeltaCrlContext;

    
    
    PCRL_ENTRY              pCrlEntry;
    BOOL                    fDeltaCrlEntry; 
} CERT_REVOCATION_CRL_INFO, *PCERT_REVOCATION_CRL_INFO;


















typedef struct _CERT_REVOCATION_PARA {
    DWORD                       cbSize;
    PCCERT_CONTEXT              pIssuerCert;
    DWORD                       cCertStore;
    HCERTSTORE                  *rgCertStore;
    HCERTSTORE                  hCrlStore;
    LPFILETIME                  pftTimeToUse;




























} CERT_REVOCATION_PARA, *PCERT_REVOCATION_PARA;
















typedef struct _CERT_REVOCATION_STATUS {
    DWORD                   cbSize;
    DWORD                   dwIndex;
    DWORD                   dwError;
    DWORD                   dwReason;

    

    
    
    
    
    
    
    BOOL                    fHasFreshnessTime;
    DWORD                   dwFreshnessTime;    
} CERT_REVOCATION_STATUS, *PCERT_REVOCATION_STATUS;














































































__declspec(dllimport)
BOOL
__stdcall
CertVerifyRevocation(
     DWORD dwEncodingType,
     DWORD dwRevType,
     DWORD cContext,
     PVOID rgpvContext[],
     DWORD dwFlags,
      PCERT_REVOCATION_PARA pRevPara,
      PCERT_REVOCATION_STATUS pRevStatus
    );




















































BOOL
__stdcall
CertCompareIntegerBlob(
     PCRYPT_INTEGER_BLOB pInt1,
     PCRYPT_INTEGER_BLOB pInt2
    );









__declspec(dllimport)
BOOL
__stdcall
CertCompareCertificate(
     DWORD dwCertEncodingType,
     PCERT_INFO pCertId1,
     PCERT_INFO pCertId2
    );






__declspec(dllimport)
BOOL
__stdcall
CertCompareCertificateName(
     DWORD dwCertEncodingType,
     PCERT_NAME_BLOB pCertName1,
     PCERT_NAME_BLOB pCertName2
    );



















__declspec(dllimport)
BOOL
__stdcall
CertIsRDNAttrsInCertificateName(
     DWORD dwCertEncodingType,
     DWORD dwFlags,
     PCERT_NAME_BLOB pCertName,
     PCERT_RDN pRDN
    );









__declspec(dllimport)
BOOL
__stdcall
CertComparePublicKeyInfo(
     DWORD dwCertEncodingType,
     PCERT_PUBLIC_KEY_INFO pPublicKey1,
     PCERT_PUBLIC_KEY_INFO pPublicKey2
    );






__declspec(dllimport)
DWORD
__stdcall
CertGetPublicKeyLength(
     DWORD dwCertEncodingType,
     PCERT_PUBLIC_KEY_INFO pPublicKey
    );










__declspec(dllimport)
BOOL
__stdcall
CryptVerifyCertificateSignature(
     HCRYPTPROV               hCryptProv,
     DWORD                    dwCertEncodingType,
     const BYTE *             pbEncoded,
     DWORD                    cbEncoded,
     PCERT_PUBLIC_KEY_INFO    pPublicKey
    );


























__declspec(dllimport)
BOOL
__stdcall
CryptVerifyCertificateSignatureEx(
      HCRYPTPROV hCryptProv,
     DWORD dwCertEncodingType,
     DWORD dwSubjectType,
     void *pvSubject,
     DWORD dwIssuerType,
     void *pvIssuer,
     DWORD dwFlags,
      void *pvReserved
    );




    

    

    



    

    

    

    








__declspec(dllimport)
BOOL
__stdcall
CryptHashToBeSigned(
     HCRYPTPROV hCryptProv,
     DWORD dwCertEncodingType,
     const BYTE *pbEncoded,
     DWORD cbEncoded,
     BYTE *pbComputedHash,
      DWORD *pcbComputedHash
    );










__declspec(dllimport)
BOOL
__stdcall
CryptHashCertificate(
     HCRYPTPROV hCryptProv,
     ALG_ID Algid,
     DWORD dwFlags,
     const BYTE *pbEncoded,
     DWORD cbEncoded,
     BYTE *pbComputedHash,
      DWORD *pcbComputedHash
    );












__declspec(dllimport)
BOOL
__stdcall
CryptSignCertificate(
     HCRYPTPROV hCryptProv,
     DWORD dwKeySpec,
     DWORD dwCertEncodingType,
     const BYTE *pbEncodedToBeSigned,
     DWORD cbEncodedToBeSigned,
     PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
      const void *pvHashAuxInfo,
     BYTE *pbSignature,
      DWORD *pcbSignature
    );













__declspec(dllimport)
BOOL
__stdcall
CryptSignAndEncodeCertificate(
     HCRYPTPROV hCryptProv,
     DWORD dwKeySpec,
     DWORD dwCertEncodingType,
     LPCSTR lpszStructType,       
     const void *pvStructInfo,
     PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
      const void *pvHashAuxInfo,
     PBYTE pbEncoded,
      DWORD *pcbEncoded
    );










__declspec(dllimport)
LONG
__stdcall
CertVerifyTimeValidity(
     LPFILETIME pTimeToVerify,
     PCERT_INFO pCertInfo
    );










__declspec(dllimport)
LONG
__stdcall
CertVerifyCRLTimeValidity(
     LPFILETIME pTimeToVerify,
     PCRL_INFO pCrlInfo
    );







__declspec(dllimport)
BOOL
__stdcall
CertVerifyValidityNesting(
     PCERT_INFO pSubjectInfo,
     PCERT_INFO pIssuerInfo
    );






__declspec(dllimport)
BOOL
__stdcall
CertVerifyCRLRevocation(
     DWORD dwCertEncodingType,
     PCERT_INFO pCertId,          
    
     DWORD cCrlInfo,
     PCRL_INFO rgpCrlInfo[]
    );






__declspec(dllimport)
LPCSTR
__stdcall
CertAlgIdToOID(
     DWORD dwAlgId
    );






__declspec(dllimport)
DWORD
__stdcall
CertOIDToAlgId(
     LPCSTR pszObjId
    );






__declspec(dllimport)
PCERT_EXTENSION
__stdcall
CertFindExtension(
     LPCSTR pszObjId,
     DWORD cExtensions,
     CERT_EXTENSION rgExtensions[]
    );






__declspec(dllimport)
PCRYPT_ATTRIBUTE
__stdcall
CertFindAttribute(
     LPCSTR pszObjId,
     DWORD cAttr,
     CRYPT_ATTRIBUTE rgAttr[]
    );







__declspec(dllimport)
PCERT_RDN_ATTR
__stdcall
CertFindRDNAttr(
     LPCSTR pszObjId,
     PCERT_NAME_INFO pName
    );









__declspec(dllimport)
BOOL
__stdcall
CertGetIntendedKeyUsage(
     DWORD dwCertEncodingType,
     PCERT_INFO pCertInfo,
     BYTE *pbKeyUsage,
     DWORD cbKeyUsage
    );

typedef void *HCRYPTDEFAULTCONTEXT;




























__declspec(dllimport)
BOOL
__stdcall
CryptInstallDefaultContext(
     HCRYPTPROV hCryptProv,
     DWORD dwDefaultType,
     const void *pvDefaultPara,
     DWORD dwFlags,
     void *pvReserved,
     HCRYPTDEFAULTCONTEXT *phDefaultContext
    );






























typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {
    DWORD               cOID;
    LPSTR               *rgpszOID;
} CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA, *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;










__declspec(dllimport)
BOOL
__stdcall
CryptUninstallDefaultContext(
    HCRYPTDEFAULTCONTEXT hDefaultContext,
     DWORD dwFlags,
     void *pvReserved
    );








__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfo(
     HCRYPTPROV hCryptProv,
     DWORD dwKeySpec,
     DWORD dwCertEncodingType,
     PCERT_PUBLIC_KEY_INFO pInfo,
      DWORD *pcbInfo
    );

















__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfoEx(
     HCRYPTPROV hCryptProv,
     DWORD dwKeySpec,
     DWORD dwCertEncodingType,
     LPSTR pszPublicKeyObjId,
     DWORD dwFlags,
      void *pvAuxInfo,
     PCERT_PUBLIC_KEY_INFO pInfo,
      DWORD *pcbInfo
    );









__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfo(
     HCRYPTPROV hCryptProv,
     DWORD dwCertEncodingType,
     PCERT_PUBLIC_KEY_INFO pInfo,
     HCRYPTKEY *phKey
    );

















__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfoEx(
     HCRYPTPROV hCryptProv,
     DWORD dwCertEncodingType,
     PCERT_PUBLIC_KEY_INFO pInfo,
     ALG_ID aiKeyAlg,
     DWORD dwFlags,
      void *pvAuxInfo,
     HCRYPTKEY *phKey
    );











































__declspec(dllimport)
BOOL
__stdcall
CryptAcquireCertificatePrivateKey(
     PCCERT_CONTEXT pCert,
     DWORD dwFlags,
     void *pvReserved,
     HCRYPTPROV *phCryptProv,
      DWORD *pdwKeySpec,
      BOOL *pfCallerFreeProv
    );



























__declspec(dllimport)
BOOL
__stdcall
CryptFindCertificateKeyProvInfo(
     PCCERT_CONTEXT pCert,
     DWORD dwFlags,
     void *pvReserved
    );




















typedef BOOL (__stdcall *PFN_IMPORT_PRIV_KEY_FUNC) (
    HCRYPTPROV              hCryptProv,         
    CRYPT_PRIVATE_KEY_INFO  *pPrivateKeyInfo,   
    DWORD                   dwFlags,            
    void                    *pvAuxInfo          
    );





















__declspec(dllimport)
BOOL
__stdcall
CryptImportPKCS8(
    CRYPT_PKCS8_IMPORT_PARAMS           sImportParams,          
    DWORD                               dwFlags,                
    HCRYPTPROV                          *phCryptProv,           
    void                                *pvAuxInfo              
    );




typedef BOOL (__stdcall *PFN_EXPORT_PRIV_KEY_FUNC) (
    HCRYPTPROV              hCryptProv,         
    DWORD                   dwKeySpec,          
    LPSTR                   pszPrivateKeyObjId, 
    DWORD                   dwFlags,            
    void                    *pvAuxInfo,         
    CRYPT_PRIVATE_KEY_INFO  *pPrivateKeyInfo,   
    DWORD                   *pcbPrivateKeyBlob  
    );









__declspec(dllimport)
BOOL
__stdcall
CryptExportPKCS8(
    HCRYPTPROV  hCryptProv,         
    DWORD       dwKeySpec,          
    LPSTR       pszPrivateKeyObjId, 
    DWORD       dwFlags,            
    void        *pvAuxInfo,         
    BYTE        *pbPrivateKeyBlob,  
    DWORD       *pcbPrivateKeyBlob  
    );























__declspec(dllimport)
BOOL
__stdcall
CryptExportPKCS8Ex(
    CRYPT_PKCS8_EXPORT_PARAMS* psExportParams, 
    DWORD       dwFlags,            
    void        *pvAuxInfo,         
    BYTE        *pbPrivateKeyBlob,  
    DWORD       *pcbPrivateKeyBlob  
    );






__declspec(dllimport)
BOOL
__stdcall
CryptHashPublicKeyInfo(
     HCRYPTPROV hCryptProv,
     ALG_ID Algid,
     DWORD dwFlags,
     DWORD dwCertEncodingType,
     PCERT_PUBLIC_KEY_INFO pInfo,
     BYTE *pbComputedHash,
      DWORD *pcbComputedHash
    );












__declspec(dllimport)
DWORD
__stdcall
CertRDNValueToStrA(
     DWORD dwValueType,
     PCERT_RDN_VALUE_BLOB pValue,
      LPSTR psz,
     DWORD csz
    );











__declspec(dllimport)
DWORD
__stdcall
CertRDNValueToStrW(
     DWORD dwValueType,
     PCERT_RDN_VALUE_BLOB pValue,
      LPWSTR psz,
     DWORD csz
    );




#line 12388 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

































































__declspec(dllimport)
DWORD
__stdcall
CertNameToStrA(
     DWORD dwCertEncodingType,
     PCERT_NAME_BLOB pName,
     DWORD dwStrType,
      LPSTR psz,
     DWORD csz
    );


__declspec(dllimport)
DWORD
__stdcall
CertNameToStrW(
     DWORD dwCertEncodingType,
     PCERT_NAME_BLOB pName,
     DWORD dwStrType,
      LPWSTR psz,
     DWORD csz
    );




#line 12480 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"






























































































































__declspec(dllimport)
BOOL
__stdcall
CertStrToNameA(
     DWORD dwCertEncodingType,
     LPCSTR pszX500,
     DWORD dwStrType,
      void *pvReserved,
     BYTE *pbEncoded,
      DWORD *pcbEncoded,
      LPCSTR *ppszError
    );


__declspec(dllimport)
BOOL
__stdcall
CertStrToNameW(
     DWORD dwCertEncodingType,
     LPCWSTR pszX500,
     DWORD dwStrType,
      void *pvReserved,
     BYTE *pbEncoded,
      DWORD *pcbEncoded,
      LPCWSTR *ppszError
    );




#line 12637 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"






























































































__declspec(dllimport)
DWORD
__stdcall
CertGetNameStringA(
     PCCERT_CONTEXT pCertContext,
     DWORD dwType,
     DWORD dwFlags,
     void *pvTypePara,
      LPSTR pszNameString,
     DWORD cchNameString
    );


__declspec(dllimport)
DWORD
__stdcall
CertGetNameStringW(
     PCCERT_CONTEXT pCertContext,
     DWORD dwType,
     DWORD dwFlags,
     void *pvTypePara,
      LPWSTR pszNameString,
     DWORD cchNameString
    );




#line 12760 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"









































































typedef PCCERT_CONTEXT (__stdcall *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(
     void *pvGetArg,
     DWORD dwCertEncodingType,
     PCERT_INFO pSignerId,    
                                
     HCERTSTORE hMsgCertStore
    );




















































typedef struct _CRYPT_SIGN_MESSAGE_PARA {
    DWORD                       cbSize;
    DWORD                       dwMsgEncodingType;
    PCCERT_CONTEXT              pSigningCert;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    void                        *pvHashAuxInfo;
    DWORD                       cMsgCert;
    PCCERT_CONTEXT              *rgpMsgCert;
    DWORD                       cMsgCrl;
    PCCRL_CONTEXT               *rgpMsgCrl;
    DWORD                       cAuthAttr;
    PCRYPT_ATTRIBUTE            rgAuthAttr;
    DWORD                       cUnauthAttr;
    PCRYPT_ATTRIBUTE            rgUnauthAttr;
    DWORD                       dwFlags;
    DWORD                       dwInnerContentType;





} CRYPT_SIGN_MESSAGE_PARA, *PCRYPT_SIGN_MESSAGE_PARA;





























typedef struct _CRYPT_VERIFY_MESSAGE_PARA {
    DWORD                               cbSize;
    DWORD                               dwMsgAndCertEncodingType;
    HCRYPTPROV                          hCryptProv;
    PFN_CRYPT_GET_SIGNER_CERTIFICATE    pfnGetSignerCertificate;
    void                                *pvGetArg;
} CRYPT_VERIFY_MESSAGE_PARA, *PCRYPT_VERIFY_MESSAGE_PARA;








































typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA {
    DWORD                       cbSize;
    DWORD                       dwMsgEncodingType;
    HCRYPTPROV                  hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
    void                        *pvEncryptionAuxInfo;
    DWORD                       dwFlags;
    DWORD                       dwInnerContentType;
} CRYPT_ENCRYPT_MESSAGE_PARA, *PCRYPT_ENCRYPT_MESSAGE_PARA;

























typedef struct _CRYPT_DECRYPT_MESSAGE_PARA {
    DWORD                   cbSize;
    DWORD                   dwMsgAndCertEncodingType;
    DWORD                   cCertStore;
    HCERTSTORE              *rghCertStore;









} CRYPT_DECRYPT_MESSAGE_PARA, *PCRYPT_DECRYPT_MESSAGE_PARA;












typedef struct _CRYPT_HASH_MESSAGE_PARA {
    DWORD                       cbSize;
    DWORD                       dwMsgEncodingType;
    HCRYPTPROV                  hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    void                        *pvHashAuxInfo;
} CRYPT_HASH_MESSAGE_PARA, *PCRYPT_HASH_MESSAGE_PARA;













typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA {
    DWORD                       cbSize;
    DWORD                       dwMsgAndCertEncodingType;
    HCRYPTPROV                  hCryptProv;
    DWORD                       dwKeySpec;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    void                        *pvHashAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER  PubKeyAlgorithm;
} CRYPT_KEY_SIGN_MESSAGE_PARA, *PCRYPT_KEY_SIGN_MESSAGE_PARA;












typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {
    DWORD                   cbSize;
    DWORD                   dwMsgEncodingType;
    HCRYPTPROV              hCryptProv;
} CRYPT_KEY_VERIFY_MESSAGE_PARA, *PCRYPT_KEY_VERIFY_MESSAGE_PARA;








__declspec(dllimport)
BOOL
__stdcall
CryptSignMessage(
     PCRYPT_SIGN_MESSAGE_PARA pSignPara,
     BOOL fDetachedSignature,
     DWORD cToBeSigned,
     const BYTE *rgpbToBeSigned[],
     DWORD rgcbToBeSigned[],
     BYTE *pbSignedBlob,
      DWORD *pcbSignedBlob
    );





































__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageSignature(
     PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
     DWORD dwSignerIndex,
     const BYTE *pbSignedBlob,
     DWORD cbSignedBlob,
     BYTE  *pbDecoded,
       DWORD *pcbDecoded,
      PCCERT_CONTEXT *ppSignerCert
    );





__declspec(dllimport)
LONG
__stdcall
CryptGetMessageSignerCount(
     DWORD dwMsgEncodingType,
     const BYTE *pbSignedBlob,
     DWORD cbSignedBlob
    );





__declspec(dllimport)
HCERTSTORE
__stdcall
CryptGetMessageCertificates(
     DWORD dwMsgAndCertEncodingType,
     HCRYPTPROV hCryptProv,           
     DWORD dwFlags,                   
     const BYTE *pbSignedBlob,
     DWORD cbSignedBlob
    );






__declspec(dllimport)
BOOL
__stdcall
CryptVerifyDetachedMessageSignature(
     PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
     DWORD dwSignerIndex,
     const BYTE *pbDetachedSignBlob,
     DWORD cbDetachedSignBlob,
     DWORD cToBeSigned,
     const BYTE *rgpbToBeSigned[],
     DWORD rgcbToBeSigned[],
      PCCERT_CONTEXT *ppSignerCert
    );




__declspec(dllimport)
BOOL
__stdcall
CryptEncryptMessage(
     PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
     DWORD cRecipientCert,
     PCCERT_CONTEXT rgpRecipientCert[],
     const BYTE *pbToBeEncrypted,
     DWORD cbToBeEncrypted,
     BYTE *pbEncryptedBlob,
      DWORD *pcbEncryptedBlob
    );















__declspec(dllimport)
BOOL
__stdcall
CryptDecryptMessage(
     PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
     const BYTE *pbEncryptedBlob,
     DWORD cbEncryptedBlob,
      BYTE *pbDecrypted,
       DWORD *pcbDecrypted,
      PCCERT_CONTEXT *ppXchgCert
    );








__declspec(dllimport)
BOOL
__stdcall
CryptSignAndEncryptMessage(
     PCRYPT_SIGN_MESSAGE_PARA pSignPara,
     PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
     DWORD cRecipientCert,
     PCCERT_CONTEXT rgpRecipientCert[],
     const BYTE *pbToBeSignedAndEncrypted,
     DWORD cbToBeSignedAndEncrypted,
     BYTE *pbSignedAndEncryptedBlob,
      DWORD *pcbSignedAndEncryptedBlob
    );




























__declspec(dllimport)
BOOL
__stdcall
CryptDecryptAndVerifyMessageSignature(
     PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
     PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
     DWORD dwSignerIndex,
     const BYTE *pbEncryptedBlob,
     DWORD cbEncryptedBlob,
      BYTE *pbDecrypted,
       DWORD *pcbDecrypted,
      PCCERT_CONTEXT *ppXchgCert,
      PCCERT_CONTEXT *ppSignerCert
    );

































__declspec(dllimport)
BOOL
__stdcall
CryptDecodeMessage(
     DWORD dwMsgTypeFlags,
     PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
     PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
     DWORD dwSignerIndex,
     const BYTE *pbEncodedBlob,
     DWORD cbEncodedBlob,
     DWORD dwPrevInnerContentType,
      DWORD *pdwMsgType,
      DWORD *pdwInnerContentType,
      BYTE *pbDecoded,
       DWORD *pcbDecoded,
      PCCERT_CONTEXT *ppXchgCert,
      PCCERT_CONTEXT *ppSignerCert
    );











__declspec(dllimport)
BOOL
__stdcall
CryptHashMessage(
     PCRYPT_HASH_MESSAGE_PARA pHashPara,
     BOOL fDetachedHash,
     DWORD cToBeHashed,
     const BYTE *rgpbToBeHashed[],
     DWORD rgcbToBeHashed[],
      BYTE *pbHashedBlob,
       DWORD *pcbHashedBlob,
      BYTE *pbComputedHash,
       DWORD *pcbComputedHash
    );







__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageHash(
     PCRYPT_HASH_MESSAGE_PARA pHashPara,
     BYTE *pbHashedBlob,
     DWORD cbHashedBlob,
      BYTE *pbToBeHashed,
       DWORD *pcbToBeHashed,
      BYTE *pbComputedHash,
       DWORD *pcbComputedHash
    );









__declspec(dllimport)
BOOL
__stdcall
CryptVerifyDetachedMessageHash(
     PCRYPT_HASH_MESSAGE_PARA pHashPara,
     BYTE *pbDetachedHashBlob,
     DWORD cbDetachedHashBlob,
     DWORD cToBeHashed,
     const BYTE *rgpbToBeHashed[],
     DWORD rgcbToBeHashed[],
      BYTE *pbComputedHash,
       DWORD *pcbComputedHash
    );







__declspec(dllimport)
BOOL
__stdcall
CryptSignMessageWithKey(
     PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara,
     const BYTE *pbToBeSigned,
     DWORD cbToBeSigned,
     BYTE *pbSignedBlob,
      DWORD *pcbSignedBlob
    );














__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageSignatureWithKey(
     PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara,
      PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
     const BYTE *pbSignedBlob,
     DWORD cbSignedBlob,
      BYTE *pbDecoded,
       DWORD *pcbDecoded
    );




























__declspec(dllimport)
HCERTSTORE
__stdcall
CertOpenSystemStoreA(
    HCRYPTPROV      hProv,
    LPCSTR            szSubsystemProtocol
    );
__declspec(dllimport)
HCERTSTORE
__stdcall
CertOpenSystemStoreW(
    HCRYPTPROV      hProv,
    LPCWSTR            szSubsystemProtocol
    );




#line 13524 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CertAddEncodedCertificateToSystemStoreA(
    LPCSTR            szCertStoreName,
    const BYTE *    pbCertEncoded,
    DWORD           cbCertEncoded
    );
__declspec(dllimport)
BOOL
__stdcall
CertAddEncodedCertificateToSystemStoreW(
    LPCWSTR            szCertStoreName,
    const BYTE *    pbCertEncoded,
    DWORD           cbCertEncoded
    );




#line 13546 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"













typedef struct _CERT_CHAIN {
    DWORD                   cCerts;     
    PCERT_BLOB              certs;      
                                        
    CRYPT_KEY_PROV_INFO     keyLocatorInfo; 
} CERT_CHAIN, *PCERT_CHAIN;



HRESULT
__stdcall
FindCertsByIssuer(
     PCERT_CHAIN pCertChains,
      DWORD *pcbCertChains,
     DWORD *pcCertChains,        
     BYTE* pbEncodedIssuerName,   
     DWORD cbEncodedIssuerName,   
     LPCWSTR pwszPurpose,         
     DWORD dwKeySpec              
    
    );

































































































































__declspec(dllimport)
BOOL
__stdcall
CryptQueryObject(
    DWORD            dwObjectType,
    const void       *pvObject,
    DWORD            dwExpectedContentTypeFlags,
    DWORD            dwExpectedFormatTypeFlags,
    DWORD            dwFlags,
    DWORD            *pdwMsgAndCertEncodingType,
    DWORD            *pdwContentType,
    DWORD            *pdwFormatType,
    HCERTSTORE       *phCertStore,
    HCRYPTMSG        *phMsg,
    const void       **ppvContext
    );
























































































































































__declspec(dllimport)
LPVOID
__stdcall
CryptMemAlloc (
     ULONG cbSize
    );

__declspec(dllimport)
LPVOID
__stdcall
CryptMemRealloc (
     LPVOID pv,
     ULONG cbSize
    );

__declspec(dllimport)
void
__stdcall
CryptMemFree (
     LPVOID pv
    );








typedef HANDLE HCRYPTASYNC, *PHCRYPTASYNC;

typedef void (__stdcall *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) (
    LPSTR pszParamOid,
    LPVOID pvParam
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCreateAsyncHandle (
     DWORD dwFlags,
     PHCRYPTASYNC phAsync
    );

__declspec(dllimport)
BOOL
__stdcall
CryptSetAsyncParam (
     HCRYPTASYNC hAsync,
     LPSTR pszParamOid,
     LPVOID pvParam,
      PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetAsyncParam (
     HCRYPTASYNC hAsync,
     LPSTR pszParamOid,
     LPVOID* ppvParam,
      PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* ppfnFree
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCloseAsyncHandle (
     HCRYPTASYNC hAsync
    );















typedef struct _CRYPT_BLOB_ARRAY {
    DWORD            cBlob;
    PCRYPT_DATA_BLOB rgBlob;
} CRYPT_BLOB_ARRAY, *PCRYPT_BLOB_ARRAY;

typedef struct _CRYPT_CREDENTIALS {
    DWORD  cbSize;
    LPCSTR pszCredentialsOid;
    LPVOID pvCredentials;
} CRYPT_CREDENTIALS, *PCRYPT_CREDENTIALS;








#line 13981 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

typedef struct _CRYPT_PASSWORD_CREDENTIALSA {
    DWORD   cbSize;
    LPSTR   pszUsername;
    LPSTR   pszPassword;
} CRYPT_PASSWORD_CREDENTIALSA, *PCRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW {
    DWORD   cbSize;
    LPWSTR  pszUsername;
    LPWSTR  pszPassword;
} CRYPT_PASSWORD_CREDENTIALSW, *PCRYPT_PASSWORD_CREDENTIALSW;




typedef CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS;
typedef PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS;
#line 13999 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"












typedef void (__stdcall *PFN_FREE_ENCODED_OBJECT_FUNC) (
    LPCSTR pszObjectOid,
    PCRYPT_BLOB_ARRAY pObject,
    LPVOID pvFreeContext
    );


























































































































typedef struct _CRYPT_RETRIEVE_AUX_INFO {
    DWORD       cbSize;
    FILETIME    *pLastSyncTime;
    DWORD       dwMaxUrlRetrievalByteCount;     
} CRYPT_RETRIEVE_AUX_INFO, *PCRYPT_RETRIEVE_AUX_INFO;


__declspec(dllimport)
BOOL
__stdcall
CryptRetrieveObjectByUrlA (
     LPCSTR pszUrl,
     LPCSTR pszObjectOid,
     DWORD dwRetrievalFlags,
     DWORD dwTimeout,                     
     LPVOID* ppvObject,
     HCRYPTASYNC hAsyncRetrieve,
      PCRYPT_CREDENTIALS pCredentials,
      LPVOID pvVerify,
      PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
    );
__declspec(dllimport)
BOOL
__stdcall
CryptRetrieveObjectByUrlW (
     LPCWSTR pszUrl,
     LPCSTR pszObjectOid,
     DWORD dwRetrievalFlags,
     DWORD dwTimeout,                     
     LPVOID* ppvObject,
     HCRYPTASYNC hAsyncRetrieve,
      PCRYPT_CREDENTIALS pCredentials,
      LPVOID pvVerify,
      PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
    );




#line 14178 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"













typedef BOOL (__stdcall *PFN_CRYPT_CANCEL_RETRIEVAL)(
     DWORD dwFlags,
     void  *pvArg
    );









__declspec(dllimport)
BOOL
__stdcall
CryptInstallCancelRetrieval(
     PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel,
     const void *pvArg,
     DWORD dwFlags,
     void *pvReserved
);


__declspec(dllimport)
BOOL
__stdcall
CryptUninstallCancelRetrieval(
         DWORD dwFlags,
         void  *pvReserved
        );


__declspec(dllimport)
BOOL
__stdcall
CryptCancelAsyncRetrieval (
    HCRYPTASYNC hAsyncRetrieval
    );












typedef void (__stdcall *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC) (
     LPVOID pvCompletion,
     DWORD dwCompletionCode,
     LPCSTR pszUrl,
     LPSTR pszObjectOid,
     LPVOID pvObject
    );

typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {
    PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
    LPVOID pvCompletion;
} CRYPT_ASYNC_RETRIEVAL_COMPLETION, *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;








typedef BOOL (__stdcall *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC) (
    HCRYPTASYNC hAsyncRetrieve
    );










typedef struct _CRYPT_URL_ARRAY {
    DWORD   cUrl;
    LPWSTR* rgwszUrl;
} CRYPT_URL_ARRAY, *PCRYPT_URL_ARRAY;

typedef struct _CRYPT_URL_INFO {
    DWORD   cbSize;

    
    DWORD   dwSyncDeltaTime;

    
    
    
    DWORD   cGroup;
    DWORD   *rgcGroupEntry;
} CRYPT_URL_INFO, *PCRYPT_URL_INFO;

__declspec(dllimport)
BOOL
__stdcall
CryptGetObjectUrl (
     LPCSTR pszUrlOid,
     LPVOID pvPara,
     DWORD dwFlags,
      PCRYPT_URL_ARRAY pUrlArray,
      DWORD* pcbUrlArray,
      PCRYPT_URL_INFO pUrlInfo,
       DWORD* pcbUrlInfo,
      LPVOID pvReserved
    );



















































































typedef struct _CERT_CRL_CONTEXT_PAIR {
    PCCERT_CONTEXT          pCertContext;
    PCCRL_CONTEXT           pCrlContext;
} CERT_CRL_CONTEXT_PAIR, *PCERT_CRL_CONTEXT_PAIR;
typedef const CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;





__declspec(dllimport)
BOOL
__stdcall
CryptGetTimeValidObject (
     LPCSTR pszTimeValidOid,
     LPVOID pvPara,
     PCCERT_CONTEXT pIssuer,
      LPFILETIME pftValidFor,
     DWORD dwFlags,
     DWORD dwTimeout,                         
      LPVOID* ppvObject,
      PCRYPT_CREDENTIALS pCredentials,
      LPVOID pvReserved
    );




































__declspec(dllimport)
BOOL
__stdcall
CryptFlushTimeValidObject (
      LPCSTR pszFlushTimeValidOid,
      LPVOID pvPara,
      PCCERT_CONTEXT pIssuer,
      DWORD dwFlags,
      LPVOID pvReserved
     );






















































typedef struct  _CRYPTPROTECT_PROMPTSTRUCT
{
    DWORD cbSize;
    DWORD dwPromptFlags;
    HWND  hwndApp;
    LPCWSTR szPrompt;
} CRYPTPROTECT_PROMPTSTRUCT, *PCRYPTPROTECT_PROMPTSTRUCT;










































































__declspec(dllimport)
BOOL
__stdcall
CryptProtectData(
                  DATA_BLOB*      pDataIn,
                  LPCWSTR         szDataDescr,
          DATA_BLOB*      pOptionalEntropy,
                  PVOID           pvReserved,
          CRYPTPROTECT_PROMPTSTRUCT*  pPromptStruct,
                  DWORD           dwFlags,
                 DATA_BLOB*      pDataOut            
    );

__declspec(dllimport)
BOOL
__stdcall
CryptUnprotectData(
                  DATA_BLOB*      pDataIn,             
         LPWSTR*         ppszDataDescr,       
          DATA_BLOB*      pOptionalEntropy,
                  PVOID           pvReserved,
          CRYPTPROTECT_PROMPTSTRUCT*  pPromptStruct,
                  DWORD           dwFlags,
                 DATA_BLOB*      pDataOut
    );



































__declspec(dllimport)
BOOL
__stdcall
CryptProtectMemory(
               LPVOID          pDataIn,             
                  DWORD           cbDataIn,            
                  DWORD           dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptUnprotectMemory(
               LPVOID          pDataIn,             
                  DWORD           cbDataIn,            
                  DWORD           dwFlags
    );




































__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertCreateSelfSignCertificate(
              HCRYPTPROV                  hProv,
              PCERT_NAME_BLOB             pSubjectIssuerBlob,
              DWORD                       dwFlags,
        PCRYPT_KEY_PROV_INFO        pKeyProvInfo,
        PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
        PSYSTEMTIME                 pStartTime,
        PSYSTEMTIME                 pEndTime,
        PCERT_EXTENSIONS            pExtensions
    );

































__declspec(dllimport)
BOOL
__stdcall
CryptGetKeyIdentifierProperty(
     const CRYPT_HASH_BLOB *pKeyIdentifier,
     DWORD dwPropId,
     DWORD dwFlags,
      LPCWSTR pwszComputerName,
      void *pvReserved,
     void *pvData,
      DWORD *pcbData
    );





























__declspec(dllimport)
BOOL
__stdcall
CryptSetKeyIdentifierProperty(
     const CRYPT_HASH_BLOB *pKeyIdentifier,
     DWORD dwPropId,
     DWORD dwFlags,
      LPCWSTR pwszComputerName,
      void *pvReserved,
     const void *pvData
    );
















typedef BOOL (__stdcall *PFN_CRYPT_ENUM_KEYID_PROP)(
     const CRYPT_HASH_BLOB *pKeyIdentifier,
     DWORD dwFlags,
     void *pvReserved,
     void *pvArg,
     DWORD cProp,
     DWORD *rgdwPropId,
     void **rgpvData,
     DWORD *rgcbData
    );















__declspec(dllimport)
BOOL
__stdcall
CryptEnumKeyIdentifierProperties(
      const CRYPT_HASH_BLOB *pKeyIdentifier,
     DWORD dwPropId,
     DWORD dwFlags,
      LPCWSTR pwszComputerName,
      void *pvReserved,
      void *pvArg,
     PFN_CRYPT_ENUM_KEYID_PROP pfnEnum
    );












__declspec(dllimport)
BOOL
__stdcall
CryptCreateKeyIdentifierFromCSP(
     DWORD dwCertEncodingType,
      LPCSTR pszPubKeyOID,
     const PUBLICKEYSTRUC *pPubKeyStruc,
     DWORD cbPubKeyStruc,
     DWORD dwFlags,
      void *pvReserved,
     BYTE *pbHash,
      DWORD *pcbHash
    );













































typedef HANDLE HCERTCHAINENGINE;






















































typedef struct _CERT_CHAIN_ENGINE_CONFIG {

    DWORD       cbSize;
    HCERTSTORE  hRestrictedRoot;
    HCERTSTORE  hRestrictedTrust;
    HCERTSTORE  hRestrictedOther;
    DWORD       cAdditionalStore;
    HCERTSTORE* rghAdditionalStore;
    DWORD       dwFlags;
    DWORD       dwUrlRetrievalTimeout;      
    DWORD       MaximumCachedCertificates;
    DWORD       CycleDetectionModulus;

} CERT_CHAIN_ENGINE_CONFIG, *PCERT_CHAIN_ENGINE_CONFIG;

__declspec(dllimport)
BOOL
__stdcall
CertCreateCertificateChainEngine (
     PCERT_CHAIN_ENGINE_CONFIG pConfig,
     HCERTCHAINENGINE* phChainEngine
    );





__declspec(dllimport)
void
__stdcall
CertFreeCertificateChainEngine (
     HCERTCHAINENGINE hChainEngine
    );






__declspec(dllimport)
BOOL
__stdcall
CertResyncCertificateChainEngine (
     HCERTCHAINENGINE hChainEngine
    );















typedef struct _CERT_TRUST_STATUS {

    DWORD dwErrorStatus;
    DWORD dwInfoStatus;

} CERT_TRUST_STATUS, *PCERT_TRUST_STATUS;














































































typedef struct _CERT_REVOCATION_INFO {

    DWORD                       cbSize;
    DWORD                       dwRevocationResult;
    LPCSTR                      pszRevocationOid;
    LPVOID                      pvOidSpecificInfo;

    
    
    BOOL                        fHasFreshnessTime;
    DWORD                       dwFreshnessTime;    

    
    PCERT_REVOCATION_CRL_INFO   pCrlInfo;

} CERT_REVOCATION_INFO, *PCERT_REVOCATION_INFO;





typedef struct _CERT_TRUST_LIST_INFO {

    DWORD         cbSize;
    PCTL_ENTRY    pCtlEntry;
    PCCTL_CONTEXT pCtlContext;

} CERT_TRUST_LIST_INFO, *PCERT_TRUST_LIST_INFO;





typedef struct _CERT_CHAIN_ELEMENT {

    DWORD                 cbSize;
    PCCERT_CONTEXT        pCertContext;
    CERT_TRUST_STATUS     TrustStatus;
    PCERT_REVOCATION_INFO pRevocationInfo;

    PCERT_ENHKEY_USAGE    pIssuanceUsage;       
    PCERT_ENHKEY_USAGE    pApplicationUsage;    

    LPCWSTR               pwszExtendedErrorInfo;    

} CERT_CHAIN_ELEMENT, *PCERT_CHAIN_ELEMENT;










typedef struct _CERT_SIMPLE_CHAIN {

    DWORD                 cbSize;
    CERT_TRUST_STATUS     TrustStatus;
    DWORD                 cElement;
    PCERT_CHAIN_ELEMENT*  rgpElement;
    PCERT_TRUST_LIST_INFO pTrustListInfo;

    
    
    
    
    
    
    BOOL                   fHasRevocationFreshnessTime;
    DWORD                  dwRevocationFreshnessTime;    

} CERT_SIMPLE_CHAIN, *PCERT_SIMPLE_CHAIN;











typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT, *PCERT_CHAIN_CONTEXT;
typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;

struct _CERT_CHAIN_CONTEXT {
    DWORD                   cbSize;
    CERT_TRUST_STATUS       TrustStatus;
    DWORD                   cChain;
    PCERT_SIMPLE_CHAIN*     rgpChain;

    
    
    DWORD                   cLowerQualityChainContext;
    PCCERT_CHAIN_CONTEXT*   rgpLowerQualityChainContext;

    
    
    
    
    
    
    BOOL                    fHasRevocationFreshnessTime;
    DWORD                   dwRevocationFreshnessTime;    
};












typedef struct _CERT_USAGE_MATCH {

    DWORD             dwType;
    CERT_ENHKEY_USAGE Usage;

} CERT_USAGE_MATCH, *PCERT_USAGE_MATCH;

typedef struct _CTL_USAGE_MATCH {

    DWORD     dwType;
    CTL_USAGE Usage;

} CTL_USAGE_MATCH, *PCTL_USAGE_MATCH;

typedef struct _CERT_CHAIN_PARA {

    DWORD            cbSize;
    CERT_USAGE_MATCH RequestedUsage;














} CERT_CHAIN_PARA, *PCERT_CHAIN_PARA;

































































__declspec(dllimport)
BOOL
__stdcall
CertGetCertificateChain (
      HCERTCHAINENGINE hChainEngine,
     PCCERT_CONTEXT pCertContext,
      LPFILETIME pTime,
      HCERTSTORE hAdditionalStore,
     PCERT_CHAIN_PARA pChainPara,
     DWORD dwFlags,
     LPVOID pvReserved,
     PCCERT_CHAIN_CONTEXT* ppChainContext
    );





__declspec(dllimport)
void
__stdcall
CertFreeCertificateChain (
     PCCERT_CHAIN_CONTEXT pChainContext
    );





__declspec(dllimport)
PCCERT_CHAIN_CONTEXT
__stdcall
CertDuplicateCertificateChain (
     PCCERT_CHAIN_CONTEXT pChainContext
    );



















typedef struct _CRL_REVOCATION_INFO {

    PCRL_ENTRY           pCrlEntry;
    PCCRL_CONTEXT        pCrlContext;
    PCCERT_CHAIN_CONTEXT pCrlIssuerChain;

} CRL_REVOCATION_INFO, *PCRL_REVOCATION_INFO;






















__declspec(dllimport)
PCCERT_CHAIN_CONTEXT
__stdcall
CertFindChainInStore(
     HCERTSTORE hCertStore,
     DWORD dwCertEncodingType,
     DWORD dwFindFlags,
     DWORD dwFindType,
     const void *pvFindPara,
     PCCERT_CHAIN_CONTEXT pPrevChainContext
    );
















































typedef BOOL (__stdcall *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(
     PCCERT_CONTEXT pCert,
     void *pvFindArg
    );

typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {
    DWORD                                   cbSize;

    
    LPCSTR                                  pszUsageIdentifier;

    
    DWORD                                   dwKeySpec;

    
    
    
    
    
    DWORD                                   dwAcquirePrivateKeyFlags;

    
    
    DWORD                                   cIssuer;
    CERT_NAME_BLOB                          *rgIssuer;

    
    
    
    PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
    void                                    *pvFindArg;





















} CERT_CHAIN_FIND_ISSUER_PARA, *PCERT_CHAIN_FIND_ISSUER_PARA,
    CERT_CHAIN_FIND_BY_ISSUER_PARA, *PCERT_CHAIN_FIND_BY_ISSUER_PARA;






































typedef struct _CERT_CHAIN_POLICY_PARA {
    DWORD                   cbSize;
    DWORD                   dwFlags;
    void                    *pvExtraPolicyPara;     
} CERT_CHAIN_POLICY_PARA, *PCERT_CHAIN_POLICY_PARA;






typedef struct _CERT_CHAIN_POLICY_STATUS {
    DWORD                   cbSize;
    DWORD                   dwError;
    LONG                    lChainIndex;
    LONG                    lElementIndex;
    void                    *pvExtraPolicyStatus;   
} CERT_CHAIN_POLICY_STATUS, *PCERT_CHAIN_POLICY_STATUS;

























































__declspec(dllimport)
BOOL
__stdcall
CertVerifyCertificateChainPolicy(
     LPCSTR pszPolicyOID,
     PCCERT_CHAIN_CONTEXT pChainContext,
     PCERT_CHAIN_POLICY_PARA pPolicyPara,
      PCERT_CHAIN_POLICY_STATUS pPolicyStatus
    );







































typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD               cbSize;
    DWORD               dwRegPolicySettings;
    PCMSG_SIGNER_INFO   pSignerInfo;                
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;

typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD               cbSize;
    BOOL                fCommercial;        
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;













typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD               cbSize;
    DWORD               dwRegPolicySettings;
    BOOL                fCommercial;
} AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;












typedef struct _HTTPSPolicyCallbackData
{
    union {
        DWORD           cbStruct;       
        DWORD           cbSize;         
    };

    DWORD           dwAuthType;



    DWORD           fdwChecks;

    WCHAR           *pwszServerName; 

} HTTPSPolicyCallbackData, *PHTTPSPolicyCallbackData,
    SSL_EXTRA_CERT_CHAIN_POLICY_PARA, *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;
























































































__declspec(dllimport)
BOOL
__stdcall
CryptStringToBinaryA(
         LPCSTR  pszString,
         DWORD     cchString,
         DWORD     dwFlags,
         BYTE     *pbBinary,
      DWORD    *pcbBinary,
        DWORD    *pdwSkip,    
        DWORD    *pdwFlags    
    );









__declspec(dllimport)
BOOL
__stdcall
CryptStringToBinaryW(
         LPCWSTR  pszString,
         DWORD     cchString,
         DWORD     dwFlags,
         BYTE     *pbBinary,
      DWORD    *pcbBinary,
        DWORD    *pdwSkip,    
        DWORD    *pdwFlags    
    );




#line 15888 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"







__declspec(dllimport)
BOOL
__stdcall
CryptBinaryToStringA(
         const BYTE  *pbBinary,
         DWORD        cbBinary,
         DWORD        dwFlags,
         LPSTR      pszString,
      DWORD       *pcchString
    );






__declspec(dllimport)
BOOL
__stdcall
CryptBinaryToStringW(
         const BYTE  *pbBinary,
         DWORD        cbBinary,
         DWORD        dwFlags,
         LPWSTR      pszString,
      DWORD       *pcchString
    );




#line 15926 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"









































































__declspec(dllimport)
HCERTSTORE
__stdcall
PFXImportCertStore(
     CRYPT_DATA_BLOB* pPFX,
     LPCWSTR szPassword,
     DWORD   dwFlags);


















__declspec(dllimport)
BOOL
__stdcall
PFXIsPFXBlob(
     CRYPT_DATA_BLOB* pPFX);













__declspec(dllimport)
BOOL 
__stdcall
PFXVerifyPassword(
     CRYPT_DATA_BLOB* pPFX,
     LPCWSTR szPassword,
     DWORD dwFlags);


























__declspec(dllimport)
BOOL
__stdcall
PFXExportCertStoreEx(
     HCERTSTORE hStore,
      CRYPT_DATA_BLOB* pPFX,
     LPCWSTR szPassword,
     void*   pvReserved,
     DWORD   dwFlags);

















__declspec(dllimport)
BOOL
__stdcall
PFXExportCertStore(
     HCERTSTORE hStore,
      CRYPT_DATA_BLOB* pPFX,
     LPCWSTR szPassword,
     DWORD   dwFlags);












#pragma warning(pop)


#line 16125 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

#line 16127 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"
#line 16128 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"

#line 16130 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wincrypt.h"


#line 197 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winefs.h"















#pragma once
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winefs.h"

























typedef struct _CERTIFICATE_BLOB {

    DWORD   dwCertEncodingType;





    DWORD   cbData;




    PBYTE    pbData;

} EFS_CERTIFICATE_BLOB, *PEFS_CERTIFICATE_BLOB;






typedef struct _EFS_HASH_BLOB {




    DWORD   cbData;




    PBYTE    pbData;

} EFS_HASH_BLOB, *PEFS_HASH_BLOB;






typedef struct _EFS_RPC_BLOB {




    DWORD   cbData;




    PBYTE    pbData;

} EFS_RPC_BLOB, *PEFS_RPC_BLOB;

typedef struct _EFS_KEY_INFO {

    DWORD   dwVersion;
    ULONG   Entropy;
    ALG_ID  Algorithm;
    ULONG   KeyLength;
    
} EFS_KEY_INFO, *PEFS_KEY_INFO;







typedef struct _ENCRYPTION_CERTIFICATE {
    DWORD cbTotalLength;
    SID * pUserSid;
    PEFS_CERTIFICATE_BLOB pCertBlob;
} ENCRYPTION_CERTIFICATE, *PENCRYPTION_CERTIFICATE;




typedef struct _ENCRYPTION_CERTIFICATE_HASH {
    DWORD cbTotalLength;
    SID * pUserSid;
    PEFS_HASH_BLOB  pHash;




    LPWSTR lpDisplayInformation;

} ENCRYPTION_CERTIFICATE_HASH, *PENCRYPTION_CERTIFICATE_HASH;







typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST {



    DWORD nCert_Hash;



     PENCRYPTION_CERTIFICATE_HASH * pUsers;
} ENCRYPTION_CERTIFICATE_HASH_LIST, *PENCRYPTION_CERTIFICATE_HASH_LIST;



typedef struct _ENCRYPTION_CERTIFICATE_LIST {    



    DWORD nUsers;



     PENCRYPTION_CERTIFICATE * pUsers;
} ENCRYPTION_CERTIFICATE_LIST, *PENCRYPTION_CERTIFICATE_LIST;













__declspec(dllimport)
DWORD
__stdcall
QueryUsersOnEncryptedFile(
          LPCWSTR lpFileName,
          PENCRYPTION_CERTIFICATE_HASH_LIST * pUsers
    );


__declspec(dllimport)
DWORD
__stdcall
QueryRecoveryAgentsOnEncryptedFile(
          LPCWSTR lpFileName,
          PENCRYPTION_CERTIFICATE_HASH_LIST * pRecoveryAgents
    );


__declspec(dllimport)
DWORD
__stdcall
RemoveUsersFromEncryptedFile(
          LPCWSTR lpFileName,
          PENCRYPTION_CERTIFICATE_HASH_LIST pHashes
    );

__declspec(dllimport)
DWORD
__stdcall
AddUsersToEncryptedFile(
          LPCWSTR lpFileName,
          PENCRYPTION_CERTIFICATE_LIST pUsers
    );

__declspec(dllimport)
DWORD
__stdcall
SetUserFileEncryptionKey(
           PENCRYPTION_CERTIFICATE pEncryptionCertificate
    );


__declspec(dllimport)
void
__stdcall
FreeEncryptionCertificateHashList(
           PENCRYPTION_CERTIFICATE_HASH_LIST pHashes
    );

__declspec(dllimport)
BOOL
__stdcall
EncryptionDisable(
         LPCWSTR DirPath,
         BOOL Disable
    );


__declspec(dllimport)
DWORD
__stdcall
DuplicateEncryptionInfoFile(
          LPCWSTR SrcFileName,
          LPCWSTR DstFileName, 
          DWORD dwCreationDistribution, 
          DWORD dwAttributes, 
          const LPSECURITY_ATTRIBUTES lpSecurityAttributes
     );





#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winefs.h"
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"


























#pragma once
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"





 










#pragma warning( disable: 4049 )  





#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"


#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"




















#line 22 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"






#pragma once
#line 30 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"


    

#line 35 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"
#line 36 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"
#line 39 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsip.h"



















#pragma once
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsip.h"





typedef struct
{
   RPC_NS_HANDLE        LookupContext;
   RPC_BINDING_HANDLE   ProposedHandle;
   RPC_BINDING_VECTOR * Bindings;

} RPC_IMPORT_CONTEXT_P, * PRPC_IMPORT_CONTEXT_P;




__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsGetBuffer(
     PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsSendReceive(
     PRPC_MESSAGE Message,
     RPC_BINDING_HANDLE  * Handle
    );

__declspec(dllimport)
void
__stdcall
I_RpcNsRaiseException(
     PRPC_MESSAGE Message,
     RPC_STATUS Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReBindBuffer(
     PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsServerBindSearch(
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsClientBindSearch(
    );

__declspec(dllimport)
void
__stdcall
I_NsClientBindDone(
    );





#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\rpcnsip.h"
#line 41 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"

































































#line 107 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"


#line 110 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"








#line 119 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"

#line 121 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"



#line 125 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"

#line 127 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"



#line 131 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"

#line 133 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"





#line 139 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"






typedef unsigned char byte;
typedef byte cs_byte;
typedef unsigned char boolean;










#line 159 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"

#line 161 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"




















#line 182 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"
#line 183 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"







void  * __stdcall MIDL_user_allocate(size_t);
void             __stdcall MIDL_user_free( void  * );











#line 204 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"











typedef void  * NDR_CCONTEXT;

typedef struct
    {
    void  * pad[2];
    void  * userContext;
    }  * NDR_SCONTEXT;





typedef void (__stdcall  * NDR_RUNDOWN)(void  * context);

typedef void (__stdcall  * NDR_NOTIFY_ROUTINE)(void);
typedef void (__stdcall  * NDR_NOTIFY2_ROUTINE)(boolean flag);

typedef struct _SCONTEXT_QUEUE {
    unsigned long   NumberOfObjects;
    NDR_SCONTEXT  * ArrayOfObjects;
    } SCONTEXT_QUEUE,  * PSCONTEXT_QUEUE;

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
NDRCContextBinding (
     NDR_CCONTEXT     CContext
    );

__declspec(dllimport)
void
__stdcall
NDRCContextMarshall (
      NDR_CCONTEXT    CContext,
     void  *pBuff
    );

__declspec(dllimport)
void
__stdcall
NDRCContextUnmarshall (
     NDR_CCONTEXT        *   pCContext,
      RPC_BINDING_HANDLE      hBinding,
      void                *   pBuff,
      unsigned long           DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall (
      NDR_SCONTEXT    CContext,
     void          * pBuff,
      NDR_RUNDOWN     userRunDownIn
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall (
      void          * pBuff,
      unsigned long   DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshallEx (
      RPC_BINDING_HANDLE  BindingHandle,
      NDR_SCONTEXT        CContext,
     void              * pBuff,
      NDR_RUNDOWN         userRunDownIn
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall2 (
      RPC_BINDING_HANDLE  BindingHandle,
      NDR_SCONTEXT        CContext,
     void              * pBuff,
      NDR_RUNDOWN         userRunDownIn,
      void              * CtxGuard,
     unsigned long        Flags
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshallEx (
      RPC_BINDING_HANDLE  BindingHandle,
      void              * pBuff,
      unsigned long       DataRepresentation
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall2(
      RPC_BINDING_HANDLE  BindingHandle,
      void              * pBuff,
      unsigned long       DataRepresentation,
      void              * CtxGuard,
     unsigned long        Flags
    );

__declspec(dllimport)
void
__stdcall
RpcSsDestroyClientContext (
     void  *  * ContextHandle
    );
































































#line 392 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"





typedef unsigned long error_status_t;

















































































struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;

typedef unsigned char  *    RPC_BUFPTR;
typedef unsigned long       RPC_LENGTH;


typedef void (__stdcall  * EXPR_EVAL)( struct _MIDL_STUB_MESSAGE  * );

typedef const unsigned char  * PFORMAT_STRING;




typedef struct
    {
    long              Dimension;

    
    unsigned long  *  BufferConformanceMark;
    unsigned long  *  BufferVarianceMark;

    
    unsigned long  *  MaxCountArray;
    unsigned long  *  OffsetArray;
    unsigned long  *  ActualCountArray;
    } ARRAY_INFO,  *PARRAY_INFO;


typedef struct _NDR_ASYNC_MESSAGE *   PNDR_ASYNC_MESSAGE;
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;





typedef struct
    {
    unsigned long   WireCodeset;
    unsigned long   DesiredReceivingCodeset;
    void           *CSArrayInfo;
    } CS_STUB_INFO;





typedef const unsigned char  * PFORMAT_STRING;
typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;
struct _NDR_PROC_CONTEXT;

typedef struct _MIDL_STUB_MESSAGE
    {
    
    PRPC_MESSAGE            RpcMsg;

    
    unsigned char       *   Buffer;

    



    unsigned char       *   BufferStart;
    unsigned char       *   BufferEnd;

    






    unsigned char       *   BufferMark;

    
    unsigned long           BufferLength;

    
    unsigned long           MemorySize;

    
    unsigned char       *   Memory;

    
    unsigned char           IsClient;
    unsigned char           Pad;
    unsigned short          uFlags2;

    
    int                     ReuseBuffer;

    
    struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
    struct NDR_POINTER_QUEUE_STATE     *pPointerQueueState;

    



    
    int                     IgnoreEmbeddedPointers;

    



    unsigned char       *   PointerBufferMark;

    


    unsigned char           fBufferValid;

    unsigned char           uFlags;
    unsigned short          UniquePtrCount;

    



    ULONG_PTR               MaxCount;

    



    unsigned long           Offset;

    



    unsigned long           ActualCount;

    
    void  *                 ( __stdcall * pfnAllocate)(size_t);
    void                    ( __stdcall * pfnFree)(void  *);

    





    unsigned char       *   StackTop;

    



    unsigned char       *   pPresentedType;
    unsigned char       *   pTransmitType;

    







    handle_t                SavedHandle;

    


    const struct _MIDL_STUB_DESC  * StubDesc;

    


    struct _FULL_PTR_XLAT_TABLES  * FullPtrXlatTables;
    unsigned long                   FullPtrRefId;

    unsigned long                   PointerLength;

    int                             fInDontFree       :1;
    int                             fDontCallFreeInst :1;
    int                             fInOnlyParam      :1;
    int                             fHasReturn        :1;
    int                             fHasExtensions    :1;
    int                             fHasNewCorrDesc   :1;
    int                             fIsOicfServer    :1;
    int                             fHasMemoryValidateCallback: 1;
    int                             fUnused           :8;
    int                             fUnused2          :16;


    unsigned long                   dwDestContext;
    void  *                         pvDestContext;

    NDR_SCONTEXT *                  SavedContextHandles;

    long                            ParamNumber;

    struct IRpcChannelBuffer    *   pRpcChannelBuffer;

    PARRAY_INFO                     pArrayInfo;
    unsigned long           *       SizePtrCountArray;
    unsigned long           *       SizePtrOffsetArray;
    unsigned long           *       SizePtrLengthArray;

    


    void                    *       pArgQueue;

    unsigned long                   dwStubPhase;

    void                    *       LowStackMark;

    


    PNDR_ASYNC_MESSAGE              pAsyncMsg;
    PNDR_CORRELATION_INFO           pCorrInfo;
    unsigned char *                 pCorrMemory;

    void *                          pMemoryList;

    





    



    CS_STUB_INFO *                  pCSInfo;

    unsigned char *                 ConformanceMark;
    unsigned char *                 VarianceMark;



#line 722 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"
    INT_PTR                         Unused;
#line 724 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"

    struct _NDR_PROC_CONTEXT *      pContext;

    




    void *                             pUserMarshalList;
    INT_PTR                         Reserved51_2;
    INT_PTR                         Reserved51_3;
    INT_PTR                         Reserved51_4;
    INT_PTR                         Reserved51_5;


    


    } MIDL_STUB_MESSAGE,  *PMIDL_STUB_MESSAGE;


typedef  struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE,   *PMIDL_STUB_MESSAGE;




typedef void  *
        ( __stdcall * GENERIC_BINDING_ROUTINE)
        (void  *);
typedef void
        ( __stdcall * GENERIC_UNBIND_ROUTINE)
        (void  *, unsigned char  *);

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
    {
    GENERIC_BINDING_ROUTINE     pfnBind;
    GENERIC_UNBIND_ROUTINE      pfnUnbind;
    } GENERIC_BINDING_ROUTINE_PAIR,  *PGENERIC_BINDING_ROUTINE_PAIR;

typedef struct __GENERIC_BINDING_INFO
    {
    void  *            pObj;
    unsigned int                Size;
    GENERIC_BINDING_ROUTINE     pfnBind;
    GENERIC_UNBIND_ROUTINE      pfnUnbind;
    } GENERIC_BINDING_INFO,  *PGENERIC_BINDING_INFO;









#line 780 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"


typedef void ( __stdcall * XMIT_HELPER_ROUTINE)
    ( PMIDL_STUB_MESSAGE );

typedef struct _XMIT_ROUTINE_QUINTUPLE
    {
    XMIT_HELPER_ROUTINE     pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE     pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE     pfnFreeXmit;
    XMIT_HELPER_ROUTINE     pfnFreeInst;
    } XMIT_ROUTINE_QUINTUPLE,  *PXMIT_ROUTINE_QUINTUPLE;

typedef unsigned long
( __stdcall * USER_MARSHAL_SIZING_ROUTINE)
    (unsigned long  *,
     unsigned long,
     void  * );

typedef unsigned char  *
( __stdcall * USER_MARSHAL_MARSHALLING_ROUTINE)
    (unsigned long  *,
     unsigned char  * ,
     void  * );

typedef unsigned char  *
( __stdcall * USER_MARSHAL_UNMARSHALLING_ROUTINE)
    (unsigned long  *,
     unsigned char  *,
     void  * );

typedef void ( __stdcall * USER_MARSHAL_FREEING_ROUTINE)
    (unsigned long  *,
     void  * );

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
    {
    USER_MARSHAL_SIZING_ROUTINE          pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE     pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE   pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE         pfnFree;
    } USER_MARSHAL_ROUTINE_QUADRUPLE;



typedef enum _USER_MARSHAL_CB_TYPE
{
    USER_MARSHAL_CB_BUFFER_SIZE,
    USER_MARSHAL_CB_MARSHALL,
    USER_MARSHAL_CB_UNMARSHALL,
    USER_MARSHAL_CB_FREE
} USER_MARSHAL_CB_TYPE;

typedef struct _USER_MARSHAL_CB
{
    unsigned long           Flags;
    PMIDL_STUB_MESSAGE      pStubMsg;
    PFORMAT_STRING          pReserve;
    unsigned long           Signature;
    USER_MARSHAL_CB_TYPE    CBType;
    PFORMAT_STRING          pFormat;
    PFORMAT_STRING          pTypeFormat;
} USER_MARSHAL_CB;









typedef struct _MALLOC_FREE_STRUCT
    {
    void  *     ( __stdcall * pfnAllocate)(size_t);
    void        ( __stdcall * pfnFree)(void  *);
    } MALLOC_FREE_STRUCT;

typedef struct _COMM_FAULT_OFFSETS
    {
    short       CommOffset;
    short       FaultOffset;
    } COMM_FAULT_OFFSETS;





typedef enum _IDL_CS_CONVERT
    {
    IDL_CS_NO_CONVERT,
    IDL_CS_IN_PLACE_CONVERT,
    IDL_CS_NEW_BUFFER_CONVERT
    } IDL_CS_CONVERT;

typedef void
( __stdcall * CS_TYPE_NET_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     unsigned long          ulLocalBufferSize,
     IDL_CS_CONVERT     *   conversionType,
     unsigned long      *   pulNetworkBufferSize,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TYPE_LOCAL_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     unsigned long          ulNetworkBufferSize,
     IDL_CS_CONVERT     *   conversionType,
     unsigned long      *   pulLocalBufferSize,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TYPE_TO_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     void               *   pLocalData,
     unsigned long          ulLocalDataLength,
     byte               *   pNetworkData,
     unsigned long      *   pulNetworkDataLength,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TYPE_FROM_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     byte               *   pNetworkData,
     unsigned long          ulNetworkDataLength,
     unsigned long          ulLocalBufferSize,
     void               *   pLocalData,
     unsigned long      *   pulLocalDataLength,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TAG_GETTING_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     int                    fServerSide,
     unsigned long      *   pulSendingTag,
     unsigned long      *   pulDesiredReceivingTag,
     unsigned long      *   pulReceivingTag,
     error_status_t     *   pStatus);

void __stdcall
RpcCsGetTags(
     RPC_BINDING_HANDLE     hBinding,
     int                    fServerSide,
     unsigned long      *   pulSendingTag,
     unsigned long      *   pulDesiredReceivingTag,
     unsigned long      *   pulReceivingTag,
     error_status_t     *   pStatus);

typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES
    {
    CS_TYPE_NET_SIZE_ROUTINE    pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE    pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE  pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE  pfnFromNetCs;
    } NDR_CS_SIZE_CONVERT_ROUTINES;

typedef struct _NDR_CS_ROUTINES
    {
    NDR_CS_SIZE_CONVERT_ROUTINES   *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE         *pTagGettingRoutines;
    } NDR_CS_ROUTINES;





typedef struct _MIDL_STUB_DESC
    {
    void  *    RpcInterfaceInformation;

    void  *    ( __stdcall * pfnAllocate)(size_t);
    void       ( __stdcall * pfnFree)(void  *);

    union
        {
        handle_t  *             pAutoHandle;
        handle_t  *             pPrimitiveHandle;
        PGENERIC_BINDING_INFO   pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;

    const NDR_RUNDOWN  *                    apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR  *   aGenericBindingRoutinePairs;
    const EXPR_EVAL  *                      apfnExprEval;
    const XMIT_ROUTINE_QUINTUPLE  *         aXmitQuintuple;

    const unsigned char  *                  pFormatTypes;

    int                                     fCheckBounds;

    
    unsigned long                           Version;

    MALLOC_FREE_STRUCT  *                   pMallocFreeStruct;

    long                                    MIDLVersion;

    const COMM_FAULT_OFFSETS  *    CommFaultOffsets;

    
    const USER_MARSHAL_ROUTINE_QUADRUPLE  * aUserMarshalQuadruple;

    
    const NDR_NOTIFY_ROUTINE  *             NotifyRoutineTable;

    



    ULONG_PTR                               mFlags;

    
    const NDR_CS_ROUTINES *                 CsRoutineTables;

    void *                                  Reserved4;
    ULONG_PTR                               Reserved5;

    

    } MIDL_STUB_DESC;


typedef const MIDL_STUB_DESC  * PMIDL_STUB_DESC;

typedef void  * PMIDL_XMIT_TYPE;






#pragma warning(push)
#line 1016 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"
#pragma warning( disable:4200 )
#line 1018 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"
typedef struct _MIDL_FORMAT_STRING
    {
    short               Pad;
    unsigned char       Format[];
    } MIDL_FORMAT_STRING;


#pragma warning(pop)


#line 1029 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"
#line 1030 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"




typedef void ( __stdcall * STUB_THUNK)( PMIDL_STUB_MESSAGE );

typedef long ( __stdcall * SERVER_ROUTINE)();




typedef struct  _MIDL_SERVER_INFO_
    {
    PMIDL_STUB_DESC                     pStubDesc;
    const SERVER_ROUTINE     *          DispatchTable;
    PFORMAT_STRING                      ProcString;
    const unsigned short *              FmtStringOffset;
    const STUB_THUNK *                  ThunkTable;
    PRPC_SYNTAX_IDENTIFIER              pTransferSyntax;
    ULONG_PTR                           nCount;
    PMIDL_SYNTAX_INFO                   pSyntaxInfo;
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;






typedef struct _MIDL_STUBLESS_PROXY_INFO
    {
    PMIDL_STUB_DESC                     pStubDesc;
    PFORMAT_STRING                      ProcFormatString;
    const unsigned short            *   FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER              pTransferSyntax;
    ULONG_PTR                           nCount;
    PMIDL_SYNTAX_INFO                   pSyntaxInfo;
    } MIDL_STUBLESS_PROXY_INFO;

typedef MIDL_STUBLESS_PROXY_INFO  * PMIDL_STUBLESS_PROXY_INFO;




typedef struct _MIDL_SYNTAX_INFO
{
RPC_SYNTAX_IDENTIFIER               TransferSyntax;
RPC_DISPATCH_TABLE *                DispatchTable;
PFORMAT_STRING                      ProcString;
const unsigned short *              FmtStringOffset;
PFORMAT_STRING                      TypeString;
const void           *              aUserMarshalQuadruple;
ULONG_PTR                           pReserved1;
ULONG_PTR                           pReserved2;
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

typedef unsigned short * PARAM_OFFSETTABLE, *PPARAM_OFFSETTABLE;




typedef union _CLIENT_CALL_RETURN
    {
    void  *         Pointer;
    LONG_PTR        Simple;
    } CLIENT_CALL_RETURN;





typedef enum
        {
        XLAT_SERVER = 1,
        XLAT_CLIENT
        } XLAT_SIDE;





typedef struct _FULL_PTR_TO_REFID_ELEMENT
    {
    struct _FULL_PTR_TO_REFID_ELEMENT  *  Next;

    void  *             Pointer;
    unsigned long       RefId;
    unsigned char       State;
    } FULL_PTR_TO_REFID_ELEMENT,  *PFULL_PTR_TO_REFID_ELEMENT;




typedef struct _FULL_PTR_XLAT_TABLES
    {
    


    struct
        {
        void  * *           XlatTable;
        unsigned char  *    StateTable;
        unsigned long       NumberOfEntries;
        } RefIdToPointer;

    


    struct
        {
        PFULL_PTR_TO_REFID_ELEMENT  *   XlatTable;
        unsigned long                   NumberOfBuckets;
        unsigned long                   HashMask;
        } PointerToRefId;

    


    unsigned long           NextRefId;

    






    XLAT_SIDE               XlatSide;
    } FULL_PTR_XLAT_TABLES,  *PFULL_PTR_XLAT_TABLES;





RPC_STATUS __stdcall
NdrClientGetSupportedSyntaxes(
     RPC_CLIENT_INTERFACE * pInf,
     unsigned long       * pCount,
     MIDL_SYNTAX_INFO   ** pArr );


RPC_STATUS __stdcall
NdrServerGetSupportedSyntaxes(
     RPC_SERVER_INTERFACE * pInf,
     unsigned long       * pCount,
     MIDL_SYNTAX_INFO   ** pArr,
     unsigned long       * pPreferSyntaxIndex);





__declspec(dllimport)
void
__stdcall
NdrSimpleTypeMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    unsigned char           FormatChar
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrPointerMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrCsArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrCsTagMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrSimpleStructMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStructMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingStructMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexStructMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrFixedArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonConformantStringMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStringMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrByteCountPointerMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrXmitOrRepAsMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrUserMarshalMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrInterfacePointerMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    NDR_CCONTEXT            ContextHandle,
    int                     fCheck
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    NDR_SCONTEXT            ContextHandle,
    NDR_RUNDOWN             RundownRoutine
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextNewMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    NDR_SCONTEXT            ContextHandle,
    NDR_RUNDOWN             RundownRoutine,
    PFORMAT_STRING          pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrSimpleTypeUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    unsigned char           FormatChar
    );

__declspec(dllimport)
unsigned char * __stdcall
__stdcall
NdrCsArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char **        ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char * __stdcall
__stdcall
NdrCsTagUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char **        ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char * __stdcall
NdrRangeUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char **        ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationInitialize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    void  *                 pMemory,
    unsigned long           CacheSize,
    unsigned long           flags
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationPass(
    PMIDL_STUB_MESSAGE      pStubMsg
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationFree(
    PMIDL_STUB_MESSAGE      pStubMsg
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrPointerUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrSimpleStructUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStructUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingStructUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexStructUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrFixedArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrByteCountPointerUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrXmitOrRepAsUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrUserMarshalUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrInterfacePointerUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    NDR_CCONTEXT        *   pContextHandle,
    RPC_BINDING_HANDLE      BindHandle
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg
    );



__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrContextHandleInitialize(
      PMIDL_STUB_MESSAGE  pStubMsg,
      PFORMAT_STRING      pFormat
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextNewUnmarshall(
      PMIDL_STUB_MESSAGE  pStubMsg,
      PFORMAT_STRING      pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsTagBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrConformantStringBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonConformantStringBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrContextHandleSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );





__declspec(dllimport)
unsigned long
__stdcall
NdrPointerMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrCsArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrCsTagMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrSimpleStructMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStructMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingStructMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexStructMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrFixedArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStringMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonConformantStringMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrXmitOrRepAsMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrUserMarshalMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrInterfacePointerMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrConvert2(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat,
    long                    NumberParams
    );

__declspec(dllimport)
void
__stdcall
NdrConvert(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );














__declspec(dllimport)
unsigned char  *
__stdcall
NdrUserMarshalSimpleTypeConvert(
    unsigned long *         pFlags,
    unsigned char *         pBuffer,
    unsigned char           FormatChar
    );





__declspec(dllimport)
void
__stdcall
NdrClientInitializeNew(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor,
    unsigned int            ProcNum
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrServerInitializeNew(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializePartial(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor,
    unsigned long           RequestedBufferSize
    );

__declspec(dllimport)
void
__stdcall
NdrClientInitialize(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor,
    unsigned int            ProcNum
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrServerInitialize(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrServerInitializeUnmarshall (
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor,
    PRPC_MESSAGE            pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializeMarshall (
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrGetBuffer(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned long           BufferLength,
    RPC_BINDING_HANDLE      Handle
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNsGetBuffer(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned long           BufferLength,
    RPC_BINDING_HANDLE      Handle
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrSendReceive(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char *         pBufferEnd
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNsSendReceive(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pBufferEnd,
    RPC_BINDING_HANDLE  *   pAutoHandle
    );

__declspec(dllimport)
void
__stdcall
NdrFreeBuffer(
    PMIDL_STUB_MESSAGE      pStubMsg
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
NdrGetDcomProtocolVersion(
    PMIDL_STUB_MESSAGE      pStubMsg,
    RPC_VERSION *           pVersion );








CLIENT_CALL_RETURN __cdecl
NdrClientCall2(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );





void * _AddressOfReturnAddress(void);

#line 2450 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"

CLIENT_CALL_RETURN __cdecl
NdrClientCall(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrAsyncClientCall(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrDcomAsyncClientCall(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );


typedef enum {
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT
}STUB_PHASE;

typedef enum {
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL
}PROXY_PHASE;

struct IRpcStubBuffer;      


__declspec(dllimport)
void
__stdcall
NdrAsyncServerCall(
    PRPC_MESSAGE                pRpcMsg
    );


__declspec(dllimport)
long
__stdcall
NdrAsyncStubCall(
    struct IRpcStubBuffer *     pThis,
    struct IRpcChannelBuffer *  pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long *             pdwStubPhase
    );


__declspec(dllimport)
long
__stdcall
NdrDcomAsyncStubCall(
    struct IRpcStubBuffer    *  pThis,
    struct IRpcChannelBuffer *  pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long            *  pdwStubPhase
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall2(
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long  *            pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall2(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall (
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long  *            pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
int
__stdcall
NdrServerUnmarshall(
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                pRpcMsg,
    PMIDL_STUB_MESSAGE          pStubMsg,
    PMIDL_STUB_DESC             pStubDescriptor,
    PFORMAT_STRING              pFormat,
    void  *                     pParamList
    );

__declspec(dllimport)
void
__stdcall
NdrServerMarshall(
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PMIDL_STUB_MESSAGE          pStubMsg,
    PFORMAT_STRING              pFormat
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
NdrMapCommAndFaultStatus(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned long  *            pCommStatus,
    unsigned long  *            pFaultStatus,
    RPC_STATUS                  Status
    );



__declspec(dllimport)
int
__stdcall
NdrSH_UPDecision(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem,
    RPC_BUFPTR                  pBuffer
    );

__declspec(dllimport)
int
__stdcall
NdrSH_TLUPDecision(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem
    );

__declspec(dllimport)
int
__stdcall
NdrSH_TLUPDecisionBuffer(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem
    );

__declspec(dllimport)
int
__stdcall
NdrSH_IfAlloc(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem,
    unsigned long               Count
    );

__declspec(dllimport)
int
__stdcall
NdrSH_IfAllocRef(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem,
    unsigned long               Count
    );

__declspec(dllimport)
int
__stdcall
NdrSH_IfAllocSet(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem,
    unsigned long               Count
    );

__declspec(dllimport)
RPC_BUFPTR
__stdcall
NdrSH_IfCopy(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem,
    unsigned long               Count
    );

__declspec(dllimport)
RPC_BUFPTR
__stdcall
NdrSH_IfAllocCopy(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned char          * *  pPtrInMem,
    unsigned long               Count
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrSH_Copy(
    unsigned char            *  pStubMsg,
    unsigned char            *  pPtrInMem,
    unsigned long               Count
    );

__declspec(dllimport)
void
__stdcall
NdrSH_IfFree(
    PMIDL_STUB_MESSAGE          pMessage,
    unsigned char            *  pPtr );


__declspec(dllimport)
RPC_BUFPTR
__stdcall
NdrSH_StringMarshall(
    PMIDL_STUB_MESSAGE          pMessage,
    unsigned char            *  pMemory,
    unsigned long               Count,
    int                         Size );

__declspec(dllimport)
RPC_BUFPTR
__stdcall
NdrSH_StringUnMarshall(
    PMIDL_STUB_MESSAGE          pMessage,
    unsigned char          * *  pMemory,
    int                         Size );





typedef void  * RPC_SS_THREAD_HANDLE;

typedef void  * __stdcall
RPC_CLIENT_ALLOC (
     size_t Size
    );

typedef void __stdcall
RPC_CLIENT_FREE (
     void  * Ptr
    );





__declspec(dllimport)
void  *
__stdcall
RpcSsAllocate (
     size_t Size
    );

__declspec(dllimport)
void
__stdcall
RpcSsDisableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsEnableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsFree (
     void  * NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSsGetThreadHandle (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetClientAllocFree (
     RPC_CLIENT_ALLOC  * ClientAlloc,
     RPC_CLIENT_FREE   * ClientFree
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetThreadHandle (
     RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
void
__stdcall
RpcSsSwapClientAllocFree (
     RPC_CLIENT_ALLOC     * ClientAlloc,
     RPC_CLIENT_FREE      * ClientFree,
     RPC_CLIENT_ALLOC *  * OldClientAlloc,
     RPC_CLIENT_FREE  *  * OldClientFree
    );





__declspec(dllimport)
void  *
__stdcall
RpcSmAllocate (
      size_t          Size,
     RPC_STATUS  *   pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmClientFree (
      void        *   pNodeToFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDestroyClientContext (
     void         * * ContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDisableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmEnableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmFree (
     void         *   NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSmGetThreadHandle (
     RPC_STATUS  *   pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetClientAllocFree (
     RPC_CLIENT_ALLOC * ClientAlloc,
     RPC_CLIENT_FREE  * ClientFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetThreadHandle (
     RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSwapClientAllocFree (
     RPC_CLIENT_ALLOC     *   ClientAlloc,
     RPC_CLIENT_FREE      *   ClientFree,
     RPC_CLIENT_ALLOC    * * OldClientAlloc,
     RPC_CLIENT_FREE     * * OldClientFree
    );





__declspec(dllimport)
void
__stdcall
NdrRpcSsEnableAllocate(
    PMIDL_STUB_MESSAGE      pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDisableAllocate(
    PMIDL_STUB_MESSAGE      pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSmSetClientToOsf(
    PMIDL_STUB_MESSAGE      pMessage );

__declspec(dllimport)
void  *
__stdcall
NdrRpcSmClientAllocate (
     size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSmClientFree (
     void  * NodeToFree
    );

__declspec(dllimport)
void  *
__stdcall
NdrRpcSsDefaultAllocate (
     size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDefaultFree (
     void  * NodeToFree
    );









__declspec(dllimport)
PFULL_PTR_XLAT_TABLES
__stdcall
NdrFullPointerXlatInit(
    unsigned long           NumberOfPointers,
    XLAT_SIDE               XlatSide
    );

__declspec(dllimport)
void
__stdcall
NdrFullPointerXlatFree(
    PFULL_PTR_XLAT_TABLES   pXlatTables
    );

__declspec(dllimport)
int
__stdcall
NdrFullPointerQueryPointer(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    void  *                 pPointer,
    unsigned char           QueryType,
    unsigned long  *        pRefId
    );

__declspec(dllimport)
int
__stdcall
NdrFullPointerQueryRefId(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    unsigned long           RefId,
    unsigned char           QueryType,
    void  * *               ppPointer
    );

__declspec(dllimport)
void
__stdcall
NdrFullPointerInsertRefId(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    unsigned long           RefId,
    void  *                 pPointer
    );

__declspec(dllimport)
int
__stdcall
NdrFullPointerFree(
    PFULL_PTR_XLAT_TABLES   pXlatTables,
    void  *                 Pointer
    );

__declspec(dllimport)
void  *
__stdcall
NdrAllocate(
    PMIDL_STUB_MESSAGE      pStubMsg,
    size_t                  Len
    );

__declspec(dllimport)
void
__stdcall
NdrClearOutParameters(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat,
    void  *                 ArgAddr
    );






__declspec(dllimport)
void  *
__stdcall
NdrOleAllocate (
     size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrOleFree (
     void  * NodeToFree
    );





#line 3004 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"




































#line 3041 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"





typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void *                      Buffer;
    unsigned long               BufferSize;
    void *(__stdcall * pfnAllocate)(size_t);
    void (__stdcall * pfnFree)(void *);
    struct IRpcChannelBuffer *  pRpcChannelBuffer;
    ULONG_PTR                   Reserved[5];
} NDR_USER_MARSHAL_INFO_LEVEL1;



#pragma warning(push)
#line 3060 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"
#pragma warning(disable:4201)
#line 3062 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"

typedef struct _NDR_USER_MARSHAL_INFO
{
    unsigned long InformationLevel;
    union {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    };
} NDR_USER_MARSHAL_INFO;



#pragma warning(pop)


#line 3077 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"
#line 3078 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"

RPC_STATUS
__stdcall
NdrGetUserMarshalInfo (
     unsigned long        *   pFlags,
     unsigned long            InformationLevel,
     NDR_USER_MARSHAL_INFO * pMarshalInfo
    );




RPC_STATUS __stdcall
NdrCreateServerInterfaceFromStub(
             struct IRpcStubBuffer* pStub,
              RPC_SERVER_INTERFACE *pServerIf );




CLIENT_CALL_RETURN __cdecl
NdrClientCall3(
    MIDL_STUBLESS_PROXY_INFO   *pProxyInfo,
    unsigned long               nProcNum,
    void *                      pReturnValue,
    ...
    );

CLIENT_CALL_RETURN __cdecl
Ndr64AsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO   *pProxyInfo,
    unsigned long               nProcNum,
    void *                      pReturnValue,
    ...
    );

CLIENT_CALL_RETURN __cdecl
Ndr64DcomAsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO   *pProxyInfo,
    unsigned long               nProcNum,
    void *                      pReturnValue,
    ...
    );

struct IRpcStubBuffer;      

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall64(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCallAll(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
Ndr64AsyncStubCall(
    struct IRpcStubBuffer *     pThis,
    struct IRpcChannelBuffer *  pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long *             pdwStubPhase
    );


__declspec(dllimport)
long
__stdcall
Ndr64DcomAsyncStubCall(
    struct IRpcStubBuffer    *  pThis,
    struct IRpcChannelBuffer *  pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long            *  pdwStubPhase
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall3 (
    struct IRpcStubBuffer  *    pThis,
    struct IRpcChannelBuffer  * pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long  *            pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallAll(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallNdr64(
    PRPC_MESSAGE                pRpcMsg
    );


__declspec(dllimport)
void
__stdcall
NdrServerCall3(
    PRPC_MESSAGE                pRpcMsg
    );



__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientMarshall(
    PMIDL_STUB_MESSAGE          pStubMsg,
    void *                      pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerUnmarshall(
    PMIDL_STUB_MESSAGE          pStubMsg,
    void **                     ppMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientBufferSize(
    PMIDL_STUB_MESSAGE          pStubMsg,
    void *                      pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerInitialize(
    PMIDL_STUB_MESSAGE          pStubMsg,
    void **                     ppMemory,
    PFORMAT_STRING              pFormat
    );


void __stdcall
RpcUserFree( handle_t AsyncHandle, void * pBuffer );





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 3242 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"

#line 3244 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\rpcndr.h"


#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"










#pragma once
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"

 



#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\guiddef.h"
























































#line 58 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\guiddef.h"








#line 67 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\guiddef.h"











































































































































#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"





void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 








#pragma once
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"


extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_v0_0_s_ifspec;





 

typedef struct tagRemHGLOBAL
    {
    long fNullHGlobal;
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHGLOBAL;

typedef struct tagRemHMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHMETAFILEPICT;

typedef struct tagRemHENHMETAFILE
    {
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHENHMETAFILE;

typedef struct tagRemHBITMAP
    {
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHBITMAP;

typedef struct tagRemHPALETTE
    {
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHPALETTE;

typedef struct tagRemBRUSH
    {
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHBRUSH;


































































































































































































#line 310 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"






























typedef WCHAR OLECHAR;

typedef  OLECHAR *LPOLESTR;

typedef  const OLECHAR *LPCOLESTR;









#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
























typedef unsigned char UCHAR;

typedef short SHORT;

typedef unsigned short USHORT;

typedef DWORD ULONG;

typedef double DOUBLE;






























#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
















































































typedef struct _COAUTHIDENTITY
    {
     USHORT *User;
     ULONG UserLength;
     USHORT *Domain;
     ULONG DomainLength;
     USHORT *Password;
     ULONG PasswordLength;
    ULONG Flags;
    } 	COAUTHIDENTITY;

typedef struct _COAUTHINFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
    } 	COAUTHINFO;

typedef LONG SCODE;






typedef SCODE *PSCODE;




















#line 550 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
typedef 
enum tagMEMCTX
    {	MEMCTX_TASK	= 1,
	MEMCTX_SHARED	= 2,
	MEMCTX_MACSYSTEM	= 3,
	MEMCTX_UNKNOWN	= -1,
	MEMCTX_SAME	= -2
    } 	MEMCTX;





#line 564 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"



#line 568 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
typedef 
enum tagCLSCTX
    {	CLSCTX_INPROC_SERVER	= 0x1,
	CLSCTX_INPROC_HANDLER	= 0x2,
	CLSCTX_LOCAL_SERVER	= 0x4,
	CLSCTX_INPROC_SERVER16	= 0x8,
	CLSCTX_REMOTE_SERVER	= 0x10,
	CLSCTX_INPROC_HANDLER16	= 0x20,
	CLSCTX_RESERVED1	= 0x40,
	CLSCTX_RESERVED2	= 0x80,
	CLSCTX_RESERVED3	= 0x100,
	CLSCTX_RESERVED4	= 0x200,
	CLSCTX_NO_CODE_DOWNLOAD	= 0x400,
	CLSCTX_RESERVED5	= 0x800,
	CLSCTX_NO_CUSTOM_MARSHAL	= 0x1000,
	CLSCTX_ENABLE_CODE_DOWNLOAD	= 0x2000,
	CLSCTX_NO_FAILURE_LOG	= 0x4000,
	CLSCTX_DISABLE_AAA	= 0x8000,
	CLSCTX_ENABLE_AAA	= 0x10000,
	CLSCTX_FROM_DEFAULT_CONTEXT	= 0x20000,
	CLSCTX_ACTIVATE_32_BIT_SERVER	= 0x40000,
	CLSCTX_ACTIVATE_64_BIT_SERVER	= 0x80000
    } 	CLSCTX;

typedef 
enum tagMSHLFLAGS
    {	MSHLFLAGS_NORMAL	= 0,
	MSHLFLAGS_TABLESTRONG	= 1,
	MSHLFLAGS_TABLEWEAK	= 2,
	MSHLFLAGS_NOPING	= 4,
	MSHLFLAGS_RESERVED1	= 8,
	MSHLFLAGS_RESERVED2	= 16,
	MSHLFLAGS_RESERVED3	= 32,
	MSHLFLAGS_RESERVED4	= 64
    } 	MSHLFLAGS;

typedef 
enum tagMSHCTX
    {	MSHCTX_LOCAL	= 0,
	MSHCTX_NOSHAREDMEM	= 1,
	MSHCTX_DIFFERENTMACHINE	= 2,
	MSHCTX_INPROC	= 3,
	MSHCTX_CROSSCTX	= 4
    } 	MSHCTX;

typedef 
enum tagDVASPECT
    {	DVASPECT_CONTENT	= 1,
	DVASPECT_THUMBNAIL	= 2,
	DVASPECT_ICON	= 4,
	DVASPECT_DOCPRINT	= 8
    } 	DVASPECT;

typedef 
enum tagSTGC
    {	STGC_DEFAULT	= 0,
	STGC_OVERWRITE	= 1,
	STGC_ONLYIFCURRENT	= 2,
	STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE	= 4,
	STGC_CONSOLIDATE	= 8
    } 	STGC;

typedef 
enum tagSTGMOVE
    {	STGMOVE_MOVE	= 0,
	STGMOVE_COPY	= 1,
	STGMOVE_SHALLOWCOPY	= 2
    } 	STGMOVE;

typedef 
enum tagSTATFLAG
    {	STATFLAG_DEFAULT	= 0,
	STATFLAG_NONAME	= 1,
	STATFLAG_NOOPEN	= 2
    } 	STATFLAG;

typedef  void *HCONTEXT;



typedef DWORD LCID;

#line 651 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"


typedef USHORT LANGID;

#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
typedef struct _BYTE_BLOB
    {
    unsigned long clSize;
     byte abData[ 1 ];
    } 	BYTE_BLOB;

typedef  BYTE_BLOB *UP_BYTE_BLOB;

typedef struct _WORD_BLOB
    {
    unsigned long clSize;
     unsigned short asData[ 1 ];
    } 	WORD_BLOB;

typedef  WORD_BLOB *UP_WORD_BLOB;

typedef struct _DWORD_BLOB
    {
    unsigned long clSize;
     unsigned long alData[ 1 ];
    } 	DWORD_BLOB;

typedef  DWORD_BLOB *UP_DWORD_BLOB;

typedef struct _FLAGGED_BYTE_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
     byte abData[ 1 ];
    } 	FLAGGED_BYTE_BLOB;

typedef  FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

typedef struct _FLAGGED_WORD_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
     unsigned short asData[ 1 ];
    } 	FLAGGED_WORD_BLOB;

typedef  FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

typedef struct _BYTE_SIZEDARR
    {
    unsigned long clSize;
     byte *pData;
    } 	BYTE_SIZEDARR;

typedef struct _SHORT_SIZEDARR
    {
    unsigned long clSize;
     unsigned short *pData;
    } 	WORD_SIZEDARR;

typedef struct _LONG_SIZEDARR
    {
    unsigned long clSize;
     unsigned long *pData;
    } 	DWORD_SIZEDARR;

typedef struct _HYPER_SIZEDARR
    {
    unsigned long clSize;
     __int64 *pData;
    } 	HYPER_SIZEDARR;







typedef struct _userCLIPFORMAT
    {
    long fContext;
      union __MIDL_IWinTypes_0001
        {
         DWORD dwValue;
         wchar_t *pwszName;
        } 	u;
    } 	userCLIPFORMAT;

typedef  userCLIPFORMAT *wireCLIPFORMAT;

typedef  WORD CLIPFORMAT;

typedef struct _GDI_NONREMOTE
    {
    long fContext;
      union __MIDL_IWinTypes_0002
        {
         long hInproc;
         DWORD_BLOB *hRemote;
        } 	u;
    } 	GDI_NONREMOTE;

typedef struct _userHGLOBAL
    {
    long fContext;
      union __MIDL_IWinTypes_0003
        {
         long hInproc;
         FLAGGED_BYTE_BLOB *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHGLOBAL;

typedef  userHGLOBAL *wireHGLOBAL;

typedef struct _userHMETAFILE
    {
    long fContext;
      union __MIDL_IWinTypes_0004
        {
         long hInproc;
         BYTE_BLOB *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHMETAFILE;

typedef struct _remoteMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    userHMETAFILE *hMF;
    } 	remoteMETAFILEPICT;

typedef struct _userHMETAFILEPICT
    {
    long fContext;
      union __MIDL_IWinTypes_0005
        {
         long hInproc;
         remoteMETAFILEPICT *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHMETAFILEPICT;

typedef struct _userHENHMETAFILE
    {
    long fContext;
      union __MIDL_IWinTypes_0006
        {
         long hInproc;
         BYTE_BLOB *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHENHMETAFILE;

typedef struct _userBITMAP
    {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
     byte pBuffer[ 1 ];
    } 	userBITMAP;

typedef struct _userHBITMAP
    {
    long fContext;
      union __MIDL_IWinTypes_0007
        {
         long hInproc;
         userBITMAP *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHBITMAP;

typedef struct _userHPALETTE
    {
    long fContext;
      union __MIDL_IWinTypes_0008
        {
         long hInproc;
         LOGPALETTE *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHPALETTE;

typedef struct _RemotableHandle
    {
    long fContext;
      union __MIDL_IWinTypes_0009
        {
         long hInproc;
         long hRemote;
        } 	u;
    } 	RemotableHandle;

typedef  RemotableHandle *wireHWND;

typedef  RemotableHandle *wireHMENU;

typedef  RemotableHandle *wireHACCEL;

typedef  RemotableHandle *wireHBRUSH;

typedef  RemotableHandle *wireHFONT;

typedef  RemotableHandle *wireHDC;

typedef  RemotableHandle *wireHICON;





















#line 885 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"



















































typedef  userHBITMAP *wireHBITMAP;

typedef  userHPALETTE *wireHPALETTE;

typedef  userHENHMETAFILE *wireHENHMETAFILE;

typedef  userHMETAFILE *wireHMETAFILE;

typedef  userHMETAFILEPICT *wireHMETAFILEPICT;














#line 960 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
typedef  void *HMETAFILEPICT;



extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
#line 967 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"


 



#pragma warning(push)
#line 975 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
#pragma warning(disable:4201)
#line 977 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
typedef double DATE;












#line 991 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"

typedef union tagCY {
    struct {




        unsigned long Lo;
        long      Hi;
#line 1001 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
    };
    LONGLONG int64;
} CY;
#line 1005 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
#line 1006 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
typedef CY *LPCY;













#line 1021 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"

typedef struct tagDEC {
    USHORT wReserved;
    union {
        struct {
            BYTE scale;
            BYTE sign;
        };
        USHORT signscale;
    };
    ULONG Hi32;
    union {
        struct {




            ULONG Lo32;
            ULONG Mid32;
#line 1041 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
        };
        ULONGLONG Lo64;
    };
} DECIMAL;



#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
typedef DECIMAL *LPDECIMAL;



#pragma warning(pop)


#line 1057 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
#line 1058 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
typedef  FLAGGED_WORD_BLOB *wireBSTR;

typedef  OLECHAR *BSTR;

typedef BSTR *LPBSTR;


typedef short VARIANT_BOOL;





#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"


#line 1075 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
typedef boolean BOOLEAN;






typedef struct tagBSTRBLOB
    {
    ULONG cbSize;
     BYTE *pData;
    } 	BSTRBLOB;

typedef struct tagBSTRBLOB *LPBSTRBLOB;

#line 1091 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"






typedef struct tagBLOB
    {
    ULONG cbSize;
     BYTE *pBlobData;
    } 	BLOB;

typedef struct tagBLOB *LPBLOB;

#line 1106 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"
typedef struct tagCLIPDATA
    {
    ULONG cbSize;
    long ulClipFmt;
     BYTE *pClipData;
    } 	CLIPDATA;



typedef unsigned short VARTYPE;




























































enum VARENUM
    {	VT_EMPTY	= 0,
	VT_NULL	= 1,
	VT_I2	= 2,
	VT_I4	= 3,
	VT_R4	= 4,
	VT_R8	= 5,
	VT_CY	= 6,
	VT_DATE	= 7,
	VT_BSTR	= 8,
	VT_DISPATCH	= 9,
	VT_ERROR	= 10,
	VT_BOOL	= 11,
	VT_VARIANT	= 12,
	VT_UNKNOWN	= 13,
	VT_DECIMAL	= 14,
	VT_I1	= 16,
	VT_UI1	= 17,
	VT_UI2	= 18,
	VT_UI4	= 19,
	VT_I8	= 20,
	VT_UI8	= 21,
	VT_INT	= 22,
	VT_UINT	= 23,
	VT_VOID	= 24,
	VT_HRESULT	= 25,
	VT_PTR	= 26,
	VT_SAFEARRAY	= 27,
	VT_CARRAY	= 28,
	VT_USERDEFINED	= 29,
	VT_LPSTR	= 30,
	VT_LPWSTR	= 31,
	VT_RECORD	= 36,
	VT_INT_PTR	= 37,
	VT_UINT_PTR	= 38,
	VT_FILETIME	= 64,
	VT_BLOB	= 65,
	VT_STREAM	= 66,
	VT_STORAGE	= 67,
	VT_STREAMED_OBJECT	= 68,
	VT_STORED_OBJECT	= 69,
	VT_BLOB_OBJECT	= 70,
	VT_CF	= 71,
	VT_CLSID	= 72,
	VT_VERSIONED_STREAM	= 73,
	VT_BSTR_BLOB	= 0xfff,
	VT_VECTOR	= 0x1000,
	VT_ARRAY	= 0x2000,
	VT_BYREF	= 0x4000,
	VT_RESERVED	= 0x8000,
	VT_ILLEGAL	= 0xffff,
	VT_ILLEGALMASKED	= 0xfff,
	VT_TYPEMASK	= 0xfff
    } ;
typedef ULONG PROPID;
































typedef struct tagCSPLATFORM
    {
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
    } 	CSPLATFORM;

typedef struct tagQUERYCONTEXT
    {
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    } 	QUERYCONTEXT;

typedef  
enum tagTYSPEC
    {	TYSPEC_CLSID	= 0,
	TYSPEC_FILEEXT	= TYSPEC_CLSID + 1,
	TYSPEC_MIMETYPE	= TYSPEC_FILEEXT + 1,
	TYSPEC_FILENAME	= TYSPEC_MIMETYPE + 1,
	TYSPEC_PROGID	= TYSPEC_FILENAME + 1,
	TYSPEC_PACKAGENAME	= TYSPEC_PROGID + 1,
	TYSPEC_OBJECTID	= TYSPEC_PACKAGENAME + 1
    } 	TYSPEC;

typedef  struct __MIDL___MIDL_itf_wtypes_0003_0001
    {
    DWORD tyspec;
      union __MIDL___MIDL_itf_wtypes_0003_0005
        {
         CLSID clsid;
         LPOLESTR pFileExt;
         LPOLESTR pMimeType;
         LPOLESTR pProgId;
         LPOLESTR pFileName;
         struct 
            {
            LPOLESTR pPackageName;
            GUID PolicyId;
            } 	ByName;
         struct 
            {
            GUID ObjectId;
            GUID PolicyId;
            } 	ByObjectId;
        } 	tagged_union;
    } 	uCLSSPEC;



extern RPC_IF_HANDLE __MIDL_itf_wtypes_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0003_v0_0_s_ifspec;









#line 1328 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\wtypes.h"



#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"





































extern const GUID  GUID_DEVINTERFACE_DISK;
extern const GUID  GUID_DEVINTERFACE_CDROM;
extern const GUID  GUID_DEVINTERFACE_PARTITION;
extern const GUID  GUID_DEVINTERFACE_TAPE;
extern const GUID  GUID_DEVINTERFACE_WRITEONCEDISK;
extern const GUID  GUID_DEVINTERFACE_VOLUME;
extern const GUID  GUID_DEVINTERFACE_MEDIUMCHANGER;
extern const GUID  GUID_DEVINTERFACE_FLOPPY;
extern const GUID  GUID_DEVINTERFACE_CDCHANGER;
extern const GUID  GUID_DEVINTERFACE_STORAGEPORT;
extern const GUID  GUID_DEVINTERFACE_COMPORT;
extern const GUID  GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR;


















#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"




































































































































#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"






























































typedef struct _STORAGE_HOTPLUG_INFO {
    DWORD Size; 
    BOOLEAN MediaRemovable; 
    BOOLEAN MediaHotplug;   
    BOOLEAN DeviceHotplug;  
    BOOLEAN WriteCacheEnableOverride; 
} STORAGE_HOTPLUG_INFO, *PSTORAGE_HOTPLUG_INFO;












typedef struct _STORAGE_DEVICE_NUMBER {

    
    
    

    DWORD DeviceType;

    
    
    

    DWORD       DeviceNumber;

    
    
    
    

    DWORD       PartitionNumber;
} STORAGE_DEVICE_NUMBER, *PSTORAGE_DEVICE_NUMBER;





typedef struct _STORAGE_BUS_RESET_REQUEST {
    BYTE  PathId;
} STORAGE_BUS_RESET_REQUEST, *PSTORAGE_BUS_RESET_REQUEST;





typedef struct STORAGE_BREAK_RESERVATION_REQUEST {
        DWORD Length;
        BYTE  _unused;
    BYTE  PathId;
    BYTE  TargetId;
    BYTE  Lun;
} STORAGE_BREAK_RESERVATION_REQUEST, *PSTORAGE_BREAK_RESERVATION_REQUEST;












typedef struct _PREVENT_MEDIA_REMOVAL {
    BOOLEAN PreventMediaRemoval;
} PREVENT_MEDIA_REMOVAL, *PPREVENT_MEDIA_REMOVAL;







typedef struct _CLASS_MEDIA_CHANGE_CONTEXT {
        DWORD MediaChangeCount;
        DWORD NewState;         
} CLASS_MEDIA_CHANGE_CONTEXT, *PCLASS_MEDIA_CHANGE_CONTEXT;





typedef struct _TAPE_STATISTICS {
    DWORD Version;
    DWORD Flags;
    LARGE_INTEGER RecoveredWrites;
    LARGE_INTEGER UnrecoveredWrites;
    LARGE_INTEGER RecoveredReads;
    LARGE_INTEGER UnrecoveredReads;
    BYTE          CompressionRatioReads;
    BYTE          CompressionRatioWrites;
} TAPE_STATISTICS, *PTAPE_STATISTICS;








typedef struct _TAPE_GET_STATISTICS {
    DWORD Operation;
} TAPE_GET_STATISTICS, *PTAPE_GET_STATISTICS;










typedef enum _STORAGE_MEDIA_TYPE {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DDS_4mm = 0x20,            
    MiniQic,                   
    Travan,                    
    QIC,                       
    MP_8mm,                    
    AME_8mm,                   
    AIT1_8mm,                  
    DLT,                       
    NCTP,                      
    IBM_3480,                  
    IBM_3490E,                 
    IBM_Magstar_3590,          
    IBM_Magstar_MP,            
    STK_DATA_D3,               
    SONY_DTF,                  
    DV_6mm,                    
    DMI,                       
    SONY_D2,                   
    CLEANER_CARTRIDGE,         
    CD_ROM,                    
    CD_R,                      
    CD_RW,                     
    DVD_ROM,                   
    DVD_R,                     
    DVD_RW,                    
    MO_3_RW,                   
    MO_5_WO,                   
    MO_5_RW,                   
    MO_5_LIMDOW,               
    PC_5_WO,                   
    PC_5_RW,                   
    PD_5_RW,                   
    ABL_5_WO,                  
    PINNACLE_APEX_5_RW,        
    SONY_12_WO,                
    PHILIPS_12_WO,             
    HITACHI_12_WO,             
    CYGNET_12_WO,              
    KODAK_14_WO,               
    MO_NFR_525,                
    NIKON_12_RW,               
    IOMEGA_ZIP,                
    IOMEGA_JAZ,                
    SYQUEST_EZ135,             
    SYQUEST_EZFLYER,           
    SYQUEST_SYJET,             
    AVATAR_F2,                 
    MP2_8mm,                   
    DST_S,                     
    DST_M,                     
    DST_L,                     
    VXATape_1,                 
    VXATape_2,                 
    STK_9840,                  
    LTO_Ultrium,               
    LTO_Accelis,               
    DVD_RAM,                   
    AIT_8mm,                   
    ADR_1,                     
    ADR_2,
    STK_9940,                  
    SAIT                       
} STORAGE_MEDIA_TYPE, *PSTORAGE_MEDIA_TYPE;














typedef enum _STORAGE_BUS_TYPE {
    BusTypeUnknown = 0x00,
    BusTypeScsi,
    BusTypeAtapi,
    BusTypeAta,
    BusType1394,
    BusTypeSsa,
    BusTypeFibre,
    BusTypeUsb,
    BusTypeRAID,
    BusTypeiScsi,
    BusTypeSas,
    BusTypeSata,
    BusTypeMaxReserved = 0x7F
} STORAGE_BUS_TYPE, *PSTORAGE_BUS_TYPE;

typedef struct _DEVICE_MEDIA_INFO {
    union {
        struct {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics; 
        } DiskInfo;

        struct {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics; 
        } RemovableDiskInfo;

        struct {
            STORAGE_MEDIA_TYPE MediaType;
            DWORD   MediaCharacteristics; 
            DWORD   CurrentBlockSize;
            STORAGE_BUS_TYPE BusType;

            
            
            

            union {
                struct {
                    BYTE  MediumType;
                    BYTE  DensityCode;
                } ScsiInformation;
            } BusSpecificData;

        } TapeInfo;
    } DeviceSpecific;
} DEVICE_MEDIA_INFO, *PDEVICE_MEDIA_INFO;

typedef struct _GET_MEDIA_TYPES {
    DWORD DeviceType;              
    DWORD MediaInfoCount;
    DEVICE_MEDIA_INFO MediaInfo[1];
} GET_MEDIA_TYPES, *PGET_MEDIA_TYPES;














typedef struct _STORAGE_PREDICT_FAILURE
{
    DWORD PredictFailure;
    BYTE  VendorSpecific[512];
} STORAGE_PREDICT_FAILURE, *PSTORAGE_PREDICT_FAILURE;







#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"






































#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"















#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"








#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"




























#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"



















































































































































typedef enum _MEDIA_TYPE {
    Unknown,                
    F5_1Pt2_512,            
    F3_1Pt44_512,           
    F3_2Pt88_512,           
    F3_20Pt8_512,           
    F3_720_512,             
    F5_360_512,             
    F5_320_512,             
    F5_320_1024,            
    F5_180_512,             
    F5_160_512,             
    RemovableMedia,         
    FixedMedia,             
    F3_120M_512,            
    F3_640_512,             
    F5_640_512,             
    F5_720_512,             
    F3_1Pt2_512,            
    F3_1Pt23_1024,          
    F5_1Pt23_1024,          
    F3_128Mb_512,           
    F3_230Mb_512,           
    F8_256_128,             
    F3_200Mb_512,           
    F3_240M_512,            
    F3_32M_512              
} MEDIA_TYPE, *PMEDIA_TYPE;






typedef struct _FORMAT_PARAMETERS {
   MEDIA_TYPE MediaType;
   DWORD StartCylinderNumber;
   DWORD EndCylinderNumber;
   DWORD StartHeadNumber;
   DWORD EndHeadNumber;
} FORMAT_PARAMETERS, *PFORMAT_PARAMETERS;








typedef WORD   BAD_TRACK_NUMBER;
typedef WORD   *PBAD_TRACK_NUMBER;






typedef struct _FORMAT_EX_PARAMETERS {
   MEDIA_TYPE MediaType;
   DWORD StartCylinderNumber;
   DWORD EndCylinderNumber;
   DWORD StartHeadNumber;
   DWORD EndHeadNumber;
   WORD   FormatGapLength;
   WORD   SectorsPerTrack;
   WORD   SectorNumber[1];
} FORMAT_EX_PARAMETERS, *PFORMAT_EX_PARAMETERS;







typedef struct _DISK_GEOMETRY {
    LARGE_INTEGER Cylinders;
    MEDIA_TYPE MediaType;
    DWORD TracksPerCylinder;
    DWORD SectorsPerTrack;
    DWORD BytesPerSector;
} DISK_GEOMETRY, *PDISK_GEOMETRY;
















typedef struct _PARTITION_INFORMATION {
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER PartitionLength;
    DWORD HiddenSectors;
    DWORD PartitionNumber;
    BYTE  PartitionType;
    BOOLEAN BootIndicator;
    BOOLEAN RecognizedPartition;
    BOOLEAN RewritePartition;
} PARTITION_INFORMATION, *PPARTITION_INFORMATION;







typedef struct _SET_PARTITION_INFORMATION {
    BYTE  PartitionType;
} SET_PARTITION_INFORMATION, *PSET_PARTITION_INFORMATION;






typedef struct _DRIVE_LAYOUT_INFORMATION {
    DWORD PartitionCount;
    DWORD Signature;
    PARTITION_INFORMATION PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION, *PDRIVE_LAYOUT_INFORMATION;






typedef struct _VERIFY_INFORMATION {
    LARGE_INTEGER StartingOffset;
    DWORD Length;
} VERIFY_INFORMATION, *PVERIFY_INFORMATION;






typedef struct _REASSIGN_BLOCKS {
    WORD   Reserved;
    WORD   Count;
    DWORD BlockNumber[1];
} REASSIGN_BLOCKS, *PREASSIGN_BLOCKS;






#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"
#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"
typedef struct _REASSIGN_BLOCKS_EX {
    WORD   Reserved;
    WORD   Count;
    LARGE_INTEGER BlockNumber[1];
} REASSIGN_BLOCKS_EX, *PREASSIGN_BLOCKS_EX;
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 986 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"




















































































































































































#line 1167 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"




























































































#line 1260 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"












#line 1273 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"









































































































#line 1379 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"



















typedef struct _HISTOGRAM_BUCKET {
    DWORD       Reads;
    DWORD       Writes;
} HISTOGRAM_BUCKET, *PHISTOGRAM_BUCKET;



typedef struct _DISK_HISTOGRAM {
    LARGE_INTEGER   DiskSize;
    LARGE_INTEGER   Start;
    LARGE_INTEGER   End;
    LARGE_INTEGER   Average;
    LARGE_INTEGER   AverageRead;
    LARGE_INTEGER   AverageWrite;
    DWORD           Granularity;
    DWORD           Size;
    DWORD           ReadCount;
    DWORD           WriteCount;
    PHISTOGRAM_BUCKET  Histogram;
} DISK_HISTOGRAM, *PDISK_HISTOGRAM;























typedef struct _DISK_PERFORMANCE {
        LARGE_INTEGER BytesRead;
        LARGE_INTEGER BytesWritten;
        LARGE_INTEGER ReadTime;
        LARGE_INTEGER WriteTime;
        LARGE_INTEGER IdleTime;
        DWORD ReadCount;
        DWORD WriteCount;
        DWORD QueueDepth;
        DWORD SplitCount;
        LARGE_INTEGER QueryTime;
        DWORD   StorageDeviceNumber;
        WCHAR   StorageManagerName[8];
} DISK_PERFORMANCE, *PDISK_PERFORMANCE;







typedef struct _DISK_RECORD {
   LARGE_INTEGER ByteOffset;
   LARGE_INTEGER StartTime;
   LARGE_INTEGER EndTime;
   PVOID VirtualAddress;
   DWORD NumberOfBytes;
   BYTE  DeviceNumber;
   BOOLEAN ReadRequest;
} DISK_RECORD, *PDISK_RECORD;






typedef struct _DISK_LOGGING {
    BYTE  Function;
    PVOID BufferAddress;
    DWORD BufferSize;
} DISK_LOGGING, *PDISK_LOGGING;





































typedef enum _BIN_TYPES {
    RequestSize,
    RequestLocation
} BIN_TYPES;





typedef struct _BIN_RANGE {
    LARGE_INTEGER StartValue;
    LARGE_INTEGER Length;
} BIN_RANGE, *PBIN_RANGE;





typedef struct _PERF_BIN {
    DWORD NumberOfBins;
    DWORD TypeOfBin;
    BIN_RANGE BinsRanges[1];
} PERF_BIN, *PPERF_BIN ;





typedef struct _BIN_COUNT {
    BIN_RANGE BinRange;
    DWORD BinCount;
} BIN_COUNT, *PBIN_COUNT;





typedef struct _BIN_RESULTS {
    DWORD NumberOfBins;
    BIN_COUNT BinCounts[1];
} BIN_RESULTS, *PBIN_RESULTS;
























































































































































#line 1713 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"






























typedef  enum _ELEMENT_TYPE {
    AllElements,        
    ChangerTransport,   
    ChangerSlot,        
    ChangerIEPort,      
    ChangerDrive,       
    ChangerDoor,        
    ChangerKeypad,      
    ChangerMaxElement   
} ELEMENT_TYPE, *PELEMENT_TYPE;

typedef  struct _CHANGER_ELEMENT {
    ELEMENT_TYPE    ElementType;
    DWORD   ElementAddress;
} CHANGER_ELEMENT, *PCHANGER_ELEMENT;

typedef  struct _CHANGER_ELEMENT_LIST {
    CHANGER_ELEMENT Element;
    DWORD   NumberOfElements;
} CHANGER_ELEMENT_LIST , *PCHANGER_ELEMENT_LIST;
























                                                       







                                                       

                                                       



                                                       








                                                       










































typedef  struct _GET_CHANGER_PARAMETERS {

    
    
    

    DWORD Size;

    
    
    

    WORD   NumberTransportElements;
    WORD   NumberStorageElements;                
    WORD   NumberCleanerSlots;                   
    WORD   NumberIEElements;
    WORD   NumberDataTransferElements;

    
    
    

    WORD   NumberOfDoors;

    
    
    
    

    WORD   FirstSlotNumber;
    WORD   FirstDriveNumber;
    WORD   FirstTransportNumber;
    WORD   FirstIEPortNumber;
    WORD   FirstCleanerSlotAddress;

    
    
    

    WORD   MagazineSize;

    
    
    
    

    DWORD DriveCleanTimeout;

    
    
    

    DWORD Features0;
    DWORD Features1;

    
    
    
    

    BYTE  MoveFromTransport;
    BYTE  MoveFromSlot;
    BYTE  MoveFromIePort;
    BYTE  MoveFromDrive;

    
    
    
    

    BYTE  ExchangeFromTransport;
    BYTE  ExchangeFromSlot;
    BYTE  ExchangeFromIePort;
    BYTE  ExchangeFromDrive;

    
    
    
    

    BYTE  LockUnlockCapabilities;

    
    
    
    

    BYTE  PositionCapabilities;

    
    
    

    BYTE  Reserved1[2];
    DWORD Reserved2[2];

} GET_CHANGER_PARAMETERS, * PGET_CHANGER_PARAMETERS;






typedef  struct _CHANGER_PRODUCT_DATA {

    
    
    

    BYTE  VendorId[8];

    
    
    

    BYTE  ProductId[16];

    
    
    

    BYTE  Revision[4];

    
    
    
    

    BYTE  SerialNumber[32];

    
    
    

    BYTE  DeviceType;

} CHANGER_PRODUCT_DATA, *PCHANGER_PRODUCT_DATA;











typedef struct _CHANGER_SET_ACCESS {

    
    
    

    CHANGER_ELEMENT Element;

    
    
    

    DWORD           Control;
} CHANGER_SET_ACCESS, *PCHANGER_SET_ACCESS;










typedef struct _CHANGER_READ_ELEMENT_STATUS {

    
    
    

    CHANGER_ELEMENT_LIST ElementList;

    
    
    

    BOOLEAN VolumeTagInfo;
} CHANGER_READ_ELEMENT_STATUS, *PCHANGER_READ_ELEMENT_STATUS;





typedef  struct _CHANGER_ELEMENT_STATUS {

    
    
    

    CHANGER_ELEMENT Element;

    
    
    
    
    

    CHANGER_ELEMENT SrcElementAddress;

    
    
    

    DWORD Flags;

    
    
    

    DWORD ExceptionCode;

    
    
    
    

    BYTE  TargetId;

    
    
    
    

    BYTE  Lun;
    WORD   Reserved;

    
    
    
    

    BYTE  PrimaryVolumeID[36];

    
    
    
    
    

    BYTE  AlternateVolumeID[36];

} CHANGER_ELEMENT_STATUS, *PCHANGER_ELEMENT_STATUS;







typedef  struct _CHANGER_ELEMENT_STATUS_EX {

    
    
    

    CHANGER_ELEMENT Element;

    
    
    
    
    

    CHANGER_ELEMENT SrcElementAddress;

    
    
    

    DWORD Flags;

    
    
    

    DWORD ExceptionCode;

    
    
    
    

    BYTE  TargetId;

    
    
    
    

    BYTE  Lun;
    WORD   Reserved;

    
    
    
    

    BYTE  PrimaryVolumeID[36];

    
    
    
    
    

    BYTE  AlternateVolumeID[36];

    
    
    
    BYTE  VendorIdentification[8];

    
    
    
    BYTE  ProductIdentification[16];

    
    
    
    BYTE  SerialNumber[32];

} CHANGER_ELEMENT_STATUS_EX, *PCHANGER_ELEMENT_STATUS_EX;








































typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS {

    
    
    

    CHANGER_ELEMENT_LIST ElementList;

    
    
    
    

    BOOLEAN BarCodeScan;
} CHANGER_INITIALIZE_ELEMENT_STATUS, *PCHANGER_INITIALIZE_ELEMENT_STATUS;






typedef struct _CHANGER_SET_POSITION {


    
    
    

    CHANGER_ELEMENT Transport;

    
    
    

    CHANGER_ELEMENT Destination;

    
    
    

    BOOLEAN         Flip;
} CHANGER_SET_POSITION, *PCHANGER_SET_POSITION;






typedef struct _CHANGER_EXCHANGE_MEDIUM {

    
    
    

    CHANGER_ELEMENT Transport;

    
    
    

    CHANGER_ELEMENT Source;

    
    
    

    CHANGER_ELEMENT Destination1;

    
    
    

    CHANGER_ELEMENT Destination2;

    
    
    

    BOOLEAN         Flip1;
    BOOLEAN         Flip2;
} CHANGER_EXCHANGE_MEDIUM, *PCHANGER_EXCHANGE_MEDIUM;






typedef struct _CHANGER_MOVE_MEDIUM {

    
    
    

    CHANGER_ELEMENT Transport;

    
    
    

    CHANGER_ELEMENT Source;

    
    
    

    CHANGER_ELEMENT Destination;

    
    
    

    BOOLEAN         Flip;
} CHANGER_MOVE_MEDIUM, *PCHANGER_MOVE_MEDIUM;











typedef  struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {

    
    
    

    CHANGER_ELEMENT StartingElement;

    
    
    

    DWORD ActionCode;

    
    
    

    BYTE  VolumeIDTemplate[40];
} CHANGER_SEND_VOLUME_TAG_INFORMATION, *PCHANGER_SEND_VOLUME_TAG_INFORMATION;






typedef struct _READ_ELEMENT_ADDRESS_INFO {

    
    
    

    DWORD NumberOfElements;

    
    
    
    

    CHANGER_ELEMENT_STATUS ElementStatus[1];
} READ_ELEMENT_ADDRESS_INFO, *PREAD_ELEMENT_ADDRESS_INFO;


























typedef enum _CHANGER_DEVICE_PROBLEM_TYPE {
   DeviceProblemNone,
   DeviceProblemHardware,
   DeviceProblemCHMError,
   DeviceProblemDoorOpen,
   DeviceProblemCalibrationError,
   DeviceProblemTargetFailure,
   DeviceProblemCHMMoveError,
   DeviceProblemCHMZeroError,
   DeviceProblemCartridgeInsertError,
   DeviceProblemPositionError,
   DeviceProblemSensorError,
   DeviceProblemCartridgeEjectError,
   DeviceProblemGripperError,
   DeviceProblemDriveError
} CHANGER_DEVICE_PROBLEM_TYPE, *PCHANGER_DEVICE_PROBLEM_TYPE;





































































































#line 2533 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"










































#line 2576 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"










typedef struct _PATHNAME_BUFFER {

    DWORD PathNameLength;
    WCHAR Name[1];

} PATHNAME_BUFFER, *PPATHNAME_BUFFER;





typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {

    BYTE  First0x24BytesOfBootSector[0x24];

} FSCTL_QUERY_FAT_BPB_BUFFER, *PFSCTL_QUERY_FAT_BPB_BUFFER;




































#line 2639 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"



















#line 2659 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"






















#line 2682 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"



















#line 2702 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"





























#line 2732 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"


















#line 2751 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"












































































































































































































#line 2956 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"












#line 2969 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"








#line 2978 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"





typedef struct _FILE_PREFETCH {
    DWORD Type;
    DWORD Count;
    DWORDLONG Prefetch[1];
} FILE_PREFETCH, *PFILE_PREFETCH;








typedef struct _FILESYSTEM_STATISTICS {

    WORD   FileSystemType;
    WORD   Version;                     

    DWORD SizeOfCompleteStructure;      

    DWORD UserFileReads;
    DWORD UserFileReadBytes;
    DWORD UserDiskReads;
    DWORD UserFileWrites;
    DWORD UserFileWriteBytes;
    DWORD UserDiskWrites;

    DWORD MetaDataReads;
    DWORD MetaDataReadBytes;
    DWORD MetaDataDiskReads;
    DWORD MetaDataWrites;
    DWORD MetaDataWriteBytes;
    DWORD MetaDataDiskWrites;

    
    
    

} FILESYSTEM_STATISTICS, *PFILESYSTEM_STATISTICS;










typedef struct _FAT_STATISTICS {
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;

    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;

    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
} FAT_STATISTICS, *PFAT_STATISTICS;

typedef struct _NTFS_STATISTICS {

    DWORD LogFileFullExceptions;
    DWORD OtherExceptions;

    
    
    

    DWORD MftReads;
    DWORD MftReadBytes;
    DWORD MftWrites;
    DWORD MftWriteBytes;
    struct {
        WORD   Write;
        WORD   Create;
        WORD   SetInfo;
        WORD   Flush;
    } MftWritesUserLevel;

    WORD   MftWritesFlushForLogFileFull;
    WORD   MftWritesLazyWriter;
    WORD   MftWritesUserRequest;

    DWORD Mft2Writes;
    DWORD Mft2WriteBytes;
    struct {
        WORD   Write;
        WORD   Create;
        WORD   SetInfo;
        WORD   Flush;
    } Mft2WritesUserLevel;

    WORD   Mft2WritesFlushForLogFileFull;
    WORD   Mft2WritesLazyWriter;
    WORD   Mft2WritesUserRequest;

    DWORD RootIndexReads;
    DWORD RootIndexReadBytes;
    DWORD RootIndexWrites;
    DWORD RootIndexWriteBytes;

    DWORD BitmapReads;
    DWORD BitmapReadBytes;
    DWORD BitmapWrites;
    DWORD BitmapWriteBytes;

    WORD   BitmapWritesFlushForLogFileFull;
    WORD   BitmapWritesLazyWriter;
    WORD   BitmapWritesUserRequest;

    struct {
        WORD   Write;
        WORD   Create;
        WORD   SetInfo;
    } BitmapWritesUserLevel;

    DWORD MftBitmapReads;
    DWORD MftBitmapReadBytes;
    DWORD MftBitmapWrites;
    DWORD MftBitmapWriteBytes;

    WORD   MftBitmapWritesFlushForLogFileFull;
    WORD   MftBitmapWritesLazyWriter;
    WORD   MftBitmapWritesUserRequest;

    struct {
        WORD   Write;
        WORD   Create;
        WORD   SetInfo;
        WORD   Flush;
    } MftBitmapWritesUserLevel;

    DWORD UserIndexReads;
    DWORD UserIndexReadBytes;
    DWORD UserIndexWrites;
    DWORD UserIndexWriteBytes;

    
    
    

    DWORD LogFileReads;
    DWORD LogFileReadBytes;
    DWORD LogFileWrites;
    DWORD LogFileWriteBytes;

    struct {
        DWORD Calls;                
        DWORD Clusters;             
        DWORD Hints;                

        DWORD RunsReturned;         

        DWORD HintsHonored;         
        DWORD HintsClusters;        
        DWORD Cache;                
        DWORD CacheClusters;        
        DWORD CacheMiss;            
        DWORD CacheMissClusters;    
    } Allocate;

} NTFS_STATISTICS, *PNTFS_STATISTICS;









































#line 3191 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"












#line 3204 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"













#line 3218 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"



















#line 3238 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"










































































































































































































#line 3441 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"


























#line 3468 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"




















#line 3489 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"

#line 3491 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"















typedef struct _DISK_EXTENT {
    DWORD           DiskNumber;
    LARGE_INTEGER   StartingOffset;
    LARGE_INTEGER   ExtentLength;
} DISK_EXTENT, *PDISK_EXTENT;





typedef struct _VOLUME_DISK_EXTENTS {
    DWORD       NumberOfDiskExtents;
    DISK_EXTENT Extents[1];
} VOLUME_DISK_EXTENTS, *PVOLUME_DISK_EXTENTS;


#line 3523 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winioctl.h"


#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"
#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\winsmcrd.h"






















#pragma once
#line 25 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\winsmcrd.h"






typedef DWORD ULONG;
typedef WORD UWORD;
typedef BYTE UCHAR;




#line 39 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\winsmcrd.h"







#line 47 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\winsmcrd.h"























































































































































#line 199 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\winsmcrd.h"


























                              

                              

                              
                              

                              
                              

                              
                              
                              

                              

                              
                              











typedef struct _SCARD_IO_REQUEST{
    DWORD dwProtocol;   
    DWORD cbPciLength;  
} SCARD_IO_REQUEST, *PSCARD_IO_REQUEST, *LPSCARD_IO_REQUEST;
typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;






typedef struct {
    BYTE
        bCla,   
        bIns,   
        bP1,
        bP2,    
        bP3;    
} SCARD_T0_COMMAND, *LPSCARD_T0_COMMAND;

typedef struct {
    SCARD_IO_REQUEST ioRequest;
    BYTE
        bSw1,
        bSw2;           
    union
    {
        SCARD_T0_COMMAND CmdBytes;
        BYTE rgbHeader[5];
    };
} SCARD_T0_REQUEST;

typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST, *LPSCARD_T0_REQUEST;






typedef struct {
    SCARD_IO_REQUEST ioRequest;
} SCARD_T1_REQUEST;
typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST, *LPSCARD_T1_REQUEST;









                                                

                                                

                                                


















#line 330 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\winsmcrd.h"

#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"










typedef const BYTE *LPCBYTE;
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"


typedef const void *LPCVOID;
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"



#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"


#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"






__declspec(dllimport) extern const SCARD_IO_REQUEST
    g_rgSCardT0Pci,
    g_rgSCardT1Pci,
    g_rgSCardRawPci;



#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"











typedef ULONG_PTR SCARDCONTEXT;
typedef SCARDCONTEXT *PSCARDCONTEXT, *LPSCARDCONTEXT;

typedef ULONG_PTR SCARDHANDLE;
typedef SCARDHANDLE *PSCARDHANDLE, *LPSCARDHANDLE;




                                
                                

                                
                                
                                
                                

                                
                                
                                
                                

extern  LONG __stdcall
SCardEstablishContext(
      DWORD dwScope,
      LPCVOID pvReserved1,
      LPCVOID pvReserved2,
     LPSCARDCONTEXT phContext);

extern  LONG __stdcall
SCardReleaseContext(
          SCARDCONTEXT hContext);

extern  LONG __stdcall
SCardIsValidContext(
          SCARDCONTEXT hContext);























extern  LONG __stdcall
SCardListReaderGroupsA(
          SCARDCONTEXT hContext,
         LPSTR mszGroups,
       LPDWORD pcchGroups);
extern  LONG __stdcall
SCardListReaderGroupsW(
          SCARDCONTEXT hContext,
         LPWSTR mszGroups,
       LPDWORD pcchGroups);




#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

extern  LONG __stdcall
SCardListReadersA(
          SCARDCONTEXT hContext,
          LPCSTR mszGroups,
         LPSTR mszReaders,
       LPDWORD pcchReaders);
extern  LONG __stdcall
SCardListReadersW(
          SCARDCONTEXT hContext,
          LPCWSTR mszGroups,
         LPWSTR mszReaders,
       LPDWORD pcchReaders);




#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

extern  LONG __stdcall
SCardListCardsA(
          SCARDCONTEXT hContext,
          LPCBYTE pbAtr,
          LPCGUID rgquidInterfaces,
          DWORD cguidInterfaceCount,
         LPSTR mszCards,
       LPDWORD pcchCards);
extern  LONG __stdcall
SCardListCardsW(
          SCARDCONTEXT hContext,
          LPCBYTE pbAtr,
          LPCGUID rgquidInterfaces,
          DWORD cguidInterfaceCount,
         LPWSTR mszCards,
       LPDWORD pcchCards);




#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"
















extern  LONG __stdcall
SCardListInterfacesA(
          SCARDCONTEXT hContext,
          LPCSTR szCard,
         LPGUID pguidInterfaces,
       LPDWORD pcguidInterfaces);
extern  LONG __stdcall
SCardListInterfacesW(
          SCARDCONTEXT hContext,
          LPCWSTR szCard,
         LPGUID pguidInterfaces,
       LPDWORD pcguidInterfaces);




#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

extern  LONG __stdcall
SCardGetProviderIdA(
          SCARDCONTEXT hContext,
          LPCSTR szCard,
         LPGUID pguidProviderId);
extern  LONG __stdcall
SCardGetProviderIdW(
          SCARDCONTEXT hContext,
          LPCWSTR szCard,
         LPGUID pguidProviderId);




#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"





extern  LONG __stdcall
SCardGetCardTypeProviderNameA(
     SCARDCONTEXT hContext,
     LPCSTR szCardName,
     DWORD dwProviderId,
     LPSTR szProvider,
      LPDWORD pcchProvider);
extern  LONG __stdcall
SCardGetCardTypeProviderNameW(
     SCARDCONTEXT hContext,
     LPCWSTR szCardName,
     DWORD dwProviderId,
     LPWSTR szProvider,
      LPDWORD pcchProvider);




#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"









extern  LONG __stdcall
SCardIntroduceReaderGroupA(
     SCARDCONTEXT hContext,
     LPCSTR szGroupName);
extern  LONG __stdcall
SCardIntroduceReaderGroupW(
     SCARDCONTEXT hContext,
     LPCWSTR szGroupName);




#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

extern  LONG __stdcall
SCardForgetReaderGroupA(
     SCARDCONTEXT hContext,
     LPCSTR szGroupName);
extern  LONG __stdcall
SCardForgetReaderGroupW(
     SCARDCONTEXT hContext,
     LPCWSTR szGroupName);




#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

extern  LONG __stdcall
SCardIntroduceReaderA(
     SCARDCONTEXT hContext,
     LPCSTR szReaderName,
     LPCSTR szDeviceName);
extern  LONG __stdcall
SCardIntroduceReaderW(
     SCARDCONTEXT hContext,
     LPCWSTR szReaderName,
     LPCWSTR szDeviceName);




#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

extern  LONG __stdcall
SCardForgetReaderA(
     SCARDCONTEXT hContext,
     LPCSTR szReaderName);
extern  LONG __stdcall
SCardForgetReaderW(
     SCARDCONTEXT hContext,
     LPCWSTR szReaderName);




#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

extern  LONG __stdcall
SCardAddReaderToGroupA(
     SCARDCONTEXT hContext,
     LPCSTR szReaderName,
     LPCSTR szGroupName);
extern  LONG __stdcall
SCardAddReaderToGroupW(
     SCARDCONTEXT hContext,
     LPCWSTR szReaderName,
     LPCWSTR szGroupName);




#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

extern  LONG __stdcall
SCardRemoveReaderFromGroupA(
     SCARDCONTEXT hContext,
     LPCSTR szReaderName,
     LPCSTR szGroupName);
extern  LONG __stdcall
SCardRemoveReaderFromGroupW(
     SCARDCONTEXT hContext,
     LPCWSTR szReaderName,
     LPCWSTR szGroupName);




#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

extern  LONG __stdcall
SCardIntroduceCardTypeA(
     SCARDCONTEXT hContext,
     LPCSTR szCardName,
     LPCGUID pguidPrimaryProvider,
     LPCGUID rgguidInterfaces,
     DWORD dwInterfaceCount,
     LPCBYTE pbAtr,
     LPCBYTE pbAtrMask,
     DWORD cbAtrLen);
extern  LONG __stdcall
SCardIntroduceCardTypeW(
     SCARDCONTEXT hContext,
     LPCWSTR szCardName,
     LPCGUID pguidPrimaryProvider,
     LPCGUID rgguidInterfaces,
     DWORD dwInterfaceCount,
     LPCBYTE pbAtr,
     LPCBYTE pbAtrMask,
     DWORD cbAtrLen);




#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"



















extern  LONG __stdcall
SCardSetCardTypeProviderNameA(
     SCARDCONTEXT hContext,
     LPCSTR szCardName,
     DWORD dwProviderId,
     LPCSTR szProvider);
extern  LONG __stdcall
SCardSetCardTypeProviderNameW(
     SCARDCONTEXT hContext,
     LPCWSTR szCardName,
     DWORD dwProviderId,
     LPCWSTR szProvider);




#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"




extern  LONG __stdcall
SCardForgetCardTypeA(
     SCARDCONTEXT hContext,
     LPCSTR szCardName);
extern  LONG __stdcall
SCardForgetCardTypeW(
     SCARDCONTEXT hContext,
     LPCWSTR szCardName);




#line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"











extern  LONG __stdcall
SCardFreeMemory(
     SCARDCONTEXT hContext,
     LPCVOID pvMem);

extern  HANDLE __stdcall
SCardAccessStartedEvent(void);

extern  void __stdcall
SCardReleaseStartedEvent(void);










typedef struct {
    LPCSTR      szReader;       
    LPVOID      pvUserData;     
    DWORD       dwCurrentState; 
    DWORD       dwEventState;   
    DWORD       cbAtr;          
    BYTE        rgbAtr[36];     
} SCARD_READERSTATEA, *PSCARD_READERSTATEA, *LPSCARD_READERSTATEA;
typedef struct {
    LPCWSTR     szReader;       
    LPVOID      pvUserData;     
    DWORD       dwCurrentState; 
    DWORD       dwEventState;   
    DWORD       cbAtr;          
    BYTE        rgbAtr[36];     
} SCARD_READERSTATEW, *PSCARD_READERSTATEW, *LPSCARD_READERSTATEW;





typedef SCARD_READERSTATEA SCARD_READERSTATE;
typedef PSCARD_READERSTATEA PSCARD_READERSTATE;
typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE;
#line 501 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"










                                            
                                            
                                            
                                            
                                            
                                            

                                            
                                            

                                            
                                            
                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            
                                            

                                            
                                            
                                            

                                            

                                            
                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            

                                            

extern  LONG __stdcall
SCardLocateCardsA(
          SCARDCONTEXT hContext,
          LPCSTR mszCards,
       LPSCARD_READERSTATEA rgReaderStates,
          DWORD cReaders);
extern  LONG __stdcall
SCardLocateCardsW(
          SCARDCONTEXT hContext,
          LPCWSTR mszCards,
       LPSCARD_READERSTATEW rgReaderStates,
          DWORD cReaders);




#line 589 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

typedef struct _SCARD_ATRMASK {
    DWORD       cbAtr;          
    BYTE        rgbAtr[36];     
    BYTE        rgbMask[36];    
} SCARD_ATRMASK, *PSCARD_ATRMASK, *LPSCARD_ATRMASK;


extern  LONG __stdcall
SCardLocateCardsByATRA(
          SCARDCONTEXT hContext,
          LPSCARD_ATRMASK rgAtrMasks,
          DWORD cAtrs,
       LPSCARD_READERSTATEA rgReaderStates,
          DWORD cReaders);
extern  LONG __stdcall
SCardLocateCardsByATRW(
          SCARDCONTEXT hContext,
          LPSCARD_ATRMASK rgAtrMasks,
          DWORD cAtrs,
       LPSCARD_READERSTATEW rgReaderStates,
          DWORD cReaders);




#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"


extern  LONG __stdcall
SCardGetStatusChangeA(
          SCARDCONTEXT hContext,
          DWORD dwTimeout,
       LPSCARD_READERSTATEA rgReaderStates,
          DWORD cReaders);
extern  LONG __stdcall
SCardGetStatusChangeW(
          SCARDCONTEXT hContext,
          DWORD dwTimeout,
       LPSCARD_READERSTATEW rgReaderStates,
          DWORD cReaders);




#line 635 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

extern  LONG __stdcall
SCardCancel(
          SCARDCONTEXT hContext);











                                

                                

                                
                                






extern  LONG __stdcall
SCardConnectA(
          SCARDCONTEXT hContext,
          LPCSTR szReader,
          DWORD dwShareMode,
          DWORD dwPreferredProtocols,
         LPSCARDHANDLE phCard,
         LPDWORD pdwActiveProtocol);
extern  LONG __stdcall
SCardConnectW(
          SCARDCONTEXT hContext,
          LPCWSTR szReader,
          DWORD dwShareMode,
          DWORD dwPreferredProtocols,
         LPSCARDHANDLE phCard,
         LPDWORD pdwActiveProtocol);




#line 683 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

extern  LONG __stdcall
SCardReconnect(
          SCARDHANDLE hCard,
          DWORD dwShareMode,
          DWORD dwPreferredProtocols,
          DWORD dwInitialization,
         LPDWORD pdwActiveProtocol);

extern  LONG __stdcall
SCardDisconnect(
          SCARDHANDLE hCard,
          DWORD dwDisposition);

extern  LONG __stdcall
SCardBeginTransaction(
          SCARDHANDLE hCard);

extern  LONG __stdcall
SCardEndTransaction(
          SCARDHANDLE hCard,
          DWORD dwDisposition);

extern  LONG __stdcall
SCardCancelTransaction(
          SCARDHANDLE hCard);






extern  LONG __stdcall
SCardState(
     SCARDHANDLE hCard,
     LPDWORD pdwState,
     LPDWORD pdwProtocol,
     LPBYTE pbAtr,
      LPDWORD pcbAtrLen);





extern  LONG __stdcall
SCardStatusA(
     SCARDHANDLE hCard,
     LPSTR szReaderName,
      LPDWORD pcchReaderLen,
     LPDWORD pdwState,
     LPDWORD pdwProtocol,
     LPBYTE pbAtr,
      LPDWORD pcbAtrLen);
extern  LONG __stdcall
SCardStatusW(
     SCARDHANDLE hCard,
     LPWSTR szReaderName,
      LPDWORD pcchReaderLen,
     LPDWORD pdwState,
     LPDWORD pdwProtocol,
     LPBYTE pbAtr,
      LPDWORD pcbAtrLen);




#line 750 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

extern  LONG __stdcall
SCardTransmit(
     SCARDHANDLE hCard,
     LPCSCARD_IO_REQUEST pioSendPci,
     LPCBYTE pbSendBuffer,
     DWORD cbSendLength,
      LPSCARD_IO_REQUEST pioRecvPci,
     LPBYTE pbRecvBuffer,
      LPDWORD pcbRecvLength);












extern  LONG __stdcall
SCardControl(
          SCARDHANDLE hCard,
          DWORD dwControlCode,
          LPCVOID lpInBuffer,
          DWORD nInBufferSize,
         LPVOID lpOutBuffer,
          DWORD nOutBufferSize,
         LPDWORD lpBytesReturned);

extern  LONG __stdcall
SCardGetAttrib(
     SCARDHANDLE hCard,
     DWORD dwAttrId,
     LPBYTE pbAttr,
      LPDWORD pcbAttrLen);














extern  LONG __stdcall
SCardSetAttrib(
     SCARDHANDLE hCard,
     DWORD dwAttrId,
     LPCBYTE pbAttr,
     DWORD cbAttrLen);

































typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCA) ( SCARDCONTEXT,  LPSTR,  LPSTR,  PVOID);
typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCW) ( SCARDCONTEXT,  LPWSTR,  LPWSTR,  PVOID);




#line 848 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"
typedef BOOL (__stdcall *LPOCNCHKPROC) ( SCARDCONTEXT,  SCARDHANDLE,  PVOID);
typedef void (__stdcall *LPOCNDSCPROC) ( SCARDCONTEXT,  SCARDHANDLE,  PVOID);











typedef struct {
    DWORD           dwStructSize;
    LPSTR           lpstrGroupNames;        
    DWORD           nMaxGroupNames;         
                                            
    LPCGUID         rgguidInterfaces;       
    DWORD           cguidInterfaces;        
    LPSTR           lpstrCardNames;         
    DWORD           nMaxCardNames;          
    LPOCNCHKPROC    lpfnCheck;              
    LPOCNCONNPROCA  lpfnConnect;            
    LPOCNDSCPROC    lpfnDisconnect;         
    LPVOID          pvUserData;             
    DWORD           dwShareMode;            
    DWORD           dwPreferredProtocols;   
} OPENCARD_SEARCH_CRITERIAA, *POPENCARD_SEARCH_CRITERIAA, *LPOPENCARD_SEARCH_CRITERIAA;
typedef struct {
    DWORD           dwStructSize;
    LPWSTR          lpstrGroupNames;        
    DWORD           nMaxGroupNames;         
                                            
    LPCGUID         rgguidInterfaces;       
    DWORD           cguidInterfaces;        
    LPWSTR          lpstrCardNames;         
    DWORD           nMaxCardNames;          
    LPOCNCHKPROC    lpfnCheck;              
    LPOCNCONNPROCW  lpfnConnect;            
    LPOCNDSCPROC    lpfnDisconnect;         
    LPVOID          pvUserData;             
    DWORD           dwShareMode;            
    DWORD           dwPreferredProtocols;   
} OPENCARD_SEARCH_CRITERIAW, *POPENCARD_SEARCH_CRITERIAW, *LPOPENCARD_SEARCH_CRITERIAW;





typedef OPENCARD_SEARCH_CRITERIAA OPENCARD_SEARCH_CRITERIA;
typedef POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA;
typedef LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA;
#line 902 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"






typedef struct {
    DWORD           dwStructSize;           
    SCARDCONTEXT    hSCardContext;          
    HWND            hwndOwner;              
    DWORD           dwFlags;                
    LPCSTR          lpstrTitle;             
    LPCSTR          lpstrSearchDesc;        
    HICON           hIcon;                  
    POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria; 
    LPOCNCONNPROCA  lpfnConnect;            
    LPVOID          pvUserData;             
    DWORD           dwShareMode;            
    DWORD           dwPreferredProtocols;   
                                            
    LPSTR           lpstrRdr;               
    DWORD           nMaxRdr;                
    LPSTR           lpstrCard;              
    DWORD           nMaxCard;               
    DWORD           dwActiveProtocol;       
    SCARDHANDLE     hCardHandle;            
} OPENCARDNAME_EXA, *POPENCARDNAME_EXA, *LPOPENCARDNAME_EXA;
typedef struct {
    DWORD           dwStructSize;           
    SCARDCONTEXT    hSCardContext;          
    HWND            hwndOwner;              
    DWORD           dwFlags;                
    LPCWSTR         lpstrTitle;             
    LPCWSTR         lpstrSearchDesc;        
    HICON           hIcon;                  
    POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria; 
    LPOCNCONNPROCW  lpfnConnect;            
    LPVOID          pvUserData;             
    DWORD           dwShareMode;            
    DWORD           dwPreferredProtocols;   
                                            
    LPWSTR          lpstrRdr;               
    DWORD           nMaxRdr;                
    LPWSTR          lpstrCard;              
    DWORD           nMaxCard;               
    DWORD           dwActiveProtocol;       
    SCARDHANDLE     hCardHandle;            
} OPENCARDNAME_EXW, *POPENCARDNAME_EXW, *LPOPENCARDNAME_EXW;





typedef OPENCARDNAME_EXA OPENCARDNAME_EX;
typedef POPENCARDNAME_EXA POPENCARDNAME_EX;
typedef LPOPENCARDNAME_EXA LPOPENCARDNAME_EX;
#line 959 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"













extern  LONG __stdcall
SCardUIDlgSelectCardA(
    LPOPENCARDNAME_EXA);
extern  LONG __stdcall
SCardUIDlgSelectCardW(
    LPOPENCARDNAME_EXW);




#line 983 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"







typedef struct {
    DWORD           dwStructSize;
    HWND            hwndOwner;
    SCARDCONTEXT    hSCardContext;
    LPSTR           lpstrGroupNames;
    DWORD           nMaxGroupNames;
    LPSTR           lpstrCardNames;
    DWORD           nMaxCardNames;
    LPCGUID         rgguidInterfaces;
    DWORD           cguidInterfaces;
    LPSTR           lpstrRdr;
    DWORD           nMaxRdr;
    LPSTR           lpstrCard;
    DWORD           nMaxCard;
    LPCSTR          lpstrTitle;
    DWORD           dwFlags;
    LPVOID          pvUserData;
    DWORD           dwShareMode;
    DWORD           dwPreferredProtocols;
    DWORD           dwActiveProtocol;
    LPOCNCONNPROCA  lpfnConnect;
    LPOCNCHKPROC    lpfnCheck;
    LPOCNDSCPROC    lpfnDisconnect;
    SCARDHANDLE     hCardHandle;
} OPENCARDNAMEA, *POPENCARDNAMEA, *LPOPENCARDNAMEA;
typedef struct {
    DWORD           dwStructSize;
    HWND            hwndOwner;
    SCARDCONTEXT    hSCardContext;
    LPWSTR          lpstrGroupNames;
    DWORD           nMaxGroupNames;
    LPWSTR          lpstrCardNames;
    DWORD           nMaxCardNames;
    LPCGUID         rgguidInterfaces;
    DWORD           cguidInterfaces;
    LPWSTR          lpstrRdr;
    DWORD           nMaxRdr;
    LPWSTR          lpstrCard;
    DWORD           nMaxCard;
    LPCWSTR         lpstrTitle;
    DWORD           dwFlags;
    LPVOID          pvUserData;
    DWORD           dwShareMode;
    DWORD           dwPreferredProtocols;
    DWORD           dwActiveProtocol;
    LPOCNCONNPROCW  lpfnConnect;
    LPOCNCHKPROC    lpfnCheck;
    LPOCNDSCPROC    lpfnDisconnect;
    SCARDHANDLE     hCardHandle;
} OPENCARDNAMEW, *POPENCARDNAMEW, *LPOPENCARDNAMEW;





typedef OPENCARDNAMEA OPENCARDNAME;
typedef POPENCARDNAMEA POPENCARDNAME;
typedef LPOPENCARDNAMEA LPOPENCARDNAME;
#line 1049 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"









extern  LONG __stdcall
GetOpenCardNameA(
    LPOPENCARDNAMEA);
extern  LONG __stdcall
GetOpenCardNameW(
    LPOPENCARDNAMEW);




#line 1069 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"

extern  LONG __stdcall
SCardDlgExtendedError (void);




#line 1077 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winscard.h"


#line 199 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"


















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"






















#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"









#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"
#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"



#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"























#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack4.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack4.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack4.h"
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"


















#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"



struct _PSP;
typedef struct _PSP * HPROPSHEETPAGE;


struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;
#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"

typedef UINT (__stdcall *LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA *ppsp);
typedef UINT (__stdcall *LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW *ppsp);





#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"



















#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"


#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"




#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"










typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;


#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"












































#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"





#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"

typedef struct _PROPSHEETPAGEA_V1
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEA_V1, *LPPROPSHEETPAGEA_V1;
typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;

typedef struct _PROPSHEETPAGEA
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR           pszHeaderTitle;    
    LPCSTR           pszHeaderSubTitle; 
} PROPSHEETPAGEA_V2, *LPPROPSHEETPAGEA_V2;
typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;

typedef struct _PROPSHEETPAGEA_V3
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR           pszHeaderTitle;    
    LPCSTR           pszHeaderSubTitle; 

    HANDLE           hActCtx;
} PROPSHEETPAGEA_V3, *LPPROPSHEETPAGEA_V3;
typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;


typedef struct _PROPSHEETPAGEW_V1
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEW_V1, *LPPROPSHEETPAGEW_V1;
typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;

typedef struct _PROPSHEETPAGEW
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR           pszHeaderTitle;    
    LPCWSTR           pszHeaderSubTitle; 
} PROPSHEETPAGEW_V2, *LPPROPSHEETPAGEW_V2;
typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;

typedef struct _PROPSHEETPAGEW_V3
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR           pszHeaderTitle;    
    LPCWSTR           pszHeaderSubTitle; 

    HANDLE           hActCtx;
} PROPSHEETPAGEW_V3, *LPPROPSHEETPAGEW_V3;
typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;

typedef    PROPSHEETPAGEA_V3    PROPSHEETPAGEA_LATEST;
typedef    PROPSHEETPAGEW_V3    PROPSHEETPAGEW_LATEST;
typedef  LPPROPSHEETPAGEA_V3  LPPROPSHEETPAGEA_LATEST;
typedef  LPPROPSHEETPAGEW_V3  LPPROPSHEETPAGEW_LATEST;
typedef LPCPROPSHEETPAGEA_V3 LPCPROPSHEETPAGEA_LATEST;
typedef LPCPROPSHEETPAGEW_V3 LPCPROPSHEETPAGEW_LATEST;








#line 267 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"
typedef    PROPSHEETPAGEA_V2    PROPSHEETPAGEA;
typedef    PROPSHEETPAGEW_V2    PROPSHEETPAGEW;
typedef  LPPROPSHEETPAGEA_V2  LPPROPSHEETPAGEA;
typedef  LPPROPSHEETPAGEW_V2  LPPROPSHEETPAGEW;
typedef LPCPROPSHEETPAGEA_V2 LPCPROPSHEETPAGEA;
typedef LPCPROPSHEETPAGEW_V2 LPCPROPSHEETPAGEW;







#line 281 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"









#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"





































#line 329 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"




















#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"

#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"









#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"






#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"


typedef int (__stdcall *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);







typedef struct _PROPSHEETHEADERA 
{
        DWORD           dwSize;
        DWORD           dwFlags;
        HWND            hwndParent;
        HINSTANCE       hInstance;
        union 
        {
            HICON       hIcon;
            LPCSTR      pszIcon;
        } ;
        LPCSTR          pszCaption;

        UINT            nPages;
        union 
        {
            UINT        nStartPage;
            LPCSTR      pStartPage;
        } ;
        union 
        {
            LPCPROPSHEETPAGEA ppsp;
            HPROPSHEETPAGE *phpage;
        } ;
        PFNPROPSHEETCALLBACK pfnCallback;


        union 
        {
            HBITMAP hbmWatermark;
            LPCSTR pszbmWatermark;
        } ;
        HPALETTE hplWatermark;
        union 
        {
            HBITMAP hbmHeader;     
            LPCSTR pszbmHeader;
        } ;
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"
} PROPSHEETHEADERA, *LPPROPSHEETHEADERA;

typedef const PROPSHEETHEADERA *LPCPROPSHEETHEADERA;

typedef struct _PROPSHEETHEADERW 
{
        DWORD           dwSize;
        DWORD           dwFlags;
        HWND            hwndParent;
        HINSTANCE       hInstance;
        union 
        {
            HICON       hIcon;
            LPCWSTR     pszIcon;
        } ;
        LPCWSTR         pszCaption;


        UINT            nPages;
        union 
        {
            UINT        nStartPage;
            LPCWSTR     pStartPage;
        } ;
        union 
        {
            LPCPROPSHEETPAGEW ppsp;
            HPROPSHEETPAGE *phpage;
        } ;
        PFNPROPSHEETCALLBACK pfnCallback;


        union 
        {
            HBITMAP hbmWatermark;
            LPCWSTR pszbmWatermark;
        } ;
        HPALETTE hplWatermark;
        union 
        {
            HBITMAP hbmHeader;
            LPCWSTR pszbmHeader;
        } ;
#line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"
} PROPSHEETHEADERW, *LPPROPSHEETHEADERW;
typedef const PROPSHEETHEADERW *LPCPROPSHEETHEADERW;











#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"













#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"














#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"


__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer);
__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
__declspec(dllimport) BOOL           __stdcall DestroyPropertySheetPage(HPROPSHEETPAGE);

__declspec(dllimport) INT_PTR        __stdcall PropertySheetA(LPCPROPSHEETHEADERA);

__declspec(dllimport) INT_PTR        __stdcall PropertySheetW(LPCPROPSHEETHEADERW);







#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"



typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);


typedef struct _PSHNOTIFY
{
    NMHDR hdr;
    LPARAM lParam;
} PSHNOTIFY, *LPPSHNOTIFY;


















#line 553 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"



#line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"
































































#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"












































#line 667 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"






























#line 698 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"












#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"



































#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"































































































































































































































































































































#line 1067 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"
#line 1068 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"







#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 1076 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"


#line 1079 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"


#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"
#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"





typedef struct _PRINTER_INFO_1A {
    DWORD   Flags;
    LPSTR   pDescription;
    LPSTR   pName;
    LPSTR   pComment;
} PRINTER_INFO_1A, *PPRINTER_INFO_1A, *LPPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W {
    DWORD   Flags;
    LPWSTR  pDescription;
    LPWSTR  pName;
    LPWSTR  pComment;
} PRINTER_INFO_1W, *PPRINTER_INFO_1W, *LPPRINTER_INFO_1W;





typedef PRINTER_INFO_1A PRINTER_INFO_1;
typedef PPRINTER_INFO_1A PPRINTER_INFO_1;
typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1;
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _PRINTER_INFO_2A {
    LPSTR     pServerName;
    LPSTR     pPrinterName;
    LPSTR     pShareName;
    LPSTR     pPortName;
    LPSTR     pDriverName;
    LPSTR     pComment;
    LPSTR     pLocation;
    LPDEVMODEA pDevMode;
    LPSTR     pSepFile;
    LPSTR     pPrintProcessor;
    LPSTR     pDatatype;
    LPSTR     pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD   Attributes;
    DWORD   Priority;
    DWORD   DefaultPriority;
    DWORD   StartTime;
    DWORD   UntilTime;
    DWORD   Status;
    DWORD   cJobs;
    DWORD   AveragePPM;
} PRINTER_INFO_2A, *PPRINTER_INFO_2A, *LPPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W {
    LPWSTR    pServerName;
    LPWSTR    pPrinterName;
    LPWSTR    pShareName;
    LPWSTR    pPortName;
    LPWSTR    pDriverName;
    LPWSTR    pComment;
    LPWSTR    pLocation;
    LPDEVMODEW pDevMode;
    LPWSTR    pSepFile;
    LPWSTR    pPrintProcessor;
    LPWSTR    pDatatype;
    LPWSTR    pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD   Attributes;
    DWORD   Priority;
    DWORD   DefaultPriority;
    DWORD   StartTime;
    DWORD   UntilTime;
    DWORD   Status;
    DWORD   cJobs;
    DWORD   AveragePPM;
} PRINTER_INFO_2W, *PPRINTER_INFO_2W, *LPPRINTER_INFO_2W;





typedef PRINTER_INFO_2A PRINTER_INFO_2;
typedef PPRINTER_INFO_2A PPRINTER_INFO_2;
typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2;
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _PRINTER_INFO_3 {
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
} PRINTER_INFO_3, *PPRINTER_INFO_3, *LPPRINTER_INFO_3;

typedef struct _PRINTER_INFO_4A {
    LPSTR   pPrinterName;
    LPSTR   pServerName;
    DWORD   Attributes;
} PRINTER_INFO_4A, *PPRINTER_INFO_4A, *LPPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W {
    LPWSTR  pPrinterName;
    LPWSTR  pServerName;
    DWORD   Attributes;
} PRINTER_INFO_4W, *PPRINTER_INFO_4W, *LPPRINTER_INFO_4W;





typedef PRINTER_INFO_4A PRINTER_INFO_4;
typedef PPRINTER_INFO_4A PPRINTER_INFO_4;
typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4;
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _PRINTER_INFO_5A {
    LPSTR   pPrinterName;
    LPSTR   pPortName;
    DWORD   Attributes;
    DWORD   DeviceNotSelectedTimeout;
    DWORD   TransmissionRetryTimeout;
} PRINTER_INFO_5A, *PPRINTER_INFO_5A, *LPPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W {
    LPWSTR  pPrinterName;
    LPWSTR  pPortName;
    DWORD   Attributes;
    DWORD   DeviceNotSelectedTimeout;
    DWORD   TransmissionRetryTimeout;
} PRINTER_INFO_5W, *PPRINTER_INFO_5W, *LPPRINTER_INFO_5W;





typedef PRINTER_INFO_5A PRINTER_INFO_5;
typedef PPRINTER_INFO_5A PPRINTER_INFO_5;
typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5;
#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _PRINTER_INFO_6 {
    DWORD   dwStatus;
} PRINTER_INFO_6, *PPRINTER_INFO_6, *LPPRINTER_INFO_6;

typedef struct _PRINTER_INFO_7A {
  LPSTR    pszObjectGUID;
  DWORD    dwAction;
} PRINTER_INFO_7A, *PPRINTER_INFO_7A, *LPPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W {
  LPWSTR   pszObjectGUID;
  DWORD    dwAction;
} PRINTER_INFO_7W, *PPRINTER_INFO_7W, *LPPRINTER_INFO_7W;





typedef PRINTER_INFO_7A PRINTER_INFO_7;
typedef PPRINTER_INFO_7A PPRINTER_INFO_7;
typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7;
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"







typedef struct _PRINTER_INFO_8A {
    LPDEVMODEA pDevMode;
} PRINTER_INFO_8A, *PPRINTER_INFO_8A, *LPPRINTER_INFO_8A;
typedef struct _PRINTER_INFO_8W {
    LPDEVMODEW pDevMode;
} PRINTER_INFO_8W, *PPRINTER_INFO_8W, *LPPRINTER_INFO_8W;





typedef PRINTER_INFO_8A PRINTER_INFO_8;
typedef PPRINTER_INFO_8A PPRINTER_INFO_8;
typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8;
#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _PRINTER_INFO_9A {
    LPDEVMODEA pDevMode;
} PRINTER_INFO_9A, *PPRINTER_INFO_9A, *LPPRINTER_INFO_9A;
typedef struct _PRINTER_INFO_9W {
    LPDEVMODEW pDevMode;
} PRINTER_INFO_9W, *PPRINTER_INFO_9W, *LPPRINTER_INFO_9W;





typedef PRINTER_INFO_9A PRINTER_INFO_9;
typedef PPRINTER_INFO_9A PPRINTER_INFO_9;
typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9;
#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"
























































typedef struct _JOB_INFO_1A {
   DWORD    JobId;
   LPSTR      pPrinterName;
   LPSTR      pMachineName;
   LPSTR      pUserName;
   LPSTR      pDocument;
   LPSTR      pDatatype;
   LPSTR      pStatus;
   DWORD    Status;
   DWORD    Priority;
   DWORD    Position;
   DWORD    TotalPages;
   DWORD    PagesPrinted;
   SYSTEMTIME Submitted;
} JOB_INFO_1A, *PJOB_INFO_1A, *LPJOB_INFO_1A;
typedef struct _JOB_INFO_1W {
   DWORD    JobId;
   LPWSTR     pPrinterName;
   LPWSTR     pMachineName;
   LPWSTR     pUserName;
   LPWSTR     pDocument;
   LPWSTR     pDatatype;
   LPWSTR     pStatus;
   DWORD    Status;
   DWORD    Priority;
   DWORD    Position;
   DWORD    TotalPages;
   DWORD    PagesPrinted;
   SYSTEMTIME Submitted;
} JOB_INFO_1W, *PJOB_INFO_1W, *LPJOB_INFO_1W;





typedef JOB_INFO_1A JOB_INFO_1;
typedef PJOB_INFO_1A PJOB_INFO_1;
typedef LPJOB_INFO_1A LPJOB_INFO_1;
#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _JOB_INFO_2A {
   DWORD    JobId;
   LPSTR      pPrinterName;
   LPSTR      pMachineName;
   LPSTR      pUserName;
   LPSTR      pDocument;
   LPSTR      pNotifyName;
   LPSTR      pDatatype;
   LPSTR      pPrintProcessor;
   LPSTR      pParameters;
   LPSTR      pDriverName;
   LPDEVMODEA pDevMode;
   LPSTR      pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD    Status;
   DWORD    Priority;
   DWORD    Position;
   DWORD    StartTime;
   DWORD    UntilTime;
   DWORD    TotalPages;
   DWORD    Size;
   SYSTEMTIME Submitted;    
   DWORD    Time;           
   DWORD    PagesPrinted;
} JOB_INFO_2A, *PJOB_INFO_2A, *LPJOB_INFO_2A;
typedef struct _JOB_INFO_2W {
   DWORD    JobId;
   LPWSTR     pPrinterName;
   LPWSTR     pMachineName;
   LPWSTR     pUserName;
   LPWSTR     pDocument;
   LPWSTR     pNotifyName;
   LPWSTR     pDatatype;
   LPWSTR     pPrintProcessor;
   LPWSTR     pParameters;
   LPWSTR     pDriverName;
   LPDEVMODEW pDevMode;
   LPWSTR     pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD    Status;
   DWORD    Priority;
   DWORD    Position;
   DWORD    StartTime;
   DWORD    UntilTime;
   DWORD    TotalPages;
   DWORD    Size;
   SYSTEMTIME Submitted;    
   DWORD    Time;           
   DWORD    PagesPrinted;
} JOB_INFO_2W, *PJOB_INFO_2W, *LPJOB_INFO_2W;





typedef JOB_INFO_2A JOB_INFO_2;
typedef PJOB_INFO_2A PJOB_INFO_2;
typedef LPJOB_INFO_2A LPJOB_INFO_2;
#line 366 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _JOB_INFO_3 {
    DWORD   JobId;
    DWORD   NextJobId;
    DWORD   Reserved;
} JOB_INFO_3, *PJOB_INFO_3, *LPJOB_INFO_3;

























typedef struct _ADDJOB_INFO_1A {
    LPSTR     Path;
    DWORD   JobId;
} ADDJOB_INFO_1A, *PADDJOB_INFO_1A, *LPADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W {
    LPWSTR    Path;
    DWORD   JobId;
} ADDJOB_INFO_1W, *PADDJOB_INFO_1W, *LPADDJOB_INFO_1W;





typedef ADDJOB_INFO_1A ADDJOB_INFO_1;
typedef PADDJOB_INFO_1A PADDJOB_INFO_1;
typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1;
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"


typedef struct _DRIVER_INFO_1A {
    LPSTR     pName;              
} DRIVER_INFO_1A, *PDRIVER_INFO_1A, *LPDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W {
    LPWSTR    pName;              
} DRIVER_INFO_1W, *PDRIVER_INFO_1W, *LPDRIVER_INFO_1W;





typedef DRIVER_INFO_1A DRIVER_INFO_1;
typedef PDRIVER_INFO_1A PDRIVER_INFO_1;
typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1;
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _DRIVER_INFO_2A {
    DWORD   cVersion;
    LPSTR     pName;              
    LPSTR     pEnvironment;       
    LPSTR     pDriverPath;        
    LPSTR     pDataFile;          
    LPSTR     pConfigFile;        
} DRIVER_INFO_2A, *PDRIVER_INFO_2A, *LPDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W {
    DWORD   cVersion;
    LPWSTR    pName;              
    LPWSTR    pEnvironment;       
    LPWSTR    pDriverPath;        
    LPWSTR    pDataFile;          
    LPWSTR    pConfigFile;        
} DRIVER_INFO_2W, *PDRIVER_INFO_2W, *LPDRIVER_INFO_2W;





typedef DRIVER_INFO_2A DRIVER_INFO_2;
typedef PDRIVER_INFO_2A PDRIVER_INFO_2;
typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2;
#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _DRIVER_INFO_3A {
    DWORD   cVersion;
    LPSTR     pName;                    
    LPSTR     pEnvironment;             
    LPSTR     pDriverPath;              
    LPSTR     pDataFile;                
    LPSTR     pConfigFile;              
    LPSTR     pHelpFile;                
    LPSTR     pDependentFiles;          
    LPSTR     pMonitorName;             
    LPSTR     pDefaultDataType;         
} DRIVER_INFO_3A, *PDRIVER_INFO_3A, *LPDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W {
    DWORD   cVersion;
    LPWSTR    pName;                    
    LPWSTR    pEnvironment;             
    LPWSTR    pDriverPath;              
    LPWSTR    pDataFile;                
    LPWSTR    pConfigFile;              
    LPWSTR    pHelpFile;                
    LPWSTR    pDependentFiles;          
    LPWSTR    pMonitorName;             
    LPWSTR    pDefaultDataType;         
} DRIVER_INFO_3W, *PDRIVER_INFO_3W, *LPDRIVER_INFO_3W;





typedef DRIVER_INFO_3A DRIVER_INFO_3;
typedef PDRIVER_INFO_3A PDRIVER_INFO_3;
typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3;
#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _DRIVER_INFO_4A {
    DWORD   cVersion;
    LPSTR     pName;                    
    LPSTR     pEnvironment;             
    LPSTR     pDriverPath;              
    LPSTR     pDataFile;                
    LPSTR     pConfigFile;              
    LPSTR     pHelpFile;                
    LPSTR     pDependentFiles;          
    LPSTR     pMonitorName;             
    LPSTR     pDefaultDataType;         
    LPSTR     pszzPreviousNames;        
} DRIVER_INFO_4A, *PDRIVER_INFO_4A, *LPDRIVER_INFO_4A;
typedef struct _DRIVER_INFO_4W {
    DWORD   cVersion;
    LPWSTR    pName;                    
    LPWSTR    pEnvironment;             
    LPWSTR    pDriverPath;              
    LPWSTR    pDataFile;                
    LPWSTR    pConfigFile;              
    LPWSTR    pHelpFile;                
    LPWSTR    pDependentFiles;          
    LPWSTR    pMonitorName;             
    LPWSTR    pDefaultDataType;         
    LPWSTR    pszzPreviousNames;        
} DRIVER_INFO_4W, *PDRIVER_INFO_4W, *LPDRIVER_INFO_4W;





typedef DRIVER_INFO_4A DRIVER_INFO_4;
typedef PDRIVER_INFO_4A PDRIVER_INFO_4;
typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4;
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _DRIVER_INFO_5A {
    DWORD   cVersion;
    LPSTR     pName;                    
    LPSTR     pEnvironment;             
    LPSTR     pDriverPath;              
    LPSTR     pDataFile;                
    LPSTR     pConfigFile;              
    DWORD     dwDriverAttributes;       
    DWORD     dwConfigVersion;          
    DWORD     dwDriverVersion;          
} DRIVER_INFO_5A, *PDRIVER_INFO_5A, *LPDRIVER_INFO_5A;
typedef struct _DRIVER_INFO_5W {
    DWORD   cVersion;
    LPWSTR    pName;                    
    LPWSTR    pEnvironment;             
    LPWSTR    pDriverPath;              
    LPWSTR    pDataFile;                
    LPWSTR    pConfigFile;              
    DWORD     dwDriverAttributes;       
    DWORD     dwConfigVersion;          
    DWORD     dwDriverVersion;          
} DRIVER_INFO_5W, *PDRIVER_INFO_5W, *LPDRIVER_INFO_5W;





typedef DRIVER_INFO_5A DRIVER_INFO_5;
typedef PDRIVER_INFO_5A PDRIVER_INFO_5;
typedef LPDRIVER_INFO_5A LPDRIVER_INFO_5;
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _DRIVER_INFO_6A {
    DWORD     cVersion;
    LPSTR     pName;                    
    LPSTR     pEnvironment;             
    LPSTR     pDriverPath;              
    LPSTR     pDataFile;                
    LPSTR     pConfigFile;              
    LPSTR     pHelpFile;                
    LPSTR     pDependentFiles;          
    LPSTR     pMonitorName;             
    LPSTR     pDefaultDataType;         
    LPSTR     pszzPreviousNames;        
    FILETIME  ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPSTR      pszMfgName;
    LPSTR      pszOEMUrl;
    LPSTR      pszHardwareID;
    LPSTR      pszProvider;
} DRIVER_INFO_6A, *PDRIVER_INFO_6A, *LPDRIVER_INFO_6A;
typedef struct _DRIVER_INFO_6W {
    DWORD     cVersion;
    LPWSTR    pName;                    
    LPWSTR    pEnvironment;             
    LPWSTR    pDriverPath;              
    LPWSTR    pDataFile;                
    LPWSTR    pConfigFile;              
    LPWSTR    pHelpFile;                
    LPWSTR    pDependentFiles;          
    LPWSTR    pMonitorName;             
    LPWSTR    pDefaultDataType;         
    LPWSTR    pszzPreviousNames;        
    FILETIME  ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPWSTR     pszMfgName;
    LPWSTR     pszOEMUrl;
    LPWSTR     pszHardwareID;
    LPWSTR     pszProvider;
} DRIVER_INFO_6W, *PDRIVER_INFO_6W, *LPDRIVER_INFO_6W;





typedef DRIVER_INFO_6A DRIVER_INFO_6;
typedef PDRIVER_INFO_6A PDRIVER_INFO_6;
typedef LPDRIVER_INFO_6A LPDRIVER_INFO_6;
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"




















typedef struct _DOC_INFO_1A {
    LPSTR     pDocName;
    LPSTR     pOutputFile;
    LPSTR     pDatatype;
} DOC_INFO_1A, *PDOC_INFO_1A, *LPDOC_INFO_1A;
typedef struct _DOC_INFO_1W {
    LPWSTR    pDocName;
    LPWSTR    pOutputFile;
    LPWSTR    pDatatype;
} DOC_INFO_1W, *PDOC_INFO_1W, *LPDOC_INFO_1W;





typedef DOC_INFO_1A DOC_INFO_1;
typedef PDOC_INFO_1A PDOC_INFO_1;
typedef LPDOC_INFO_1A LPDOC_INFO_1;
#line 646 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _FORM_INFO_1A {
    DWORD   Flags;
    LPSTR     pName;
    SIZEL   Size;
    RECTL   ImageableArea;
} FORM_INFO_1A, *PFORM_INFO_1A, *LPFORM_INFO_1A;
typedef struct _FORM_INFO_1W {
    DWORD   Flags;
    LPWSTR    pName;
    SIZEL   Size;
    RECTL   ImageableArea;
} FORM_INFO_1W, *PFORM_INFO_1W, *LPFORM_INFO_1W;





typedef FORM_INFO_1A FORM_INFO_1;
typedef PFORM_INFO_1A PFORM_INFO_1;
typedef LPFORM_INFO_1A LPFORM_INFO_1;
#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _DOC_INFO_2A {
    LPSTR     pDocName;
    LPSTR     pOutputFile;
    LPSTR     pDatatype;
    DWORD   dwMode;
    DWORD   JobId;
} DOC_INFO_2A, *PDOC_INFO_2A, *LPDOC_INFO_2A;
typedef struct _DOC_INFO_2W {
    LPWSTR    pDocName;
    LPWSTR    pOutputFile;
    LPWSTR    pDatatype;
    DWORD   dwMode;
    DWORD   JobId;
} DOC_INFO_2W, *PDOC_INFO_2W, *LPDOC_INFO_2W;





typedef DOC_INFO_2A DOC_INFO_2;
typedef PDOC_INFO_2A PDOC_INFO_2;
typedef LPDOC_INFO_2A LPDOC_INFO_2;
#line 692 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"






typedef struct _DOC_INFO_3A {
    LPSTR     pDocName;
    LPSTR     pOutputFile;
    LPSTR     pDatatype;
    DWORD     dwFlags;
} DOC_INFO_3A, *PDOC_INFO_3A, *LPDOC_INFO_3A;
typedef struct _DOC_INFO_3W {
    LPWSTR    pDocName;
    LPWSTR    pOutputFile;
    LPWSTR    pDatatype;
    DWORD     dwFlags;
} DOC_INFO_3W, *PDOC_INFO_3W, *LPDOC_INFO_3W;





typedef DOC_INFO_3A DOC_INFO_3;
typedef PDOC_INFO_3A PDOC_INFO_3;
typedef LPDOC_INFO_3A LPDOC_INFO_3;
#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"







typedef struct _PRINTPROCESSOR_INFO_1A {
    LPSTR     pName;
} PRINTPROCESSOR_INFO_1A, *PPRINTPROCESSOR_INFO_1A, *LPPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W {
    LPWSTR    pName;
} PRINTPROCESSOR_INFO_1W, *PPRINTPROCESSOR_INFO_1W, *LPPRINTPROCESSOR_INFO_1W;





typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1;
typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1;
typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1;
#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _PRINTPROCESSOR_CAPS_1 {
    DWORD     dwLevel;
    DWORD     dwNupOptions;
    DWORD     dwPageOrderFlags;
    DWORD     dwNumberOfCopies;
} PRINTPROCESSOR_CAPS_1, *PPRINTPROCESSOR_CAPS_1;




typedef struct _PORT_INFO_1A {
    LPSTR     pName;
} PORT_INFO_1A, *PPORT_INFO_1A, *LPPORT_INFO_1A;
typedef struct _PORT_INFO_1W {
    LPWSTR    pName;
} PORT_INFO_1W, *PPORT_INFO_1W, *LPPORT_INFO_1W;





typedef PORT_INFO_1A PORT_INFO_1;
typedef PPORT_INFO_1A PPORT_INFO_1;
typedef LPPORT_INFO_1A LPPORT_INFO_1;
#line 767 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _PORT_INFO_2A {
    LPSTR     pPortName;
    LPSTR     pMonitorName;
    LPSTR     pDescription;
    DWORD     fPortType;
    DWORD     Reserved;
} PORT_INFO_2A, *PPORT_INFO_2A, *LPPORT_INFO_2A;
typedef struct _PORT_INFO_2W {
    LPWSTR    pPortName;
    LPWSTR    pMonitorName;
    LPWSTR    pDescription;
    DWORD     fPortType;
    DWORD     Reserved;
} PORT_INFO_2W, *PPORT_INFO_2W, *LPPORT_INFO_2W;





typedef PORT_INFO_2A PORT_INFO_2;
typedef PPORT_INFO_2A PPORT_INFO_2;
typedef LPPORT_INFO_2A LPPORT_INFO_2;
#line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"






typedef struct _PORT_INFO_3A {
    DWORD   dwStatus;
    LPSTR   pszStatus;
    DWORD   dwSeverity;
} PORT_INFO_3A, *PPORT_INFO_3A, *LPPORT_INFO_3A;
typedef struct _PORT_INFO_3W {
    DWORD   dwStatus;
    LPWSTR  pszStatus;
    DWORD   dwSeverity;
} PORT_INFO_3W, *PPORT_INFO_3W, *LPPORT_INFO_3W;





typedef PORT_INFO_3A PORT_INFO_3;
typedef PPORT_INFO_3A PPORT_INFO_3;
typedef LPPORT_INFO_3A LPPORT_INFO_3;
#line 816 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"




















typedef struct _MONITOR_INFO_1A{
    LPSTR     pName;
} MONITOR_INFO_1A, *PMONITOR_INFO_1A, *LPMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W{
    LPWSTR    pName;
} MONITOR_INFO_1W, *PMONITOR_INFO_1W, *LPMONITOR_INFO_1W;





typedef MONITOR_INFO_1A MONITOR_INFO_1;
typedef PMONITOR_INFO_1A PMONITOR_INFO_1;
typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1;
#line 851 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _MONITOR_INFO_2A{
    LPSTR     pName;
    LPSTR     pEnvironment;
    LPSTR     pDLLName;
} MONITOR_INFO_2A, *PMONITOR_INFO_2A, *LPMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W{
    LPWSTR    pName;
    LPWSTR    pEnvironment;
    LPWSTR    pDLLName;
} MONITOR_INFO_2W, *PMONITOR_INFO_2W, *LPMONITOR_INFO_2W;





typedef MONITOR_INFO_2A MONITOR_INFO_2;
typedef PMONITOR_INFO_2A PMONITOR_INFO_2;
typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2;
#line 871 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _DATATYPES_INFO_1A{
    LPSTR     pName;
} DATATYPES_INFO_1A, *PDATATYPES_INFO_1A, *LPDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W{
    LPWSTR    pName;
} DATATYPES_INFO_1W, *PDATATYPES_INFO_1W, *LPDATATYPES_INFO_1W;





typedef DATATYPES_INFO_1A DATATYPES_INFO_1;
typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1;
typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1;
#line 887 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _PRINTER_DEFAULTSA{
    LPSTR         pDatatype;
    LPDEVMODEA pDevMode;
    ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSA, *PPRINTER_DEFAULTSA, *LPPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW{
    LPWSTR        pDatatype;
    LPDEVMODEW pDevMode;
    ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSW, *PPRINTER_DEFAULTSW, *LPPRINTER_DEFAULTSW;





typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS;
typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS;
typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS;
#line 907 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _PRINTER_ENUM_VALUESA {
    LPSTR   pValueName;
    DWORD   cbValueName;
    DWORD   dwType;
    LPBYTE  pData;
    DWORD   cbData;
} PRINTER_ENUM_VALUESA, *PPRINTER_ENUM_VALUESA, *LPPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW {
    LPWSTR  pValueName;
    DWORD   cbValueName;
    DWORD   dwType;
    LPBYTE  pData;
    DWORD   cbData;
} PRINTER_ENUM_VALUESW, *PPRINTER_ENUM_VALUESW, *LPPRINTER_ENUM_VALUESW;





typedef PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES;
typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES;
typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES;
#line 931 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
EnumPrintersA (
         DWORD Flags,
         LPSTR Name,
         DWORD Level,
             LPBYTE pPrinterEnum,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);
BOOL
__stdcall
EnumPrintersW (
         DWORD Flags,
         LPWSTR Name,
         DWORD Level,
             LPBYTE pPrinterEnum,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);




#line 959 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"































BOOL
__stdcall
OpenPrinterA (
        LPSTR pPrinterName,
        LPHANDLE phPrinter,
          LPPRINTER_DEFAULTSA pDefault
);
BOOL
__stdcall
OpenPrinterW (
        LPWSTR pPrinterName,
        LPHANDLE phPrinter,
          LPPRINTER_DEFAULTSW pDefault
);




#line 1009 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
ResetPrinterA (
        HANDLE   hPrinter,
          LPPRINTER_DEFAULTSA pDefault
);
BOOL
__stdcall
ResetPrinterW (
        HANDLE   hPrinter,
          LPPRINTER_DEFAULTSW pDefault
);




#line 1027 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
SetJobA (
         HANDLE hPrinter,
         DWORD JobId,
         DWORD Level,
           LPBYTE pJob,
         DWORD Command
);
BOOL
__stdcall
SetJobW (
         HANDLE hPrinter,
         DWORD JobId,
         DWORD Level,
           LPBYTE pJob,
         DWORD Command
);




#line 1051 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
GetJobA (
        HANDLE hPrinter,
        DWORD JobId,
        DWORD Level,
          LPBYTE pJob,
        DWORD cbBuf,
        LPDWORD pcbNeeded
);
BOOL
__stdcall
GetJobW (
        HANDLE hPrinter,
        DWORD JobId,
        DWORD Level,
          LPBYTE pJob,
        DWORD cbBuf,
        LPDWORD pcbNeeded
);




#line 1077 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
EnumJobsA (
         HANDLE hPrinter,
         DWORD FirstJob,
         DWORD NoJobs,
         DWORD Level,
           LPBYTE pJob,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);
BOOL
__stdcall
EnumJobsW (
         HANDLE hPrinter,
         DWORD FirstJob,
         DWORD NoJobs,
         DWORD Level,
           LPBYTE pJob,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);




#line 1107 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

HANDLE
__stdcall
AddPrinterA (
         LPSTR pName,
         DWORD Level,
         LPBYTE pPrinter
);
HANDLE
__stdcall
AddPrinterW (
         LPWSTR pName,
         DWORD Level,
         LPBYTE pPrinter
);




#line 1127 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
DeletePrinter (
        HANDLE hPrinter
);

BOOL
__stdcall
SetPrinterA (
         HANDLE hPrinter,
         DWORD Level,
         LPBYTE pPrinter,
         DWORD Command
);
BOOL
__stdcall
SetPrinterW (
         HANDLE hPrinter,
         DWORD Level,
         LPBYTE pPrinter,
         DWORD Command
);




#line 1155 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
GetPrinterA (
         HANDLE hPrinter,
         DWORD Level,
           LPBYTE pPrinter,
         DWORD cbBuf,
         LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterW (
         HANDLE hPrinter,
         DWORD Level,
           LPBYTE pPrinter,
         DWORD cbBuf,
         LPDWORD pcbNeeded
);




#line 1179 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
AddPrinterDriverA (
         LPSTR pName,
         DWORD Level,
         LPBYTE pDriverInfo
);
BOOL
__stdcall
AddPrinterDriverW (
         LPWSTR pName,
         DWORD Level,
         LPBYTE pDriverInfo
);




#line 1199 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"


BOOL
__stdcall
AddPrinterDriverExA (
         LPSTR pName,
         DWORD Level,
         LPBYTE pDriverInfo,
         DWORD dwFileCopyFlags
);
BOOL
__stdcall
AddPrinterDriverExW (
         LPWSTR pName,
         DWORD Level,
         LPBYTE pDriverInfo,
         DWORD dwFileCopyFlags
);




#line 1222 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
EnumPrinterDriversA (
         LPSTR pName,
           LPSTR pEnvironment,
         DWORD Level,
           LPBYTE pDriverInfo,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);
BOOL
__stdcall
EnumPrinterDriversW (
         LPWSTR pName,
           LPWSTR pEnvironment,
         DWORD Level,
           LPBYTE pDriverInfo,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);




#line 1250 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
GetPrinterDriverA (
         HANDLE hPrinter,
           LPSTR pEnvironment,
         DWORD Level,
           LPBYTE pDriverInfo,
         DWORD cbBuf,
         LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterDriverW (
         HANDLE hPrinter,
           LPWSTR pEnvironment,
         DWORD Level,
           LPBYTE pDriverInfo,
         DWORD cbBuf,
         LPDWORD pcbNeeded
);




#line 1276 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
GetPrinterDriverDirectoryA (
         LPSTR pName,
           LPSTR pEnvironment,
         DWORD Level,
           LPBYTE pDriverDirectory,
         DWORD cbBuf,
         LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterDriverDirectoryW (
         LPWSTR pName,
           LPWSTR pEnvironment,
         DWORD Level,
           LPBYTE pDriverDirectory,
         DWORD cbBuf,
         LPDWORD pcbNeeded
);




#line 1302 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
DeletePrinterDriverA (
         LPSTR pName,
           LPSTR pEnvironment,
         LPSTR pDriverName
);
BOOL
__stdcall
DeletePrinterDriverW (
         LPWSTR pName,
           LPWSTR pEnvironment,
         LPWSTR pDriverName
);




#line 1322 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
DeletePrinterDriverExA (
         LPSTR pName,
           LPSTR pEnvironment,
         LPSTR pDriverName,
         DWORD dwDeleteFlag,
         DWORD dwVersionFlag
);
BOOL
__stdcall
DeletePrinterDriverExW (
         LPWSTR pName,
           LPWSTR pEnvironment,
         LPWSTR pDriverName,
         DWORD dwDeleteFlag,
         DWORD dwVersionFlag
);




#line 1346 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"


BOOL
__stdcall
AddPrintProcessorA (
         LPSTR pName,
           LPSTR pEnvironment,
         LPSTR pPathName,
         LPSTR pPrintProcessorName
);
BOOL
__stdcall
AddPrintProcessorW (
         LPWSTR pName,
           LPWSTR pEnvironment,
         LPWSTR pPathName,
         LPWSTR pPrintProcessorName
);




#line 1369 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
EnumPrintProcessorsA (
         LPSTR pName,
           LPSTR pEnvironment,
         DWORD Level,
             LPBYTE pPrintProcessorInfo,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);
BOOL
__stdcall
EnumPrintProcessorsW (
         LPWSTR pName,
           LPWSTR pEnvironment,
         DWORD Level,
             LPBYTE pPrintProcessorInfo,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);




#line 1397 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
GetPrintProcessorDirectoryA (
         LPSTR pName,
           LPSTR pEnvironment,
         DWORD Level,
           LPBYTE pPrintProcessorInfo,
         DWORD cbBuf,
         LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrintProcessorDirectoryW (
         LPWSTR pName,
           LPWSTR pEnvironment,
         DWORD Level,
           LPBYTE pPrintProcessorInfo,
         DWORD cbBuf,
         LPDWORD pcbNeeded
);




#line 1423 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
EnumPrintProcessorDatatypesA (
         LPSTR pName,
         LPSTR pPrintProcessorName,
         DWORD Level,
             LPBYTE pDatatypes,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);
BOOL
__stdcall
EnumPrintProcessorDatatypesW (
         LPWSTR pName,
         LPWSTR pPrintProcessorName,
         DWORD Level,
             LPBYTE pDatatypes,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);




#line 1451 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
DeletePrintProcessorA (
         LPSTR pName,
           LPSTR pEnvironment,
         LPSTR pPrintProcessorName
);
BOOL
__stdcall
DeletePrintProcessorW (
         LPWSTR pName,
           LPWSTR pEnvironment,
         LPWSTR pPrintProcessorName
);




#line 1471 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

DWORD
__stdcall
StartDocPrinterA ( 
         HANDLE hPrinter,
         DWORD Level,
         LPBYTE pDocInfo
);
DWORD
__stdcall
StartDocPrinterW ( 
         HANDLE hPrinter,
         DWORD Level,
         LPBYTE pDocInfo
);




#line 1491 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
StartPagePrinter (
         HANDLE hPrinter
);

BOOL
__stdcall
WritePrinter (
         HANDLE hPrinter,
           LPVOID pBuf,
         DWORD cbBuf,
         LPDWORD pcWritten
);


BOOL
__stdcall
FlushPrinter (
         HANDLE hPrinter,
           LPVOID pBuf,
         DWORD cbBuf,
         LPDWORD pcWritten,
         DWORD cSleep
);

BOOL
__stdcall
EndPagePrinter (
        HANDLE hPrinter
);

BOOL
__stdcall
AbortPrinter (
        HANDLE hPrinter
);

BOOL
__stdcall
ReadPrinter (
         HANDLE  hPrinter,
           LPVOID pBuf,
         DWORD cbBuf,
         LPDWORD pNoBytesRead
);

BOOL
__stdcall
EndDocPrinter (
        HANDLE hPrinter
);

BOOL
__stdcall
AddJobA (
         HANDLE hPrinter,
         DWORD Level,
           LPBYTE pData,
         DWORD cbBuf,
         LPDWORD pcbNeeded
);
BOOL
__stdcall
AddJobW (
         HANDLE hPrinter,
         DWORD Level,
           LPBYTE pData,
         DWORD cbBuf,
         LPDWORD pcbNeeded
);




#line 1568 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
ScheduleJob (
         HANDLE hPrinter,
         DWORD JobId
);

BOOL
__stdcall
PrinterProperties (
         HWND hWnd,
         HANDLE hPrinter
);

LONG
__stdcall
DocumentPropertiesA (
         HWND hWnd,
           HANDLE hPrinter,
         LPSTR pDeviceName,
           PDEVMODEA pDevModeOutput,
           PDEVMODEA pDevModeInput,
         DWORD fMode
);
LONG
__stdcall
DocumentPropertiesW (
         HWND hWnd,
           HANDLE hPrinter,
         LPWSTR pDeviceName,
           PDEVMODEW pDevModeOutput,
           PDEVMODEW pDevModeInput,
         DWORD fMode
);




#line 1608 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

LONG
__stdcall
AdvancedDocumentPropertiesA (
         HWND hWnd,
           HANDLE hPrinter,
         LPSTR   pDeviceName,
           PDEVMODEA pDevModeOutput,
           PDEVMODEA pDevModeInput
);
LONG
__stdcall
AdvancedDocumentPropertiesW (
         HWND hWnd,
           HANDLE hPrinter,
         LPWSTR   pDeviceName,
           PDEVMODEW pDevModeOutput,
           PDEVMODEW pDevModeInput
);




#line 1632 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

LONG
ExtDeviceMode (
         HWND hWnd,
           HANDLE hInst,
           LPDEVMODEA pDevModeOutput,
         LPSTR pDeviceName,
           LPSTR pPort,
           LPDEVMODEA pDevModeInput,
           LPSTR pProfile,
         DWORD fMode
);


DWORD
__stdcall
GetPrinterDataA (
         HANDLE hPrinter,
           LPSTR pValueName,
           LPDWORD pType,
           LPBYTE pData,
         DWORD nSize,
         LPDWORD pcbNeeded
);
DWORD
__stdcall
GetPrinterDataW (
         HANDLE hPrinter,
           LPWSTR pValueName,
           LPDWORD pType,
           LPBYTE pData,
         DWORD nSize,
         LPDWORD pcbNeeded
);




#line 1671 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

DWORD
__stdcall
GetPrinterDataExA (
         HANDLE hPrinter,
           LPCSTR pKeyName,
           LPCSTR pValueName,
           LPDWORD pType,
           LPBYTE pData,
         DWORD nSize,
         LPDWORD pcbNeeded
);
DWORD
__stdcall
GetPrinterDataExW (
         HANDLE hPrinter,
           LPCWSTR pKeyName,
           LPCWSTR pValueName,
           LPDWORD pType,
           LPBYTE pData,
         DWORD nSize,
         LPDWORD pcbNeeded
);




#line 1699 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

DWORD
__stdcall
EnumPrinterDataA (
         HANDLE hPrinter,
         DWORD dwIndex,
             LPSTR pValueName,
         DWORD cbValueName,
         LPDWORD pcbValueName,
           LPDWORD pType,
             LPBYTE pData,
         DWORD cbData,
         LPDWORD pcbData
);
DWORD
__stdcall
EnumPrinterDataW (
         HANDLE hPrinter,
         DWORD dwIndex,
             LPWSTR pValueName,
         DWORD cbValueName,
         LPDWORD pcbValueName,
           LPDWORD pType,
             LPBYTE pData,
         DWORD cbData,
         LPDWORD pcbData
);




#line 1731 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

DWORD
__stdcall
EnumPrinterDataExA (
         HANDLE hPrinter,
         LPCSTR pKeyName,
             LPBYTE pEnumValues,
         DWORD cbEnumValues,
         LPDWORD pcbEnumValues,
         LPDWORD pnEnumValues
);
DWORD
__stdcall
EnumPrinterDataExW (
         HANDLE hPrinter,
         LPCWSTR pKeyName,
             LPBYTE pEnumValues,
         DWORD cbEnumValues,
         LPDWORD pcbEnumValues,
         LPDWORD pnEnumValues
);




#line 1757 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

DWORD
__stdcall
EnumPrinterKeyA (
         HANDLE hPrinter,
         LPCSTR pKeyName,
             LPSTR pSubkey,
         DWORD cbSubkey,
         LPDWORD pcbSubkey
);
DWORD
__stdcall
EnumPrinterKeyW (
         HANDLE hPrinter,
         LPCWSTR pKeyName,
             LPWSTR pSubkey,
         DWORD cbSubkey,
         LPDWORD pcbSubkey
);




#line 1781 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

DWORD
__stdcall
SetPrinterDataA (
         HANDLE hPrinter,
         LPSTR pValueName,
         DWORD Type,
           LPBYTE pData,
         DWORD cbData
);
DWORD
__stdcall
SetPrinterDataW (
         HANDLE hPrinter,
         LPWSTR pValueName,
         DWORD Type,
           LPBYTE pData,
         DWORD cbData
);




#line 1805 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

DWORD
__stdcall
SetPrinterDataExA (
         HANDLE hPrinter,
           LPCSTR pKeyName,
         LPCSTR pValueName,
         DWORD Type,
           LPBYTE pData,
         DWORD cbData
);
DWORD
__stdcall
SetPrinterDataExW (
         HANDLE hPrinter,
           LPCWSTR pKeyName,
         LPCWSTR pValueName,
         DWORD Type,
           LPBYTE pData,
         DWORD cbData
);




#line 1831 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

DWORD
__stdcall
DeletePrinterDataA (
         HANDLE hPrinter,
         LPSTR pValueName
);
DWORD
__stdcall
DeletePrinterDataW (
         HANDLE hPrinter,
         LPWSTR pValueName
);




#line 1849 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

DWORD
__stdcall
DeletePrinterDataExA (
         HANDLE hPrinter,
         LPCSTR pKeyName,
         LPCSTR pValueName
);
DWORD
__stdcall
DeletePrinterDataExW (
         HANDLE hPrinter,
         LPCWSTR pKeyName,
         LPCWSTR pValueName
);




#line 1869 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

DWORD
__stdcall
DeletePrinterKeyA (
         HANDLE hPrinter,
         LPCSTR pKeyName
);
DWORD
__stdcall
DeletePrinterKeyW (
         HANDLE hPrinter,
         LPCWSTR pKeyName
);




#line 1887 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

























































typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
    WORD Type;
    WORD Reserved0;
    DWORD Reserved1;
    DWORD Reserved2;
    DWORD Count;
    PWORD pFields;
} PRINTER_NOTIFY_OPTIONS_TYPE, *PPRINTER_NOTIFY_OPTIONS_TYPE, *LPPRINTER_NOTIFY_OPTIONS_TYPE;



typedef struct _PRINTER_NOTIFY_OPTIONS {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
} PRINTER_NOTIFY_OPTIONS, *PPRINTER_NOTIFY_OPTIONS, *LPPRINTER_NOTIFY_OPTIONS;



typedef struct _PRINTER_NOTIFY_INFO_DATA {
    WORD Type;
    WORD Field;
    DWORD Reserved;
    DWORD Id;
    union {
        DWORD adwData[2];
        struct {
            DWORD  cbBuf;
            LPVOID pBuf;
        } Data;
    } NotifyData;
} PRINTER_NOTIFY_INFO_DATA, *PPRINTER_NOTIFY_INFO_DATA, *LPPRINTER_NOTIFY_INFO_DATA;

typedef struct _PRINTER_NOTIFY_INFO {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PRINTER_NOTIFY_INFO_DATA aData[1];
} PRINTER_NOTIFY_INFO, *PPRINTER_NOTIFY_INFO, *LPPRINTER_NOTIFY_INFO;

typedef struct _BINARY_CONTAINER{
    DWORD cbBuf;
    LPBYTE pData;
} BINARY_CONTAINER, *PBINARY_CONTAINER;

typedef struct _BIDI_DATA{
    DWORD dwBidiType;
    union {
        BOOL   bData;
        LONG   iData;
        LPWSTR sData;
        FLOAT  fData;
        BINARY_CONTAINER biData;
        }u;
} BIDI_DATA, *PBIDI_DATA, *LPBIDI_DATA;

typedef struct _BIDI_REQUEST_DATA{
    DWORD     dwReqNumber;
    LPWSTR    pSchema;
    BIDI_DATA data;
} BIDI_REQUEST_DATA , *PBIDI_REQUEST_DATA , *LPBIDI_REQUEST_DATA;

typedef struct _BIDI_REQUEST_CONTAINER{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    BIDI_REQUEST_DATA aData[ 1 ];
}BIDI_REQUEST_CONTAINER, *PBIDI_REQUEST_CONTAINER, *LPBIDI_REQUEST_CONTAINER;

typedef struct _BIDI_RESPONSE_DATA{
    DWORD  dwResult;
    DWORD  dwReqNumber;
    LPWSTR pSchema;
    BIDI_DATA data;
} BIDI_RESPONSE_DATA, *PBIDI_RESPONSE_DATA, *LPBIDI_RESPONSE_DATA;

typedef struct _BIDI_RESPONSE_CONTAINER{
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    BIDI_RESPONSE_DATA aData[ 1 ];
} BIDI_RESPONSE_CONTAINER, *PBIDI_RESPONSE_CONTAINER, *LPBIDI_RESPONSE_CONTAINER;






typedef enum {
    BIDI_NULL   = 0,
    BIDI_INT    = 1,
    BIDI_FLOAT  = 2,
    BIDI_BOOL   = 3,
    BIDI_STRING = 4,
    BIDI_TEXT   = 5,
    BIDI_ENUM   = 6,
    BIDI_BLOB   = 7
} BIDI_TYPE;


















DWORD
__stdcall
WaitForPrinterChange (
         HANDLE hPrinter,
         DWORD Flags
);

HANDLE
__stdcall
FindFirstPrinterChangeNotification (
         HANDLE hPrinter,
         DWORD fdwFlags,
         DWORD fdwOptions,
           LPVOID pPrinterNotifyOptions
);

BOOL
__stdcall
FindNextPrinterChangeNotification (
         HANDLE hChange,
           PDWORD pdwChange,
           LPVOID pPrinterNotifyOptions,
           LPVOID *ppPrinterNotifyInfo
);

BOOL
__stdcall
FreePrinterNotifyInfo (
         PPRINTER_NOTIFY_INFO pPrinterNotifyInfo
);

BOOL
__stdcall
FindClosePrinterChangeNotification (
         HANDLE hChange
);





























DWORD
__stdcall
PrinterMessageBoxA (
         HANDLE hPrinter,
         DWORD Error,
         HWND hWnd,
           LPSTR pText,
           LPSTR pCaption,
         DWORD dwType
);
DWORD
__stdcall
PrinterMessageBoxW (
         HANDLE hPrinter,
         DWORD Error,
         HWND hWnd,
           LPWSTR pText,
           LPWSTR pCaption,
         DWORD dwType
);




#line 2151 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"









BOOL
__stdcall
ClosePrinter (
         HANDLE hPrinter
);

BOOL
__stdcall
AddFormA (
         HANDLE hPrinter,
         DWORD Level,
         LPBYTE pForm
);
BOOL
__stdcall
AddFormW (
         HANDLE hPrinter,
         DWORD Level,
         LPBYTE pForm
);




#line 2185 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
DeleteFormA (
         HANDLE hPrinter,
         LPSTR pFormName
);
BOOL
__stdcall
DeleteFormW (
         HANDLE hPrinter,
         LPWSTR pFormName
);




#line 2203 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
GetFormA (
         HANDLE hPrinter,
         LPSTR pFormName,
         DWORD Level,
           LPBYTE pForm,
         DWORD cbBuf,
         LPDWORD pcbNeeded
);
BOOL
__stdcall
GetFormW (
         HANDLE hPrinter,
         LPWSTR pFormName,
         DWORD Level,
           LPBYTE pForm,
         DWORD cbBuf,
         LPDWORD pcbNeeded
);




#line 2229 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
SetFormA (
         HANDLE hPrinter,
         LPSTR pFormName,
         DWORD Level,
         LPBYTE pForm
);
BOOL
__stdcall
SetFormW (
         HANDLE hPrinter,
         LPWSTR pFormName,
         DWORD Level,
         LPBYTE pForm
);




#line 2251 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
EnumFormsA (
         HANDLE hPrinter,
         DWORD Level,
             LPBYTE pForm,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);
BOOL
__stdcall
EnumFormsW (
         HANDLE hPrinter,
         DWORD Level,
             LPBYTE pForm,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);




#line 2277 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
EnumMonitorsA (
         LPSTR pName,
         DWORD Level,
             LPBYTE pMonitor,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);
BOOL
__stdcall
EnumMonitorsW (
         LPWSTR pName,
         DWORD Level,
             LPBYTE pMonitor,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);




#line 2303 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
AddMonitorA (
         LPSTR pName,
         DWORD Level,
           LPBYTE pMonitorInfo
);
BOOL
__stdcall
AddMonitorW (
         LPWSTR pName,
         DWORD Level,
           LPBYTE pMonitorInfo
);




#line 2323 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
DeleteMonitorA (
         LPSTR pName,
           LPSTR pEnvironment,
         LPSTR pMonitorName
);
BOOL
__stdcall
DeleteMonitorW (
         LPWSTR pName,
           LPWSTR pEnvironment,
         LPWSTR pMonitorName
);




#line 2343 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
EnumPortsA (
         LPSTR pName,
         DWORD Level,
             LPBYTE  pPorts,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);
BOOL
__stdcall
EnumPortsW (
         LPWSTR pName,
         DWORD Level,
             LPBYTE  pPorts,
         DWORD cbBuf,
         LPDWORD pcbNeeded,
         LPDWORD pcReturned
);




#line 2369 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
AddPortA (
         LPSTR pName,
         HWND hWnd,
         LPSTR pMonitorName
);
BOOL
__stdcall
AddPortW (
         LPWSTR pName,
         HWND hWnd,
         LPWSTR pMonitorName
);




#line 2389 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
ConfigurePortA (
         LPSTR pName,
         HWND hWnd,
         LPSTR pPortName
);
BOOL
__stdcall
ConfigurePortW (
         LPWSTR pName,
         HWND hWnd,
         LPWSTR pPortName
);




#line 2409 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
DeletePortA (
         LPSTR pName,
         HWND hWnd,
         LPSTR pPortName
);
BOOL
__stdcall
DeletePortW (
         LPWSTR pName,
         HWND hWnd,
         LPWSTR pPortName
);




#line 2429 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
XcvDataW (
         HANDLE hXcv,
         PCWSTR pszDataName,
             PBYTE pInputData,
         DWORD cbInputData,
           PBYTE pOutputData,
         DWORD cbOutputData,
         PDWORD pcbOutputNeeded,
         PDWORD  pdwStatus
);



BOOL
__stdcall
GetDefaultPrinterA (
             LPSTR pszBuffer,
         LPDWORD pcchBuffer
    );
BOOL
__stdcall
GetDefaultPrinterW (
             LPWSTR pszBuffer,
         LPDWORD pcchBuffer
    );




#line 2462 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
SetDefaultPrinterA (
         LPCSTR pszPrinter
    );
BOOL
__stdcall
SetDefaultPrinterW (
         LPCWSTR pszPrinter
    );




#line 2478 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"


BOOL
__stdcall
SetPortA (
         LPSTR pName,
         LPSTR pPortName,
         DWORD dwLevel,
         LPBYTE pPortInfo
);
BOOL
__stdcall
SetPortW (
         LPWSTR pName,
         LPWSTR pPortName,
         DWORD dwLevel,
         LPBYTE pPortInfo
);




#line 2501 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
AddPrinterConnectionA (
         LPSTR pName
);
BOOL
__stdcall
AddPrinterConnectionW (
         LPWSTR pName
);




#line 2517 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
DeletePrinterConnectionA ( 
         LPSTR pName
);
BOOL
__stdcall
DeletePrinterConnectionW ( 
         LPWSTR pName
);




#line 2533 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

HANDLE
__stdcall
ConnectToPrinterDlg (
         HWND hwnd,
         DWORD Flags
);

typedef struct _PROVIDOR_INFO_1A{
    LPSTR     pName;
    LPSTR     pEnvironment;
    LPSTR     pDLLName;
} PROVIDOR_INFO_1A, *PPROVIDOR_INFO_1A, *LPPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W{
    LPWSTR    pName;
    LPWSTR    pEnvironment;
    LPWSTR    pDLLName;
} PROVIDOR_INFO_1W, *PPROVIDOR_INFO_1W, *LPPROVIDOR_INFO_1W;





typedef PROVIDOR_INFO_1A PROVIDOR_INFO_1;
typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1;
typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1;
#line 2560 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

typedef struct _PROVIDOR_INFO_2A{
    LPSTR     pOrder;
} PROVIDOR_INFO_2A, *PPROVIDOR_INFO_2A, *LPPROVIDOR_INFO_2A;
typedef struct _PROVIDOR_INFO_2W{
    LPWSTR    pOrder;
} PROVIDOR_INFO_2W, *PPROVIDOR_INFO_2W, *LPPROVIDOR_INFO_2W;





typedef PROVIDOR_INFO_2A PROVIDOR_INFO_2;
typedef PPROVIDOR_INFO_2A PPROVIDOR_INFO_2;
typedef LPPROVIDOR_INFO_2A LPPROVIDOR_INFO_2;
#line 2576 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
AddPrintProvidorA (
         LPSTR pName,
         DWORD level,
         LPBYTE pProvidorInfo
);
BOOL
__stdcall
AddPrintProvidorW (
         LPWSTR pName,
         DWORD level,
         LPBYTE pProvidorInfo
);




#line 2596 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
DeletePrintProvidorA (
         LPSTR pName,
           LPSTR pEnvironment,
         LPSTR pPrintProvidorName
);
BOOL
__stdcall
DeletePrintProvidorW (
         LPWSTR pName,
           LPWSTR pEnvironment,
         LPWSTR pPrintProvidorName
);




#line 2616 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

BOOL
__stdcall
IsValidDevmodeA (
         PDEVMODEA pDevmode,
         size_t DevmodeSize
    );
BOOL
__stdcall
IsValidDevmodeW (
         PDEVMODEW pDevmode,
         size_t DevmodeSize
    );




#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"








































































































































































#line 2803 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winspool.h"

#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ole2.h"






































#pragma once
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ole2.h"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"
#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ole2.h"









#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ole2.h"














#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"






































#pragma once
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"






















































#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"

#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"





















































































































#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"












#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"
    
    
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"
#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"





















#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"


#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"












#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"
#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"








#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"








#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
















#pragma once
#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"














 




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"















#pragma once
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\crtdefs.h"














 




























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"
















#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"



















#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"





#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"





#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"








#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"








#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"






#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"
#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"







#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"
































#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\limits.h"
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"






#pragma pack(push,8)
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"























typedef int (__cdecl * _onexit_t)(void);



#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"



#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"




#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"


#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"






typedef struct _div_t {
        int quot;
        int rem;
} div_t;

typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;


#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"










#pragma pack(4)
typedef struct {
    unsigned char ld[10];
} _LDOUBLE;
#pragma pack()













#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

typedef struct {
        double x;
} _CRT_DOUBLE;

typedef struct {
    float f;
} _CRT_FLOAT;





typedef struct {
        


        long double x;
} _LONGDOUBLE;



#pragma pack(4)
typedef struct {
    unsigned char ld12[12];
} _LDBL12;
#pragma pack()


#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"





























































typedef void (__cdecl *_purecall_handler)(void); 


 _purecall_handler __cdecl _set_purecall_handler(       _purecall_handler _Handler);
 _purecall_handler __cdecl _get_purecall_handler();
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"


















#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"



typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t); 


 _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(       _invalid_parameter_handler _Handler);
 _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);
#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

















#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"




 extern int * __cdecl _errno(void);


errno_t __cdecl _set_errno(     int _Value);
errno_t __cdecl _get_errno(     int * _Value);
#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

 unsigned long * __cdecl __doserrno(void);


errno_t __cdecl _set_doserrno(     unsigned long _Value);
errno_t __cdecl _get_doserrno(     unsigned long * _Value);


 __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char ** __cdecl __sys_errlist(void);


 __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int * __cdecl __sys_nerr(void);













#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"


 extern int __argc;          
 extern char ** __argv;      
 extern wchar_t ** __wargv;  







#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"





 extern char ** _environ;    
 extern wchar_t ** _wenviron;    
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  extern char * _pgmptr;      
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  extern wchar_t * _wpgmptr;  














#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

errno_t __cdecl _get_pgmptr(       char ** _Value);
errno_t __cdecl _get_wpgmptr(       wchar_t ** _Value);



__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  extern int _fmode;          



#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

 errno_t __cdecl _set_fmode(     int _Mode);
 errno_t __cdecl _get_fmode(     int * _PMode);



#pragma warning(push)
#pragma warning(disable:4141)


__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_osplatform" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetVersionEx" " instead. See online help for details."))	 extern unsigned int _osplatform;
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_osver" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetVersionEx" " instead. See online help for details."))			 extern unsigned int _osver;
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_winver" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetVersionEx" " instead. See online help for details."))		 extern unsigned int _winver;
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_winmajor" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetVersionEx" " instead. See online help for details."))		 extern unsigned int _winmajor;
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_winminor" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) __declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetVersionEx" " instead. See online help for details."))		 extern unsigned int _winminor;














#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

#pragma warning(pop)

__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetVersionEx" " instead. See online help for details.")) errno_t __cdecl _get_osplatform(     unsigned int * _Value);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetVersionEx" " instead. See online help for details.")) errno_t __cdecl _get_osver(     unsigned int * _Value);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetVersionEx" " instead. See online help for details.")) errno_t __cdecl _get_winver(     unsigned int * _Value);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetVersionEx" " instead. See online help for details.")) errno_t __cdecl _get_winmajor(     unsigned int * _Value);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "GetVersionEx" " instead. See online help for details.")) errno_t __cdecl _get_winminor(     unsigned int * _Value);












#line 400 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
#line 401 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"





 __declspec(noreturn) void __cdecl exit(     int _Code);
 __declspec(noreturn) void __cdecl _exit(     int _Code);
 void __cdecl abort(void);
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

 unsigned int __cdecl _set_abort_behavior(     unsigned int _Flags,      unsigned int _Mask);



        int     __cdecl abs(     int _X);
        long    __cdecl labs(     long _X);
#line 418 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"


        __int64    __cdecl _abs64(__int64);
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"










#line 433 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"












#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
        int    __cdecl atexit(void (__cdecl *)(void));
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"


  double  __cdecl atof(       const char *_String);
  double  __cdecl _atof_l(       const char *_String,        _locale_t _Locale);
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
   int    __cdecl atoi(       const char *_Str);
  int    __cdecl _atoi_l(       const char *_Str,        _locale_t _Locale);
  long   __cdecl atol(       const char *_Str);
  long   __cdecl _atol_l(       const char *_Str,        _locale_t _Locale);



  void * __cdecl bsearch_s(     const void * _Key,        const void * _Base, 
             rsize_t _NumOfElements,      rsize_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context);
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
  void * __cdecl bsearch(     const void * _Key,        const void * _Base, 
             size_t _NumOfElements,      size_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(const void *, const void *));


 void __cdecl qsort_s(       void * _Base, 
             rsize_t _NumOfElements,      rsize_t _SizeOfElements,
             int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void *_Context);
#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
 void __cdecl qsort(       void * _Base, 
	     size_t _NumOfElements,      size_t _SizeOfElements, 
             int (__cdecl * _PtFuncCompare)(const void *, const void *));
#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
         unsigned short __cdecl _byteswap_ushort(     unsigned short _Short);
         unsigned long  __cdecl _byteswap_ulong (     unsigned long _Long);

         unsigned __int64 __cdecl _byteswap_uint64(unsigned __int64 _Int64);
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
  div_t  __cdecl div(     int _Numerator,      int _Denominator);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl getenv(       const char * _VarName);

  errno_t __cdecl getenv_s(     size_t * _ReturnSize,        char * _DstBuf,      rsize_t _DstSize,        const char * _VarName);
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"




#line 492 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _dupenv_s(                     char **_PBuffer,        size_t * _PBufferSizeInBytes,        const char * _VarName);



#line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _itoa_s(     int _Value,        char * _DstBuf,      size_t _Size,      int _Radix);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _itoa( int _Value,  char *_Dest,  int _Radix);

  errno_t __cdecl _i64toa_s(     __int64 _Val,        char * _DstBuf,      size_t _Size,      int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _i64toa(     __int64 _Val,      char * _DstBuf,      int _Radix);
  errno_t __cdecl _ui64toa_s(     unsigned __int64 _Val,        char * _DstBuf,      size_t _Size,      int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _ui64toa(     unsigned __int64 _Val,      char * _DstBuf,      int _Radix);
  __int64 __cdecl _atoi64(       const char * _String);
  __int64 __cdecl _atoi64_l(       const char * _String,        _locale_t _Locale);
  __int64 __cdecl _strtoi64(       const char * _String,                    char ** _EndPtr,      int _Radix);
  __int64 __cdecl _strtoi64_l(       const char * _String,                    char ** _EndPtr,      int _Radix,        _locale_t _Locale);
  unsigned __int64 __cdecl _strtoui64(       const char * _String,                    char ** _EndPtr,      int _Radix);
  unsigned __int64 __cdecl _strtoui64_l(       const char * _String,                    char ** _EndPtr,      int  _Radix,        _locale_t _Locale);
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
  ldiv_t __cdecl ldiv(     long _Numerator,      long _Denominator);









  errno_t __cdecl _ltoa_s(     long _Val,        char * _DstBuf,      size_t _Size,      int _Radix);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _ltoa( long _Value,  char *_Dest,  int _Radix);
  int    __cdecl mblen(           const char * _Ch,      size_t _MaxCount);
  int    __cdecl _mblen_l(           const char * _Ch,      size_t _MaxCount,        _locale_t _Locale);
  size_t __cdecl _mbstrlen(       const char * _Str);
  size_t __cdecl _mbstrlen_l(       const char *_Str,        _locale_t _Locale);
  size_t __cdecl _mbstrnlen(       const char *_Str,      size_t _MaxCount);
  size_t __cdecl _mbstrnlen_l(       const char *_Str,      size_t _MaxCount,        _locale_t _Locale);
 int    __cdecl mbtowc(     wchar_t * _DstCh,            const char * _SrcCh,      size_t _SrcSizeInBytes);
 int    __cdecl _mbtowc_l(     wchar_t * _DstCh,            const char * _SrcCh,      size_t _SrcSizeInBytes,        _locale_t _Locale);
  errno_t __cdecl mbstowcs_s(       size_t * _PtNumOfCharConverted,          wchar_t * _DstBuf,      size_t _SizeInWords,          const char * _SrcBuf,      size_t _MaxCount );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl mbstowcs( wchar_t *_Dest,  const char * _Source,  size_t _MaxCount);

  errno_t __cdecl _mbstowcs_s_l(       size_t * _PtNumOfCharConverted,          wchar_t * _DstBuf,      size_t _SizeInWords,          const char * _SrcBuf,      size_t _MaxCount,        _locale_t _Locale);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl _mbstowcs_l(       wchar_t *_Dest,        const char * _Source,      size_t _MaxCount,        _locale_t _Locale);

  int    __cdecl rand(void);


#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

  int    __cdecl _set_error_mode(     int _Mode);

 void   __cdecl srand(     unsigned int _Seed);
  double __cdecl strtod(       const char * _Str,                    char ** _EndPtr);
  double __cdecl _strtod_l(       const char * _Str,                    char ** _EndPtr,        _locale_t _Locale);
  long   __cdecl strtol(       const char * _Str,                    char ** _EndPtr,      int _Radix );
  long   __cdecl _strtol_l(       const char *_Str,                    char **_EndPtr,      int _Radix,        _locale_t _Locale);
  unsigned long __cdecl strtoul(       const char * _Str,                    char ** _EndPtr,      int _Radix);
  unsigned long __cdecl _strtoul_l(const char * _Str,                    char **_EndPtr,      int _Radix,        _locale_t _Locale);


 int __cdecl system(         const char * _Command);
#line 561 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
  errno_t __cdecl _ultoa_s(     unsigned long _Val,        char * _DstBuf,      size_t _Size,      int _Radix);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _ultoa( unsigned long _Value,  char *_Dest,  int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int    __cdecl wctomb(         char * _MbCh,        wchar_t _WCh);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int    __cdecl _wctomb_l(       char * _MbCh,      wchar_t _WCh,        _locale_t _Locale);

  errno_t __cdecl wctomb_s(       int * _SizeConverted,          char * _MbCh,      rsize_t _SizeInBytes,      wchar_t _WCh);
#line 569 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
  errno_t __cdecl _wctomb_s_l(       int * _SizeConverted,          char * _MbCh,      size_t _SizeInBytes,      wchar_t _WCh,        _locale_t _Locale);
  errno_t __cdecl wcstombs_s(       size_t * _PtNumOfCharConverted,          char * _Dst,      size_t _DstSizeInBytes,        const wchar_t * _Src,      size_t _MaxCountInBytes);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl wcstombs( char *_Dest,  const wchar_t * _Source,  size_t _MaxCount);
  errno_t __cdecl _wcstombs_s_l(       size_t * _PtNumOfCharConverted,          char * _Dst,      size_t _DstSizeInBytes,        const wchar_t * _Src,      size_t _MaxCountInBytes,        _locale_t _Locale);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl _wcstombs_l(       char *_Dest,        const wchar_t * _Source,      size_t _MaxCount,        _locale_t _Locale);






















#line 599 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"


































#line 634 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
   __declspec(noalias) __declspec(restrict)         void * __cdecl calloc(     size_t _NumOfElements,      size_t _SizeOfElements);
                     __declspec(noalias)                                                                             void   __cdecl free(       void * _Memory);
   __declspec(noalias) __declspec(restrict)                                   void * __cdecl malloc(     size_t _Size);
                     __declspec(noalias) __declspec(restrict)                                void * __cdecl realloc(       void * _Memory,      size_t _NewSize);
                     __declspec(noalias) __declspec(restrict)                            void * __cdecl _recalloc(       void * _Memory,      size_t _Count,      size_t _Size);
                     __declspec(noalias)                                                                             void   __cdecl _aligned_free(       void * _Memory);
                     __declspec(noalias) __declspec(restrict)                                   void * __cdecl _aligned_malloc(     size_t _Size,      size_t _Alignment);
                     __declspec(noalias) __declspec(restrict)                                   void * __cdecl _aligned_offset_malloc(     size_t _Size,      size_t _Alignment,      size_t _Offset);
                     __declspec(noalias) __declspec(restrict)                                   void * __cdecl _aligned_realloc(       void * _Memory,      size_t _Size,      size_t _Alignment);
                     __declspec(noalias) __declspec(restrict)                            void * __cdecl _aligned_recalloc(       void * _Memory,      size_t _Count,      size_t _Size,      size_t _Alignment);
                     __declspec(noalias) __declspec(restrict)                                   void * __cdecl _aligned_offset_realloc(       void * _Memory,      size_t _Size,      size_t _Alignment,      size_t _Offset);
                     __declspec(noalias) __declspec(restrict)                            void * __cdecl _aligned_offset_recalloc(       void * _Memory,      size_t _Count,      size_t _Size,      size_t _Alignment,      size_t _Offset);
                                                                                                size_t __cdecl _aligned_msize(     void * _Memory,      size_t _Alignment,      size_t _Offset);


















#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"





  errno_t __cdecl _itow_s (     int _Val,        wchar_t * _DstBuf,      size_t _SizeInWords,      int _Radix);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _itow( int _Value,  wchar_t *_Dest,  int _Radix);
  errno_t __cdecl _ltow_s (     long _Val,        wchar_t * _DstBuf,      size_t _SizeInWords,      int _Radix);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _ltow( long _Value,  wchar_t *_Dest,  int _Radix);
  errno_t __cdecl _ultow_s (     unsigned long _Val,        wchar_t * _DstBuf,      size_t _SizeInWords,      int _Radix);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _ultow( unsigned long _Value,  wchar_t *_Dest,  int _Radix);
  double __cdecl wcstod(       const wchar_t * _Str,                    wchar_t ** _EndPtr);
  double __cdecl _wcstod_l(       const wchar_t *_Str,                    wchar_t ** _EndPtr,        _locale_t _Locale);
  long   __cdecl wcstol(       const wchar_t *_Str,                    wchar_t ** _EndPtr, int _Radix);
  long   __cdecl _wcstol_l(       const wchar_t *_Str,                    wchar_t **_EndPtr, int _Radix,        _locale_t _Locale);
  unsigned long __cdecl wcstoul(       const wchar_t *_Str,                    wchar_t ** _EndPtr, int _Radix);
  unsigned long __cdecl _wcstoul_l(       const wchar_t *_Str,                    wchar_t **_EndPtr, int _Radix,        _locale_t _Locale);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wgetenv(       const wchar_t * _VarName);
  errno_t __cdecl _wgetenv_s(     size_t * _ReturnSize,        wchar_t * _DstBuf,      size_t _DstSizeInWords,        const wchar_t * _VarName);





#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _wdupenv_s(                     wchar_t **_Buffer,        size_t *_BufferSizeInWords,        const wchar_t *_VarName);



#line 702 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"



 int __cdecl _wsystem(         const wchar_t * _Command);
#line 707 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
  double __cdecl _wtof(       const wchar_t *_Str);
  double __cdecl _wtof_l(       const wchar_t *_Str,        _locale_t _Locale);
  int __cdecl _wtoi(       const wchar_t *_Str);
  int __cdecl _wtoi_l(       const wchar_t *_Str,        _locale_t _Locale);
  long __cdecl _wtol(       const wchar_t *_Str);
  long __cdecl _wtol_l(       const wchar_t *_Str,        _locale_t _Locale);


  errno_t __cdecl _i64tow_s(     __int64 _Val,        wchar_t * _DstBuf,      size_t _SizeInWords,      int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i65tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _i64tow(     __int64 _Val,      wchar_t * _DstBuf,      int _Radix);
  errno_t __cdecl _ui64tow_s(     unsigned __int64 _Val,        wchar_t * _DstBuf,      size_t _SizeInWords,      int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _ui64tow(     unsigned __int64 _Val,      wchar_t * _DstBuf,      int _Radix);
  __int64   __cdecl _wtoi64(       const wchar_t *_Str);
  __int64   __cdecl _wtoi64_l(       const wchar_t *_Str,        _locale_t _Locale);
  __int64   __cdecl _wcstoi64(       const wchar_t * _Str,                    wchar_t ** _EndPtr,      int _Radix);
  __int64   __cdecl _wcstoi64_l(       const wchar_t * _Str,                    wchar_t ** _EndPtr,      int _Radix,        _locale_t _Locale);
  unsigned __int64  __cdecl _wcstoui64(       const wchar_t * _Str,                    wchar_t ** _EndPtr,      int _Radix);
  unsigned __int64  __cdecl _wcstoui64_l(       const wchar_t *_Str ,                    wchar_t ** _EndPtr,      int _Radix,        _locale_t _Locale);
#line 726 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"


#line 729 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"














#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

  char * __cdecl _fullpath(         char * _FullPath,        const char * _Path,      size_t _SizeInBytes);





#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _ecvt_s(       char * _DstBuf,      size_t _Size,      double _Val,      int _NumOfDights,      int * _PtDec,      int * _PtSign);

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _ecvt(     double _Val,      int _NumOfDigits,      int * _PtDec,      int * _PtSign);
  errno_t __cdecl _fcvt_s(       char * _DstBuf,      size_t _Size,      double _Val,      int _NumOfDec,      int * _PtDec,      int * _PtSign);

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _fcvt(     double _Val,      int _NumOfDec,      int * _PtDec,      int * _PtSign);
 errno_t __cdecl _gcvt_s(       char * _DstBuf,      size_t _Size,      double _Val,      int _NumOfDigits);

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _gcvt(     double _Val,      int _NumOfDigits,      char * _DstBuf);

  int __cdecl _atodbl(     _CRT_DOUBLE * _Result,        char * _Str);
  int __cdecl _atoldbl(     _LDOUBLE * _Result,        char * _Str);
  int __cdecl _atoflt(     _CRT_FLOAT * _Result,        char * _Str);
  int __cdecl _atodbl_l(     _CRT_DOUBLE * _Result,        char * _Str,        _locale_t _Locale);
  int __cdecl _atoldbl_l(     _LDOUBLE * _Result,        char * _Str,        _locale_t _Locale);
  int __cdecl _atoflt_l(     _CRT_FLOAT * _Result,        char * _Str,        _locale_t _Locale);
         unsigned long __cdecl _lrotl(     unsigned long _Val,      int _Shift);
         unsigned long __cdecl _lrotr(     unsigned long _Val,      int _Shift);
  errno_t   __cdecl _makepath_s(       char * _PathResult,        size_t _Size,          const char * _Drive,          const char * _Dir,          const char * _Filename,
                 const char * _Ext);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _makepath( char *_Path,  const char * _Drive,  const char * _Dir,  const char * _Filename,  const char * _Ext);












#line 788 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"












#line 801 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
        _onexit_t __cdecl _onexit(       _onexit_t _Func);
#line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
        


 void __cdecl perror(         const char * _ErrMsg);
#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
  int    __cdecl _putenv(       const char * _EnvString);
  errno_t __cdecl _putenv_s(       const char * _Name,        const char * _Value);
         unsigned int __cdecl _rotl(     unsigned int _Val,      int _Shift);

         unsigned __int64 __cdecl _rotl64(     unsigned __int64 _Val,      int _Shift);
#line 814 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
         unsigned int __cdecl _rotr(     unsigned int _Val,      int _Shift);

         unsigned __int64 __cdecl _rotr64(     unsigned __int64 _Val,      int _Shift);
#line 818 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
 errno_t __cdecl _searchenv_s(       const char * _Filename,        const char * _EnvVar,        char * _ResultPath,      size_t _SizeInBytes);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _searchenv( const char * _Filename,  const char * _EnvVar,  char *_ResultPath);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void   __cdecl _splitpath(       const char * _FullPath,        char * _Drive,        char * _Dir,        char * _Filename,        char * _Ext);
  errno_t  __cdecl _splitpath_s(       const char * _FullPath, 
		         char * _Drive,      size_t _DriveSize, 
		         char * _Dir,      size_t _DirSize, 
		         char * _Filename,      size_t _FilenameSize, 
		         char * _Ext,      size_t _ExtSize);


 void   __cdecl _swab(           char * _Buf1,            char * _Buf2, int _SizeInBytes);








#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

  wchar_t * __cdecl _wfullpath(         wchar_t * _FullPath,        const wchar_t * _Path,      size_t _SizeInWords);



#line 846 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _wmakepath_s(       wchar_t * _PathResult,        size_t _SizeInWords,          const wchar_t * _Drive,          const wchar_t * _Dir,          const wchar_t * _Filename,
                 const wchar_t * _Ext);        

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _wmakepath( wchar_t *_ResultPath,  const wchar_t * _Drive,  const wchar_t * _Dir,  const wchar_t * _Filename,  const wchar_t * _Ext);


 void __cdecl _wperror(         const wchar_t * _ErrMsg);
#line 855 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"
  int    __cdecl _wputenv(       const wchar_t * _EnvString);
  errno_t __cdecl _wputenv_s(       const wchar_t * _Name,        const wchar_t * _Value);
 errno_t __cdecl _wsearchenv_s(       const wchar_t * _Filename,        const wchar_t * _EnvVar,        wchar_t * _ResultPath,      size_t _SizeInWords);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _wsearchenv( const wchar_t * _Filename,  const wchar_t * _EnvVar,  wchar_t *_ResultPath);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void   __cdecl _wsplitpath(       const wchar_t * _FullPath,        wchar_t * _Drive,        wchar_t * _Dir,        wchar_t * _Filename,        wchar_t * _Ext);
 errno_t __cdecl _wsplitpath_s(       const wchar_t * _FullPath, 
		         wchar_t * _Drive,      size_t _DriveSizeInWords, 
		         wchar_t * _Dir,      size_t _DirSizeInWords, 
		         wchar_t * _Filename,      size_t _FilenameSizeInWords, 
		         wchar_t * _Ext,      size_t _ExtSizeInWords);



#line 870 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"


__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetErrorMode" " instead. See online help for details."))  void __cdecl _seterrormode(     int _Mode);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Beep" " instead. See online help for details."))  void __cdecl _beep(     unsigned _Frequency,      unsigned _Duration);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Sleep" " instead. See online help for details."))  void __cdecl _sleep(     unsigned long _Duration);

#line 877 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"










#line 888 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"





#pragma warning(push)
#pragma warning(disable: 4141)  
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))		  char * __cdecl ecvt(     double _Val,      int _NumOfDigits,      int * _PtDec,      int * _PtSign);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))		  char * __cdecl fcvt(     double _Val,      int _NumOfDec,      int * _PtDec,      int * _PtSign);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))		 char * __cdecl gcvt(     double _Val,      int _NumOfDigits,      char * _DstBuf);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))		 char * __cdecl itoa(     int _Val,      char * _DstBuf,      int _Radix);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))		 char * __cdecl ltoa(     long _Val,      char * _DstBuf,      int _Radix);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putenv" ". See online help for details.")) 									  int    __cdecl putenv(       const char * _EnvString);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_swab" ". See online help for details."))										 void   __cdecl swab(           char * _Buf1,           char * _Buf2,      int _SizeInBytes);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))	 char * __cdecl ultoa(     unsigned long _Val,      char * _Dstbuf,      int _Radix);
#pragma warning(pop)
_onexit_t __cdecl onexit(       _onexit_t _Func);

#line 907 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"







#pragma pack(pop)
#line 918 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

#line 920 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\INCLUDE\\stdlib.h"

#line 293 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"




















#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"





#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"



typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,       
    REGCLS_MULTIPLEUSE = 1,     
                                
    REGCLS_MULTI_SEPARATE = 2,  
                                
    REGCLS_SUSPENDED      = 4,  
                                
    REGCLS_SURROGATE      = 8   
                                
                                
} REGCLS;
































#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"








#line 378 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"





















typedef struct    IRpcStubBuffer     IRpcStubBuffer;
typedef struct    IRpcChannelBuffer  IRpcChannelBuffer;


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"





 










#pragma warning( disable: 4049 )  

















#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"





#pragma once
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"

 



typedef struct IUnknown IUnknown;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"




typedef struct AsyncIUnknown AsyncIUnknown;
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"




typedef struct IClassFactory IClassFactory;
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"









void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 








#pragma once
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"


extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_v0_0_s_ifspec;





 

typedef  IUnknown *LPUNKNOWN;




























































#line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"

extern const IID IID_IUnknown;



















#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"

    typedef struct IUnknownVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IUnknown * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IUnknown * This);
        
        ULONG ( __stdcall *Release )( 
            IUnknown * This);
        
        
    } IUnknownVtbl;

    struct IUnknown
    {
         struct IUnknownVtbl *lpVtbl;
    };

    
















#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"



HRESULT __stdcall IUnknown_QueryInterface_Proxy( 
    IUnknown * This,
     const IID * const riid,
     void **ppvObject);


void __stdcall IUnknown_QueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IUnknown_AddRef_Proxy( 
    IUnknown * This);


void __stdcall IUnknown_AddRef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IUnknown_Release_Proxy( 
    IUnknown * This);


void __stdcall IUnknown_Release_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"



 

#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"


extern RPC_IF_HANDLE __MIDL_itf_unknwn_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0005_v0_0_s_ifspec;





 


extern const IID IID_AsyncIUnknown;























#line 306 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"

    typedef struct AsyncIUnknownVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            AsyncIUnknown * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            AsyncIUnknown * This);
        
        ULONG ( __stdcall *Release )( 
            AsyncIUnknown * This);
        
        HRESULT ( __stdcall *Begin_QueryInterface )( 
            AsyncIUnknown * This,
             const IID * const riid);
        
        HRESULT ( __stdcall *Finish_QueryInterface )( 
            AsyncIUnknown * This,
             void **ppvObject);
        
        HRESULT ( __stdcall *Begin_AddRef )( 
            AsyncIUnknown * This);
        
        ULONG ( __stdcall *Finish_AddRef )( 
            AsyncIUnknown * This);
        
        HRESULT ( __stdcall *Begin_Release )( 
            AsyncIUnknown * This);
        
        ULONG ( __stdcall *Finish_Release )( 
            AsyncIUnknown * This);
        
        
    } AsyncIUnknownVtbl;

    struct AsyncIUnknown
    {
         struct AsyncIUnknownVtbl *lpVtbl;
    };

    



































#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"



HRESULT __stdcall AsyncIUnknown_Begin_QueryInterface_Proxy( 
    AsyncIUnknown * This,
     const IID * const riid);


void __stdcall AsyncIUnknown_Begin_QueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIUnknown_Finish_QueryInterface_Proxy( 
    AsyncIUnknown * This,
     void **ppvObject);


void __stdcall AsyncIUnknown_Finish_QueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIUnknown_Begin_AddRef_Proxy( 
    AsyncIUnknown * This);


void __stdcall AsyncIUnknown_Begin_AddRef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall AsyncIUnknown_Finish_AddRef_Proxy( 
    AsyncIUnknown * This);


void __stdcall AsyncIUnknown_Finish_AddRef_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIUnknown_Begin_Release_Proxy( 
    AsyncIUnknown * This);


void __stdcall AsyncIUnknown_Begin_Release_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall AsyncIUnknown_Finish_Release_Proxy( 
    AsyncIUnknown * This);


void __stdcall AsyncIUnknown_Finish_Release_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 460 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"






 

typedef  IClassFactory *LPCLASSFACTORY;


extern const IID IID_IClassFactory;

















#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"

    typedef struct IClassFactoryVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IClassFactory * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IClassFactory * This);
        
        ULONG ( __stdcall *Release )( 
            IClassFactory * This);
        
         HRESULT ( __stdcall *CreateInstance )( 
            IClassFactory * This,
             IUnknown *pUnkOuter,
             const IID * const riid,
             void **ppvObject);
        
         HRESULT ( __stdcall *LockServer )( 
            IClassFactory * This,
             BOOL fLock);
        
        
    } IClassFactoryVtbl;

    struct IClassFactory
    {
         struct IClassFactoryVtbl *lpVtbl;
    };

    























#line 549 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"



 HRESULT __stdcall IClassFactory_RemoteCreateInstance_Proxy( 
    IClassFactory * This,
     const IID * const riid,
     IUnknown **ppvObject);


void __stdcall IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IClassFactory_RemoteLockServer_Proxy( 
    IClassFactory * This,
     BOOL fLock);


void __stdcall IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 579 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"




 HRESULT __stdcall IClassFactory_CreateInstance_Proxy( 
    IClassFactory * This,
     IUnknown *pUnkOuter,
     const IID * const riid,
     void **ppvObject);


 HRESULT __stdcall IClassFactory_CreateInstance_Stub( 
    IClassFactory * This,
     const IID * const riid,
     IUnknown **ppvObject);

 HRESULT __stdcall IClassFactory_LockServer_Proxy( 
    IClassFactory * This,
     BOOL fLock);


 HRESULT __stdcall IClassFactory_LockServer_Stub( 
    IClassFactory * This,
     BOOL fLock);









#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\unknwn.h"


#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"





 










#pragma warning( disable: 4049 )  

















#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"





#pragma once
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

 



typedef struct IMarshal IMarshal;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IMarshal2 IMarshal2;
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IMalloc IMalloc;
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IMallocSpy IMallocSpy;
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IStdMarshalInfo IStdMarshalInfo;
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IExternalConnection IExternalConnection;
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IMultiQI IMultiQI;
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct AsyncIMultiQI AsyncIMultiQI;
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IInternalUnknown IInternalUnknown;
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IEnumUnknown IEnumUnknown;
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IBindCtx IBindCtx;
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IEnumMoniker IEnumMoniker;
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IRunnableObject IRunnableObject;
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IRunningObjectTable IRunningObjectTable;
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IPersist IPersist;
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IPersistStream IPersistStream;
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IMoniker IMoniker;
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IROTData IROTData;
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IEnumString IEnumString;
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct ISequentialStream ISequentialStream;
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IStream IStream;
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IEnumSTATSTG IEnumSTATSTG;
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IStorage IStorage;
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IPersistFile IPersistFile;
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IPersistStorage IPersistStorage;
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct ILockBytes ILockBytes;
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IEnumFORMATETC IEnumFORMATETC;
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IEnumSTATDATA IEnumSTATDATA;
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IRootStorage IRootStorage;
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IAdviseSink IAdviseSink;
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct AsyncIAdviseSink AsyncIAdviseSink;
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IAdviseSink2 IAdviseSink2;
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct AsyncIAdviseSink2 AsyncIAdviseSink2;
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IDataObject IDataObject;
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IDataAdviseHolder IDataAdviseHolder;
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IMessageFilter IMessageFilter;
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IRpcChannelBuffer IRpcChannelBuffer;
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;
#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IRpcProxyBuffer IRpcProxyBuffer;
#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IRpcStubBuffer IRpcStubBuffer;
#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IPSFactoryBuffer IPSFactoryBuffer;
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IChannelHook IChannelHook;
#line 314 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IClientSecurity IClientSecurity;
#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IServerSecurity IServerSecurity;
#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IClassActivator IClassActivator;
#line 332 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IRpcOptions IRpcOptions;
#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IFillLockBytes IFillLockBytes;
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IProgressNotify IProgressNotify;
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct ILayoutStorage ILayoutStorage;
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IBlockingLock IBlockingLock;
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IOplockStorage IOplockStorage;
#line 374 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct ISurrogate ISurrogate;
#line 380 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;
#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IDirectWriterLock IDirectWriterLock;
#line 392 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct ISynchronize ISynchronize;
#line 398 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct ISynchronizeHandle ISynchronizeHandle;
#line 404 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct ISynchronizeEvent ISynchronizeEvent;
#line 410 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct ISynchronizeContainer ISynchronizeContainer;
#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct ISynchronizeMutex ISynchronizeMutex;
#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct ICancelMethodCalls ICancelMethodCalls;
#line 428 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IAsyncManager IAsyncManager;
#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct ICallFactory ICallFactory;
#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IRpcHelper IRpcHelper;
#line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;
#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IWaitMultiple IWaitMultiple;
#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IUrlMon IUrlMon;
#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IForegroundTransfer IForegroundTransfer;
#line 470 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IAddrTrackingControl IAddrTrackingControl;
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IAddrExclusionControl IAddrExclusionControl;
#line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IPipeByte IPipeByte;
#line 488 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct AsyncIPipeByte AsyncIPipeByte;
#line 494 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IPipeLong IPipeLong;
#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct AsyncIPipeLong AsyncIPipeLong;
#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IPipeDouble IPipeDouble;
#line 512 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct AsyncIPipeDouble AsyncIPipeDouble;
#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IThumbnailExtractor IThumbnailExtractor;
#line 524 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IDummyHICONIncluder IDummyHICONIncluder;
#line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IEnumContextProps IEnumContextProps;
#line 536 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IContext IContext;
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IObjContext IObjContext;
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IProcessLock IProcessLock;
#line 554 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct ISurrogateService ISurrogateService;
#line 560 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IComThreadingInfo IComThreadingInfo;
#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IProcessInitControl IProcessInitControl;
#line 572 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




typedef struct IInitializeSpy IInitializeSpy;
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"









void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 













#pragma warning(push)
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"
#pragma warning(disable:4201)
#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

#pragma once
#line 612 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"













typedef struct _COSERVERINFO
    {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
    } 	COSERVERINFO;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_v0_0_s_ifspec;





 

typedef  IMarshal *LPMARSHAL;


extern const IID IID_IMarshal;












































#line 693 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IMarshalVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IMarshal * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IMarshal * This);
        
        ULONG ( __stdcall *Release )( 
            IMarshal * This);
        
        HRESULT ( __stdcall *GetUnmarshalClass )( 
            IMarshal * This,
             const IID * const riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags,
             CLSID *pCid);
        
        HRESULT ( __stdcall *GetMarshalSizeMax )( 
            IMarshal * This,
             const IID * const riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags,
             DWORD *pSize);
        
        HRESULT ( __stdcall *MarshalInterface )( 
            IMarshal * This,
             IStream *pStm,
             const IID * const riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags);
        
        HRESULT ( __stdcall *UnmarshalInterface )( 
            IMarshal * This,
             IStream *pStm,
             const IID * const riid,
             void **ppv);
        
        HRESULT ( __stdcall *ReleaseMarshalData )( 
            IMarshal * This,
             IStream *pStm);
        
        HRESULT ( __stdcall *DisconnectObject )( 
            IMarshal * This,
             DWORD dwReserved);
        
        
    } IMarshalVtbl;

    struct IMarshal
    {
         struct IMarshalVtbl *lpVtbl;
    };

    



































#line 795 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IMarshal_GetUnmarshalClass_Proxy( 
    IMarshal * This,
     const IID * const riid,
     void *pv,
     DWORD dwDestContext,
     void *pvDestContext,
     DWORD mshlflags,
     CLSID *pCid);


void __stdcall IMarshal_GetUnmarshalClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_GetMarshalSizeMax_Proxy( 
    IMarshal * This,
     const IID * const riid,
     void *pv,
     DWORD dwDestContext,
     void *pvDestContext,
     DWORD mshlflags,
     DWORD *pSize);


void __stdcall IMarshal_GetMarshalSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_MarshalInterface_Proxy( 
    IMarshal * This,
     IStream *pStm,
     const IID * const riid,
     void *pv,
     DWORD dwDestContext,
     void *pvDestContext,
     DWORD mshlflags);


void __stdcall IMarshal_MarshalInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_UnmarshalInterface_Proxy( 
    IMarshal * This,
     IStream *pStm,
     const IID * const riid,
     void **ppv);


void __stdcall IMarshal_UnmarshalInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_ReleaseMarshalData_Proxy( 
    IMarshal * This,
     IStream *pStm);


void __stdcall IMarshal_ReleaseMarshalData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMarshal_DisconnectObject_Proxy( 
    IMarshal * This,
     DWORD dwReserved);


void __stdcall IMarshal_DisconnectObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 889 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IMarshal2 *LPMARSHAL2;


extern const IID IID_IMarshal2;









#line 911 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IMarshal2Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IMarshal2 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IMarshal2 * This);
        
        ULONG ( __stdcall *Release )( 
            IMarshal2 * This);
        
        HRESULT ( __stdcall *GetUnmarshalClass )( 
            IMarshal2 * This,
             const IID * const riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags,
             CLSID *pCid);
        
        HRESULT ( __stdcall *GetMarshalSizeMax )( 
            IMarshal2 * This,
             const IID * const riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags,
             DWORD *pSize);
        
        HRESULT ( __stdcall *MarshalInterface )( 
            IMarshal2 * This,
             IStream *pStm,
             const IID * const riid,
             void *pv,
             DWORD dwDestContext,
             void *pvDestContext,
             DWORD mshlflags);
        
        HRESULT ( __stdcall *UnmarshalInterface )( 
            IMarshal2 * This,
             IStream *pStm,
             const IID * const riid,
             void **ppv);
        
        HRESULT ( __stdcall *ReleaseMarshalData )( 
            IMarshal2 * This,
             IStream *pStm);
        
        HRESULT ( __stdcall *DisconnectObject )( 
            IMarshal2 * This,
             DWORD dwReserved);
        
        
    } IMarshal2Vtbl;

    struct IMarshal2
    {
         struct IMarshal2Vtbl *lpVtbl;
    };

    




































#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"




#line 1019 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IMalloc *LPMALLOC;


extern const IID IID_IMalloc;



























#line 1059 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IMallocVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IMalloc * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IMalloc * This);
        
        ULONG ( __stdcall *Release )( 
            IMalloc * This);
        
        void *( __stdcall *Alloc )( 
            IMalloc * This,
             SIZE_T cb);
        
        void *( __stdcall *Realloc )( 
            IMalloc * This,
             void *pv,
             SIZE_T cb);
        
        void ( __stdcall *Free )( 
            IMalloc * This,
             void *pv);
        
        SIZE_T ( __stdcall *GetSize )( 
            IMalloc * This,
             void *pv);
        
        int ( __stdcall *DidAlloc )( 
            IMalloc * This,
            void *pv);
        
        void ( __stdcall *HeapMinimize )( 
            IMalloc * This);
        
        
    } IMallocVtbl;

    struct IMalloc
    {
         struct IMallocVtbl *lpVtbl;
    };

    



































#line 1144 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



void *__stdcall IMalloc_Alloc_Proxy( 
    IMalloc * This,
     SIZE_T cb);


void __stdcall IMalloc_Alloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__stdcall IMalloc_Realloc_Proxy( 
    IMalloc * This,
     void *pv,
     SIZE_T cb);


void __stdcall IMalloc_Realloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMalloc_Free_Proxy( 
    IMalloc * This,
     void *pv);


void __stdcall IMalloc_Free_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


SIZE_T __stdcall IMalloc_GetSize_Proxy( 
    IMalloc * This,
     void *pv);


void __stdcall IMalloc_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


int __stdcall IMalloc_DidAlloc_Proxy( 
    IMalloc * This,
    void *pv);


void __stdcall IMalloc_DidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMalloc_HeapMinimize_Proxy( 
    IMalloc * This);


void __stdcall IMalloc_HeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1221 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IMallocSpy *LPMALLOCSPY;


extern const IID IID_IMallocSpy;





















































#line 1287 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IMallocSpyVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IMallocSpy * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IMallocSpy * This);
        
        ULONG ( __stdcall *Release )( 
            IMallocSpy * This);
        
        SIZE_T ( __stdcall *PreAlloc )( 
            IMallocSpy * This,
             SIZE_T cbRequest);
        
        void *( __stdcall *PostAlloc )( 
            IMallocSpy * This,
             void *pActual);
        
        void *( __stdcall *PreFree )( 
            IMallocSpy * This,
             void *pRequest,
             BOOL fSpyed);
        
        void ( __stdcall *PostFree )( 
            IMallocSpy * This,
             BOOL fSpyed);
        
        SIZE_T ( __stdcall *PreRealloc )( 
            IMallocSpy * This,
             void *pRequest,
             SIZE_T cbRequest,
             void **ppNewRequest,
             BOOL fSpyed);
        
        void *( __stdcall *PostRealloc )( 
            IMallocSpy * This,
             void *pActual,
             BOOL fSpyed);
        
        void *( __stdcall *PreGetSize )( 
            IMallocSpy * This,
             void *pRequest,
             BOOL fSpyed);
        
        SIZE_T ( __stdcall *PostGetSize )( 
            IMallocSpy * This,
             SIZE_T cbActual,
             BOOL fSpyed);
        
        void *( __stdcall *PreDidAlloc )( 
            IMallocSpy * This,
             void *pRequest,
             BOOL fSpyed);
        
        int ( __stdcall *PostDidAlloc )( 
            IMallocSpy * This,
             void *pRequest,
             BOOL fSpyed,
             int fActual);
        
        void ( __stdcall *PreHeapMinimize )( 
            IMallocSpy * This);
        
        void ( __stdcall *PostHeapMinimize )( 
            IMallocSpy * This);
        
        
    } IMallocSpyVtbl;

    struct IMallocSpy
    {
         struct IMallocSpyVtbl *lpVtbl;
    };

    





















































#line 1422 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



SIZE_T __stdcall IMallocSpy_PreAlloc_Proxy( 
    IMallocSpy * This,
     SIZE_T cbRequest);


void __stdcall IMallocSpy_PreAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__stdcall IMallocSpy_PostAlloc_Proxy( 
    IMallocSpy * This,
     void *pActual);


void __stdcall IMallocSpy_PostAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__stdcall IMallocSpy_PreFree_Proxy( 
    IMallocSpy * This,
     void *pRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreFree_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMallocSpy_PostFree_Proxy( 
    IMallocSpy * This,
     BOOL fSpyed);


void __stdcall IMallocSpy_PostFree_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


SIZE_T __stdcall IMallocSpy_PreRealloc_Proxy( 
    IMallocSpy * This,
     void *pRequest,
     SIZE_T cbRequest,
     void **ppNewRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreRealloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__stdcall IMallocSpy_PostRealloc_Proxy( 
    IMallocSpy * This,
     void *pActual,
     BOOL fSpyed);


void __stdcall IMallocSpy_PostRealloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__stdcall IMallocSpy_PreGetSize_Proxy( 
    IMallocSpy * This,
     void *pRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


SIZE_T __stdcall IMallocSpy_PostGetSize_Proxy( 
    IMallocSpy * This,
     SIZE_T cbActual,
     BOOL fSpyed);


void __stdcall IMallocSpy_PostGetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void *__stdcall IMallocSpy_PreDidAlloc_Proxy( 
    IMallocSpy * This,
     void *pRequest,
     BOOL fSpyed);


void __stdcall IMallocSpy_PreDidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


int __stdcall IMallocSpy_PostDidAlloc_Proxy( 
    IMallocSpy * This,
     void *pRequest,
     BOOL fSpyed,
     int fActual);


void __stdcall IMallocSpy_PostDidAlloc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMallocSpy_PreHeapMinimize_Proxy( 
    IMallocSpy * This);


void __stdcall IMallocSpy_PreHeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IMallocSpy_PostHeapMinimize_Proxy( 
    IMallocSpy * This);


void __stdcall IMallocSpy_PostHeapMinimize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1579 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IStdMarshalInfo *LPSTDMARSHALINFO;


extern const IID IID_IStdMarshalInfo;














#line 1606 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IStdMarshalInfoVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IStdMarshalInfo * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IStdMarshalInfo * This);
        
        ULONG ( __stdcall *Release )( 
            IStdMarshalInfo * This);
        
        HRESULT ( __stdcall *GetClassForHandler )( 
            IStdMarshalInfo * This,
             DWORD dwDestContext,
             void *pvDestContext,
             CLSID *pClsid);
        
        
    } IStdMarshalInfoVtbl;

    struct IStdMarshalInfo
    {
         struct IStdMarshalInfoVtbl *lpVtbl;
    };

    




















#line 1658 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IStdMarshalInfo_GetClassForHandler_Proxy( 
    IStdMarshalInfo * This,
     DWORD dwDestContext,
     void *pvDestContext,
     CLSID *pClsid);


void __stdcall IStdMarshalInfo_GetClassForHandler_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1677 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IExternalConnection *LPEXTERNALCONNECTION;

typedef 
enum tagEXTCONN
    {	EXTCONN_STRONG	= 0x1,
	EXTCONN_WEAK	= 0x2,
	EXTCONN_CALLABLE	= 0x4
    } 	EXTCONN;


extern const IID IID_IExternalConnection;


















#line 1715 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IExternalConnectionVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IExternalConnection * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IExternalConnection * This);
        
        ULONG ( __stdcall *Release )( 
            IExternalConnection * This);
        
        DWORD ( __stdcall *AddConnection )( 
            IExternalConnection * This,
             DWORD extconn,
             DWORD reserved);
        
        DWORD ( __stdcall *ReleaseConnection )( 
            IExternalConnection * This,
             DWORD extconn,
             DWORD reserved,
             BOOL fLastReleaseCloses);
        
        
    } IExternalConnectionVtbl;

    struct IExternalConnection
    {
         struct IExternalConnectionVtbl *lpVtbl;
    };

    























#line 1775 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



DWORD __stdcall IExternalConnection_AddConnection_Proxy( 
    IExternalConnection * This,
     DWORD extconn,
     DWORD reserved);


void __stdcall IExternalConnection_AddConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __stdcall IExternalConnection_ReleaseConnection_Proxy( 
    IExternalConnection * This,
     DWORD extconn,
     DWORD reserved,
     BOOL fLastReleaseCloses);


void __stdcall IExternalConnection_ReleaseConnection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1807 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 

typedef  IMultiQI *LPMULTIQI;

typedef struct tagMULTI_QI
    {
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
    } 	MULTI_QI;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0015_v0_0_s_ifspec;





 


extern const IID IID_IMultiQI;













#line 1848 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IMultiQIVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IMultiQI * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IMultiQI * This);
        
        ULONG ( __stdcall *Release )( 
            IMultiQI * This);
        
        HRESULT ( __stdcall *QueryMultipleInterfaces )( 
            IMultiQI * This,
             ULONG cMQIs,
             MULTI_QI *pMQIs);
        
        
    } IMultiQIVtbl;

    struct IMultiQI
    {
         struct IMultiQIVtbl *lpVtbl;
    };

    




















#line 1899 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IMultiQI_QueryMultipleInterfaces_Proxy( 
    IMultiQI * This,
     ULONG cMQIs,
     MULTI_QI *pMQIs);


void __stdcall IMultiQI_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1917 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_AsyncIMultiQI;
















#line 1944 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct AsyncIMultiQIVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            AsyncIMultiQI * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            AsyncIMultiQI * This);
        
        ULONG ( __stdcall *Release )( 
            AsyncIMultiQI * This);
        
        HRESULT ( __stdcall *Begin_QueryMultipleInterfaces )( 
            AsyncIMultiQI * This,
             ULONG cMQIs,
             MULTI_QI *pMQIs);
        
        HRESULT ( __stdcall *Finish_QueryMultipleInterfaces )( 
            AsyncIMultiQI * This,
             MULTI_QI *pMQIs);
        
        
    } AsyncIMultiQIVtbl;

    struct AsyncIMultiQI
    {
         struct AsyncIMultiQIVtbl *lpVtbl;
    };

    























#line 2002 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall AsyncIMultiQI_Begin_QueryMultipleInterfaces_Proxy( 
    AsyncIMultiQI * This,
     ULONG cMQIs,
     MULTI_QI *pMQIs);


void __stdcall AsyncIMultiQI_Begin_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIMultiQI_Finish_QueryMultipleInterfaces_Proxy( 
    AsyncIMultiQI * This,
     MULTI_QI *pMQIs);


void __stdcall AsyncIMultiQI_Finish_QueryMultipleInterfaces_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2032 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IInternalUnknown;













#line 2056 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IInternalUnknownVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternalUnknown * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternalUnknown * This);
        
        ULONG ( __stdcall *Release )( 
            IInternalUnknown * This);
        
        HRESULT ( __stdcall *QueryInternalInterface )( 
            IInternalUnknown * This,
             const IID * const riid,
             void **ppv);
        
        
    } IInternalUnknownVtbl;

    struct IInternalUnknown
    {
         struct IInternalUnknownVtbl *lpVtbl;
    };

    




















#line 2107 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IInternalUnknown_QueryInternalInterface_Proxy( 
    IInternalUnknown * This,
     const IID * const riid,
     void **ppv);


void __stdcall IInternalUnknown_QueryInternalInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2125 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IEnumUnknown *LPENUMUNKNOWN;


extern const IID IID_IEnumUnknown;






















#line 2160 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IEnumUnknownVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IEnumUnknown * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IEnumUnknown * This);
        
        ULONG ( __stdcall *Release )( 
            IEnumUnknown * This);
        
         HRESULT ( __stdcall *Next )( 
            IEnumUnknown * This,
             ULONG celt,
             IUnknown **rgelt,
             ULONG *pceltFetched);
        
        HRESULT ( __stdcall *Skip )( 
            IEnumUnknown * This,
             ULONG celt);
        
        HRESULT ( __stdcall *Reset )( 
            IEnumUnknown * This);
        
        HRESULT ( __stdcall *Clone )( 
            IEnumUnknown * This,
             IEnumUnknown **ppenum);
        
        
    } IEnumUnknownVtbl;

    struct IEnumUnknown
    {
         struct IEnumUnknownVtbl *lpVtbl;
    };

    





























#line 2232 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall IEnumUnknown_RemoteNext_Proxy( 
    IEnumUnknown * This,
     ULONG celt,
     IUnknown **rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumUnknown_Skip_Proxy( 
    IEnumUnknown * This,
     ULONG celt);


void __stdcall IEnumUnknown_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumUnknown_Reset_Proxy( 
    IEnumUnknown * This);


void __stdcall IEnumUnknown_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumUnknown_Clone_Proxy( 
    IEnumUnknown * This,
     IEnumUnknown **ppenum);


void __stdcall IEnumUnknown_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2286 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IBindCtx *LPBC;

typedef  IBindCtx *LPBINDCTX;

typedef struct tagBIND_OPTS
    {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    } 	BIND_OPTS;

typedef struct tagBIND_OPTS *LPBIND_OPTS;








#line 2316 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"
typedef struct tagBIND_OPTS2
    {
    DWORD cbStruct;
    DWORD grfFlags;
    DWORD grfMode;
    DWORD dwTickCountDeadline;
    DWORD dwTrackFlags;
    DWORD dwClassContext;
    LCID locale;
    COSERVERINFO *pServerInfo;
    } 	BIND_OPTS2;

typedef struct tagBIND_OPTS2 *LPBIND_OPTS2;

#line 2331 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"
typedef 
enum tagBIND_FLAGS
    {	BIND_MAYBOTHERUSER	= 1,
	BIND_JUSTTESTEXISTENCE	= 2
    } 	BIND_FLAGS;


extern const IID IID_IBindCtx;








































#line 2380 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IBindCtxVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IBindCtx * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IBindCtx * This);
        
        ULONG ( __stdcall *Release )( 
            IBindCtx * This);
        
        HRESULT ( __stdcall *RegisterObjectBound )( 
            IBindCtx * This,
             IUnknown *punk);
        
        HRESULT ( __stdcall *RevokeObjectBound )( 
            IBindCtx * This,
             IUnknown *punk);
        
        HRESULT ( __stdcall *ReleaseBoundObjects )( 
            IBindCtx * This);
        
         HRESULT ( __stdcall *SetBindOptions )( 
            IBindCtx * This,
             BIND_OPTS *pbindopts);
        
         HRESULT ( __stdcall *GetBindOptions )( 
            IBindCtx * This,
             BIND_OPTS *pbindopts);
        
        HRESULT ( __stdcall *GetRunningObjectTable )( 
            IBindCtx * This,
             IRunningObjectTable **pprot);
        
        HRESULT ( __stdcall *RegisterObjectParam )( 
            IBindCtx * This,
             LPOLESTR pszKey,
             IUnknown *punk);
        
        HRESULT ( __stdcall *GetObjectParam )( 
            IBindCtx * This,
             LPOLESTR pszKey,
             IUnknown **ppunk);
        
        HRESULT ( __stdcall *EnumObjectParam )( 
            IBindCtx * This,
             IEnumString **ppenum);
        
        HRESULT ( __stdcall *RevokeObjectParam )( 
            IBindCtx * This,
             LPOLESTR pszKey);
        
        
    } IBindCtxVtbl;

    struct IBindCtx
    {
         struct IBindCtxVtbl *lpVtbl;
    };

    















































#line 2494 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IBindCtx_RegisterObjectBound_Proxy( 
    IBindCtx * This,
     IUnknown *punk);


void __stdcall IBindCtx_RegisterObjectBound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_RevokeObjectBound_Proxy( 
    IBindCtx * This,
     IUnknown *punk);


void __stdcall IBindCtx_RevokeObjectBound_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_ReleaseBoundObjects_Proxy( 
    IBindCtx * This);


void __stdcall IBindCtx_ReleaseBoundObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindCtx_RemoteSetBindOptions_Proxy( 
    IBindCtx * This,
     BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindCtx_RemoteGetBindOptions_Proxy( 
    IBindCtx * This,
     BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_GetRunningObjectTable_Proxy( 
    IBindCtx * This,
     IRunningObjectTable **pprot);


void __stdcall IBindCtx_GetRunningObjectTable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_RegisterObjectParam_Proxy( 
    IBindCtx * This,
     LPOLESTR pszKey,
     IUnknown *punk);


void __stdcall IBindCtx_RegisterObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_GetObjectParam_Proxy( 
    IBindCtx * This,
     LPOLESTR pszKey,
     IUnknown **ppunk);


void __stdcall IBindCtx_GetObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_EnumObjectParam_Proxy( 
    IBindCtx * This,
     IEnumString **ppenum);


void __stdcall IBindCtx_EnumObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindCtx_RevokeObjectParam_Proxy( 
    IBindCtx * This,
     LPOLESTR pszKey);


void __stdcall IBindCtx_RevokeObjectParam_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2620 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IEnumMoniker *LPENUMMONIKER;


extern const IID IID_IEnumMoniker;






















#line 2655 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IEnumMonikerVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IEnumMoniker * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IEnumMoniker * This);
        
        ULONG ( __stdcall *Release )( 
            IEnumMoniker * This);
        
         HRESULT ( __stdcall *Next )( 
            IEnumMoniker * This,
             ULONG celt,
             IMoniker **rgelt,
             ULONG *pceltFetched);
        
        HRESULT ( __stdcall *Skip )( 
            IEnumMoniker * This,
             ULONG celt);
        
        HRESULT ( __stdcall *Reset )( 
            IEnumMoniker * This);
        
        HRESULT ( __stdcall *Clone )( 
            IEnumMoniker * This,
             IEnumMoniker **ppenum);
        
        
    } IEnumMonikerVtbl;

    struct IEnumMoniker
    {
         struct IEnumMonikerVtbl *lpVtbl;
    };

    





























#line 2727 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall IEnumMoniker_RemoteNext_Proxy( 
    IEnumMoniker * This,
     ULONG celt,
     IMoniker **rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumMoniker_Skip_Proxy( 
    IEnumMoniker * This,
     ULONG celt);


void __stdcall IEnumMoniker_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumMoniker_Reset_Proxy( 
    IEnumMoniker * This);


void __stdcall IEnumMoniker_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumMoniker_Clone_Proxy( 
    IEnumMoniker * This,
     IEnumMoniker **ppenum);


void __stdcall IEnumMoniker_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2781 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IRunnableObject *LPRUNNABLEOBJECT;


extern const IID IID_IRunnableObject;
























#line 2818 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IRunnableObjectVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IRunnableObject * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IRunnableObject * This);
        
        ULONG ( __stdcall *Release )( 
            IRunnableObject * This);
        
        HRESULT ( __stdcall *GetRunningClass )( 
            IRunnableObject * This,
             LPCLSID lpClsid);
        
        HRESULT ( __stdcall *Run )( 
            IRunnableObject * This,
             LPBINDCTX pbc);
        
         BOOL ( __stdcall *IsRunning )( 
            IRunnableObject * This);
        
        HRESULT ( __stdcall *LockRunning )( 
            IRunnableObject * This,
             BOOL fLock,
             BOOL fLastUnlockCloses);
        
        HRESULT ( __stdcall *SetContainedObject )( 
            IRunnableObject * This,
             BOOL fContained);
        
        
    } IRunnableObjectVtbl;

    struct IRunnableObject
    {
         struct IRunnableObjectVtbl *lpVtbl;
    };

    
































#line 2896 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IRunnableObject_GetRunningClass_Proxy( 
    IRunnableObject * This,
     LPCLSID lpClsid);


void __stdcall IRunnableObject_GetRunningClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunnableObject_Run_Proxy( 
    IRunnableObject * This,
     LPBINDCTX pbc);


void __stdcall IRunnableObject_Run_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IRunnableObject_RemoteIsRunning_Proxy( 
    IRunnableObject * This);


void __stdcall IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunnableObject_LockRunning_Proxy( 
    IRunnableObject * This,
     BOOL fLock,
     BOOL fLastUnlockCloses);


void __stdcall IRunnableObject_LockRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunnableObject_SetContainedObject_Proxy( 
    IRunnableObject * This,
     BOOL fContained);


void __stdcall IRunnableObject_SetContainedObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2961 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IRunningObjectTable *LPRUNNINGOBJECTTABLE;


extern const IID IID_IRunningObjectTable;




































#line 3010 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IRunningObjectTableVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IRunningObjectTable * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IRunningObjectTable * This);
        
        ULONG ( __stdcall *Release )( 
            IRunningObjectTable * This);
        
        HRESULT ( __stdcall *Register )( 
            IRunningObjectTable * This,
             DWORD grfFlags,
             IUnknown *punkObject,
             IMoniker *pmkObjectName,
             DWORD *pdwRegister);
        
        HRESULT ( __stdcall *Revoke )( 
            IRunningObjectTable * This,
             DWORD dwRegister);
        
        HRESULT ( __stdcall *IsRunning )( 
            IRunningObjectTable * This,
             IMoniker *pmkObjectName);
        
        HRESULT ( __stdcall *GetObjectA )( 
            IRunningObjectTable * This,
             IMoniker *pmkObjectName,
             IUnknown **ppunkObject);
        
        HRESULT ( __stdcall *NoteChangeTime )( 
            IRunningObjectTable * This,
             DWORD dwRegister,
             FILETIME *pfiletime);
        
        HRESULT ( __stdcall *GetTimeOfLastChange )( 
            IRunningObjectTable * This,
             IMoniker *pmkObjectName,
             FILETIME *pfiletime);
        
        HRESULT ( __stdcall *EnumRunning )( 
            IRunningObjectTable * This,
             IEnumMoniker **ppenumMoniker);
        
        
    } IRunningObjectTableVtbl;

    struct IRunningObjectTable
    {
         struct IRunningObjectTableVtbl *lpVtbl;
    };

    






































#line 3108 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IRunningObjectTable_Register_Proxy( 
    IRunningObjectTable * This,
     DWORD grfFlags,
     IUnknown *punkObject,
     IMoniker *pmkObjectName,
     DWORD *pdwRegister);


void __stdcall IRunningObjectTable_Register_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_Revoke_Proxy( 
    IRunningObjectTable * This,
     DWORD dwRegister);


void __stdcall IRunningObjectTable_Revoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_IsRunning_Proxy( 
    IRunningObjectTable * This,
     IMoniker *pmkObjectName);


void __stdcall IRunningObjectTable_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_GetObject_Proxy( 
    IRunningObjectTable * This,
     IMoniker *pmkObjectName,
     IUnknown **ppunkObject);


void __stdcall IRunningObjectTable_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_NoteChangeTime_Proxy( 
    IRunningObjectTable * This,
     DWORD dwRegister,
     FILETIME *pfiletime);


void __stdcall IRunningObjectTable_NoteChangeTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_GetTimeOfLastChange_Proxy( 
    IRunningObjectTable * This,
     IMoniker *pmkObjectName,
     FILETIME *pfiletime);


void __stdcall IRunningObjectTable_GetTimeOfLastChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRunningObjectTable_EnumRunning_Proxy( 
    IRunningObjectTable * This,
     IEnumMoniker **ppenumMoniker);


void __stdcall IRunningObjectTable_EnumRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3203 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IPersist *LPPERSIST;


extern const IID IID_IPersist;












#line 3228 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IPersistVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IPersist * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IPersist * This);
        
        ULONG ( __stdcall *Release )( 
            IPersist * This);
        
        HRESULT ( __stdcall *GetClassID )( 
            IPersist * This,
             CLSID *pClassID);
        
        
    } IPersistVtbl;

    struct IPersist
    {
         struct IPersistVtbl *lpVtbl;
    };

    




















#line 3278 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IPersist_GetClassID_Proxy( 
    IPersist * This,
     CLSID *pClassID);


void __stdcall IPersist_GetClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3295 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IPersistStream *LPPERSISTSTREAM;


extern const IID IID_IPersistStream;





















#line 3329 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IPersistStreamVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IPersistStream * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IPersistStream * This);
        
        ULONG ( __stdcall *Release )( 
            IPersistStream * This);
        
        HRESULT ( __stdcall *GetClassID )( 
            IPersistStream * This,
             CLSID *pClassID);
        
        HRESULT ( __stdcall *IsDirty )( 
            IPersistStream * This);
        
        HRESULT ( __stdcall *Load )( 
            IPersistStream * This,
             IStream *pStm);
        
        HRESULT ( __stdcall *Save )( 
            IPersistStream * This,
             IStream *pStm,
             BOOL fClearDirty);
        
        HRESULT ( __stdcall *GetSizeMax )( 
            IPersistStream * This,
             ULARGE_INTEGER *pcbSize);
        
        
    } IPersistStreamVtbl;

    struct IPersistStream
    {
         struct IPersistStreamVtbl *lpVtbl;
    };

    

































#line 3408 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IPersistStream_IsDirty_Proxy( 
    IPersistStream * This);


void __stdcall IPersistStream_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStream_Load_Proxy( 
    IPersistStream * This,
     IStream *pStm);


void __stdcall IPersistStream_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStream_Save_Proxy( 
    IPersistStream * This,
     IStream *pStm,
     BOOL fClearDirty);


void __stdcall IPersistStream_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStream_GetSizeMax_Proxy( 
    IPersistStream * This,
     ULARGE_INTEGER *pcbSize);


void __stdcall IPersistStream_GetSizeMax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3461 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IMoniker *LPMONIKER;

typedef 
enum tagMKSYS
    {	MKSYS_NONE	= 0,
	MKSYS_GENERICCOMPOSITE	= 1,
	MKSYS_FILEMONIKER	= 2,
	MKSYS_ANTIMONIKER	= 3,
	MKSYS_ITEMMONIKER	= 4,
	MKSYS_POINTERMONIKER	= 5,
	MKSYS_CLASSMONIKER	= 7,
	MKSYS_OBJREFMONIKER	= 8,
	MKSYS_SESSIONMONIKER	= 9
    } 	MKSYS;

typedef  
enum tagMKREDUCE
    {	MKRREDUCE_ONE	= 3 << 16,
	MKRREDUCE_TOUSER	= 2 << 16,
	MKRREDUCE_THROUGHUSER	= 1 << 16,
	MKRREDUCE_ALL	= 0
    } 	MKRREDUCE;


extern const IID IID_IMoniker;














































































#line 3573 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IMonikerVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IMoniker * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IMoniker * This);
        
        ULONG ( __stdcall *Release )( 
            IMoniker * This);
        
        HRESULT ( __stdcall *GetClassID )( 
            IMoniker * This,
             CLSID *pClassID);
        
        HRESULT ( __stdcall *IsDirty )( 
            IMoniker * This);
        
        HRESULT ( __stdcall *Load )( 
            IMoniker * This,
             IStream *pStm);
        
        HRESULT ( __stdcall *Save )( 
            IMoniker * This,
             IStream *pStm,
             BOOL fClearDirty);
        
        HRESULT ( __stdcall *GetSizeMax )( 
            IMoniker * This,
             ULARGE_INTEGER *pcbSize);
        
         HRESULT ( __stdcall *BindToObject )( 
            IMoniker * This,
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             const IID * const riidResult,
             void **ppvResult);
        
         HRESULT ( __stdcall *BindToStorage )( 
            IMoniker * This,
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             const IID * const riid,
             void **ppvObj);
        
        HRESULT ( __stdcall *Reduce )( 
            IMoniker * This,
             IBindCtx *pbc,
             DWORD dwReduceHowFar,
             IMoniker **ppmkToLeft,
             IMoniker **ppmkReduced);
        
        HRESULT ( __stdcall *ComposeWith )( 
            IMoniker * This,
             IMoniker *pmkRight,
             BOOL fOnlyIfNotGeneric,
             IMoniker **ppmkComposite);
        
        HRESULT ( __stdcall *Enum )( 
            IMoniker * This,
             BOOL fForward,
             IEnumMoniker **ppenumMoniker);
        
        HRESULT ( __stdcall *IsEqual )( 
            IMoniker * This,
             IMoniker *pmkOtherMoniker);
        
        HRESULT ( __stdcall *Hash )( 
            IMoniker * This,
             DWORD *pdwHash);
        
        HRESULT ( __stdcall *IsRunning )( 
            IMoniker * This,
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             IMoniker *pmkNewlyRunning);
        
        HRESULT ( __stdcall *GetTimeOfLastChange )( 
            IMoniker * This,
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             FILETIME *pFileTime);
        
        HRESULT ( __stdcall *Inverse )( 
            IMoniker * This,
             IMoniker **ppmk);
        
        HRESULT ( __stdcall *CommonPrefixWith )( 
            IMoniker * This,
             IMoniker *pmkOther,
             IMoniker **ppmkPrefix);
        
        HRESULT ( __stdcall *RelativePathTo )( 
            IMoniker * This,
             IMoniker *pmkOther,
             IMoniker **ppmkRelPath);
        
        HRESULT ( __stdcall *GetDisplayName )( 
            IMoniker * This,
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             LPOLESTR *ppszDisplayName);
        
        HRESULT ( __stdcall *ParseDisplayName )( 
            IMoniker * This,
             IBindCtx *pbc,
             IMoniker *pmkToLeft,
             LPOLESTR pszDisplayName,
             ULONG *pchEaten,
             IMoniker **ppmkOut);
        
        HRESULT ( __stdcall *IsSystemMoniker )( 
            IMoniker * This,
             DWORD *pdwMksys);
        
        
    } IMonikerVtbl;

    struct IMoniker
    {
         struct IMonikerVtbl *lpVtbl;
    };

    















































































#line 3782 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall IMoniker_RemoteBindToObject_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID * const riidResult,
     IUnknown **ppvResult);


void __stdcall IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMoniker_RemoteBindToStorage_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID * const riid,
     IUnknown **ppvObj);


void __stdcall IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Reduce_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     DWORD dwReduceHowFar,
     IMoniker **ppmkToLeft,
     IMoniker **ppmkReduced);


void __stdcall IMoniker_Reduce_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_ComposeWith_Proxy( 
    IMoniker * This,
     IMoniker *pmkRight,
     BOOL fOnlyIfNotGeneric,
     IMoniker **ppmkComposite);


void __stdcall IMoniker_ComposeWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Enum_Proxy( 
    IMoniker * This,
     BOOL fForward,
     IEnumMoniker **ppenumMoniker);


void __stdcall IMoniker_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_IsEqual_Proxy( 
    IMoniker * This,
     IMoniker *pmkOtherMoniker);


void __stdcall IMoniker_IsEqual_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Hash_Proxy( 
    IMoniker * This,
     DWORD *pdwHash);


void __stdcall IMoniker_Hash_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_IsRunning_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     IMoniker *pmkNewlyRunning);


void __stdcall IMoniker_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_GetTimeOfLastChange_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     FILETIME *pFileTime);


void __stdcall IMoniker_GetTimeOfLastChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_Inverse_Proxy( 
    IMoniker * This,
     IMoniker **ppmk);


void __stdcall IMoniker_Inverse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_CommonPrefixWith_Proxy( 
    IMoniker * This,
     IMoniker *pmkOther,
     IMoniker **ppmkPrefix);


void __stdcall IMoniker_CommonPrefixWith_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_RelativePathTo_Proxy( 
    IMoniker * This,
     IMoniker *pmkOther,
     IMoniker **ppmkRelPath);


void __stdcall IMoniker_RelativePathTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_GetDisplayName_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     LPOLESTR *ppszDisplayName);


void __stdcall IMoniker_GetDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_ParseDisplayName_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     LPOLESTR pszDisplayName,
     ULONG *pchEaten,
     IMoniker **ppmkOut);


void __stdcall IMoniker_ParseDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IMoniker_IsSystemMoniker_Proxy( 
    IMoniker * This,
     DWORD *pdwMksys);


void __stdcall IMoniker_IsSystemMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3991 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IROTData;














#line 4016 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IROTDataVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IROTData * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IROTData * This);
        
        ULONG ( __stdcall *Release )( 
            IROTData * This);
        
        HRESULT ( __stdcall *GetComparisonData )( 
            IROTData * This,
             byte *pbData,
             ULONG cbMax,
             ULONG *pcbData);
        
        
    } IROTDataVtbl;

    struct IROTData
    {
         struct IROTDataVtbl *lpVtbl;
    };

    




















#line 4068 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IROTData_GetComparisonData_Proxy( 
    IROTData * This,
     byte *pbData,
     ULONG cbMax,
     ULONG *pcbData);


void __stdcall IROTData_GetComparisonData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4087 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IEnumString *LPENUMSTRING;


extern const IID IID_IEnumString;






















#line 4122 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IEnumStringVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IEnumString * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IEnumString * This);
        
        ULONG ( __stdcall *Release )( 
            IEnumString * This);
        
         HRESULT ( __stdcall *Next )( 
            IEnumString * This,
             ULONG celt,
             LPOLESTR *rgelt,
             ULONG *pceltFetched);
        
        HRESULT ( __stdcall *Skip )( 
            IEnumString * This,
             ULONG celt);
        
        HRESULT ( __stdcall *Reset )( 
            IEnumString * This);
        
        HRESULT ( __stdcall *Clone )( 
            IEnumString * This,
             IEnumString **ppenum);
        
        
    } IEnumStringVtbl;

    struct IEnumString
    {
         struct IEnumStringVtbl *lpVtbl;
    };

    





























#line 4194 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall IEnumString_RemoteNext_Proxy( 
    IEnumString * This,
     ULONG celt,
     LPOLESTR *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumString_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumString_Skip_Proxy( 
    IEnumString * This,
     ULONG celt);


void __stdcall IEnumString_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumString_Reset_Proxy( 
    IEnumString * This);


void __stdcall IEnumString_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumString_Clone_Proxy( 
    IEnumString * This,
     IEnumString **ppenum);


void __stdcall IEnumString_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4248 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_ISequentialStream;



















#line 4278 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct ISequentialStreamVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ISequentialStream * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ISequentialStream * This);
        
        ULONG ( __stdcall *Release )( 
            ISequentialStream * This);
        
         HRESULT ( __stdcall *Read )( 
            ISequentialStream * This,
             void *pv,
             ULONG cb,
             ULONG *pcbRead);
        
         HRESULT ( __stdcall *Write )( 
            ISequentialStream * This,
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten);
        
        
    } ISequentialStreamVtbl;

    struct ISequentialStream
    {
         struct ISequentialStreamVtbl *lpVtbl;
    };

    























#line 4339 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall ISequentialStream_RemoteRead_Proxy( 
    ISequentialStream * This,
     byte *pv,
     ULONG cb,
     ULONG *pcbRead);


void __stdcall ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISequentialStream_RemoteWrite_Proxy( 
    ISequentialStream * This,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);


void __stdcall ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4372 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IStream *LPSTREAM;



















typedef struct tagSTATSTG
    {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
    } 	STATSTG;

#line 4416 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"
typedef 
enum tagSTGTY
    {	STGTY_STORAGE	= 1,
	STGTY_STREAM	= 2,
	STGTY_LOCKBYTES	= 3,
	STGTY_PROPERTY	= 4
    } 	STGTY;

typedef 
enum tagSTREAM_SEEK
    {	STREAM_SEEK_SET	= 0,
	STREAM_SEEK_CUR	= 1,
	STREAM_SEEK_END	= 2
    } 	STREAM_SEEK;

typedef 
enum tagLOCKTYPE
    {	LOCK_WRITE	= 1,
	LOCK_EXCLUSIVE	= 2,
	LOCK_ONLYONCE	= 4
    } 	LOCKTYPE;


extern const IID IID_IStream;













































#line 4486 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IStreamVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IStream * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IStream * This);
        
        ULONG ( __stdcall *Release )( 
            IStream * This);
        
         HRESULT ( __stdcall *Read )( 
            IStream * This,
             void *pv,
             ULONG cb,
             ULONG *pcbRead);
        
         HRESULT ( __stdcall *Write )( 
            IStream * This,
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten);
        
         HRESULT ( __stdcall *Seek )( 
            IStream * This,
             LARGE_INTEGER dlibMove,
             DWORD dwOrigin,
             ULARGE_INTEGER *plibNewPosition);
        
        HRESULT ( __stdcall *SetSize )( 
            IStream * This,
             ULARGE_INTEGER libNewSize);
        
         HRESULT ( __stdcall *CopyTo )( 
            IStream * This,
             IStream *pstm,
             ULARGE_INTEGER cb,
             ULARGE_INTEGER *pcbRead,
             ULARGE_INTEGER *pcbWritten);
        
        HRESULT ( __stdcall *Commit )( 
            IStream * This,
             DWORD grfCommitFlags);
        
        HRESULT ( __stdcall *Revert )( 
            IStream * This);
        
        HRESULT ( __stdcall *LockRegion )( 
            IStream * This,
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType);
        
        HRESULT ( __stdcall *UnlockRegion )( 
            IStream * This,
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType);
        
        HRESULT ( __stdcall *Stat )( 
            IStream * This,
             STATSTG *pstatstg,
             DWORD grfStatFlag);
        
        HRESULT ( __stdcall *Clone )( 
            IStream * This,
             IStream **ppstm);
        
        
    } IStreamVtbl;

    struct IStream
    {
         struct IStreamVtbl *lpVtbl;
    };

    



















































#line 4620 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall IStream_RemoteSeek_Proxy( 
    IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER *plibNewPosition);


void __stdcall IStream_RemoteSeek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_SetSize_Proxy( 
    IStream * This,
     ULARGE_INTEGER libNewSize);


void __stdcall IStream_SetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStream_RemoteCopyTo_Proxy( 
    IStream * This,
     IStream *pstm,
     ULARGE_INTEGER cb,
     ULARGE_INTEGER *pcbRead,
     ULARGE_INTEGER *pcbWritten);


void __stdcall IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Commit_Proxy( 
    IStream * This,
     DWORD grfCommitFlags);


void __stdcall IStream_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Revert_Proxy( 
    IStream * This);


void __stdcall IStream_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_LockRegion_Proxy( 
    IStream * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall IStream_LockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_UnlockRegion_Proxy( 
    IStream * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall IStream_UnlockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Stat_Proxy( 
    IStream * This,
     STATSTG *pstatstg,
     DWORD grfStatFlag);


void __stdcall IStream_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStream_Clone_Proxy( 
    IStream * This,
     IStream **ppstm);


void __stdcall IStream_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4742 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IEnumSTATSTG *LPENUMSTATSTG;


extern const IID IID_IEnumSTATSTG;






















#line 4777 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IEnumSTATSTGVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IEnumSTATSTG * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IEnumSTATSTG * This);
        
        ULONG ( __stdcall *Release )( 
            IEnumSTATSTG * This);
        
         HRESULT ( __stdcall *Next )( 
            IEnumSTATSTG * This,
             ULONG celt,
             STATSTG *rgelt,
             ULONG *pceltFetched);
        
        HRESULT ( __stdcall *Skip )( 
            IEnumSTATSTG * This,
             ULONG celt);
        
        HRESULT ( __stdcall *Reset )( 
            IEnumSTATSTG * This);
        
        HRESULT ( __stdcall *Clone )( 
            IEnumSTATSTG * This,
             IEnumSTATSTG **ppenum);
        
        
    } IEnumSTATSTGVtbl;

    struct IEnumSTATSTG
    {
         struct IEnumSTATSTGVtbl *lpVtbl;
    };

    





























#line 4849 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall IEnumSTATSTG_RemoteNext_Proxy( 
    IEnumSTATSTG * This,
     ULONG celt,
     STATSTG *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATSTG_Skip_Proxy( 
    IEnumSTATSTG * This,
     ULONG celt);


void __stdcall IEnumSTATSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATSTG_Reset_Proxy( 
    IEnumSTATSTG * This);


void __stdcall IEnumSTATSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATSTG_Clone_Proxy( 
    IEnumSTATSTG * This,
     IEnumSTATSTG **ppenum);


void __stdcall IEnumSTATSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4903 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IStorage *LPSTORAGE;

typedef struct tagRemSNB
    {
    unsigned long ulCntStr;
    unsigned long ulCntChar;
     OLECHAR rgString[ 1 ];
    } 	RemSNB;

typedef  RemSNB *wireSNB;

typedef  OLECHAR **SNB;


extern const IID IID_IStorage;





















































































#line 5012 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IStorageVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IStorage * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IStorage * This);
        
        ULONG ( __stdcall *Release )( 
            IStorage * This);
        
        HRESULT ( __stdcall *CreateStream )( 
            IStorage * This,
             const OLECHAR *pwcsName,
             DWORD grfMode,
             DWORD reserved1,
             DWORD reserved2,
             IStream **ppstm);
        
         HRESULT ( __stdcall *OpenStream )( 
            IStorage * This,
             const OLECHAR *pwcsName,
             void *reserved1,
             DWORD grfMode,
             DWORD reserved2,
             IStream **ppstm);
        
        HRESULT ( __stdcall *CreateStorage )( 
            IStorage * This,
             const OLECHAR *pwcsName,
             DWORD grfMode,
             DWORD reserved1,
             DWORD reserved2,
             IStorage **ppstg);
        
        HRESULT ( __stdcall *OpenStorage )( 
            IStorage * This,
             const OLECHAR *pwcsName,
             IStorage *pstgPriority,
             DWORD grfMode,
             SNB snbExclude,
             DWORD reserved,
             IStorage **ppstg);
        
        HRESULT ( __stdcall *CopyTo )( 
            IStorage * This,
             DWORD ciidExclude,
             const IID *rgiidExclude,
             SNB snbExclude,
             IStorage *pstgDest);
        
        HRESULT ( __stdcall *MoveElementTo )( 
            IStorage * This,
             const OLECHAR *pwcsName,
             IStorage *pstgDest,
             const OLECHAR *pwcsNewName,
             DWORD grfFlags);
        
        HRESULT ( __stdcall *Commit )( 
            IStorage * This,
             DWORD grfCommitFlags);
        
        HRESULT ( __stdcall *Revert )( 
            IStorage * This);
        
         HRESULT ( __stdcall *EnumElements )( 
            IStorage * This,
             DWORD reserved1,
             void *reserved2,
             DWORD reserved3,
             IEnumSTATSTG **ppenum);
        
        HRESULT ( __stdcall *DestroyElement )( 
            IStorage * This,
             const OLECHAR *pwcsName);
        
        HRESULT ( __stdcall *RenameElement )( 
            IStorage * This,
             const OLECHAR *pwcsOldName,
             const OLECHAR *pwcsNewName);
        
        HRESULT ( __stdcall *SetElementTimes )( 
            IStorage * This,
             const OLECHAR *pwcsName,
             const FILETIME *pctime,
             const FILETIME *patime,
             const FILETIME *pmtime);
        
        HRESULT ( __stdcall *SetClass )( 
            IStorage * This,
             const IID * const clsid);
        
        HRESULT ( __stdcall *SetStateBits )( 
            IStorage * This,
             DWORD grfStateBits,
             DWORD grfMask);
        
        HRESULT ( __stdcall *Stat )( 
            IStorage * This,
             STATSTG *pstatstg,
             DWORD grfStatFlag);
        
        
    } IStorageVtbl;

    struct IStorage
    {
         struct IStorageVtbl *lpVtbl;
    };

    






























































#line 5191 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IStorage_CreateStream_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     DWORD grfMode,
     DWORD reserved1,
     DWORD reserved2,
     IStream **ppstm);


void __stdcall IStorage_CreateStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStorage_RemoteOpenStream_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     unsigned long cbReserved1,
     byte *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     IStream **ppstm);


void __stdcall IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_CreateStorage_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     DWORD grfMode,
     DWORD reserved1,
     DWORD reserved2,
     IStorage **ppstg);


void __stdcall IStorage_CreateStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_OpenStorage_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     IStorage *pstgPriority,
     DWORD grfMode,
     SNB snbExclude,
     DWORD reserved,
     IStorage **ppstg);


void __stdcall IStorage_OpenStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_CopyTo_Proxy( 
    IStorage * This,
     DWORD ciidExclude,
     const IID *rgiidExclude,
     SNB snbExclude,
     IStorage *pstgDest);


void __stdcall IStorage_CopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_MoveElementTo_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     IStorage *pstgDest,
     const OLECHAR *pwcsNewName,
     DWORD grfFlags);


void __stdcall IStorage_MoveElementTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_Commit_Proxy( 
    IStorage * This,
     DWORD grfCommitFlags);


void __stdcall IStorage_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_Revert_Proxy( 
    IStorage * This);


void __stdcall IStorage_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStorage_RemoteEnumElements_Proxy( 
    IStorage * This,
     DWORD reserved1,
     unsigned long cbReserved2,
     byte *reserved2,
     DWORD reserved3,
     IEnumSTATSTG **ppenum);


void __stdcall IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_DestroyElement_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName);


void __stdcall IStorage_DestroyElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_RenameElement_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsOldName,
     const OLECHAR *pwcsNewName);


void __stdcall IStorage_RenameElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_SetElementTimes_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     const FILETIME *pctime,
     const FILETIME *patime,
     const FILETIME *pmtime);


void __stdcall IStorage_SetElementTimes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_SetClass_Proxy( 
    IStorage * This,
     const IID * const clsid);


void __stdcall IStorage_SetClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_SetStateBits_Proxy( 
    IStorage * This,
     DWORD grfStateBits,
     DWORD grfMask);


void __stdcall IStorage_SetStateBits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IStorage_Stat_Proxy( 
    IStorage * This,
     STATSTG *pstatstg,
     DWORD grfStatFlag);


void __stdcall IStorage_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5409 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IPersistFile *LPPERSISTFILE;


extern const IID IID_IPersistFile;

























#line 5447 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IPersistFileVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IPersistFile * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IPersistFile * This);
        
        ULONG ( __stdcall *Release )( 
            IPersistFile * This);
        
        HRESULT ( __stdcall *GetClassID )( 
            IPersistFile * This,
             CLSID *pClassID);
        
        HRESULT ( __stdcall *IsDirty )( 
            IPersistFile * This);
        
        HRESULT ( __stdcall *Load )( 
            IPersistFile * This,
             LPCOLESTR pszFileName,
             DWORD dwMode);
        
        HRESULT ( __stdcall *Save )( 
            IPersistFile * This,
             LPCOLESTR pszFileName,
             BOOL fRemember);
        
        HRESULT ( __stdcall *SaveCompleted )( 
            IPersistFile * This,
             LPCOLESTR pszFileName);
        
        HRESULT ( __stdcall *GetCurFile )( 
            IPersistFile * This,
             LPOLESTR *ppszFileName);
        
        
    } IPersistFileVtbl;

    struct IPersistFile
    {
         struct IPersistFileVtbl *lpVtbl;
    };

    




































#line 5534 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IPersistFile_IsDirty_Proxy( 
    IPersistFile * This);


void __stdcall IPersistFile_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_Load_Proxy( 
    IPersistFile * This,
     LPCOLESTR pszFileName,
     DWORD dwMode);


void __stdcall IPersistFile_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_Save_Proxy( 
    IPersistFile * This,
     LPCOLESTR pszFileName,
     BOOL fRemember);


void __stdcall IPersistFile_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_SaveCompleted_Proxy( 
    IPersistFile * This,
     LPCOLESTR pszFileName);


void __stdcall IPersistFile_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistFile_GetCurFile_Proxy( 
    IPersistFile * This,
     LPOLESTR *ppszFileName);


void __stdcall IPersistFile_GetCurFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5600 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IPersistStorage *LPPERSISTSTORAGE;


extern const IID IID_IPersistStorage;


























#line 5639 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IPersistStorageVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IPersistStorage * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IPersistStorage * This);
        
        ULONG ( __stdcall *Release )( 
            IPersistStorage * This);
        
        HRESULT ( __stdcall *GetClassID )( 
            IPersistStorage * This,
             CLSID *pClassID);
        
        HRESULT ( __stdcall *IsDirty )( 
            IPersistStorage * This);
        
        HRESULT ( __stdcall *InitNew )( 
            IPersistStorage * This,
             IStorage *pStg);
        
        HRESULT ( __stdcall *Load )( 
            IPersistStorage * This,
             IStorage *pStg);
        
        HRESULT ( __stdcall *Save )( 
            IPersistStorage * This,
             IStorage *pStgSave,
             BOOL fSameAsLoad);
        
        HRESULT ( __stdcall *SaveCompleted )( 
            IPersistStorage * This,
             IStorage *pStgNew);
        
        HRESULT ( __stdcall *HandsOffStorage )( 
            IPersistStorage * This);
        
        
    } IPersistStorageVtbl;

    struct IPersistStorage
    {
         struct IPersistStorageVtbl *lpVtbl;
    };

    







































#line 5731 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IPersistStorage_IsDirty_Proxy( 
    IPersistStorage * This);


void __stdcall IPersistStorage_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_InitNew_Proxy( 
    IPersistStorage * This,
     IStorage *pStg);


void __stdcall IPersistStorage_InitNew_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_Load_Proxy( 
    IPersistStorage * This,
     IStorage *pStg);


void __stdcall IPersistStorage_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_Save_Proxy( 
    IPersistStorage * This,
     IStorage *pStgSave,
     BOOL fSameAsLoad);


void __stdcall IPersistStorage_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_SaveCompleted_Proxy( 
    IPersistStorage * This,
     IStorage *pStgNew);


void __stdcall IPersistStorage_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistStorage_HandsOffStorage_Proxy( 
    IPersistStorage * This);


void __stdcall IPersistStorage_HandsOffStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5807 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  ILockBytes *LPLOCKBYTES;


extern const IID IID_ILockBytes;








































#line 5860 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct ILockBytesVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ILockBytes * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ILockBytes * This);
        
        ULONG ( __stdcall *Release )( 
            ILockBytes * This);
        
         HRESULT ( __stdcall *ReadAt )( 
            ILockBytes * This,
             ULARGE_INTEGER ulOffset,
             void *pv,
             ULONG cb,
             ULONG *pcbRead);
        
         HRESULT ( __stdcall *WriteAt )( 
            ILockBytes * This,
             ULARGE_INTEGER ulOffset,
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten);
        
        HRESULT ( __stdcall *Flush )( 
            ILockBytes * This);
        
        HRESULT ( __stdcall *SetSize )( 
            ILockBytes * This,
             ULARGE_INTEGER cb);
        
        HRESULT ( __stdcall *LockRegion )( 
            ILockBytes * This,
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType);
        
        HRESULT ( __stdcall *UnlockRegion )( 
            ILockBytes * This,
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType);
        
        HRESULT ( __stdcall *Stat )( 
            ILockBytes * This,
             STATSTG *pstatstg,
             DWORD grfStatFlag);
        
        
    } ILockBytesVtbl;

    struct ILockBytes
    {
         struct ILockBytesVtbl *lpVtbl;
    };

    






































#line 5962 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall ILockBytes_RemoteReadAt_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     byte *pv,
     ULONG cb,
     ULONG *pcbRead);


void __stdcall ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ILockBytes_RemoteWriteAt_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);


void __stdcall ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_Flush_Proxy( 
    ILockBytes * This);


void __stdcall ILockBytes_Flush_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_SetSize_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER cb);


void __stdcall ILockBytes_SetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_LockRegion_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall ILockBytes_LockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_UnlockRegion_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER libOffset,
     ULARGE_INTEGER cb,
     DWORD dwLockType);


void __stdcall ILockBytes_UnlockRegion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILockBytes_Stat_Proxy( 
    ILockBytes * This,
     STATSTG *pstatstg,
     DWORD grfStatFlag);


void __stdcall ILockBytes_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6061 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IEnumFORMATETC *LPENUMFORMATETC;

typedef struct tagDVTARGETDEVICE
    {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
     BYTE tdData[ 1 ];
    } 	DVTARGETDEVICE;

typedef CLIPFORMAT *LPCLIPFORMAT;

typedef struct tagFORMATETC
    {
    CLIPFORMAT cfFormat;
     DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } 	FORMATETC;

typedef struct tagFORMATETC *LPFORMATETC;


extern const IID IID_IEnumFORMATETC;






















#line 6119 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IEnumFORMATETCVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IEnumFORMATETC * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IEnumFORMATETC * This);
        
        ULONG ( __stdcall *Release )( 
            IEnumFORMATETC * This);
        
         HRESULT ( __stdcall *Next )( 
            IEnumFORMATETC * This,
             ULONG celt,
             FORMATETC *rgelt,
             ULONG *pceltFetched);
        
        HRESULT ( __stdcall *Skip )( 
            IEnumFORMATETC * This,
             ULONG celt);
        
        HRESULT ( __stdcall *Reset )( 
            IEnumFORMATETC * This);
        
        HRESULT ( __stdcall *Clone )( 
            IEnumFORMATETC * This,
             IEnumFORMATETC **ppenum);
        
        
    } IEnumFORMATETCVtbl;

    struct IEnumFORMATETC
    {
         struct IEnumFORMATETCVtbl *lpVtbl;
    };

    





























#line 6191 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall IEnumFORMATETC_RemoteNext_Proxy( 
    IEnumFORMATETC * This,
     ULONG celt,
     FORMATETC *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumFORMATETC_Skip_Proxy( 
    IEnumFORMATETC * This,
     ULONG celt);


void __stdcall IEnumFORMATETC_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumFORMATETC_Reset_Proxy( 
    IEnumFORMATETC * This);


void __stdcall IEnumFORMATETC_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumFORMATETC_Clone_Proxy( 
    IEnumFORMATETC * This,
     IEnumFORMATETC **ppenum);


void __stdcall IEnumFORMATETC_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6245 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IEnumSTATDATA *LPENUMSTATDATA;

typedef 
enum tagADVF
    {	ADVF_NODATA	= 1,
	ADVF_PRIMEFIRST	= 2,
	ADVF_ONLYONCE	= 4,
	ADVF_DATAONSTOP	= 64,
	ADVFCACHE_NOHANDLER	= 8,
	ADVFCACHE_FORCEBUILTIN	= 16,
	ADVFCACHE_ONSAVE	= 32
    } 	ADVF;

typedef struct tagSTATDATA
    {
    FORMATETC formatetc;
    DWORD advf;
     IAdviseSink *pAdvSink;
    DWORD dwConnection;
    } 	STATDATA;

typedef STATDATA *LPSTATDATA;


extern const IID IID_IEnumSTATDATA;






















#line 6301 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IEnumSTATDATAVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IEnumSTATDATA * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IEnumSTATDATA * This);
        
        ULONG ( __stdcall *Release )( 
            IEnumSTATDATA * This);
        
         HRESULT ( __stdcall *Next )( 
            IEnumSTATDATA * This,
             ULONG celt,
             STATDATA *rgelt,
             ULONG *pceltFetched);
        
        HRESULT ( __stdcall *Skip )( 
            IEnumSTATDATA * This,
             ULONG celt);
        
        HRESULT ( __stdcall *Reset )( 
            IEnumSTATDATA * This);
        
        HRESULT ( __stdcall *Clone )( 
            IEnumSTATDATA * This,
             IEnumSTATDATA **ppenum);
        
        
    } IEnumSTATDATAVtbl;

    struct IEnumSTATDATA
    {
         struct IEnumSTATDATAVtbl *lpVtbl;
    };

    





























#line 6373 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall IEnumSTATDATA_RemoteNext_Proxy( 
    IEnumSTATDATA * This,
     ULONG celt,
     STATDATA *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATDATA_Skip_Proxy( 
    IEnumSTATDATA * This,
     ULONG celt);


void __stdcall IEnumSTATDATA_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATDATA_Reset_Proxy( 
    IEnumSTATDATA * This);


void __stdcall IEnumSTATDATA_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATDATA_Clone_Proxy( 
    IEnumSTATDATA * This,
     IEnumSTATDATA **ppenum);


void __stdcall IEnumSTATDATA_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6427 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IRootStorage *LPROOTSTORAGE;


extern const IID IID_IRootStorage;












#line 6452 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IRootStorageVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IRootStorage * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IRootStorage * This);
        
        ULONG ( __stdcall *Release )( 
            IRootStorage * This);
        
        HRESULT ( __stdcall *SwitchToFile )( 
            IRootStorage * This,
             LPOLESTR pszFile);
        
        
    } IRootStorageVtbl;

    struct IRootStorage
    {
         struct IRootStorageVtbl *lpVtbl;
    };

    




















#line 6502 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IRootStorage_SwitchToFile_Proxy( 
    IRootStorage * This,
     LPOLESTR pszFile);


void __stdcall IRootStorage_SwitchToFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6519 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef IAdviseSink *LPADVISESINK;

typedef  
enum tagTYMED
    {	TYMED_HGLOBAL	= 1,
	TYMED_FILE	= 2,
	TYMED_ISTREAM	= 4,
	TYMED_ISTORAGE	= 8,
	TYMED_GDI	= 16,
	TYMED_MFPICT	= 32,
	TYMED_ENHMF	= 64,
	TYMED_NULL	= 0
    } 	TYMED;



#pragma warning(push)
#line 6545 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"
#pragma warning(disable:4200)
#line 6547 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"
typedef struct tagRemSTGMEDIUM
    {
    DWORD tymed;
    DWORD dwHandleType;
    unsigned long pData;
    unsigned long pUnkForRelease;
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemSTGMEDIUM;



#pragma warning(pop)


#line 6563 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"
#line 6564 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"















typedef struct tagSTGMEDIUM
    {
    DWORD tymed;
     union 
        {
         HBITMAP hBitmap;
         HMETAFILEPICT hMetaFilePict;
         HENHMETAFILE hEnhMetaFile;
         HGLOBAL hGlobal;
         LPOLESTR lpszFileName;
         IStream *pstm;
         IStorage *pstg;
           
        } 	;
     IUnknown *pUnkForRelease;
    } 	uSTGMEDIUM;

#line 6597 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"
typedef struct _GDI_OBJECT
    {
    DWORD ObjectType;
      union __MIDL_IAdviseSink_0002
        {
         wireHBITMAP hBitmap;
         wireHPALETTE hPalette;
         wireHGLOBAL hGeneric;
        } 	u;
    } 	GDI_OBJECT;

typedef struct _userSTGMEDIUM
    {
    struct _STGMEDIUM_UNION
        {
        DWORD tymed;
          union __MIDL_IAdviseSink_0003
            {
               
             wireHMETAFILEPICT hMetaFilePict;
             wireHENHMETAFILE hHEnhMetaFile;
             GDI_OBJECT *hGdiHandle;
             wireHGLOBAL hGlobal;
             LPOLESTR lpszFileName;
             BYTE_BLOB *pstm;
             BYTE_BLOB *pstg;
            } 	u;
        } 	;
    IUnknown *pUnkForRelease;
    } 	userSTGMEDIUM;

typedef  userSTGMEDIUM *wireSTGMEDIUM;

typedef  uSTGMEDIUM STGMEDIUM;

typedef  userSTGMEDIUM *wireASYNC_STGMEDIUM;

typedef  STGMEDIUM ASYNC_STGMEDIUM;

typedef STGMEDIUM *LPSTGMEDIUM;

typedef struct _userFLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    userSTGMEDIUM Stgmed;
    } 	userFLAG_STGMEDIUM;

typedef  userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;

typedef  struct _FLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    STGMEDIUM Stgmed;
    } 	FLAG_STGMEDIUM;


extern const IID IID_IAdviseSink;
























#line 6681 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IAdviseSinkVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IAdviseSink * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IAdviseSink * This);
        
        ULONG ( __stdcall *Release )( 
            IAdviseSink * This);
        
         void ( __stdcall *OnDataChange )( 
            IAdviseSink * This,
             FORMATETC *pFormatetc,
             STGMEDIUM *pStgmed);
        
         void ( __stdcall *OnViewChange )( 
            IAdviseSink * This,
             DWORD dwAspect,
             LONG lindex);
        
         void ( __stdcall *OnRename )( 
            IAdviseSink * This,
             IMoniker *pmk);
        
         void ( __stdcall *OnSave )( 
            IAdviseSink * This);
        
         void ( __stdcall *OnClose )( 
            IAdviseSink * This);
        
        
    } IAdviseSinkVtbl;

    struct IAdviseSink
    {
         struct IAdviseSinkVtbl *lpVtbl;
    };

    
































#line 6759 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall IAdviseSink_RemoteOnDataChange_Proxy( 
    IAdviseSink * This,
     FORMATETC *pFormatetc,
     ASYNC_STGMEDIUM *pStgmed);


void __stdcall IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnViewChange_Proxy( 
    IAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);


void __stdcall IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnRename_Proxy( 
    IAdviseSink * This,
     IMoniker *pmk);


void __stdcall IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnSave_Proxy( 
    IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnClose_Proxy( 
    IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6824 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_AsyncIAdviseSink;


































#line 6869 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct AsyncIAdviseSinkVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            AsyncIAdviseSink * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            AsyncIAdviseSink * This);
        
        ULONG ( __stdcall *Release )( 
            AsyncIAdviseSink * This);
        
         void ( __stdcall *Begin_OnDataChange )( 
            AsyncIAdviseSink * This,
             FORMATETC *pFormatetc,
             STGMEDIUM *pStgmed);
        
         void ( __stdcall *Finish_OnDataChange )( 
            AsyncIAdviseSink * This);
        
         void ( __stdcall *Begin_OnViewChange )( 
            AsyncIAdviseSink * This,
             DWORD dwAspect,
             LONG lindex);
        
         void ( __stdcall *Finish_OnViewChange )( 
            AsyncIAdviseSink * This);
        
         void ( __stdcall *Begin_OnRename )( 
            AsyncIAdviseSink * This,
             IMoniker *pmk);
        
         void ( __stdcall *Finish_OnRename )( 
            AsyncIAdviseSink * This);
        
         void ( __stdcall *Begin_OnSave )( 
            AsyncIAdviseSink * This);
        
         void ( __stdcall *Finish_OnSave )( 
            AsyncIAdviseSink * This);
        
         void ( __stdcall *Begin_OnClose )( 
            AsyncIAdviseSink * This);
        
         void ( __stdcall *Finish_OnClose )( 
            AsyncIAdviseSink * This);
        
        
    } AsyncIAdviseSinkVtbl;

    struct AsyncIAdviseSink
    {
         struct AsyncIAdviseSinkVtbl *lpVtbl;
    };

    















































#line 6977 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy( 
    AsyncIAdviseSink * This,
     FORMATETC *pFormatetc,
     ASYNC_STGMEDIUM *pStgmed);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy( 
    AsyncIAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Proxy( 
    AsyncIAdviseSink * This,
     IMoniker *pmk);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Proxy( 
    AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7097 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IAdviseSink2 *LPADVISESINK2;


extern const IID IID_IAdviseSink2;












#line 7122 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IAdviseSink2Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IAdviseSink2 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IAdviseSink2 * This);
        
        ULONG ( __stdcall *Release )( 
            IAdviseSink2 * This);
        
         void ( __stdcall *OnDataChange )( 
            IAdviseSink2 * This,
             FORMATETC *pFormatetc,
             STGMEDIUM *pStgmed);
        
         void ( __stdcall *OnViewChange )( 
            IAdviseSink2 * This,
             DWORD dwAspect,
             LONG lindex);
        
         void ( __stdcall *OnRename )( 
            IAdviseSink2 * This,
             IMoniker *pmk);
        
         void ( __stdcall *OnSave )( 
            IAdviseSink2 * This);
        
         void ( __stdcall *OnClose )( 
            IAdviseSink2 * This);
        
         void ( __stdcall *OnLinkSrcChange )( 
            IAdviseSink2 * This,
             IMoniker *pmk);
        
        
    } IAdviseSink2Vtbl;

    struct IAdviseSink2
    {
         struct IAdviseSink2Vtbl *lpVtbl;
    };

    




































#line 7208 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Proxy( 
    IAdviseSink2 * This,
     IMoniker *pmk);


void __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7225 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_AsyncIAdviseSink2;














#line 7250 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct AsyncIAdviseSink2Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            AsyncIAdviseSink2 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            AsyncIAdviseSink2 * This);
        
        ULONG ( __stdcall *Release )( 
            AsyncIAdviseSink2 * This);
        
         void ( __stdcall *Begin_OnDataChange )( 
            AsyncIAdviseSink2 * This,
             FORMATETC *pFormatetc,
             STGMEDIUM *pStgmed);
        
         void ( __stdcall *Finish_OnDataChange )( 
            AsyncIAdviseSink2 * This);
        
         void ( __stdcall *Begin_OnViewChange )( 
            AsyncIAdviseSink2 * This,
             DWORD dwAspect,
             LONG lindex);
        
         void ( __stdcall *Finish_OnViewChange )( 
            AsyncIAdviseSink2 * This);
        
         void ( __stdcall *Begin_OnRename )( 
            AsyncIAdviseSink2 * This,
             IMoniker *pmk);
        
         void ( __stdcall *Finish_OnRename )( 
            AsyncIAdviseSink2 * This);
        
         void ( __stdcall *Begin_OnSave )( 
            AsyncIAdviseSink2 * This);
        
         void ( __stdcall *Finish_OnSave )( 
            AsyncIAdviseSink2 * This);
        
         void ( __stdcall *Begin_OnClose )( 
            AsyncIAdviseSink2 * This);
        
         void ( __stdcall *Finish_OnClose )( 
            AsyncIAdviseSink2 * This);
        
         void ( __stdcall *Begin_OnLinkSrcChange )( 
            AsyncIAdviseSink2 * This,
             IMoniker *pmk);
        
         void ( __stdcall *Finish_OnLinkSrcChange )( 
            AsyncIAdviseSink2 * This);
        
        
    } AsyncIAdviseSink2Vtbl;

    struct AsyncIAdviseSink2
    {
         struct AsyncIAdviseSink2Vtbl *lpVtbl;
    };

    






















































#line 7372 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy( 
    AsyncIAdviseSink2 * This,
     IMoniker *pmk);


void __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy( 
    AsyncIAdviseSink2 * This);


void __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7400 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IDataObject *LPDATAOBJECT;

typedef 
enum tagDATADIR
    {	DATADIR_GET	= 1,
	DATADIR_SET	= 2
    } 	DATADIR;


extern const IID IID_IDataObject;













































#line 7464 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IDataObjectVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IDataObject * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IDataObject * This);
        
        ULONG ( __stdcall *Release )( 
            IDataObject * This);
        
         HRESULT ( __stdcall *GetData )( 
            IDataObject * This,
             FORMATETC *pformatetcIn,
             STGMEDIUM *pmedium);
        
         HRESULT ( __stdcall *GetDataHere )( 
            IDataObject * This,
             FORMATETC *pformatetc,
             STGMEDIUM *pmedium);
        
        HRESULT ( __stdcall *QueryGetData )( 
            IDataObject * This,
             FORMATETC *pformatetc);
        
        HRESULT ( __stdcall *GetCanonicalFormatEtc )( 
            IDataObject * This,
             FORMATETC *pformatectIn,
             FORMATETC *pformatetcOut);
        
         HRESULT ( __stdcall *SetData )( 
            IDataObject * This,
             FORMATETC *pformatetc,
             STGMEDIUM *pmedium,
             BOOL fRelease);
        
        HRESULT ( __stdcall *EnumFormatEtc )( 
            IDataObject * This,
             DWORD dwDirection,
             IEnumFORMATETC **ppenumFormatEtc);
        
        HRESULT ( __stdcall *DAdvise )( 
            IDataObject * This,
             FORMATETC *pformatetc,
             DWORD advf,
             IAdviseSink *pAdvSink,
             DWORD *pdwConnection);
        
        HRESULT ( __stdcall *DUnadvise )( 
            IDataObject * This,
             DWORD dwConnection);
        
        HRESULT ( __stdcall *EnumDAdvise )( 
            IDataObject * This,
             IEnumSTATDATA **ppenumAdvise);
        
        
    } IDataObjectVtbl;

    struct IDataObject
    {
         struct IDataObjectVtbl *lpVtbl;
    };

    












































#line 7579 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall IDataObject_RemoteGetData_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetcIn,
     STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDataObject_RemoteGetDataHere_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetc,
     STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_QueryGetData_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetc);


void __stdcall IDataObject_QueryGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_GetCanonicalFormatEtc_Proxy( 
    IDataObject * This,
     FORMATETC *pformatectIn,
     FORMATETC *pformatetcOut);


void __stdcall IDataObject_GetCanonicalFormatEtc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDataObject_RemoteSetData_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetc,
     FLAG_STGMEDIUM *pmedium,
     BOOL fRelease);


void __stdcall IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_EnumFormatEtc_Proxy( 
    IDataObject * This,
     DWORD dwDirection,
     IEnumFORMATETC **ppenumFormatEtc);


void __stdcall IDataObject_EnumFormatEtc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_DAdvise_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetc,
     DWORD advf,
     IAdviseSink *pAdvSink,
     DWORD *pdwConnection);


void __stdcall IDataObject_DAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_DUnadvise_Proxy( 
    IDataObject * This,
     DWORD dwConnection);


void __stdcall IDataObject_DUnadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataObject_EnumDAdvise_Proxy( 
    IDataObject * This,
     IEnumSTATDATA **ppenumAdvise);


void __stdcall IDataObject_EnumDAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7701 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IDataAdviseHolder *LPDATAADVISEHOLDER;


extern const IID IID_IDataAdviseHolder;



























#line 7741 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IDataAdviseHolderVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IDataAdviseHolder * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IDataAdviseHolder * This);
        
        ULONG ( __stdcall *Release )( 
            IDataAdviseHolder * This);
        
        HRESULT ( __stdcall *Advise )( 
            IDataAdviseHolder * This,
             IDataObject *pDataObject,
             FORMATETC *pFetc,
             DWORD advf,
             IAdviseSink *pAdvise,
             DWORD *pdwConnection);
        
        HRESULT ( __stdcall *Unadvise )( 
            IDataAdviseHolder * This,
             DWORD dwConnection);
        
        HRESULT ( __stdcall *EnumAdvise )( 
            IDataAdviseHolder * This,
             IEnumSTATDATA **ppenumAdvise);
        
        HRESULT ( __stdcall *SendOnDataChange )( 
            IDataAdviseHolder * This,
             IDataObject *pDataObject,
             DWORD dwReserved,
             DWORD advf);
        
        
    } IDataAdviseHolderVtbl;

    struct IDataAdviseHolder
    {
         struct IDataAdviseHolderVtbl *lpVtbl;
    };

    





























#line 7818 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IDataAdviseHolder_Advise_Proxy( 
    IDataAdviseHolder * This,
     IDataObject *pDataObject,
     FORMATETC *pFetc,
     DWORD advf,
     IAdviseSink *pAdvise,
     DWORD *pdwConnection);


void __stdcall IDataAdviseHolder_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataAdviseHolder_Unadvise_Proxy( 
    IDataAdviseHolder * This,
     DWORD dwConnection);


void __stdcall IDataAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataAdviseHolder_EnumAdvise_Proxy( 
    IDataAdviseHolder * This,
     IEnumSTATDATA **ppenumAdvise);


void __stdcall IDataAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataAdviseHolder_SendOnDataChange_Proxy( 
    IDataAdviseHolder * This,
     IDataObject *pDataObject,
     DWORD dwReserved,
     DWORD advf);


void __stdcall IDataAdviseHolder_SendOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7877 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IMessageFilter *LPMESSAGEFILTER;

typedef 
enum tagCALLTYPE
    {	CALLTYPE_TOPLEVEL	= 1,
	CALLTYPE_NESTED	= 2,
	CALLTYPE_ASYNC	= 3,
	CALLTYPE_TOPLEVEL_CALLPENDING	= 4,
	CALLTYPE_ASYNC_CALLPENDING	= 5
    } 	CALLTYPE;

typedef 
enum tagSERVERCALL
    {	SERVERCALL_ISHANDLED	= 0,
	SERVERCALL_REJECTED	= 1,
	SERVERCALL_RETRYLATER	= 2
    } 	SERVERCALL;

typedef 
enum tagPENDINGTYPE
    {	PENDINGTYPE_TOPLEVEL	= 1,
	PENDINGTYPE_NESTED	= 2
    } 	PENDINGTYPE;

typedef 
enum tagPENDINGMSG
    {	PENDINGMSG_CANCELCALL	= 0,
	PENDINGMSG_WAITNOPROCESS	= 1,
	PENDINGMSG_WAITDEFPROCESS	= 2
    } 	PENDINGMSG;

typedef struct tagINTERFACEINFO
    {
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
    } 	INTERFACEINFO;

typedef struct tagINTERFACEINFO *LPINTERFACEINFO;


extern const IID IID_IMessageFilter;

























#line 7953 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IMessageFilterVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IMessageFilter * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IMessageFilter * This);
        
        ULONG ( __stdcall *Release )( 
            IMessageFilter * This);
        
        DWORD ( __stdcall *HandleInComingCall )( 
            IMessageFilter * This,
             DWORD dwCallType,
             HTASK htaskCaller,
             DWORD dwTickCount,
             LPINTERFACEINFO lpInterfaceInfo);
        
        DWORD ( __stdcall *RetryRejectedCall )( 
            IMessageFilter * This,
             HTASK htaskCallee,
             DWORD dwTickCount,
             DWORD dwRejectType);
        
        DWORD ( __stdcall *MessagePending )( 
            IMessageFilter * This,
             HTASK htaskCallee,
             DWORD dwTickCount,
             DWORD dwPendingType);
        
        
    } IMessageFilterVtbl;

    struct IMessageFilter
    {
         struct IMessageFilterVtbl *lpVtbl;
    };

    


























#line 8024 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



DWORD __stdcall IMessageFilter_HandleInComingCall_Proxy( 
    IMessageFilter * This,
     DWORD dwCallType,
     HTASK htaskCaller,
     DWORD dwTickCount,
     LPINTERFACEINFO lpInterfaceInfo);


void __stdcall IMessageFilter_HandleInComingCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __stdcall IMessageFilter_RetryRejectedCall_Proxy( 
    IMessageFilter * This,
     HTASK htaskCallee,
     DWORD dwTickCount,
     DWORD dwRejectType);


void __stdcall IMessageFilter_RetryRejectedCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


DWORD __stdcall IMessageFilter_MessagePending_Proxy( 
    IMessageFilter * This,
     HTASK htaskCallee,
     DWORD dwTickCount,
     DWORD dwPendingType);


void __stdcall IMessageFilter_MessagePending_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8072 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef unsigned long RPCOLEDATAREP;

typedef struct tagRPCOLEMESSAGE
    {
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void *reserved2[ 5 ];
    ULONG rpcFlags;
    } 	RPCOLEMESSAGE;

typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;


extern const IID IID_IRpcChannelBuffer;


























#line 8124 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IRpcChannelBufferVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IRpcChannelBuffer * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IRpcChannelBuffer * This);
        
        ULONG ( __stdcall *Release )( 
            IRpcChannelBuffer * This);
        
        HRESULT ( __stdcall *GetBuffer )( 
            IRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMessage,
             const IID * const riid);
        
        HRESULT ( __stdcall *SendReceive )( 
            IRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMessage,
             ULONG *pStatus);
        
        HRESULT ( __stdcall *FreeBuffer )( 
            IRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMessage);
        
        HRESULT ( __stdcall *GetDestCtx )( 
            IRpcChannelBuffer * This,
             DWORD *pdwDestContext,
             void **ppvDestContext);
        
        HRESULT ( __stdcall *IsConnected )( 
            IRpcChannelBuffer * This);
        
        
    } IRpcChannelBufferVtbl;

    struct IRpcChannelBuffer
    {
         struct IRpcChannelBufferVtbl *lpVtbl;
    };

    
































#line 8204 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IRpcChannelBuffer_GetBuffer_Proxy( 
    IRpcChannelBuffer * This,
     RPCOLEMESSAGE *pMessage,
     const IID * const riid);


void __stdcall IRpcChannelBuffer_GetBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_SendReceive_Proxy( 
    IRpcChannelBuffer * This,
     RPCOLEMESSAGE *pMessage,
     ULONG *pStatus);


void __stdcall IRpcChannelBuffer_SendReceive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_FreeBuffer_Proxy( 
    IRpcChannelBuffer * This,
     RPCOLEMESSAGE *pMessage);


void __stdcall IRpcChannelBuffer_FreeBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_GetDestCtx_Proxy( 
    IRpcChannelBuffer * This,
     DWORD *pdwDestContext,
     void **ppvDestContext);


void __stdcall IRpcChannelBuffer_GetDestCtx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer_IsConnected_Proxy( 
    IRpcChannelBuffer * This);


void __stdcall IRpcChannelBuffer_IsConnected_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8271 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IRpcChannelBuffer2;












#line 8294 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IRpcChannelBuffer2Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IRpcChannelBuffer2 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IRpcChannelBuffer2 * This);
        
        ULONG ( __stdcall *Release )( 
            IRpcChannelBuffer2 * This);
        
        HRESULT ( __stdcall *GetBuffer )( 
            IRpcChannelBuffer2 * This,
             RPCOLEMESSAGE *pMessage,
             const IID * const riid);
        
        HRESULT ( __stdcall *SendReceive )( 
            IRpcChannelBuffer2 * This,
             RPCOLEMESSAGE *pMessage,
             ULONG *pStatus);
        
        HRESULT ( __stdcall *FreeBuffer )( 
            IRpcChannelBuffer2 * This,
             RPCOLEMESSAGE *pMessage);
        
        HRESULT ( __stdcall *GetDestCtx )( 
            IRpcChannelBuffer2 * This,
             DWORD *pdwDestContext,
             void **ppvDestContext);
        
        HRESULT ( __stdcall *IsConnected )( 
            IRpcChannelBuffer2 * This);
        
        HRESULT ( __stdcall *GetProtocolVersion )( 
            IRpcChannelBuffer2 * This,
             DWORD *pdwVersion);
        
        
    } IRpcChannelBuffer2Vtbl;

    struct IRpcChannelBuffer2
    {
         struct IRpcChannelBuffer2Vtbl *lpVtbl;
    };

    




































#line 8382 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IRpcChannelBuffer2_GetProtocolVersion_Proxy( 
    IRpcChannelBuffer2 * This,
     DWORD *pdwVersion);


void __stdcall IRpcChannelBuffer2_GetProtocolVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8399 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IAsyncRpcChannelBuffer;























#line 8433 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IAsyncRpcChannelBufferVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IAsyncRpcChannelBuffer * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IAsyncRpcChannelBuffer * This);
        
        ULONG ( __stdcall *Release )( 
            IAsyncRpcChannelBuffer * This);
        
        HRESULT ( __stdcall *GetBuffer )( 
            IAsyncRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMessage,
             const IID * const riid);
        
        HRESULT ( __stdcall *SendReceive )( 
            IAsyncRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMessage,
             ULONG *pStatus);
        
        HRESULT ( __stdcall *FreeBuffer )( 
            IAsyncRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMessage);
        
        HRESULT ( __stdcall *GetDestCtx )( 
            IAsyncRpcChannelBuffer * This,
             DWORD *pdwDestContext,
             void **ppvDestContext);
        
        HRESULT ( __stdcall *IsConnected )( 
            IAsyncRpcChannelBuffer * This);
        
        HRESULT ( __stdcall *GetProtocolVersion )( 
            IAsyncRpcChannelBuffer * This,
             DWORD *pdwVersion);
        
        HRESULT ( __stdcall *Send )( 
            IAsyncRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMsg,
             ISynchronize *pSync,
             ULONG *pulStatus);
        
        HRESULT ( __stdcall *Receive )( 
            IAsyncRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMsg,
             ULONG *pulStatus);
        
        HRESULT ( __stdcall *GetDestCtxEx )( 
            IAsyncRpcChannelBuffer * This,
             RPCOLEMESSAGE *pMsg,
             DWORD *pdwDestContext,
             void **ppvDestContext);
        
        
    } IAsyncRpcChannelBufferVtbl;

    struct IAsyncRpcChannelBuffer
    {
         struct IAsyncRpcChannelBufferVtbl *lpVtbl;
    };

    














































#line 8548 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IAsyncRpcChannelBuffer_Send_Proxy( 
    IAsyncRpcChannelBuffer * This,
     RPCOLEMESSAGE *pMsg,
     ISynchronize *pSync,
     ULONG *pulStatus);


void __stdcall IAsyncRpcChannelBuffer_Send_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncRpcChannelBuffer_Receive_Proxy( 
    IAsyncRpcChannelBuffer * This,
     RPCOLEMESSAGE *pMsg,
     ULONG *pulStatus);


void __stdcall IAsyncRpcChannelBuffer_Receive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncRpcChannelBuffer_GetDestCtxEx_Proxy( 
    IAsyncRpcChannelBuffer * This,
     RPCOLEMESSAGE *pMsg,
     DWORD *pdwDestContext,
     void **ppvDestContext);


void __stdcall IAsyncRpcChannelBuffer_GetDestCtxEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8594 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IRpcChannelBuffer3;







































#line 8644 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IRpcChannelBuffer3Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IRpcChannelBuffer3 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IRpcChannelBuffer3 * This);
        
        ULONG ( __stdcall *Release )( 
            IRpcChannelBuffer3 * This);
        
        HRESULT ( __stdcall *GetBuffer )( 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMessage,
             const IID * const riid);
        
        HRESULT ( __stdcall *SendReceive )( 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMessage,
             ULONG *pStatus);
        
        HRESULT ( __stdcall *FreeBuffer )( 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMessage);
        
        HRESULT ( __stdcall *GetDestCtx )( 
            IRpcChannelBuffer3 * This,
             DWORD *pdwDestContext,
             void **ppvDestContext);
        
        HRESULT ( __stdcall *IsConnected )( 
            IRpcChannelBuffer3 * This);
        
        HRESULT ( __stdcall *GetProtocolVersion )( 
            IRpcChannelBuffer3 * This,
             DWORD *pdwVersion);
        
        HRESULT ( __stdcall *Send )( 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg,
             ULONG *pulStatus);
        
        HRESULT ( __stdcall *Receive )( 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg,
             ULONG ulSize,
             ULONG *pulStatus);
        
        HRESULT ( __stdcall *Cancel )( 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg);
        
        HRESULT ( __stdcall *GetCallContext )( 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg,
             const IID * const riid,
             void **pInterface);
        
        HRESULT ( __stdcall *GetDestCtxEx )( 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg,
             DWORD *pdwDestContext,
             void **ppvDestContext);
        
        HRESULT ( __stdcall *GetState )( 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg,
             DWORD *pState);
        
        HRESULT ( __stdcall *RegisterAsync )( 
            IRpcChannelBuffer3 * This,
             RPCOLEMESSAGE *pMsg,
             IAsyncManager *pAsyncMgr);
        
        
    } IRpcChannelBuffer3Vtbl;

    struct IRpcChannelBuffer3
    {
         struct IRpcChannelBuffer3Vtbl *lpVtbl;
    };

    


























































#line 8791 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IRpcChannelBuffer3_Send_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg,
     ULONG *pulStatus);


void __stdcall IRpcChannelBuffer3_Send_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_Receive_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg,
     ULONG ulSize,
     ULONG *pulStatus);


void __stdcall IRpcChannelBuffer3_Receive_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_Cancel_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg);


void __stdcall IRpcChannelBuffer3_Cancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_GetCallContext_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg,
     const IID * const riid,
     void **pInterface);


void __stdcall IRpcChannelBuffer3_GetCallContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_GetDestCtxEx_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg,
     DWORD *pdwDestContext,
     void **ppvDestContext);


void __stdcall IRpcChannelBuffer3_GetDestCtxEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_GetState_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg,
     DWORD *pState);


void __stdcall IRpcChannelBuffer3_GetState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcChannelBuffer3_RegisterAsync_Proxy( 
    IRpcChannelBuffer3 * This,
     RPCOLEMESSAGE *pMsg,
     IAsyncManager *pAsyncMgr);


void __stdcall IRpcChannelBuffer3_RegisterAsync_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8889 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IRpcSyntaxNegotiate;












#line 8912 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IRpcSyntaxNegotiateVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IRpcSyntaxNegotiate * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IRpcSyntaxNegotiate * This);
        
        ULONG ( __stdcall *Release )( 
            IRpcSyntaxNegotiate * This);
        
        HRESULT ( __stdcall *NegotiateSyntax )( 
            IRpcSyntaxNegotiate * This,
             RPCOLEMESSAGE *pMsg);
        
        
    } IRpcSyntaxNegotiateVtbl;

    struct IRpcSyntaxNegotiate
    {
         struct IRpcSyntaxNegotiateVtbl *lpVtbl;
    };

    




















#line 8962 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IRpcSyntaxNegotiate_NegotiateSyntax_Proxy( 
    IRpcSyntaxNegotiate * This,
     RPCOLEMESSAGE *pMsg);


void __stdcall IRpcSyntaxNegotiate_NegotiateSyntax_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8979 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IRpcProxyBuffer;














#line 9004 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IRpcProxyBufferVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IRpcProxyBuffer * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IRpcProxyBuffer * This);
        
        ULONG ( __stdcall *Release )( 
            IRpcProxyBuffer * This);
        
        HRESULT ( __stdcall *Connect )( 
            IRpcProxyBuffer * This,
             IRpcChannelBuffer *pRpcChannelBuffer);
        
        void ( __stdcall *Disconnect )( 
            IRpcProxyBuffer * This);
        
        
    } IRpcProxyBufferVtbl;

    struct IRpcProxyBuffer
    {
         struct IRpcProxyBufferVtbl *lpVtbl;
    };

    























#line 9060 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IRpcProxyBuffer_Connect_Proxy( 
    IRpcProxyBuffer * This,
     IRpcChannelBuffer *pRpcChannelBuffer);


void __stdcall IRpcProxyBuffer_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IRpcProxyBuffer_Disconnect_Proxy( 
    IRpcProxyBuffer * This);


void __stdcall IRpcProxyBuffer_Disconnect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9088 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IRpcStubBuffer;





























#line 9128 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IRpcStubBufferVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IRpcStubBuffer * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IRpcStubBuffer * This);
        
        ULONG ( __stdcall *Release )( 
            IRpcStubBuffer * This);
        
        HRESULT ( __stdcall *Connect )( 
            IRpcStubBuffer * This,
             IUnknown *pUnkServer);
        
        void ( __stdcall *Disconnect )( 
            IRpcStubBuffer * This);
        
        HRESULT ( __stdcall *Invoke )( 
            IRpcStubBuffer * This,
             RPCOLEMESSAGE *_prpcmsg,
             IRpcChannelBuffer *_pRpcChannelBuffer);
        
        IRpcStubBuffer *( __stdcall *IsIIDSupported )( 
            IRpcStubBuffer * This,
             const IID * const riid);
        
        ULONG ( __stdcall *CountRefs )( 
            IRpcStubBuffer * This);
        
        HRESULT ( __stdcall *DebugServerQueryInterface )( 
            IRpcStubBuffer * This,
            void **ppv);
        
        void ( __stdcall *DebugServerRelease )( 
            IRpcStubBuffer * This,
            void *pv);
        
        
    } IRpcStubBufferVtbl;

    struct IRpcStubBuffer
    {
         struct IRpcStubBufferVtbl *lpVtbl;
    };

    






































#line 9219 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IRpcStubBuffer_Connect_Proxy( 
    IRpcStubBuffer * This,
     IUnknown *pUnkServer);


void __stdcall IRpcStubBuffer_Connect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IRpcStubBuffer_Disconnect_Proxy( 
    IRpcStubBuffer * This);


void __stdcall IRpcStubBuffer_Disconnect_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcStubBuffer_Invoke_Proxy( 
    IRpcStubBuffer * This,
     RPCOLEMESSAGE *_prpcmsg,
     IRpcChannelBuffer *_pRpcChannelBuffer);


void __stdcall IRpcStubBuffer_Invoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


IRpcStubBuffer *__stdcall IRpcStubBuffer_IsIIDSupported_Proxy( 
    IRpcStubBuffer * This,
     const IID * const riid);


void __stdcall IRpcStubBuffer_IsIIDSupported_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IRpcStubBuffer_CountRefs_Proxy( 
    IRpcStubBuffer * This);


void __stdcall IRpcStubBuffer_CountRefs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcStubBuffer_DebugServerQueryInterface_Proxy( 
    IRpcStubBuffer * This,
    void **ppv);


void __stdcall IRpcStubBuffer_DebugServerQueryInterface_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


void __stdcall IRpcStubBuffer_DebugServerRelease_Proxy( 
    IRpcStubBuffer * This,
    void *pv);


void __stdcall IRpcStubBuffer_DebugServerRelease_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9307 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IPSFactoryBuffer;




















#line 9338 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IPSFactoryBufferVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IPSFactoryBuffer * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IPSFactoryBuffer * This);
        
        ULONG ( __stdcall *Release )( 
            IPSFactoryBuffer * This);
        
        HRESULT ( __stdcall *CreateProxy )( 
            IPSFactoryBuffer * This,
             IUnknown *pUnkOuter,
             const IID * const riid,
             IRpcProxyBuffer **ppProxy,
             void **ppv);
        
        HRESULT ( __stdcall *CreateStub )( 
            IPSFactoryBuffer * This,
             const IID * const riid,
             IUnknown *pUnkServer,
             IRpcStubBuffer **ppStub);
        
        
    } IPSFactoryBufferVtbl;

    struct IPSFactoryBuffer
    {
         struct IPSFactoryBufferVtbl *lpVtbl;
    };

    























#line 9400 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IPSFactoryBuffer_CreateProxy_Proxy( 
    IPSFactoryBuffer * This,
     IUnknown *pUnkOuter,
     const IID * const riid,
     IRpcProxyBuffer **ppProxy,
     void **ppv);


void __stdcall IPSFactoryBuffer_CreateProxy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPSFactoryBuffer_CreateStub_Proxy( 
    IPSFactoryBuffer * This,
     const IID * const riid,
     IUnknown *pUnkServer,
     IRpcStubBuffer **ppStub);


void __stdcall IPSFactoryBuffer_CreateStub_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9434 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 




























































































































































































































































































#line 9723 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"


extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;

extern const FMTID FMTID_DiscardableInformation;

extern const FMTID FMTID_ImageSummaryInformation;

extern const FMTID FMTID_AudioSummaryInformation;

extern const FMTID FMTID_VideoSummaryInformation;

extern const FMTID FMTID_MediaFileSummaryInformation;


































































































































































































































































































































































































































































































































































































































































#line 10383 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"


extern RPC_IF_HANDLE __MIDL_itf_objidl_0055_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0055_v0_0_s_ifspec;





 


extern const IID IID_IFillLockBytes;


























#line 10423 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IFillLockBytesVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IFillLockBytes * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IFillLockBytes * This);
        
        ULONG ( __stdcall *Release )( 
            IFillLockBytes * This);
        
         HRESULT ( __stdcall *FillAppend )( 
            IFillLockBytes * This,
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten);
        
         HRESULT ( __stdcall *FillAt )( 
            IFillLockBytes * This,
             ULARGE_INTEGER ulOffset,
             const void *pv,
             ULONG cb,
             ULONG *pcbWritten);
        
        HRESULT ( __stdcall *SetFillSize )( 
            IFillLockBytes * This,
             ULARGE_INTEGER ulSize);
        
        HRESULT ( __stdcall *Terminate )( 
            IFillLockBytes * This,
             BOOL bCanceled);
        
        
    } IFillLockBytesVtbl;

    struct IFillLockBytes
    {
         struct IFillLockBytesVtbl *lpVtbl;
    };

    





























#line 10499 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 HRESULT __stdcall IFillLockBytes_RemoteFillAppend_Proxy( 
    IFillLockBytes * This,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IFillLockBytes_RemoteFillAt_Proxy( 
    IFillLockBytes * This,
     ULARGE_INTEGER ulOffset,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFillLockBytes_SetFillSize_Proxy( 
    IFillLockBytes * This,
     ULARGE_INTEGER ulSize);


void __stdcall IFillLockBytes_SetFillSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IFillLockBytes_Terminate_Proxy( 
    IFillLockBytes * This,
     BOOL bCanceled);


void __stdcall IFillLockBytes_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10557 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IProgressNotify;















#line 10583 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IProgressNotifyVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IProgressNotify * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IProgressNotify * This);
        
        ULONG ( __stdcall *Release )( 
            IProgressNotify * This);
        
        HRESULT ( __stdcall *OnProgress )( 
            IProgressNotify * This,
             DWORD dwProgressCurrent,
             DWORD dwProgressMaximum,
             BOOL fAccurate,
             BOOL fOwner);
        
        
    } IProgressNotifyVtbl;

    struct IProgressNotify
    {
         struct IProgressNotifyVtbl *lpVtbl;
    };

    




















#line 10636 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IProgressNotify_OnProgress_Proxy( 
    IProgressNotify * This,
     DWORD dwProgressCurrent,
     DWORD dwProgressMaximum,
     BOOL fAccurate,
     BOOL fOwner);


void __stdcall IProgressNotify_OnProgress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10656 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef struct tagStorageLayout
    {
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
    } 	StorageLayout;


extern const IID IID_ILayoutStorage;
























#line 10699 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct ILayoutStorageVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ILayoutStorage * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ILayoutStorage * This);
        
        ULONG ( __stdcall *Release )( 
            ILayoutStorage * This);
        
        HRESULT ( __stdcall *LayoutScript )( 
            ILayoutStorage * This,
             StorageLayout *pStorageLayout,
             DWORD nEntries,
             DWORD glfInterleavedFlag);
        
        HRESULT ( __stdcall *BeginMonitor )( 
            ILayoutStorage * This);
        
        HRESULT ( __stdcall *EndMonitor )( 
            ILayoutStorage * This);
        
        HRESULT ( __stdcall *ReLayoutDocfile )( 
            ILayoutStorage * This,
             OLECHAR *pwcsNewDfName);
        
        HRESULT ( __stdcall *ReLayoutDocfileOnILockBytes )( 
            ILayoutStorage * This,
             ILockBytes *pILockBytes);
        
        
    } ILayoutStorageVtbl;

    struct ILayoutStorage
    {
         struct ILayoutStorageVtbl *lpVtbl;
    };

    
































#line 10777 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall ILayoutStorage_LayoutScript_Proxy( 
    ILayoutStorage * This,
     StorageLayout *pStorageLayout,
     DWORD nEntries,
     DWORD glfInterleavedFlag);


void __stdcall ILayoutStorage_LayoutScript_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_BeginMonitor_Proxy( 
    ILayoutStorage * This);


void __stdcall ILayoutStorage_BeginMonitor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_EndMonitor_Proxy( 
    ILayoutStorage * This);


void __stdcall ILayoutStorage_EndMonitor_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_ReLayoutDocfile_Proxy( 
    ILayoutStorage * This,
     OLECHAR *pwcsNewDfName);


void __stdcall ILayoutStorage_ReLayoutDocfile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ILayoutStorage_ReLayoutDocfileOnILockBytes_Proxy( 
    ILayoutStorage * This,
     ILockBytes *pILockBytes);


void __stdcall ILayoutStorage_ReLayoutDocfileOnILockBytes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10842 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IBlockingLock;














#line 10867 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IBlockingLockVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IBlockingLock * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IBlockingLock * This);
        
        ULONG ( __stdcall *Release )( 
            IBlockingLock * This);
        
        HRESULT ( __stdcall *Lock )( 
            IBlockingLock * This,
             DWORD dwTimeout);
        
        HRESULT ( __stdcall *Unlock )( 
            IBlockingLock * This);
        
        
    } IBlockingLockVtbl;

    struct IBlockingLock
    {
         struct IBlockingLockVtbl *lpVtbl;
    };

    























#line 10923 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IBlockingLock_Lock_Proxy( 
    IBlockingLock * This,
     DWORD dwTimeout);


void __stdcall IBlockingLock_Lock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBlockingLock_Unlock_Proxy( 
    IBlockingLock * This);


void __stdcall IBlockingLock_Unlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10951 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_ITimeAndNoticeControl;













#line 10975 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct ITimeAndNoticeControlVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ITimeAndNoticeControl * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ITimeAndNoticeControl * This);
        
        ULONG ( __stdcall *Release )( 
            ITimeAndNoticeControl * This);
        
        HRESULT ( __stdcall *SuppressChanges )( 
            ITimeAndNoticeControl * This,
             DWORD res1,
             DWORD res2);
        
        
    } ITimeAndNoticeControlVtbl;

    struct ITimeAndNoticeControl
    {
         struct ITimeAndNoticeControlVtbl *lpVtbl;
    };

    




















#line 11026 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall ITimeAndNoticeControl_SuppressChanges_Proxy( 
    ITimeAndNoticeControl * This,
     DWORD res1,
     DWORD res2);


void __stdcall ITimeAndNoticeControl_SuppressChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11044 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IOplockStorage;

























#line 11080 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IOplockStorageVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOplockStorage * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOplockStorage * This);
        
        ULONG ( __stdcall *Release )( 
            IOplockStorage * This);
        
        HRESULT ( __stdcall *CreateStorageEx )( 
            IOplockStorage * This,
             LPCWSTR pwcsName,
             DWORD grfMode,
             DWORD stgfmt,
             DWORD grfAttrs,
             const IID * const riid,
             void **ppstgOpen);
        
        HRESULT ( __stdcall *OpenStorageEx )( 
            IOplockStorage * This,
             LPCWSTR pwcsName,
             DWORD grfMode,
             DWORD stgfmt,
             DWORD grfAttrs,
             const IID * const riid,
             void **ppstgOpen);
        
        
    } IOplockStorageVtbl;

    struct IOplockStorage
    {
         struct IOplockStorageVtbl *lpVtbl;
    };

    























#line 11147 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IOplockStorage_CreateStorageEx_Proxy( 
    IOplockStorage * This,
     LPCWSTR pwcsName,
     DWORD grfMode,
     DWORD stgfmt,
     DWORD grfAttrs,
     const IID * const riid,
     void **ppstgOpen);


void __stdcall IOplockStorage_CreateStorageEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOplockStorage_OpenStorageEx_Proxy( 
    IOplockStorage * This,
     LPCWSTR pwcsName,
     DWORD grfMode,
     DWORD stgfmt,
     DWORD grfAttrs,
     const IID * const riid,
     void **ppstgOpen);


void __stdcall IOplockStorage_OpenStorageEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11186 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  ISurrogate *LPSURROGATE;


extern const IID IID_ISurrogate;














#line 11213 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct ISurrogateVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ISurrogate * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ISurrogate * This);
        
        ULONG ( __stdcall *Release )( 
            ISurrogate * This);
        
        HRESULT ( __stdcall *LoadDllServer )( 
            ISurrogate * This,
             const IID * const Clsid);
        
        HRESULT ( __stdcall *FreeSurrogate )( 
            ISurrogate * This);
        
        
    } ISurrogateVtbl;

    struct ISurrogate
    {
         struct ISurrogateVtbl *lpVtbl;
    };

    























#line 11269 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall ISurrogate_LoadDllServer_Proxy( 
    ISurrogate * This,
     const IID * const Clsid);


void __stdcall ISurrogate_LoadDllServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISurrogate_FreeSurrogate_Proxy( 
    ISurrogate * This);


void __stdcall ISurrogate_FreeSurrogate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11297 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;


extern const IID IID_IGlobalInterfaceTable;






















#line 11332 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IGlobalInterfaceTableVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IGlobalInterfaceTable * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IGlobalInterfaceTable * This);
        
        ULONG ( __stdcall *Release )( 
            IGlobalInterfaceTable * This);
        
        HRESULT ( __stdcall *RegisterInterfaceInGlobal )( 
            IGlobalInterfaceTable * This,
             IUnknown *pUnk,
             const IID * const riid,
             DWORD *pdwCookie);
        
        HRESULT ( __stdcall *RevokeInterfaceFromGlobal )( 
            IGlobalInterfaceTable * This,
             DWORD dwCookie);
        
        HRESULT ( __stdcall *GetInterfaceFromGlobal )( 
            IGlobalInterfaceTable * This,
             DWORD dwCookie,
             const IID * const riid,
             void **ppv);
        
        
    } IGlobalInterfaceTableVtbl;

    struct IGlobalInterfaceTable
    {
         struct IGlobalInterfaceTableVtbl *lpVtbl;
    };

    


























#line 11400 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IGlobalInterfaceTable_RegisterInterfaceInGlobal_Proxy( 
    IGlobalInterfaceTable * This,
     IUnknown *pUnk,
     const IID * const riid,
     DWORD *pdwCookie);


void __stdcall IGlobalInterfaceTable_RegisterInterfaceInGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Proxy( 
    IGlobalInterfaceTable * This,
     DWORD dwCookie);


void __stdcall IGlobalInterfaceTable_RevokeInterfaceFromGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IGlobalInterfaceTable_GetInterfaceFromGlobal_Proxy( 
    IGlobalInterfaceTable * This,
     DWORD dwCookie,
     const IID * const riid,
     void **ppv);


void __stdcall IGlobalInterfaceTable_GetInterfaceFromGlobal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11445 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IDirectWriterLock;
















#line 11472 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IDirectWriterLockVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IDirectWriterLock * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IDirectWriterLock * This);
        
        ULONG ( __stdcall *Release )( 
            IDirectWriterLock * This);
        
        HRESULT ( __stdcall *WaitForWriteAccess )( 
            IDirectWriterLock * This,
             DWORD dwTimeout);
        
        HRESULT ( __stdcall *ReleaseWriteAccess )( 
            IDirectWriterLock * This);
        
        HRESULT ( __stdcall *HaveWriteAccess )( 
            IDirectWriterLock * This);
        
        
    } IDirectWriterLockVtbl;

    struct IDirectWriterLock
    {
         struct IDirectWriterLockVtbl *lpVtbl;
    };

    


























#line 11534 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IDirectWriterLock_WaitForWriteAccess_Proxy( 
    IDirectWriterLock * This,
     DWORD dwTimeout);


void __stdcall IDirectWriterLock_WaitForWriteAccess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDirectWriterLock_ReleaseWriteAccess_Proxy( 
    IDirectWriterLock * This);


void __stdcall IDirectWriterLock_ReleaseWriteAccess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDirectWriterLock_HaveWriteAccess_Proxy( 
    IDirectWriterLock * This);


void __stdcall IDirectWriterLock_HaveWriteAccess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11573 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_ISynchronize;

















#line 11601 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct ISynchronizeVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ISynchronize * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ISynchronize * This);
        
        ULONG ( __stdcall *Release )( 
            ISynchronize * This);
        
        HRESULT ( __stdcall *Wait )( 
            ISynchronize * This,
             DWORD dwFlags,
             DWORD dwMilliseconds);
        
        HRESULT ( __stdcall *Signal )( 
            ISynchronize * This);
        
        HRESULT ( __stdcall *Reset )( 
            ISynchronize * This);
        
        
    } ISynchronizeVtbl;

    struct ISynchronize
    {
         struct ISynchronizeVtbl *lpVtbl;
    };

    


























#line 11664 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall ISynchronize_Wait_Proxy( 
    ISynchronize * This,
     DWORD dwFlags,
     DWORD dwMilliseconds);


void __stdcall ISynchronize_Wait_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISynchronize_Signal_Proxy( 
    ISynchronize * This);


void __stdcall ISynchronize_Signal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISynchronize_Reset_Proxy( 
    ISynchronize * This);


void __stdcall ISynchronize_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11704 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_ISynchronizeHandle;












#line 11727 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct ISynchronizeHandleVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ISynchronizeHandle * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ISynchronizeHandle * This);
        
        ULONG ( __stdcall *Release )( 
            ISynchronizeHandle * This);
        
        HRESULT ( __stdcall *GetHandle )( 
            ISynchronizeHandle * This,
             HANDLE *ph);
        
        
    } ISynchronizeHandleVtbl;

    struct ISynchronizeHandle
    {
         struct ISynchronizeHandleVtbl *lpVtbl;
    };

    




















#line 11777 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall ISynchronizeHandle_GetHandle_Proxy( 
    ISynchronizeHandle * This,
     HANDLE *ph);


void __stdcall ISynchronizeHandle_GetHandle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11794 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_ISynchronizeEvent;












#line 11817 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct ISynchronizeEventVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ISynchronizeEvent * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ISynchronizeEvent * This);
        
        ULONG ( __stdcall *Release )( 
            ISynchronizeEvent * This);
        
        HRESULT ( __stdcall *GetHandle )( 
            ISynchronizeEvent * This,
             HANDLE *ph);
        
        HRESULT ( __stdcall *SetEventHandle )( 
            ISynchronizeEvent * This,
             HANDLE *ph);
        
        
    } ISynchronizeEventVtbl;

    struct ISynchronizeEvent
    {
         struct ISynchronizeEventVtbl *lpVtbl;
    };

    
























#line 11875 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall ISynchronizeEvent_SetEventHandle_Proxy( 
    ISynchronizeEvent * This,
     HANDLE *ph);


void __stdcall ISynchronizeEvent_SetEventHandle_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11892 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_ISynchronizeContainer;

















#line 11920 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct ISynchronizeContainerVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ISynchronizeContainer * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ISynchronizeContainer * This);
        
        ULONG ( __stdcall *Release )( 
            ISynchronizeContainer * This);
        
        HRESULT ( __stdcall *AddSynchronize )( 
            ISynchronizeContainer * This,
             ISynchronize *pSync);
        
        HRESULT ( __stdcall *WaitMultiple )( 
            ISynchronizeContainer * This,
             DWORD dwFlags,
             DWORD dwTimeOut,
             ISynchronize **ppSync);
        
        
    } ISynchronizeContainerVtbl;

    struct ISynchronizeContainer
    {
         struct ISynchronizeContainerVtbl *lpVtbl;
    };

    























#line 11979 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall ISynchronizeContainer_AddSynchronize_Proxy( 
    ISynchronizeContainer * This,
     ISynchronize *pSync);


void __stdcall ISynchronizeContainer_AddSynchronize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISynchronizeContainer_WaitMultiple_Proxy( 
    ISynchronizeContainer * This,
     DWORD dwFlags,
     DWORD dwTimeOut,
     ISynchronize **ppSync);


void __stdcall ISynchronizeContainer_WaitMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12010 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_ISynchronizeMutex;











#line 12032 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct ISynchronizeMutexVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ISynchronizeMutex * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ISynchronizeMutex * This);
        
        ULONG ( __stdcall *Release )( 
            ISynchronizeMutex * This);
        
        HRESULT ( __stdcall *Wait )( 
            ISynchronizeMutex * This,
             DWORD dwFlags,
             DWORD dwMilliseconds);
        
        HRESULT ( __stdcall *Signal )( 
            ISynchronizeMutex * This);
        
        HRESULT ( __stdcall *Reset )( 
            ISynchronizeMutex * This);
        
        HRESULT ( __stdcall *ReleaseMutex )( 
            ISynchronizeMutex * This);
        
        
    } ISynchronizeMutexVtbl;

    struct ISynchronizeMutex
    {
         struct ISynchronizeMutexVtbl *lpVtbl;
    };

    






























#line 12102 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall ISynchronizeMutex_ReleaseMutex_Proxy( 
    ISynchronizeMutex * This);


void __stdcall ISynchronizeMutex_ReleaseMutex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12118 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  ICancelMethodCalls *LPCANCELMETHODCALLS;


extern const IID IID_ICancelMethodCalls;














#line 12145 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct ICancelMethodCallsVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ICancelMethodCalls * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ICancelMethodCalls * This);
        
        ULONG ( __stdcall *Release )( 
            ICancelMethodCalls * This);
        
        HRESULT ( __stdcall *Cancel )( 
            ICancelMethodCalls * This,
             ULONG ulSeconds);
        
        HRESULT ( __stdcall *TestCancel )( 
            ICancelMethodCalls * This);
        
        
    } ICancelMethodCallsVtbl;

    struct ICancelMethodCalls
    {
         struct ICancelMethodCallsVtbl *lpVtbl;
    };

    























#line 12201 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall ICancelMethodCalls_Cancel_Proxy( 
    ICancelMethodCalls * This,
     ULONG ulSeconds);


void __stdcall ICancelMethodCalls_Cancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICancelMethodCalls_TestCancel_Proxy( 
    ICancelMethodCalls * This);


void __stdcall ICancelMethodCalls_TestCancel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12229 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef 
enum tagDCOM_CALL_STATE
    {	DCOM_NONE	= 0,
	DCOM_CALL_COMPLETE	= 0x1,
	DCOM_CALL_CANCELED	= 0x2
    } 	DCOM_CALL_STATE;


extern const IID IID_IAsyncManager;



















#line 12266 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IAsyncManagerVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IAsyncManager * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IAsyncManager * This);
        
        ULONG ( __stdcall *Release )( 
            IAsyncManager * This);
        
        HRESULT ( __stdcall *CompleteCall )( 
            IAsyncManager * This,
             HRESULT Result);
        
        HRESULT ( __stdcall *GetCallContext )( 
            IAsyncManager * This,
             const IID * const riid,
             void **pInterface);
        
        HRESULT ( __stdcall *GetState )( 
            IAsyncManager * This,
             ULONG *pulStateFlags);
        
        
    } IAsyncManagerVtbl;

    struct IAsyncManager
    {
         struct IAsyncManagerVtbl *lpVtbl;
    };

    


























#line 12331 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IAsyncManager_CompleteCall_Proxy( 
    IAsyncManager * This,
     HRESULT Result);


void __stdcall IAsyncManager_CompleteCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncManager_GetCallContext_Proxy( 
    IAsyncManager * This,
     const IID * const riid,
     void **pInterface);


void __stdcall IAsyncManager_GetCallContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAsyncManager_GetState_Proxy( 
    IAsyncManager * This,
     ULONG *pulStateFlags);


void __stdcall IAsyncManager_GetState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12373 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_ICallFactory;















#line 12399 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct ICallFactoryVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ICallFactory * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ICallFactory * This);
        
        ULONG ( __stdcall *Release )( 
            ICallFactory * This);
        
        HRESULT ( __stdcall *CreateCall )( 
            ICallFactory * This,
             const IID * const riid,
             IUnknown *pCtrlUnk,
             const IID * const riid2,
             IUnknown **ppv);
        
        
    } ICallFactoryVtbl;

    struct ICallFactory
    {
         struct ICallFactoryVtbl *lpVtbl;
    };

    




















#line 12452 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall ICallFactory_CreateCall_Proxy( 
    ICallFactory * This,
     const IID * const riid,
     IUnknown *pCtrlUnk,
     const IID * const riid2,
     IUnknown **ppv);


void __stdcall ICallFactory_CreateCall_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12472 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IRpcHelper;
















#line 12499 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IRpcHelperVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IRpcHelper * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IRpcHelper * This);
        
        ULONG ( __stdcall *Release )( 
            IRpcHelper * This);
        
        HRESULT ( __stdcall *GetDCOMProtocolVersion )( 
            IRpcHelper * This,
             DWORD *pComVersion);
        
        HRESULT ( __stdcall *GetIIDFromOBJREF )( 
            IRpcHelper * This,
             void *pObjRef,
             IID **piid);
        
        
    } IRpcHelperVtbl;

    struct IRpcHelper
    {
         struct IRpcHelperVtbl *lpVtbl;
    };

    























#line 12557 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IRpcHelper_GetDCOMProtocolVersion_Proxy( 
    IRpcHelper * This,
     DWORD *pComVersion);


void __stdcall IRpcHelper_GetDCOMProtocolVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRpcHelper_GetIIDFromOBJREF_Proxy( 
    IRpcHelper * This,
     void *pObjRef,
     IID **piid);


void __stdcall IRpcHelper_GetIIDFromOBJREF_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12587 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IReleaseMarshalBuffers;














#line 12612 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IReleaseMarshalBuffersVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IReleaseMarshalBuffers * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IReleaseMarshalBuffers * This);
        
        ULONG ( __stdcall *Release )( 
            IReleaseMarshalBuffers * This);
        
        HRESULT ( __stdcall *ReleaseMarshalBuffer )( 
            IReleaseMarshalBuffers * This,
             RPCOLEMESSAGE *pMsg,
             DWORD dwFlags,
             IUnknown *pChnl);
        
        
    } IReleaseMarshalBuffersVtbl;

    struct IReleaseMarshalBuffers
    {
         struct IReleaseMarshalBuffersVtbl *lpVtbl;
    };

    




















#line 12664 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IReleaseMarshalBuffers_ReleaseMarshalBuffer_Proxy( 
    IReleaseMarshalBuffers * This,
     RPCOLEMESSAGE *pMsg,
     DWORD dwFlags,
     IUnknown *pChnl);


void __stdcall IReleaseMarshalBuffers_ReleaseMarshalBuffer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12683 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IWaitMultiple;
















#line 12710 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IWaitMultipleVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IWaitMultiple * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IWaitMultiple * This);
        
        ULONG ( __stdcall *Release )( 
            IWaitMultiple * This);
        
        HRESULT ( __stdcall *WaitMultiple )( 
            IWaitMultiple * This,
             DWORD timeout,
             ISynchronize **pSync);
        
        HRESULT ( __stdcall *AddSynchronize )( 
            IWaitMultiple * This,
             ISynchronize *pSync);
        
        
    } IWaitMultipleVtbl;

    struct IWaitMultiple
    {
         struct IWaitMultipleVtbl *lpVtbl;
    };

    























#line 12768 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IWaitMultiple_WaitMultiple_Proxy( 
    IWaitMultiple * This,
     DWORD timeout,
     ISynchronize **pSync);


void __stdcall IWaitMultiple_WaitMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IWaitMultiple_AddSynchronize_Proxy( 
    IWaitMultiple * This,
     ISynchronize *pSync);


void __stdcall IWaitMultiple_AddSynchronize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12798 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IUrlMon;





















#line 12830 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IUrlMonVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IUrlMon * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IUrlMon * This);
        
        ULONG ( __stdcall *Release )( 
            IUrlMon * This);
        
        HRESULT ( __stdcall *AsyncGetClassBits )( 
            IUrlMon * This,
             const IID * const rclsid,
             LPCWSTR pszTYPE,
             LPCWSTR pszExt,
             DWORD dwFileVersionMS,
             DWORD dwFileVersionLS,
             LPCWSTR pszCodeBase,
             IBindCtx *pbc,
             DWORD dwClassContext,
             const IID * const riid,
             DWORD flags);
        
        
    } IUrlMonVtbl;

    struct IUrlMon
    {
         struct IUrlMonVtbl *lpVtbl;
    };

    




















#line 12889 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IUrlMon_AsyncGetClassBits_Proxy( 
    IUrlMon * This,
     const IID * const rclsid,
     LPCWSTR pszTYPE,
     LPCWSTR pszExt,
     DWORD dwFileVersionMS,
     DWORD dwFileVersionLS,
     LPCWSTR pszCodeBase,
     IBindCtx *pbc,
     DWORD dwClassContext,
     const IID * const riid,
     DWORD flags);


void __stdcall IUrlMon_AsyncGetClassBits_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12915 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IForegroundTransfer;












#line 12938 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IForegroundTransferVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IForegroundTransfer * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IForegroundTransfer * This);
        
        ULONG ( __stdcall *Release )( 
            IForegroundTransfer * This);
        
        HRESULT ( __stdcall *AllowForegroundTransfer )( 
            IForegroundTransfer * This,
             void *lpvReserved);
        
        
    } IForegroundTransferVtbl;

    struct IForegroundTransfer
    {
         struct IForegroundTransferVtbl *lpVtbl;
    };

    




















#line 12988 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IForegroundTransfer_AllowForegroundTransfer_Proxy( 
    IForegroundTransfer * This,
     void *lpvReserved);


void __stdcall IForegroundTransfer_AllowForegroundTransfer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13005 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IAddrTrackingControl *LPADDRTRACKINGCONTROL;


extern const IID IID_IAddrTrackingControl;













#line 13031 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IAddrTrackingControlVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IAddrTrackingControl * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IAddrTrackingControl * This);
        
        ULONG ( __stdcall *Release )( 
            IAddrTrackingControl * This);
        
        HRESULT ( __stdcall *EnableCOMDynamicAddrTracking )( 
            IAddrTrackingControl * This);
        
        HRESULT ( __stdcall *DisableCOMDynamicAddrTracking )( 
            IAddrTrackingControl * This);
        
        
    } IAddrTrackingControlVtbl;

    struct IAddrTrackingControl
    {
         struct IAddrTrackingControlVtbl *lpVtbl;
    };

    























#line 13086 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IAddrTrackingControl_EnableCOMDynamicAddrTracking_Proxy( 
    IAddrTrackingControl * This);


void __stdcall IAddrTrackingControl_EnableCOMDynamicAddrTracking_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAddrTrackingControl_DisableCOMDynamicAddrTracking_Proxy( 
    IAddrTrackingControl * This);


void __stdcall IAddrTrackingControl_DisableCOMDynamicAddrTracking_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13113 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 

typedef  IAddrExclusionControl *LPADDREXCLUSIONCONTROL;


extern const IID IID_IAddrExclusionControl;
















#line 13142 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IAddrExclusionControlVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IAddrExclusionControl * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IAddrExclusionControl * This);
        
        ULONG ( __stdcall *Release )( 
            IAddrExclusionControl * This);
        
        HRESULT ( __stdcall *GetCurrentAddrExclusionList )( 
            IAddrExclusionControl * This,
             const IID * const riid,
             void **ppEnumerator);
        
        HRESULT ( __stdcall *UpdateAddrExclusionList )( 
            IAddrExclusionControl * This,
             IUnknown *pEnumerator);
        
        
    } IAddrExclusionControlVtbl;

    struct IAddrExclusionControl
    {
         struct IAddrExclusionControlVtbl *lpVtbl;
    };

    























#line 13200 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IAddrExclusionControl_GetCurrentAddrExclusionList_Proxy( 
    IAddrExclusionControl * This,
     const IID * const riid,
     void **ppEnumerator);


void __stdcall IAddrExclusionControl_GetCurrentAddrExclusionList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IAddrExclusionControl_UpdateAddrExclusionList_Proxy( 
    IAddrExclusionControl * This,
     IUnknown *pEnumerator);


void __stdcall IAddrExclusionControl_UpdateAddrExclusionList_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13230 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IPipeByte;


















#line 13259 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IPipeByteVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IPipeByte * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IPipeByte * This);
        
        ULONG ( __stdcall *Release )( 
            IPipeByte * This);
        
        HRESULT ( __stdcall *Pull )( 
            IPipeByte * This,
             BYTE *buf,
             ULONG cRequest,
             ULONG *pcReturned);
        
        HRESULT ( __stdcall *Push )( 
            IPipeByte * This,
             BYTE *buf,
             ULONG cSent);
        
        
    } IPipeByteVtbl;

    struct IPipeByte
    {
         struct IPipeByteVtbl *lpVtbl;
    };

    























#line 13319 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IPipeByte_Pull_Proxy( 
    IPipeByte * This,
     BYTE *buf,
     ULONG cRequest,
     ULONG *pcReturned);


void __stdcall IPipeByte_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPipeByte_Push_Proxy( 
    IPipeByte * This,
     BYTE *buf,
     ULONG cSent);


void __stdcall IPipeByte_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13351 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_AsyncIPipeByte;






















#line 13384 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct AsyncIPipeByteVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            AsyncIPipeByte * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            AsyncIPipeByte * This);
        
        ULONG ( __stdcall *Release )( 
            AsyncIPipeByte * This);
        
        HRESULT ( __stdcall *Begin_Pull )( 
            AsyncIPipeByte * This,
             ULONG cRequest);
        
        HRESULT ( __stdcall *Finish_Pull )( 
            AsyncIPipeByte * This,
             BYTE *buf,
             ULONG *pcReturned);
        
        HRESULT ( __stdcall *Begin_Push )( 
            AsyncIPipeByte * This,
             BYTE *buf,
             ULONG cSent);
        
        HRESULT ( __stdcall *Finish_Push )( 
            AsyncIPipeByte * This);
        
        
    } AsyncIPipeByteVtbl;

    struct AsyncIPipeByte
    {
         struct AsyncIPipeByteVtbl *lpVtbl;
    };

    





























#line 13456 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall AsyncIPipeByte_Begin_Pull_Proxy( 
    AsyncIPipeByte * This,
     ULONG cRequest);


void __stdcall AsyncIPipeByte_Begin_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeByte_Finish_Pull_Proxy( 
    AsyncIPipeByte * This,
     BYTE *buf,
     ULONG *pcReturned);


void __stdcall AsyncIPipeByte_Finish_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeByte_Begin_Push_Proxy( 
    AsyncIPipeByte * This,
     BYTE *buf,
     ULONG cSent);


void __stdcall AsyncIPipeByte_Begin_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeByte_Finish_Push_Proxy( 
    AsyncIPipeByte * This);


void __stdcall AsyncIPipeByte_Finish_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13510 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IPipeLong;


















#line 13539 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IPipeLongVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IPipeLong * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IPipeLong * This);
        
        ULONG ( __stdcall *Release )( 
            IPipeLong * This);
        
        HRESULT ( __stdcall *Pull )( 
            IPipeLong * This,
             LONG *buf,
             ULONG cRequest,
             ULONG *pcReturned);
        
        HRESULT ( __stdcall *Push )( 
            IPipeLong * This,
             LONG *buf,
             ULONG cSent);
        
        
    } IPipeLongVtbl;

    struct IPipeLong
    {
         struct IPipeLongVtbl *lpVtbl;
    };

    























#line 13599 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IPipeLong_Pull_Proxy( 
    IPipeLong * This,
     LONG *buf,
     ULONG cRequest,
     ULONG *pcReturned);


void __stdcall IPipeLong_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPipeLong_Push_Proxy( 
    IPipeLong * This,
     LONG *buf,
     ULONG cSent);


void __stdcall IPipeLong_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13631 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_AsyncIPipeLong;






















#line 13664 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct AsyncIPipeLongVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            AsyncIPipeLong * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            AsyncIPipeLong * This);
        
        ULONG ( __stdcall *Release )( 
            AsyncIPipeLong * This);
        
        HRESULT ( __stdcall *Begin_Pull )( 
            AsyncIPipeLong * This,
             ULONG cRequest);
        
        HRESULT ( __stdcall *Finish_Pull )( 
            AsyncIPipeLong * This,
             LONG *buf,
             ULONG *pcReturned);
        
        HRESULT ( __stdcall *Begin_Push )( 
            AsyncIPipeLong * This,
             LONG *buf,
             ULONG cSent);
        
        HRESULT ( __stdcall *Finish_Push )( 
            AsyncIPipeLong * This);
        
        
    } AsyncIPipeLongVtbl;

    struct AsyncIPipeLong
    {
         struct AsyncIPipeLongVtbl *lpVtbl;
    };

    





























#line 13736 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall AsyncIPipeLong_Begin_Pull_Proxy( 
    AsyncIPipeLong * This,
     ULONG cRequest);


void __stdcall AsyncIPipeLong_Begin_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeLong_Finish_Pull_Proxy( 
    AsyncIPipeLong * This,
     LONG *buf,
     ULONG *pcReturned);


void __stdcall AsyncIPipeLong_Finish_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeLong_Begin_Push_Proxy( 
    AsyncIPipeLong * This,
     LONG *buf,
     ULONG cSent);


void __stdcall AsyncIPipeLong_Begin_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeLong_Finish_Push_Proxy( 
    AsyncIPipeLong * This);


void __stdcall AsyncIPipeLong_Finish_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13790 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IPipeDouble;


















#line 13819 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IPipeDoubleVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IPipeDouble * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IPipeDouble * This);
        
        ULONG ( __stdcall *Release )( 
            IPipeDouble * This);
        
        HRESULT ( __stdcall *Pull )( 
            IPipeDouble * This,
             DOUBLE *buf,
             ULONG cRequest,
             ULONG *pcReturned);
        
        HRESULT ( __stdcall *Push )( 
            IPipeDouble * This,
             DOUBLE *buf,
             ULONG cSent);
        
        
    } IPipeDoubleVtbl;

    struct IPipeDouble
    {
         struct IPipeDoubleVtbl *lpVtbl;
    };

    























#line 13879 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IPipeDouble_Pull_Proxy( 
    IPipeDouble * This,
     DOUBLE *buf,
     ULONG cRequest,
     ULONG *pcReturned);


void __stdcall IPipeDouble_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPipeDouble_Push_Proxy( 
    IPipeDouble * This,
     DOUBLE *buf,
     ULONG cSent);


void __stdcall IPipeDouble_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 13911 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_AsyncIPipeDouble;






















#line 13944 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct AsyncIPipeDoubleVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            AsyncIPipeDouble * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            AsyncIPipeDouble * This);
        
        ULONG ( __stdcall *Release )( 
            AsyncIPipeDouble * This);
        
        HRESULT ( __stdcall *Begin_Pull )( 
            AsyncIPipeDouble * This,
             ULONG cRequest);
        
        HRESULT ( __stdcall *Finish_Pull )( 
            AsyncIPipeDouble * This,
             DOUBLE *buf,
             ULONG *pcReturned);
        
        HRESULT ( __stdcall *Begin_Push )( 
            AsyncIPipeDouble * This,
             DOUBLE *buf,
             ULONG cSent);
        
        HRESULT ( __stdcall *Finish_Push )( 
            AsyncIPipeDouble * This);
        
        
    } AsyncIPipeDoubleVtbl;

    struct AsyncIPipeDouble
    {
         struct AsyncIPipeDoubleVtbl *lpVtbl;
    };

    





























#line 14016 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall AsyncIPipeDouble_Begin_Pull_Proxy( 
    AsyncIPipeDouble * This,
     ULONG cRequest);


void __stdcall AsyncIPipeDouble_Begin_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeDouble_Finish_Pull_Proxy( 
    AsyncIPipeDouble * This,
     DOUBLE *buf,
     ULONG *pcReturned);


void __stdcall AsyncIPipeDouble_Finish_Pull_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeDouble_Begin_Push_Proxy( 
    AsyncIPipeDouble * This,
     DOUBLE *buf,
     ULONG cSent);


void __stdcall AsyncIPipeDouble_Begin_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall AsyncIPipeDouble_Finish_Push_Proxy( 
    AsyncIPipeDouble * This);


void __stdcall AsyncIPipeDouble_Finish_Push_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 14070 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IThumbnailExtractor;




















#line 14101 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IThumbnailExtractorVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IThumbnailExtractor * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IThumbnailExtractor * This);
        
        ULONG ( __stdcall *Release )( 
            IThumbnailExtractor * This);
        
        HRESULT ( __stdcall *ExtractThumbnail )( 
            IThumbnailExtractor * This,
             IStorage *pStg,
             ULONG ulLength,
             ULONG ulHeight,
             ULONG *pulOutputLength,
             ULONG *pulOutputHeight,
             HBITMAP *phOutputBitmap);
        
        HRESULT ( __stdcall *OnFileUpdated )( 
            IThumbnailExtractor * This,
             IStorage *pStg);
        
        
    } IThumbnailExtractorVtbl;

    struct IThumbnailExtractor
    {
         struct IThumbnailExtractorVtbl *lpVtbl;
    };

    























#line 14163 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IThumbnailExtractor_ExtractThumbnail_Proxy( 
    IThumbnailExtractor * This,
     IStorage *pStg,
     ULONG ulLength,
     ULONG ulHeight,
     ULONG *pulOutputLength,
     ULONG *pulOutputHeight,
     HBITMAP *phOutputBitmap);


void __stdcall IThumbnailExtractor_ExtractThumbnail_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IThumbnailExtractor_OnFileUpdated_Proxy( 
    IThumbnailExtractor * This,
     IStorage *pStg);


void __stdcall IThumbnailExtractor_OnFileUpdated_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 14197 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IDummyHICONIncluder;













#line 14221 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IDummyHICONIncluderVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IDummyHICONIncluder * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IDummyHICONIncluder * This);
        
        ULONG ( __stdcall *Release )( 
            IDummyHICONIncluder * This);
        
        HRESULT ( __stdcall *Dummy )( 
            IDummyHICONIncluder * This,
             HICON h1,
             HDC h2);
        
        
    } IDummyHICONIncluderVtbl;

    struct IDummyHICONIncluder
    {
         struct IDummyHICONIncluderVtbl *lpVtbl;
    };

    




















#line 14272 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IDummyHICONIncluder_Dummy_Proxy( 
    IDummyHICONIncluder * This,
     HICON h1,
     HDC h2);


void __stdcall IDummyHICONIncluder_Dummy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 14290 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 






































































































































































































































































































































































































































































































































































































































#line 14909 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"
typedef 
enum tagApplicationType
    {	ServerApplication	= 0,
	LibraryApplication	= ServerApplication + 1
    } 	ApplicationType;

typedef 
enum tagShutdownType
    {	IdleShutdown	= 0,
	ForcedShutdown	= IdleShutdown + 1
    } 	ShutdownType;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0087_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0087_v0_0_s_ifspec;





 


extern const IID IID_IProcessLock;













#line 14948 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IProcessLockVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IProcessLock * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IProcessLock * This);
        
        ULONG ( __stdcall *Release )( 
            IProcessLock * This);
        
        ULONG ( __stdcall *AddRefOnProcess )( 
            IProcessLock * This);
        
        ULONG ( __stdcall *ReleaseRefOnProcess )( 
            IProcessLock * This);
        
        
    } IProcessLockVtbl;

    struct IProcessLock
    {
         struct IProcessLockVtbl *lpVtbl;
    };

    























#line 15003 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



ULONG __stdcall IProcessLock_AddRefOnProcess_Proxy( 
    IProcessLock * This);


void __stdcall IProcessLock_AddRefOnProcess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


ULONG __stdcall IProcessLock_ReleaseRefOnProcess_Proxy( 
    IProcessLock * This);


void __stdcall IProcessLock_ReleaseRefOnProcess_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 15030 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_ISurrogateService;



























#line 15068 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct ISurrogateServiceVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ISurrogateService * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ISurrogateService * This);
        
        ULONG ( __stdcall *Release )( 
            ISurrogateService * This);
        
        HRESULT ( __stdcall *Init )( 
            ISurrogateService * This,
             const GUID * const rguidProcessID,
             IProcessLock *pProcessLock,
             BOOL *pfApplicationAware);
        
        HRESULT ( __stdcall *ApplicationLaunch )( 
            ISurrogateService * This,
             const GUID * const rguidApplID,
             ApplicationType appType);
        
        HRESULT ( __stdcall *ApplicationFree )( 
            ISurrogateService * This,
             const GUID * const rguidApplID);
        
        HRESULT ( __stdcall *CatalogRefresh )( 
            ISurrogateService * This,
             ULONG ulReserved);
        
        HRESULT ( __stdcall *ProcessShutdown )( 
            ISurrogateService * This,
             ShutdownType shutdownType);
        
        
    } ISurrogateServiceVtbl;

    struct ISurrogateService
    {
         struct ISurrogateServiceVtbl *lpVtbl;
    };

    
































#line 15149 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall ISurrogateService_Init_Proxy( 
    ISurrogateService * This,
     const GUID * const rguidProcessID,
     IProcessLock *pProcessLock,
     BOOL *pfApplicationAware);


void __stdcall ISurrogateService_Init_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISurrogateService_ApplicationLaunch_Proxy( 
    ISurrogateService * This,
     const GUID * const rguidApplID,
     ApplicationType appType);


void __stdcall ISurrogateService_ApplicationLaunch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISurrogateService_ApplicationFree_Proxy( 
    ISurrogateService * This,
     const GUID * const rguidApplID);


void __stdcall ISurrogateService_ApplicationFree_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISurrogateService_CatalogRefresh_Proxy( 
    ISurrogateService * This,
     ULONG ulReserved);


void __stdcall ISurrogateService_CatalogRefresh_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISurrogateService_ProcessShutdown_Proxy( 
    ISurrogateService * This,
     ShutdownType shutdownType);


void __stdcall ISurrogateService_ProcessShutdown_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 15217 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 

typedef 
enum _APTTYPE
    {	APTTYPE_CURRENT	= -1,
	APTTYPE_STA	= 0,
	APTTYPE_MTA	= 1,
	APTTYPE_NA	= 2,
	APTTYPE_MAINSTA	= 3
    } 	APTTYPE;

typedef 
enum _THDTYPE
    {	THDTYPE_BLOCKMESSAGES	= 0,
	THDTYPE_PROCESSMESSAGES	= 1
    } 	THDTYPE;

typedef DWORD APARTMENTID;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0089_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0089_v0_0_s_ifspec;





 


extern const IID IID_IComThreadingInfo;





















#line 15274 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IComThreadingInfoVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IComThreadingInfo * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IComThreadingInfo * This);
        
        ULONG ( __stdcall *Release )( 
            IComThreadingInfo * This);
        
        HRESULT ( __stdcall *GetCurrentApartmentType )( 
            IComThreadingInfo * This,
             APTTYPE *pAptType);
        
        HRESULT ( __stdcall *GetCurrentThreadType )( 
            IComThreadingInfo * This,
             THDTYPE *pThreadType);
        
        HRESULT ( __stdcall *GetCurrentLogicalThreadId )( 
            IComThreadingInfo * This,
             GUID *pguidLogicalThreadId);
        
        HRESULT ( __stdcall *SetCurrentLogicalThreadId )( 
            IComThreadingInfo * This,
             const GUID * const rguid);
        
        
    } IComThreadingInfoVtbl;

    struct IComThreadingInfo
    {
         struct IComThreadingInfoVtbl *lpVtbl;
    };

    





























#line 15345 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IComThreadingInfo_GetCurrentApartmentType_Proxy( 
    IComThreadingInfo * This,
     APTTYPE *pAptType);


void __stdcall IComThreadingInfo_GetCurrentApartmentType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IComThreadingInfo_GetCurrentThreadType_Proxy( 
    IComThreadingInfo * This,
     THDTYPE *pThreadType);


void __stdcall IComThreadingInfo_GetCurrentThreadType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IComThreadingInfo_GetCurrentLogicalThreadId_Proxy( 
    IComThreadingInfo * This,
     GUID *pguidLogicalThreadId);


void __stdcall IComThreadingInfo_GetCurrentLogicalThreadId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IComThreadingInfo_SetCurrentLogicalThreadId_Proxy( 
    IComThreadingInfo * This,
     const GUID * const rguid);


void __stdcall IComThreadingInfo_SetCurrentLogicalThreadId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 15398 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"






 


extern const IID IID_IProcessInitControl;












#line 15421 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"

    typedef struct IProcessInitControlVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IProcessInitControl * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IProcessInitControl * This);
        
        ULONG ( __stdcall *Release )( 
            IProcessInitControl * This);
        
        HRESULT ( __stdcall *ResetInitializerTimeout )( 
            IProcessInitControl * This,
             DWORD dwSecondsRemaining);
        
        
    } IProcessInitControlVtbl;

    struct IProcessInitControl
    {
         struct IProcessInitControlVtbl *lpVtbl;
    };

    




















#line 15471 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



HRESULT __stdcall IProcessInitControl_ResetInitializerTimeout_Proxy( 
    IProcessInitControl * This,
     DWORD dwSecondsRemaining);


void __stdcall IProcessInitControl_ResetInitializerTimeout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 15488 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



 

















































































































































































#line 15670 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"


#pragma warning(pop)


#line 15676 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"
#line 15677 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"


extern RPC_IF_HANDLE __MIDL_itf_objidl_0092_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0092_v0_0_s_ifspec;



unsigned long             __stdcall  ASYNC_STGMEDIUM_UserSize(     unsigned long *, unsigned long            , ASYNC_STGMEDIUM * ); 
unsigned char * __stdcall  ASYNC_STGMEDIUM_UserMarshal(  unsigned long *, unsigned char *, ASYNC_STGMEDIUM * ); 
unsigned char * __stdcall  ASYNC_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, ASYNC_STGMEDIUM * ); 
void                      __stdcall  ASYNC_STGMEDIUM_UserFree(     unsigned long *, ASYNC_STGMEDIUM * ); 

unsigned long             __stdcall  CLIPFORMAT_UserSize(     unsigned long *, unsigned long            , CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserMarshal(  unsigned long *, unsigned char *, CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT * ); 
void                      __stdcall  CLIPFORMAT_UserFree(     unsigned long *, CLIPFORMAT * ); 

unsigned long             __stdcall  FLAG_STGMEDIUM_UserSize(     unsigned long *, unsigned long            , FLAG_STGMEDIUM * ); 
unsigned char * __stdcall  FLAG_STGMEDIUM_UserMarshal(  unsigned long *, unsigned char *, FLAG_STGMEDIUM * ); 
unsigned char * __stdcall  FLAG_STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, FLAG_STGMEDIUM * ); 
void                      __stdcall  FLAG_STGMEDIUM_UserFree(     unsigned long *, FLAG_STGMEDIUM * ); 

unsigned long             __stdcall  HBITMAP_UserSize(     unsigned long *, unsigned long            , HBITMAP * ); 
unsigned char * __stdcall  HBITMAP_UserMarshal(  unsigned long *, unsigned char *, HBITMAP * ); 
unsigned char * __stdcall  HBITMAP_UserUnmarshal(unsigned long *, unsigned char *, HBITMAP * ); 
void                      __stdcall  HBITMAP_UserFree(     unsigned long *, HBITMAP * ); 

unsigned long             __stdcall  HDC_UserSize(     unsigned long *, unsigned long            , HDC * ); 
unsigned char * __stdcall  HDC_UserMarshal(  unsigned long *, unsigned char *, HDC * ); 
unsigned char * __stdcall  HDC_UserUnmarshal(unsigned long *, unsigned char *, HDC * ); 
void                      __stdcall  HDC_UserFree(     unsigned long *, HDC * ); 

unsigned long             __stdcall  HICON_UserSize(     unsigned long *, unsigned long            , HICON * ); 
unsigned char * __stdcall  HICON_UserMarshal(  unsigned long *, unsigned char *, HICON * ); 
unsigned char * __stdcall  HICON_UserUnmarshal(unsigned long *, unsigned char *, HICON * ); 
void                      __stdcall  HICON_UserFree(     unsigned long *, HICON * ); 

unsigned long             __stdcall  SNB_UserSize(     unsigned long *, unsigned long            , SNB * ); 
unsigned char * __stdcall  SNB_UserMarshal(  unsigned long *, unsigned char *, SNB * ); 
unsigned char * __stdcall  SNB_UserUnmarshal(unsigned long *, unsigned char *, SNB * ); 
void                      __stdcall  SNB_UserFree(     unsigned long *, SNB * ); 

unsigned long             __stdcall  STGMEDIUM_UserSize(     unsigned long *, unsigned long            , STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserMarshal(  unsigned long *, unsigned char *, STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM * ); 
void                      __stdcall  STGMEDIUM_UserFree(     unsigned long *, STGMEDIUM * ); 

 HRESULT __stdcall IEnumUnknown_Next_Proxy( 
    IEnumUnknown * This,
     ULONG celt,
     IUnknown **rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumUnknown_Next_Stub( 
    IEnumUnknown * This,
     ULONG celt,
     IUnknown **rgelt,
     ULONG *pceltFetched);

 HRESULT __stdcall IBindCtx_SetBindOptions_Proxy( 
    IBindCtx * This,
     BIND_OPTS *pbindopts);


 HRESULT __stdcall IBindCtx_SetBindOptions_Stub( 
    IBindCtx * This,
     BIND_OPTS2 *pbindopts);

 HRESULT __stdcall IBindCtx_GetBindOptions_Proxy( 
    IBindCtx * This,
     BIND_OPTS *pbindopts);


 HRESULT __stdcall IBindCtx_GetBindOptions_Stub( 
    IBindCtx * This,
     BIND_OPTS2 *pbindopts);

 HRESULT __stdcall IEnumMoniker_Next_Proxy( 
    IEnumMoniker * This,
     ULONG celt,
     IMoniker **rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumMoniker_Next_Stub( 
    IEnumMoniker * This,
     ULONG celt,
     IMoniker **rgelt,
     ULONG *pceltFetched);

 BOOL __stdcall IRunnableObject_IsRunning_Proxy( 
    IRunnableObject * This);


 HRESULT __stdcall IRunnableObject_IsRunning_Stub( 
    IRunnableObject * This);

 HRESULT __stdcall IMoniker_BindToObject_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID * const riidResult,
     void **ppvResult);


 HRESULT __stdcall IMoniker_BindToObject_Stub( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID * const riidResult,
     IUnknown **ppvResult);

 HRESULT __stdcall IMoniker_BindToStorage_Proxy( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID * const riid,
     void **ppvObj);


 HRESULT __stdcall IMoniker_BindToStorage_Stub( 
    IMoniker * This,
     IBindCtx *pbc,
     IMoniker *pmkToLeft,
     const IID * const riid,
     IUnknown **ppvObj);

 HRESULT __stdcall IEnumString_Next_Proxy( 
    IEnumString * This,
     ULONG celt,
     LPOLESTR *rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumString_Next_Stub( 
    IEnumString * This,
     ULONG celt,
     LPOLESTR *rgelt,
     ULONG *pceltFetched);

 HRESULT __stdcall ISequentialStream_Read_Proxy( 
    ISequentialStream * This,
     void *pv,
     ULONG cb,
     ULONG *pcbRead);


 HRESULT __stdcall ISequentialStream_Read_Stub( 
    ISequentialStream * This,
     byte *pv,
     ULONG cb,
     ULONG *pcbRead);

 HRESULT __stdcall ISequentialStream_Write_Proxy( 
    ISequentialStream * This,
     const void *pv,
     ULONG cb,
     ULONG *pcbWritten);


 HRESULT __stdcall ISequentialStream_Write_Stub( 
    ISequentialStream * This,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);

 HRESULT __stdcall IStream_Seek_Proxy( 
    IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER *plibNewPosition);


 HRESULT __stdcall IStream_Seek_Stub( 
    IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER *plibNewPosition);

 HRESULT __stdcall IStream_CopyTo_Proxy( 
    IStream * This,
     IStream *pstm,
     ULARGE_INTEGER cb,
     ULARGE_INTEGER *pcbRead,
     ULARGE_INTEGER *pcbWritten);


 HRESULT __stdcall IStream_CopyTo_Stub( 
    IStream * This,
     IStream *pstm,
     ULARGE_INTEGER cb,
     ULARGE_INTEGER *pcbRead,
     ULARGE_INTEGER *pcbWritten);

 HRESULT __stdcall IEnumSTATSTG_Next_Proxy( 
    IEnumSTATSTG * This,
     ULONG celt,
     STATSTG *rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumSTATSTG_Next_Stub( 
    IEnumSTATSTG * This,
     ULONG celt,
     STATSTG *rgelt,
     ULONG *pceltFetched);

 HRESULT __stdcall IStorage_OpenStream_Proxy( 
    IStorage * This,
     const OLECHAR *pwcsName,
     void *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     IStream **ppstm);


 HRESULT __stdcall IStorage_OpenStream_Stub( 
    IStorage * This,
     const OLECHAR *pwcsName,
     unsigned long cbReserved1,
     byte *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     IStream **ppstm);

 HRESULT __stdcall IStorage_EnumElements_Proxy( 
    IStorage * This,
     DWORD reserved1,
     void *reserved2,
     DWORD reserved3,
     IEnumSTATSTG **ppenum);


 HRESULT __stdcall IStorage_EnumElements_Stub( 
    IStorage * This,
     DWORD reserved1,
     unsigned long cbReserved2,
     byte *reserved2,
     DWORD reserved3,
     IEnumSTATSTG **ppenum);

 HRESULT __stdcall ILockBytes_ReadAt_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     void *pv,
     ULONG cb,
     ULONG *pcbRead);


 HRESULT __stdcall ILockBytes_ReadAt_Stub( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     byte *pv,
     ULONG cb,
     ULONG *pcbRead);

 HRESULT __stdcall ILockBytes_WriteAt_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     const void *pv,
     ULONG cb,
     ULONG *pcbWritten);


 HRESULT __stdcall ILockBytes_WriteAt_Stub( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);

 HRESULT __stdcall IEnumFORMATETC_Next_Proxy( 
    IEnumFORMATETC * This,
     ULONG celt,
     FORMATETC *rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumFORMATETC_Next_Stub( 
    IEnumFORMATETC * This,
     ULONG celt,
     FORMATETC *rgelt,
     ULONG *pceltFetched);

 HRESULT __stdcall IEnumSTATDATA_Next_Proxy( 
    IEnumSTATDATA * This,
     ULONG celt,
     STATDATA *rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumSTATDATA_Next_Stub( 
    IEnumSTATDATA * This,
     ULONG celt,
     STATDATA *rgelt,
     ULONG *pceltFetched);

 void __stdcall IAdviseSink_OnDataChange_Proxy( 
    IAdviseSink * This,
     FORMATETC *pFormatetc,
     STGMEDIUM *pStgmed);


 HRESULT __stdcall IAdviseSink_OnDataChange_Stub( 
    IAdviseSink * This,
     FORMATETC *pFormatetc,
     ASYNC_STGMEDIUM *pStgmed);

 void __stdcall IAdviseSink_OnViewChange_Proxy( 
    IAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);


 HRESULT __stdcall IAdviseSink_OnViewChange_Stub( 
    IAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);

 void __stdcall IAdviseSink_OnRename_Proxy( 
    IAdviseSink * This,
     IMoniker *pmk);


 HRESULT __stdcall IAdviseSink_OnRename_Stub( 
    IAdviseSink * This,
     IMoniker *pmk);

 void __stdcall IAdviseSink_OnSave_Proxy( 
    IAdviseSink * This);


 HRESULT __stdcall IAdviseSink_OnSave_Stub( 
    IAdviseSink * This);

 void __stdcall IAdviseSink_OnClose_Proxy( 
    IAdviseSink * This);


 HRESULT __stdcall IAdviseSink_OnClose_Stub( 
    IAdviseSink * This);

 void __stdcall IAdviseSink2_OnLinkSrcChange_Proxy( 
    IAdviseSink2 * This,
     IMoniker *pmk);


 HRESULT __stdcall IAdviseSink2_OnLinkSrcChange_Stub( 
    IAdviseSink2 * This,
     IMoniker *pmk);

 HRESULT __stdcall IDataObject_GetData_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetcIn,
     STGMEDIUM *pmedium);


 HRESULT __stdcall IDataObject_GetData_Stub( 
    IDataObject * This,
     FORMATETC *pformatetcIn,
     STGMEDIUM *pRemoteMedium);

 HRESULT __stdcall IDataObject_GetDataHere_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetc,
     STGMEDIUM *pmedium);


 HRESULT __stdcall IDataObject_GetDataHere_Stub( 
    IDataObject * This,
     FORMATETC *pformatetc,
     STGMEDIUM *pRemoteMedium);

 HRESULT __stdcall IDataObject_SetData_Proxy( 
    IDataObject * This,
     FORMATETC *pformatetc,
     STGMEDIUM *pmedium,
     BOOL fRelease);


 HRESULT __stdcall IDataObject_SetData_Stub( 
    IDataObject * This,
     FORMATETC *pformatetc,
     FLAG_STGMEDIUM *pmedium,
     BOOL fRelease);

 HRESULT __stdcall IFillLockBytes_FillAppend_Proxy( 
    IFillLockBytes * This,
     const void *pv,
     ULONG cb,
     ULONG *pcbWritten);


 HRESULT __stdcall IFillLockBytes_FillAppend_Stub( 
    IFillLockBytes * This,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);

 HRESULT __stdcall IFillLockBytes_FillAt_Proxy( 
    IFillLockBytes * This,
     ULARGE_INTEGER ulOffset,
     const void *pv,
     ULONG cb,
     ULONG *pcbWritten);


 HRESULT __stdcall IFillLockBytes_FillAt_Stub( 
    IFillLockBytes * This,
     ULARGE_INTEGER ulOffset,
     const byte *pv,
     ULONG cb,
     ULONG *pcbWritten);

 void __stdcall AsyncIAdviseSink_Begin_OnDataChange_Proxy( 
    AsyncIAdviseSink * This,
     FORMATETC *pFormatetc,
     STGMEDIUM *pStgmed);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnDataChange_Stub( 
    AsyncIAdviseSink * This,
     FORMATETC *pFormatetc,
     ASYNC_STGMEDIUM *pStgmed);

 void __stdcall AsyncIAdviseSink_Finish_OnDataChange_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnDataChange_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Begin_OnViewChange_Proxy( 
    AsyncIAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnViewChange_Stub( 
    AsyncIAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);

 void __stdcall AsyncIAdviseSink_Finish_OnViewChange_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnViewChange_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Begin_OnRename_Proxy( 
    AsyncIAdviseSink * This,
     IMoniker *pmk);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnRename_Stub( 
    AsyncIAdviseSink * This,
     IMoniker *pmk);

 void __stdcall AsyncIAdviseSink_Finish_OnRename_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnRename_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Begin_OnSave_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnSave_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Finish_OnSave_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnSave_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Begin_OnClose_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnClose_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Finish_OnClose_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnClose_Stub( 
    AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy( 
    AsyncIAdviseSink2 * This,
     IMoniker *pmk);


 HRESULT __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub( 
    AsyncIAdviseSink2 * This,
     IMoniker *pmk);

 void __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy( 
    AsyncIAdviseSink2 * This);


 HRESULT __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub( 
    AsyncIAdviseSink2 * This);









#line 16197 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objidl.h"



#line 405 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"










#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"
























































#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"








#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\guiddef.h"











































































































































#line 416 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\cguid.h"













#pragma once
#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\cguid.h"





extern const IID GUID_NULL;
extern const IID CATID_MARSHALER;
extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const CLSID CLSID_AggStdMarshal;
extern const CLSID CLSID_StdAsyncActManager;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_DCOMAccessControl;
extern const CLSID CLSID_StdGlobalInterfaceTable;
extern const CLSID CLSID_ComBinding;
extern const CLSID CLSID_StdEvent;
extern const CLSID CLSID_ManualResetEvent;
extern const CLSID CLSID_SynchronizeContainer;
extern const CLSID CLSID_AddrControl;










extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;




extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;




extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;

extern const CLSID CLSID_CStdPropertyFrame;

extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;

extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;

extern const CLSID CLSID_IdentityUnmarshal;
extern const CLSID CLSID_InProcFreeMarshaler;

extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;




extern const GUID GUID_TRISTATE;






#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\cguid.h"
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"
#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"


typedef enum tagCOINIT
{
  COINIT_APARTMENTTHREADED  = 0x2,      






#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"
} COINIT;







extern __declspec(dllimport) DWORD __stdcall CoBuildVersion( void );



extern __declspec(dllimport) HRESULT __stdcall  CoInitialize( LPVOID pvReserved);
extern __declspec(dllimport) void __stdcall  CoUninitialize(void);
extern __declspec(dllimport) HRESULT __stdcall  CoGetMalloc( DWORD dwMemContext,  LPMALLOC * ppMalloc);
extern __declspec(dllimport) DWORD __stdcall CoGetCurrentProcess(void);
extern __declspec(dllimport) HRESULT __stdcall  CoRegisterMallocSpy( LPMALLOCSPY pMallocSpy);
extern __declspec(dllimport) HRESULT __stdcall  CoRevokeMallocSpy(void);
extern __declspec(dllimport) HRESULT __stdcall  CoCreateStandardMalloc( DWORD memctx,  IMalloc * * ppMalloc);









#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"























#line 485 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"




#line 490 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"














#line 505 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"



extern __declspec(dllimport) HRESULT __stdcall     CoGetObjectContext( const IID * const riid,  LPVOID * ppv);



extern __declspec(dllimport) HRESULT __stdcall  CoGetClassObject( const IID * const rclsid,  DWORD dwClsContext,  LPVOID pvReserved,
                     const IID * const riid,  LPVOID * ppv);
extern __declspec(dllimport) HRESULT __stdcall  CoRegisterClassObject( const IID * const rclsid,  LPUNKNOWN pUnk,
                     DWORD dwClsContext,  DWORD flags,  LPDWORD lpdwRegister);
extern __declspec(dllimport) HRESULT __stdcall  CoRevokeClassObject( DWORD dwRegister);
extern __declspec(dllimport) HRESULT __stdcall  CoResumeClassObjects(void);
extern __declspec(dllimport) HRESULT __stdcall  CoSuspendClassObjects(void);
extern __declspec(dllimport) ULONG __stdcall CoAddRefServerProcess(void);
extern __declspec(dllimport) ULONG __stdcall CoReleaseServerProcess(void);
extern __declspec(dllimport) HRESULT __stdcall  CoGetPSClsid( const IID * const riid,  CLSID *pClsid);
extern __declspec(dllimport) HRESULT __stdcall  CoRegisterPSClsid( const IID * const riid,  const IID * const rclsid);


extern __declspec(dllimport) HRESULT __stdcall  CoRegisterSurrogate( LPSURROGATE pSurrogate);



extern __declspec(dllimport) HRESULT __stdcall CoGetMarshalSizeMax( ULONG *pulSize,  const IID * const riid,  LPUNKNOWN pUnk,
                     DWORD dwDestContext,  LPVOID pvDestContext,  DWORD mshlflags);
extern __declspec(dllimport) HRESULT __stdcall CoMarshalInterface( LPSTREAM pStm,  const IID * const riid,  LPUNKNOWN pUnk,
                     DWORD dwDestContext,  LPVOID pvDestContext,  DWORD mshlflags);
extern __declspec(dllimport) HRESULT __stdcall CoUnmarshalInterface( LPSTREAM pStm,  const IID * const riid,  LPVOID * ppv);
extern __declspec(dllimport) HRESULT __stdcall CoMarshalHresult( LPSTREAM pstm,  HRESULT hresult);
extern __declspec(dllimport) HRESULT __stdcall CoUnmarshalHresult( LPSTREAM pstm,  HRESULT  * phresult);
extern __declspec(dllimport) HRESULT __stdcall CoReleaseMarshalData( LPSTREAM pStm);
extern __declspec(dllimport) HRESULT __stdcall CoDisconnectObject( LPUNKNOWN pUnk,  DWORD dwReserved);
extern __declspec(dllimport) HRESULT __stdcall CoLockObjectExternal( LPUNKNOWN pUnk,  BOOL fLock,  BOOL fLastUnlockReleases);
extern __declspec(dllimport) HRESULT __stdcall CoGetStandardMarshal( const IID * const riid,  LPUNKNOWN pUnk,
                     DWORD dwDestContext,  LPVOID pvDestContext,  DWORD mshlflags,
                     LPMARSHAL * ppMarshal);


extern __declspec(dllimport) HRESULT __stdcall CoGetStdMarshalEx( LPUNKNOWN pUnkOuter,  DWORD smexflags,
                             LPUNKNOWN * ppUnkInner);


typedef enum tagSTDMSHLFLAGS
{
    SMEXF_SERVER     = 0x01,       
    SMEXF_HANDLER    = 0x02        
} STDMSHLFLAGS;


extern __declspec(dllimport) BOOL __stdcall CoIsHandlerConnected( LPUNKNOWN pUnk);


extern __declspec(dllimport) HRESULT __stdcall CoMarshalInterThreadInterfaceInStream( const IID * const riid,  LPUNKNOWN pUnk,
                     LPSTREAM *ppStm);

extern __declspec(dllimport) HRESULT __stdcall CoGetInterfaceAndReleaseStream( LPSTREAM pStm,  const IID * const iid,
                     LPVOID * ppv);

extern __declspec(dllimport) HRESULT __stdcall CoCreateFreeThreadedMarshaler( LPUNKNOWN  punkOuter,
                     LPUNKNOWN *ppunkMarshal);



extern __declspec(dllimport) HINSTANCE __stdcall CoLoadLibrary( LPOLESTR lpszLibName,  BOOL bAutoFree);
extern __declspec(dllimport) void __stdcall CoFreeLibrary( HINSTANCE hInst);
extern __declspec(dllimport) void __stdcall CoFreeAllLibraries(void);
extern __declspec(dllimport) void __stdcall CoFreeUnusedLibraries(void);




#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"

























































































#line 668 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"



extern __declspec(dllimport) HRESULT __stdcall CoCreateInstance( const IID * const rclsid,  LPUNKNOWN pUnkOuter,
                     DWORD dwClsContext,  const IID * const riid,  LPVOID * ppv);





































#line 711 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"




































#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"



extern __declspec(dllimport) HRESULT __stdcall StringFromCLSID( const IID * const rclsid,  LPOLESTR * lplpsz);
extern __declspec(dllimport) HRESULT __stdcall CLSIDFromString( LPOLESTR lpsz,  LPCLSID pclsid);
extern __declspec(dllimport) HRESULT __stdcall StringFromIID( const IID * const rclsid,  LPOLESTR * lplpsz);
extern __declspec(dllimport) HRESULT __stdcall IIDFromString( LPOLESTR lpsz,  LPIID lpiid);
extern __declspec(dllimport) BOOL __stdcall CoIsOle1Class( const IID * const rclsid);
extern __declspec(dllimport) HRESULT __stdcall ProgIDFromCLSID ( const IID * const clsid,  LPOLESTR * lplpszProgID);
extern __declspec(dllimport) HRESULT __stdcall CLSIDFromProgID ( LPCOLESTR lpszProgID,  LPCLSID lpclsid);
extern __declspec(dllimport) HRESULT __stdcall CLSIDFromProgIDEx ( LPCOLESTR lpszProgID,  LPCLSID lpclsid);
extern __declspec(dllimport) int __stdcall StringFromGUID2( const GUID * const rguid,  LPOLESTR lpsz,  int cchMax);

extern __declspec(dllimport) HRESULT __stdcall CoCreateGuid( GUID  *pguid);

extern __declspec(dllimport) BOOL __stdcall CoFileTimeToDosDateTime(
                  FILETIME * lpFileTime,  LPWORD lpDosDate,  LPWORD lpDosTime);
extern __declspec(dllimport) BOOL __stdcall CoDosDateTimeToFileTime(
                        WORD nDosDate,  WORD nDosTime,  FILETIME * lpFileTime);
extern __declspec(dllimport) HRESULT __stdcall  CoFileTimeNow(  FILETIME * lpFileTime );


extern __declspec(dllimport) HRESULT __stdcall CoRegisterMessageFilter(  LPMESSAGEFILTER lpMessageFilter,
                                 LPMESSAGEFILTER * lplpMessageFilter );





#line 778 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"





















#line 800 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"








#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"



extern __declspec(dllimport) HRESULT __stdcall CoGetTreatAsClass( const IID * const clsidOld,  LPCLSID pClsidNew);
extern __declspec(dllimport) HRESULT __stdcall CoTreatAsClass( const IID * const clsidOld,  const IID * const clsidNew);










typedef HRESULT (__stdcall * LPFNGETCLASSOBJECT) (const IID * const, const IID * const, LPVOID *);





typedef HRESULT (__stdcall * LPFNCANUNLOADNOW)(void);


extern HRESULT __stdcall  DllGetClassObject( const IID * const rclsid,  const IID * const riid,  LPVOID * ppv);

extern HRESULT __stdcall  DllCanUnloadNow(void);



extern __declspec(dllimport) LPVOID __stdcall CoTaskMemAlloc( SIZE_T cb);
extern __declspec(dllimport) LPVOID __stdcall CoTaskMemRealloc( LPVOID pv,  SIZE_T cb);
extern __declspec(dllimport) void __stdcall   CoTaskMemFree( LPVOID pv);




extern __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);

extern __declspec(dllimport) HRESULT __stdcall CreateDataCache( LPUNKNOWN pUnkOuter,  const IID * const rclsid,
                                         const IID * const iid,  LPVOID * ppv);





extern __declspec(dllimport) HRESULT __stdcall StgCreateDocfile( const OLECHAR * pwcsName,
             DWORD grfMode,
             DWORD reserved,
             IStorage  *  *ppstgOpen);

extern __declspec(dllimport) HRESULT __stdcall StgCreateDocfileOnILockBytes( ILockBytes  *plkbyt,
                     DWORD grfMode,
                     DWORD reserved,
                     IStorage  *  *ppstgOpen);

extern __declspec(dllimport) HRESULT __stdcall StgOpenStorage( const OLECHAR * pwcsName,
                IStorage  *pstgPriority,
                DWORD grfMode,
                SNB snbExclude,
                DWORD reserved,
               IStorage  *  *ppstgOpen);
extern __declspec(dllimport) HRESULT __stdcall StgOpenStorageOnILockBytes( ILockBytes  *plkbyt,
                    IStorage  *pstgPriority,
                    DWORD grfMode,
                    SNB snbExclude,
                    DWORD reserved,
                   IStorage  *  *ppstgOpen);

extern __declspec(dllimport) HRESULT __stdcall StgIsStorageFile( const OLECHAR * pwcsName);
extern __declspec(dllimport) HRESULT __stdcall StgIsStorageILockBytes( ILockBytes * plkbyt);

extern __declspec(dllimport) HRESULT __stdcall StgSetTimes( OLECHAR const * lpszName,
                    FILETIME const * pctime,
                    FILETIME const * patime,
                    FILETIME const * pmtime);

extern __declspec(dllimport) HRESULT __stdcall StgOpenAsyncDocfileOnIFillLockBytes(  IFillLockBytes *pflb,
               DWORD grfMode,
               DWORD asyncFlags,
              IStorage **ppstgOpen);

extern __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnILockBytes(  ILockBytes *pilb,
              IFillLockBytes **ppflb);

extern __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnFile( OLECHAR const *pwcsName,
              IFillLockBytes **ppflb);


extern __declspec(dllimport) HRESULT __stdcall StgOpenLayoutDocfile( OLECHAR const *pwcsDfName,
               DWORD grfMode,
               DWORD reserved,
              IStorage **ppstgOpen);




#line 907 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"

#line 909 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"

#line 911 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"

typedef struct tagSTGOPTIONS
{
    USHORT usVersion;            
    USHORT reserved;             
    ULONG ulSectorSize;          


#line 920 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"
} STGOPTIONS;

extern __declspec(dllimport) HRESULT __stdcall StgCreateStorageEx ( const WCHAR* pwcsName,
              DWORD grfMode,
              DWORD stgfmt,              
              DWORD grfAttrs,             
              STGOPTIONS * pStgOptions,
              void * reserved,
              const IID * const riid,
             void ** ppObjectOpen);

extern __declspec(dllimport) HRESULT __stdcall StgOpenStorageEx ( const WCHAR* pwcsName,
              DWORD grfMode,
              DWORD stgfmt,              
              DWORD grfAttrs,             
              STGOPTIONS * pStgOptions,
              void * reserved,
              const IID * const riid,
             void ** ppObjectOpen);






extern __declspec(dllimport) HRESULT __stdcall  BindMoniker( LPMONIKER pmk,  DWORD grfOpt,  const IID * const iidResult,  LPVOID * ppvResult);

extern __declspec(dllimport) HRESULT __stdcall  CoInstall(
      IBindCtx     * pbc,
      DWORD          dwFlags,
      uCLSSPEC     * pClassSpec,
      QUERYCONTEXT * pQuery,
      LPWSTR         pszCodeBase);

extern __declspec(dllimport) HRESULT __stdcall  CoGetObject( LPCWSTR pszName,  BIND_OPTS *pBindOptions,  const IID * const riid,  void **ppv);
extern __declspec(dllimport) HRESULT __stdcall  MkParseDisplayName( LPBC pbc,  LPCOLESTR szUserName,
                 ULONG  * pchEaten,  LPMONIKER  * ppmk);
extern __declspec(dllimport) HRESULT __stdcall  MonikerRelativePathTo( LPMONIKER pmkSrc,  LPMONIKER pmkDest,  LPMONIKER
                * ppmkRelPath,  BOOL dwReserved);
extern __declspec(dllimport) HRESULT __stdcall  MonikerCommonPrefixWith( LPMONIKER pmkThis,  LPMONIKER pmkOther,
                 LPMONIKER * ppmkCommon);
extern __declspec(dllimport) HRESULT __stdcall  CreateBindCtx( DWORD reserved,  LPBC * ppbc);
extern __declspec(dllimport) HRESULT __stdcall  CreateGenericComposite( LPMONIKER pmkFirst,  LPMONIKER pmkRest,
     LPMONIKER * ppmkComposite);
extern __declspec(dllimport) HRESULT __stdcall  GetClassFile ( LPCOLESTR szFilename,  CLSID * pclsid);

extern __declspec(dllimport) HRESULT __stdcall  CreateClassMoniker( const IID * const rclsid,  LPMONIKER * ppmk);

extern __declspec(dllimport) HRESULT __stdcall  CreateFileMoniker( LPCOLESTR lpszPathName,  LPMONIKER * ppmk);

extern __declspec(dllimport) HRESULT __stdcall  CreateItemMoniker( LPCOLESTR lpszDelim,  LPCOLESTR lpszItem,
     LPMONIKER * ppmk);
extern __declspec(dllimport) HRESULT __stdcall  CreateAntiMoniker( LPMONIKER * ppmk);
extern __declspec(dllimport) HRESULT __stdcall  CreatePointerMoniker( LPUNKNOWN punk,  LPMONIKER * ppmk);
extern __declspec(dllimport) HRESULT __stdcall  CreateObjrefMoniker( LPUNKNOWN punk,  LPMONIKER  * ppmk);

extern __declspec(dllimport) HRESULT __stdcall  GetRunningObjectTable(  DWORD reserved,  LPRUNNINGOBJECTTABLE * pprot);

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"





 










#pragma warning( disable: 4049 )  

















#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"





#pragma once
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

 



typedef struct IPersistMoniker IPersistMoniker;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IMonikerProp IMonikerProp;
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IBindProtocol IBindProtocol;
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IBinding IBinding;
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IBindStatusCallback IBindStatusCallback;
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IAuthenticate IAuthenticate;
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IHttpNegotiate IHttpNegotiate;
#line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IHttpNegotiate2 IHttpNegotiate2;
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IWinInetFileStream IWinInetFileStream;
#line 98 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IWindowForBindingUI IWindowForBindingUI;
#line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct ICodeInstall ICodeInstall;
#line 110 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IWinInetInfo IWinInetInfo;
#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IHttpSecurity IHttpSecurity;
#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IWinInetHttpInfo IWinInetHttpInfo;
#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IWinInetCacheHints IWinInetCacheHints;
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IBindHost IBindHost;
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternet IInternet;
#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetBindInfo IInternetBindInfo;
#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetProtocolRoot IInternetProtocolRoot;
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetProtocol IInternetProtocol;
#line 164 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetProtocolSink IInternetProtocolSink;
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetProtocolSinkStackable IInternetProtocolSinkStackable;
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetSession IInternetSession;
#line 182 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetThreadSwitch IInternetThreadSwitch;
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetPriority IInternetPriority;
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetProtocolInfo IInternetProtocolInfo;
#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;
#line 206 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetSecurityManager IInternetSecurityManager;
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetSecurityManagerEx IInternetSecurityManagerEx;
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IZoneIdentifier IZoneIdentifier;
#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetZoneManager IInternetZoneManager;
#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IInternetZoneManagerEx IInternetZoneManagerEx;
#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct ISoftDistExt ISoftDistExt;
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct ICatalogFileInfo ICatalogFileInfo;
#line 254 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IDataFilter IDataFilter;
#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IEncodingFilterFactory IEncodingFilterFactory;
#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




typedef struct IWrappedProtocol IWrappedProtocol;
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"





 










#pragma warning( disable: 4049 )  

















#line 36 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"





#pragma once
#line 43 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

 



typedef struct IOleAdviseHolder IOleAdviseHolder;
#line 50 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleCache IOleCache;
#line 56 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleCache2 IOleCache2;
#line 62 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleCacheControl IOleCacheControl;
#line 68 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IParseDisplayName IParseDisplayName;
#line 74 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleContainer IOleContainer;
#line 80 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleClientSite IOleClientSite;
#line 86 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleObject IOleObject;
#line 92 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleWindow IOleWindow;
#line 98 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleLink IOleLink;
#line 104 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleItemContainer IOleItemContainer;
#line 110 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;
#line 116 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;
#line 122 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleInPlaceFrame IOleInPlaceFrame;
#line 128 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleInPlaceObject IOleInPlaceObject;
#line 134 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IOleInPlaceSite IOleInPlaceSite;
#line 140 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IContinue IContinue;
#line 146 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IViewObject IViewObject;
#line 152 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IViewObject2 IViewObject2;
#line 158 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IDropSource IDropSource;
#line 164 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IDropTarget IDropTarget;
#line 170 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




typedef struct IEnumOLEVERB IEnumOLEVERB;
#line 176 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"









void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 








#pragma once
#line 200 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_v0_0_s_ifspec;





 

typedef  IOleAdviseHolder *LPOLEADVISEHOLDER;


extern const IID IID_IOleAdviseHolder;


























#line 244 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleAdviseHolderVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleAdviseHolder * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleAdviseHolder * This);
        
        ULONG ( __stdcall *Release )( 
            IOleAdviseHolder * This);
        
        HRESULT ( __stdcall *Advise )( 
            IOleAdviseHolder * This,
             IAdviseSink *pAdvise,
             DWORD *pdwConnection);
        
        HRESULT ( __stdcall *Unadvise )( 
            IOleAdviseHolder * This,
             DWORD dwConnection);
        
        HRESULT ( __stdcall *EnumAdvise )( 
            IOleAdviseHolder * This,
             IEnumSTATDATA **ppenumAdvise);
        
        HRESULT ( __stdcall *SendOnRename )( 
            IOleAdviseHolder * This,
             IMoniker *pmk);
        
        HRESULT ( __stdcall *SendOnSave )( 
            IOleAdviseHolder * This);
        
        HRESULT ( __stdcall *SendOnClose )( 
            IOleAdviseHolder * This);
        
        
    } IOleAdviseHolderVtbl;

    struct IOleAdviseHolder
    {
         struct IOleAdviseHolderVtbl *lpVtbl;
    };

    



































#line 328 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IOleAdviseHolder_Advise_Proxy( 
    IOleAdviseHolder * This,
     IAdviseSink *pAdvise,
     DWORD *pdwConnection);


void __stdcall IOleAdviseHolder_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_Unadvise_Proxy( 
    IOleAdviseHolder * This,
     DWORD dwConnection);


void __stdcall IOleAdviseHolder_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_EnumAdvise_Proxy( 
    IOleAdviseHolder * This,
     IEnumSTATDATA **ppenumAdvise);


void __stdcall IOleAdviseHolder_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_SendOnRename_Proxy( 
    IOleAdviseHolder * This,
     IMoniker *pmk);


void __stdcall IOleAdviseHolder_SendOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_SendOnSave_Proxy( 
    IOleAdviseHolder * This);


void __stdcall IOleAdviseHolder_SendOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleAdviseHolder_SendOnClose_Proxy( 
    IOleAdviseHolder * This);


void __stdcall IOleAdviseHolder_SendOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 404 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IOleCache *LPOLECACHE;


extern const IID IID_IOleCache;




























#line 445 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleCacheVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleCache * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleCache * This);
        
        ULONG ( __stdcall *Release )( 
            IOleCache * This);
        
        HRESULT ( __stdcall *Cache )( 
            IOleCache * This,
             FORMATETC *pformatetc,
             DWORD advf,
             DWORD *pdwConnection);
        
        HRESULT ( __stdcall *Uncache )( 
            IOleCache * This,
             DWORD dwConnection);
        
        HRESULT ( __stdcall *EnumCache )( 
            IOleCache * This,
             IEnumSTATDATA **ppenumSTATDATA);
        
        HRESULT ( __stdcall *InitCache )( 
            IOleCache * This,
             IDataObject *pDataObject);
        
        HRESULT ( __stdcall *SetData )( 
            IOleCache * This,
             FORMATETC *pformatetc,
             STGMEDIUM *pmedium,
             BOOL fRelease);
        
        
    } IOleCacheVtbl;

    struct IOleCache
    {
         struct IOleCacheVtbl *lpVtbl;
    };

    
































#line 527 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IOleCache_Cache_Proxy( 
    IOleCache * This,
     FORMATETC *pformatetc,
     DWORD advf,
     DWORD *pdwConnection);


void __stdcall IOleCache_Cache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_Uncache_Proxy( 
    IOleCache * This,
     DWORD dwConnection);


void __stdcall IOleCache_Uncache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_EnumCache_Proxy( 
    IOleCache * This,
     IEnumSTATDATA **ppenumSTATDATA);


void __stdcall IOleCache_EnumCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_InitCache_Proxy( 
    IOleCache * This,
     IDataObject *pDataObject);


void __stdcall IOleCache_InitCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache_SetData_Proxy( 
    IOleCache * This,
     FORMATETC *pformatetc,
     STGMEDIUM *pmedium,
     BOOL fRelease);


void __stdcall IOleCache_SetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 596 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IOleCache2 *LPOLECACHE2;



















typedef  
enum tagDISCARDCACHE
    {	DISCARDCACHE_SAVEIFDIRTY	= 0,
	DISCARDCACHE_NOSAVE	= 1
    } 	DISCARDCACHE;


extern const IID IID_IOleCache2;

















#line 650 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleCache2Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleCache2 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleCache2 * This);
        
        ULONG ( __stdcall *Release )( 
            IOleCache2 * This);
        
        HRESULT ( __stdcall *Cache )( 
            IOleCache2 * This,
             FORMATETC *pformatetc,
             DWORD advf,
             DWORD *pdwConnection);
        
        HRESULT ( __stdcall *Uncache )( 
            IOleCache2 * This,
             DWORD dwConnection);
        
        HRESULT ( __stdcall *EnumCache )( 
            IOleCache2 * This,
             IEnumSTATDATA **ppenumSTATDATA);
        
        HRESULT ( __stdcall *InitCache )( 
            IOleCache2 * This,
             IDataObject *pDataObject);
        
        HRESULT ( __stdcall *SetData )( 
            IOleCache2 * This,
             FORMATETC *pformatetc,
             STGMEDIUM *pmedium,
             BOOL fRelease);
        
         HRESULT ( __stdcall *UpdateCache )( 
            IOleCache2 * This,
             LPDATAOBJECT pDataObject,
             DWORD grfUpdf,
             LPVOID pReserved);
        
        HRESULT ( __stdcall *DiscardCache )( 
            IOleCache2 * This,
             DWORD dwDiscardOptions);
        
        
    } IOleCache2Vtbl;

    struct IOleCache2
    {
         struct IOleCache2Vtbl *lpVtbl;
    };

    







































#line 749 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



 HRESULT __stdcall IOleCache2_RemoteUpdateCache_Proxy( 
    IOleCache2 * This,
     LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     LONG_PTR pReserved);


void __stdcall IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCache2_DiscardCache_Proxy( 
    IOleCache2 * This,
     DWORD dwDiscardOptions);


void __stdcall IOleCache2_DiscardCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 780 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IOleCacheControl *LPOLECACHECONTROL;


extern const IID IID_IOleCacheControl;














#line 807 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleCacheControlVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleCacheControl * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleCacheControl * This);
        
        ULONG ( __stdcall *Release )( 
            IOleCacheControl * This);
        
        HRESULT ( __stdcall *OnRun )( 
            IOleCacheControl * This,
            LPDATAOBJECT pDataObject);
        
        HRESULT ( __stdcall *OnStop )( 
            IOleCacheControl * This);
        
        
    } IOleCacheControlVtbl;

    struct IOleCacheControl
    {
         struct IOleCacheControlVtbl *lpVtbl;
    };

    























#line 863 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IOleCacheControl_OnRun_Proxy( 
    IOleCacheControl * This,
    LPDATAOBJECT pDataObject);


void __stdcall IOleCacheControl_OnRun_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleCacheControl_OnStop_Proxy( 
    IOleCacheControl * This);


void __stdcall IOleCacheControl_OnStop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 891 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IParseDisplayName *LPPARSEDISPLAYNAME;


extern const IID IID_IParseDisplayName;















#line 919 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IParseDisplayNameVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IParseDisplayName * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IParseDisplayName * This);
        
        ULONG ( __stdcall *Release )( 
            IParseDisplayName * This);
        
        HRESULT ( __stdcall *ParseDisplayName )( 
            IParseDisplayName * This,
             IBindCtx *pbc,
             LPOLESTR pszDisplayName,
             ULONG *pchEaten,
             IMoniker **ppmkOut);
        
        
    } IParseDisplayNameVtbl;

    struct IParseDisplayName
    {
         struct IParseDisplayNameVtbl *lpVtbl;
    };

    




















#line 972 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IParseDisplayName_ParseDisplayName_Proxy( 
    IParseDisplayName * This,
     IBindCtx *pbc,
     LPOLESTR pszDisplayName,
     ULONG *pchEaten,
     IMoniker **ppmkOut);


void __stdcall IParseDisplayName_ParseDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 992 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IOleContainer *LPOLECONTAINER;


extern const IID IID_IOleContainer;
















#line 1021 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleContainerVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleContainer * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleContainer * This);
        
        ULONG ( __stdcall *Release )( 
            IOleContainer * This);
        
        HRESULT ( __stdcall *ParseDisplayName )( 
            IOleContainer * This,
             IBindCtx *pbc,
             LPOLESTR pszDisplayName,
             ULONG *pchEaten,
             IMoniker **ppmkOut);
        
        HRESULT ( __stdcall *EnumObjects )( 
            IOleContainer * This,
             DWORD grfFlags,
             IEnumUnknown **ppenum);
        
        HRESULT ( __stdcall *LockContainer )( 
            IOleContainer * This,
             BOOL fLock);
        
        
    } IOleContainerVtbl;

    struct IOleContainer
    {
         struct IOleContainerVtbl *lpVtbl;
    };

    



























#line 1090 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IOleContainer_EnumObjects_Proxy( 
    IOleContainer * This,
     DWORD grfFlags,
     IEnumUnknown **ppenum);


void __stdcall IOleContainer_EnumObjects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleContainer_LockContainer_Proxy( 
    IOleContainer * This,
     BOOL fLock);


void __stdcall IOleContainer_LockContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1120 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IOleClientSite *LPOLECLIENTSITE;


extern const IID IID_IOleClientSite;


























#line 1159 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleClientSiteVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleClientSite * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleClientSite * This);
        
        ULONG ( __stdcall *Release )( 
            IOleClientSite * This);
        
        HRESULT ( __stdcall *SaveObject )( 
            IOleClientSite * This);
        
        HRESULT ( __stdcall *GetMoniker )( 
            IOleClientSite * This,
             DWORD dwAssign,
             DWORD dwWhichMoniker,
             IMoniker **ppmk);
        
        HRESULT ( __stdcall *GetContainer )( 
            IOleClientSite * This,
             IOleContainer **ppContainer);
        
        HRESULT ( __stdcall *ShowObject )( 
            IOleClientSite * This);
        
        HRESULT ( __stdcall *OnShowWindow )( 
            IOleClientSite * This,
             BOOL fShow);
        
        HRESULT ( __stdcall *RequestNewObjectLayout )( 
            IOleClientSite * This);
        
        
    } IOleClientSiteVtbl;

    struct IOleClientSite
    {
         struct IOleClientSiteVtbl *lpVtbl;
    };

    



































#line 1243 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IOleClientSite_SaveObject_Proxy( 
    IOleClientSite * This);


void __stdcall IOleClientSite_SaveObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_GetMoniker_Proxy( 
    IOleClientSite * This,
     DWORD dwAssign,
     DWORD dwWhichMoniker,
     IMoniker **ppmk);


void __stdcall IOleClientSite_GetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_GetContainer_Proxy( 
    IOleClientSite * This,
     IOleContainer **ppContainer);


void __stdcall IOleClientSite_GetContainer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_ShowObject_Proxy( 
    IOleClientSite * This);


void __stdcall IOleClientSite_ShowObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_OnShowWindow_Proxy( 
    IOleClientSite * This,
     BOOL fShow);


void __stdcall IOleClientSite_OnShowWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleClientSite_RequestNewObjectLayout_Proxy( 
    IOleClientSite * This);


void __stdcall IOleClientSite_RequestNewObjectLayout_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1319 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IOleObject *LPOLEOBJECT;

typedef 
enum tagOLEGETMONIKER
    {	OLEGETMONIKER_ONLYIFTHERE	= 1,
	OLEGETMONIKER_FORCEASSIGN	= 2,
	OLEGETMONIKER_UNASSIGN	= 3,
	OLEGETMONIKER_TEMPFORUSER	= 4
    } 	OLEGETMONIKER;

typedef 
enum tagOLEWHICHMK
    {	OLEWHICHMK_CONTAINER	= 1,
	OLEWHICHMK_OBJREL	= 2,
	OLEWHICHMK_OBJFULL	= 3
    } 	OLEWHICHMK;

typedef 
enum tagUSERCLASSTYPE
    {	USERCLASSTYPE_FULL	= 1,
	USERCLASSTYPE_SHORT	= 2,
	USERCLASSTYPE_APPNAME	= 3
    } 	USERCLASSTYPE;

typedef 
enum tagOLEMISC
    {	OLEMISC_RECOMPOSEONRESIZE	= 0x1,
	OLEMISC_ONLYICONIC	= 0x2,
	OLEMISC_INSERTNOTREPLACE	= 0x4,
	OLEMISC_STATIC	= 0x8,
	OLEMISC_CANTLINKINSIDE	= 0x10,
	OLEMISC_CANLINKBYOLE1	= 0x20,
	OLEMISC_ISLINKOBJECT	= 0x40,
	OLEMISC_INSIDEOUT	= 0x80,
	OLEMISC_ACTIVATEWHENVISIBLE	= 0x100,
	OLEMISC_RENDERINGISDEVICEINDEPENDENT	= 0x200,
	OLEMISC_INVISIBLEATRUNTIME	= 0x400,
	OLEMISC_ALWAYSRUN	= 0x800,
	OLEMISC_ACTSLIKEBUTTON	= 0x1000,
	OLEMISC_ACTSLIKELABEL	= 0x2000,
	OLEMISC_NOUIACTIVATE	= 0x4000,
	OLEMISC_ALIGNABLE	= 0x8000,
	OLEMISC_SIMPLEFRAME	= 0x10000,
	OLEMISC_SETCLIENTSITEFIRST	= 0x20000,
	OLEMISC_IMEMODE	= 0x40000,
	OLEMISC_IGNOREACTIVATEWHENVISIBLE	= 0x80000,
	OLEMISC_WANTSTOMENUMERGE	= 0x100000,
	OLEMISC_SUPPORTSMULTILEVELUNDO	= 0x200000
    } 	OLEMISC;

typedef 
enum tagOLECLOSE
    {	OLECLOSE_SAVEIFDIRTY	= 0,
	OLECLOSE_NOSAVE	= 1,
	OLECLOSE_PROMPTSAVE	= 2
    } 	OLECLOSE;


extern const IID IID_IOleObject;























































































#line 1474 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleObjectVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleObject * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleObject * This);
        
        ULONG ( __stdcall *Release )( 
            IOleObject * This);
        
        HRESULT ( __stdcall *SetClientSite )( 
            IOleObject * This,
             IOleClientSite *pClientSite);
        
        HRESULT ( __stdcall *GetClientSite )( 
            IOleObject * This,
             IOleClientSite **ppClientSite);
        
        HRESULT ( __stdcall *SetHostNames )( 
            IOleObject * This,
             LPCOLESTR szContainerApp,
             LPCOLESTR szContainerObj);
        
        HRESULT ( __stdcall *Close )( 
            IOleObject * This,
             DWORD dwSaveOption);
        
        HRESULT ( __stdcall *SetMoniker )( 
            IOleObject * This,
             DWORD dwWhichMoniker,
             IMoniker *pmk);
        
        HRESULT ( __stdcall *GetMoniker )( 
            IOleObject * This,
             DWORD dwAssign,
             DWORD dwWhichMoniker,
             IMoniker **ppmk);
        
        HRESULT ( __stdcall *InitFromData )( 
            IOleObject * This,
             IDataObject *pDataObject,
             BOOL fCreation,
             DWORD dwReserved);
        
        HRESULT ( __stdcall *GetClipboardData )( 
            IOleObject * This,
             DWORD dwReserved,
             IDataObject **ppDataObject);
        
        HRESULT ( __stdcall *DoVerb )( 
            IOleObject * This,
             LONG iVerb,
             LPMSG lpmsg,
             IOleClientSite *pActiveSite,
             LONG lindex,
             HWND hwndParent,
             LPCRECT lprcPosRect);
        
        HRESULT ( __stdcall *EnumVerbs )( 
            IOleObject * This,
             IEnumOLEVERB **ppEnumOleVerb);
        
        HRESULT ( __stdcall *Update )( 
            IOleObject * This);
        
        HRESULT ( __stdcall *IsUpToDate )( 
            IOleObject * This);
        
        HRESULT ( __stdcall *GetUserClassID )( 
            IOleObject * This,
             CLSID *pClsid);
        
        HRESULT ( __stdcall *GetUserType )( 
            IOleObject * This,
             DWORD dwFormOfType,
             LPOLESTR *pszUserType);
        
        HRESULT ( __stdcall *SetExtent )( 
            IOleObject * This,
             DWORD dwDrawAspect,
             SIZEL *psizel);
        
        HRESULT ( __stdcall *GetExtent )( 
            IOleObject * This,
             DWORD dwDrawAspect,
             SIZEL *psizel);
        
        HRESULT ( __stdcall *Advise )( 
            IOleObject * This,
             IAdviseSink *pAdvSink,
             DWORD *pdwConnection);
        
        HRESULT ( __stdcall *Unadvise )( 
            IOleObject * This,
             DWORD dwConnection);
        
        HRESULT ( __stdcall *EnumAdvise )( 
            IOleObject * This,
             IEnumSTATDATA **ppenumAdvise);
        
        HRESULT ( __stdcall *GetMiscStatus )( 
            IOleObject * This,
             DWORD dwAspect,
             DWORD *pdwStatus);
        
        HRESULT ( __stdcall *SetColorScheme )( 
            IOleObject * This,
             LOGPALETTE *pLogpal);
        
        
    } IOleObjectVtbl;

    struct IOleObject
    {
         struct IOleObjectVtbl *lpVtbl;
    };

    
















































































#line 1679 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IOleObject_SetClientSite_Proxy( 
    IOleObject * This,
     IOleClientSite *pClientSite);


void __stdcall IOleObject_SetClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetClientSite_Proxy( 
    IOleObject * This,
     IOleClientSite **ppClientSite);


void __stdcall IOleObject_GetClientSite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetHostNames_Proxy( 
    IOleObject * This,
     LPCOLESTR szContainerApp,
     LPCOLESTR szContainerObj);


void __stdcall IOleObject_SetHostNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Close_Proxy( 
    IOleObject * This,
     DWORD dwSaveOption);


void __stdcall IOleObject_Close_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetMoniker_Proxy( 
    IOleObject * This,
     DWORD dwWhichMoniker,
     IMoniker *pmk);


void __stdcall IOleObject_SetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetMoniker_Proxy( 
    IOleObject * This,
     DWORD dwAssign,
     DWORD dwWhichMoniker,
     IMoniker **ppmk);


void __stdcall IOleObject_GetMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_InitFromData_Proxy( 
    IOleObject * This,
     IDataObject *pDataObject,
     BOOL fCreation,
     DWORD dwReserved);


void __stdcall IOleObject_InitFromData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetClipboardData_Proxy( 
    IOleObject * This,
     DWORD dwReserved,
     IDataObject **ppDataObject);


void __stdcall IOleObject_GetClipboardData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_DoVerb_Proxy( 
    IOleObject * This,
     LONG iVerb,
     LPMSG lpmsg,
     IOleClientSite *pActiveSite,
     LONG lindex,
     HWND hwndParent,
     LPCRECT lprcPosRect);


void __stdcall IOleObject_DoVerb_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_EnumVerbs_Proxy( 
    IOleObject * This,
     IEnumOLEVERB **ppEnumOleVerb);


void __stdcall IOleObject_EnumVerbs_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Update_Proxy( 
    IOleObject * This);


void __stdcall IOleObject_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_IsUpToDate_Proxy( 
    IOleObject * This);


void __stdcall IOleObject_IsUpToDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetUserClassID_Proxy( 
    IOleObject * This,
     CLSID *pClsid);


void __stdcall IOleObject_GetUserClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetUserType_Proxy( 
    IOleObject * This,
     DWORD dwFormOfType,
     LPOLESTR *pszUserType);


void __stdcall IOleObject_GetUserType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetExtent_Proxy( 
    IOleObject * This,
     DWORD dwDrawAspect,
     SIZEL *psizel);


void __stdcall IOleObject_SetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetExtent_Proxy( 
    IOleObject * This,
     DWORD dwDrawAspect,
     SIZEL *psizel);


void __stdcall IOleObject_GetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Advise_Proxy( 
    IOleObject * This,
     IAdviseSink *pAdvSink,
     DWORD *pdwConnection);


void __stdcall IOleObject_Advise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_Unadvise_Proxy( 
    IOleObject * This,
     DWORD dwConnection);


void __stdcall IOleObject_Unadvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_EnumAdvise_Proxy( 
    IOleObject * This,
     IEnumSTATDATA **ppenumAdvise);


void __stdcall IOleObject_EnumAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_GetMiscStatus_Proxy( 
    IOleObject * This,
     DWORD dwAspect,
     DWORD *pdwStatus);


void __stdcall IOleObject_GetMiscStatus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleObject_SetColorScheme_Proxy( 
    IOleObject * This,
     LOGPALETTE *pLogpal);


void __stdcall IOleObject_SetColorScheme_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1951 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef 
enum tagOLERENDER
    {	OLERENDER_NONE	= 0,
	OLERENDER_DRAW	= 1,
	OLERENDER_FORMAT	= 2,
	OLERENDER_ASIS	= 3
    } 	OLERENDER;

typedef OLERENDER *LPOLERENDER;

typedef struct tagOBJECTDESCRIPTOR
    {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
    } 	OBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;



extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
#line 1996 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"





 

typedef  IOleWindow *LPOLEWINDOW;


extern const IID IID_IOleWindow;















#line 2023 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleWindowVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleWindow * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleWindow * This);
        
        ULONG ( __stdcall *Release )( 
            IOleWindow * This);
        
         HRESULT ( __stdcall *GetWindow )( 
            IOleWindow * This,
             HWND *phwnd);
        
        HRESULT ( __stdcall *ContextSensitiveHelp )( 
            IOleWindow * This,
             BOOL fEnterMode);
        
        
    } IOleWindowVtbl;

    struct IOleWindow
    {
         struct IOleWindowVtbl *lpVtbl;
    };

    























#line 2080 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



 HRESULT __stdcall IOleWindow_GetWindow_Proxy( 
    IOleWindow * This,
     HWND *phwnd);


void __stdcall IOleWindow_GetWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleWindow_ContextSensitiveHelp_Proxy( 
    IOleWindow * This,
     BOOL fEnterMode);


void __stdcall IOleWindow_ContextSensitiveHelp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2109 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IOleLink *LPOLELINK;

typedef 
enum tagOLEUPDATE
    {	OLEUPDATE_ALWAYS	= 1,
	OLEUPDATE_ONCALL	= 3
    } 	OLEUPDATE;

typedef OLEUPDATE *LPOLEUPDATE;

typedef OLEUPDATE *POLEUPDATE;

typedef 
enum tagOLELINKBIND
    {	OLELINKBIND_EVENIFCLASSDIFF	= 1
    } 	OLELINKBIND;


extern const IID IID_IOleLink;










































#line 2179 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleLinkVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleLink * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleLink * This);
        
        ULONG ( __stdcall *Release )( 
            IOleLink * This);
        
        HRESULT ( __stdcall *SetUpdateOptions )( 
            IOleLink * This,
             DWORD dwUpdateOpt);
        
        HRESULT ( __stdcall *GetUpdateOptions )( 
            IOleLink * This,
             DWORD *pdwUpdateOpt);
        
        HRESULT ( __stdcall *SetSourceMoniker )( 
            IOleLink * This,
             IMoniker *pmk,
             const IID * const rclsid);
        
        HRESULT ( __stdcall *GetSourceMoniker )( 
            IOleLink * This,
             IMoniker **ppmk);
        
        HRESULT ( __stdcall *SetSourceDisplayName )( 
            IOleLink * This,
             LPCOLESTR pszStatusText);
        
        HRESULT ( __stdcall *GetSourceDisplayName )( 
            IOleLink * This,
             LPOLESTR *ppszDisplayName);
        
        HRESULT ( __stdcall *BindToSource )( 
            IOleLink * This,
             DWORD bindflags,
             IBindCtx *pbc);
        
        HRESULT ( __stdcall *BindIfRunning )( 
            IOleLink * This);
        
        HRESULT ( __stdcall *GetBoundSource )( 
            IOleLink * This,
             IUnknown **ppunk);
        
        HRESULT ( __stdcall *UnbindSource )( 
            IOleLink * This);
        
        HRESULT ( __stdcall *Update )( 
            IOleLink * This,
             IBindCtx *pbc);
        
        
    } IOleLinkVtbl;

    struct IOleLink
    {
         struct IOleLinkVtbl *lpVtbl;
    };

    


















































#line 2299 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IOleLink_SetUpdateOptions_Proxy( 
    IOleLink * This,
     DWORD dwUpdateOpt);


void __stdcall IOleLink_SetUpdateOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetUpdateOptions_Proxy( 
    IOleLink * This,
     DWORD *pdwUpdateOpt);


void __stdcall IOleLink_GetUpdateOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_SetSourceMoniker_Proxy( 
    IOleLink * This,
     IMoniker *pmk,
     const IID * const rclsid);


void __stdcall IOleLink_SetSourceMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetSourceMoniker_Proxy( 
    IOleLink * This,
     IMoniker **ppmk);


void __stdcall IOleLink_GetSourceMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_SetSourceDisplayName_Proxy( 
    IOleLink * This,
     LPCOLESTR pszStatusText);


void __stdcall IOleLink_SetSourceDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetSourceDisplayName_Proxy( 
    IOleLink * This,
     LPOLESTR *ppszDisplayName);


void __stdcall IOleLink_GetSourceDisplayName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_BindToSource_Proxy( 
    IOleLink * This,
     DWORD bindflags,
     IBindCtx *pbc);


void __stdcall IOleLink_BindToSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_BindIfRunning_Proxy( 
    IOleLink * This);


void __stdcall IOleLink_BindIfRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_GetBoundSource_Proxy( 
    IOleLink * This,
     IUnknown **ppunk);


void __stdcall IOleLink_GetBoundSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_UnbindSource_Proxy( 
    IOleLink * This);


void __stdcall IOleLink_UnbindSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleLink_Update_Proxy( 
    IOleLink * This,
     IBindCtx *pbc);


void __stdcall IOleLink_Update_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2436 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IOleItemContainer *LPOLEITEMCONTAINER;

typedef 
enum tagBINDSPEED
    {	BINDSPEED_INDEFINITE	= 1,
	BINDSPEED_MODERATE	= 2,
	BINDSPEED_IMMEDIATE	= 3
    } 	BINDSPEED;

typedef  
enum tagOLECONTF
    {	OLECONTF_EMBEDDINGS	= 1,
	OLECONTF_LINKS	= 2,
	OLECONTF_OTHERS	= 4,
	OLECONTF_ONLYUSER	= 8,
	OLECONTF_ONLYIFRUNNING	= 16
    } 	OLECONTF;


extern const IID IID_IOleItemContainer;

























#line 2490 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleItemContainerVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleItemContainer * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleItemContainer * This);
        
        ULONG ( __stdcall *Release )( 
            IOleItemContainer * This);
        
        HRESULT ( __stdcall *ParseDisplayName )( 
            IOleItemContainer * This,
             IBindCtx *pbc,
             LPOLESTR pszDisplayName,
             ULONG *pchEaten,
             IMoniker **ppmkOut);
        
        HRESULT ( __stdcall *EnumObjects )( 
            IOleItemContainer * This,
             DWORD grfFlags,
             IEnumUnknown **ppenum);
        
        HRESULT ( __stdcall *LockContainer )( 
            IOleItemContainer * This,
             BOOL fLock);
        
        HRESULT ( __stdcall *GetObjectA )( 
            IOleItemContainer * This,
             LPOLESTR pszItem,
             DWORD dwSpeedNeeded,
             IBindCtx *pbc,
             const IID * const riid,
             void **ppvObject);
        
        HRESULT ( __stdcall *GetObjectStorage )( 
            IOleItemContainer * This,
             LPOLESTR pszItem,
             IBindCtx *pbc,
             const IID * const riid,
             void **ppvStorage);
        
        HRESULT ( __stdcall *IsRunning )( 
            IOleItemContainer * This,
             LPOLESTR pszItem);
        
        
    } IOleItemContainerVtbl;

    struct IOleItemContainer
    {
         struct IOleItemContainerVtbl *lpVtbl;
    };

    





































#line 2588 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IOleItemContainer_GetObject_Proxy( 
    IOleItemContainer * This,
     LPOLESTR pszItem,
     DWORD dwSpeedNeeded,
     IBindCtx *pbc,
     const IID * const riid,
     void **ppvObject);


void __stdcall IOleItemContainer_GetObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleItemContainer_GetObjectStorage_Proxy( 
    IOleItemContainer * This,
     LPOLESTR pszItem,
     IBindCtx *pbc,
     const IID * const riid,
     void **ppvStorage);


void __stdcall IOleItemContainer_GetObjectStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleItemContainer_IsRunning_Proxy( 
    IOleItemContainer * This,
     LPOLESTR pszItem);


void __stdcall IOleItemContainer_IsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2636 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;

typedef RECT BORDERWIDTHS;

typedef LPRECT LPBORDERWIDTHS;

typedef LPCRECT LPCBORDERWIDTHS;


extern const IID IID_IOleInPlaceUIWindow;






















#line 2677 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleInPlaceUIWindowVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleInPlaceUIWindow * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleInPlaceUIWindow * This);
        
        ULONG ( __stdcall *Release )( 
            IOleInPlaceUIWindow * This);
        
         HRESULT ( __stdcall *GetWindow )( 
            IOleInPlaceUIWindow * This,
             HWND *phwnd);
        
        HRESULT ( __stdcall *ContextSensitiveHelp )( 
            IOleInPlaceUIWindow * This,
             BOOL fEnterMode);
        
         HRESULT ( __stdcall *GetBorder )( 
            IOleInPlaceUIWindow * This,
             LPRECT lprectBorder);
        
         HRESULT ( __stdcall *RequestBorderSpace )( 
            IOleInPlaceUIWindow * This,
             LPCBORDERWIDTHS pborderwidths);
        
         HRESULT ( __stdcall *SetBorderSpace )( 
            IOleInPlaceUIWindow * This,
             LPCBORDERWIDTHS pborderwidths);
        
        HRESULT ( __stdcall *SetActiveObject )( 
            IOleInPlaceUIWindow * This,
             IOleInPlaceActiveObject *pActiveObject,
             LPCOLESTR pszObjName);
        
        
    } IOleInPlaceUIWindowVtbl;

    struct IOleInPlaceUIWindow
    {
         struct IOleInPlaceUIWindowVtbl *lpVtbl;
    };

    




































#line 2764 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



 HRESULT __stdcall IOleInPlaceUIWindow_GetBorder_Proxy( 
    IOleInPlaceUIWindow * This,
     LPRECT lprectBorder);


void __stdcall IOleInPlaceUIWindow_GetBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceUIWindow_RequestBorderSpace_Proxy( 
    IOleInPlaceUIWindow * This,
     LPCBORDERWIDTHS pborderwidths);


void __stdcall IOleInPlaceUIWindow_RequestBorderSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceUIWindow_SetBorderSpace_Proxy( 
    IOleInPlaceUIWindow * This,
     LPCBORDERWIDTHS pborderwidths);


void __stdcall IOleInPlaceUIWindow_SetBorderSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceUIWindow_SetActiveObject_Proxy( 
    IOleInPlaceUIWindow * This,
     IOleInPlaceActiveObject *pActiveObject,
     LPCOLESTR pszObjName);


void __stdcall IOleInPlaceUIWindow_SetActiveObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2818 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;


extern const IID IID_IOleInPlaceActiveObject;


























#line 2857 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleInPlaceActiveObjectVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleInPlaceActiveObject * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleInPlaceActiveObject * This);
        
        ULONG ( __stdcall *Release )( 
            IOleInPlaceActiveObject * This);
        
         HRESULT ( __stdcall *GetWindow )( 
            IOleInPlaceActiveObject * This,
             HWND *phwnd);
        
        HRESULT ( __stdcall *ContextSensitiveHelp )( 
            IOleInPlaceActiveObject * This,
             BOOL fEnterMode);
        
         HRESULT ( __stdcall *TranslateAcceleratorA )( 
            IOleInPlaceActiveObject * This,
             LPMSG lpmsg);
        
         HRESULT ( __stdcall *OnFrameWindowActivate )( 
            IOleInPlaceActiveObject * This,
             BOOL fActivate);
        
         HRESULT ( __stdcall *OnDocWindowActivate )( 
            IOleInPlaceActiveObject * This,
             BOOL fActivate);
        
         HRESULT ( __stdcall *ResizeBorder )( 
            IOleInPlaceActiveObject * This,
             LPCRECT prcBorder,
             IOleInPlaceUIWindow *pUIWindow,
             BOOL fFrameWindow);
        
        HRESULT ( __stdcall *EnableModeless )( 
            IOleInPlaceActiveObject * This,
             BOOL fEnable);
        
        
    } IOleInPlaceActiveObjectVtbl;

    struct IOleInPlaceActiveObject
    {
         struct IOleInPlaceActiveObjectVtbl *lpVtbl;
    };

    







































#line 2952 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



 HRESULT __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy( 
    IOleInPlaceActiveObject * This);


void __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceActiveObject_OnFrameWindowActivate_Proxy( 
    IOleInPlaceActiveObject * This,
     BOOL fActivate);


void __stdcall IOleInPlaceActiveObject_OnFrameWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceActiveObject_OnDocWindowActivate_Proxy( 
    IOleInPlaceActiveObject * This,
     BOOL fActivate);


void __stdcall IOleInPlaceActiveObject_OnDocWindowActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Proxy( 
    IOleInPlaceActiveObject * This,
     LPCRECT prcBorder,
     const IID * const riid,
     IOleInPlaceUIWindow *pUIWindow,
     BOOL fFrameWindow);


void __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceActiveObject_EnableModeless_Proxy( 
    IOleInPlaceActiveObject * This,
     BOOL fEnable);


void __stdcall IOleInPlaceActiveObject_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3019 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IOleInPlaceFrame *LPOLEINPLACEFRAME;

typedef struct tagOIFI
    {
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
    } 	OLEINPLACEFRAMEINFO;

typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;

typedef struct tagOleMenuGroupWidths
    {
    LONG width[ 6 ];
    } 	OLEMENUGROUPWIDTHS;

typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;


extern const IID IID_IOleInPlaceFrame;































#line 3083 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleInPlaceFrameVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleInPlaceFrame * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleInPlaceFrame * This);
        
        ULONG ( __stdcall *Release )( 
            IOleInPlaceFrame * This);
        
         HRESULT ( __stdcall *GetWindow )( 
            IOleInPlaceFrame * This,
             HWND *phwnd);
        
        HRESULT ( __stdcall *ContextSensitiveHelp )( 
            IOleInPlaceFrame * This,
             BOOL fEnterMode);
        
         HRESULT ( __stdcall *GetBorder )( 
            IOleInPlaceFrame * This,
             LPRECT lprectBorder);
        
         HRESULT ( __stdcall *RequestBorderSpace )( 
            IOleInPlaceFrame * This,
             LPCBORDERWIDTHS pborderwidths);
        
         HRESULT ( __stdcall *SetBorderSpace )( 
            IOleInPlaceFrame * This,
             LPCBORDERWIDTHS pborderwidths);
        
        HRESULT ( __stdcall *SetActiveObject )( 
            IOleInPlaceFrame * This,
             IOleInPlaceActiveObject *pActiveObject,
             LPCOLESTR pszObjName);
        
        HRESULT ( __stdcall *InsertMenus )( 
            IOleInPlaceFrame * This,
             HMENU hmenuShared,
             LPOLEMENUGROUPWIDTHS lpMenuWidths);
        
         HRESULT ( __stdcall *SetMenu )( 
            IOleInPlaceFrame * This,
             HMENU hmenuShared,
             HOLEMENU holemenu,
             HWND hwndActiveObject);
        
        HRESULT ( __stdcall *RemoveMenus )( 
            IOleInPlaceFrame * This,
             HMENU hmenuShared);
        
         HRESULT ( __stdcall *SetStatusText )( 
            IOleInPlaceFrame * This,
             LPCOLESTR pszStatusText);
        
        HRESULT ( __stdcall *EnableModeless )( 
            IOleInPlaceFrame * This,
             BOOL fEnable);
        
        HRESULT ( __stdcall *TranslateAcceleratorA )( 
            IOleInPlaceFrame * This,
             LPMSG lpmsg,
             WORD wID);
        
        
    } IOleInPlaceFrameVtbl;

    struct IOleInPlaceFrame
    {
         struct IOleInPlaceFrameVtbl *lpVtbl;
    };

    























































#line 3217 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IOleInPlaceFrame_InsertMenus_Proxy( 
    IOleInPlaceFrame * This,
     HMENU hmenuShared,
     LPOLEMENUGROUPWIDTHS lpMenuWidths);


void __stdcall IOleInPlaceFrame_InsertMenus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceFrame_SetMenu_Proxy( 
    IOleInPlaceFrame * This,
     HMENU hmenuShared,
     HOLEMENU holemenu,
     HWND hwndActiveObject);


void __stdcall IOleInPlaceFrame_SetMenu_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceFrame_RemoveMenus_Proxy( 
    IOleInPlaceFrame * This,
     HMENU hmenuShared);


void __stdcall IOleInPlaceFrame_RemoveMenus_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceFrame_SetStatusText_Proxy( 
    IOleInPlaceFrame * This,
     LPCOLESTR pszStatusText);


void __stdcall IOleInPlaceFrame_SetStatusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceFrame_EnableModeless_Proxy( 
    IOleInPlaceFrame * This,
     BOOL fEnable);


void __stdcall IOleInPlaceFrame_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceFrame_TranslateAccelerator_Proxy( 
    IOleInPlaceFrame * This,
     LPMSG lpmsg,
     WORD wID);


void __stdcall IOleInPlaceFrame_TranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3298 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IOleInPlaceObject *LPOLEINPLACEOBJECT;


extern const IID IID_IOleInPlaceObject;



















#line 3330 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleInPlaceObjectVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleInPlaceObject * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleInPlaceObject * This);
        
        ULONG ( __stdcall *Release )( 
            IOleInPlaceObject * This);
        
         HRESULT ( __stdcall *GetWindow )( 
            IOleInPlaceObject * This,
             HWND *phwnd);
        
        HRESULT ( __stdcall *ContextSensitiveHelp )( 
            IOleInPlaceObject * This,
             BOOL fEnterMode);
        
        HRESULT ( __stdcall *InPlaceDeactivate )( 
            IOleInPlaceObject * This);
        
        HRESULT ( __stdcall *UIDeactivate )( 
            IOleInPlaceObject * This);
        
         HRESULT ( __stdcall *SetObjectRects )( 
            IOleInPlaceObject * This,
             LPCRECT lprcPosRect,
             LPCRECT lprcClipRect);
        
        HRESULT ( __stdcall *ReactivateAndUndo )( 
            IOleInPlaceObject * This);
        
        
    } IOleInPlaceObjectVtbl;

    struct IOleInPlaceObject
    {
         struct IOleInPlaceObjectVtbl *lpVtbl;
    };

    




































#line 3414 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IOleInPlaceObject_InPlaceDeactivate_Proxy( 
    IOleInPlaceObject * This);


void __stdcall IOleInPlaceObject_InPlaceDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceObject_UIDeactivate_Proxy( 
    IOleInPlaceObject * This);


void __stdcall IOleInPlaceObject_UIDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceObject_SetObjectRects_Proxy( 
    IOleInPlaceObject * This,
     LPCRECT lprcPosRect,
     LPCRECT lprcClipRect);


void __stdcall IOleInPlaceObject_SetObjectRects_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceObject_ReactivateAndUndo_Proxy( 
    IOleInPlaceObject * This);


void __stdcall IOleInPlaceObject_ReactivateAndUndo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3465 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IOleInPlaceSite *LPOLEINPLACESITE;


extern const IID IID_IOleInPlaceSite;





































#line 3515 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IOleInPlaceSiteVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IOleInPlaceSite * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IOleInPlaceSite * This);
        
        ULONG ( __stdcall *Release )( 
            IOleInPlaceSite * This);
        
         HRESULT ( __stdcall *GetWindow )( 
            IOleInPlaceSite * This,
             HWND *phwnd);
        
        HRESULT ( __stdcall *ContextSensitiveHelp )( 
            IOleInPlaceSite * This,
             BOOL fEnterMode);
        
        HRESULT ( __stdcall *CanInPlaceActivate )( 
            IOleInPlaceSite * This);
        
        HRESULT ( __stdcall *OnInPlaceActivate )( 
            IOleInPlaceSite * This);
        
        HRESULT ( __stdcall *OnUIActivate )( 
            IOleInPlaceSite * This);
        
        HRESULT ( __stdcall *GetWindowContext )( 
            IOleInPlaceSite * This,
             IOleInPlaceFrame **ppFrame,
             IOleInPlaceUIWindow **ppDoc,
             LPRECT lprcPosRect,
             LPRECT lprcClipRect,
             LPOLEINPLACEFRAMEINFO lpFrameInfo);
        
        HRESULT ( __stdcall *Scroll )( 
            IOleInPlaceSite * This,
             SIZE scrollExtant);
        
        HRESULT ( __stdcall *OnUIDeactivate )( 
            IOleInPlaceSite * This,
             BOOL fUndoable);
        
        HRESULT ( __stdcall *OnInPlaceDeactivate )( 
            IOleInPlaceSite * This);
        
        HRESULT ( __stdcall *DiscardUndoState )( 
            IOleInPlaceSite * This);
        
        HRESULT ( __stdcall *DeactivateAndUndo )( 
            IOleInPlaceSite * This);
        
        HRESULT ( __stdcall *OnPosRectChange )( 
            IOleInPlaceSite * This,
             LPCRECT lprcPosRect);
        
        
    } IOleInPlaceSiteVtbl;

    struct IOleInPlaceSite
    {
         struct IOleInPlaceSiteVtbl *lpVtbl;
    };

    






















































#line 3641 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IOleInPlaceSite_CanInPlaceActivate_Proxy( 
    IOleInPlaceSite * This);


void __stdcall IOleInPlaceSite_CanInPlaceActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnInPlaceActivate_Proxy( 
    IOleInPlaceSite * This);


void __stdcall IOleInPlaceSite_OnInPlaceActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnUIActivate_Proxy( 
    IOleInPlaceSite * This);


void __stdcall IOleInPlaceSite_OnUIActivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_GetWindowContext_Proxy( 
    IOleInPlaceSite * This,
     IOleInPlaceFrame **ppFrame,
     IOleInPlaceUIWindow **ppDoc,
     LPRECT lprcPosRect,
     LPRECT lprcClipRect,
     LPOLEINPLACEFRAMEINFO lpFrameInfo);


void __stdcall IOleInPlaceSite_GetWindowContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_Scroll_Proxy( 
    IOleInPlaceSite * This,
     SIZE scrollExtant);


void __stdcall IOleInPlaceSite_Scroll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnUIDeactivate_Proxy( 
    IOleInPlaceSite * This,
     BOOL fUndoable);


void __stdcall IOleInPlaceSite_OnUIDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnInPlaceDeactivate_Proxy( 
    IOleInPlaceSite * This);


void __stdcall IOleInPlaceSite_OnInPlaceDeactivate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_DiscardUndoState_Proxy( 
    IOleInPlaceSite * This);


void __stdcall IOleInPlaceSite_DiscardUndoState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_DeactivateAndUndo_Proxy( 
    IOleInPlaceSite * This);


void __stdcall IOleInPlaceSite_DeactivateAndUndo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IOleInPlaceSite_OnPosRectChange_Proxy( 
    IOleInPlaceSite * This,
     LPCRECT lprcPosRect);


void __stdcall IOleInPlaceSite_OnPosRectChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3764 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 


extern const IID IID_IContinue;











#line 3786 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IContinueVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IContinue * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IContinue * This);
        
        ULONG ( __stdcall *Release )( 
            IContinue * This);
        
        HRESULT ( __stdcall *FContinue )( 
            IContinue * This);
        
        
    } IContinueVtbl;

    struct IContinue
    {
         struct IContinueVtbl *lpVtbl;
    };

    




















#line 3835 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IContinue_FContinue_Proxy( 
    IContinue * This);


void __stdcall IContinue_FContinue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3851 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IViewObject *LPVIEWOBJECT;


extern const IID IID_IViewObject;

















































#line 3913 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IViewObjectVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IViewObject * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IViewObject * This);
        
        ULONG ( __stdcall *Release )( 
            IViewObject * This);
        
         HRESULT ( __stdcall *Draw )( 
            IViewObject * This,
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DVTARGETDEVICE *ptd,
             HDC hdcTargetDev,
             HDC hdcDraw,
             LPCRECTL lprcBounds,
             LPCRECTL lprcWBounds,
             BOOL ( __stdcall *pfnContinue )( 
                ULONG_PTR dwContinue),
             ULONG_PTR dwContinue);
        
         HRESULT ( __stdcall *GetColorSet )( 
            IViewObject * This,
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DVTARGETDEVICE *ptd,
             HDC hicTargetDev,
             LOGPALETTE **ppColorSet);
        
         HRESULT ( __stdcall *Freeze )( 
            IViewObject * This,
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DWORD *pdwFreeze);
        
        HRESULT ( __stdcall *Unfreeze )( 
            IViewObject * This,
             DWORD dwFreeze);
        
        HRESULT ( __stdcall *SetAdvise )( 
            IViewObject * This,
             DWORD aspects,
             DWORD advf,
             IAdviseSink *pAdvSink);
        
         HRESULT ( __stdcall *GetAdvise )( 
            IViewObject * This,
             DWORD *pAspects,
             DWORD *pAdvf,
             IAdviseSink **ppAdvSink);
        
        
    } IViewObjectVtbl;

    struct IViewObject
    {
         struct IViewObjectVtbl *lpVtbl;
    };

    



































#line 4020 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



 HRESULT __stdcall IViewObject_RemoteDraw_Proxy( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
     DVTARGETDEVICE *ptd,
     ULONG_PTR hdcTargetDev,
     ULONG_PTR hdcDraw,
     LPCRECTL lprcBounds,
     LPCRECTL lprcWBounds,
     IContinue *pContinue);


void __stdcall IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteGetColorSet_Proxy( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
     DVTARGETDEVICE *ptd,
     ULONG_PTR hicTargetDev,
     LOGPALETTE **ppColorSet);


void __stdcall IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteFreeze_Proxy( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
     DWORD *pdwFreeze);


void __stdcall IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObject_Unfreeze_Proxy( 
    IViewObject * This,
     DWORD dwFreeze);


void __stdcall IViewObject_Unfreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IViewObject_SetAdvise_Proxy( 
    IViewObject * This,
     DWORD aspects,
     DWORD advf,
     IAdviseSink *pAdvSink);


void __stdcall IViewObject_SetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteGetAdvise_Proxy( 
    IViewObject * This,
     DWORD *pAspects,
     DWORD *pAdvf,
     IAdviseSink **ppAdvSink);


void __stdcall IViewObject_RemoteGetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4117 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IViewObject2 *LPVIEWOBJECT2;


extern const IID IID_IViewObject2;















#line 4145 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IViewObject2Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IViewObject2 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IViewObject2 * This);
        
        ULONG ( __stdcall *Release )( 
            IViewObject2 * This);
        
         HRESULT ( __stdcall *Draw )( 
            IViewObject2 * This,
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DVTARGETDEVICE *ptd,
             HDC hdcTargetDev,
             HDC hdcDraw,
             LPCRECTL lprcBounds,
             LPCRECTL lprcWBounds,
             BOOL ( __stdcall *pfnContinue )( 
                ULONG_PTR dwContinue),
             ULONG_PTR dwContinue);
        
         HRESULT ( __stdcall *GetColorSet )( 
            IViewObject2 * This,
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DVTARGETDEVICE *ptd,
             HDC hicTargetDev,
             LOGPALETTE **ppColorSet);
        
         HRESULT ( __stdcall *Freeze )( 
            IViewObject2 * This,
             DWORD dwDrawAspect,
             LONG lindex,
             void *pvAspect,
             DWORD *pdwFreeze);
        
        HRESULT ( __stdcall *Unfreeze )( 
            IViewObject2 * This,
             DWORD dwFreeze);
        
        HRESULT ( __stdcall *SetAdvise )( 
            IViewObject2 * This,
             DWORD aspects,
             DWORD advf,
             IAdviseSink *pAdvSink);
        
         HRESULT ( __stdcall *GetAdvise )( 
            IViewObject2 * This,
             DWORD *pAspects,
             DWORD *pAdvf,
             IAdviseSink **ppAdvSink);
        
        HRESULT ( __stdcall *GetExtent )( 
            IViewObject2 * This,
             DWORD dwDrawAspect,
             LONG lindex,
             DVTARGETDEVICE *ptd,
             LPSIZEL lpsizel);
        
        
    } IViewObject2Vtbl;

    struct IViewObject2
    {
         struct IViewObject2Vtbl *lpVtbl;
    };

    







































#line 4263 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IViewObject2_GetExtent_Proxy( 
    IViewObject2 * This,
     DWORD dwDrawAspect,
     LONG lindex,
     DVTARGETDEVICE *ptd,
     LPSIZEL lpsizel);


void __stdcall IViewObject2_GetExtent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4283 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IDropSource *LPDROPSOURCE;


extern const IID IID_IDropSource;
















#line 4312 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IDropSourceVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IDropSource * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IDropSource * This);
        
        ULONG ( __stdcall *Release )( 
            IDropSource * This);
        
        HRESULT ( __stdcall *QueryContinueDrag )( 
            IDropSource * This,
             BOOL fEscapePressed,
             DWORD grfKeyState);
        
        HRESULT ( __stdcall *GiveFeedback )( 
            IDropSource * This,
             DWORD dwEffect);
        
        
    } IDropSourceVtbl;

    struct IDropSource
    {
         struct IDropSourceVtbl *lpVtbl;
    };

    























#line 4370 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IDropSource_QueryContinueDrag_Proxy( 
    IDropSource * This,
     BOOL fEscapePressed,
     DWORD grfKeyState);


void __stdcall IDropSource_QueryContinueDrag_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropSource_GiveFeedback_Proxy( 
    IDropSource * This,
     DWORD dwEffect);


void __stdcall IDropSource_GiveFeedback_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4400 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IDropTarget *LPDROPTARGET;


































extern const IID IID_IDropTarget;




























#line 4473 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IDropTargetVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IDropTarget * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IDropTarget * This);
        
        ULONG ( __stdcall *Release )( 
            IDropTarget * This);
        
        HRESULT ( __stdcall *DragEnter )( 
            IDropTarget * This,
             IDataObject *pDataObj,
             DWORD grfKeyState,
             POINTL pt,
             DWORD *pdwEffect);
        
        HRESULT ( __stdcall *DragOver )( 
            IDropTarget * This,
             DWORD grfKeyState,
             POINTL pt,
             DWORD *pdwEffect);
        
        HRESULT ( __stdcall *DragLeave )( 
            IDropTarget * This);
        
        HRESULT ( __stdcall *Drop )( 
            IDropTarget * This,
             IDataObject *pDataObj,
             DWORD grfKeyState,
             POINTL pt,
             DWORD *pdwEffect);
        
        
    } IDropTargetVtbl;

    struct IDropTarget
    {
         struct IDropTargetVtbl *lpVtbl;
    };

    





























#line 4551 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



HRESULT __stdcall IDropTarget_DragEnter_Proxy( 
    IDropTarget * This,
     IDataObject *pDataObj,
     DWORD grfKeyState,
     POINTL pt,
     DWORD *pdwEffect);


void __stdcall IDropTarget_DragEnter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropTarget_DragOver_Proxy( 
    IDropTarget * This,
     DWORD grfKeyState,
     POINTL pt,
     DWORD *pdwEffect);


void __stdcall IDropTarget_DragOver_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropTarget_DragLeave_Proxy( 
    IDropTarget * This);


void __stdcall IDropTarget_DragLeave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDropTarget_Drop_Proxy( 
    IDropTarget * This,
     IDataObject *pDataObj,
     DWORD grfKeyState,
     POINTL pt,
     DWORD *pdwEffect);


void __stdcall IDropTarget_Drop_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4611 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"






 

typedef  IEnumOLEVERB *LPENUMOLEVERB;

typedef struct tagOLEVERB
    {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
    } 	OLEVERB;

typedef struct tagOLEVERB *LPOLEVERB;

typedef  
enum tagOLEVERBATTRIB
    {	OLEVERBATTRIB_NEVERDIRTIES	= 1,
	OLEVERBATTRIB_ONCONTAINERMENU	= 2
    } 	OLEVERBATTRIB;


extern const IID IID_IEnumOLEVERB;






















#line 4662 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"

    typedef struct IEnumOLEVERBVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IEnumOLEVERB * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IEnumOLEVERB * This);
        
        ULONG ( __stdcall *Release )( 
            IEnumOLEVERB * This);
        
         HRESULT ( __stdcall *Next )( 
            IEnumOLEVERB * This,
             ULONG celt,
             LPOLEVERB rgelt,
             ULONG *pceltFetched);
        
        HRESULT ( __stdcall *Skip )( 
            IEnumOLEVERB * This,
             ULONG celt);
        
        HRESULT ( __stdcall *Reset )( 
            IEnumOLEVERB * This);
        
        HRESULT ( __stdcall *Clone )( 
            IEnumOLEVERB * This,
             IEnumOLEVERB **ppenum);
        
        
    } IEnumOLEVERBVtbl;

    struct IEnumOLEVERB
    {
         struct IEnumOLEVERBVtbl *lpVtbl;
    };

    





























#line 4734 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



 HRESULT __stdcall IEnumOLEVERB_RemoteNext_Proxy( 
    IEnumOLEVERB * This,
     ULONG celt,
     LPOLEVERB rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOLEVERB_Skip_Proxy( 
    IEnumOLEVERB * This,
     ULONG celt);


void __stdcall IEnumOLEVERB_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOLEVERB_Reset_Proxy( 
    IEnumOLEVERB * This);


void __stdcall IEnumOLEVERB_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumOLEVERB_Clone_Proxy( 
    IEnumOLEVERB * This,
     IEnumOLEVERB **ppenum);


void __stdcall IEnumOLEVERB_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4788 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"




unsigned long             __stdcall  CLIPFORMAT_UserSize(     unsigned long *, unsigned long            , CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserMarshal(  unsigned long *, unsigned char *, CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserUnmarshal(unsigned long *, unsigned char *, CLIPFORMAT * ); 
void                      __stdcall  CLIPFORMAT_UserFree(     unsigned long *, CLIPFORMAT * ); 

unsigned long             __stdcall  HACCEL_UserSize(     unsigned long *, unsigned long            , HACCEL * ); 
unsigned char * __stdcall  HACCEL_UserMarshal(  unsigned long *, unsigned char *, HACCEL * ); 
unsigned char * __stdcall  HACCEL_UserUnmarshal(unsigned long *, unsigned char *, HACCEL * ); 
void                      __stdcall  HACCEL_UserFree(     unsigned long *, HACCEL * ); 

unsigned long             __stdcall  HGLOBAL_UserSize(     unsigned long *, unsigned long            , HGLOBAL * ); 
unsigned char * __stdcall  HGLOBAL_UserMarshal(  unsigned long *, unsigned char *, HGLOBAL * ); 
unsigned char * __stdcall  HGLOBAL_UserUnmarshal(unsigned long *, unsigned char *, HGLOBAL * ); 
void                      __stdcall  HGLOBAL_UserFree(     unsigned long *, HGLOBAL * ); 

unsigned long             __stdcall  HMENU_UserSize(     unsigned long *, unsigned long            , HMENU * ); 
unsigned char * __stdcall  HMENU_UserMarshal(  unsigned long *, unsigned char *, HMENU * ); 
unsigned char * __stdcall  HMENU_UserUnmarshal(unsigned long *, unsigned char *, HMENU * ); 
void                      __stdcall  HMENU_UserFree(     unsigned long *, HMENU * ); 

unsigned long             __stdcall  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __stdcall  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __stdcall  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __stdcall  HWND_UserFree(     unsigned long *, HWND * ); 

unsigned long             __stdcall  STGMEDIUM_UserSize(     unsigned long *, unsigned long            , STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserMarshal(  unsigned long *, unsigned char *, STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserUnmarshal(unsigned long *, unsigned char *, STGMEDIUM * ); 
void                      __stdcall  STGMEDIUM_UserFree(     unsigned long *, STGMEDIUM * ); 

 HRESULT __stdcall IOleCache2_UpdateCache_Proxy( 
    IOleCache2 * This,
     LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     LPVOID pReserved);


 HRESULT __stdcall IOleCache2_UpdateCache_Stub( 
    IOleCache2 * This,
     LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     LONG_PTR pReserved);

 HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Proxy( 
    IOleInPlaceActiveObject * This,
     LPMSG lpmsg);


 HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Stub( 
    IOleInPlaceActiveObject * This);

 HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Proxy( 
    IOleInPlaceActiveObject * This,
     LPCRECT prcBorder,
     IOleInPlaceUIWindow *pUIWindow,
     BOOL fFrameWindow);


 HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Stub( 
    IOleInPlaceActiveObject * This,
     LPCRECT prcBorder,
     const IID * const riid,
     IOleInPlaceUIWindow *pUIWindow,
     BOOL fFrameWindow);

 HRESULT __stdcall IViewObject_Draw_Proxy( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void *pvAspect,
     DVTARGETDEVICE *ptd,
     HDC hdcTargetDev,
     HDC hdcDraw,
     LPCRECTL lprcBounds,
     LPCRECTL lprcWBounds,
     BOOL ( __stdcall *pfnContinue )( 
        ULONG_PTR dwContinue),
     ULONG_PTR dwContinue);


 HRESULT __stdcall IViewObject_Draw_Stub( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
     DVTARGETDEVICE *ptd,
     ULONG_PTR hdcTargetDev,
     ULONG_PTR hdcDraw,
     LPCRECTL lprcBounds,
     LPCRECTL lprcWBounds,
     IContinue *pContinue);

 HRESULT __stdcall IViewObject_GetColorSet_Proxy( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void *pvAspect,
     DVTARGETDEVICE *ptd,
     HDC hicTargetDev,
     LOGPALETTE **ppColorSet);


 HRESULT __stdcall IViewObject_GetColorSet_Stub( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
     DVTARGETDEVICE *ptd,
     ULONG_PTR hicTargetDev,
     LOGPALETTE **ppColorSet);

 HRESULT __stdcall IViewObject_Freeze_Proxy( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     void *pvAspect,
     DWORD *pdwFreeze);


 HRESULT __stdcall IViewObject_Freeze_Stub( 
    IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
     DWORD *pdwFreeze);

 HRESULT __stdcall IViewObject_GetAdvise_Proxy( 
    IViewObject * This,
     DWORD *pAspects,
     DWORD *pAdvf,
     IAdviseSink **ppAdvSink);


 HRESULT __stdcall IViewObject_GetAdvise_Stub( 
    IViewObject * This,
     DWORD *pAspects,
     DWORD *pAdvf,
     IAdviseSink **ppAdvSink);

 HRESULT __stdcall IEnumOLEVERB_Next_Proxy( 
    IEnumOLEVERB * This,
     ULONG celt,
     LPOLEVERB rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumOLEVERB_Next_Stub( 
    IEnumOLEVERB * This,
     ULONG celt,
     LPOLEVERB rgelt,
     ULONG *pceltFetched);









#line 4953 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oleidl.h"



#line 277 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"
#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\servprov.h"





 










#pragma warning( disable: 4049 )  

















#line 36 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\servprov.h"





#pragma once
#line 43 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\servprov.h"

 



typedef struct IServiceProvider IServiceProvider;
#line 50 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\servprov.h"









void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 












#pragma comment(lib,"uuid.lib")







extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_v0_0_s_ifspec;





 

typedef  IServiceProvider *LPSERVICEPROVIDER;


































#line 129 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\servprov.h"

extern const IID IID_IServiceProvider;














#line 146 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\servprov.h"

    typedef struct IServiceProviderVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IServiceProvider * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IServiceProvider * This);
        
        ULONG ( __stdcall *Release )( 
            IServiceProvider * This);
        
         HRESULT ( __stdcall *QueryService )( 
            IServiceProvider * This,
             const GUID * const guidService,
             const IID * const riid,
             void **ppvObject);
        
        
    } IServiceProviderVtbl;

    struct IServiceProvider
    {
         struct IServiceProviderVtbl *lpVtbl;
    };

    




















#line 198 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\servprov.h"



 HRESULT __stdcall IServiceProvider_RemoteQueryService_Proxy( 
    IServiceProvider * This,
     const GUID * const guidService,
     const IID * const riid,
     IUnknown **ppvObject);


void __stdcall IServiceProvider_RemoteQueryService_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 217 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\servprov.h"



 

#line 223 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\servprov.h"


extern RPC_IF_HANDLE __MIDL_itf_servprov_0093_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0093_v0_0_s_ifspec;



 HRESULT __stdcall IServiceProvider_QueryService_Proxy( 
    IServiceProvider * This,
     const GUID * const guidService,
     const IID * const riid,
     void **ppvObject);


 HRESULT __stdcall IServiceProvider_QueryService_Stub( 
    IServiceProvider * This,
     const GUID * const guidService,
     const IID * const riid,
     IUnknown **ppvObject);









#line 252 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\servprov.h"


#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"
#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"





 










#pragma warning( disable: 4049 )  














#pragma once
#line 34 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

 



typedef struct IXMLDOMImplementation IXMLDOMImplementation;
#line 41 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMNode IXMLDOMNode;
#line 47 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;
#line 53 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMDocument IXMLDOMDocument;
#line 59 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMNodeList IXMLDOMNodeList;
#line 65 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;
#line 71 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMCharacterData IXMLDOMCharacterData;
#line 77 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMAttribute IXMLDOMAttribute;
#line 83 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMElement IXMLDOMElement;
#line 89 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMText IXMLDOMText;
#line 95 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMComment IXMLDOMComment;
#line 101 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;
#line 107 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;
#line 113 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;
#line 119 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMNotation IXMLDOMNotation;
#line 125 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMEntity IXMLDOMEntity;
#line 131 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;
#line 137 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDOMParseError IXMLDOMParseError;
#line 143 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXTLRuntime IXTLRuntime;
#line 149 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct XMLDOMDocumentEvents XMLDOMDocumentEvents;
#line 155 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"








typedef struct DOMDocument DOMDocument;
#line 165 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

#line 167 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"








typedef struct DOMFreeThreadedDocument DOMFreeThreadedDocument;
#line 177 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

#line 179 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLHttpRequest IXMLHttpRequest;
#line 185 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"








typedef struct XMLHTTPRequest XMLHTTPRequest;
#line 195 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

#line 197 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDSOControl IXMLDSOControl;
#line 203 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"








typedef struct XMLDSOControl XMLDSOControl;
#line 213 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

#line 215 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLElementCollection IXMLElementCollection;
#line 221 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDocument IXMLDocument;
#line 227 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLDocument2 IXMLDocument2;
#line 233 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLElement IXMLElement;
#line 239 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLElement2 IXMLElement2;
#line 245 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLAttribute IXMLAttribute;
#line 251 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




typedef struct IXMLError IXMLError;
#line 257 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"








typedef struct XMLDocument XMLDocument;
#line 267 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

#line 269 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"





#line 1 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"





 










#pragma warning( disable: 4049 )  

















#line 36 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"





#pragma once
#line 43 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

 



typedef struct ICreateTypeInfo ICreateTypeInfo;
#line 50 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct ICreateTypeInfo2 ICreateTypeInfo2;
#line 56 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct ICreateTypeLib ICreateTypeLib;
#line 62 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct ICreateTypeLib2 ICreateTypeLib2;
#line 68 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct IDispatch IDispatch;
#line 74 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct IEnumVARIANT IEnumVARIANT;
#line 80 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct ITypeComp ITypeComp;
#line 86 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct ITypeInfo ITypeInfo;
#line 92 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct ITypeInfo2 ITypeInfo2;
#line 98 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct ITypeLib ITypeLib;
#line 104 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct ITypeLib2 ITypeLib2;
#line 110 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct ITypeChangeEvents ITypeChangeEvents;
#line 116 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct IErrorInfo IErrorInfo;
#line 122 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct ICreateErrorInfo ICreateErrorInfo;
#line 128 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct ISupportErrorInfo ISupportErrorInfo;
#line 134 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct ITypeFactory ITypeFactory;
#line 140 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct ITypeMarshal ITypeMarshal;
#line 146 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct IRecordInfo IRecordInfo;
#line 152 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct IErrorLog IErrorLog;
#line 158 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




typedef struct IPropertyBag IPropertyBag;
#line 164 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"









void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 









#pragma warning(push)
#line 189 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"
#pragma warning(disable:4201)    
#line 191 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

#pragma once
#line 194 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"




















extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_v0_0_s_ifspec;





 

typedef CY CURRENCY;

typedef struct tagSAFEARRAYBOUND
    {
    ULONG cElements;
    LONG lLbound;
    } 	SAFEARRAYBOUND;

typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;


typedef  struct _wireVARIANT *wireVARIANT;

typedef  struct _wireBRECORD *wireBRECORD;

typedef struct _wireSAFEARR_BSTR
    {
    ULONG Size;
     wireBSTR *aBstr;
    } 	SAFEARR_BSTR;

typedef struct _wireSAFEARR_UNKNOWN
    {
    ULONG Size;
     IUnknown **apUnknown;
    } 	SAFEARR_UNKNOWN;

typedef struct _wireSAFEARR_DISPATCH
    {
    ULONG Size;
     IDispatch **apDispatch;
    } 	SAFEARR_DISPATCH;

typedef struct _wireSAFEARR_VARIANT
    {
    ULONG Size;
     wireVARIANT *aVariant;
    } 	SAFEARR_VARIANT;

typedef struct _wireSAFEARR_BRECORD
    {
    ULONG Size;
     wireBRECORD *aRecord;
    } 	SAFEARR_BRECORD;

typedef struct _wireSAFEARR_HAVEIID
    {
    ULONG Size;
     IUnknown **apUnknown;
    IID iid;
    } 	SAFEARR_HAVEIID;

typedef  
enum tagSF_TYPE
    {	SF_ERROR	= VT_ERROR,
	SF_I1	= VT_I1,
	SF_I2	= VT_I2,
	SF_I4	= VT_I4,
	SF_I8	= VT_I8,
	SF_BSTR	= VT_BSTR,
	SF_UNKNOWN	= VT_UNKNOWN,
	SF_DISPATCH	= VT_DISPATCH,
	SF_VARIANT	= VT_VARIANT,
	SF_RECORD	= VT_RECORD,
	SF_HAVEIID	= VT_UNKNOWN | VT_RESERVED
    } 	SF_TYPE;

typedef struct _wireSAFEARRAY_UNION
    {
    ULONG sfType;
      union __MIDL_IOleAutomationTypes_0001
        {
         SAFEARR_BSTR BstrStr;
         SAFEARR_UNKNOWN UnknownStr;
         SAFEARR_DISPATCH DispatchStr;
         SAFEARR_VARIANT VariantStr;
         SAFEARR_BRECORD RecordStr;
         SAFEARR_HAVEIID HaveIidStr;
         BYTE_SIZEDARR ByteStr;
         WORD_SIZEDARR WordStr;
         DWORD_SIZEDARR LongStr;
         HYPER_SIZEDARR HyperStr;
        } 	u;
    } 	SAFEARRAYUNION;

typedef  struct _wireSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
     SAFEARRAYBOUND rgsabound[ 1 ];
    } 	*wireSAFEARRAY;

typedef  wireSAFEARRAY *wirePSAFEARRAY;

typedef struct tagSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[ 1 ];
    } 	SAFEARRAY;

typedef  SAFEARRAY *LPSAFEARRAY;


















































































#line 414 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






#line 421 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"
typedef  struct tagVARIANT VARIANT;

struct tagVARIANT
    {
    union 
        {
        struct 
            {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union 
                {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                
                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                LONGLONG *pllVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;
                
                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                VARIANT *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                ULONGLONG *pullVal;
                INT *pintVal;
                UINT *puintVal;
                struct 
                    {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                    } 	;
                } 	;
            } 	;
        DECIMAL decVal;
        } 	;
    } ;
typedef VARIANT *LPVARIANT;

typedef VARIANT VARIANTARG;

typedef VARIANT *LPVARIANTARG;


struct _wireBRECORD
    {
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
     byte *pRecord;
    } ;
struct _wireVARIANT
    {
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
     union 
        {
         LONGLONG llVal;
         LONG lVal;
         BYTE bVal;
         SHORT iVal;
         FLOAT fltVal;
         DOUBLE dblVal;
         VARIANT_BOOL boolVal;
         SCODE scode;
         CY cyVal;
         DATE date;
         wireBSTR bstrVal;
         IUnknown *punkVal;
         IDispatch *pdispVal;
         wirePSAFEARRAY parray;
         wireBRECORD brecVal;
         BYTE *pbVal;
         SHORT *piVal;
         LONG *plVal;
         LONGLONG *pllVal;
         FLOAT *pfltVal;
         DOUBLE *pdblVal;
         VARIANT_BOOL *pboolVal;
         SCODE *pscode;
         CY *pcyVal;
         DATE *pdate;
         wireBSTR *pbstrVal;
         IUnknown **ppunkVal;
         IDispatch **ppdispVal;
         wirePSAFEARRAY *pparray;
         wireVARIANT *pvarVal;
         CHAR cVal;
         USHORT uiVal;
         ULONG ulVal;
         ULONGLONG ullVal;
         INT intVal;
         UINT uintVal;
         DECIMAL decVal;
         DECIMAL *pdecVal;
         CHAR *pcVal;
         USHORT *puiVal;
         ULONG *pulVal;
         ULONGLONG *pullVal;
         INT *pintVal;
         UINT *puintVal;
           
           
        } 	;
    } ;
typedef LONG DISPID;

typedef DISPID MEMBERID;

typedef DWORD HREFTYPE;

typedef  
enum tagTYPEKIND
    {	TKIND_ENUM	= 0,
	TKIND_RECORD	= TKIND_ENUM + 1,
	TKIND_MODULE	= TKIND_RECORD + 1,
	TKIND_INTERFACE	= TKIND_MODULE + 1,
	TKIND_DISPATCH	= TKIND_INTERFACE + 1,
	TKIND_COCLASS	= TKIND_DISPATCH + 1,
	TKIND_ALIAS	= TKIND_COCLASS + 1,
	TKIND_UNION	= TKIND_ALIAS + 1,
	TKIND_MAX	= TKIND_UNION + 1
    } 	TYPEKIND;

typedef struct tagTYPEDESC
    {
     union 
        {
         struct tagTYPEDESC *lptdesc;
         struct tagARRAYDESC *lpadesc;
         HREFTYPE hreftype;
           
        } 	;
    VARTYPE vt;
    } 	TYPEDESC;

typedef struct tagARRAYDESC
    {
    TYPEDESC tdescElem;
    USHORT cDims;
     SAFEARRAYBOUND rgbounds[ 1 ];
    } 	ARRAYDESC;

typedef struct tagPARAMDESCEX
    {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
    } 	PARAMDESCEX;

typedef struct tagPARAMDESCEX *LPPARAMDESCEX;

typedef struct tagPARAMDESC
    {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
    } 	PARAMDESC;

typedef struct tagPARAMDESC *LPPARAMDESC;

















typedef struct tagIDLDESC
    {
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
    } 	IDLDESC;

typedef struct tagIDLDESC *LPIDLDESC;




















#line 660 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

typedef struct tagELEMDESC {
    TYPEDESC tdesc;             
    union {
        IDLDESC idldesc;        
        PARAMDESC paramdesc;    
    };
} ELEMDESC, * LPELEMDESC;

#line 670 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

typedef struct tagTYPEATTR
    {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
    } 	TYPEATTR;

typedef struct tagTYPEATTR *LPTYPEATTR;

typedef struct tagDISPPARAMS
    {
     VARIANTARG *rgvarg;
     DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
    } 	DISPPARAMS;


















#line 721 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

typedef struct tagEXCEPINFO {
    WORD  wCode;
    WORD  wReserved;
    BSTR  bstrSource;
    BSTR  bstrDescription;
    BSTR  bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);
    SCODE scode;
} EXCEPINFO, * LPEXCEPINFO;

#line 735 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

typedef  
enum tagCALLCONV
    {	CC_FASTCALL	= 0,
	CC_CDECL	= 1,
	CC_MSCPASCAL	= CC_CDECL + 1,
	CC_PASCAL	= CC_MSCPASCAL,
	CC_MACPASCAL	= CC_PASCAL + 1,
	CC_STDCALL	= CC_MACPASCAL + 1,
	CC_FPFASTCALL	= CC_STDCALL + 1,
	CC_SYSCALL	= CC_FPFASTCALL + 1,
	CC_MPWCDECL	= CC_SYSCALL + 1,
	CC_MPWPASCAL	= CC_MPWCDECL + 1,
	CC_MAX	= CC_MPWPASCAL + 1
    } 	CALLCONV;

typedef  
enum tagFUNCKIND
    {	FUNC_VIRTUAL	= 0,
	FUNC_PUREVIRTUAL	= FUNC_VIRTUAL + 1,
	FUNC_NONVIRTUAL	= FUNC_PUREVIRTUAL + 1,
	FUNC_STATIC	= FUNC_NONVIRTUAL + 1,
	FUNC_DISPATCH	= FUNC_STATIC + 1
    } 	FUNCKIND;

typedef  
enum tagINVOKEKIND
    {	INVOKE_FUNC	= 1,
	INVOKE_PROPERTYGET	= 2,
	INVOKE_PROPERTYPUT	= 4,
	INVOKE_PROPERTYPUTREF	= 8
    } 	INVOKEKIND;

typedef struct tagFUNCDESC
    {
    MEMBERID memid;
     SCODE *lprgscode;
     ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
    } 	FUNCDESC;

typedef struct tagFUNCDESC *LPFUNCDESC;

typedef  
enum tagVARKIND
    {	VAR_PERINSTANCE	= 0,
	VAR_STATIC	= VAR_PERINSTANCE + 1,
	VAR_CONST	= VAR_STATIC + 1,
	VAR_DISPATCH	= VAR_CONST + 1
    } 	VARKIND;









typedef struct tagVARDESC
    {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
     union 
        {
         ULONG oInst;
         VARIANT *lpvarValue;
        } 	;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
    } 	VARDESC;

typedef struct tagVARDESC *LPVARDESC;

typedef 
enum tagTYPEFLAGS
    {	TYPEFLAG_FAPPOBJECT	= 0x1,
	TYPEFLAG_FCANCREATE	= 0x2,
	TYPEFLAG_FLICENSED	= 0x4,
	TYPEFLAG_FPREDECLID	= 0x8,
	TYPEFLAG_FHIDDEN	= 0x10,
	TYPEFLAG_FCONTROL	= 0x20,
	TYPEFLAG_FDUAL	= 0x40,
	TYPEFLAG_FNONEXTENSIBLE	= 0x80,
	TYPEFLAG_FOLEAUTOMATION	= 0x100,
	TYPEFLAG_FRESTRICTED	= 0x200,
	TYPEFLAG_FAGGREGATABLE	= 0x400,
	TYPEFLAG_FREPLACEABLE	= 0x800,
	TYPEFLAG_FDISPATCHABLE	= 0x1000,
	TYPEFLAG_FREVERSEBIND	= 0x2000,
	TYPEFLAG_FPROXY	= 0x4000
    } 	TYPEFLAGS;

typedef 
enum tagFUNCFLAGS
    {	FUNCFLAG_FRESTRICTED	= 0x1,
	FUNCFLAG_FSOURCE	= 0x2,
	FUNCFLAG_FBINDABLE	= 0x4,
	FUNCFLAG_FREQUESTEDIT	= 0x8,
	FUNCFLAG_FDISPLAYBIND	= 0x10,
	FUNCFLAG_FDEFAULTBIND	= 0x20,
	FUNCFLAG_FHIDDEN	= 0x40,
	FUNCFLAG_FUSESGETLASTERROR	= 0x80,
	FUNCFLAG_FDEFAULTCOLLELEM	= 0x100,
	FUNCFLAG_FUIDEFAULT	= 0x200,
	FUNCFLAG_FNONBROWSABLE	= 0x400,
	FUNCFLAG_FREPLACEABLE	= 0x800,
	FUNCFLAG_FIMMEDIATEBIND	= 0x1000
    } 	FUNCFLAGS;

typedef 
enum tagVARFLAGS
    {	VARFLAG_FREADONLY	= 0x1,
	VARFLAG_FSOURCE	= 0x2,
	VARFLAG_FBINDABLE	= 0x4,
	VARFLAG_FREQUESTEDIT	= 0x8,
	VARFLAG_FDISPLAYBIND	= 0x10,
	VARFLAG_FDEFAULTBIND	= 0x20,
	VARFLAG_FHIDDEN	= 0x40,
	VARFLAG_FRESTRICTED	= 0x80,
	VARFLAG_FDEFAULTCOLLELEM	= 0x100,
	VARFLAG_FUIDEFAULT	= 0x200,
	VARFLAG_FNONBROWSABLE	= 0x400,
	VARFLAG_FREPLACEABLE	= 0x800,
	VARFLAG_FIMMEDIATEBIND	= 0x1000
    } 	VARFLAGS;

typedef  struct tagCLEANLOCALSTORAGE
    {
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
    } 	CLEANLOCALSTORAGE;

typedef struct tagCUSTDATAITEM
    {
    GUID guid;
    VARIANTARG varValue;
    } 	CUSTDATAITEM;

typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;

typedef struct tagCUSTDATA
    {
    DWORD cCustData;
     LPCUSTDATAITEM prgCustData;
    } 	CUSTDATA;

typedef struct tagCUSTDATA *LPCUSTDATA;



extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
#line 899 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"





 

typedef  ICreateTypeInfo *LPCREATETYPEINFO;


extern const IID IID_ICreateTypeInfo;





























































































#line 1004 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ICreateTypeInfoVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ICreateTypeInfo * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ICreateTypeInfo * This);
        
        ULONG ( __stdcall *Release )( 
            ICreateTypeInfo * This);
        
        HRESULT ( __stdcall *SetGuid )( 
            ICreateTypeInfo * This,
             const GUID * const guid);
        
        HRESULT ( __stdcall *SetTypeFlags )( 
            ICreateTypeInfo * This,
             UINT uTypeFlags);
        
        HRESULT ( __stdcall *SetDocString )( 
            ICreateTypeInfo * This,
             LPOLESTR pStrDoc);
        
        HRESULT ( __stdcall *SetHelpContext )( 
            ICreateTypeInfo * This,
             DWORD dwHelpContext);
        
        HRESULT ( __stdcall *SetVersion )( 
            ICreateTypeInfo * This,
             WORD wMajorVerNum,
             WORD wMinorVerNum);
        
        HRESULT ( __stdcall *AddRefTypeInfo )( 
            ICreateTypeInfo * This,
             ITypeInfo *pTInfo,
             HREFTYPE *phRefType);
        
        HRESULT ( __stdcall *AddFuncDesc )( 
            ICreateTypeInfo * This,
             UINT index,
             FUNCDESC *pFuncDesc);
        
        HRESULT ( __stdcall *AddImplType )( 
            ICreateTypeInfo * This,
             UINT index,
             HREFTYPE hRefType);
        
        HRESULT ( __stdcall *SetImplTypeFlags )( 
            ICreateTypeInfo * This,
             UINT index,
             INT implTypeFlags);
        
        HRESULT ( __stdcall *SetAlignment )( 
            ICreateTypeInfo * This,
             WORD cbAlignment);
        
        HRESULT ( __stdcall *SetSchema )( 
            ICreateTypeInfo * This,
             LPOLESTR pStrSchema);
        
        HRESULT ( __stdcall *AddVarDesc )( 
            ICreateTypeInfo * This,
             UINT index,
             VARDESC *pVarDesc);
        
        HRESULT ( __stdcall *SetFuncAndParamNames )( 
            ICreateTypeInfo * This,
             UINT index,
             LPOLESTR *rgszNames,
             UINT cNames);
        
        HRESULT ( __stdcall *SetVarName )( 
            ICreateTypeInfo * This,
             UINT index,
             LPOLESTR szName);
        
        HRESULT ( __stdcall *SetTypeDescAlias )( 
            ICreateTypeInfo * This,
             TYPEDESC *pTDescAlias);
        
        HRESULT ( __stdcall *DefineFuncAsDllEntry )( 
            ICreateTypeInfo * This,
             UINT index,
             LPOLESTR szDllName,
             LPOLESTR szProcName);
        
        HRESULT ( __stdcall *SetFuncDocString )( 
            ICreateTypeInfo * This,
             UINT index,
             LPOLESTR szDocString);
        
        HRESULT ( __stdcall *SetVarDocString )( 
            ICreateTypeInfo * This,
             UINT index,
             LPOLESTR szDocString);
        
        HRESULT ( __stdcall *SetFuncHelpContext )( 
            ICreateTypeInfo * This,
             UINT index,
             DWORD dwHelpContext);
        
        HRESULT ( __stdcall *SetVarHelpContext )( 
            ICreateTypeInfo * This,
             UINT index,
             DWORD dwHelpContext);
        
        HRESULT ( __stdcall *SetMops )( 
            ICreateTypeInfo * This,
             UINT index,
             BSTR bstrMops);
        
        HRESULT ( __stdcall *SetTypeIdldesc )( 
            ICreateTypeInfo * This,
             IDLDESC *pIdlDesc);
        
        HRESULT ( __stdcall *LayOut )( 
            ICreateTypeInfo * This);
        
        
    } ICreateTypeInfoVtbl;

    struct ICreateTypeInfo
    {
         struct ICreateTypeInfoVtbl *lpVtbl;
    };

    






















































































#line 1223 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall ICreateTypeInfo_SetGuid_Proxy( 
    ICreateTypeInfo * This,
     const GUID * const guid);


void __stdcall ICreateTypeInfo_SetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetTypeFlags_Proxy( 
    ICreateTypeInfo * This,
     UINT uTypeFlags);


void __stdcall ICreateTypeInfo_SetTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetDocString_Proxy( 
    ICreateTypeInfo * This,
     LPOLESTR pStrDoc);


void __stdcall ICreateTypeInfo_SetDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetHelpContext_Proxy( 
    ICreateTypeInfo * This,
     DWORD dwHelpContext);


void __stdcall ICreateTypeInfo_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVersion_Proxy( 
    ICreateTypeInfo * This,
     WORD wMajorVerNum,
     WORD wMinorVerNum);


void __stdcall ICreateTypeInfo_SetVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddRefTypeInfo_Proxy( 
    ICreateTypeInfo * This,
     ITypeInfo *pTInfo,
     HREFTYPE *phRefType);


void __stdcall ICreateTypeInfo_AddRefTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddFuncDesc_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     FUNCDESC *pFuncDesc);


void __stdcall ICreateTypeInfo_AddFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddImplType_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     HREFTYPE hRefType);


void __stdcall ICreateTypeInfo_AddImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetImplTypeFlags_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     INT implTypeFlags);


void __stdcall ICreateTypeInfo_SetImplTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetAlignment_Proxy( 
    ICreateTypeInfo * This,
     WORD cbAlignment);


void __stdcall ICreateTypeInfo_SetAlignment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetSchema_Proxy( 
    ICreateTypeInfo * This,
     LPOLESTR pStrSchema);


void __stdcall ICreateTypeInfo_SetSchema_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_AddVarDesc_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     VARDESC *pVarDesc);


void __stdcall ICreateTypeInfo_AddVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetFuncAndParamNames_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     LPOLESTR *rgszNames,
     UINT cNames);


void __stdcall ICreateTypeInfo_SetFuncAndParamNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVarName_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     LPOLESTR szName);


void __stdcall ICreateTypeInfo_SetVarName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetTypeDescAlias_Proxy( 
    ICreateTypeInfo * This,
     TYPEDESC *pTDescAlias);


void __stdcall ICreateTypeInfo_SetTypeDescAlias_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_DefineFuncAsDllEntry_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     LPOLESTR szDllName,
     LPOLESTR szProcName);


void __stdcall ICreateTypeInfo_DefineFuncAsDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetFuncDocString_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     LPOLESTR szDocString);


void __stdcall ICreateTypeInfo_SetFuncDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVarDocString_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     LPOLESTR szDocString);


void __stdcall ICreateTypeInfo_SetVarDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetFuncHelpContext_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     DWORD dwHelpContext);


void __stdcall ICreateTypeInfo_SetFuncHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetVarHelpContext_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     DWORD dwHelpContext);


void __stdcall ICreateTypeInfo_SetVarHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetMops_Proxy( 
    ICreateTypeInfo * This,
     UINT index,
     BSTR bstrMops);


void __stdcall ICreateTypeInfo_SetMops_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_SetTypeIdldesc_Proxy( 
    ICreateTypeInfo * This,
     IDLDESC *pIdlDesc);


void __stdcall ICreateTypeInfo_SetTypeIdldesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo_LayOut_Proxy( 
    ICreateTypeInfo * This);


void __stdcall ICreateTypeInfo_LayOut_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1519 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  ICreateTypeInfo2 *LPCREATETYPEINFO2;


extern const IID IID_ICreateTypeInfo2;


































































#line 1598 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ICreateTypeInfo2Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ICreateTypeInfo2 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ICreateTypeInfo2 * This);
        
        ULONG ( __stdcall *Release )( 
            ICreateTypeInfo2 * This);
        
        HRESULT ( __stdcall *SetGuid )( 
            ICreateTypeInfo2 * This,
             const GUID * const guid);
        
        HRESULT ( __stdcall *SetTypeFlags )( 
            ICreateTypeInfo2 * This,
             UINT uTypeFlags);
        
        HRESULT ( __stdcall *SetDocString )( 
            ICreateTypeInfo2 * This,
             LPOLESTR pStrDoc);
        
        HRESULT ( __stdcall *SetHelpContext )( 
            ICreateTypeInfo2 * This,
             DWORD dwHelpContext);
        
        HRESULT ( __stdcall *SetVersion )( 
            ICreateTypeInfo2 * This,
             WORD wMajorVerNum,
             WORD wMinorVerNum);
        
        HRESULT ( __stdcall *AddRefTypeInfo )( 
            ICreateTypeInfo2 * This,
             ITypeInfo *pTInfo,
             HREFTYPE *phRefType);
        
        HRESULT ( __stdcall *AddFuncDesc )( 
            ICreateTypeInfo2 * This,
             UINT index,
             FUNCDESC *pFuncDesc);
        
        HRESULT ( __stdcall *AddImplType )( 
            ICreateTypeInfo2 * This,
             UINT index,
             HREFTYPE hRefType);
        
        HRESULT ( __stdcall *SetImplTypeFlags )( 
            ICreateTypeInfo2 * This,
             UINT index,
             INT implTypeFlags);
        
        HRESULT ( __stdcall *SetAlignment )( 
            ICreateTypeInfo2 * This,
             WORD cbAlignment);
        
        HRESULT ( __stdcall *SetSchema )( 
            ICreateTypeInfo2 * This,
             LPOLESTR pStrSchema);
        
        HRESULT ( __stdcall *AddVarDesc )( 
            ICreateTypeInfo2 * This,
             UINT index,
             VARDESC *pVarDesc);
        
        HRESULT ( __stdcall *SetFuncAndParamNames )( 
            ICreateTypeInfo2 * This,
             UINT index,
             LPOLESTR *rgszNames,
             UINT cNames);
        
        HRESULT ( __stdcall *SetVarName )( 
            ICreateTypeInfo2 * This,
             UINT index,
             LPOLESTR szName);
        
        HRESULT ( __stdcall *SetTypeDescAlias )( 
            ICreateTypeInfo2 * This,
             TYPEDESC *pTDescAlias);
        
        HRESULT ( __stdcall *DefineFuncAsDllEntry )( 
            ICreateTypeInfo2 * This,
             UINT index,
             LPOLESTR szDllName,
             LPOLESTR szProcName);
        
        HRESULT ( __stdcall *SetFuncDocString )( 
            ICreateTypeInfo2 * This,
             UINT index,
             LPOLESTR szDocString);
        
        HRESULT ( __stdcall *SetVarDocString )( 
            ICreateTypeInfo2 * This,
             UINT index,
             LPOLESTR szDocString);
        
        HRESULT ( __stdcall *SetFuncHelpContext )( 
            ICreateTypeInfo2 * This,
             UINT index,
             DWORD dwHelpContext);
        
        HRESULT ( __stdcall *SetVarHelpContext )( 
            ICreateTypeInfo2 * This,
             UINT index,
             DWORD dwHelpContext);
        
        HRESULT ( __stdcall *SetMops )( 
            ICreateTypeInfo2 * This,
             UINT index,
             BSTR bstrMops);
        
        HRESULT ( __stdcall *SetTypeIdldesc )( 
            ICreateTypeInfo2 * This,
             IDLDESC *pIdlDesc);
        
        HRESULT ( __stdcall *LayOut )( 
            ICreateTypeInfo2 * This);
        
        HRESULT ( __stdcall *DeleteFuncDesc )( 
            ICreateTypeInfo2 * This,
             UINT index);
        
        HRESULT ( __stdcall *DeleteFuncDescByMemId )( 
            ICreateTypeInfo2 * This,
             MEMBERID memid,
             INVOKEKIND invKind);
        
        HRESULT ( __stdcall *DeleteVarDesc )( 
            ICreateTypeInfo2 * This,
             UINT index);
        
        HRESULT ( __stdcall *DeleteVarDescByMemId )( 
            ICreateTypeInfo2 * This,
             MEMBERID memid);
        
        HRESULT ( __stdcall *DeleteImplType )( 
            ICreateTypeInfo2 * This,
             UINT index);
        
        HRESULT ( __stdcall *SetCustData )( 
            ICreateTypeInfo2 * This,
             const GUID * const guid,
             VARIANT *pVarVal);
        
        HRESULT ( __stdcall *SetFuncCustData )( 
            ICreateTypeInfo2 * This,
             UINT index,
             const GUID * const guid,
             VARIANT *pVarVal);
        
        HRESULT ( __stdcall *SetParamCustData )( 
            ICreateTypeInfo2 * This,
             UINT indexFunc,
             UINT indexParam,
             const GUID * const guid,
             VARIANT *pVarVal);
        
        HRESULT ( __stdcall *SetVarCustData )( 
            ICreateTypeInfo2 * This,
             UINT index,
             const GUID * const guid,
             VARIANT *pVarVal);
        
        HRESULT ( __stdcall *SetImplTypeCustData )( 
            ICreateTypeInfo2 * This,
             UINT index,
             const GUID * const guid,
             VARIANT *pVarVal);
        
        HRESULT ( __stdcall *SetHelpStringContext )( 
            ICreateTypeInfo2 * This,
             ULONG dwHelpStringContext);
        
        HRESULT ( __stdcall *SetFuncHelpStringContext )( 
            ICreateTypeInfo2 * This,
             UINT index,
             ULONG dwHelpStringContext);
        
        HRESULT ( __stdcall *SetVarHelpStringContext )( 
            ICreateTypeInfo2 * This,
             UINT index,
             ULONG dwHelpStringContext);
        
        HRESULT ( __stdcall *Invalidate )( 
            ICreateTypeInfo2 * This);
        
        HRESULT ( __stdcall *SetName )( 
            ICreateTypeInfo2 * This,
             LPOLESTR szName);
        
        
    } ICreateTypeInfo2Vtbl;

    struct ICreateTypeInfo2
    {
         struct ICreateTypeInfo2Vtbl *lpVtbl;
    };

    




































































































































#line 1935 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall ICreateTypeInfo2_DeleteFuncDesc_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index);


void __stdcall ICreateTypeInfo2_DeleteFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteFuncDescByMemId_Proxy( 
    ICreateTypeInfo2 * This,
     MEMBERID memid,
     INVOKEKIND invKind);


void __stdcall ICreateTypeInfo2_DeleteFuncDescByMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteVarDesc_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index);


void __stdcall ICreateTypeInfo2_DeleteVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteVarDescByMemId_Proxy( 
    ICreateTypeInfo2 * This,
     MEMBERID memid);


void __stdcall ICreateTypeInfo2_DeleteVarDescByMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_DeleteImplType_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index);


void __stdcall ICreateTypeInfo2_DeleteImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetCustData_Proxy( 
    ICreateTypeInfo2 * This,
     const GUID * const guid,
     VARIANT *pVarVal);


void __stdcall ICreateTypeInfo2_SetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetFuncCustData_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index,
     const GUID * const guid,
     VARIANT *pVarVal);


void __stdcall ICreateTypeInfo2_SetFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetParamCustData_Proxy( 
    ICreateTypeInfo2 * This,
     UINT indexFunc,
     UINT indexParam,
     const GUID * const guid,
     VARIANT *pVarVal);


void __stdcall ICreateTypeInfo2_SetParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetVarCustData_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index,
     const GUID * const guid,
     VARIANT *pVarVal);


void __stdcall ICreateTypeInfo2_SetVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetImplTypeCustData_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index,
     const GUID * const guid,
     VARIANT *pVarVal);


void __stdcall ICreateTypeInfo2_SetImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetHelpStringContext_Proxy( 
    ICreateTypeInfo2 * This,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeInfo2_SetHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetFuncHelpStringContext_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeInfo2_SetFuncHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetVarHelpStringContext_Proxy( 
    ICreateTypeInfo2 * This,
     UINT index,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeInfo2_SetVarHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_Invalidate_Proxy( 
    ICreateTypeInfo2 * This);


void __stdcall ICreateTypeInfo2_Invalidate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeInfo2_SetName_Proxy( 
    ICreateTypeInfo2 * This,
     LPOLESTR szName);


void __stdcall ICreateTypeInfo2_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2132 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  ICreateTypeLib *LPCREATETYPELIB;


extern const IID IID_ICreateTypeLib;









































#line 2186 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ICreateTypeLibVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ICreateTypeLib * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ICreateTypeLib * This);
        
        ULONG ( __stdcall *Release )( 
            ICreateTypeLib * This);
        
        HRESULT ( __stdcall *CreateTypeInfo )( 
            ICreateTypeLib * This,
             LPOLESTR szName,
             TYPEKIND tkind,
             ICreateTypeInfo **ppCTInfo);
        
        HRESULT ( __stdcall *SetName )( 
            ICreateTypeLib * This,
             LPOLESTR szName);
        
        HRESULT ( __stdcall *SetVersion )( 
            ICreateTypeLib * This,
             WORD wMajorVerNum,
             WORD wMinorVerNum);
        
        HRESULT ( __stdcall *SetGuid )( 
            ICreateTypeLib * This,
             const GUID * const guid);
        
        HRESULT ( __stdcall *SetDocString )( 
            ICreateTypeLib * This,
             LPOLESTR szDoc);
        
        HRESULT ( __stdcall *SetHelpFileName )( 
            ICreateTypeLib * This,
             LPOLESTR szHelpFileName);
        
        HRESULT ( __stdcall *SetHelpContext )( 
            ICreateTypeLib * This,
             DWORD dwHelpContext);
        
        HRESULT ( __stdcall *SetLcid )( 
            ICreateTypeLib * This,
             LCID lcid);
        
        HRESULT ( __stdcall *SetLibFlags )( 
            ICreateTypeLib * This,
             UINT uLibFlags);
        
        HRESULT ( __stdcall *SaveAllChanges )( 
            ICreateTypeLib * This);
        
        
    } ICreateTypeLibVtbl;

    struct ICreateTypeLib
    {
         struct ICreateTypeLibVtbl *lpVtbl;
    };

    















































#line 2301 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall ICreateTypeLib_CreateTypeInfo_Proxy( 
    ICreateTypeLib * This,
     LPOLESTR szName,
     TYPEKIND tkind,
     ICreateTypeInfo **ppCTInfo);


void __stdcall ICreateTypeLib_CreateTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetName_Proxy( 
    ICreateTypeLib * This,
     LPOLESTR szName);


void __stdcall ICreateTypeLib_SetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetVersion_Proxy( 
    ICreateTypeLib * This,
     WORD wMajorVerNum,
     WORD wMinorVerNum);


void __stdcall ICreateTypeLib_SetVersion_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetGuid_Proxy( 
    ICreateTypeLib * This,
     const GUID * const guid);


void __stdcall ICreateTypeLib_SetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetDocString_Proxy( 
    ICreateTypeLib * This,
     LPOLESTR szDoc);


void __stdcall ICreateTypeLib_SetDocString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetHelpFileName_Proxy( 
    ICreateTypeLib * This,
     LPOLESTR szHelpFileName);


void __stdcall ICreateTypeLib_SetHelpFileName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetHelpContext_Proxy( 
    ICreateTypeLib * This,
     DWORD dwHelpContext);


void __stdcall ICreateTypeLib_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetLcid_Proxy( 
    ICreateTypeLib * This,
     LCID lcid);


void __stdcall ICreateTypeLib_SetLcid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SetLibFlags_Proxy( 
    ICreateTypeLib * This,
     UINT uLibFlags);


void __stdcall ICreateTypeLib_SetLibFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib_SaveAllChanges_Proxy( 
    ICreateTypeLib * This);


void __stdcall ICreateTypeLib_SaveAllChanges_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2428 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  ICreateTypeLib2 *LPCREATETYPELIB2;


extern const IID IID_ICreateTypeLib2;






















#line 2463 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ICreateTypeLib2Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ICreateTypeLib2 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ICreateTypeLib2 * This);
        
        ULONG ( __stdcall *Release )( 
            ICreateTypeLib2 * This);
        
        HRESULT ( __stdcall *CreateTypeInfo )( 
            ICreateTypeLib2 * This,
             LPOLESTR szName,
             TYPEKIND tkind,
             ICreateTypeInfo **ppCTInfo);
        
        HRESULT ( __stdcall *SetName )( 
            ICreateTypeLib2 * This,
             LPOLESTR szName);
        
        HRESULT ( __stdcall *SetVersion )( 
            ICreateTypeLib2 * This,
             WORD wMajorVerNum,
             WORD wMinorVerNum);
        
        HRESULT ( __stdcall *SetGuid )( 
            ICreateTypeLib2 * This,
             const GUID * const guid);
        
        HRESULT ( __stdcall *SetDocString )( 
            ICreateTypeLib2 * This,
             LPOLESTR szDoc);
        
        HRESULT ( __stdcall *SetHelpFileName )( 
            ICreateTypeLib2 * This,
             LPOLESTR szHelpFileName);
        
        HRESULT ( __stdcall *SetHelpContext )( 
            ICreateTypeLib2 * This,
             DWORD dwHelpContext);
        
        HRESULT ( __stdcall *SetLcid )( 
            ICreateTypeLib2 * This,
             LCID lcid);
        
        HRESULT ( __stdcall *SetLibFlags )( 
            ICreateTypeLib2 * This,
             UINT uLibFlags);
        
        HRESULT ( __stdcall *SaveAllChanges )( 
            ICreateTypeLib2 * This);
        
        HRESULT ( __stdcall *DeleteTypeInfo )( 
            ICreateTypeLib2 * This,
             LPOLESTR szName);
        
        HRESULT ( __stdcall *SetCustData )( 
            ICreateTypeLib2 * This,
             const GUID * const guid,
             VARIANT *pVarVal);
        
        HRESULT ( __stdcall *SetHelpStringContext )( 
            ICreateTypeLib2 * This,
             ULONG dwHelpStringContext);
        
        HRESULT ( __stdcall *SetHelpStringDll )( 
            ICreateTypeLib2 * This,
             LPOLESTR szFileName);
        
        
    } ICreateTypeLib2Vtbl;

    struct ICreateTypeLib2
    {
         struct ICreateTypeLib2Vtbl *lpVtbl;
    };

    




























































#line 2608 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall ICreateTypeLib2_DeleteTypeInfo_Proxy( 
    ICreateTypeLib2 * This,
     LPOLESTR szName);


void __stdcall ICreateTypeLib2_DeleteTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib2_SetCustData_Proxy( 
    ICreateTypeLib2 * This,
     const GUID * const guid,
     VARIANT *pVarVal);


void __stdcall ICreateTypeLib2_SetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib2_SetHelpStringContext_Proxy( 
    ICreateTypeLib2 * This,
     ULONG dwHelpStringContext);


void __stdcall ICreateTypeLib2_SetHelpStringContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateTypeLib2_SetHelpStringDll_Proxy( 
    ICreateTypeLib2 * This,
     LPOLESTR szFileName);


void __stdcall ICreateTypeLib2_SetHelpStringDll_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2662 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  IDispatch *LPDISPATCH;

































extern const IID IID_IDispatch;


































#line 2740 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct IDispatchVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IDispatch * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IDispatch * This);
        
        ULONG ( __stdcall *Release )( 
            IDispatch * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IDispatch * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IDispatch * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IDispatch * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IDispatch * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
        
    } IDispatchVtbl;

    struct IDispatch
    {
         struct IDispatchVtbl *lpVtbl;
    };

    





























#line 2824 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall IDispatch_GetTypeInfoCount_Proxy( 
    IDispatch * This,
     UINT *pctinfo);


void __stdcall IDispatch_GetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDispatch_GetTypeInfo_Proxy( 
    IDispatch * This,
     UINT iTInfo,
     LCID lcid,
     ITypeInfo **ppTInfo);


void __stdcall IDispatch_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDispatch_GetIDsOfNames_Proxy( 
    IDispatch * This,
     const IID * const riid,
     LPOLESTR *rgszNames,
     UINT cNames,
     LCID lcid,
     DISPID *rgDispId);


void __stdcall IDispatch_GetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDispatch_RemoteInvoke_Proxy( 
    IDispatch * This,
     DISPID dispIdMember,
     const IID * const riid,
     LCID lcid,
     DWORD dwFlags,
     DISPPARAMS *pDispParams,
     VARIANT *pVarResult,
     EXCEPINFO *pExcepInfo,
     UINT *pArgErr,
     UINT cVarRef,
     UINT *rgVarRefIdx,
     VARIANTARG *rgVarRef);


void __stdcall IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2893 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  IEnumVARIANT *LPENUMVARIANT;


extern const IID IID_IEnumVARIANT;






















#line 2928 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct IEnumVARIANTVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IEnumVARIANT * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IEnumVARIANT * This);
        
        ULONG ( __stdcall *Release )( 
            IEnumVARIANT * This);
        
         HRESULT ( __stdcall *Next )( 
            IEnumVARIANT * This,
             ULONG celt,
             VARIANT *rgVar,
             ULONG *pCeltFetched);
        
        HRESULT ( __stdcall *Skip )( 
            IEnumVARIANT * This,
             ULONG celt);
        
        HRESULT ( __stdcall *Reset )( 
            IEnumVARIANT * This);
        
        HRESULT ( __stdcall *Clone )( 
            IEnumVARIANT * This,
             IEnumVARIANT **ppEnum);
        
        
    } IEnumVARIANTVtbl;

    struct IEnumVARIANT
    {
         struct IEnumVARIANTVtbl *lpVtbl;
    };

    





























#line 3000 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



 HRESULT __stdcall IEnumVARIANT_RemoteNext_Proxy( 
    IEnumVARIANT * This,
     ULONG celt,
     VARIANT *rgVar,
     ULONG *pCeltFetched);


void __stdcall IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumVARIANT_Skip_Proxy( 
    IEnumVARIANT * This,
     ULONG celt);


void __stdcall IEnumVARIANT_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumVARIANT_Reset_Proxy( 
    IEnumVARIANT * This);


void __stdcall IEnumVARIANT_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumVARIANT_Clone_Proxy( 
    IEnumVARIANT * This,
     IEnumVARIANT **ppEnum);


void __stdcall IEnumVARIANT_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3054 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  ITypeComp *LPTYPECOMP;

typedef  
enum tagDESCKIND
    {	DESCKIND_NONE	= 0,
	DESCKIND_FUNCDESC	= DESCKIND_NONE + 1,
	DESCKIND_VARDESC	= DESCKIND_FUNCDESC + 1,
	DESCKIND_TYPECOMP	= DESCKIND_VARDESC + 1,
	DESCKIND_IMPLICITAPPOBJ	= DESCKIND_TYPECOMP + 1,
	DESCKIND_MAX	= DESCKIND_IMPLICITAPPOBJ + 1
    } 	DESCKIND;

typedef union tagBINDPTR
    {
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
    } 	BINDPTR;

typedef union tagBINDPTR *LPBINDPTR;


extern const IID IID_ITypeComp;























#line 3109 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ITypeCompVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ITypeComp * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ITypeComp * This);
        
        ULONG ( __stdcall *Release )( 
            ITypeComp * This);
        
         HRESULT ( __stdcall *Bind )( 
            ITypeComp * This,
             LPOLESTR szName,
             ULONG lHashVal,
             WORD wFlags,
             ITypeInfo **ppTInfo,
             DESCKIND *pDescKind,
             BINDPTR *pBindPtr);
        
         HRESULT ( __stdcall *BindType )( 
            ITypeComp * This,
             LPOLESTR szName,
             ULONG lHashVal,
             ITypeInfo **ppTInfo,
             ITypeComp **ppTComp);
        
        
    } ITypeCompVtbl;

    struct ITypeComp
    {
         struct ITypeCompVtbl *lpVtbl;
    };

    























#line 3174 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



 HRESULT __stdcall ITypeComp_RemoteBind_Proxy( 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo **ppTInfo,
     DESCKIND *pDescKind,
     LPFUNCDESC *ppFuncDesc,
     LPVARDESC *ppVarDesc,
     ITypeComp **ppTypeComp,
     CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeComp_RemoteBindType_Proxy( 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo **ppTInfo);


void __stdcall ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3213 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  ITypeInfo *LPTYPEINFO;


extern const IID IID_ITypeInfo;
































































































#line 3322 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ITypeInfoVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ITypeInfo * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ITypeInfo * This);
        
        ULONG ( __stdcall *Release )( 
            ITypeInfo * This);
        
         HRESULT ( __stdcall *GetTypeAttr )( 
            ITypeInfo * This,
             TYPEATTR **ppTypeAttr);
        
        HRESULT ( __stdcall *GetTypeComp )( 
            ITypeInfo * This,
             ITypeComp **ppTComp);
        
         HRESULT ( __stdcall *GetFuncDesc )( 
            ITypeInfo * This,
             UINT index,
             FUNCDESC **ppFuncDesc);
        
         HRESULT ( __stdcall *GetVarDesc )( 
            ITypeInfo * This,
             UINT index,
             VARDESC **ppVarDesc);
        
         HRESULT ( __stdcall *GetNames )( 
            ITypeInfo * This,
             MEMBERID memid,
             BSTR *rgBstrNames,
             UINT cMaxNames,
             UINT *pcNames);
        
        HRESULT ( __stdcall *GetRefTypeOfImplType )( 
            ITypeInfo * This,
             UINT index,
             HREFTYPE *pRefType);
        
        HRESULT ( __stdcall *GetImplTypeFlags )( 
            ITypeInfo * This,
             UINT index,
             INT *pImplTypeFlags);
        
         HRESULT ( __stdcall *GetIDsOfNames )( 
            ITypeInfo * This,
             LPOLESTR *rgszNames,
             UINT cNames,
             MEMBERID *pMemId);
        
         HRESULT ( __stdcall *Invoke )( 
            ITypeInfo * This,
             PVOID pvInstance,
             MEMBERID memid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *GetDocumentation )( 
            ITypeInfo * This,
             MEMBERID memid,
             BSTR *pBstrName,
             BSTR *pBstrDocString,
             DWORD *pdwHelpContext,
             BSTR *pBstrHelpFile);
        
         HRESULT ( __stdcall *GetDllEntry )( 
            ITypeInfo * This,
             MEMBERID memid,
             INVOKEKIND invKind,
             BSTR *pBstrDllName,
             BSTR *pBstrName,
             WORD *pwOrdinal);
        
        HRESULT ( __stdcall *GetRefTypeInfo )( 
            ITypeInfo * This,
             HREFTYPE hRefType,
             ITypeInfo **ppTInfo);
        
         HRESULT ( __stdcall *AddressOfMember )( 
            ITypeInfo * This,
             MEMBERID memid,
             INVOKEKIND invKind,
             PVOID *ppv);
        
         HRESULT ( __stdcall *CreateInstance )( 
            ITypeInfo * This,
             IUnknown *pUnkOuter,
             const IID * const riid,
             PVOID *ppvObj);
        
        HRESULT ( __stdcall *GetMops )( 
            ITypeInfo * This,
             MEMBERID memid,
             BSTR *pBstrMops);
        
         HRESULT ( __stdcall *GetContainingTypeLib )( 
            ITypeInfo * This,
             ITypeLib **ppTLib,
             UINT *pIndex);
        
         void ( __stdcall *ReleaseTypeAttr )( 
            ITypeInfo * This,
             TYPEATTR *pTypeAttr);
        
         void ( __stdcall *ReleaseFuncDesc )( 
            ITypeInfo * This,
             FUNCDESC *pFuncDesc);
        
         void ( __stdcall *ReleaseVarDesc )( 
            ITypeInfo * This,
             VARDESC *pVarDesc);
        
        
    } ITypeInfoVtbl;

    struct ITypeInfo
    {
         struct ITypeInfoVtbl *lpVtbl;
    };

    










































































#line 3528 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



 HRESULT __stdcall ITypeInfo_RemoteGetTypeAttr_Proxy( 
    ITypeInfo * This,
     LPTYPEATTR *ppTypeAttr,
     CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetTypeComp_Proxy( 
    ITypeInfo * This,
     ITypeComp **ppTComp);


void __stdcall ITypeInfo_GetTypeComp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetFuncDesc_Proxy( 
    ITypeInfo * This,
     UINT index,
     LPFUNCDESC *ppFuncDesc,
     CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetVarDesc_Proxy( 
    ITypeInfo * This,
     UINT index,
     LPVARDESC *ppVarDesc,
     CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetNames_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *rgBstrNames,
     UINT cMaxNames,
     UINT *pcNames);


void __stdcall ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetRefTypeOfImplType_Proxy( 
    ITypeInfo * This,
     UINT index,
     HREFTYPE *pRefType);


void __stdcall ITypeInfo_GetRefTypeOfImplType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetImplTypeFlags_Proxy( 
    ITypeInfo * This,
     UINT index,
     INT *pImplTypeFlags);


void __stdcall ITypeInfo_GetImplTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalGetIDsOfNames_Proxy( 
    ITypeInfo * This);


void __stdcall ITypeInfo_LocalGetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalInvoke_Proxy( 
    ITypeInfo * This);


void __stdcall ITypeInfo_LocalInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetDocumentation_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     DWORD refPtrFlags,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);


void __stdcall ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetDllEntry_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     DWORD refPtrFlags,
     BSTR *pBstrDllName,
     BSTR *pBstrName,
     WORD *pwOrdinal);


void __stdcall ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetRefTypeInfo_Proxy( 
    ITypeInfo * This,
     HREFTYPE hRefType,
     ITypeInfo **ppTInfo);


void __stdcall ITypeInfo_GetRefTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalAddressOfMember_Proxy( 
    ITypeInfo * This);


void __stdcall ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteCreateInstance_Proxy( 
    ITypeInfo * This,
     const IID * const riid,
     IUnknown **ppvObj);


void __stdcall ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo_GetMops_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *pBstrMops);


void __stdcall ITypeInfo_GetMops_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetContainingTypeLib_Proxy( 
    ITypeInfo * This,
     ITypeLib **ppTLib,
     UINT *pIndex);


void __stdcall ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseTypeAttr_Proxy( 
    ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseFuncDesc_Proxy( 
    ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseVarDesc_Proxy( 
    ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3779 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  ITypeInfo2 *LPTYPEINFO2;


extern const IID IID_ITypeInfo2;












































































#line 3868 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ITypeInfo2Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ITypeInfo2 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ITypeInfo2 * This);
        
        ULONG ( __stdcall *Release )( 
            ITypeInfo2 * This);
        
         HRESULT ( __stdcall *GetTypeAttr )( 
            ITypeInfo2 * This,
             TYPEATTR **ppTypeAttr);
        
        HRESULT ( __stdcall *GetTypeComp )( 
            ITypeInfo2 * This,
             ITypeComp **ppTComp);
        
         HRESULT ( __stdcall *GetFuncDesc )( 
            ITypeInfo2 * This,
             UINT index,
             FUNCDESC **ppFuncDesc);
        
         HRESULT ( __stdcall *GetVarDesc )( 
            ITypeInfo2 * This,
             UINT index,
             VARDESC **ppVarDesc);
        
         HRESULT ( __stdcall *GetNames )( 
            ITypeInfo2 * This,
             MEMBERID memid,
             BSTR *rgBstrNames,
             UINT cMaxNames,
             UINT *pcNames);
        
        HRESULT ( __stdcall *GetRefTypeOfImplType )( 
            ITypeInfo2 * This,
             UINT index,
             HREFTYPE *pRefType);
        
        HRESULT ( __stdcall *GetImplTypeFlags )( 
            ITypeInfo2 * This,
             UINT index,
             INT *pImplTypeFlags);
        
         HRESULT ( __stdcall *GetIDsOfNames )( 
            ITypeInfo2 * This,
             LPOLESTR *rgszNames,
             UINT cNames,
             MEMBERID *pMemId);
        
         HRESULT ( __stdcall *Invoke )( 
            ITypeInfo2 * This,
             PVOID pvInstance,
             MEMBERID memid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *GetDocumentation )( 
            ITypeInfo2 * This,
             MEMBERID memid,
             BSTR *pBstrName,
             BSTR *pBstrDocString,
             DWORD *pdwHelpContext,
             BSTR *pBstrHelpFile);
        
         HRESULT ( __stdcall *GetDllEntry )( 
            ITypeInfo2 * This,
             MEMBERID memid,
             INVOKEKIND invKind,
             BSTR *pBstrDllName,
             BSTR *pBstrName,
             WORD *pwOrdinal);
        
        HRESULT ( __stdcall *GetRefTypeInfo )( 
            ITypeInfo2 * This,
             HREFTYPE hRefType,
             ITypeInfo **ppTInfo);
        
         HRESULT ( __stdcall *AddressOfMember )( 
            ITypeInfo2 * This,
             MEMBERID memid,
             INVOKEKIND invKind,
             PVOID *ppv);
        
         HRESULT ( __stdcall *CreateInstance )( 
            ITypeInfo2 * This,
             IUnknown *pUnkOuter,
             const IID * const riid,
             PVOID *ppvObj);
        
        HRESULT ( __stdcall *GetMops )( 
            ITypeInfo2 * This,
             MEMBERID memid,
             BSTR *pBstrMops);
        
         HRESULT ( __stdcall *GetContainingTypeLib )( 
            ITypeInfo2 * This,
             ITypeLib **ppTLib,
             UINT *pIndex);
        
         void ( __stdcall *ReleaseTypeAttr )( 
            ITypeInfo2 * This,
             TYPEATTR *pTypeAttr);
        
         void ( __stdcall *ReleaseFuncDesc )( 
            ITypeInfo2 * This,
             FUNCDESC *pFuncDesc);
        
         void ( __stdcall *ReleaseVarDesc )( 
            ITypeInfo2 * This,
             VARDESC *pVarDesc);
        
        HRESULT ( __stdcall *GetTypeKind )( 
            ITypeInfo2 * This,
             TYPEKIND *pTypeKind);
        
        HRESULT ( __stdcall *GetTypeFlags )( 
            ITypeInfo2 * This,
             ULONG *pTypeFlags);
        
        HRESULT ( __stdcall *GetFuncIndexOfMemId )( 
            ITypeInfo2 * This,
             MEMBERID memid,
             INVOKEKIND invKind,
             UINT *pFuncIndex);
        
        HRESULT ( __stdcall *GetVarIndexOfMemId )( 
            ITypeInfo2 * This,
             MEMBERID memid,
             UINT *pVarIndex);
        
        HRESULT ( __stdcall *GetCustData )( 
            ITypeInfo2 * This,
             const GUID * const guid,
             VARIANT *pVarVal);
        
        HRESULT ( __stdcall *GetFuncCustData )( 
            ITypeInfo2 * This,
             UINT index,
             const GUID * const guid,
             VARIANT *pVarVal);
        
        HRESULT ( __stdcall *GetParamCustData )( 
            ITypeInfo2 * This,
             UINT indexFunc,
             UINT indexParam,
             const GUID * const guid,
             VARIANT *pVarVal);
        
        HRESULT ( __stdcall *GetVarCustData )( 
            ITypeInfo2 * This,
             UINT index,
             const GUID * const guid,
             VARIANT *pVarVal);
        
        HRESULT ( __stdcall *GetImplTypeCustData )( 
            ITypeInfo2 * This,
             UINT index,
             const GUID * const guid,
             VARIANT *pVarVal);
        
         HRESULT ( __stdcall *GetDocumentation2 )( 
            ITypeInfo2 * This,
             MEMBERID memid,
             LCID lcid,
             BSTR *pbstrHelpString,
             DWORD *pdwHelpStringContext,
             BSTR *pbstrHelpStringDll);
        
        HRESULT ( __stdcall *GetAllCustData )( 
            ITypeInfo2 * This,
             CUSTDATA *pCustData);
        
        HRESULT ( __stdcall *GetAllFuncCustData )( 
            ITypeInfo2 * This,
             UINT index,
             CUSTDATA *pCustData);
        
        HRESULT ( __stdcall *GetAllParamCustData )( 
            ITypeInfo2 * This,
             UINT indexFunc,
             UINT indexParam,
             CUSTDATA *pCustData);
        
        HRESULT ( __stdcall *GetAllVarCustData )( 
            ITypeInfo2 * This,
             UINT index,
             CUSTDATA *pCustData);
        
        HRESULT ( __stdcall *GetAllImplTypeCustData )( 
            ITypeInfo2 * This,
             UINT index,
             CUSTDATA *pCustData);
        
        
    } ITypeInfo2Vtbl;

    struct ITypeInfo2
    {
         struct ITypeInfo2Vtbl *lpVtbl;
    };

    
























































































































#line 4202 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall ITypeInfo2_GetTypeKind_Proxy( 
    ITypeInfo2 * This,
     TYPEKIND *pTypeKind);


void __stdcall ITypeInfo2_GetTypeKind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetTypeFlags_Proxy( 
    ITypeInfo2 * This,
     ULONG *pTypeFlags);


void __stdcall ITypeInfo2_GetTypeFlags_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetFuncIndexOfMemId_Proxy( 
    ITypeInfo2 * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     UINT *pFuncIndex);


void __stdcall ITypeInfo2_GetFuncIndexOfMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetVarIndexOfMemId_Proxy( 
    ITypeInfo2 * This,
     MEMBERID memid,
     UINT *pVarIndex);


void __stdcall ITypeInfo2_GetVarIndexOfMemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetCustData_Proxy( 
    ITypeInfo2 * This,
     const GUID * const guid,
     VARIANT *pVarVal);


void __stdcall ITypeInfo2_GetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetFuncCustData_Proxy( 
    ITypeInfo2 * This,
     UINT index,
     const GUID * const guid,
     VARIANT *pVarVal);


void __stdcall ITypeInfo2_GetFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetParamCustData_Proxy( 
    ITypeInfo2 * This,
     UINT indexFunc,
     UINT indexParam,
     const GUID * const guid,
     VARIANT *pVarVal);


void __stdcall ITypeInfo2_GetParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetVarCustData_Proxy( 
    ITypeInfo2 * This,
     UINT index,
     const GUID * const guid,
     VARIANT *pVarVal);


void __stdcall ITypeInfo2_GetVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetImplTypeCustData_Proxy( 
    ITypeInfo2 * This,
     UINT index,
     const GUID * const guid,
     VARIANT *pVarVal);


void __stdcall ITypeInfo2_GetImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo2_RemoteGetDocumentation2_Proxy( 
    ITypeInfo2 * This,
     MEMBERID memid,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);


void __stdcall ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllCustData_Proxy( 
    ITypeInfo2 * This,
     CUSTDATA *pCustData);


void __stdcall ITypeInfo2_GetAllCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllFuncCustData_Proxy( 
    ITypeInfo2 * This,
     UINT index,
     CUSTDATA *pCustData);


void __stdcall ITypeInfo2_GetAllFuncCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllParamCustData_Proxy( 
    ITypeInfo2 * This,
     UINT indexFunc,
     UINT indexParam,
     CUSTDATA *pCustData);


void __stdcall ITypeInfo2_GetAllParamCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllVarCustData_Proxy( 
    ITypeInfo2 * This,
     UINT index,
     CUSTDATA *pCustData);


void __stdcall ITypeInfo2_GetAllVarCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeInfo2_GetAllImplTypeCustData_Proxy( 
    ITypeInfo2 * This,
     UINT index,
     CUSTDATA *pCustData);


void __stdcall ITypeInfo2_GetAllImplTypeCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4410 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  
enum tagSYSKIND
    {	SYS_WIN16	= 0,
	SYS_WIN32	= SYS_WIN16 + 1,
	SYS_MAC	= SYS_WIN32 + 1,
	SYS_WIN64	= SYS_MAC + 1
    } 	SYSKIND;

typedef  
enum tagLIBFLAGS
    {	LIBFLAG_FRESTRICTED	= 0x1,
	LIBFLAG_FCONTROL	= 0x2,
	LIBFLAG_FHIDDEN	= 0x4,
	LIBFLAG_FHASDISKIMAGE	= 0x8
    } 	LIBFLAGS;

typedef  ITypeLib *LPTYPELIB;

typedef struct tagTLIBATTR
    {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
    } 	TLIBATTR;

typedef struct tagTLIBATTR *LPTLIBATTR;


extern const IID IID_ITypeLib;



















































#line 4502 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ITypeLibVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ITypeLib * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ITypeLib * This);
        
        ULONG ( __stdcall *Release )( 
            ITypeLib * This);
        
         UINT ( __stdcall *GetTypeInfoCount )( 
            ITypeLib * This);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            ITypeLib * This,
             UINT index,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetTypeInfoType )( 
            ITypeLib * This,
             UINT index,
             TYPEKIND *pTKind);
        
        HRESULT ( __stdcall *GetTypeInfoOfGuid )( 
            ITypeLib * This,
             const GUID * const guid,
             ITypeInfo **ppTinfo);
        
         HRESULT ( __stdcall *GetLibAttr )( 
            ITypeLib * This,
             TLIBATTR **ppTLibAttr);
        
        HRESULT ( __stdcall *GetTypeComp )( 
            ITypeLib * This,
             ITypeComp **ppTComp);
        
         HRESULT ( __stdcall *GetDocumentation )( 
            ITypeLib * This,
             INT index,
             BSTR *pBstrName,
             BSTR *pBstrDocString,
             DWORD *pdwHelpContext,
             BSTR *pBstrHelpFile);
        
         HRESULT ( __stdcall *IsName )( 
            ITypeLib * This,
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             BOOL *pfName);
        
         HRESULT ( __stdcall *FindName )( 
            ITypeLib * This,
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             ITypeInfo **ppTInfo,
             MEMBERID *rgMemId,
             USHORT *pcFound);
        
         void ( __stdcall *ReleaseTLibAttr )( 
            ITypeLib * This,
             TLIBATTR *pTLibAttr);
        
        
    } ITypeLibVtbl;

    struct ITypeLib
    {
         struct ITypeLibVtbl *lpVtbl;
    };

    















































#line 4627 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



 HRESULT __stdcall ITypeLib_RemoteGetTypeInfoCount_Proxy( 
    ITypeLib * This,
     UINT *pcTInfo);


void __stdcall ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeInfo_Proxy( 
    ITypeLib * This,
     UINT index,
     ITypeInfo **ppTInfo);


void __stdcall ITypeLib_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeInfoType_Proxy( 
    ITypeLib * This,
     UINT index,
     TYPEKIND *pTKind);


void __stdcall ITypeLib_GetTypeInfoType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeInfoOfGuid_Proxy( 
    ITypeLib * This,
     const GUID * const guid,
     ITypeInfo **ppTinfo);


void __stdcall ITypeLib_GetTypeInfoOfGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteGetLibAttr_Proxy( 
    ITypeLib * This,
     LPTLIBATTR *ppTLibAttr,
     CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib_GetTypeComp_Proxy( 
    ITypeLib * This,
     ITypeComp **ppTComp);


void __stdcall ITypeLib_GetTypeComp_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteGetDocumentation_Proxy( 
    ITypeLib * This,
     INT index,
     DWORD refPtrFlags,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);


void __stdcall ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteIsName_Proxy( 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL *pfName,
     BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteFindName_Proxy( 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo **ppTInfo,
     MEMBERID *rgMemId,
     USHORT *pcFound,
     BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_LocalReleaseTLibAttr_Proxy( 
    ITypeLib * This);


void __stdcall ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4768 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  ITypeLib2 *LPTYPELIB2;


extern const IID IID_ITypeLib2;



























#line 4808 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ITypeLib2Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ITypeLib2 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ITypeLib2 * This);
        
        ULONG ( __stdcall *Release )( 
            ITypeLib2 * This);
        
         UINT ( __stdcall *GetTypeInfoCount )( 
            ITypeLib2 * This);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            ITypeLib2 * This,
             UINT index,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetTypeInfoType )( 
            ITypeLib2 * This,
             UINT index,
             TYPEKIND *pTKind);
        
        HRESULT ( __stdcall *GetTypeInfoOfGuid )( 
            ITypeLib2 * This,
             const GUID * const guid,
             ITypeInfo **ppTinfo);
        
         HRESULT ( __stdcall *GetLibAttr )( 
            ITypeLib2 * This,
             TLIBATTR **ppTLibAttr);
        
        HRESULT ( __stdcall *GetTypeComp )( 
            ITypeLib2 * This,
             ITypeComp **ppTComp);
        
         HRESULT ( __stdcall *GetDocumentation )( 
            ITypeLib2 * This,
             INT index,
             BSTR *pBstrName,
             BSTR *pBstrDocString,
             DWORD *pdwHelpContext,
             BSTR *pBstrHelpFile);
        
         HRESULT ( __stdcall *IsName )( 
            ITypeLib2 * This,
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             BOOL *pfName);
        
         HRESULT ( __stdcall *FindName )( 
            ITypeLib2 * This,
             LPOLESTR szNameBuf,
             ULONG lHashVal,
             ITypeInfo **ppTInfo,
             MEMBERID *rgMemId,
             USHORT *pcFound);
        
         void ( __stdcall *ReleaseTLibAttr )( 
            ITypeLib2 * This,
             TLIBATTR *pTLibAttr);
        
        HRESULT ( __stdcall *GetCustData )( 
            ITypeLib2 * This,
             const GUID * const guid,
             VARIANT *pVarVal);
        
         HRESULT ( __stdcall *GetLibStatistics )( 
            ITypeLib2 * This,
             ULONG *pcUniqueNames,
             ULONG *pcchUniqueNames);
        
         HRESULT ( __stdcall *GetDocumentation2 )( 
            ITypeLib2 * This,
             INT index,
             LCID lcid,
             BSTR *pbstrHelpString,
             DWORD *pdwHelpStringContext,
             BSTR *pbstrHelpStringDll);
        
        HRESULT ( __stdcall *GetAllCustData )( 
            ITypeLib2 * This,
             CUSTDATA *pCustData);
        
        
    } ITypeLib2Vtbl;

    struct ITypeLib2
    {
         struct ITypeLib2Vtbl *lpVtbl;
    };

    




























































#line 4968 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall ITypeLib2_GetCustData_Proxy( 
    ITypeLib2 * This,
     const GUID * const guid,
     VARIANT *pVarVal);


void __stdcall ITypeLib2_GetCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib2_RemoteGetLibStatistics_Proxy( 
    ITypeLib2 * This,
     ULONG *pcUniqueNames,
     ULONG *pcchUniqueNames);


void __stdcall ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib2_RemoteGetDocumentation2_Proxy( 
    ITypeLib2 * This,
     INT index,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);


void __stdcall ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeLib2_GetAllCustData_Proxy( 
    ITypeLib2 * This,
     CUSTDATA *pCustData);


void __stdcall ITypeLib2_GetAllCustData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5028 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  ITypeChangeEvents *LPTYPECHANGEEVENTS;

typedef 
enum tagCHANGEKIND
    {	CHANGEKIND_ADDMEMBER	= 0,
	CHANGEKIND_DELETEMEMBER	= CHANGEKIND_ADDMEMBER + 1,
	CHANGEKIND_SETNAMES	= CHANGEKIND_DELETEMEMBER + 1,
	CHANGEKIND_SETDOCUMENTATION	= CHANGEKIND_SETNAMES + 1,
	CHANGEKIND_GENERAL	= CHANGEKIND_SETDOCUMENTATION + 1,
	CHANGEKIND_INVALIDATE	= CHANGEKIND_GENERAL + 1,
	CHANGEKIND_CHANGEFAILED	= CHANGEKIND_INVALIDATE + 1,
	CHANGEKIND_MAX	= CHANGEKIND_CHANGEFAILED + 1
    } 	CHANGEKIND;


extern const IID IID_ITypeChangeEvents;




















#line 5073 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ITypeChangeEventsVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ITypeChangeEvents * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ITypeChangeEvents * This);
        
        ULONG ( __stdcall *Release )( 
            ITypeChangeEvents * This);
        
        HRESULT ( __stdcall *RequestTypeChange )( 
            ITypeChangeEvents * This,
             CHANGEKIND changeKind,
             ITypeInfo *pTInfoBefore,
             LPOLESTR pStrName,
             INT *pfCancel);
        
        HRESULT ( __stdcall *AfterTypeChange )( 
            ITypeChangeEvents * This,
             CHANGEKIND changeKind,
             ITypeInfo *pTInfoAfter,
             LPOLESTR pStrName);
        
        
    } ITypeChangeEventsVtbl;

    struct ITypeChangeEvents
    {
         struct ITypeChangeEventsVtbl *lpVtbl;
    };

    























#line 5135 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall ITypeChangeEvents_RequestTypeChange_Proxy( 
    ITypeChangeEvents * This,
     CHANGEKIND changeKind,
     ITypeInfo *pTInfoBefore,
     LPOLESTR pStrName,
     INT *pfCancel);


void __stdcall ITypeChangeEvents_RequestTypeChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeChangeEvents_AfterTypeChange_Proxy( 
    ITypeChangeEvents * This,
     CHANGEKIND changeKind,
     ITypeInfo *pTInfoAfter,
     LPOLESTR pStrName);


void __stdcall ITypeChangeEvents_AfterTypeChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5169 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  IErrorInfo *LPERRORINFO;


extern const IID IID_IErrorInfo;
























#line 5206 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct IErrorInfoVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IErrorInfo * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IErrorInfo * This);
        
        ULONG ( __stdcall *Release )( 
            IErrorInfo * This);
        
        HRESULT ( __stdcall *GetGUID )( 
            IErrorInfo * This,
             GUID *pGUID);
        
        HRESULT ( __stdcall *GetSource )( 
            IErrorInfo * This,
             BSTR *pBstrSource);
        
        HRESULT ( __stdcall *GetDescription )( 
            IErrorInfo * This,
             BSTR *pBstrDescription);
        
        HRESULT ( __stdcall *GetHelpFile )( 
            IErrorInfo * This,
             BSTR *pBstrHelpFile);
        
        HRESULT ( __stdcall *GetHelpContext )( 
            IErrorInfo * This,
             DWORD *pdwHelpContext);
        
        
    } IErrorInfoVtbl;

    struct IErrorInfo
    {
         struct IErrorInfoVtbl *lpVtbl;
    };

    
































#line 5284 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall IErrorInfo_GetGUID_Proxy( 
    IErrorInfo * This,
     GUID *pGUID);


void __stdcall IErrorInfo_GetGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetSource_Proxy( 
    IErrorInfo * This,
     BSTR *pBstrSource);


void __stdcall IErrorInfo_GetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetDescription_Proxy( 
    IErrorInfo * This,
     BSTR *pBstrDescription);


void __stdcall IErrorInfo_GetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetHelpFile_Proxy( 
    IErrorInfo * This,
     BSTR *pBstrHelpFile);


void __stdcall IErrorInfo_GetHelpFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IErrorInfo_GetHelpContext_Proxy( 
    IErrorInfo * This,
     DWORD *pdwHelpContext);


void __stdcall IErrorInfo_GetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5349 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  ICreateErrorInfo *LPCREATEERRORINFO;


extern const IID IID_ICreateErrorInfo;
























#line 5386 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ICreateErrorInfoVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ICreateErrorInfo * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ICreateErrorInfo * This);
        
        ULONG ( __stdcall *Release )( 
            ICreateErrorInfo * This);
        
        HRESULT ( __stdcall *SetGUID )( 
            ICreateErrorInfo * This,
             const GUID * const rguid);
        
        HRESULT ( __stdcall *SetSource )( 
            ICreateErrorInfo * This,
             LPOLESTR szSource);
        
        HRESULT ( __stdcall *SetDescription )( 
            ICreateErrorInfo * This,
             LPOLESTR szDescription);
        
        HRESULT ( __stdcall *SetHelpFile )( 
            ICreateErrorInfo * This,
             LPOLESTR szHelpFile);
        
        HRESULT ( __stdcall *SetHelpContext )( 
            ICreateErrorInfo * This,
             DWORD dwHelpContext);
        
        
    } ICreateErrorInfoVtbl;

    struct ICreateErrorInfo
    {
         struct ICreateErrorInfoVtbl *lpVtbl;
    };

    
































#line 5464 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall ICreateErrorInfo_SetGUID_Proxy( 
    ICreateErrorInfo * This,
     const GUID * const rguid);


void __stdcall ICreateErrorInfo_SetGUID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetSource_Proxy( 
    ICreateErrorInfo * This,
     LPOLESTR szSource);


void __stdcall ICreateErrorInfo_SetSource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetDescription_Proxy( 
    ICreateErrorInfo * This,
     LPOLESTR szDescription);


void __stdcall ICreateErrorInfo_SetDescription_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetHelpFile_Proxy( 
    ICreateErrorInfo * This,
     LPOLESTR szHelpFile);


void __stdcall ICreateErrorInfo_SetHelpFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICreateErrorInfo_SetHelpContext_Proxy( 
    ICreateErrorInfo * This,
     DWORD dwHelpContext);


void __stdcall ICreateErrorInfo_SetHelpContext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5529 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  ISupportErrorInfo *LPSUPPORTERRORINFO;


extern const IID IID_ISupportErrorInfo;












#line 5554 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ISupportErrorInfoVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ISupportErrorInfo * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ISupportErrorInfo * This);
        
        ULONG ( __stdcall *Release )( 
            ISupportErrorInfo * This);
        
        HRESULT ( __stdcall *InterfaceSupportsErrorInfo )( 
            ISupportErrorInfo * This,
             const IID * const riid);
        
        
    } ISupportErrorInfoVtbl;

    struct ISupportErrorInfo
    {
         struct ISupportErrorInfoVtbl *lpVtbl;
    };

    




















#line 5604 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall ISupportErrorInfo_InterfaceSupportsErrorInfo_Proxy( 
    ISupportErrorInfo * This,
     const IID * const riid);


void __stdcall ISupportErrorInfo_InterfaceSupportsErrorInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5621 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 


extern const IID IID_ITypeFactory;














#line 5646 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ITypeFactoryVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ITypeFactory * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ITypeFactory * This);
        
        ULONG ( __stdcall *Release )( 
            ITypeFactory * This);
        
        HRESULT ( __stdcall *CreateFromTypeInfo )( 
            ITypeFactory * This,
             ITypeInfo *pTypeInfo,
             const IID * const riid,
             IUnknown **ppv);
        
        
    } ITypeFactoryVtbl;

    struct ITypeFactory
    {
         struct ITypeFactoryVtbl *lpVtbl;
    };

    




















#line 5698 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall ITypeFactory_CreateFromTypeInfo_Proxy( 
    ITypeFactory * This,
     ITypeInfo *pTypeInfo,
     const IID * const riid,
     IUnknown **ppv);


void __stdcall ITypeFactory_CreateFromTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5717 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 


extern const IID IID_ITypeMarshal;

































#line 5761 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct ITypeMarshalVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ITypeMarshal * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ITypeMarshal * This);
        
        ULONG ( __stdcall *Release )( 
            ITypeMarshal * This);
        
        HRESULT ( __stdcall *Size )( 
            ITypeMarshal * This,
             PVOID pvType,
             DWORD dwDestContext,
             PVOID pvDestContext,
             ULONG *pSize);
        
        HRESULT ( __stdcall *Marshal )( 
            ITypeMarshal * This,
             PVOID pvType,
             DWORD dwDestContext,
             PVOID pvDestContext,
             ULONG cbBufferLength,
             BYTE *pBuffer,
             ULONG *pcbWritten);
        
        HRESULT ( __stdcall *Unmarshal )( 
            ITypeMarshal * This,
             PVOID pvType,
             DWORD dwFlags,
             ULONG cbBufferLength,
             BYTE *pBuffer,
             ULONG *pcbRead);
        
        HRESULT ( __stdcall *Free )( 
            ITypeMarshal * This,
             PVOID pvType);
        
        
    } ITypeMarshalVtbl;

    struct ITypeMarshal
    {
         struct ITypeMarshalVtbl *lpVtbl;
    };

    





























#line 5844 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall ITypeMarshal_Size_Proxy( 
    ITypeMarshal * This,
     PVOID pvType,
     DWORD dwDestContext,
     PVOID pvDestContext,
     ULONG *pSize);


void __stdcall ITypeMarshal_Size_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeMarshal_Marshal_Proxy( 
    ITypeMarshal * This,
     PVOID pvType,
     DWORD dwDestContext,
     PVOID pvDestContext,
     ULONG cbBufferLength,
     BYTE *pBuffer,
     ULONG *pcbWritten);


void __stdcall ITypeMarshal_Marshal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeMarshal_Unmarshal_Proxy( 
    ITypeMarshal * This,
     PVOID pvType,
     DWORD dwFlags,
     ULONG cbBufferLength,
     BYTE *pBuffer,
     ULONG *pcbRead);


void __stdcall ITypeMarshal_Unmarshal_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ITypeMarshal_Free_Proxy( 
    ITypeMarshal * This,
     PVOID pvType);


void __stdcall ITypeMarshal_Free_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5909 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef  IRecordInfo *LPRECORDINFO;


extern const IID IID_IRecordInfo;






































































#line 5992 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct IRecordInfoVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IRecordInfo * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IRecordInfo * This);
        
        ULONG ( __stdcall *Release )( 
            IRecordInfo * This);
        
        HRESULT ( __stdcall *RecordInit )( 
            IRecordInfo * This,
             PVOID pvNew);
        
        HRESULT ( __stdcall *RecordClear )( 
            IRecordInfo * This,
             PVOID pvExisting);
        
        HRESULT ( __stdcall *RecordCopy )( 
            IRecordInfo * This,
             PVOID pvExisting,
             PVOID pvNew);
        
        HRESULT ( __stdcall *GetGuid )( 
            IRecordInfo * This,
             GUID *pguid);
        
        HRESULT ( __stdcall *GetName )( 
            IRecordInfo * This,
             BSTR *pbstrName);
        
        HRESULT ( __stdcall *GetSize )( 
            IRecordInfo * This,
             ULONG *pcbSize);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IRecordInfo * This,
             ITypeInfo **ppTypeInfo);
        
        HRESULT ( __stdcall *GetField )( 
            IRecordInfo * This,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField);
        
        HRESULT ( __stdcall *GetFieldNoCopy )( 
            IRecordInfo * This,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField,
             PVOID *ppvDataCArray);
        
        HRESULT ( __stdcall *PutField )( 
            IRecordInfo * This,
             ULONG wFlags,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField);
        
        HRESULT ( __stdcall *PutFieldNoCopy )( 
            IRecordInfo * This,
             ULONG wFlags,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField);
        
        HRESULT ( __stdcall *GetFieldNames )( 
            IRecordInfo * This,
             ULONG *pcNames,
             BSTR *rgBstrNames);
        
        BOOL ( __stdcall *IsMatchingType )( 
            IRecordInfo * This,
             IRecordInfo *pRecordInfo);
        
        PVOID ( __stdcall *RecordCreate )( 
            IRecordInfo * This);
        
        HRESULT ( __stdcall *RecordCreateCopy )( 
            IRecordInfo * This,
             PVOID pvSource,
             PVOID *ppvDest);
        
        HRESULT ( __stdcall *RecordDestroy )( 
            IRecordInfo * This,
             PVOID pvRecord);
        
        
    } IRecordInfoVtbl;

    struct IRecordInfo
    {
         struct IRecordInfoVtbl *lpVtbl;
    };

    

































































#line 6160 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall IRecordInfo_RecordInit_Proxy( 
    IRecordInfo * This,
     PVOID pvNew);


void __stdcall IRecordInfo_RecordInit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_RecordClear_Proxy( 
    IRecordInfo * This,
     PVOID pvExisting);


void __stdcall IRecordInfo_RecordClear_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_RecordCopy_Proxy( 
    IRecordInfo * This,
     PVOID pvExisting,
     PVOID pvNew);


void __stdcall IRecordInfo_RecordCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetGuid_Proxy( 
    IRecordInfo * This,
     GUID *pguid);


void __stdcall IRecordInfo_GetGuid_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetName_Proxy( 
    IRecordInfo * This,
     BSTR *pbstrName);


void __stdcall IRecordInfo_GetName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetSize_Proxy( 
    IRecordInfo * This,
     ULONG *pcbSize);


void __stdcall IRecordInfo_GetSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetTypeInfo_Proxy( 
    IRecordInfo * This,
     ITypeInfo **ppTypeInfo);


void __stdcall IRecordInfo_GetTypeInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetField_Proxy( 
    IRecordInfo * This,
     PVOID pvData,
     LPCOLESTR szFieldName,
     VARIANT *pvarField);


void __stdcall IRecordInfo_GetField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetFieldNoCopy_Proxy( 
    IRecordInfo * This,
     PVOID pvData,
     LPCOLESTR szFieldName,
     VARIANT *pvarField,
     PVOID *ppvDataCArray);


void __stdcall IRecordInfo_GetFieldNoCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_PutField_Proxy( 
    IRecordInfo * This,
     ULONG wFlags,
     PVOID pvData,
     LPCOLESTR szFieldName,
     VARIANT *pvarField);


void __stdcall IRecordInfo_PutField_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_PutFieldNoCopy_Proxy( 
    IRecordInfo * This,
     ULONG wFlags,
     PVOID pvData,
     LPCOLESTR szFieldName,
     VARIANT *pvarField);


void __stdcall IRecordInfo_PutFieldNoCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_GetFieldNames_Proxy( 
    IRecordInfo * This,
     ULONG *pcNames,
     BSTR *rgBstrNames);


void __stdcall IRecordInfo_GetFieldNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


BOOL __stdcall IRecordInfo_IsMatchingType_Proxy( 
    IRecordInfo * This,
     IRecordInfo *pRecordInfo);


void __stdcall IRecordInfo_IsMatchingType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


PVOID __stdcall IRecordInfo_RecordCreate_Proxy( 
    IRecordInfo * This);


void __stdcall IRecordInfo_RecordCreate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_RecordCreateCopy_Proxy( 
    IRecordInfo * This,
     PVOID pvSource,
     PVOID *ppvDest);


void __stdcall IRecordInfo_RecordCreateCopy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IRecordInfo_RecordDestroy_Proxy( 
    IRecordInfo * This,
     PVOID pvRecord);


void __stdcall IRecordInfo_RecordDestroy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6370 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef IErrorLog *LPERRORLOG;


extern const IID IID_IErrorLog;













#line 6396 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct IErrorLogVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IErrorLog * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IErrorLog * This);
        
        ULONG ( __stdcall *Release )( 
            IErrorLog * This);
        
        HRESULT ( __stdcall *AddError )( 
            IErrorLog * This,
             LPCOLESTR pszPropName,
             EXCEPINFO *pExcepInfo);
        
        
    } IErrorLogVtbl;

    struct IErrorLog
    {
         struct IErrorLogVtbl *lpVtbl;
    };

    




















#line 6447 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



HRESULT __stdcall IErrorLog_AddError_Proxy( 
    IErrorLog * This,
     LPCOLESTR pszPropName,
     EXCEPINFO *pExcepInfo);


void __stdcall IErrorLog_AddError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6465 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"






 

typedef IPropertyBag *LPPROPERTYBAG;


extern const IID IID_IPropertyBag;


















#line 6496 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"

    typedef struct IPropertyBagVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IPropertyBag * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IPropertyBag * This);
        
        ULONG ( __stdcall *Release )( 
            IPropertyBag * This);
        
         HRESULT ( __stdcall *Read )( 
            IPropertyBag * This,
             LPCOLESTR pszPropName,
             VARIANT *pVar,
             IErrorLog *pErrorLog);
        
        HRESULT ( __stdcall *Write )( 
            IPropertyBag * This,
             LPCOLESTR pszPropName,
             VARIANT *pVar);
        
        
    } IPropertyBagVtbl;

    struct IPropertyBag
    {
         struct IPropertyBagVtbl *lpVtbl;
    };

    























#line 6556 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



 HRESULT __stdcall IPropertyBag_RemoteRead_Proxy( 
    IPropertyBag * This,
     LPCOLESTR pszPropName,
     VARIANT *pVar,
     IErrorLog *pErrorLog,
     DWORD varType,
     IUnknown *pUnkObj);


void __stdcall IPropertyBag_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyBag_Write_Proxy( 
    IPropertyBag * This,
     LPCOLESTR pszPropName,
     VARIANT *pVar);


void __stdcall IPropertyBag_Write_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6590 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



 



#pragma warning(pop)


#line 6601 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"
#line 6602 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"


extern RPC_IF_HANDLE __MIDL_itf_oaidl_0114_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0114_v0_0_s_ifspec;



unsigned long             __stdcall  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __stdcall  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __stdcall  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __stdcall  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __stdcall  CLEANLOCALSTORAGE_UserSize(     unsigned long *, unsigned long            , CLEANLOCALSTORAGE * ); 
unsigned char * __stdcall  CLEANLOCALSTORAGE_UserMarshal(  unsigned long *, unsigned char *, CLEANLOCALSTORAGE * ); 
unsigned char * __stdcall  CLEANLOCALSTORAGE_UserUnmarshal(unsigned long *, unsigned char *, CLEANLOCALSTORAGE * ); 
void                      __stdcall  CLEANLOCALSTORAGE_UserFree(     unsigned long *, CLEANLOCALSTORAGE * ); 

unsigned long             __stdcall  VARIANT_UserSize(     unsigned long *, unsigned long            , VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserMarshal(  unsigned long *, unsigned char *, VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserUnmarshal(unsigned long *, unsigned char *, VARIANT * ); 
void                      __stdcall  VARIANT_UserFree(     unsigned long *, VARIANT * ); 

 HRESULT __stdcall IDispatch_Invoke_Proxy( 
    IDispatch * This,
     DISPID dispIdMember,
     const IID * const riid,
     LCID lcid,
     WORD wFlags,
     DISPPARAMS *pDispParams,
     VARIANT *pVarResult,
     EXCEPINFO *pExcepInfo,
     UINT *puArgErr);


 HRESULT __stdcall IDispatch_Invoke_Stub( 
    IDispatch * This,
     DISPID dispIdMember,
     const IID * const riid,
     LCID lcid,
     DWORD dwFlags,
     DISPPARAMS *pDispParams,
     VARIANT *pVarResult,
     EXCEPINFO *pExcepInfo,
     UINT *pArgErr,
     UINT cVarRef,
     UINT *rgVarRefIdx,
     VARIANTARG *rgVarRef);

 HRESULT __stdcall IEnumVARIANT_Next_Proxy( 
    IEnumVARIANT * This,
     ULONG celt,
     VARIANT *rgVar,
     ULONG *pCeltFetched);


 HRESULT __stdcall IEnumVARIANT_Next_Stub( 
    IEnumVARIANT * This,
     ULONG celt,
     VARIANT *rgVar,
     ULONG *pCeltFetched);

 HRESULT __stdcall ITypeComp_Bind_Proxy( 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo **ppTInfo,
     DESCKIND *pDescKind,
     BINDPTR *pBindPtr);


 HRESULT __stdcall ITypeComp_Bind_Stub( 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo **ppTInfo,
     DESCKIND *pDescKind,
     LPFUNCDESC *ppFuncDesc,
     LPVARDESC *ppVarDesc,
     ITypeComp **ppTypeComp,
     CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeComp_BindType_Proxy( 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo **ppTInfo,
     ITypeComp **ppTComp);


 HRESULT __stdcall ITypeComp_BindType_Stub( 
    ITypeComp * This,
     LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo **ppTInfo);

 HRESULT __stdcall ITypeInfo_GetTypeAttr_Proxy( 
    ITypeInfo * This,
     TYPEATTR **ppTypeAttr);


 HRESULT __stdcall ITypeInfo_GetTypeAttr_Stub( 
    ITypeInfo * This,
     LPTYPEATTR *ppTypeAttr,
     CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeInfo_GetFuncDesc_Proxy( 
    ITypeInfo * This,
     UINT index,
     FUNCDESC **ppFuncDesc);


 HRESULT __stdcall ITypeInfo_GetFuncDesc_Stub( 
    ITypeInfo * This,
     UINT index,
     LPFUNCDESC *ppFuncDesc,
     CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeInfo_GetVarDesc_Proxy( 
    ITypeInfo * This,
     UINT index,
     VARDESC **ppVarDesc);


 HRESULT __stdcall ITypeInfo_GetVarDesc_Stub( 
    ITypeInfo * This,
     UINT index,
     LPVARDESC *ppVarDesc,
     CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeInfo_GetNames_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *rgBstrNames,
     UINT cMaxNames,
     UINT *pcNames);


 HRESULT __stdcall ITypeInfo_GetNames_Stub( 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *rgBstrNames,
     UINT cMaxNames,
     UINT *pcNames);

 HRESULT __stdcall ITypeInfo_GetIDsOfNames_Proxy( 
    ITypeInfo * This,
     LPOLESTR *rgszNames,
     UINT cNames,
     MEMBERID *pMemId);


 HRESULT __stdcall ITypeInfo_GetIDsOfNames_Stub( 
    ITypeInfo * This);

 HRESULT __stdcall ITypeInfo_Invoke_Proxy( 
    ITypeInfo * This,
     PVOID pvInstance,
     MEMBERID memid,
     WORD wFlags,
     DISPPARAMS *pDispParams,
     VARIANT *pVarResult,
     EXCEPINFO *pExcepInfo,
     UINT *puArgErr);


 HRESULT __stdcall ITypeInfo_Invoke_Stub( 
    ITypeInfo * This);

 HRESULT __stdcall ITypeInfo_GetDocumentation_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);


 HRESULT __stdcall ITypeInfo_GetDocumentation_Stub( 
    ITypeInfo * This,
     MEMBERID memid,
     DWORD refPtrFlags,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);

 HRESULT __stdcall ITypeInfo_GetDllEntry_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     BSTR *pBstrDllName,
     BSTR *pBstrName,
     WORD *pwOrdinal);


 HRESULT __stdcall ITypeInfo_GetDllEntry_Stub( 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     DWORD refPtrFlags,
     BSTR *pBstrDllName,
     BSTR *pBstrName,
     WORD *pwOrdinal);

 HRESULT __stdcall ITypeInfo_AddressOfMember_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     PVOID *ppv);


 HRESULT __stdcall ITypeInfo_AddressOfMember_Stub( 
    ITypeInfo * This);

 HRESULT __stdcall ITypeInfo_CreateInstance_Proxy( 
    ITypeInfo * This,
     IUnknown *pUnkOuter,
     const IID * const riid,
     PVOID *ppvObj);


 HRESULT __stdcall ITypeInfo_CreateInstance_Stub( 
    ITypeInfo * This,
     const IID * const riid,
     IUnknown **ppvObj);

 HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Proxy( 
    ITypeInfo * This,
     ITypeLib **ppTLib,
     UINT *pIndex);


 HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Stub( 
    ITypeInfo * This,
     ITypeLib **ppTLib,
     UINT *pIndex);

 void __stdcall ITypeInfo_ReleaseTypeAttr_Proxy( 
    ITypeInfo * This,
     TYPEATTR *pTypeAttr);


 HRESULT __stdcall ITypeInfo_ReleaseTypeAttr_Stub( 
    ITypeInfo * This);

 void __stdcall ITypeInfo_ReleaseFuncDesc_Proxy( 
    ITypeInfo * This,
     FUNCDESC *pFuncDesc);


 HRESULT __stdcall ITypeInfo_ReleaseFuncDesc_Stub( 
    ITypeInfo * This);

 void __stdcall ITypeInfo_ReleaseVarDesc_Proxy( 
    ITypeInfo * This,
     VARDESC *pVarDesc);


 HRESULT __stdcall ITypeInfo_ReleaseVarDesc_Stub( 
    ITypeInfo * This);

 HRESULT __stdcall ITypeInfo2_GetDocumentation2_Proxy( 
    ITypeInfo2 * This,
     MEMBERID memid,
     LCID lcid,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);


 HRESULT __stdcall ITypeInfo2_GetDocumentation2_Stub( 
    ITypeInfo2 * This,
     MEMBERID memid,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);

 UINT __stdcall ITypeLib_GetTypeInfoCount_Proxy( 
    ITypeLib * This);


 HRESULT __stdcall ITypeLib_GetTypeInfoCount_Stub( 
    ITypeLib * This,
     UINT *pcTInfo);

 HRESULT __stdcall ITypeLib_GetLibAttr_Proxy( 
    ITypeLib * This,
     TLIBATTR **ppTLibAttr);


 HRESULT __stdcall ITypeLib_GetLibAttr_Stub( 
    ITypeLib * This,
     LPTLIBATTR *ppTLibAttr,
     CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeLib_GetDocumentation_Proxy( 
    ITypeLib * This,
     INT index,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);


 HRESULT __stdcall ITypeLib_GetDocumentation_Stub( 
    ITypeLib * This,
     INT index,
     DWORD refPtrFlags,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);

 HRESULT __stdcall ITypeLib_IsName_Proxy( 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL *pfName);


 HRESULT __stdcall ITypeLib_IsName_Stub( 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL *pfName,
     BSTR *pBstrLibName);

 HRESULT __stdcall ITypeLib_FindName_Proxy( 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo **ppTInfo,
     MEMBERID *rgMemId,
     USHORT *pcFound);


 HRESULT __stdcall ITypeLib_FindName_Stub( 
    ITypeLib * This,
     LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo **ppTInfo,
     MEMBERID *rgMemId,
     USHORT *pcFound,
     BSTR *pBstrLibName);

 void __stdcall ITypeLib_ReleaseTLibAttr_Proxy( 
    ITypeLib * This,
     TLIBATTR *pTLibAttr);


 HRESULT __stdcall ITypeLib_ReleaseTLibAttr_Stub( 
    ITypeLib * This);

 HRESULT __stdcall ITypeLib2_GetLibStatistics_Proxy( 
    ITypeLib2 * This,
     ULONG *pcUniqueNames,
     ULONG *pcchUniqueNames);


 HRESULT __stdcall ITypeLib2_GetLibStatistics_Stub( 
    ITypeLib2 * This,
     ULONG *pcUniqueNames,
     ULONG *pcchUniqueNames);

 HRESULT __stdcall ITypeLib2_GetDocumentation2_Proxy( 
    ITypeLib2 * This,
     INT index,
     LCID lcid,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);


 HRESULT __stdcall ITypeLib2_GetDocumentation2_Stub( 
    ITypeLib2 * This,
     INT index,
     LCID lcid,
     DWORD refPtrFlags,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);

 HRESULT __stdcall IPropertyBag_Read_Proxy( 
    IPropertyBag * This,
     LPCOLESTR pszPropName,
     VARIANT *pVar,
     IErrorLog *pErrorLog);


 HRESULT __stdcall IPropertyBag_Read_Stub( 
    IPropertyBag * This,
     LPCOLESTR pszPropName,
     VARIANT *pVar,
     IErrorLog *pErrorLog,
     DWORD varType,
     IUnknown *pUnkObj);









#line 7012 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\oaidl.h"



#line 275 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"





void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 







typedef struct _xml_error
    {
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
    } 	XML_ERROR;



extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_v0_0_s_ifspec;






 


























typedef  
enum tagDOMNodeType
    {	NODE_INVALID	= 0,
	NODE_ELEMENT	= NODE_INVALID + 1,
	NODE_ATTRIBUTE	= NODE_ELEMENT + 1,
	NODE_TEXT	= NODE_ATTRIBUTE + 1,
	NODE_CDATA_SECTION	= NODE_TEXT + 1,
	NODE_ENTITY_REFERENCE	= NODE_CDATA_SECTION + 1,
	NODE_ENTITY	= NODE_ENTITY_REFERENCE + 1,
	NODE_PROCESSING_INSTRUCTION	= NODE_ENTITY + 1,
	NODE_COMMENT	= NODE_PROCESSING_INSTRUCTION + 1,
	NODE_DOCUMENT	= NODE_COMMENT + 1,
	NODE_DOCUMENT_TYPE	= NODE_DOCUMENT + 1,
	NODE_DOCUMENT_FRAGMENT	= NODE_DOCUMENT_TYPE + 1,
	NODE_NOTATION	= NODE_DOCUMENT_FRAGMENT + 1
    } 	DOMNodeType;
















typedef  
enum tagXMLEMEM_TYPE
    {	XMLELEMTYPE_ELEMENT	= 0,
	XMLELEMTYPE_TEXT	= XMLELEMTYPE_ELEMENT + 1,
	XMLELEMTYPE_COMMENT	= XMLELEMTYPE_TEXT + 1,
	XMLELEMTYPE_DOCUMENT	= XMLELEMTYPE_COMMENT + 1,
	XMLELEMTYPE_DTD	= XMLELEMTYPE_DOCUMENT + 1,
	XMLELEMTYPE_PI	= XMLELEMTYPE_DTD + 1,
	XMLELEMTYPE_OTHER	= XMLELEMTYPE_PI + 1
    } 	XMLELEM_TYPE;


extern const IID LIBID_MSXML;





 


extern const IID IID_IXMLDOMImplementation;














#line 410 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMImplementationVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMImplementation * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMImplementation * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMImplementation * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMImplementation * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMImplementation * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMImplementation * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMImplementation * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *hasFeature )( 
            IXMLDOMImplementation * This,
             BSTR feature,
             BSTR version,
             VARIANT_BOOL *hasFeature);
        
        
    } IXMLDOMImplementationVtbl;

    struct IXMLDOMImplementation
    {
         struct IXMLDOMImplementationVtbl *lpVtbl;
    };

    

































#line 504 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMImplementation_hasFeature_Proxy( 
    IXMLDOMImplementation * This,
     BSTR feature,
     BSTR version,
     VARIANT_BOOL *hasFeature);


void __stdcall IXMLDOMImplementation_hasFeature_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 523 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMNode;
































































































































#line 662 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMNodeVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMNode * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMNode * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMNode * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMNode * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMNode * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMNode * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMNode * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMNode * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMNode * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMNode * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMNode * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMNode * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMNode * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMNode * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMNode * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMNode * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMNode * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMNode * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMNode * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMNode * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMNode * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMNode * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMNode * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMNode * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMNode * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMNode * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMNode * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMNode * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMNode * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMNode * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMNode * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMNode * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMNode * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMNode * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMNode * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMNode * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMNode * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMNode * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMNode * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMNode * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMNode * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMNode * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMNode * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
        
    } IXMLDOMNodeVtbl;

    struct IXMLDOMNode
    {
         struct IXMLDOMNodeVtbl *lpVtbl;
    };

    










































































































































#line 1010 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMNode_get_nodeName_Proxy( 
    IXMLDOMNode * This,
     BSTR *name);


void __stdcall IXMLDOMNode_get_nodeName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_nodeValue_Proxy( 
    IXMLDOMNode * This,
     VARIANT *value);


void __stdcall IXMLDOMNode_get_nodeValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_put_nodeValue_Proxy( 
    IXMLDOMNode * This,
     VARIANT value);


void __stdcall IXMLDOMNode_put_nodeValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_nodeType_Proxy( 
    IXMLDOMNode * This,
     DOMNodeType *type);


void __stdcall IXMLDOMNode_get_nodeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_parentNode_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode **parent);


void __stdcall IXMLDOMNode_get_parentNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_childNodes_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNodeList **childList);


void __stdcall IXMLDOMNode_get_childNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_firstChild_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode **firstChild);


void __stdcall IXMLDOMNode_get_firstChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_lastChild_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode **lastChild);


void __stdcall IXMLDOMNode_get_lastChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_previousSibling_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode **previousSibling);


void __stdcall IXMLDOMNode_get_previousSibling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_nextSibling_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode **nextSibling);


void __stdcall IXMLDOMNode_get_nextSibling_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_attributes_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNamedNodeMap **attributeMap);


void __stdcall IXMLDOMNode_get_attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_insertBefore_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode *newChild,
     VARIANT refChild,
     IXMLDOMNode **outNewChild);


void __stdcall IXMLDOMNode_insertBefore_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_replaceChild_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode *newChild,
     IXMLDOMNode *oldChild,
     IXMLDOMNode **outOldChild);


void __stdcall IXMLDOMNode_replaceChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_removeChild_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode *childNode,
     IXMLDOMNode **oldChild);


void __stdcall IXMLDOMNode_removeChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_appendChild_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode *newChild,
     IXMLDOMNode **outNewChild);


void __stdcall IXMLDOMNode_appendChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_hasChildNodes_Proxy( 
    IXMLDOMNode * This,
     VARIANT_BOOL *hasChild);


void __stdcall IXMLDOMNode_hasChildNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_ownerDocument_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMDocument **DOMDocument);


void __stdcall IXMLDOMNode_get_ownerDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_cloneNode_Proxy( 
    IXMLDOMNode * This,
     VARIANT_BOOL deep,
     IXMLDOMNode **cloneRoot);


void __stdcall IXMLDOMNode_cloneNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_nodeTypeString_Proxy( 
    IXMLDOMNode * This,
     BSTR *nodeType);


void __stdcall IXMLDOMNode_get_nodeTypeString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_text_Proxy( 
    IXMLDOMNode * This,
     BSTR *text);


void __stdcall IXMLDOMNode_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_put_text_Proxy( 
    IXMLDOMNode * This,
     BSTR text);


void __stdcall IXMLDOMNode_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_specified_Proxy( 
    IXMLDOMNode * This,
     VARIANT_BOOL *isSpecified);


void __stdcall IXMLDOMNode_get_specified_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_definition_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode **definitionNode);


void __stdcall IXMLDOMNode_get_definition_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_nodeTypedValue_Proxy( 
    IXMLDOMNode * This,
     VARIANT *typedValue);


void __stdcall IXMLDOMNode_get_nodeTypedValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_put_nodeTypedValue_Proxy( 
    IXMLDOMNode * This,
     VARIANT typedValue);


void __stdcall IXMLDOMNode_put_nodeTypedValue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_dataType_Proxy( 
    IXMLDOMNode * This,
     VARIANT *dataTypeName);


void __stdcall IXMLDOMNode_get_dataType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_put_dataType_Proxy( 
    IXMLDOMNode * This,
     BSTR dataTypeName);


void __stdcall IXMLDOMNode_put_dataType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_xml_Proxy( 
    IXMLDOMNode * This,
     BSTR *xmlString);


void __stdcall IXMLDOMNode_get_xml_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_transformNode_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode *stylesheet,
     BSTR *xmlString);


void __stdcall IXMLDOMNode_transformNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_selectNodes_Proxy( 
    IXMLDOMNode * This,
     BSTR queryString,
     IXMLDOMNodeList **resultList);


void __stdcall IXMLDOMNode_selectNodes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_selectSingleNode_Proxy( 
    IXMLDOMNode * This,
     BSTR queryString,
     IXMLDOMNode **resultNode);


void __stdcall IXMLDOMNode_selectSingleNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_parsed_Proxy( 
    IXMLDOMNode * This,
     VARIANT_BOOL *isParsed);


void __stdcall IXMLDOMNode_get_parsed_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_namespaceURI_Proxy( 
    IXMLDOMNode * This,
     BSTR *namespaceURI);


void __stdcall IXMLDOMNode_get_namespaceURI_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_prefix_Proxy( 
    IXMLDOMNode * This,
     BSTR *prefixString);


void __stdcall IXMLDOMNode_get_prefix_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_get_baseName_Proxy( 
    IXMLDOMNode * This,
     BSTR *nameString);


void __stdcall IXMLDOMNode_get_baseName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNode_transformNodeToObject_Proxy( 
    IXMLDOMNode * This,
     IXMLDOMNode *stylesheet,
     VARIANT outputObject);


void __stdcall IXMLDOMNode_transformNodeToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1458 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMDocumentFragment;









#line 1478 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMDocumentFragmentVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMDocumentFragment * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMDocumentFragment * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMDocumentFragment * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMDocumentFragment * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMDocumentFragment * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMDocumentFragment * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMDocumentFragment * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMDocumentFragment * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMDocumentFragment * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMDocumentFragment * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMDocumentFragment * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMDocumentFragment * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMDocumentFragment * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMDocumentFragment * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMDocumentFragment * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMDocumentFragment * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMDocumentFragment * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMDocumentFragment * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMDocumentFragment * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMDocumentFragment * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMDocumentFragment * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMDocumentFragment * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMDocumentFragment * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMDocumentFragment * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMDocumentFragment * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMDocumentFragment * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMDocumentFragment * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMDocumentFragment * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMDocumentFragment * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
        
    } IXMLDOMDocumentFragmentVtbl;

    struct IXMLDOMDocumentFragment
    {
         struct IXMLDOMDocumentFragmentVtbl *lpVtbl;
    };

    











































































































































#line 1827 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




#line 1832 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMDocument;


























































































































#line 1965 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMDocumentVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMDocument * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMDocument * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMDocument * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMDocument * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMDocument * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMDocument * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMDocument * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMDocument * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMDocument * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMDocument * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMDocument * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMDocument * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMDocument * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMDocument * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMDocument * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMDocument * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMDocument * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMDocument * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMDocument * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMDocument * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMDocument * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMDocument * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMDocument * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMDocument * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMDocument * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMDocument * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMDocument * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMDocument * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMDocument * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMDocument * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMDocument * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMDocument * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMDocument * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMDocument * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMDocument * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMDocument * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMDocument * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMDocument * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMDocument * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMDocument * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMDocument * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMDocument * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMDocument * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
         HRESULT ( __stdcall *get_doctype )( 
            IXMLDOMDocument * This,
             IXMLDOMDocumentType **documentType);
        
         HRESULT ( __stdcall *get_implementation )( 
            IXMLDOMDocument * This,
             IXMLDOMImplementation **impl);
        
         HRESULT ( __stdcall *get_documentElement )( 
            IXMLDOMDocument * This,
             IXMLDOMElement **DOMElement);
        
         HRESULT ( __stdcall *putref_documentElement )( 
            IXMLDOMDocument * This,
             IXMLDOMElement *DOMElement);
        
         HRESULT ( __stdcall *createElement )( 
            IXMLDOMDocument * This,
             BSTR tagName,
             IXMLDOMElement **element);
        
         HRESULT ( __stdcall *createDocumentFragment )( 
            IXMLDOMDocument * This,
             IXMLDOMDocumentFragment **docFrag);
        
         HRESULT ( __stdcall *createTextNode )( 
            IXMLDOMDocument * This,
             BSTR data,
             IXMLDOMText **text);
        
         HRESULT ( __stdcall *createComment )( 
            IXMLDOMDocument * This,
             BSTR data,
             IXMLDOMComment **comment);
        
         HRESULT ( __stdcall *createCDATASection )( 
            IXMLDOMDocument * This,
             BSTR data,
             IXMLDOMCDATASection **cdata);
        
         HRESULT ( __stdcall *createProcessingInstruction )( 
            IXMLDOMDocument * This,
             BSTR target,
             BSTR data,
             IXMLDOMProcessingInstruction **pi);
        
         HRESULT ( __stdcall *createAttribute )( 
            IXMLDOMDocument * This,
             BSTR name,
             IXMLDOMAttribute **attribute);
        
         HRESULT ( __stdcall *createEntityReference )( 
            IXMLDOMDocument * This,
             BSTR name,
             IXMLDOMEntityReference **entityRef);
        
         HRESULT ( __stdcall *getElementsByTagName )( 
            IXMLDOMDocument * This,
             BSTR tagName,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *createNode )( 
            IXMLDOMDocument * This,
             VARIANT Type,
             BSTR name,
             BSTR namespaceURI,
             IXMLDOMNode **node);
        
         HRESULT ( __stdcall *nodeFromID )( 
            IXMLDOMDocument * This,
             BSTR idString,
             IXMLDOMNode **node);
        
         HRESULT ( __stdcall *load )( 
            IXMLDOMDocument * This,
             VARIANT xmlSource,
             VARIANT_BOOL *isSuccessful);
        
         HRESULT ( __stdcall *get_readyState )( 
            IXMLDOMDocument * This,
             long *value);
        
         HRESULT ( __stdcall *get_parseError )( 
            IXMLDOMDocument * This,
             IXMLDOMParseError **errorObj);
        
         HRESULT ( __stdcall *get_url )( 
            IXMLDOMDocument * This,
             BSTR *urlString);
        
         HRESULT ( __stdcall *get_async )( 
            IXMLDOMDocument * This,
             VARIANT_BOOL *isAsync);
        
         HRESULT ( __stdcall *put_async )( 
            IXMLDOMDocument * This,
             VARIANT_BOOL isAsync);
        
         HRESULT ( __stdcall *abort )( 
            IXMLDOMDocument * This);
        
         HRESULT ( __stdcall *loadXML )( 
            IXMLDOMDocument * This,
             BSTR bstrXML,
             VARIANT_BOOL *isSuccessful);
        
         HRESULT ( __stdcall *save )( 
            IXMLDOMDocument * This,
             VARIANT destination);
        
         HRESULT ( __stdcall *get_validateOnParse )( 
            IXMLDOMDocument * This,
             VARIANT_BOOL *isValidating);
        
         HRESULT ( __stdcall *put_validateOnParse )( 
            IXMLDOMDocument * This,
             VARIANT_BOOL isValidating);
        
         HRESULT ( __stdcall *get_resolveExternals )( 
            IXMLDOMDocument * This,
             VARIANT_BOOL *isResolving);
        
         HRESULT ( __stdcall *put_resolveExternals )( 
            IXMLDOMDocument * This,
             VARIANT_BOOL isResolving);
        
         HRESULT ( __stdcall *get_preserveWhiteSpace )( 
            IXMLDOMDocument * This,
             VARIANT_BOOL *isPreserving);
        
         HRESULT ( __stdcall *put_preserveWhiteSpace )( 
            IXMLDOMDocument * This,
             VARIANT_BOOL isPreserving);
        
         HRESULT ( __stdcall *put_onreadystatechange )( 
            IXMLDOMDocument * This,
             VARIANT readystatechangeSink);
        
         HRESULT ( __stdcall *put_ondataavailable )( 
            IXMLDOMDocument * This,
             VARIANT ondataavailableSink);
        
         HRESULT ( __stdcall *put_ontransformnode )( 
            IXMLDOMDocument * This,
             VARIANT ontransformnodeSink);
        
        
    } IXMLDOMDocumentVtbl;

    struct IXMLDOMDocument
    {
         struct IXMLDOMDocumentVtbl *lpVtbl;
    };

    














































































































































































































































#line 2559 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMDocument_get_doctype_Proxy( 
    IXMLDOMDocument * This,
     IXMLDOMDocumentType **documentType);


void __stdcall IXMLDOMDocument_get_doctype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_implementation_Proxy( 
    IXMLDOMDocument * This,
     IXMLDOMImplementation **impl);


void __stdcall IXMLDOMDocument_get_implementation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_documentElement_Proxy( 
    IXMLDOMDocument * This,
     IXMLDOMElement **DOMElement);


void __stdcall IXMLDOMDocument_get_documentElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_putref_documentElement_Proxy( 
    IXMLDOMDocument * This,
     IXMLDOMElement *DOMElement);


void __stdcall IXMLDOMDocument_putref_documentElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createElement_Proxy( 
    IXMLDOMDocument * This,
     BSTR tagName,
     IXMLDOMElement **element);


void __stdcall IXMLDOMDocument_createElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createDocumentFragment_Proxy( 
    IXMLDOMDocument * This,
     IXMLDOMDocumentFragment **docFrag);


void __stdcall IXMLDOMDocument_createDocumentFragment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createTextNode_Proxy( 
    IXMLDOMDocument * This,
     BSTR data,
     IXMLDOMText **text);


void __stdcall IXMLDOMDocument_createTextNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createComment_Proxy( 
    IXMLDOMDocument * This,
     BSTR data,
     IXMLDOMComment **comment);


void __stdcall IXMLDOMDocument_createComment_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createCDATASection_Proxy( 
    IXMLDOMDocument * This,
     BSTR data,
     IXMLDOMCDATASection **cdata);


void __stdcall IXMLDOMDocument_createCDATASection_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createProcessingInstruction_Proxy( 
    IXMLDOMDocument * This,
     BSTR target,
     BSTR data,
     IXMLDOMProcessingInstruction **pi);


void __stdcall IXMLDOMDocument_createProcessingInstruction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createAttribute_Proxy( 
    IXMLDOMDocument * This,
     BSTR name,
     IXMLDOMAttribute **attribute);


void __stdcall IXMLDOMDocument_createAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createEntityReference_Proxy( 
    IXMLDOMDocument * This,
     BSTR name,
     IXMLDOMEntityReference **entityRef);


void __stdcall IXMLDOMDocument_createEntityReference_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_getElementsByTagName_Proxy( 
    IXMLDOMDocument * This,
     BSTR tagName,
     IXMLDOMNodeList **resultList);


void __stdcall IXMLDOMDocument_getElementsByTagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_createNode_Proxy( 
    IXMLDOMDocument * This,
     VARIANT Type,
     BSTR name,
     BSTR namespaceURI,
     IXMLDOMNode **node);


void __stdcall IXMLDOMDocument_createNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_nodeFromID_Proxy( 
    IXMLDOMDocument * This,
     BSTR idString,
     IXMLDOMNode **node);


void __stdcall IXMLDOMDocument_nodeFromID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_load_Proxy( 
    IXMLDOMDocument * This,
     VARIANT xmlSource,
     VARIANT_BOOL *isSuccessful);


void __stdcall IXMLDOMDocument_load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_readyState_Proxy( 
    IXMLDOMDocument * This,
     long *value);


void __stdcall IXMLDOMDocument_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_parseError_Proxy( 
    IXMLDOMDocument * This,
     IXMLDOMParseError **errorObj);


void __stdcall IXMLDOMDocument_get_parseError_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_url_Proxy( 
    IXMLDOMDocument * This,
     BSTR *urlString);


void __stdcall IXMLDOMDocument_get_url_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_async_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL *isAsync);


void __stdcall IXMLDOMDocument_get_async_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_async_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL isAsync);


void __stdcall IXMLDOMDocument_put_async_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_abort_Proxy( 
    IXMLDOMDocument * This);


void __stdcall IXMLDOMDocument_abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_loadXML_Proxy( 
    IXMLDOMDocument * This,
     BSTR bstrXML,
     VARIANT_BOOL *isSuccessful);


void __stdcall IXMLDOMDocument_loadXML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_save_Proxy( 
    IXMLDOMDocument * This,
     VARIANT destination);


void __stdcall IXMLDOMDocument_save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_validateOnParse_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL *isValidating);


void __stdcall IXMLDOMDocument_get_validateOnParse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_validateOnParse_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL isValidating);


void __stdcall IXMLDOMDocument_put_validateOnParse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_resolveExternals_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL *isResolving);


void __stdcall IXMLDOMDocument_get_resolveExternals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_resolveExternals_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL isResolving);


void __stdcall IXMLDOMDocument_put_resolveExternals_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_get_preserveWhiteSpace_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL *isPreserving);


void __stdcall IXMLDOMDocument_get_preserveWhiteSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_preserveWhiteSpace_Proxy( 
    IXMLDOMDocument * This,
     VARIANT_BOOL isPreserving);


void __stdcall IXMLDOMDocument_put_preserveWhiteSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_onreadystatechange_Proxy( 
    IXMLDOMDocument * This,
     VARIANT readystatechangeSink);


void __stdcall IXMLDOMDocument_put_onreadystatechange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_ondataavailable_Proxy( 
    IXMLDOMDocument * This,
     VARIANT ondataavailableSink);


void __stdcall IXMLDOMDocument_put_ondataavailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocument_put_ontransformnode_Proxy( 
    IXMLDOMDocument * This,
     VARIANT ontransformnodeSink);


void __stdcall IXMLDOMDocument_put_ontransformnode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2974 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMNodeList;
























#line 3009 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMNodeListVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMNodeList * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMNodeList * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMNodeList * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMNodeList * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMNodeList * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMNodeList * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMNodeList * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_item )( 
            IXMLDOMNodeList * This,
             long index,
             IXMLDOMNode **listItem);
        
         HRESULT ( __stdcall *get_length )( 
            IXMLDOMNodeList * This,
             long *listLength);
        
         HRESULT ( __stdcall *nextNode )( 
            IXMLDOMNodeList * This,
             IXMLDOMNode **nextItem);
        
         HRESULT ( __stdcall *reset )( 
            IXMLDOMNodeList * This);
        
         HRESULT ( __stdcall *get__newEnum )( 
            IXMLDOMNodeList * This,
             IUnknown **ppUnk);
        
        
    } IXMLDOMNodeListVtbl;

    struct IXMLDOMNodeList
    {
         struct IXMLDOMNodeListVtbl *lpVtbl;
    };

    













































#line 3129 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMNodeList_get_item_Proxy( 
    IXMLDOMNodeList * This,
     long index,
     IXMLDOMNode **listItem);


void __stdcall IXMLDOMNodeList_get_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNodeList_get_length_Proxy( 
    IXMLDOMNodeList * This,
     long *listLength);


void __stdcall IXMLDOMNodeList_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNodeList_nextNode_Proxy( 
    IXMLDOMNodeList * This,
     IXMLDOMNode **nextItem);


void __stdcall IXMLDOMNodeList_nextNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNodeList_reset_Proxy( 
    IXMLDOMNodeList * This);


void __stdcall IXMLDOMNodeList_reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNodeList_get__newEnum_Proxy( 
    IXMLDOMNodeList * This,
     IUnknown **ppUnk);


void __stdcall IXMLDOMNodeList_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3194 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMNamedNodeMap;














































#line 3251 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMNamedNodeMapVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMNamedNodeMap * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMNamedNodeMap * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMNamedNodeMap * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMNamedNodeMap * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMNamedNodeMap * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMNamedNodeMap * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMNamedNodeMap * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *getNamedItem )( 
            IXMLDOMNamedNodeMap * This,
             BSTR name,
             IXMLDOMNode **namedItem);
        
         HRESULT ( __stdcall *setNamedItem )( 
            IXMLDOMNamedNodeMap * This,
             IXMLDOMNode *newItem,
             IXMLDOMNode **nameItem);
        
         HRESULT ( __stdcall *removeNamedItem )( 
            IXMLDOMNamedNodeMap * This,
             BSTR name,
             IXMLDOMNode **namedItem);
        
         HRESULT ( __stdcall *get_item )( 
            IXMLDOMNamedNodeMap * This,
             long index,
             IXMLDOMNode **listItem);
        
         HRESULT ( __stdcall *get_length )( 
            IXMLDOMNamedNodeMap * This,
             long *listLength);
        
         HRESULT ( __stdcall *getQualifiedItem )( 
            IXMLDOMNamedNodeMap * This,
             BSTR baseName,
             BSTR namespaceURI,
             IXMLDOMNode **qualifiedItem);
        
         HRESULT ( __stdcall *removeQualifiedItem )( 
            IXMLDOMNamedNodeMap * This,
             BSTR baseName,
             BSTR namespaceURI,
             IXMLDOMNode **qualifiedItem);
        
         HRESULT ( __stdcall *nextNode )( 
            IXMLDOMNamedNodeMap * This,
             IXMLDOMNode **nextItem);
        
         HRESULT ( __stdcall *reset )( 
            IXMLDOMNamedNodeMap * This);
        
         HRESULT ( __stdcall *get__newEnum )( 
            IXMLDOMNamedNodeMap * This,
             IUnknown **ppUnk);
        
        
    } IXMLDOMNamedNodeMapVtbl;

    struct IXMLDOMNamedNodeMap
    {
         struct IXMLDOMNamedNodeMapVtbl *lpVtbl;
    };

    




























































#line 3413 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMNamedNodeMap_getNamedItem_Proxy( 
    IXMLDOMNamedNodeMap * This,
     BSTR name,
     IXMLDOMNode **namedItem);


void __stdcall IXMLDOMNamedNodeMap_getNamedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_setNamedItem_Proxy( 
    IXMLDOMNamedNodeMap * This,
     IXMLDOMNode *newItem,
     IXMLDOMNode **nameItem);


void __stdcall IXMLDOMNamedNodeMap_setNamedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_removeNamedItem_Proxy( 
    IXMLDOMNamedNodeMap * This,
     BSTR name,
     IXMLDOMNode **namedItem);


void __stdcall IXMLDOMNamedNodeMap_removeNamedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_get_item_Proxy( 
    IXMLDOMNamedNodeMap * This,
     long index,
     IXMLDOMNode **listItem);


void __stdcall IXMLDOMNamedNodeMap_get_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_get_length_Proxy( 
    IXMLDOMNamedNodeMap * This,
     long *listLength);


void __stdcall IXMLDOMNamedNodeMap_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_getQualifiedItem_Proxy( 
    IXMLDOMNamedNodeMap * This,
     BSTR baseName,
     BSTR namespaceURI,
     IXMLDOMNode **qualifiedItem);


void __stdcall IXMLDOMNamedNodeMap_getQualifiedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_removeQualifiedItem_Proxy( 
    IXMLDOMNamedNodeMap * This,
     BSTR baseName,
     BSTR namespaceURI,
     IXMLDOMNode **qualifiedItem);


void __stdcall IXMLDOMNamedNodeMap_removeQualifiedItem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_nextNode_Proxy( 
    IXMLDOMNamedNodeMap * This,
     IXMLDOMNode **nextItem);


void __stdcall IXMLDOMNamedNodeMap_nextNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_reset_Proxy( 
    IXMLDOMNamedNodeMap * This);


void __stdcall IXMLDOMNamedNodeMap_reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNamedNodeMap_get__newEnum_Proxy( 
    IXMLDOMNamedNodeMap * This,
     IUnknown **ppUnk);


void __stdcall IXMLDOMNamedNodeMap_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3545 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMCharacterData;







































#line 3595 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMCharacterDataVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMCharacterData * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMCharacterData * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMCharacterData * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMCharacterData * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMCharacterData * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMCharacterData * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMCharacterData * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMCharacterData * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMCharacterData * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMCharacterData * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMCharacterData * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMCharacterData * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMCharacterData * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMCharacterData * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMCharacterData * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMCharacterData * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMCharacterData * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMCharacterData * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMCharacterData * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMCharacterData * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMCharacterData * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMCharacterData * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMCharacterData * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMCharacterData * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMCharacterData * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMCharacterData * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMCharacterData * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMCharacterData * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMCharacterData * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMCharacterData * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
         HRESULT ( __stdcall *get_data )( 
            IXMLDOMCharacterData * This,
             BSTR *data);
        
         HRESULT ( __stdcall *put_data )( 
            IXMLDOMCharacterData * This,
             BSTR data);
        
         HRESULT ( __stdcall *get_length )( 
            IXMLDOMCharacterData * This,
             long *dataLength);
        
         HRESULT ( __stdcall *substringData )( 
            IXMLDOMCharacterData * This,
             long offset,
             long count,
             BSTR *data);
        
         HRESULT ( __stdcall *appendData )( 
            IXMLDOMCharacterData * This,
             BSTR data);
        
         HRESULT ( __stdcall *insertData )( 
            IXMLDOMCharacterData * This,
             long offset,
             BSTR data);
        
         HRESULT ( __stdcall *deleteData )( 
            IXMLDOMCharacterData * This,
             long offset,
             long count);
        
         HRESULT ( __stdcall *replaceData )( 
            IXMLDOMCharacterData * This,
             long offset,
             long count,
             BSTR data);
        
        
    } IXMLDOMCharacterDataVtbl;

    struct IXMLDOMCharacterData
    {
         struct IXMLDOMCharacterDataVtbl *lpVtbl;
    };

    



































































































































































#line 4006 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMCharacterData_get_data_Proxy( 
    IXMLDOMCharacterData * This,
     BSTR *data);


void __stdcall IXMLDOMCharacterData_get_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_put_data_Proxy( 
    IXMLDOMCharacterData * This,
     BSTR data);


void __stdcall IXMLDOMCharacterData_put_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_get_length_Proxy( 
    IXMLDOMCharacterData * This,
     long *dataLength);


void __stdcall IXMLDOMCharacterData_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_substringData_Proxy( 
    IXMLDOMCharacterData * This,
     long offset,
     long count,
     BSTR *data);


void __stdcall IXMLDOMCharacterData_substringData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_appendData_Proxy( 
    IXMLDOMCharacterData * This,
     BSTR data);


void __stdcall IXMLDOMCharacterData_appendData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_insertData_Proxy( 
    IXMLDOMCharacterData * This,
     long offset,
     BSTR data);


void __stdcall IXMLDOMCharacterData_insertData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_deleteData_Proxy( 
    IXMLDOMCharacterData * This,
     long offset,
     long count);


void __stdcall IXMLDOMCharacterData_deleteData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMCharacterData_replaceData_Proxy( 
    IXMLDOMCharacterData * This,
     long offset,
     long count,
     BSTR data);


void __stdcall IXMLDOMCharacterData_replaceData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4113 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMAttribute;


















#line 4142 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMAttributeVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMAttribute * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMAttribute * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMAttribute * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMAttribute * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMAttribute * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMAttribute * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMAttribute * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMAttribute * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMAttribute * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMAttribute * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMAttribute * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMAttribute * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMAttribute * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMAttribute * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMAttribute * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMAttribute * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMAttribute * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMAttribute * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMAttribute * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMAttribute * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMAttribute * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMAttribute * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMAttribute * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMAttribute * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMAttribute * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMAttribute * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMAttribute * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMAttribute * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMAttribute * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMAttribute * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMAttribute * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMAttribute * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMAttribute * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMAttribute * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMAttribute * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMAttribute * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMAttribute * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMAttribute * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMAttribute * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMAttribute * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMAttribute * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMAttribute * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMAttribute * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
         HRESULT ( __stdcall *get_name )( 
            IXMLDOMAttribute * This,
             BSTR *attributeName);
        
         HRESULT ( __stdcall *get_value )( 
            IXMLDOMAttribute * This,
             VARIANT *attributeValue);
        
         HRESULT ( __stdcall *put_value )( 
            IXMLDOMAttribute * This,
             VARIANT attributeValue);
        
        
    } IXMLDOMAttributeVtbl;

    struct IXMLDOMAttribute
    {
         struct IXMLDOMAttributeVtbl *lpVtbl;
    };

    




















































































































































#line 4512 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMAttribute_get_name_Proxy( 
    IXMLDOMAttribute * This,
     BSTR *attributeName);


void __stdcall IXMLDOMAttribute_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMAttribute_get_value_Proxy( 
    IXMLDOMAttribute * This,
     VARIANT *attributeValue);


void __stdcall IXMLDOMAttribute_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMAttribute_put_value_Proxy( 
    IXMLDOMAttribute * This,
     VARIANT attributeValue);


void __stdcall IXMLDOMAttribute_put_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4553 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMElement;









































#line 4605 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMElementVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMElement * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMElement * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMElement * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMElement * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMElement * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMElement * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMElement * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMElement * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMElement * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMElement * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMElement * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMElement * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMElement * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMElement * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMElement * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMElement * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMElement * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMElement * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMElement * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMElement * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMElement * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMElement * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMElement * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMElement * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMElement * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMElement * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMElement * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMElement * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMElement * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMElement * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMElement * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMElement * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMElement * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMElement * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMElement * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMElement * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMElement * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMElement * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMElement * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMElement * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMElement * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMElement * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMElement * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
         HRESULT ( __stdcall *get_tagName )( 
            IXMLDOMElement * This,
             BSTR *tagName);
        
         HRESULT ( __stdcall *getAttribute )( 
            IXMLDOMElement * This,
             BSTR name,
             VARIANT *value);
        
         HRESULT ( __stdcall *setAttribute )( 
            IXMLDOMElement * This,
             BSTR name,
             VARIANT value);
        
         HRESULT ( __stdcall *removeAttribute )( 
            IXMLDOMElement * This,
             BSTR name);
        
         HRESULT ( __stdcall *getAttributeNode )( 
            IXMLDOMElement * This,
             BSTR name,
             IXMLDOMAttribute **attributeNode);
        
         HRESULT ( __stdcall *setAttributeNode )( 
            IXMLDOMElement * This,
             IXMLDOMAttribute *DOMAttribute,
             IXMLDOMAttribute **attributeNode);
        
         HRESULT ( __stdcall *removeAttributeNode )( 
            IXMLDOMElement * This,
             IXMLDOMAttribute *DOMAttribute,
             IXMLDOMAttribute **attributeNode);
        
         HRESULT ( __stdcall *getElementsByTagName )( 
            IXMLDOMElement * This,
             BSTR tagName,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *normalize )( 
            IXMLDOMElement * This);
        
        
    } IXMLDOMElementVtbl;

    struct IXMLDOMElement
    {
         struct IXMLDOMElementVtbl *lpVtbl;
    };

    






































































































































































#line 5022 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMElement_get_tagName_Proxy( 
    IXMLDOMElement * This,
     BSTR *tagName);


void __stdcall IXMLDOMElement_get_tagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_getAttribute_Proxy( 
    IXMLDOMElement * This,
     BSTR name,
     VARIANT *value);


void __stdcall IXMLDOMElement_getAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_setAttribute_Proxy( 
    IXMLDOMElement * This,
     BSTR name,
     VARIANT value);


void __stdcall IXMLDOMElement_setAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_removeAttribute_Proxy( 
    IXMLDOMElement * This,
     BSTR name);


void __stdcall IXMLDOMElement_removeAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_getAttributeNode_Proxy( 
    IXMLDOMElement * This,
     BSTR name,
     IXMLDOMAttribute **attributeNode);


void __stdcall IXMLDOMElement_getAttributeNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_setAttributeNode_Proxy( 
    IXMLDOMElement * This,
     IXMLDOMAttribute *DOMAttribute,
     IXMLDOMAttribute **attributeNode);


void __stdcall IXMLDOMElement_setAttributeNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_removeAttributeNode_Proxy( 
    IXMLDOMElement * This,
     IXMLDOMAttribute *DOMAttribute,
     IXMLDOMAttribute **attributeNode);


void __stdcall IXMLDOMElement_removeAttributeNode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_getElementsByTagName_Proxy( 
    IXMLDOMElement * This,
     BSTR tagName,
     IXMLDOMNodeList **resultList);


void __stdcall IXMLDOMElement_getElementsByTagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMElement_normalize_Proxy( 
    IXMLDOMElement * This);


void __stdcall IXMLDOMElement_normalize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5140 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMText;













#line 5164 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMTextVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMText * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMText * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMText * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMText * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMText * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMText * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMText * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMText * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMText * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMText * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMText * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMText * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMText * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMText * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMText * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMText * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMText * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMText * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMText * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMText * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMText * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMText * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMText * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMText * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMText * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMText * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMText * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMText * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMText * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMText * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMText * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMText * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMText * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMText * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMText * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMText * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMText * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMText * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMText * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMText * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMText * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMText * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMText * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
         HRESULT ( __stdcall *get_data )( 
            IXMLDOMText * This,
             BSTR *data);
        
         HRESULT ( __stdcall *put_data )( 
            IXMLDOMText * This,
             BSTR data);
        
         HRESULT ( __stdcall *get_length )( 
            IXMLDOMText * This,
             long *dataLength);
        
         HRESULT ( __stdcall *substringData )( 
            IXMLDOMText * This,
             long offset,
             long count,
             BSTR *data);
        
         HRESULT ( __stdcall *appendData )( 
            IXMLDOMText * This,
             BSTR data);
        
         HRESULT ( __stdcall *insertData )( 
            IXMLDOMText * This,
             long offset,
             BSTR data);
        
         HRESULT ( __stdcall *deleteData )( 
            IXMLDOMText * This,
             long offset,
             long count);
        
         HRESULT ( __stdcall *replaceData )( 
            IXMLDOMText * This,
             long offset,
             long count,
             BSTR data);
        
         HRESULT ( __stdcall *splitText )( 
            IXMLDOMText * This,
             long offset,
             IXMLDOMText **rightHandTextNode);
        
        
    } IXMLDOMTextVtbl;

    struct IXMLDOMText
    {
         struct IXMLDOMTextVtbl *lpVtbl;
    };

    







































































































































































#line 5584 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMText_splitText_Proxy( 
    IXMLDOMText * This,
     long offset,
     IXMLDOMText **rightHandTextNode);


void __stdcall IXMLDOMText_splitText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5602 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMComment;









#line 5622 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMCommentVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMComment * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMComment * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMComment * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMComment * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMComment * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMComment * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMComment * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMComment * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMComment * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMComment * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMComment * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMComment * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMComment * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMComment * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMComment * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMComment * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMComment * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMComment * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMComment * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMComment * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMComment * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMComment * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMComment * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMComment * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMComment * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMComment * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMComment * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMComment * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMComment * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMComment * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMComment * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMComment * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMComment * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMComment * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMComment * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMComment * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMComment * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMComment * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMComment * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMComment * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMComment * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMComment * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMComment * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
         HRESULT ( __stdcall *get_data )( 
            IXMLDOMComment * This,
             BSTR *data);
        
         HRESULT ( __stdcall *put_data )( 
            IXMLDOMComment * This,
             BSTR data);
        
         HRESULT ( __stdcall *get_length )( 
            IXMLDOMComment * This,
             long *dataLength);
        
         HRESULT ( __stdcall *substringData )( 
            IXMLDOMComment * This,
             long offset,
             long count,
             BSTR *data);
        
         HRESULT ( __stdcall *appendData )( 
            IXMLDOMComment * This,
             BSTR data);
        
         HRESULT ( __stdcall *insertData )( 
            IXMLDOMComment * This,
             long offset,
             BSTR data);
        
         HRESULT ( __stdcall *deleteData )( 
            IXMLDOMComment * This,
             long offset,
             long count);
        
         HRESULT ( __stdcall *replaceData )( 
            IXMLDOMComment * This,
             long offset,
             long count,
             BSTR data);
        
        
    } IXMLDOMCommentVtbl;

    struct IXMLDOMComment
    {
         struct IXMLDOMCommentVtbl *lpVtbl;
    };

    




































































































































































#line 6034 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




#line 6039 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMProcessingInstruction;


















#line 6068 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMProcessingInstructionVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMProcessingInstruction * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMProcessingInstruction * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMProcessingInstruction * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMProcessingInstruction * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMProcessingInstruction * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMProcessingInstruction * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMProcessingInstruction * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMProcessingInstruction * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMProcessingInstruction * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMProcessingInstruction * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMProcessingInstruction * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMProcessingInstruction * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMProcessingInstruction * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMProcessingInstruction * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMProcessingInstruction * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMProcessingInstruction * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMProcessingInstruction * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMProcessingInstruction * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMProcessingInstruction * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMProcessingInstruction * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMProcessingInstruction * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMProcessingInstruction * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMProcessingInstruction * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMProcessingInstruction * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMProcessingInstruction * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMProcessingInstruction * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMProcessingInstruction * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMProcessingInstruction * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMProcessingInstruction * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
         HRESULT ( __stdcall *get_target )( 
            IXMLDOMProcessingInstruction * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_data )( 
            IXMLDOMProcessingInstruction * This,
             BSTR *value);
        
         HRESULT ( __stdcall *put_data )( 
            IXMLDOMProcessingInstruction * This,
             BSTR value);
        
        
    } IXMLDOMProcessingInstructionVtbl;

    struct IXMLDOMProcessingInstruction
    {
         struct IXMLDOMProcessingInstructionVtbl *lpVtbl;
    };

    




















































































































































#line 6438 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMProcessingInstruction_get_target_Proxy( 
    IXMLDOMProcessingInstruction * This,
     BSTR *name);


void __stdcall IXMLDOMProcessingInstruction_get_target_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMProcessingInstruction_get_data_Proxy( 
    IXMLDOMProcessingInstruction * This,
     BSTR *value);


void __stdcall IXMLDOMProcessingInstruction_get_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMProcessingInstruction_put_data_Proxy( 
    IXMLDOMProcessingInstruction * This,
     BSTR value);


void __stdcall IXMLDOMProcessingInstruction_put_data_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6479 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMCDATASection;









#line 6499 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMCDATASectionVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMCDATASection * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMCDATASection * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMCDATASection * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMCDATASection * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMCDATASection * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMCDATASection * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMCDATASection * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMCDATASection * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMCDATASection * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMCDATASection * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMCDATASection * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMCDATASection * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMCDATASection * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMCDATASection * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMCDATASection * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMCDATASection * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMCDATASection * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMCDATASection * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMCDATASection * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMCDATASection * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMCDATASection * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMCDATASection * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMCDATASection * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMCDATASection * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMCDATASection * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMCDATASection * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMCDATASection * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMCDATASection * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMCDATASection * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMCDATASection * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
         HRESULT ( __stdcall *get_data )( 
            IXMLDOMCDATASection * This,
             BSTR *data);
        
         HRESULT ( __stdcall *put_data )( 
            IXMLDOMCDATASection * This,
             BSTR data);
        
         HRESULT ( __stdcall *get_length )( 
            IXMLDOMCDATASection * This,
             long *dataLength);
        
         HRESULT ( __stdcall *substringData )( 
            IXMLDOMCDATASection * This,
             long offset,
             long count,
             BSTR *data);
        
         HRESULT ( __stdcall *appendData )( 
            IXMLDOMCDATASection * This,
             BSTR data);
        
         HRESULT ( __stdcall *insertData )( 
            IXMLDOMCDATASection * This,
             long offset,
             BSTR data);
        
         HRESULT ( __stdcall *deleteData )( 
            IXMLDOMCDATASection * This,
             long offset,
             long count);
        
         HRESULT ( __stdcall *replaceData )( 
            IXMLDOMCDATASection * This,
             long offset,
             long count,
             BSTR data);
        
         HRESULT ( __stdcall *splitText )( 
            IXMLDOMCDATASection * This,
             long offset,
             IXMLDOMText **rightHandTextNode);
        
        
    } IXMLDOMCDATASectionVtbl;

    struct IXMLDOMCDATASection
    {
         struct IXMLDOMCDATASectionVtbl *lpVtbl;
    };

    








































































































































































#line 6920 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




#line 6925 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMDocumentType;


















#line 6954 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMDocumentTypeVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMDocumentType * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMDocumentType * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMDocumentType * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMDocumentType * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMDocumentType * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMDocumentType * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMDocumentType * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMDocumentType * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMDocumentType * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMDocumentType * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMDocumentType * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMDocumentType * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMDocumentType * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMDocumentType * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMDocumentType * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMDocumentType * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMDocumentType * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMDocumentType * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMDocumentType * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMDocumentType * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMDocumentType * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMDocumentType * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMDocumentType * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMDocumentType * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMDocumentType * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMDocumentType * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMDocumentType * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMDocumentType * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMDocumentType * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
         HRESULT ( __stdcall *get_name )( 
            IXMLDOMDocumentType * This,
             BSTR *rootName);
        
         HRESULT ( __stdcall *get_entities )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNamedNodeMap **entityMap);
        
         HRESULT ( __stdcall *get_notations )( 
            IXMLDOMDocumentType * This,
             IXMLDOMNamedNodeMap **notationMap);
        
        
    } IXMLDOMDocumentTypeVtbl;

    struct IXMLDOMDocumentType
    {
         struct IXMLDOMDocumentTypeVtbl *lpVtbl;
    };

    




















































































































































#line 7324 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMDocumentType_get_name_Proxy( 
    IXMLDOMDocumentType * This,
     BSTR *rootName);


void __stdcall IXMLDOMDocumentType_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocumentType_get_entities_Proxy( 
    IXMLDOMDocumentType * This,
     IXMLDOMNamedNodeMap **entityMap);


void __stdcall IXMLDOMDocumentType_get_entities_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMDocumentType_get_notations_Proxy( 
    IXMLDOMDocumentType * This,
     IXMLDOMNamedNodeMap **notationMap);


void __stdcall IXMLDOMDocumentType_get_notations_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7365 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMNotation;















#line 7391 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMNotationVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMNotation * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMNotation * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMNotation * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMNotation * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMNotation * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMNotation * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMNotation * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMNotation * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMNotation * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMNotation * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMNotation * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMNotation * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMNotation * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMNotation * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMNotation * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMNotation * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMNotation * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMNotation * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMNotation * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMNotation * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMNotation * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMNotation * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMNotation * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMNotation * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMNotation * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMNotation * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMNotation * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMNotation * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMNotation * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMNotation * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMNotation * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMNotation * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMNotation * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMNotation * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMNotation * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMNotation * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMNotation * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMNotation * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMNotation * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMNotation * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMNotation * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMNotation * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMNotation * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
         HRESULT ( __stdcall *get_publicId )( 
            IXMLDOMNotation * This,
             VARIANT *publicID);
        
         HRESULT ( __stdcall *get_systemId )( 
            IXMLDOMNotation * This,
             VARIANT *systemID);
        
        
    } IXMLDOMNotationVtbl;

    struct IXMLDOMNotation
    {
         struct IXMLDOMNotationVtbl *lpVtbl;
    };

    

















































































































































#line 7754 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMNotation_get_publicId_Proxy( 
    IXMLDOMNotation * This,
     VARIANT *publicID);


void __stdcall IXMLDOMNotation_get_publicId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMNotation_get_systemId_Proxy( 
    IXMLDOMNotation * This,
     VARIANT *systemID);


void __stdcall IXMLDOMNotation_get_systemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7783 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMEntity;


















#line 7812 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMEntityVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMEntity * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMEntity * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMEntity * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMEntity * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMEntity * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMEntity * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMEntity * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMEntity * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMEntity * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMEntity * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMEntity * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMEntity * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMEntity * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMEntity * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMEntity * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMEntity * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMEntity * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMEntity * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMEntity * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMEntity * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMEntity * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMEntity * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMEntity * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMEntity * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMEntity * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMEntity * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMEntity * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMEntity * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMEntity * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMEntity * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMEntity * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMEntity * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMEntity * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMEntity * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMEntity * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMEntity * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMEntity * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMEntity * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMEntity * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMEntity * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMEntity * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMEntity * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMEntity * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
         HRESULT ( __stdcall *get_publicId )( 
            IXMLDOMEntity * This,
             VARIANT *publicID);
        
         HRESULT ( __stdcall *get_systemId )( 
            IXMLDOMEntity * This,
             VARIANT *systemID);
        
         HRESULT ( __stdcall *get_notationName )( 
            IXMLDOMEntity * This,
             BSTR *name);
        
        
    } IXMLDOMEntityVtbl;

    struct IXMLDOMEntity
    {
         struct IXMLDOMEntityVtbl *lpVtbl;
    };

    




















































































































































#line 8182 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMEntity_get_publicId_Proxy( 
    IXMLDOMEntity * This,
     VARIANT *publicID);


void __stdcall IXMLDOMEntity_get_publicId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMEntity_get_systemId_Proxy( 
    IXMLDOMEntity * This,
     VARIANT *systemID);


void __stdcall IXMLDOMEntity_get_systemId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMEntity_get_notationName_Proxy( 
    IXMLDOMEntity * This,
     BSTR *name);


void __stdcall IXMLDOMEntity_get_notationName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8223 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMEntityReference;









#line 8243 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMEntityReferenceVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMEntityReference * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMEntityReference * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMEntityReference * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMEntityReference * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMEntityReference * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMEntityReference * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMEntityReference * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXMLDOMEntityReference * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXMLDOMEntityReference * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXMLDOMEntityReference * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXMLDOMEntityReference * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXMLDOMEntityReference * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXMLDOMEntityReference * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXMLDOMEntityReference * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXMLDOMEntityReference * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLDOMEntityReference * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLDOMEntityReference * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXMLDOMEntityReference * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXMLDOMEntityReference * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXMLDOMEntityReference * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXMLDOMEntityReference * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXMLDOMEntityReference * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXMLDOMEntityReference * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXMLDOMEntityReference * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXMLDOMEntityReference * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXMLDOMEntityReference * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXMLDOMEntityReference * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXMLDOMEntityReference * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXMLDOMEntityReference * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXMLDOMEntityReference * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
        
    } IXMLDOMEntityReferenceVtbl;

    struct IXMLDOMEntityReference
    {
         struct IXMLDOMEntityReferenceVtbl *lpVtbl;
    };

    











































































































































#line 8592 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"




#line 8597 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDOMParseError;






























#line 8638 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDOMParseErrorVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDOMParseError * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDOMParseError * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDOMParseError * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDOMParseError * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDOMParseError * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDOMParseError * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDOMParseError * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_errorCode )( 
            IXMLDOMParseError * This,
             long *errorCode);
        
         HRESULT ( __stdcall *get_url )( 
            IXMLDOMParseError * This,
             BSTR *urlString);
        
         HRESULT ( __stdcall *get_reason )( 
            IXMLDOMParseError * This,
             BSTR *reasonString);
        
         HRESULT ( __stdcall *get_srcText )( 
            IXMLDOMParseError * This,
             BSTR *sourceString);
        
         HRESULT ( __stdcall *get_line )( 
            IXMLDOMParseError * This,
             long *lineNumber);
        
         HRESULT ( __stdcall *get_linepos )( 
            IXMLDOMParseError * This,
             long *linePosition);
        
         HRESULT ( __stdcall *get_filepos )( 
            IXMLDOMParseError * This,
             long *filePosition);
        
        
    } IXMLDOMParseErrorVtbl;

    struct IXMLDOMParseError
    {
         struct IXMLDOMParseErrorVtbl *lpVtbl;
    };

    



















































#line 8772 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDOMParseError_get_errorCode_Proxy( 
    IXMLDOMParseError * This,
     long *errorCode);


void __stdcall IXMLDOMParseError_get_errorCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMParseError_get_url_Proxy( 
    IXMLDOMParseError * This,
     BSTR *urlString);


void __stdcall IXMLDOMParseError_get_url_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMParseError_get_reason_Proxy( 
    IXMLDOMParseError * This,
     BSTR *reasonString);


void __stdcall IXMLDOMParseError_get_reason_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMParseError_get_srcText_Proxy( 
    IXMLDOMParseError * This,
     BSTR *sourceString);


void __stdcall IXMLDOMParseError_get_srcText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMParseError_get_line_Proxy( 
    IXMLDOMParseError * This,
     long *lineNumber);


void __stdcall IXMLDOMParseError_get_line_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMParseError_get_linepos_Proxy( 
    IXMLDOMParseError * This,
     long *linePosition);


void __stdcall IXMLDOMParseError_get_linepos_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDOMParseError_get_filepos_Proxy( 
    IXMLDOMParseError * This,
     long *filePosition);


void __stdcall IXMLDOMParseError_get_filepos_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8861 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXTLRuntime;




















































#line 8924 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXTLRuntimeVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXTLRuntime * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXTLRuntime * This);
        
        ULONG ( __stdcall *Release )( 
            IXTLRuntime * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXTLRuntime * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXTLRuntime * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXTLRuntime * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXTLRuntime * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_nodeName )( 
            IXTLRuntime * This,
             BSTR *name);
        
         HRESULT ( __stdcall *get_nodeValue )( 
            IXTLRuntime * This,
             VARIANT *value);
        
         HRESULT ( __stdcall *put_nodeValue )( 
            IXTLRuntime * This,
             VARIANT value);
        
         HRESULT ( __stdcall *get_nodeType )( 
            IXTLRuntime * This,
             DOMNodeType *type);
        
         HRESULT ( __stdcall *get_parentNode )( 
            IXTLRuntime * This,
             IXMLDOMNode **parent);
        
         HRESULT ( __stdcall *get_childNodes )( 
            IXTLRuntime * This,
             IXMLDOMNodeList **childList);
        
         HRESULT ( __stdcall *get_firstChild )( 
            IXTLRuntime * This,
             IXMLDOMNode **firstChild);
        
         HRESULT ( __stdcall *get_lastChild )( 
            IXTLRuntime * This,
             IXMLDOMNode **lastChild);
        
         HRESULT ( __stdcall *get_previousSibling )( 
            IXTLRuntime * This,
             IXMLDOMNode **previousSibling);
        
         HRESULT ( __stdcall *get_nextSibling )( 
            IXTLRuntime * This,
             IXMLDOMNode **nextSibling);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXTLRuntime * This,
             IXMLDOMNamedNodeMap **attributeMap);
        
         HRESULT ( __stdcall *insertBefore )( 
            IXTLRuntime * This,
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *replaceChild )( 
            IXTLRuntime * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild);
        
         HRESULT ( __stdcall *removeChild )( 
            IXTLRuntime * This,
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild);
        
         HRESULT ( __stdcall *appendChild )( 
            IXTLRuntime * This,
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild);
        
         HRESULT ( __stdcall *hasChildNodes )( 
            IXTLRuntime * This,
             VARIANT_BOOL *hasChild);
        
         HRESULT ( __stdcall *get_ownerDocument )( 
            IXTLRuntime * This,
             IXMLDOMDocument **DOMDocument);
        
         HRESULT ( __stdcall *cloneNode )( 
            IXTLRuntime * This,
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot);
        
         HRESULT ( __stdcall *get_nodeTypeString )( 
            IXTLRuntime * This,
             BSTR *nodeType);
        
         HRESULT ( __stdcall *get_text )( 
            IXTLRuntime * This,
             BSTR *text);
        
         HRESULT ( __stdcall *put_text )( 
            IXTLRuntime * This,
             BSTR text);
        
         HRESULT ( __stdcall *get_specified )( 
            IXTLRuntime * This,
             VARIANT_BOOL *isSpecified);
        
         HRESULT ( __stdcall *get_definition )( 
            IXTLRuntime * This,
             IXMLDOMNode **definitionNode);
        
         HRESULT ( __stdcall *get_nodeTypedValue )( 
            IXTLRuntime * This,
             VARIANT *typedValue);
        
         HRESULT ( __stdcall *put_nodeTypedValue )( 
            IXTLRuntime * This,
             VARIANT typedValue);
        
         HRESULT ( __stdcall *get_dataType )( 
            IXTLRuntime * This,
             VARIANT *dataTypeName);
        
         HRESULT ( __stdcall *put_dataType )( 
            IXTLRuntime * This,
             BSTR dataTypeName);
        
         HRESULT ( __stdcall *get_xml )( 
            IXTLRuntime * This,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *transformNode )( 
            IXTLRuntime * This,
             IXMLDOMNode *stylesheet,
             BSTR *xmlString);
        
         HRESULT ( __stdcall *selectNodes )( 
            IXTLRuntime * This,
             BSTR queryString,
             IXMLDOMNodeList **resultList);
        
         HRESULT ( __stdcall *selectSingleNode )( 
            IXTLRuntime * This,
             BSTR queryString,
             IXMLDOMNode **resultNode);
        
         HRESULT ( __stdcall *get_parsed )( 
            IXTLRuntime * This,
             VARIANT_BOOL *isParsed);
        
         HRESULT ( __stdcall *get_namespaceURI )( 
            IXTLRuntime * This,
             BSTR *namespaceURI);
        
         HRESULT ( __stdcall *get_prefix )( 
            IXTLRuntime * This,
             BSTR *prefixString);
        
         HRESULT ( __stdcall *get_baseName )( 
            IXTLRuntime * This,
             BSTR *nameString);
        
         HRESULT ( __stdcall *transformNodeToObject )( 
            IXTLRuntime * This,
             IXMLDOMNode *stylesheet,
             VARIANT outputObject);
        
         HRESULT ( __stdcall *uniqueID )( 
            IXTLRuntime * This,
             IXMLDOMNode *pNode,
             long *pID);
        
         HRESULT ( __stdcall *depth )( 
            IXTLRuntime * This,
             IXMLDOMNode *pNode,
             long *pDepth);
        
         HRESULT ( __stdcall *childNumber )( 
            IXTLRuntime * This,
             IXMLDOMNode *pNode,
             long *pNumber);
        
         HRESULT ( __stdcall *ancestorChildNumber )( 
            IXTLRuntime * This,
             BSTR bstrNodeName,
             IXMLDOMNode *pNode,
             long *pNumber);
        
         HRESULT ( __stdcall *absoluteChildNumber )( 
            IXTLRuntime * This,
             IXMLDOMNode *pNode,
             long *pNumber);
        
         HRESULT ( __stdcall *formatIndex )( 
            IXTLRuntime * This,
             long lIndex,
             BSTR bstrFormat,
             BSTR *pbstrFormattedString);
        
         HRESULT ( __stdcall *formatNumber )( 
            IXTLRuntime * This,
             double dblNumber,
             BSTR bstrFormat,
             BSTR *pbstrFormattedString);
        
         HRESULT ( __stdcall *formatDate )( 
            IXTLRuntime * This,
             VARIANT varDate,
             BSTR bstrFormat,
             VARIANT varDestLocale,
             BSTR *pbstrFormattedString);
        
         HRESULT ( __stdcall *formatTime )( 
            IXTLRuntime * This,
             VARIANT varTime,
             BSTR bstrFormat,
             VARIANT varDestLocale,
             BSTR *pbstrFormattedString);
        
        
    } IXTLRuntimeVtbl;

    struct IXTLRuntime
    {
         struct IXTLRuntimeVtbl *lpVtbl;
    };

    






































































































































































#line 9352 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXTLRuntime_uniqueID_Proxy( 
    IXTLRuntime * This,
     IXMLDOMNode *pNode,
     long *pID);


void __stdcall IXTLRuntime_uniqueID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_depth_Proxy( 
    IXTLRuntime * This,
     IXMLDOMNode *pNode,
     long *pDepth);


void __stdcall IXTLRuntime_depth_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_childNumber_Proxy( 
    IXTLRuntime * This,
     IXMLDOMNode *pNode,
     long *pNumber);


void __stdcall IXTLRuntime_childNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_ancestorChildNumber_Proxy( 
    IXTLRuntime * This,
     BSTR bstrNodeName,
     IXMLDOMNode *pNode,
     long *pNumber);


void __stdcall IXTLRuntime_ancestorChildNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_absoluteChildNumber_Proxy( 
    IXTLRuntime * This,
     IXMLDOMNode *pNode,
     long *pNumber);


void __stdcall IXTLRuntime_absoluteChildNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_formatIndex_Proxy( 
    IXTLRuntime * This,
     long lIndex,
     BSTR bstrFormat,
     BSTR *pbstrFormattedString);


void __stdcall IXTLRuntime_formatIndex_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_formatNumber_Proxy( 
    IXTLRuntime * This,
     double dblNumber,
     BSTR bstrFormat,
     BSTR *pbstrFormattedString);


void __stdcall IXTLRuntime_formatNumber_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_formatDate_Proxy( 
    IXTLRuntime * This,
     VARIANT varDate,
     BSTR bstrFormat,
     VARIANT varDestLocale,
     BSTR *pbstrFormattedString);


void __stdcall IXTLRuntime_formatDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXTLRuntime_formatTime_Proxy( 
    IXTLRuntime * This,
     VARIANT varTime,
     BSTR bstrFormat,
     VARIANT varDestLocale,
     BSTR *pbstrFormattedString);


void __stdcall IXTLRuntime_formatTime_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9481 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID DIID_XMLDOMDocumentEvents;








#line 9500 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct XMLDOMDocumentEventsVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            XMLDOMDocumentEvents * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            XMLDOMDocumentEvents * This);
        
        ULONG ( __stdcall *Release )( 
            XMLDOMDocumentEvents * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            XMLDOMDocumentEvents * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            XMLDOMDocumentEvents * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            XMLDOMDocumentEvents * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            XMLDOMDocumentEvents * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
        
    } XMLDOMDocumentEventsVtbl;

    struct XMLDOMDocumentEvents
    {
         struct XMLDOMDocumentEventsVtbl *lpVtbl;
    };

    





























#line 9584 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"


#line 9587 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"


extern const CLSID CLSID_DOMDocument;







extern const CLSID CLSID_DOMFreeThreadedDocument;











 


extern const IID IID_IXMLHttpRequest;
























































#line 9670 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLHttpRequestVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLHttpRequest * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLHttpRequest * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLHttpRequest * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLHttpRequest * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLHttpRequest * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLHttpRequest * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLHttpRequest * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *open )( 
            IXMLHttpRequest * This,
             BSTR bstrMethod,
             BSTR bstrUrl,
             VARIANT varAsync,
             VARIANT bstrUser,
             VARIANT bstrPassword);
        
         HRESULT ( __stdcall *setRequestHeader )( 
            IXMLHttpRequest * This,
             BSTR bstrHeader,
             BSTR bstrValue);
        
         HRESULT ( __stdcall *getResponseHeader )( 
            IXMLHttpRequest * This,
             BSTR bstrHeader,
             BSTR *pbstrValue);
        
         HRESULT ( __stdcall *getAllResponseHeaders )( 
            IXMLHttpRequest * This,
             BSTR *pbstrHeaders);
        
         HRESULT ( __stdcall *send )( 
            IXMLHttpRequest * This,
             VARIANT varBody);
        
         HRESULT ( __stdcall *abort )( 
            IXMLHttpRequest * This);
        
         HRESULT ( __stdcall *get_status )( 
            IXMLHttpRequest * This,
             long *plStatus);
        
         HRESULT ( __stdcall *get_statusText )( 
            IXMLHttpRequest * This,
             BSTR *pbstrStatus);
        
         HRESULT ( __stdcall *get_responseXML )( 
            IXMLHttpRequest * This,
             IDispatch **ppBody);
        
         HRESULT ( __stdcall *get_responseText )( 
            IXMLHttpRequest * This,
             BSTR *pbstrBody);
        
         HRESULT ( __stdcall *get_responseBody )( 
            IXMLHttpRequest * This,
             VARIANT *pvarBody);
        
         HRESULT ( __stdcall *get_responseStream )( 
            IXMLHttpRequest * This,
             VARIANT *pvarBody);
        
         HRESULT ( __stdcall *get_readyState )( 
            IXMLHttpRequest * This,
             long *plState);
        
         HRESULT ( __stdcall *put_onreadystatechange )( 
            IXMLHttpRequest * This,
             IDispatch *pReadyStateSink);
        
        
    } IXMLHttpRequestVtbl;

    struct IXMLHttpRequest
    {
         struct IXMLHttpRequestVtbl *lpVtbl;
    };

    








































































#line 9858 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLHttpRequest_open_Proxy( 
    IXMLHttpRequest * This,
     BSTR bstrMethod,
     BSTR bstrUrl,
     VARIANT varAsync,
     VARIANT bstrUser,
     VARIANT bstrPassword);


void __stdcall IXMLHttpRequest_open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_setRequestHeader_Proxy( 
    IXMLHttpRequest * This,
     BSTR bstrHeader,
     BSTR bstrValue);


void __stdcall IXMLHttpRequest_setRequestHeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_getResponseHeader_Proxy( 
    IXMLHttpRequest * This,
     BSTR bstrHeader,
     BSTR *pbstrValue);


void __stdcall IXMLHttpRequest_getResponseHeader_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_getAllResponseHeaders_Proxy( 
    IXMLHttpRequest * This,
     BSTR *pbstrHeaders);


void __stdcall IXMLHttpRequest_getAllResponseHeaders_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_send_Proxy( 
    IXMLHttpRequest * This,
     VARIANT varBody);


void __stdcall IXMLHttpRequest_send_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_abort_Proxy( 
    IXMLHttpRequest * This);


void __stdcall IXMLHttpRequest_abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_status_Proxy( 
    IXMLHttpRequest * This,
     long *plStatus);


void __stdcall IXMLHttpRequest_get_status_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_statusText_Proxy( 
    IXMLHttpRequest * This,
     BSTR *pbstrStatus);


void __stdcall IXMLHttpRequest_get_statusText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_responseXML_Proxy( 
    IXMLHttpRequest * This,
     IDispatch **ppBody);


void __stdcall IXMLHttpRequest_get_responseXML_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_responseText_Proxy( 
    IXMLHttpRequest * This,
     BSTR *pbstrBody);


void __stdcall IXMLHttpRequest_get_responseText_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_responseBody_Proxy( 
    IXMLHttpRequest * This,
     VARIANT *pvarBody);


void __stdcall IXMLHttpRequest_get_responseBody_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_responseStream_Proxy( 
    IXMLHttpRequest * This,
     VARIANT *pvarBody);


void __stdcall IXMLHttpRequest_get_responseStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_get_readyState_Proxy( 
    IXMLHttpRequest * This,
     long *plState);


void __stdcall IXMLHttpRequest_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLHttpRequest_put_onreadystatechange_Proxy( 
    IXMLHttpRequest * This,
     IDispatch *pReadyStateSink);


void __stdcall IXMLHttpRequest_put_onreadystatechange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10036 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"


extern const CLSID CLSID_XMLHTTPRequest;











 


extern const IID IID_IXMLDSOControl;
























#line 10079 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDSOControlVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDSOControl * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDSOControl * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDSOControl * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDSOControl * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDSOControl * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDSOControl * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDSOControl * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_XMLDocument )( 
            IXMLDSOControl * This,
             IXMLDOMDocument **ppDoc);
        
         HRESULT ( __stdcall *put_XMLDocument )( 
            IXMLDSOControl * This,
             IXMLDOMDocument *ppDoc);
        
         HRESULT ( __stdcall *get_JavaDSOCompatible )( 
            IXMLDSOControl * This,
             BOOL *fJavaDSOCompatible);
        
         HRESULT ( __stdcall *put_JavaDSOCompatible )( 
            IXMLDSOControl * This,
             BOOL fJavaDSOCompatible);
        
         HRESULT ( __stdcall *get_readyState )( 
            IXMLDSOControl * This,
             long *state);
        
        
    } IXMLDSOControlVtbl;

    struct IXMLDSOControl
    {
         struct IXMLDSOControlVtbl *lpVtbl;
    };

    













































#line 10199 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDSOControl_get_XMLDocument_Proxy( 
    IXMLDSOControl * This,
     IXMLDOMDocument **ppDoc);


void __stdcall IXMLDSOControl_get_XMLDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDSOControl_put_XMLDocument_Proxy( 
    IXMLDSOControl * This,
     IXMLDOMDocument *ppDoc);


void __stdcall IXMLDSOControl_put_XMLDocument_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDSOControl_get_JavaDSOCompatible_Proxy( 
    IXMLDSOControl * This,
     BOOL *fJavaDSOCompatible);


void __stdcall IXMLDSOControl_get_JavaDSOCompatible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDSOControl_put_JavaDSOCompatible_Proxy( 
    IXMLDSOControl * This,
     BOOL fJavaDSOCompatible);


void __stdcall IXMLDSOControl_put_JavaDSOCompatible_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDSOControl_get_readyState_Proxy( 
    IXMLDSOControl * This,
     long *state);


void __stdcall IXMLDSOControl_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10264 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"


extern const CLSID CLSID_XMLDSOControl;











 


extern const IID IID_IXMLElementCollection;























#line 10306 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLElementCollectionVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLElementCollection * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLElementCollection * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLElementCollection * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLElementCollection * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLElementCollection * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLElementCollection * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLElementCollection * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *put_length )( 
            IXMLElementCollection * This,
             long v);
        
         HRESULT ( __stdcall *get_length )( 
            IXMLElementCollection * This,
             long *p);
        
         HRESULT ( __stdcall *get__newEnum )( 
            IXMLElementCollection * This,
             IUnknown **ppUnk);
        
         HRESULT ( __stdcall *item )( 
            IXMLElementCollection * This,
             VARIANT var1,
             VARIANT var2,
             IDispatch **ppDisp);
        
        
    } IXMLElementCollectionVtbl;

    struct IXMLElementCollection
    {
         struct IXMLElementCollectionVtbl *lpVtbl;
    };

    










































#line 10421 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLElementCollection_put_length_Proxy( 
    IXMLElementCollection * This,
     long v);


void __stdcall IXMLElementCollection_put_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElementCollection_get_length_Proxy( 
    IXMLElementCollection * This,
     long *p);


void __stdcall IXMLElementCollection_get_length_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElementCollection_get__newEnum_Proxy( 
    IXMLElementCollection * This,
     IUnknown **ppUnk);


void __stdcall IXMLElementCollection_get__newEnum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElementCollection_item_Proxy( 
    IXMLElementCollection * This,
     VARIANT var1,
     VARIANT var2,
     IDispatch **ppDisp);


void __stdcall IXMLElementCollection_item_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10476 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDocument;





















































#line 10540 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDocumentVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDocument * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDocument * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDocument * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDocument * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDocument * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDocument * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDocument * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_root )( 
            IXMLDocument * This,
             IXMLElement **p);
        
         HRESULT ( __stdcall *get_fileSize )( 
            IXMLDocument * This,
             BSTR *p);
        
         HRESULT ( __stdcall *get_fileModifiedDate )( 
            IXMLDocument * This,
             BSTR *p);
        
         HRESULT ( __stdcall *get_fileUpdatedDate )( 
            IXMLDocument * This,
             BSTR *p);
        
         HRESULT ( __stdcall *get_URL )( 
            IXMLDocument * This,
             BSTR *p);
        
         HRESULT ( __stdcall *put_URL )( 
            IXMLDocument * This,
             BSTR p);
        
         HRESULT ( __stdcall *get_mimeType )( 
            IXMLDocument * This,
             BSTR *p);
        
         HRESULT ( __stdcall *get_readyState )( 
            IXMLDocument * This,
             long *pl);
        
         HRESULT ( __stdcall *get_charset )( 
            IXMLDocument * This,
             BSTR *p);
        
         HRESULT ( __stdcall *put_charset )( 
            IXMLDocument * This,
             BSTR p);
        
         HRESULT ( __stdcall *get_version )( 
            IXMLDocument * This,
             BSTR *p);
        
         HRESULT ( __stdcall *get_doctype )( 
            IXMLDocument * This,
             BSTR *p);
        
         HRESULT ( __stdcall *get_dtdURL )( 
            IXMLDocument * This,
             BSTR *p);
        
         HRESULT ( __stdcall *createElement )( 
            IXMLDocument * This,
             VARIANT vType,
             VARIANT var1,
             IXMLElement **ppElem);
        
        
    } IXMLDocumentVtbl;

    struct IXMLDocument
    {
         struct IXMLDocumentVtbl *lpVtbl;
    };

    








































































#line 10725 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDocument_get_root_Proxy( 
    IXMLDocument * This,
     IXMLElement **p);


void __stdcall IXMLDocument_get_root_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_fileSize_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_fileSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_fileModifiedDate_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_fileModifiedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_fileUpdatedDate_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_fileUpdatedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_URL_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_put_URL_Proxy( 
    IXMLDocument * This,
     BSTR p);


void __stdcall IXMLDocument_put_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_mimeType_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_mimeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_readyState_Proxy( 
    IXMLDocument * This,
     long *pl);


void __stdcall IXMLDocument_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_charset_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_put_charset_Proxy( 
    IXMLDocument * This,
     BSTR p);


void __stdcall IXMLDocument_put_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_version_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_doctype_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_doctype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_get_dtdURL_Proxy( 
    IXMLDocument * This,
     BSTR *p);


void __stdcall IXMLDocument_get_dtdURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument_createElement_Proxy( 
    IXMLDocument * This,
     VARIANT vType,
     VARIANT var1,
     IXMLElement **ppElem);


void __stdcall IXMLDocument_createElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10900 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLDocument2;



























































#line 10970 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLDocument2Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLDocument2 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLDocument2 * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLDocument2 * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLDocument2 * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLDocument2 * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLDocument2 * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLDocument2 * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_root )( 
            IXMLDocument2 * This,
             IXMLElement2 **p);
        
         HRESULT ( __stdcall *get_fileSize )( 
            IXMLDocument2 * This,
             BSTR *p);
        
         HRESULT ( __stdcall *get_fileModifiedDate )( 
            IXMLDocument2 * This,
             BSTR *p);
        
         HRESULT ( __stdcall *get_fileUpdatedDate )( 
            IXMLDocument2 * This,
             BSTR *p);
        
         HRESULT ( __stdcall *get_URL )( 
            IXMLDocument2 * This,
             BSTR *p);
        
         HRESULT ( __stdcall *put_URL )( 
            IXMLDocument2 * This,
             BSTR p);
        
         HRESULT ( __stdcall *get_mimeType )( 
            IXMLDocument2 * This,
             BSTR *p);
        
         HRESULT ( __stdcall *get_readyState )( 
            IXMLDocument2 * This,
             long *pl);
        
         HRESULT ( __stdcall *get_charset )( 
            IXMLDocument2 * This,
             BSTR *p);
        
         HRESULT ( __stdcall *put_charset )( 
            IXMLDocument2 * This,
             BSTR p);
        
         HRESULT ( __stdcall *get_version )( 
            IXMLDocument2 * This,
             BSTR *p);
        
         HRESULT ( __stdcall *get_doctype )( 
            IXMLDocument2 * This,
             BSTR *p);
        
         HRESULT ( __stdcall *get_dtdURL )( 
            IXMLDocument2 * This,
             BSTR *p);
        
         HRESULT ( __stdcall *createElement )( 
            IXMLDocument2 * This,
             VARIANT vType,
             VARIANT var1,
             IXMLElement2 **ppElem);
        
         HRESULT ( __stdcall *get_async )( 
            IXMLDocument2 * This,
             VARIANT_BOOL *pf);
        
         HRESULT ( __stdcall *put_async )( 
            IXMLDocument2 * This,
             VARIANT_BOOL f);
        
        
    } IXMLDocument2Vtbl;

    struct IXMLDocument2
    {
         struct IXMLDocument2Vtbl *lpVtbl;
    };

    














































































#line 11169 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLDocument2_get_root_Proxy( 
    IXMLDocument2 * This,
     IXMLElement2 **p);


void __stdcall IXMLDocument2_get_root_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_fileSize_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_fileSize_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_fileModifiedDate_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_fileModifiedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_fileUpdatedDate_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_fileUpdatedDate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_URL_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_put_URL_Proxy( 
    IXMLDocument2 * This,
     BSTR p);


void __stdcall IXMLDocument2_put_URL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_mimeType_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_mimeType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_readyState_Proxy( 
    IXMLDocument2 * This,
     long *pl);


void __stdcall IXMLDocument2_get_readyState_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_charset_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_put_charset_Proxy( 
    IXMLDocument2 * This,
     BSTR p);


void __stdcall IXMLDocument2_put_charset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_version_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_version_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_doctype_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_doctype_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_dtdURL_Proxy( 
    IXMLDocument2 * This,
     BSTR *p);


void __stdcall IXMLDocument2_get_dtdURL_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_createElement_Proxy( 
    IXMLDocument2 * This,
     VARIANT vType,
     VARIANT var1,
     IXMLElement2 **ppElem);


void __stdcall IXMLDocument2_createElement_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_get_async_Proxy( 
    IXMLDocument2 * This,
     VARIANT_BOOL *pf);


void __stdcall IXMLDocument2_get_async_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLDocument2_put_async_Proxy( 
    IXMLDocument2 * This,
     VARIANT_BOOL f);


void __stdcall IXMLDocument2_put_async_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11368 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLElement;

















































#line 11428 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLElementVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLElement * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLElement * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLElement * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLElement * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLElement * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLElement * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLElement * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_tagName )( 
            IXMLElement * This,
             BSTR *p);
        
         HRESULT ( __stdcall *put_tagName )( 
            IXMLElement * This,
             BSTR p);
        
         HRESULT ( __stdcall *get_parent )( 
            IXMLElement * This,
             IXMLElement **ppParent);
        
         HRESULT ( __stdcall *setAttribute )( 
            IXMLElement * This,
             BSTR strPropertyName,
             VARIANT PropertyValue);
        
         HRESULT ( __stdcall *getAttribute )( 
            IXMLElement * This,
             BSTR strPropertyName,
             VARIANT *PropertyValue);
        
         HRESULT ( __stdcall *removeAttribute )( 
            IXMLElement * This,
             BSTR strPropertyName);
        
         HRESULT ( __stdcall *get_children )( 
            IXMLElement * This,
             IXMLElementCollection **pp);
        
         HRESULT ( __stdcall *get_type )( 
            IXMLElement * This,
             long *plType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLElement * This,
             BSTR *p);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLElement * This,
             BSTR p);
        
         HRESULT ( __stdcall *addChild )( 
            IXMLElement * This,
             IXMLElement *pChildElem,
            long lIndex,
            long lReserved);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLElement * This,
             IXMLElement *pChildElem);
        
        
    } IXMLElementVtbl;

    struct IXMLElement
    {
         struct IXMLElementVtbl *lpVtbl;
    };

    


































































#line 11601 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLElement_get_tagName_Proxy( 
    IXMLElement * This,
     BSTR *p);


void __stdcall IXMLElement_get_tagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_put_tagName_Proxy( 
    IXMLElement * This,
     BSTR p);


void __stdcall IXMLElement_put_tagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_get_parent_Proxy( 
    IXMLElement * This,
     IXMLElement **ppParent);


void __stdcall IXMLElement_get_parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_setAttribute_Proxy( 
    IXMLElement * This,
     BSTR strPropertyName,
     VARIANT PropertyValue);


void __stdcall IXMLElement_setAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_getAttribute_Proxy( 
    IXMLElement * This,
     BSTR strPropertyName,
     VARIANT *PropertyValue);


void __stdcall IXMLElement_getAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_removeAttribute_Proxy( 
    IXMLElement * This,
     BSTR strPropertyName);


void __stdcall IXMLElement_removeAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_get_children_Proxy( 
    IXMLElement * This,
     IXMLElementCollection **pp);


void __stdcall IXMLElement_get_children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_get_type_Proxy( 
    IXMLElement * This,
     long *plType);


void __stdcall IXMLElement_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_get_text_Proxy( 
    IXMLElement * This,
     BSTR *p);


void __stdcall IXMLElement_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_put_text_Proxy( 
    IXMLElement * This,
     BSTR p);


void __stdcall IXMLElement_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_addChild_Proxy( 
    IXMLElement * This,
     IXMLElement *pChildElem,
    long lIndex,
    long lReserved);


void __stdcall IXMLElement_addChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement_removeChild_Proxy( 
    IXMLElement * This,
     IXMLElement *pChildElem);


void __stdcall IXMLElement_removeChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11754 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLElement2;




















































#line 11817 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLElement2Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLElement2 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLElement2 * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLElement2 * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLElement2 * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLElement2 * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLElement2 * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLElement2 * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_tagName )( 
            IXMLElement2 * This,
             BSTR *p);
        
         HRESULT ( __stdcall *put_tagName )( 
            IXMLElement2 * This,
             BSTR p);
        
         HRESULT ( __stdcall *get_parent )( 
            IXMLElement2 * This,
             IXMLElement2 **ppParent);
        
         HRESULT ( __stdcall *setAttribute )( 
            IXMLElement2 * This,
             BSTR strPropertyName,
             VARIANT PropertyValue);
        
         HRESULT ( __stdcall *getAttribute )( 
            IXMLElement2 * This,
             BSTR strPropertyName,
             VARIANT *PropertyValue);
        
         HRESULT ( __stdcall *removeAttribute )( 
            IXMLElement2 * This,
             BSTR strPropertyName);
        
         HRESULT ( __stdcall *get_children )( 
            IXMLElement2 * This,
             IXMLElementCollection **pp);
        
         HRESULT ( __stdcall *get_type )( 
            IXMLElement2 * This,
             long *plType);
        
         HRESULT ( __stdcall *get_text )( 
            IXMLElement2 * This,
             BSTR *p);
        
         HRESULT ( __stdcall *put_text )( 
            IXMLElement2 * This,
             BSTR p);
        
         HRESULT ( __stdcall *addChild )( 
            IXMLElement2 * This,
             IXMLElement2 *pChildElem,
            long lIndex,
            long lReserved);
        
         HRESULT ( __stdcall *removeChild )( 
            IXMLElement2 * This,
             IXMLElement2 *pChildElem);
        
         HRESULT ( __stdcall *get_attributes )( 
            IXMLElement2 * This,
             IXMLElementCollection **pp);
        
        
    } IXMLElement2Vtbl;

    struct IXMLElement2
    {
         struct IXMLElement2Vtbl *lpVtbl;
    };

    





































































#line 11997 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLElement2_get_tagName_Proxy( 
    IXMLElement2 * This,
     BSTR *p);


void __stdcall IXMLElement2_get_tagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_put_tagName_Proxy( 
    IXMLElement2 * This,
     BSTR p);


void __stdcall IXMLElement2_put_tagName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_get_parent_Proxy( 
    IXMLElement2 * This,
     IXMLElement2 **ppParent);


void __stdcall IXMLElement2_get_parent_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_setAttribute_Proxy( 
    IXMLElement2 * This,
     BSTR strPropertyName,
     VARIANT PropertyValue);


void __stdcall IXMLElement2_setAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_getAttribute_Proxy( 
    IXMLElement2 * This,
     BSTR strPropertyName,
     VARIANT *PropertyValue);


void __stdcall IXMLElement2_getAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_removeAttribute_Proxy( 
    IXMLElement2 * This,
     BSTR strPropertyName);


void __stdcall IXMLElement2_removeAttribute_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_get_children_Proxy( 
    IXMLElement2 * This,
     IXMLElementCollection **pp);


void __stdcall IXMLElement2_get_children_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_get_type_Proxy( 
    IXMLElement2 * This,
     long *plType);


void __stdcall IXMLElement2_get_type_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_get_text_Proxy( 
    IXMLElement2 * This,
     BSTR *p);


void __stdcall IXMLElement2_get_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_put_text_Proxy( 
    IXMLElement2 * This,
     BSTR p);


void __stdcall IXMLElement2_put_text_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_addChild_Proxy( 
    IXMLElement2 * This,
     IXMLElement2 *pChildElem,
    long lIndex,
    long lReserved);


void __stdcall IXMLElement2_addChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_removeChild_Proxy( 
    IXMLElement2 * This,
     IXMLElement2 *pChildElem);


void __stdcall IXMLElement2_removeChild_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLElement2_get_attributes_Proxy( 
    IXMLElement2 * This,
     IXMLElementCollection **pp);


void __stdcall IXMLElement2_get_attributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12162 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLAttribute;















#line 12188 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLAttributeVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLAttribute * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLAttribute * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLAttribute * This);
        
        HRESULT ( __stdcall *GetTypeInfoCount )( 
            IXMLAttribute * This,
             UINT *pctinfo);
        
        HRESULT ( __stdcall *GetTypeInfo )( 
            IXMLAttribute * This,
             UINT iTInfo,
             LCID lcid,
             ITypeInfo **ppTInfo);
        
        HRESULT ( __stdcall *GetIDsOfNames )( 
            IXMLAttribute * This,
             const IID * const riid,
             LPOLESTR *rgszNames,
             UINT cNames,
             LCID lcid,
             DISPID *rgDispId);
        
         HRESULT ( __stdcall *Invoke )( 
            IXMLAttribute * This,
             DISPID dispIdMember,
             const IID * const riid,
             LCID lcid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr);
        
         HRESULT ( __stdcall *get_name )( 
            IXMLAttribute * This,
             BSTR *n);
        
         HRESULT ( __stdcall *get_value )( 
            IXMLAttribute * This,
             BSTR *v);
        
        
    } IXMLAttributeVtbl;

    struct IXMLAttribute
    {
         struct IXMLAttributeVtbl *lpVtbl;
    };

    




































#line 12287 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



 HRESULT __stdcall IXMLAttribute_get_name_Proxy( 
    IXMLAttribute * This,
     BSTR *n);


void __stdcall IXMLAttribute_get_name_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IXMLAttribute_get_value_Proxy( 
    IXMLAttribute * This,
     BSTR *v);


void __stdcall IXMLAttribute_get_value_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12316 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"






 


extern const IID IID_IXMLError;












#line 12339 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"

    typedef struct IXMLErrorVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IXMLError * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IXMLError * This);
        
        ULONG ( __stdcall *Release )( 
            IXMLError * This);
        
        HRESULT ( __stdcall *GetErrorInfo )( 
            IXMLError * This,
            XML_ERROR *pErrorReturn);
        
        
    } IXMLErrorVtbl;

    struct IXMLError
    {
         struct IXMLErrorVtbl *lpVtbl;
    };

    




















#line 12389 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



HRESULT __stdcall IXMLError_GetErrorInfo_Proxy( 
    IXMLError * This,
    XML_ERROR *pErrorReturn);


void __stdcall IXMLError_GetErrorInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12406 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"


extern const CLSID CLSID_XMLDocument;






#line 12416 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"









#line 12426 "c:\\program files (x86)\\microsoft visual studio 8\\vc\\platformsdk\\include\\msxml.h"



#line 279 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"





void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 












#pragma comment(lib,"uuid.lib")
















extern const IID CLSID_SBS_StdURLMoniker;  
extern const IID CLSID_SBS_HttpProtocol;   
extern const IID CLSID_SBS_FtpProtocol;    
extern const IID CLSID_SBS_GopherProtocol; 
extern const IID CLSID_SBS_HttpSProtocol;  
extern const IID CLSID_SBS_FileProtocol;   
extern const IID CLSID_SBS_MkProtocol;     
extern const IID CLSID_SBS_UrlMkBindCtx;   
extern const IID CLSID_SBS_SoftDistExt;  
extern const IID CLSID_SBS_StdEncodingFilterFac; 
extern const IID CLSID_SBS_DeCompMimeFilter;     
extern const IID CLSID_SBS_CdlProtocol;          
extern const IID CLSID_SBS_ClassInstallFilter;   
extern const IID CLSID_SBS_InternetSecurityManager;  
extern const IID CLSID_SBS_InternetZoneManager;  







extern const IID IID_IAsyncMoniker;    
extern const IID CLSID_StdURLMoniker;  
extern const IID CLSID_HttpProtocol;   
extern const IID CLSID_FtpProtocol;    
extern const IID CLSID_GopherProtocol; 
extern const IID CLSID_HttpSProtocol;  
extern const IID CLSID_FileProtocol;   
extern const IID CLSID_MkProtocol;     
extern const IID CLSID_StdURLProtocol; 
extern const IID CLSID_UrlMkBindCtx;   
extern const IID CLSID_StdEncodingFilterFac; 
extern const IID CLSID_DeCompMimeFilter;     
extern const IID CLSID_CdlProtocol;          
extern const IID CLSID_ClassInstallFilter;   
extern const IID IID_IAsyncBindCtx;    
 






 
extern HRESULT __stdcall CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER  * ppmk);             
extern HRESULT __stdcall CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER  * ppmk, DWORD dwFlags);             
extern HRESULT __stdcall GetClassURL(LPCWSTR szURL, CLSID *pClsID);                                           
extern HRESULT __stdcall CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb,                       
                                IEnumFORMATETC *pEFetc, IBindCtx **ppBC);                   
extern HRESULT __stdcall CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum,   
                            IBindCtx **ppBC, DWORD reserved);                                                     
extern HRESULT __stdcall MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten,          
                                LPMONIKER *ppmk);                                           
extern HRESULT __stdcall RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb,                     
                                IBindStatusCallback**  ppBSCBPrev, DWORD dwReserved);       
extern HRESULT __stdcall RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb);                      
extern HRESULT __stdcall GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid); 
extern HRESULT __stdcall IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved);                               
extern HRESULT __stdcall CoGetClassObjectFromURL( const IID * const rCLASSID,
            LPCWSTR szCODE, DWORD dwFileVersionMS, 
            DWORD dwFileVersionLS, LPCWSTR szTYPE,
            LPBINDCTX pBindCtx, DWORD dwClsContext,
            LPVOID pvReserved, const IID * const riid, LPVOID * ppv);
extern HRESULT __stdcall FaultInIEFeature( HWND hWnd,
            uCLSSPEC *pClassSpec,
            QUERYCONTEXT *pQuery, DWORD dwFlags);                                           
extern HRESULT __stdcall GetComponentIDFromCLSSPEC(uCLSSPEC *pClassspec,
             LPSTR * ppszComponentID);                                                      


                                                 
                                                 
                                                 


 

extern HRESULT __stdcall IsAsyncMoniker(IMoniker* pmk);                                                       
extern HRESULT __stdcall CreateURLBinding(LPCWSTR lpszUrl, IBindCtx *pbc, IBinding **ppBdg);                  
 
extern HRESULT __stdcall RegisterMediaTypes(UINT ctypes, const LPCSTR* rgszTypes, CLIPFORMAT* rgcfTypes);            
extern HRESULT __stdcall FindMediaType(LPCSTR rgszTypes, CLIPFORMAT* rgcfTypes);                                       
extern HRESULT __stdcall CreateFormatEnumerator( UINT cfmtetc, FORMATETC* rgfmtetc, IEnumFORMATETC** ppenumfmtetc); 
extern HRESULT __stdcall RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved);          
extern HRESULT __stdcall RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc);                            
extern HRESULT __stdcall RegisterMediaTypeClass(LPBC pBC,UINT ctypes, const LPCSTR* rgszTypes, CLSID *rgclsID, DWORD reserved);    
extern HRESULT __stdcall FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved);                          
extern HRESULT __stdcall UrlMkSetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD dwReserved);       
extern HRESULT __stdcall UrlMkGetSessionOption(DWORD dwOption, LPVOID pBuffer, DWORD dwBufferLength, DWORD *pdwBufferLength, DWORD dwReserved);       
extern HRESULT __stdcall FindMimeFromData(                                                                                                                  
                        LPBC pBC,                           
                        LPCWSTR pwzUrl,                     
                        LPVOID pBuffer,                     
                        DWORD cbSize,                       
                        LPCWSTR pwzMimeProposed,            
                        DWORD dwMimeFlags,                  
                        LPWSTR *ppwzMimeOut,                
                        DWORD dwReserved);                  




extern HRESULT __stdcall ObtainUserAgentString(DWORD dwOption, LPSTR pszUAOut, DWORD* cbSize);       
extern HRESULT __stdcall CompareSecurityIds(BYTE* pbSecurityId1, DWORD dwLen1, BYTE* pbSecurityId2, DWORD dwLen2, DWORD dwReserved);    
extern HRESULT __stdcall CompatFlagsFromClsid(CLSID *pclsid, LPDWORD pdwCompatFlags, LPDWORD pdwMiscStatusFlags);             
 





 


































 






#line 473 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"
                                                                             



                                                                             










































extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_v0_0_s_ifspec;





 

typedef  IPersistMoniker *LPPERSISTMONIKER;


extern const IID IID_IPersistMoniker;
































#line 566 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IPersistMonikerVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IPersistMoniker * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IPersistMoniker * This);
        
        ULONG ( __stdcall *Release )( 
            IPersistMoniker * This);
        
        HRESULT ( __stdcall *GetClassID )( 
            IPersistMoniker * This,
             CLSID *pClassID);
        
        HRESULT ( __stdcall *IsDirty )( 
            IPersistMoniker * This);
        
        HRESULT ( __stdcall *Load )( 
            IPersistMoniker * This,
             BOOL fFullyAvailable,
             IMoniker *pimkName,
             LPBC pibc,
             DWORD grfMode);
        
        HRESULT ( __stdcall *Save )( 
            IPersistMoniker * This,
             IMoniker *pimkName,
             LPBC pbc,
             BOOL fRemember);
        
        HRESULT ( __stdcall *SaveCompleted )( 
            IPersistMoniker * This,
             IMoniker *pimkName,
             LPBC pibc);
        
        HRESULT ( __stdcall *GetCurMoniker )( 
            IPersistMoniker * This,
             IMoniker **ppimkName);
        
        
    } IPersistMonikerVtbl;

    struct IPersistMoniker
    {
         struct IPersistMonikerVtbl *lpVtbl;
    };

    



































#line 656 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IPersistMoniker_GetClassID_Proxy( 
    IPersistMoniker * This,
     CLSID *pClassID);


void __stdcall IPersistMoniker_GetClassID_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_IsDirty_Proxy( 
    IPersistMoniker * This);


void __stdcall IPersistMoniker_IsDirty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_Load_Proxy( 
    IPersistMoniker * This,
     BOOL fFullyAvailable,
     IMoniker *pimkName,
     LPBC pibc,
     DWORD grfMode);


void __stdcall IPersistMoniker_Load_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_Save_Proxy( 
    IPersistMoniker * This,
     IMoniker *pimkName,
     LPBC pbc,
     BOOL fRemember);


void __stdcall IPersistMoniker_Save_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_SaveCompleted_Proxy( 
    IPersistMoniker * This,
     IMoniker *pimkName,
     LPBC pibc);


void __stdcall IPersistMoniker_SaveCompleted_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPersistMoniker_GetCurMoniker_Proxy( 
    IPersistMoniker * This,
     IMoniker **ppimkName);


void __stdcall IPersistMoniker_GetCurMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 738 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 744 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0178_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0178_v0_0_s_ifspec;





 

typedef  IMonikerProp *LPMONIKERPROP;

typedef  
enum __MIDL_IMonikerProp_0001
    {	MIMETYPEPROP	= 0,
	USE_SRC_URL	= 0x1,
	CLASSIDPROP	= 0x2,
	TRUSTEDDOWNLOADPROP	= 0x3,
	POPUPLEVELPROP	= 0x4
    } 	MONIKERPROPERTY;


extern const IID IID_IMonikerProp;













#line 784 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IMonikerPropVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IMonikerProp * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IMonikerProp * This);
        
        ULONG ( __stdcall *Release )( 
            IMonikerProp * This);
        
        HRESULT ( __stdcall *PutProperty )( 
            IMonikerProp * This,
             MONIKERPROPERTY mkp,
             LPCWSTR val);
        
        
    } IMonikerPropVtbl;

    struct IMonikerProp
    {
         struct IMonikerPropVtbl *lpVtbl;
    };

    




















#line 835 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IMonikerProp_PutProperty_Proxy( 
    IMonikerProp * This,
     MONIKERPROPERTY mkp,
     LPCWSTR val);


void __stdcall IMonikerProp_PutProperty_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 853 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 859 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0179_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0179_v0_0_s_ifspec;





 

typedef  IBindProtocol *LPBINDPROTOCOL;


extern const IID IID_IBindProtocol;














#line 891 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IBindProtocolVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IBindProtocol * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IBindProtocol * This);
        
        ULONG ( __stdcall *Release )( 
            IBindProtocol * This);
        
        HRESULT ( __stdcall *CreateBinding )( 
            IBindProtocol * This,
             LPCWSTR szUrl,
             IBindCtx *pbc,
             IBinding **ppb);
        
        
    } IBindProtocolVtbl;

    struct IBindProtocol
    {
         struct IBindProtocolVtbl *lpVtbl;
    };

    




















#line 943 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IBindProtocol_CreateBinding_Proxy( 
    IBindProtocol * This,
     LPCWSTR szUrl,
     IBindCtx *pbc,
     IBinding **ppb);


void __stdcall IBindProtocol_CreateBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 968 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0180_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0180_v0_0_s_ifspec;





 

typedef  IBinding *LPBINDING;


extern const IID IID_IBinding;



























#line 1013 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IBindingVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IBinding * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IBinding * This);
        
        ULONG ( __stdcall *Release )( 
            IBinding * This);
        
        HRESULT ( __stdcall *Abort )( 
            IBinding * This);
        
        HRESULT ( __stdcall *Suspend )( 
            IBinding * This);
        
        HRESULT ( __stdcall *Resume )( 
            IBinding * This);
        
        HRESULT ( __stdcall *SetPriority )( 
            IBinding * This,
             LONG nPriority);
        
        HRESULT ( __stdcall *GetPriority )( 
            IBinding * This,
             LONG *pnPriority);
        
         HRESULT ( __stdcall *GetBindResult )( 
            IBinding * This,
             CLSID *pclsidProtocol,
             DWORD *pdwResult,
             LPOLESTR *pszResult,
             DWORD *pdwReserved);
        
        
    } IBindingVtbl;

    struct IBinding
    {
         struct IBindingVtbl *lpVtbl;
    };

    



































#line 1098 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IBinding_Abort_Proxy( 
    IBinding * This);


void __stdcall IBinding_Abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBinding_Suspend_Proxy( 
    IBinding * This);


void __stdcall IBinding_Suspend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBinding_Resume_Proxy( 
    IBinding * This);


void __stdcall IBinding_Resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBinding_SetPriority_Proxy( 
    IBinding * This,
     LONG nPriority);


void __stdcall IBinding_SetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBinding_GetPriority_Proxy( 
    IBinding * This,
     LONG *pnPriority);


void __stdcall IBinding_GetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBinding_RemoteGetBindResult_Proxy( 
    IBinding * This,
     CLSID *pclsidProtocol,
     DWORD *pdwResult,
     LPOLESTR *pszResult,
     DWORD dwReserved);


void __stdcall IBinding_RemoteGetBindResult_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1175 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 1181 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0181_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0181_v0_0_s_ifspec;





 

typedef  IBindStatusCallback *LPBINDSTATUSCALLBACK;

typedef  
enum __MIDL_IBindStatusCallback_0001
    {	BINDVERB_GET	= 0,
	BINDVERB_POST	= 0x1,
	BINDVERB_PUT	= 0x2,
	BINDVERB_CUSTOM	= 0x3
    } 	BINDVERB;

typedef  
enum __MIDL_IBindStatusCallback_0002
    {	BINDINFOF_URLENCODESTGMEDDATA	= 0x1,
	BINDINFOF_URLENCODEDEXTRAINFO	= 0x2
    } 	BINDINFOF;

typedef  
enum __MIDL_IBindStatusCallback_0003
    {	BINDF_ASYNCHRONOUS	= 0x1,
	BINDF_ASYNCSTORAGE	= 0x2,
	BINDF_NOPROGRESSIVERENDERING	= 0x4,
	BINDF_OFFLINEOPERATION	= 0x8,
	BINDF_GETNEWESTVERSION	= 0x10,
	BINDF_NOWRITECACHE	= 0x20,
	BINDF_NEEDFILE	= 0x40,
	BINDF_PULLDATA	= 0x80,
	BINDF_IGNORESECURITYPROBLEM	= 0x100,
	BINDF_RESYNCHRONIZE	= 0x200,
	BINDF_HYPERLINK	= 0x400,
	BINDF_NO_UI	= 0x800,
	BINDF_SILENTOPERATION	= 0x1000,
	BINDF_PRAGMA_NO_CACHE	= 0x2000,
	BINDF_GETCLASSOBJECT	= 0x4000,
	BINDF_RESERVED_1	= 0x8000,
	BINDF_FREE_THREADED	= 0x10000,
	BINDF_DIRECT_READ	= 0x20000,
	BINDF_FORMS_SUBMIT	= 0x40000,
	BINDF_GETFROMCACHE_IF_NET_FAIL	= 0x80000,
	BINDF_FROMURLMON	= 0x100000,
	BINDF_FWD_BACK	= 0x200000,
	BINDF_PREFERDEFAULTHANDLER	= 0x400000,
	BINDF_ENFORCERESTRICTED	= 0x800000
    } 	BINDF;

typedef  
enum __MIDL_IBindStatusCallback_0004
    {	URL_ENCODING_NONE	= 0,
	URL_ENCODING_ENABLE_UTF8	= 0x10000000,
	URL_ENCODING_DISABLE_UTF8	= 0x20000000
    } 	URL_ENCODING;

typedef struct _tagBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } 	BINDINFO;

typedef struct _REMSECURITY_ATTRIBUTES
    {
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    BOOL bInheritHandle;
    } 	REMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;

typedef struct _tagRemBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } 	RemBINDINFO;

typedef struct tagRemFORMATETC
    {
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } 	RemFORMATETC;

typedef struct tagRemFORMATETC *LPREMFORMATETC;

typedef  
enum __MIDL_IBindStatusCallback_0005
    {	BINDINFO_OPTIONS_WININETFLAG	= 0x10000,
	BINDINFO_OPTIONS_ENABLE_UTF8	= 0x20000,
	BINDINFO_OPTIONS_DISABLE_UTF8	= 0x40000,
	BINDINFO_OPTIONS_USE_IE_ENCODING	= 0x80000,
	BINDINFO_OPTIONS_BINDTOOBJECT	= 0x100000,
	BINDINFO_OPTIONS_SECURITYOPTOUT	= 0x200000,
	BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN	= 0x400000,
	BINDINFO_OPTIONS_USEBINDSTRINGCREDS	= 0x800000,
	BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS	= 0x1000000,
	BINDINFO_OPTIONS_SHDOCVW_NAVIGATE	= 0x80000000
    } 	BINDINFO_OPTIONS;

typedef  
enum __MIDL_IBindStatusCallback_0006
    {	BSCF_FIRSTDATANOTIFICATION	= 0x1,
	BSCF_INTERMEDIATEDATANOTIFICATION	= 0x2,
	BSCF_LASTDATANOTIFICATION	= 0x4,
	BSCF_DATAFULLYAVAILABLE	= 0x8,
	BSCF_AVAILABLEDATASIZEUNKNOWN	= 0x10
    } 	BSCF;

typedef 
enum tagBINDSTATUS
    {	BINDSTATUS_FINDINGRESOURCE	= 1,
	BINDSTATUS_CONNECTING	= BINDSTATUS_FINDINGRESOURCE + 1,
	BINDSTATUS_REDIRECTING	= BINDSTATUS_CONNECTING + 1,
	BINDSTATUS_BEGINDOWNLOADDATA	= BINDSTATUS_REDIRECTING + 1,
	BINDSTATUS_DOWNLOADINGDATA	= BINDSTATUS_BEGINDOWNLOADDATA + 1,
	BINDSTATUS_ENDDOWNLOADDATA	= BINDSTATUS_DOWNLOADINGDATA + 1,
	BINDSTATUS_BEGINDOWNLOADCOMPONENTS	= BINDSTATUS_ENDDOWNLOADDATA + 1,
	BINDSTATUS_INSTALLINGCOMPONENTS	= BINDSTATUS_BEGINDOWNLOADCOMPONENTS + 1,
	BINDSTATUS_ENDDOWNLOADCOMPONENTS	= BINDSTATUS_INSTALLINGCOMPONENTS + 1,
	BINDSTATUS_USINGCACHEDCOPY	= BINDSTATUS_ENDDOWNLOADCOMPONENTS + 1,
	BINDSTATUS_SENDINGREQUEST	= BINDSTATUS_USINGCACHEDCOPY + 1,
	BINDSTATUS_CLASSIDAVAILABLE	= BINDSTATUS_SENDINGREQUEST + 1,
	BINDSTATUS_MIMETYPEAVAILABLE	= BINDSTATUS_CLASSIDAVAILABLE + 1,
	BINDSTATUS_CACHEFILENAMEAVAILABLE	= BINDSTATUS_MIMETYPEAVAILABLE + 1,
	BINDSTATUS_BEGINSYNCOPERATION	= BINDSTATUS_CACHEFILENAMEAVAILABLE + 1,
	BINDSTATUS_ENDSYNCOPERATION	= BINDSTATUS_BEGINSYNCOPERATION + 1,
	BINDSTATUS_BEGINUPLOADDATA	= BINDSTATUS_ENDSYNCOPERATION + 1,
	BINDSTATUS_UPLOADINGDATA	= BINDSTATUS_BEGINUPLOADDATA + 1,
	BINDSTATUS_ENDUPLOADDATA	= BINDSTATUS_UPLOADINGDATA + 1,
	BINDSTATUS_PROTOCOLCLASSID	= BINDSTATUS_ENDUPLOADDATA + 1,
	BINDSTATUS_ENCODING	= BINDSTATUS_PROTOCOLCLASSID + 1,
	BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE	= BINDSTATUS_ENCODING + 1,
	BINDSTATUS_CLASSINSTALLLOCATION	= BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE + 1,
	BINDSTATUS_DECODING	= BINDSTATUS_CLASSINSTALLLOCATION + 1,
	BINDSTATUS_LOADINGMIMEHANDLER	= BINDSTATUS_DECODING + 1,
	BINDSTATUS_CONTENTDISPOSITIONATTACH	= BINDSTATUS_LOADINGMIMEHANDLER + 1,
	BINDSTATUS_FILTERREPORTMIMETYPE	= BINDSTATUS_CONTENTDISPOSITIONATTACH + 1,
	BINDSTATUS_CLSIDCANINSTANTIATE	= BINDSTATUS_FILTERREPORTMIMETYPE + 1,
	BINDSTATUS_IUNKNOWNAVAILABLE	= BINDSTATUS_CLSIDCANINSTANTIATE + 1,
	BINDSTATUS_DIRECTBIND	= BINDSTATUS_IUNKNOWNAVAILABLE + 1,
	BINDSTATUS_RAWMIMETYPE	= BINDSTATUS_DIRECTBIND + 1,
	BINDSTATUS_PROXYDETECTING	= BINDSTATUS_RAWMIMETYPE + 1,
	BINDSTATUS_ACCEPTRANGES	= BINDSTATUS_PROXYDETECTING + 1,
	BINDSTATUS_COOKIE_SENT	= BINDSTATUS_ACCEPTRANGES + 1,
	BINDSTATUS_COMPACT_POLICY_RECEIVED	= BINDSTATUS_COOKIE_SENT + 1,
	BINDSTATUS_COOKIE_SUPPRESSED	= BINDSTATUS_COMPACT_POLICY_RECEIVED + 1,
	BINDSTATUS_COOKIE_STATE_UNKNOWN	= BINDSTATUS_COOKIE_SUPPRESSED + 1,
	BINDSTATUS_COOKIE_STATE_ACCEPT	= BINDSTATUS_COOKIE_STATE_UNKNOWN + 1,
	BINDSTATUS_COOKIE_STATE_REJECT	= BINDSTATUS_COOKIE_STATE_ACCEPT + 1,
	BINDSTATUS_COOKIE_STATE_PROMPT	= BINDSTATUS_COOKIE_STATE_REJECT + 1,
	BINDSTATUS_COOKIE_STATE_LEASH	= BINDSTATUS_COOKIE_STATE_PROMPT + 1,
	BINDSTATUS_COOKIE_STATE_DOWNGRADE	= BINDSTATUS_COOKIE_STATE_LEASH + 1,
	BINDSTATUS_POLICY_HREF	= BINDSTATUS_COOKIE_STATE_DOWNGRADE + 1,
	BINDSTATUS_P3P_HEADER	= BINDSTATUS_POLICY_HREF + 1,
	BINDSTATUS_SESSION_COOKIE_RECEIVED	= BINDSTATUS_P3P_HEADER + 1,
	BINDSTATUS_PERSISTENT_COOKIE_RECEIVED	= BINDSTATUS_SESSION_COOKIE_RECEIVED + 1,
	BINDSTATUS_SESSION_COOKIES_ALLOWED	= BINDSTATUS_PERSISTENT_COOKIE_RECEIVED + 1,
	BINDSTATUS_CACHECONTROL	= BINDSTATUS_SESSION_COOKIES_ALLOWED + 1,
	BINDSTATUS_CONTENTDISPOSITIONFILENAME	= BINDSTATUS_CACHECONTROL + 1,
	BINDSTATUS_MIMETEXTPLAINMISMATCH	= BINDSTATUS_CONTENTDISPOSITIONFILENAME + 1,
	BINDSTATUS_PUBLISHERAVAILABLE	= BINDSTATUS_MIMETEXTPLAINMISMATCH + 1,
	BINDSTATUS_DISPLAYNAMEAVAILABLE	= BINDSTATUS_PUBLISHERAVAILABLE + 1
    } 	BINDSTATUS;


extern const IID IID_IBindStatusCallback;











































#line 1427 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IBindStatusCallbackVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IBindStatusCallback * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IBindStatusCallback * This);
        
        ULONG ( __stdcall *Release )( 
            IBindStatusCallback * This);
        
        HRESULT ( __stdcall *OnStartBinding )( 
            IBindStatusCallback * This,
             DWORD dwReserved,
             IBinding *pib);
        
        HRESULT ( __stdcall *GetPriority )( 
            IBindStatusCallback * This,
             LONG *pnPriority);
        
        HRESULT ( __stdcall *OnLowResource )( 
            IBindStatusCallback * This,
             DWORD reserved);
        
        HRESULT ( __stdcall *OnProgress )( 
            IBindStatusCallback * This,
             ULONG ulProgress,
             ULONG ulProgressMax,
             ULONG ulStatusCode,
             LPCWSTR szStatusText);
        
        HRESULT ( __stdcall *OnStopBinding )( 
            IBindStatusCallback * This,
             HRESULT hresult,
             LPCWSTR szError);
        
         HRESULT ( __stdcall *GetBindInfo )( 
            IBindStatusCallback * This,
             DWORD *grfBINDF,
             BINDINFO *pbindinfo);
        
         HRESULT ( __stdcall *OnDataAvailable )( 
            IBindStatusCallback * This,
             DWORD grfBSCF,
             DWORD dwSize,
             FORMATETC *pformatetc,
             STGMEDIUM *pstgmed);
        
        HRESULT ( __stdcall *OnObjectAvailable )( 
            IBindStatusCallback * This,
             const IID * const riid,
             IUnknown *punk);
        
        
    } IBindStatusCallbackVtbl;

    struct IBindStatusCallback
    {
         struct IBindStatusCallbackVtbl *lpVtbl;
    };

    









































#line 1536 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IBindStatusCallback_OnStartBinding_Proxy( 
    IBindStatusCallback * This,
     DWORD dwReserved,
     IBinding *pib);


void __stdcall IBindStatusCallback_OnStartBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_GetPriority_Proxy( 
    IBindStatusCallback * This,
     LONG *pnPriority);


void __stdcall IBindStatusCallback_GetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_OnLowResource_Proxy( 
    IBindStatusCallback * This,
     DWORD reserved);


void __stdcall IBindStatusCallback_OnLowResource_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_OnProgress_Proxy( 
    IBindStatusCallback * This,
     ULONG ulProgress,
     ULONG ulProgressMax,
     ULONG ulStatusCode,
     LPCWSTR szStatusText);


void __stdcall IBindStatusCallback_OnProgress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_OnStopBinding_Proxy( 
    IBindStatusCallback * This,
     HRESULT hresult,
     LPCWSTR szError);


void __stdcall IBindStatusCallback_OnStopBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindStatusCallback_RemoteGetBindInfo_Proxy( 
    IBindStatusCallback * This,
     DWORD *grfBINDF,
     RemBINDINFO *pbindinfo,
     RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteGetBindInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindStatusCallback_RemoteOnDataAvailable_Proxy( 
    IBindStatusCallback * This,
     DWORD grfBSCF,
     DWORD dwSize,
     RemFORMATETC *pformatetc,
     RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteOnDataAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IBindStatusCallback_OnObjectAvailable_Proxy( 
    IBindStatusCallback * This,
     const IID * const riid,
     IUnknown *punk);


void __stdcall IBindStatusCallback_OnObjectAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1648 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 1654 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0182_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0182_v0_0_s_ifspec;





 

typedef  IAuthenticate *LPAUTHENTICATION;


extern const IID IID_IAuthenticate;














#line 1686 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IAuthenticateVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IAuthenticate * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IAuthenticate * This);
        
        ULONG ( __stdcall *Release )( 
            IAuthenticate * This);
        
        HRESULT ( __stdcall *Authenticate )( 
            IAuthenticate * This,
             HWND *phwnd,
             LPWSTR *pszUsername,
             LPWSTR *pszPassword);
        
        
    } IAuthenticateVtbl;

    struct IAuthenticate
    {
         struct IAuthenticateVtbl *lpVtbl;
    };

    




















#line 1738 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IAuthenticate_Authenticate_Proxy( 
    IAuthenticate * This,
     HWND *phwnd,
     LPWSTR *pszUsername,
     LPWSTR *pszPassword);


void __stdcall IAuthenticate_Authenticate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1757 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 1763 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0183_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0183_v0_0_s_ifspec;





 

typedef  IHttpNegotiate *LPHTTPNEGOTIATE;


extern const IID IID_IHttpNegotiate;





















#line 1802 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IHttpNegotiateVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IHttpNegotiate * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IHttpNegotiate * This);
        
        ULONG ( __stdcall *Release )( 
            IHttpNegotiate * This);
        
        HRESULT ( __stdcall *BeginningTransaction )( 
            IHttpNegotiate * This,
             LPCWSTR szURL,
             LPCWSTR szHeaders,
             DWORD dwReserved,
             LPWSTR *pszAdditionalHeaders);
        
        HRESULT ( __stdcall *OnResponse )( 
            IHttpNegotiate * This,
             DWORD dwResponseCode,
             LPCWSTR szResponseHeaders,
             LPCWSTR szRequestHeaders,
             LPWSTR *pszAdditionalRequestHeaders);
        
        
    } IHttpNegotiateVtbl;

    struct IHttpNegotiate
    {
         struct IHttpNegotiateVtbl *lpVtbl;
    };

    























#line 1865 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IHttpNegotiate_BeginningTransaction_Proxy( 
    IHttpNegotiate * This,
     LPCWSTR szURL,
     LPCWSTR szHeaders,
     DWORD dwReserved,
     LPWSTR *pszAdditionalHeaders);


void __stdcall IHttpNegotiate_BeginningTransaction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IHttpNegotiate_OnResponse_Proxy( 
    IHttpNegotiate * This,
     DWORD dwResponseCode,
     LPCWSTR szResponseHeaders,
     LPCWSTR szRequestHeaders,
     LPWSTR *pszAdditionalRequestHeaders);


void __stdcall IHttpNegotiate_OnResponse_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1900 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 1906 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0184_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0184_v0_0_s_ifspec;





 

typedef  IHttpNegotiate2 *LPHTTPNEGOTIATE2;


extern const IID IID_IHttpNegotiate2;














#line 1938 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IHttpNegotiate2Vtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IHttpNegotiate2 * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IHttpNegotiate2 * This);
        
        ULONG ( __stdcall *Release )( 
            IHttpNegotiate2 * This);
        
        HRESULT ( __stdcall *BeginningTransaction )( 
            IHttpNegotiate2 * This,
             LPCWSTR szURL,
             LPCWSTR szHeaders,
             DWORD dwReserved,
             LPWSTR *pszAdditionalHeaders);
        
        HRESULT ( __stdcall *OnResponse )( 
            IHttpNegotiate2 * This,
             DWORD dwResponseCode,
             LPCWSTR szResponseHeaders,
             LPCWSTR szRequestHeaders,
             LPWSTR *pszAdditionalRequestHeaders);
        
        HRESULT ( __stdcall *GetRootSecurityId )( 
            IHttpNegotiate2 * This,
             BYTE *pbSecurityId,
             DWORD *pcbSecurityId,
             DWORD_PTR dwReserved);
        
        
    } IHttpNegotiate2Vtbl;

    struct IHttpNegotiate2
    {
         struct IHttpNegotiate2Vtbl *lpVtbl;
    };

    



























#line 2011 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IHttpNegotiate2_GetRootSecurityId_Proxy( 
    IHttpNegotiate2 * This,
     BYTE *pbSecurityId,
     DWORD *pcbSecurityId,
     DWORD_PTR dwReserved);


void __stdcall IHttpNegotiate2_GetRootSecurityId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2030 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 2036 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0185_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0185_v0_0_s_ifspec;





 

typedef  IWinInetFileStream *LPWININETFILESTREAM;


extern const IID IID_IWinInetFileStream;
















#line 2070 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IWinInetFileStreamVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IWinInetFileStream * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IWinInetFileStream * This);
        
        ULONG ( __stdcall *Release )( 
            IWinInetFileStream * This);
        
        HRESULT ( __stdcall *SetHandleForUnlock )( 
            IWinInetFileStream * This,
             DWORD_PTR hWinInetLockHandle,
             DWORD_PTR dwReserved);
        
        HRESULT ( __stdcall *SetDeleteFile )( 
            IWinInetFileStream * This,
             DWORD_PTR dwReserved);
        
        
    } IWinInetFileStreamVtbl;

    struct IWinInetFileStream
    {
         struct IWinInetFileStreamVtbl *lpVtbl;
    };

    























#line 2128 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IWinInetFileStream_SetHandleForUnlock_Proxy( 
    IWinInetFileStream * This,
     DWORD_PTR hWinInetLockHandle,
     DWORD_PTR dwReserved);


void __stdcall IWinInetFileStream_SetHandleForUnlock_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IWinInetFileStream_SetDeleteFile_Proxy( 
    IWinInetFileStream * This,
     DWORD_PTR dwReserved);


void __stdcall IWinInetFileStream_SetDeleteFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2158 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 2164 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0186_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0186_v0_0_s_ifspec;





 

typedef  IWindowForBindingUI *LPWINDOWFORBINDINGUI;


extern const IID IID_IWindowForBindingUI;













#line 2195 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IWindowForBindingUIVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IWindowForBindingUI * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IWindowForBindingUI * This);
        
        ULONG ( __stdcall *Release )( 
            IWindowForBindingUI * This);
        
        HRESULT ( __stdcall *GetWindow )( 
            IWindowForBindingUI * This,
             const GUID * const rguidReason,
             HWND *phwnd);
        
        
    } IWindowForBindingUIVtbl;

    struct IWindowForBindingUI
    {
         struct IWindowForBindingUIVtbl *lpVtbl;
    };

    




















#line 2246 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IWindowForBindingUI_GetWindow_Proxy( 
    IWindowForBindingUI * This,
     const GUID * const rguidReason,
     HWND *phwnd);


void __stdcall IWindowForBindingUI_GetWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2264 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 2270 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0187_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0187_v0_0_s_ifspec;





 

typedef  ICodeInstall *LPCODEINSTALL;

typedef  
enum __MIDL_ICodeInstall_0001
    {	CIP_DISK_FULL	= 0,
	CIP_ACCESS_DENIED	= CIP_DISK_FULL + 1,
	CIP_NEWER_VERSION_EXISTS	= CIP_ACCESS_DENIED + 1,
	CIP_OLDER_VERSION_EXISTS	= CIP_NEWER_VERSION_EXISTS + 1,
	CIP_NAME_CONFLICT	= CIP_OLDER_VERSION_EXISTS + 1,
	CIP_TRUST_VERIFICATION_COMPONENT_MISSING	= CIP_NAME_CONFLICT + 1,
	CIP_EXE_SELF_REGISTERATION_TIMEOUT	= CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1,
	CIP_UNSAFE_TO_ABORT	= CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1,
	CIP_NEED_REBOOT	= CIP_UNSAFE_TO_ABORT + 1,
	CIP_NEED_REBOOT_UI_PERMISSION	= CIP_NEED_REBOOT + 1
    } 	CIP_STATUS;


extern const IID IID_ICodeInstall;















#line 2317 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct ICodeInstallVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ICodeInstall * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ICodeInstall * This);
        
        ULONG ( __stdcall *Release )( 
            ICodeInstall * This);
        
        HRESULT ( __stdcall *GetWindow )( 
            ICodeInstall * This,
             const GUID * const rguidReason,
             HWND *phwnd);
        
        HRESULT ( __stdcall *OnCodeInstallProblem )( 
            ICodeInstall * This,
             ULONG ulStatusCode,
             LPCWSTR szDestination,
             LPCWSTR szSource,
             DWORD dwReserved);
        
        
    } ICodeInstallVtbl;

    struct ICodeInstall
    {
         struct ICodeInstallVtbl *lpVtbl;
    };

    
























#line 2379 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall ICodeInstall_OnCodeInstallProblem_Proxy( 
    ICodeInstall * This,
     ULONG ulStatusCode,
     LPCWSTR szDestination,
     LPCWSTR szSource,
     DWORD dwReserved);


void __stdcall ICodeInstall_OnCodeInstallProblem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2399 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 2405 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0188_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0188_v0_0_s_ifspec;





 

typedef  IWinInetInfo *LPWININETINFO;


extern const IID IID_IWinInetInfo;














#line 2437 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IWinInetInfoVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IWinInetInfo * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IWinInetInfo * This);
        
        ULONG ( __stdcall *Release )( 
            IWinInetInfo * This);
        
         HRESULT ( __stdcall *QueryOption )( 
            IWinInetInfo * This,
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pcbBuf);
        
        
    } IWinInetInfoVtbl;

    struct IWinInetInfo
    {
         struct IWinInetInfoVtbl *lpVtbl;
    };

    




















#line 2489 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 HRESULT __stdcall IWinInetInfo_RemoteQueryOption_Proxy( 
    IWinInetInfo * This,
     DWORD dwOption,
     BYTE *pBuffer,
     DWORD *pcbBuf);


void __stdcall IWinInetInfo_RemoteQueryOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2508 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 2514 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0189_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0189_v0_0_s_ifspec;





 

typedef  IHttpSecurity *LPHTTPSECURITY;


extern const IID IID_IHttpSecurity;












#line 2545 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IHttpSecurityVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IHttpSecurity * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IHttpSecurity * This);
        
        ULONG ( __stdcall *Release )( 
            IHttpSecurity * This);
        
        HRESULT ( __stdcall *GetWindow )( 
            IHttpSecurity * This,
             const GUID * const rguidReason,
             HWND *phwnd);
        
        HRESULT ( __stdcall *OnSecurityProblem )( 
            IHttpSecurity * This,
             DWORD dwProblem);
        
        
    } IHttpSecurityVtbl;

    struct IHttpSecurity
    {
         struct IHttpSecurityVtbl *lpVtbl;
    };

    
























#line 2604 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IHttpSecurity_OnSecurityProblem_Proxy( 
    IHttpSecurity * This,
     DWORD dwProblem);


void __stdcall IHttpSecurity_OnSecurityProblem_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2621 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 2627 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0190_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0190_v0_0_s_ifspec;





 

typedef  IWinInetHttpInfo *LPWININETHTTPINFO;


extern const IID IID_IWinInetHttpInfo;
















#line 2661 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IWinInetHttpInfoVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IWinInetHttpInfo * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IWinInetHttpInfo * This);
        
        ULONG ( __stdcall *Release )( 
            IWinInetHttpInfo * This);
        
         HRESULT ( __stdcall *QueryOption )( 
            IWinInetHttpInfo * This,
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pcbBuf);
        
         HRESULT ( __stdcall *QueryInfo )( 
            IWinInetHttpInfo * This,
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pcbBuf,
             DWORD *pdwFlags,
             DWORD *pdwReserved);
        
        
    } IWinInetHttpInfoVtbl;

    struct IWinInetHttpInfo
    {
         struct IWinInetHttpInfoVtbl *lpVtbl;
    };

    
























#line 2725 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 HRESULT __stdcall IWinInetHttpInfo_RemoteQueryInfo_Proxy( 
    IWinInetHttpInfo * This,
     DWORD dwOption,
     BYTE *pBuffer,
     DWORD *pcbBuf,
     DWORD *pdwFlags,
     DWORD *pdwReserved);


void __stdcall IWinInetHttpInfo_RemoteQueryInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2746 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 2752 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0191_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0191_v0_0_s_ifspec;





 

typedef  IWinInetCacheHints *LPWININETCACHEHINTS;


extern const IID IID_IWinInetCacheHints;
















#line 2786 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IWinInetCacheHintsVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IWinInetCacheHints * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IWinInetCacheHints * This);
        
        ULONG ( __stdcall *Release )( 
            IWinInetCacheHints * This);
        
        HRESULT ( __stdcall *SetCacheExtension )( 
            IWinInetCacheHints * This,
             LPCWSTR pwzExt,
             LPVOID pszCacheFile,
             DWORD *pcbCacheFile,
             DWORD *pdwWinInetError,
             DWORD *pdwReserved);
        
        
    } IWinInetCacheHintsVtbl;

    struct IWinInetCacheHints
    {
         struct IWinInetCacheHintsVtbl *lpVtbl;
    };

    




















#line 2840 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IWinInetCacheHints_SetCacheExtension_Proxy( 
    IWinInetCacheHints * This,
     LPCWSTR pwzExt,
     LPVOID pszCacheFile,
     DWORD *pcbCacheFile,
     DWORD *pdwWinInetError,
     DWORD *pdwReserved);


void __stdcall IWinInetCacheHints_SetCacheExtension_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2861 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 2867 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern const GUID SID_BindHost;


extern RPC_IF_HANDLE __MIDL_itf_urlmon_0192_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0192_v0_0_s_ifspec;





 

typedef  IBindHost *LPBINDHOST;


extern const IID IID_IBindHost;





























#line 2917 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IBindHostVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IBindHost * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IBindHost * This);
        
        ULONG ( __stdcall *Release )( 
            IBindHost * This);
        
        HRESULT ( __stdcall *CreateMoniker )( 
            IBindHost * This,
             LPOLESTR szName,
             IBindCtx *pBC,
             IMoniker **ppmk,
             DWORD dwReserved);
        
         HRESULT ( __stdcall *MonikerBindToStorage )( 
            IBindHost * This,
             IMoniker *pMk,
             IBindCtx *pBC,
             IBindStatusCallback *pBSC,
             const IID * const riid,
             void **ppvObj);
        
         HRESULT ( __stdcall *MonikerBindToObject )( 
            IBindHost * This,
             IMoniker *pMk,
             IBindCtx *pBC,
             IBindStatusCallback *pBSC,
             const IID * const riid,
             void **ppvObj);
        
        
    } IBindHostVtbl;

    struct IBindHost
    {
         struct IBindHostVtbl *lpVtbl;
    };

    


























#line 2992 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IBindHost_CreateMoniker_Proxy( 
    IBindHost * This,
     LPOLESTR szName,
     IBindCtx *pBC,
     IMoniker **ppmk,
     DWORD dwReserved);


void __stdcall IBindHost_CreateMoniker_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindHost_RemoteMonikerBindToStorage_Proxy( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID * const riid,
     IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindHost_RemoteMonikerBindToObject_Proxy( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID * const riid,
     IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3044 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 3050 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"
                                                                                                           





                                                                                                           
                                                                                                           
struct IBindStatusCallback;                                                                                
extern HRESULT __stdcall HlinkSimpleNavigateToString(                                                                        
     LPCWSTR szTarget,         
     LPCWSTR szLocation,       
     LPCWSTR szTargetFrameName,
     IUnknown *pUnk,           
     IBindCtx *pbc,            
     IBindStatusCallback *,                                                                      
     DWORD grfHLNF,            
     DWORD dwReserved          
);                                                                                                         
                                                                                                           
extern HRESULT __stdcall HlinkSimpleNavigateToMoniker(                                                                       
     IMoniker *pmkTarget,      
     LPCWSTR szLocation,       
     LPCWSTR szTargetFrameName,
     IUnknown *pUnk,           
     IBindCtx *pbc,            
     IBindStatusCallback *,                                                                      
     DWORD grfHLNF,            
     DWORD dwReserved          
);                                                                                                         
                                                                                                           
extern HRESULT __stdcall URLOpenStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                                        
extern HRESULT __stdcall URLOpenStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                                       
extern HRESULT __stdcall URLOpenPullStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                                    
extern HRESULT __stdcall URLOpenPullStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                                   
extern HRESULT __stdcall URLDownloadToFileA(LPUNKNOWN,LPCSTR,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                             
extern HRESULT __stdcall URLDownloadToFileW(LPUNKNOWN,LPCWSTR,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                           
extern HRESULT __stdcall URLDownloadToCacheFileA(LPUNKNOWN,LPCSTR,LPTSTR,DWORD,DWORD,LPBINDSTATUSCALLBACK);                  
extern HRESULT __stdcall URLDownloadToCacheFileW(LPUNKNOWN,LPCWSTR,LPWSTR,DWORD,DWORD,LPBINDSTATUSCALLBACK);                 
extern HRESULT __stdcall URLOpenBlockingStreamA(LPUNKNOWN,LPCSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);                      
extern HRESULT __stdcall URLOpenBlockingStreamW(LPUNKNOWN,LPCWSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);                     
                                                                                                           












#line 3105 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"
                                                                                                           
                                                                                                           
extern HRESULT __stdcall HlinkGoBack(IUnknown *pUnk);                                                                        
extern HRESULT __stdcall HlinkGoForward(IUnknown *pUnk);                                                                     
extern HRESULT __stdcall HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget);                                              
extern HRESULT __stdcall HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget);                                          
                                                                                                           













extern RPC_IF_HANDLE __MIDL_itf_urlmon_0193_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0193_v0_0_s_ifspec;





 

typedef  IInternet *LPIINTERNET;


extern const IID IID_IInternet;









#line 3148 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternet * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternet * This);
        
        ULONG ( __stdcall *Release )( 
            IInternet * This);
        
        
    } IInternetVtbl;

    struct IInternet
    {
         struct IInternetVtbl *lpVtbl;
    };

    

















#line 3191 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




#line 3196 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 3202 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0194_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0194_v0_0_s_ifspec;





 

typedef  IInternetBindInfo *LPIINTERNETBINDINFO;

typedef 
enum tagBINDSTRING
    {	BINDSTRING_HEADERS	= 1,
	BINDSTRING_ACCEPT_MIMES	= BINDSTRING_HEADERS + 1,
	BINDSTRING_EXTRA_URL	= BINDSTRING_ACCEPT_MIMES + 1,
	BINDSTRING_LANGUAGE	= BINDSTRING_EXTRA_URL + 1,
	BINDSTRING_USERNAME	= BINDSTRING_LANGUAGE + 1,
	BINDSTRING_PASSWORD	= BINDSTRING_USERNAME + 1,
	BINDSTRING_UA_PIXELS	= BINDSTRING_PASSWORD + 1,
	BINDSTRING_UA_COLOR	= BINDSTRING_UA_PIXELS + 1,
	BINDSTRING_OS	= BINDSTRING_UA_COLOR + 1,
	BINDSTRING_USER_AGENT	= BINDSTRING_OS + 1,
	BINDSTRING_ACCEPT_ENCODINGS	= BINDSTRING_USER_AGENT + 1,
	BINDSTRING_POST_COOKIE	= BINDSTRING_ACCEPT_ENCODINGS + 1,
	BINDSTRING_POST_DATA_MIME	= BINDSTRING_POST_COOKIE + 1,
	BINDSTRING_URL	= BINDSTRING_POST_DATA_MIME + 1,
	BINDSTRING_IID	= BINDSTRING_URL + 1,
	BINDSTRING_FLAG_BIND_TO_OBJECT	= BINDSTRING_IID + 1,
	BINDSTRING_PTR_BIND_CONTEXT	= BINDSTRING_FLAG_BIND_TO_OBJECT + 1
    } 	BINDSTRING;


extern const IID IID_IInternetBindInfo;



















#line 3260 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetBindInfoVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetBindInfo * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetBindInfo * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetBindInfo * This);
        
        HRESULT ( __stdcall *GetBindInfo )( 
            IInternetBindInfo * This,
             DWORD *grfBINDF,
             BINDINFO *pbindinfo);
        
        HRESULT ( __stdcall *GetBindString )( 
            IInternetBindInfo * This,
             ULONG ulStringType,
             LPOLESTR *ppwzStr,
             ULONG cEl,
             ULONG *pcElFetched);
        
        
    } IInternetBindInfoVtbl;

    struct IInternetBindInfo
    {
         struct IInternetBindInfoVtbl *lpVtbl;
    };

    























#line 3321 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetBindInfo_GetBindInfo_Proxy( 
    IInternetBindInfo * This,
     DWORD *grfBINDF,
     BINDINFO *pbindinfo);


void __stdcall IInternetBindInfo_GetBindInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetBindInfo_GetBindString_Proxy( 
    IInternetBindInfo * This,
     ULONG ulStringType,
     LPOLESTR *ppwzStr,
     ULONG cEl,
     ULONG *pcElFetched);


void __stdcall IInternetBindInfo_GetBindString_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3354 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 3360 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0195_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0195_v0_0_s_ifspec;





 

typedef  IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;

typedef 
enum _tagPI_FLAGS
    {	PI_PARSE_URL	= 0x1,
	PI_FILTER_MODE	= 0x2,
	PI_FORCE_ASYNC	= 0x4,
	PI_USE_WORKERTHREAD	= 0x8,
	PI_MIMEVERIFICATION	= 0x10,
	PI_CLSIDLOOKUP	= 0x20,
	PI_DATAPROGRESS	= 0x40,
	PI_SYNCHRONOUS	= 0x80,
	PI_APARTMENTTHREADED	= 0x100,
	PI_CLASSINSTALL	= 0x200,
	PI_PASSONBINDCTX	= 0x2000,
	PI_NOMIMEHANDLER	= 0x8000,
	PI_LOADAPPDIRECT	= 0x4000,
	PD_FORCE_SWITCH	= 0x10000,
	PI_PREFERDEFAULTHANDLER	= 0x20000
    } 	PI_FLAGS;

typedef struct _tagPROTOCOLDATA
    {
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
    } 	PROTOCOLDATA;

typedef struct _tagStartParam
    {
    IID iid;
    IBindCtx *pIBindCtx;
    IUnknown *pItf;
    } 	StartParam;


extern const IID IID_IInternetProtocolRoot;






























#line 3442 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetProtocolRootVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetProtocolRoot * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetProtocolRoot * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetProtocolRoot * This);
        
        HRESULT ( __stdcall *Start )( 
            IInternetProtocolRoot * This,
             LPCWSTR szUrl,
             IInternetProtocolSink *pOIProtSink,
             IInternetBindInfo *pOIBindInfo,
             DWORD grfPI,
             HANDLE_PTR dwReserved);
        
        HRESULT ( __stdcall *Continue )( 
            IInternetProtocolRoot * This,
             PROTOCOLDATA *pProtocolData);
        
        HRESULT ( __stdcall *Abort )( 
            IInternetProtocolRoot * This,
             HRESULT hrReason,
             DWORD dwOptions);
        
        HRESULT ( __stdcall *Terminate )( 
            IInternetProtocolRoot * This,
             DWORD dwOptions);
        
        HRESULT ( __stdcall *Suspend )( 
            IInternetProtocolRoot * This);
        
        HRESULT ( __stdcall *Resume )( 
            IInternetProtocolRoot * This);
        
        
    } IInternetProtocolRootVtbl;

    struct IInternetProtocolRoot
    {
         struct IInternetProtocolRootVtbl *lpVtbl;
    };

    



































#line 3530 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetProtocolRoot_Start_Proxy( 
    IInternetProtocolRoot * This,
     LPCWSTR szUrl,
     IInternetProtocolSink *pOIProtSink,
     IInternetBindInfo *pOIBindInfo,
     DWORD grfPI,
     HANDLE_PTR dwReserved);


void __stdcall IInternetProtocolRoot_Start_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Continue_Proxy( 
    IInternetProtocolRoot * This,
     PROTOCOLDATA *pProtocolData);


void __stdcall IInternetProtocolRoot_Continue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Abort_Proxy( 
    IInternetProtocolRoot * This,
     HRESULT hrReason,
     DWORD dwOptions);


void __stdcall IInternetProtocolRoot_Abort_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Terminate_Proxy( 
    IInternetProtocolRoot * This,
     DWORD dwOptions);


void __stdcall IInternetProtocolRoot_Terminate_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Suspend_Proxy( 
    IInternetProtocolRoot * This);


void __stdcall IInternetProtocolRoot_Suspend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolRoot_Resume_Proxy( 
    IInternetProtocolRoot * This);


void __stdcall IInternetProtocolRoot_Resume_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3610 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 3616 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0196_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0196_v0_0_s_ifspec;





 

typedef  IInternetProtocol *LPIINTERNETPROTOCOL;


extern const IID IID_IInternetProtocol;
























#line 3658 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetProtocolVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetProtocol * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetProtocol * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetProtocol * This);
        
        HRESULT ( __stdcall *Start )( 
            IInternetProtocol * This,
             LPCWSTR szUrl,
             IInternetProtocolSink *pOIProtSink,
             IInternetBindInfo *pOIBindInfo,
             DWORD grfPI,
             HANDLE_PTR dwReserved);
        
        HRESULT ( __stdcall *Continue )( 
            IInternetProtocol * This,
             PROTOCOLDATA *pProtocolData);
        
        HRESULT ( __stdcall *Abort )( 
            IInternetProtocol * This,
             HRESULT hrReason,
             DWORD dwOptions);
        
        HRESULT ( __stdcall *Terminate )( 
            IInternetProtocol * This,
             DWORD dwOptions);
        
        HRESULT ( __stdcall *Suspend )( 
            IInternetProtocol * This);
        
        HRESULT ( __stdcall *Resume )( 
            IInternetProtocol * This);
        
        HRESULT ( __stdcall *Read )( 
            IInternetProtocol * This,
             void *pv,
             ULONG cb,
             ULONG *pcbRead);
        
        HRESULT ( __stdcall *Seek )( 
            IInternetProtocol * This,
             LARGE_INTEGER dlibMove,
             DWORD dwOrigin,
             ULARGE_INTEGER *plibNewPosition);
        
        HRESULT ( __stdcall *LockRequest )( 
            IInternetProtocol * This,
             DWORD dwOptions);
        
        HRESULT ( __stdcall *UnlockRequest )( 
            IInternetProtocol * This);
        
        
    } IInternetProtocolVtbl;

    struct IInternetProtocol
    {
         struct IInternetProtocolVtbl *lpVtbl;
    };

    
















































#line 3778 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetProtocol_Read_Proxy( 
    IInternetProtocol * This,
     void *pv,
     ULONG cb,
     ULONG *pcbRead);


void __stdcall IInternetProtocol_Read_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocol_Seek_Proxy( 
    IInternetProtocol * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     ULARGE_INTEGER *plibNewPosition);


void __stdcall IInternetProtocol_Seek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocol_LockRequest_Proxy( 
    IInternetProtocol * This,
     DWORD dwOptions);


void __stdcall IInternetProtocol_LockRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocol_UnlockRequest_Proxy( 
    IInternetProtocol * This);


void __stdcall IInternetProtocol_UnlockRequest_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3834 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 3840 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0197_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0197_v0_0_s_ifspec;





 

typedef  IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;


extern const IID IID_IInternetProtocolSink;


























#line 3884 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetProtocolSinkVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetProtocolSink * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetProtocolSink * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetProtocolSink * This);
        
        HRESULT ( __stdcall *Switch )( 
            IInternetProtocolSink * This,
             PROTOCOLDATA *pProtocolData);
        
        HRESULT ( __stdcall *ReportProgress )( 
            IInternetProtocolSink * This,
             ULONG ulStatusCode,
             LPCWSTR szStatusText);
        
        HRESULT ( __stdcall *ReportData )( 
            IInternetProtocolSink * This,
             DWORD grfBSCF,
             ULONG ulProgress,
             ULONG ulProgressMax);
        
        HRESULT ( __stdcall *ReportResult )( 
            IInternetProtocolSink * This,
             HRESULT hrResult,
             DWORD dwError,
             LPCWSTR szResult);
        
        
    } IInternetProtocolSinkVtbl;

    struct IInternetProtocolSink
    {
         struct IInternetProtocolSinkVtbl *lpVtbl;
    };

    





























#line 3960 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetProtocolSink_Switch_Proxy( 
    IInternetProtocolSink * This,
     PROTOCOLDATA *pProtocolData);


void __stdcall IInternetProtocolSink_Switch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolSink_ReportProgress_Proxy( 
    IInternetProtocolSink * This,
     ULONG ulStatusCode,
     LPCWSTR szStatusText);


void __stdcall IInternetProtocolSink_ReportProgress_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolSink_ReportData_Proxy( 
    IInternetProtocolSink * This,
     DWORD grfBSCF,
     ULONG ulProgress,
     ULONG ulProgressMax);


void __stdcall IInternetProtocolSink_ReportData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolSink_ReportResult_Proxy( 
    IInternetProtocolSink * This,
     HRESULT hrResult,
     DWORD dwError,
     LPCWSTR szResult);


void __stdcall IInternetProtocolSink_ReportResult_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4018 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 4024 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0198_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0198_v0_0_s_ifspec;





 

typedef  IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;


extern const IID IID_IInternetProtocolSinkStackable;
















#line 4058 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetProtocolSinkStackableVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetProtocolSinkStackable * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetProtocolSinkStackable * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetProtocolSinkStackable * This);
        
        HRESULT ( __stdcall *SwitchSink )( 
            IInternetProtocolSinkStackable * This,
             IInternetProtocolSink *pOIProtSink);
        
        HRESULT ( __stdcall *CommitSwitch )( 
            IInternetProtocolSinkStackable * This);
        
        HRESULT ( __stdcall *RollbackSwitch )( 
            IInternetProtocolSinkStackable * This);
        
        
    } IInternetProtocolSinkStackableVtbl;

    struct IInternetProtocolSinkStackable
    {
         struct IInternetProtocolSinkStackableVtbl *lpVtbl;
    };

    


























#line 4120 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetProtocolSinkStackable_SwitchSink_Proxy( 
    IInternetProtocolSinkStackable * This,
     IInternetProtocolSink *pOIProtSink);


void __stdcall IInternetProtocolSinkStackable_SwitchSink_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolSinkStackable_CommitSwitch_Proxy( 
    IInternetProtocolSinkStackable * This);


void __stdcall IInternetProtocolSinkStackable_CommitSwitch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolSinkStackable_RollbackSwitch_Proxy( 
    IInternetProtocolSinkStackable * This);


void __stdcall IInternetProtocolSinkStackable_RollbackSwitch_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4159 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 4165 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0199_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0199_v0_0_s_ifspec;





 

typedef  IInternetSession *LPIINTERNETSESSION;

typedef 
enum _tagOIBDG_FLAGS
    {	OIBDG_APARTMENTTHREADED	= 0x100,
	OIBDG_DATAONLY	= 0x1000
    } 	OIBDG_FLAGS;


extern const IID IID_IInternetSession;


















































#line 4239 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetSessionVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetSession * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetSession * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetSession * This);
        
        HRESULT ( __stdcall *RegisterNameSpace )( 
            IInternetSession * This,
             IClassFactory *pCF,
             const IID * const rclsid,
             LPCWSTR pwzProtocol,
             ULONG cPatterns,
             const LPCWSTR *ppwzPatterns,
             DWORD dwReserved);
        
        HRESULT ( __stdcall *UnregisterNameSpace )( 
            IInternetSession * This,
             IClassFactory *pCF,
             LPCWSTR pszProtocol);
        
        HRESULT ( __stdcall *RegisterMimeFilter )( 
            IInternetSession * This,
             IClassFactory *pCF,
             const IID * const rclsid,
             LPCWSTR pwzType);
        
        HRESULT ( __stdcall *UnregisterMimeFilter )( 
            IInternetSession * This,
             IClassFactory *pCF,
             LPCWSTR pwzType);
        
        HRESULT ( __stdcall *CreateBinding )( 
            IInternetSession * This,
             LPBC pBC,
             LPCWSTR szUrl,
             IUnknown *pUnkOuter,
             IUnknown **ppUnk,
             IInternetProtocol **ppOInetProt,
             DWORD dwOption);
        
        HRESULT ( __stdcall *SetSessionOption )( 
            IInternetSession * This,
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD dwBufferLength,
             DWORD dwReserved);
        
        HRESULT ( __stdcall *GetSessionOption )( 
            IInternetSession * This,
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pdwBufferLength,
             DWORD dwReserved);
        
        
    } IInternetSessionVtbl;

    struct IInternetSession
    {
         struct IInternetSessionVtbl *lpVtbl;
    };

    






































#line 4351 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetSession_RegisterNameSpace_Proxy( 
    IInternetSession * This,
     IClassFactory *pCF,
     const IID * const rclsid,
     LPCWSTR pwzProtocol,
     ULONG cPatterns,
     const LPCWSTR *ppwzPatterns,
     DWORD dwReserved);


void __stdcall IInternetSession_RegisterNameSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_UnregisterNameSpace_Proxy( 
    IInternetSession * This,
     IClassFactory *pCF,
     LPCWSTR pszProtocol);


void __stdcall IInternetSession_UnregisterNameSpace_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_RegisterMimeFilter_Proxy( 
    IInternetSession * This,
     IClassFactory *pCF,
     const IID * const rclsid,
     LPCWSTR pwzType);


void __stdcall IInternetSession_RegisterMimeFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_UnregisterMimeFilter_Proxy( 
    IInternetSession * This,
     IClassFactory *pCF,
     LPCWSTR pwzType);


void __stdcall IInternetSession_UnregisterMimeFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_CreateBinding_Proxy( 
    IInternetSession * This,
     LPBC pBC,
     LPCWSTR szUrl,
     IUnknown *pUnkOuter,
     IUnknown **ppUnk,
     IInternetProtocol **ppOInetProt,
     DWORD dwOption);


void __stdcall IInternetSession_CreateBinding_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_SetSessionOption_Proxy( 
    IInternetSession * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD dwBufferLength,
     DWORD dwReserved);


void __stdcall IInternetSession_SetSessionOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSession_GetSessionOption_Proxy( 
    IInternetSession * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD *pdwBufferLength,
     DWORD dwReserved);


void __stdcall IInternetSession_GetSessionOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4460 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 4466 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0200_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0200_v0_0_s_ifspec;





 

typedef  IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;


extern const IID IID_IInternetThreadSwitch;













#line 4497 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetThreadSwitchVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetThreadSwitch * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetThreadSwitch * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetThreadSwitch * This);
        
        HRESULT ( __stdcall *Prepare )( 
            IInternetThreadSwitch * This);
        
        HRESULT ( __stdcall *Continue )( 
            IInternetThreadSwitch * This);
        
        
    } IInternetThreadSwitchVtbl;

    struct IInternetThreadSwitch
    {
         struct IInternetThreadSwitchVtbl *lpVtbl;
    };

    























#line 4552 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetThreadSwitch_Prepare_Proxy( 
    IInternetThreadSwitch * This);


void __stdcall IInternetThreadSwitch_Prepare_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetThreadSwitch_Continue_Proxy( 
    IInternetThreadSwitch * This);


void __stdcall IInternetThreadSwitch_Continue_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4579 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 4585 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0201_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0201_v0_0_s_ifspec;





 

typedef  IInternetPriority *LPIINTERNETPRIORITY;


extern const IID IID_IInternetPriority;















#line 4618 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetPriorityVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetPriority * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetPriority * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetPriority * This);
        
        HRESULT ( __stdcall *SetPriority )( 
            IInternetPriority * This,
             LONG nPriority);
        
        HRESULT ( __stdcall *GetPriority )( 
            IInternetPriority * This,
             LONG *pnPriority);
        
        
    } IInternetPriorityVtbl;

    struct IInternetPriority
    {
         struct IInternetPriorityVtbl *lpVtbl;
    };

    























#line 4675 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetPriority_SetPriority_Proxy( 
    IInternetPriority * This,
     LONG nPriority);


void __stdcall IInternetPriority_SetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetPriority_GetPriority_Proxy( 
    IInternetPriority * This,
     LONG *pnPriority);


void __stdcall IInternetPriority_GetPriority_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4704 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 4710 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0202_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0202_v0_0_s_ifspec;





 

typedef  IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;

typedef 
enum _tagPARSEACTION
    {	PARSE_CANONICALIZE	= 1,
	PARSE_FRIENDLY	= PARSE_CANONICALIZE + 1,
	PARSE_SECURITY_URL	= PARSE_FRIENDLY + 1,
	PARSE_ROOTDOCUMENT	= PARSE_SECURITY_URL + 1,
	PARSE_DOCUMENT	= PARSE_ROOTDOCUMENT + 1,
	PARSE_ANCHOR	= PARSE_DOCUMENT + 1,
	PARSE_ENCODE	= PARSE_ANCHOR + 1,
	PARSE_DECODE	= PARSE_ENCODE + 1,
	PARSE_PATH_FROM_URL	= PARSE_DECODE + 1,
	PARSE_URL_FROM_PATH	= PARSE_PATH_FROM_URL + 1,
	PARSE_MIME	= PARSE_URL_FROM_PATH + 1,
	PARSE_SERVER	= PARSE_MIME + 1,
	PARSE_SCHEMA	= PARSE_SERVER + 1,
	PARSE_SITE	= PARSE_SCHEMA + 1,
	PARSE_DOMAIN	= PARSE_SITE + 1,
	PARSE_LOCATION	= PARSE_DOMAIN + 1,
	PARSE_SECURITY_DOMAIN	= PARSE_LOCATION + 1,
	PARSE_ESCAPE	= PARSE_SECURITY_DOMAIN + 1,
	PARSE_UNESCAPE	= PARSE_ESCAPE + 1
    } 	PARSEACTION;

typedef 
enum _tagPSUACTION
    {	PSU_DEFAULT	= 1,
	PSU_SECURITY_URL_ONLY	= PSU_DEFAULT + 1
    } 	PSUACTION;

typedef 
enum _tagQUERYOPTION
    {	QUERY_EXPIRATION_DATE	= 1,
	QUERY_TIME_OF_LAST_CHANGE	= QUERY_EXPIRATION_DATE + 1,
	QUERY_CONTENT_ENCODING	= QUERY_TIME_OF_LAST_CHANGE + 1,
	QUERY_CONTENT_TYPE	= QUERY_CONTENT_ENCODING + 1,
	QUERY_REFRESH	= QUERY_CONTENT_TYPE + 1,
	QUERY_RECOMBINE	= QUERY_REFRESH + 1,
	QUERY_CAN_NAVIGATE	= QUERY_RECOMBINE + 1,
	QUERY_USES_NETWORK	= QUERY_CAN_NAVIGATE + 1,
	QUERY_IS_CACHED	= QUERY_USES_NETWORK + 1,
	QUERY_IS_INSTALLEDENTRY	= QUERY_IS_CACHED + 1,
	QUERY_IS_CACHED_OR_MAPPED	= QUERY_IS_INSTALLEDENTRY + 1,
	QUERY_USES_CACHE	= QUERY_IS_CACHED_OR_MAPPED + 1,
	QUERY_IS_SECURE	= QUERY_USES_CACHE + 1,
	QUERY_IS_SAFE	= QUERY_IS_SECURE + 1
    } 	QUERYOPTION;


extern const IID IID_IInternetProtocolInfo;









































#line 4816 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetProtocolInfoVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetProtocolInfo * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetProtocolInfo * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetProtocolInfo * This);
        
        HRESULT ( __stdcall *ParseUrl )( 
            IInternetProtocolInfo * This,
             LPCWSTR pwzUrl,
             PARSEACTION ParseAction,
             DWORD dwParseFlags,
             LPWSTR pwzResult,
             DWORD cchResult,
             DWORD *pcchResult,
             DWORD dwReserved);
        
        HRESULT ( __stdcall *CombineUrl )( 
            IInternetProtocolInfo * This,
             LPCWSTR pwzBaseUrl,
             LPCWSTR pwzRelativeUrl,
             DWORD dwCombineFlags,
             LPWSTR pwzResult,
             DWORD cchResult,
             DWORD *pcchResult,
             DWORD dwReserved);
        
        HRESULT ( __stdcall *CompareUrl )( 
            IInternetProtocolInfo * This,
             LPCWSTR pwzUrl1,
             LPCWSTR pwzUrl2,
             DWORD dwCompareFlags);
        
        HRESULT ( __stdcall *QueryInfo )( 
            IInternetProtocolInfo * This,
             LPCWSTR pwzUrl,
             QUERYOPTION OueryOption,
             DWORD dwQueryFlags,
             LPVOID pBuffer,
             DWORD cbBuffer,
             DWORD *pcbBuf,
             DWORD dwReserved);
        
        
    } IInternetProtocolInfoVtbl;

    struct IInternetProtocolInfo
    {
         struct IInternetProtocolInfoVtbl *lpVtbl;
    };

    





























#line 4907 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetProtocolInfo_ParseUrl_Proxy( 
    IInternetProtocolInfo * This,
     LPCWSTR pwzUrl,
     PARSEACTION ParseAction,
     DWORD dwParseFlags,
     LPWSTR pwzResult,
     DWORD cchResult,
     DWORD *pcchResult,
     DWORD dwReserved);


void __stdcall IInternetProtocolInfo_ParseUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolInfo_CombineUrl_Proxy( 
    IInternetProtocolInfo * This,
     LPCWSTR pwzBaseUrl,
     LPCWSTR pwzRelativeUrl,
     DWORD dwCombineFlags,
     LPWSTR pwzResult,
     DWORD cchResult,
     DWORD *pcchResult,
     DWORD dwReserved);


void __stdcall IInternetProtocolInfo_CombineUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolInfo_CompareUrl_Proxy( 
    IInternetProtocolInfo * This,
     LPCWSTR pwzUrl1,
     LPCWSTR pwzUrl2,
     DWORD dwCompareFlags);


void __stdcall IInternetProtocolInfo_CompareUrl_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetProtocolInfo_QueryInfo_Proxy( 
    IInternetProtocolInfo * This,
     LPCWSTR pwzUrl,
     QUERYOPTION OueryOption,
     DWORD dwQueryFlags,
     LPVOID pBuffer,
     DWORD cbBuffer,
     DWORD *pcbBuf,
     DWORD dwReserved);


void __stdcall IInternetProtocolInfo_QueryInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4980 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 4986 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"































extern HRESULT __stdcall CoInternetParseUrl(               
    LPCWSTR     pwzUrl,                  
    PARSEACTION ParseAction,             
    DWORD       dwFlags,                 
    LPWSTR      pszResult,               
    DWORD       cchResult,               
    DWORD      *pcchResult,              
    DWORD       dwReserved               
    );                                   
extern HRESULT __stdcall CoInternetCombineUrl(             
    LPCWSTR     pwzBaseUrl,              
    LPCWSTR     pwzRelativeUrl,          
    DWORD       dwCombineFlags,          
    LPWSTR      pszResult,               
    DWORD       cchResult,               
    DWORD      *pcchResult,              
    DWORD       dwReserved               
    );                                   
extern HRESULT __stdcall CoInternetCompareUrl(             
    LPCWSTR pwzUrl1,                     
    LPCWSTR pwzUrl2,                     
    DWORD dwFlags                        
    );                                   
extern HRESULT __stdcall CoInternetGetProtocolFlags(       
    LPCWSTR     pwzUrl,                  
    DWORD      *pdwFlags,                
    DWORD       dwReserved               
    );                                   
extern HRESULT __stdcall CoInternetQueryInfo(              
    LPCWSTR     pwzUrl,                  
    QUERYOPTION QueryOptions,            
    DWORD       dwQueryFlags,            
    LPVOID      pvBuffer,                
    DWORD       cbBuffer,                
    DWORD      *pcbBuffer,               
    DWORD       dwReserved               
    );                                   
extern HRESULT __stdcall CoInternetGetSession(             
    DWORD       dwSessionMode,           
    IInternetSession **ppIInternetSession,
    DWORD       dwReserved               
    );                                   
extern HRESULT __stdcall CoInternetGetSecurityUrl(         
    LPCWSTR pwzUrl,                      
    LPWSTR  *ppwzSecUrl,                 
    PSUACTION  psuAction,                
    DWORD   dwReserved                   
    );                                   
extern HRESULT __stdcall AsyncInstallDistributionUnit(     
    LPCWSTR szDistUnit,                  
    LPCWSTR szTYPE,                      
    LPCWSTR szExt,                       
    DWORD dwFileVersionMS,               
    DWORD dwFileVersionLS,               
    LPCWSTR szURL,                       
    IBindCtx *pbc,                       
    LPVOID   pvReserved,                 
    DWORD   flags                        
    );                                   


typedef 
enum _tagINTERNETFEATURELIST
    {	FEATURE_OBJECT_CACHING	= 0,
	FEATURE_ZONE_ELEVATION	= FEATURE_OBJECT_CACHING + 1,
	FEATURE_MIME_HANDLING	= FEATURE_ZONE_ELEVATION + 1,
	FEATURE_MIME_SNIFFING	= FEATURE_MIME_HANDLING + 1,
	FEATURE_WINDOW_RESTRICTIONS	= FEATURE_MIME_SNIFFING + 1,
	FEATURE_WEBOC_POPUPMANAGEMENT	= FEATURE_WINDOW_RESTRICTIONS + 1,
	FEATURE_BEHAVIORS	= FEATURE_WEBOC_POPUPMANAGEMENT + 1,
	FEATURE_DISABLE_MK_PROTOCOL	= FEATURE_BEHAVIORS + 1,
	FEATURE_LOCALMACHINE_LOCKDOWN	= FEATURE_DISABLE_MK_PROTOCOL + 1,
	FEATURE_SECURITYBAND	= FEATURE_LOCALMACHINE_LOCKDOWN + 1,
	FEATURE_RESTRICT_ACTIVEXINSTALL	= FEATURE_SECURITYBAND + 1,
	FEATURE_VALIDATE_NAVIGATE_URL	= FEATURE_RESTRICT_ACTIVEXINSTALL + 1,
	FEATURE_RESTRICT_FILEDOWNLOAD	= FEATURE_VALIDATE_NAVIGATE_URL + 1,
	FEATURE_ADDON_MANAGEMENT	= FEATURE_RESTRICT_FILEDOWNLOAD + 1,
	FEATURE_PROTOCOL_LOCKDOWN	= FEATURE_ADDON_MANAGEMENT + 1,
	FEATURE_HTTP_USERNAME_PASSWORD_DISABLE	= FEATURE_PROTOCOL_LOCKDOWN + 1,
	FEATURE_SAFE_BINDTOOBJECT	= FEATURE_HTTP_USERNAME_PASSWORD_DISABLE + 1,
	FEATURE_UNC_SAVEDFILECHECK	= FEATURE_SAFE_BINDTOOBJECT + 1,
	FEATURE_GET_URL_DOM_FILEPATH_UNENCODED	= FEATURE_UNC_SAVEDFILECHECK + 1,
	FEATURE_ENTRY_COUNT	= FEATURE_GET_URL_DOM_FILEPATH_UNENCODED + 1
    } 	INTERNETFEATURELIST;


























#line 5128 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"
extern HRESULT __stdcall CoInternetSetFeatureEnabled(      
    INTERNETFEATURELIST FeatureEntry,    
    DWORD dwFlags,                       
    BOOL fEnable                         
    );                                   
extern HRESULT __stdcall CoInternetIsFeatureEnabled(       
    INTERNETFEATURELIST FeatureEntry,    
    DWORD dwFlags                        
    );                                   
extern HRESULT __stdcall CoInternetIsFeatureEnabledForUrl( 
    INTERNETFEATURELIST FeatureEntry,    
    DWORD dwFlags,                       
    LPCWSTR szURL,                       
    IInternetSecurityManager *pSecMgr    
    );                                   
extern HRESULT __stdcall CoInternetIsFeatureZoneElevationEnabled( 
    LPCWSTR szFromURL,                          
    LPCWSTR szToURL,                            
    IInternetSecurityManager *pSecMgr,          
    DWORD dwFlags                               
    );                                          
 
extern HRESULT __stdcall CopyStgMedium(const STGMEDIUM * pcstgmedSrc,  
                           STGMEDIUM * pstgmedDest); 
extern HRESULT __stdcall CopyBindInfo( const BINDINFO * pcbiSrc,   
                           BINDINFO * pbiDest ); 
extern void __stdcall ReleaseBindInfo( BINDINFO * pbindinfo );  
 










#line 5167 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"







extern HRESULT __stdcall CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved);

extern HRESULT __stdcall CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved);



extern const IID CLSID_InternetSecurityManager;  
extern const IID CLSID_InternetZoneManager;  
extern const IID CLSID_PersistentZoneIdentifier;  











extern RPC_IF_HANDLE __MIDL_itf_urlmon_0203_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0203_v0_0_s_ifspec;





 


extern const IID IID_IInternetSecurityMgrSite;















#line 5221 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetSecurityMgrSiteVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetSecurityMgrSite * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetSecurityMgrSite * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetSecurityMgrSite * This);
        
        HRESULT ( __stdcall *GetWindow )( 
            IInternetSecurityMgrSite * This,
             HWND *phwnd);
        
        HRESULT ( __stdcall *EnableModeless )( 
            IInternetSecurityMgrSite * This,
             BOOL fEnable);
        
        
    } IInternetSecurityMgrSiteVtbl;

    struct IInternetSecurityMgrSite
    {
         struct IInternetSecurityMgrSiteVtbl *lpVtbl;
    };

    























#line 5278 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetSecurityMgrSite_GetWindow_Proxy( 
    IInternetSecurityMgrSite * This,
     HWND *phwnd);


void __stdcall IInternetSecurityMgrSite_GetWindow_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityMgrSite_EnableModeless_Proxy( 
    IInternetSecurityMgrSite * This,
     BOOL fEnable);


void __stdcall IInternetSecurityMgrSite_EnableModeless_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5307 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 5313 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0204_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0204_v0_0_s_ifspec;





 









typedef  
enum __MIDL_IInternetSecurityManager_0001
    {	PUAF_DEFAULT	= 0,
	PUAF_NOUI	= 0x1,
	PUAF_ISFILE	= 0x2,
	PUAF_WARN_IF_DENIED	= 0x4,
	PUAF_FORCEUI_FOREGROUND	= 0x8,
	PUAF_CHECK_TIFS	= 0x10,
	PUAF_DONTCHECKBOXINDIALOG	= 0x20,
	PUAF_TRUSTED	= 0x40,
	PUAF_ACCEPT_WILDCARD_SCHEME	= 0x80,
	PUAF_ENFORCERESTRICTED	= 0x100,
	PUAF_NOSAVEDFILECHECK	= 0x200,
	PUAF_REQUIRESAVEDFILECHECK	= 0x400,
	PUAF_LMZ_UNLOCKED	= 0x10000,
	PUAF_LMZ_LOCKED	= 0x20000,
	PUAF_DEFAULTZONEPOL	= 0x40000,
	PUAF_NPL_USE_LOCKED_IF_RESTRICTED	= 0x80000,
	PUAF_NOUIIFLOCKED	= 0x100000,
	PUAF_DRAGPROTOCOLCHECK	= 0x200000
    } 	PUAF;

typedef  
enum __MIDL_IInternetSecurityManager_0002
    {	PUAFOUT_DEFAULT	= 0,
	PUAFOUT_ISLOCKZONEPOLICY	= 0x1
    } 	PUAFOUT;







typedef  
enum __MIDL_IInternetSecurityManager_0003
    {	SZM_CREATE	= 0,
	SZM_DELETE	= 0x1
    } 	SZM_FLAGS;
















extern const IID IID_IInternetSecurityManager;























































#line 5446 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetSecurityManagerVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetSecurityManager * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetSecurityManager * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetSecurityManager * This);
        
        HRESULT ( __stdcall *SetSecuritySite )( 
            IInternetSecurityManager * This,
             IInternetSecurityMgrSite *pSite);
        
        HRESULT ( __stdcall *GetSecuritySite )( 
            IInternetSecurityManager * This,
             IInternetSecurityMgrSite **ppSite);
        
        HRESULT ( __stdcall *MapUrlToZone )( 
            IInternetSecurityManager * This,
             LPCWSTR pwszUrl,
             DWORD *pdwZone,
             DWORD dwFlags);
        
        HRESULT ( __stdcall *GetSecurityId )( 
            IInternetSecurityManager * This,
             LPCWSTR pwszUrl,
             BYTE *pbSecurityId,
             DWORD *pcbSecurityId,
             DWORD_PTR dwReserved);
        
        HRESULT ( __stdcall *ProcessUrlAction )( 
            IInternetSecurityManager * This,
             LPCWSTR pwszUrl,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved);
        
        HRESULT ( __stdcall *QueryCustomPolicy )( 
            IInternetSecurityManager * This,
             LPCWSTR pwszUrl,
             const GUID * const guidKey,
             BYTE **ppPolicy,
             DWORD *pcbPolicy,
             BYTE *pContext,
             DWORD cbContext,
             DWORD dwReserved);
        
        HRESULT ( __stdcall *SetZoneMapping )( 
            IInternetSecurityManager * This,
             DWORD dwZone,
             LPCWSTR lpszPattern,
             DWORD dwFlags);
        
        HRESULT ( __stdcall *GetZoneMappings )( 
            IInternetSecurityManager * This,
             DWORD dwZone,
             IEnumString **ppenumString,
             DWORD dwFlags);
        
        
    } IInternetSecurityManagerVtbl;

    struct IInternetSecurityManager
    {
         struct IInternetSecurityManagerVtbl *lpVtbl;
    };

    









































#line 5567 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetSecurityManager_SetSecuritySite_Proxy( 
    IInternetSecurityManager * This,
     IInternetSecurityMgrSite *pSite);


void __stdcall IInternetSecurityManager_SetSecuritySite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_GetSecuritySite_Proxy( 
    IInternetSecurityManager * This,
     IInternetSecurityMgrSite **ppSite);


void __stdcall IInternetSecurityManager_GetSecuritySite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_MapUrlToZone_Proxy( 
    IInternetSecurityManager * This,
     LPCWSTR pwszUrl,
     DWORD *pdwZone,
     DWORD dwFlags);


void __stdcall IInternetSecurityManager_MapUrlToZone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_GetSecurityId_Proxy( 
    IInternetSecurityManager * This,
     LPCWSTR pwszUrl,
     BYTE *pbSecurityId,
     DWORD *pcbSecurityId,
     DWORD_PTR dwReserved);


void __stdcall IInternetSecurityManager_GetSecurityId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_ProcessUrlAction_Proxy( 
    IInternetSecurityManager * This,
     LPCWSTR pwszUrl,
     DWORD dwAction,
     BYTE *pPolicy,
     DWORD cbPolicy,
     BYTE *pContext,
     DWORD cbContext,
     DWORD dwFlags,
     DWORD dwReserved);


void __stdcall IInternetSecurityManager_ProcessUrlAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_QueryCustomPolicy_Proxy( 
    IInternetSecurityManager * This,
     LPCWSTR pwszUrl,
     const GUID * const guidKey,
     BYTE **ppPolicy,
     DWORD *pcbPolicy,
     BYTE *pContext,
     DWORD cbContext,
     DWORD dwReserved);


void __stdcall IInternetSecurityManager_QueryCustomPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_SetZoneMapping_Proxy( 
    IInternetSecurityManager * This,
     DWORD dwZone,
     LPCWSTR lpszPattern,
     DWORD dwFlags);


void __stdcall IInternetSecurityManager_SetZoneMapping_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetSecurityManager_GetZoneMappings_Proxy( 
    IInternetSecurityManager * This,
     DWORD dwZone,
     IEnumString **ppenumString,
     DWORD dwFlags);


void __stdcall IInternetSecurityManager_GetZoneMappings_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5690 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"






 







extern const IID IID_IInternetSecurityManagerEx;




















#line 5726 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetSecurityManagerExVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetSecurityManagerEx * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetSecurityManagerEx * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetSecurityManagerEx * This);
        
        HRESULT ( __stdcall *SetSecuritySite )( 
            IInternetSecurityManagerEx * This,
             IInternetSecurityMgrSite *pSite);
        
        HRESULT ( __stdcall *GetSecuritySite )( 
            IInternetSecurityManagerEx * This,
             IInternetSecurityMgrSite **ppSite);
        
        HRESULT ( __stdcall *MapUrlToZone )( 
            IInternetSecurityManagerEx * This,
             LPCWSTR pwszUrl,
             DWORD *pdwZone,
             DWORD dwFlags);
        
        HRESULT ( __stdcall *GetSecurityId )( 
            IInternetSecurityManagerEx * This,
             LPCWSTR pwszUrl,
             BYTE *pbSecurityId,
             DWORD *pcbSecurityId,
             DWORD_PTR dwReserved);
        
        HRESULT ( __stdcall *ProcessUrlAction )( 
            IInternetSecurityManagerEx * This,
             LPCWSTR pwszUrl,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved);
        
        HRESULT ( __stdcall *QueryCustomPolicy )( 
            IInternetSecurityManagerEx * This,
             LPCWSTR pwszUrl,
             const GUID * const guidKey,
             BYTE **ppPolicy,
             DWORD *pcbPolicy,
             BYTE *pContext,
             DWORD cbContext,
             DWORD dwReserved);
        
        HRESULT ( __stdcall *SetZoneMapping )( 
            IInternetSecurityManagerEx * This,
             DWORD dwZone,
             LPCWSTR lpszPattern,
             DWORD dwFlags);
        
        HRESULT ( __stdcall *GetZoneMappings )( 
            IInternetSecurityManagerEx * This,
             DWORD dwZone,
             IEnumString **ppenumString,
             DWORD dwFlags);
        
        HRESULT ( __stdcall *ProcessUrlActionEx )( 
            IInternetSecurityManagerEx * This,
             LPCWSTR pwszUrl,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved,
             DWORD *pdwOutFlags);
        
        
    } IInternetSecurityManagerExVtbl;

    struct IInternetSecurityManagerEx
    {
         struct IInternetSecurityManagerExVtbl *lpVtbl;
    };

    













































#line 5863 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetSecurityManagerEx_ProcessUrlActionEx_Proxy( 
    IInternetSecurityManagerEx * This,
     LPCWSTR pwszUrl,
     DWORD dwAction,
     BYTE *pPolicy,
     DWORD cbPolicy,
     BYTE *pContext,
     DWORD cbContext,
     DWORD dwFlags,
     DWORD dwReserved,
     DWORD *pdwOutFlags);


void __stdcall IInternetSecurityManagerEx_ProcessUrlActionEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5888 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 5894 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0205_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0205_v0_0_s_ifspec;





 


extern const IID IID_IZoneIdentifier;

















#line 5927 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IZoneIdentifierVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IZoneIdentifier * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IZoneIdentifier * This);
        
        ULONG ( __stdcall *Release )( 
            IZoneIdentifier * This);
        
        HRESULT ( __stdcall *GetId )( 
            IZoneIdentifier * This,
             DWORD *pdwZone);
        
        HRESULT ( __stdcall *SetId )( 
            IZoneIdentifier * This,
             DWORD dwZone);
        
        HRESULT ( __stdcall *Remove )( 
            IZoneIdentifier * This);
        
        
    } IZoneIdentifierVtbl;

    struct IZoneIdentifier
    {
         struct IZoneIdentifierVtbl *lpVtbl;
    };

    


























#line 5990 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IZoneIdentifier_GetId_Proxy( 
    IZoneIdentifier * This,
     DWORD *pdwZone);


void __stdcall IZoneIdentifier_GetId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IZoneIdentifier_SetId_Proxy( 
    IZoneIdentifier * This,
     DWORD dwZone);


void __stdcall IZoneIdentifier_SetId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IZoneIdentifier_Remove_Proxy( 
    IZoneIdentifier * This);


void __stdcall IZoneIdentifier_Remove_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6030 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 6036 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"







extern RPC_IF_HANDLE __MIDL_itf_urlmon_0207_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0207_v0_0_s_ifspec;





 


extern const IID IID_IInternetHostSecurityManager;































#line 6086 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetHostSecurityManagerVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetHostSecurityManager * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetHostSecurityManager * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetHostSecurityManager * This);
        
        HRESULT ( __stdcall *GetSecurityId )( 
            IInternetHostSecurityManager * This,
             BYTE *pbSecurityId,
             DWORD *pcbSecurityId,
             DWORD_PTR dwReserved);
        
        HRESULT ( __stdcall *ProcessUrlAction )( 
            IInternetHostSecurityManager * This,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved);
        
        HRESULT ( __stdcall *QueryCustomPolicy )( 
            IInternetHostSecurityManager * This,
             const GUID * const guidKey,
             BYTE **ppPolicy,
             DWORD *pcbPolicy,
             BYTE *pContext,
             DWORD cbContext,
             DWORD dwReserved);
        
        
    } IInternetHostSecurityManagerVtbl;

    struct IInternetHostSecurityManager
    {
         struct IInternetHostSecurityManagerVtbl *lpVtbl;
    };

    


























#line 6163 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetHostSecurityManager_GetSecurityId_Proxy( 
    IInternetHostSecurityManager * This,
     BYTE *pbSecurityId,
     DWORD *pcbSecurityId,
     DWORD_PTR dwReserved);


void __stdcall IInternetHostSecurityManager_GetSecurityId_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetHostSecurityManager_ProcessUrlAction_Proxy( 
    IInternetHostSecurityManager * This,
     DWORD dwAction,
     BYTE *pPolicy,
     DWORD cbPolicy,
     BYTE *pContext,
     DWORD cbContext,
     DWORD dwFlags,
     DWORD dwReserved);


void __stdcall IInternetHostSecurityManager_ProcessUrlAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetHostSecurityManager_QueryCustomPolicy_Proxy( 
    IInternetHostSecurityManager * This,
     const GUID * const guidKey,
     BYTE **ppPolicy,
     DWORD *pcbPolicy,
     BYTE *pContext,
     DWORD cbContext,
     DWORD dwReserved);


void __stdcall IInternetHostSecurityManager_QueryCustomPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6217 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 6223 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"














































































































































































extern const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED; 




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0208_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0208_v0_0_s_ifspec;





 

typedef  IInternetZoneManager *LPURLZONEMANAGER;

typedef 
enum tagURLZONE
    {	URLZONE_PREDEFINED_MIN	= 0,
	URLZONE_LOCAL_MACHINE	= 0,
	URLZONE_INTRANET	= URLZONE_LOCAL_MACHINE + 1,
	URLZONE_TRUSTED	= URLZONE_INTRANET + 1,
	URLZONE_INTERNET	= URLZONE_TRUSTED + 1,
	URLZONE_UNTRUSTED	= URLZONE_INTERNET + 1,
	URLZONE_PREDEFINED_MAX	= 999,
	URLZONE_USER_MIN	= 1000,
	URLZONE_USER_MAX	= 10000
    } 	URLZONE;



typedef 
enum tagURLTEMPLATE
    {	URLTEMPLATE_CUSTOM	= 0,
	URLTEMPLATE_PREDEFINED_MIN	= 0x10000,
	URLTEMPLATE_LOW	= 0x10000,
	URLTEMPLATE_MEDLOW	= 0x10500,
	URLTEMPLATE_MEDIUM	= 0x11000,
	URLTEMPLATE_HIGH	= 0x12000,
	URLTEMPLATE_PREDEFINED_MAX	= 0x20000
    } 	URLTEMPLATE;


enum __MIDL_IInternetZoneManager_0001
    {	MAX_ZONE_PATH	= 260,
	MAX_ZONE_DESCRIPTION	= 200
    } ;
typedef  
enum __MIDL_IInternetZoneManager_0002
    {	ZAFLAGS_CUSTOM_EDIT	= 0x1,
	ZAFLAGS_ADD_SITES	= 0x2,
	ZAFLAGS_REQUIRE_VERIFICATION	= 0x4,
	ZAFLAGS_INCLUDE_PROXY_OVERRIDE	= 0x8,
	ZAFLAGS_INCLUDE_INTRANET_SITES	= 0x10,
	ZAFLAGS_NO_UI	= 0x20,
	ZAFLAGS_SUPPORTS_VERIFICATION	= 0x40,
	ZAFLAGS_UNC_AS_INTRANET	= 0x80,
	ZAFLAGS_USE_LOCKED_ZONES	= 0x10000
    } 	ZAFLAGS;

typedef struct _ZONEATTRIBUTES
    {
    ULONG cbSize;
    WCHAR szDisplayName[ 260 ];
    WCHAR szDescription[ 200 ];
    WCHAR szIconPath[ 260 ];
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
    } 	ZONEATTRIBUTES;

typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;

















typedef 
enum _URLZONEREG
    {	URLZONEREG_DEFAULT	= 0,
	URLZONEREG_HKLM	= URLZONEREG_DEFAULT + 1,
	URLZONEREG_HKCU	= URLZONEREG_HKLM + 1
    } 	URLZONEREG;
































extern const IID IID_IInternetZoneManager;












































































#line 6603 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetZoneManagerVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetZoneManager * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetZoneManager * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetZoneManager * This);
        
        HRESULT ( __stdcall *GetZoneAttributes )( 
            IInternetZoneManager * This,
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes);
        
        HRESULT ( __stdcall *SetZoneAttributes )( 
            IInternetZoneManager * This,
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes);
        
        HRESULT ( __stdcall *GetZoneCustomPolicy )( 
            IInternetZoneManager * This,
             DWORD dwZone,
             const GUID * const guidKey,
             BYTE **ppPolicy,
             DWORD *pcbPolicy,
             URLZONEREG urlZoneReg);
        
        HRESULT ( __stdcall *SetZoneCustomPolicy )( 
            IInternetZoneManager * This,
             DWORD dwZone,
             const GUID * const guidKey,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
        HRESULT ( __stdcall *GetZoneActionPolicy )( 
            IInternetZoneManager * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
        HRESULT ( __stdcall *SetZoneActionPolicy )( 
            IInternetZoneManager * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
        HRESULT ( __stdcall *PromptAction )( 
            IInternetZoneManager * This,
             DWORD dwAction,
             HWND hwndParent,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwPromptFlags);
        
        HRESULT ( __stdcall *LogAction )( 
            IInternetZoneManager * This,
             DWORD dwAction,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwLogFlags);
        
        HRESULT ( __stdcall *CreateZoneEnumerator )( 
            IInternetZoneManager * This,
             DWORD *pdwEnum,
             DWORD *pdwCount,
             DWORD dwFlags);
        
        HRESULT ( __stdcall *GetZoneAt )( 
            IInternetZoneManager * This,
             DWORD dwEnum,
             DWORD dwIndex,
             DWORD *pdwZone);
        
        HRESULT ( __stdcall *DestroyZoneEnumerator )( 
            IInternetZoneManager * This,
             DWORD dwEnum);
        
        HRESULT ( __stdcall *CopyTemplatePoliciesToZone )( 
            IInternetZoneManager * This,
             DWORD dwTemplate,
             DWORD dwZone,
             DWORD dwReserved);
        
        
    } IInternetZoneManagerVtbl;

    struct IInternetZoneManager
    {
         struct IInternetZoneManagerVtbl *lpVtbl;
    };

    





















































#line 6761 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetZoneManager_GetZoneAttributes_Proxy( 
    IInternetZoneManager * This,
     DWORD dwZone,
     ZONEATTRIBUTES *pZoneAttributes);


void __stdcall IInternetZoneManager_GetZoneAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_SetZoneAttributes_Proxy( 
    IInternetZoneManager * This,
     DWORD dwZone,
     ZONEATTRIBUTES *pZoneAttributes);


void __stdcall IInternetZoneManager_SetZoneAttributes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_GetZoneCustomPolicy_Proxy( 
    IInternetZoneManager * This,
     DWORD dwZone,
     const GUID * const guidKey,
     BYTE **ppPolicy,
     DWORD *pcbPolicy,
     URLZONEREG urlZoneReg);


void __stdcall IInternetZoneManager_GetZoneCustomPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_SetZoneCustomPolicy_Proxy( 
    IInternetZoneManager * This,
     DWORD dwZone,
     const GUID * const guidKey,
     BYTE *pPolicy,
     DWORD cbPolicy,
     URLZONEREG urlZoneReg);


void __stdcall IInternetZoneManager_SetZoneCustomPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_GetZoneActionPolicy_Proxy( 
    IInternetZoneManager * This,
     DWORD dwZone,
     DWORD dwAction,
     BYTE *pPolicy,
     DWORD cbPolicy,
     URLZONEREG urlZoneReg);


void __stdcall IInternetZoneManager_GetZoneActionPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_SetZoneActionPolicy_Proxy( 
    IInternetZoneManager * This,
     DWORD dwZone,
     DWORD dwAction,
     BYTE *pPolicy,
     DWORD cbPolicy,
     URLZONEREG urlZoneReg);


void __stdcall IInternetZoneManager_SetZoneActionPolicy_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_PromptAction_Proxy( 
    IInternetZoneManager * This,
     DWORD dwAction,
     HWND hwndParent,
     LPCWSTR pwszUrl,
     LPCWSTR pwszText,
     DWORD dwPromptFlags);


void __stdcall IInternetZoneManager_PromptAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_LogAction_Proxy( 
    IInternetZoneManager * This,
     DWORD dwAction,
     LPCWSTR pwszUrl,
     LPCWSTR pwszText,
     DWORD dwLogFlags);


void __stdcall IInternetZoneManager_LogAction_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_CreateZoneEnumerator_Proxy( 
    IInternetZoneManager * This,
     DWORD *pdwEnum,
     DWORD *pdwCount,
     DWORD dwFlags);


void __stdcall IInternetZoneManager_CreateZoneEnumerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_GetZoneAt_Proxy( 
    IInternetZoneManager * This,
     DWORD dwEnum,
     DWORD dwIndex,
     DWORD *pdwZone);


void __stdcall IInternetZoneManager_GetZoneAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_DestroyZoneEnumerator_Proxy( 
    IInternetZoneManager * This,
     DWORD dwEnum);


void __stdcall IInternetZoneManager_DestroyZoneEnumerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManager_CopyTemplatePoliciesToZone_Proxy( 
    IInternetZoneManager * This,
     DWORD dwTemplate,
     DWORD dwZone,
     DWORD dwReserved);


void __stdcall IInternetZoneManager_CopyTemplatePoliciesToZone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 6941 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 6947 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0209_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0209_v0_0_s_ifspec;





 










extern const IID IID_IInternetZoneManagerEx;

























#line 6996 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IInternetZoneManagerExVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IInternetZoneManagerEx * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IInternetZoneManagerEx * This);
        
        ULONG ( __stdcall *Release )( 
            IInternetZoneManagerEx * This);
        
        HRESULT ( __stdcall *GetZoneAttributes )( 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes);
        
        HRESULT ( __stdcall *SetZoneAttributes )( 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes);
        
        HRESULT ( __stdcall *GetZoneCustomPolicy )( 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             const GUID * const guidKey,
             BYTE **ppPolicy,
             DWORD *pcbPolicy,
             URLZONEREG urlZoneReg);
        
        HRESULT ( __stdcall *SetZoneCustomPolicy )( 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             const GUID * const guidKey,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
        HRESULT ( __stdcall *GetZoneActionPolicy )( 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
        HRESULT ( __stdcall *SetZoneActionPolicy )( 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg);
        
        HRESULT ( __stdcall *PromptAction )( 
            IInternetZoneManagerEx * This,
             DWORD dwAction,
             HWND hwndParent,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwPromptFlags);
        
        HRESULT ( __stdcall *LogAction )( 
            IInternetZoneManagerEx * This,
             DWORD dwAction,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwLogFlags);
        
        HRESULT ( __stdcall *CreateZoneEnumerator )( 
            IInternetZoneManagerEx * This,
             DWORD *pdwEnum,
             DWORD *pdwCount,
             DWORD dwFlags);
        
        HRESULT ( __stdcall *GetZoneAt )( 
            IInternetZoneManagerEx * This,
             DWORD dwEnum,
             DWORD dwIndex,
             DWORD *pdwZone);
        
        HRESULT ( __stdcall *DestroyZoneEnumerator )( 
            IInternetZoneManagerEx * This,
             DWORD dwEnum);
        
        HRESULT ( __stdcall *CopyTemplatePoliciesToZone )( 
            IInternetZoneManagerEx * This,
             DWORD dwTemplate,
             DWORD dwZone,
             DWORD dwReserved);
        
        HRESULT ( __stdcall *GetZoneActionPolicyEx )( 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg,
             DWORD dwFlags);
        
        HRESULT ( __stdcall *SetZoneActionPolicyEx )( 
            IInternetZoneManagerEx * This,
             DWORD dwZone,
             DWORD dwAction,
             BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg,
             DWORD dwFlags);
        
        
    } IInternetZoneManagerExVtbl;

    struct IInternetZoneManagerEx
    {
         struct IInternetZoneManagerExVtbl *lpVtbl;
    };

    




























































#line 7179 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IInternetZoneManagerEx_GetZoneActionPolicyEx_Proxy( 
    IInternetZoneManagerEx * This,
     DWORD dwZone,
     DWORD dwAction,
     BYTE *pPolicy,
     DWORD cbPolicy,
     URLZONEREG urlZoneReg,
     DWORD dwFlags);


void __stdcall IInternetZoneManagerEx_GetZoneActionPolicyEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IInternetZoneManagerEx_SetZoneActionPolicyEx_Proxy( 
    IInternetZoneManagerEx * This,
     DWORD dwZone,
     DWORD dwAction,
     BYTE *pPolicy,
     DWORD cbPolicy,
     URLZONEREG urlZoneReg,
     DWORD dwFlags);


void __stdcall IInternetZoneManagerEx_SetZoneActionPolicyEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7218 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 7224 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"
extern const IID CLSID_SoftDistExt;  














typedef struct _tagCODEBASEHOLD
    {
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
    } 	CODEBASEHOLD;

typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;

typedef struct _tagSOFTDISTINFO
    {
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
    } 	SOFTDISTINFO;

typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0210_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0210_v0_0_s_ifspec;





 


extern const IID IID_ISoftDistExt;




























#line 7312 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct ISoftDistExtVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ISoftDistExt * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ISoftDistExt * This);
        
        ULONG ( __stdcall *Release )( 
            ISoftDistExt * This);
        
        HRESULT ( __stdcall *ProcessSoftDist )( 
            ISoftDistExt * This,
             LPCWSTR szCDFURL,
             IXMLElement *pSoftDistElement,
             LPSOFTDISTINFO lpsdi);
        
        HRESULT ( __stdcall *GetFirstCodeBase )( 
            ISoftDistExt * This,
             LPWSTR *szCodeBase,
             LPDWORD dwMaxSize);
        
        HRESULT ( __stdcall *GetNextCodeBase )( 
            ISoftDistExt * This,
             LPWSTR *szCodeBase,
             LPDWORD dwMaxSize);
        
        HRESULT ( __stdcall *AsyncInstallDistributionUnit )( 
            ISoftDistExt * This,
             IBindCtx *pbc,
             LPVOID pvReserved,
             DWORD flags,
             LPCODEBASEHOLD lpcbh);
        
        
    } ISoftDistExtVtbl;

    struct ISoftDistExt
    {
         struct ISoftDistExtVtbl *lpVtbl;
    };

    





























#line 7390 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall ISoftDistExt_ProcessSoftDist_Proxy( 
    ISoftDistExt * This,
     LPCWSTR szCDFURL,
     IXMLElement *pSoftDistElement,
     LPSOFTDISTINFO lpsdi);


void __stdcall ISoftDistExt_ProcessSoftDist_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISoftDistExt_GetFirstCodeBase_Proxy( 
    ISoftDistExt * This,
     LPWSTR *szCodeBase,
     LPDWORD dwMaxSize);


void __stdcall ISoftDistExt_GetFirstCodeBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISoftDistExt_GetNextCodeBase_Proxy( 
    ISoftDistExt * This,
     LPWSTR *szCodeBase,
     LPDWORD dwMaxSize);


void __stdcall ISoftDistExt_GetNextCodeBase_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ISoftDistExt_AsyncInstallDistributionUnit_Proxy( 
    ISoftDistExt * This,
     IBindCtx *pbc,
     LPVOID pvReserved,
     DWORD flags,
     LPCODEBASEHOLD lpcbh);


void __stdcall ISoftDistExt_AsyncInstallDistributionUnit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7450 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

extern HRESULT __stdcall GetSoftwareUpdateInfo( LPCWSTR szDistUnit, LPSOFTDISTINFO psdi );
extern HRESULT __stdcall SetSoftwareUpdateAdvertisementState( LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS );
#line 7458 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0211_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0211_v0_0_s_ifspec;





 

typedef  ICatalogFileInfo *LPCATALOGFILEINFO;


extern const IID IID_ICatalogFileInfo;















#line 7491 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct ICatalogFileInfoVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            ICatalogFileInfo * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            ICatalogFileInfo * This);
        
        ULONG ( __stdcall *Release )( 
            ICatalogFileInfo * This);
        
        HRESULT ( __stdcall *GetCatalogFile )( 
            ICatalogFileInfo * This,
             LPSTR *ppszCatalogFile);
        
        HRESULT ( __stdcall *GetJavaTrust )( 
            ICatalogFileInfo * This,
             void **ppJavaTrust);
        
        
    } ICatalogFileInfoVtbl;

    struct ICatalogFileInfo
    {
         struct ICatalogFileInfoVtbl *lpVtbl;
    };

    























#line 7548 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall ICatalogFileInfo_GetCatalogFile_Proxy( 
    ICatalogFileInfo * This,
     LPSTR *ppszCatalogFile);


void __stdcall ICatalogFileInfo_GetCatalogFile_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall ICatalogFileInfo_GetJavaTrust_Proxy( 
    ICatalogFileInfo * This,
     void **ppJavaTrust);


void __stdcall ICatalogFileInfo_GetJavaTrust_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7577 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 7583 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0212_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0212_v0_0_s_ifspec;





 

typedef  IDataFilter *LPDATAFILTER;


extern const IID IID_IDataFilter;


































#line 7635 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IDataFilterVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IDataFilter * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IDataFilter * This);
        
        ULONG ( __stdcall *Release )( 
            IDataFilter * This);
        
        HRESULT ( __stdcall *DoEncode )( 
            IDataFilter * This,
             DWORD dwFlags,
             LONG lInBufferSize,
             BYTE *pbInBuffer,
             LONG lOutBufferSize,
             BYTE *pbOutBuffer,
             LONG lInBytesAvailable,
             LONG *plInBytesRead,
             LONG *plOutBytesWritten,
             DWORD dwReserved);
        
        HRESULT ( __stdcall *DoDecode )( 
            IDataFilter * This,
             DWORD dwFlags,
             LONG lInBufferSize,
             BYTE *pbInBuffer,
             LONG lOutBufferSize,
             BYTE *pbOutBuffer,
             LONG lInBytesAvailable,
             LONG *plInBytesRead,
             LONG *plOutBytesWritten,
             DWORD dwReserved);
        
        HRESULT ( __stdcall *SetEncodingLevel )( 
            IDataFilter * This,
             DWORD dwEncLevel);
        
        
    } IDataFilterVtbl;

    struct IDataFilter
    {
         struct IDataFilterVtbl *lpVtbl;
    };

    


























#line 7715 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IDataFilter_DoEncode_Proxy( 
    IDataFilter * This,
     DWORD dwFlags,
     LONG lInBufferSize,
     BYTE *pbInBuffer,
     LONG lOutBufferSize,
     BYTE *pbOutBuffer,
     LONG lInBytesAvailable,
     LONG *plInBytesRead,
     LONG *plOutBytesWritten,
     DWORD dwReserved);


void __stdcall IDataFilter_DoEncode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataFilter_DoDecode_Proxy( 
    IDataFilter * This,
     DWORD dwFlags,
     LONG lInBufferSize,
     BYTE *pbInBuffer,
     LONG lOutBufferSize,
     BYTE *pbOutBuffer,
     LONG lInBytesAvailable,
     LONG *plInBytesRead,
     LONG *plOutBytesWritten,
     DWORD dwReserved);


void __stdcall IDataFilter_DoDecode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IDataFilter_SetEncodingLevel_Proxy( 
    IDataFilter * This,
     DWORD dwEncLevel);


void __stdcall IDataFilter_SetEncodingLevel_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7772 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 7778 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"


typedef struct _tagPROTOCOLFILTERDATA
    {
    DWORD cbSize;
    IInternetProtocolSink *pProtocolSink;
    IInternetProtocol *pProtocol;
    IUnknown *pUnk;
    DWORD dwFilterFlags;
    } 	PROTOCOLFILTERDATA;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0213_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0213_v0_0_s_ifspec;





 

typedef  IEncodingFilterFactory *LPENCODINGFILTERFACTORY;

typedef struct _tagDATAINFO
    {
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
    } 	DATAINFO;


extern const IID IID_IEncodingFilterFactory;




















#line 7833 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IEncodingFilterFactoryVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IEncodingFilterFactory * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IEncodingFilterFactory * This);
        
        ULONG ( __stdcall *Release )( 
            IEncodingFilterFactory * This);
        
        HRESULT ( __stdcall *FindBestFilter )( 
            IEncodingFilterFactory * This,
             LPCWSTR pwzCodeIn,
             LPCWSTR pwzCodeOut,
             DATAINFO info,
             IDataFilter **ppDF);
        
        HRESULT ( __stdcall *GetDefaultFilter )( 
            IEncodingFilterFactory * This,
             LPCWSTR pwzCodeIn,
             LPCWSTR pwzCodeOut,
             IDataFilter **ppDF);
        
        
    } IEncodingFilterFactoryVtbl;

    struct IEncodingFilterFactory
    {
         struct IEncodingFilterFactoryVtbl *lpVtbl;
    };

    























#line 7895 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IEncodingFilterFactory_FindBestFilter_Proxy( 
    IEncodingFilterFactory * This,
     LPCWSTR pwzCodeIn,
     LPCWSTR pwzCodeOut,
     DATAINFO info,
     IDataFilter **ppDF);


void __stdcall IEncodingFilterFactory_FindBestFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEncodingFilterFactory_GetDefaultFilter_Proxy( 
    IEncodingFilterFactory * This,
     LPCWSTR pwzCodeIn,
     LPCWSTR pwzCodeOut,
     IDataFilter **ppDF);


void __stdcall IEncodingFilterFactory_GetDefaultFilter_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 7929 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 7935 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



BOOL __stdcall IsLoggingEnabledA( LPCSTR  pszUrl);                    
BOOL __stdcall IsLoggingEnabledW( LPCWSTR  pwszUrl);                  




#line 7945 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"
typedef struct _tagHIT_LOGGING_INFO
    {
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
    } 	HIT_LOGGING_INFO;

typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;

BOOL __stdcall WriteHitLogging( LPHIT_LOGGING_INFO lpLogginginfo);    

struct CONFIRMSAFETY
    {
    CLSID clsid;
    IUnknown *pUnk;
    DWORD dwFlags;
    } ;
extern const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY; 
#line 7966 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0214_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0214_v0_0_s_ifspec;





 

typedef  IWrappedProtocol *LPIWRAPPEDPROTOCOL;


extern const IID IID_IWrappedProtocol;













#line 7997 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"

    typedef struct IWrappedProtocolVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IWrappedProtocol * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IWrappedProtocol * This);
        
        ULONG ( __stdcall *Release )( 
            IWrappedProtocol * This);
        
        HRESULT ( __stdcall *GetWrapperCode )( 
            IWrappedProtocol * This,
             LONG *pnCode,
             DWORD_PTR dwReserved);
        
        
    } IWrappedProtocolVtbl;

    struct IWrappedProtocol
    {
         struct IWrappedProtocolVtbl *lpVtbl;
    };

    




















#line 8048 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



HRESULT __stdcall IWrappedProtocol_GetWrapperCode_Proxy( 
    IWrappedProtocol * This,
     LONG *pnCode,
     DWORD_PTR dwReserved);


void __stdcall IWrappedProtocol_GetWrapperCode_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8066 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



 

#line 8072 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"


extern RPC_IF_HANDLE __MIDL_itf_urlmon_0215_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0215_v0_0_s_ifspec;



unsigned long             __stdcall  HWND_UserSize(     unsigned long *, unsigned long            , HWND * ); 
unsigned char * __stdcall  HWND_UserMarshal(  unsigned long *, unsigned char *, HWND * ); 
unsigned char * __stdcall  HWND_UserUnmarshal(unsigned long *, unsigned char *, HWND * ); 
void                      __stdcall  HWND_UserFree(     unsigned long *, HWND * ); 

 HRESULT __stdcall IBinding_GetBindResult_Proxy( 
    IBinding * This,
     CLSID *pclsidProtocol,
     DWORD *pdwResult,
     LPOLESTR *pszResult,
     DWORD *pdwReserved);


 HRESULT __stdcall IBinding_GetBindResult_Stub( 
    IBinding * This,
     CLSID *pclsidProtocol,
     DWORD *pdwResult,
     LPOLESTR *pszResult,
     DWORD dwReserved);

 HRESULT __stdcall IBindStatusCallback_GetBindInfo_Proxy( 
    IBindStatusCallback * This,
     DWORD *grfBINDF,
     BINDINFO *pbindinfo);


 HRESULT __stdcall IBindStatusCallback_GetBindInfo_Stub( 
    IBindStatusCallback * This,
     DWORD *grfBINDF,
     RemBINDINFO *pbindinfo,
     RemSTGMEDIUM *pstgmed);

 HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Proxy( 
    IBindStatusCallback * This,
     DWORD grfBSCF,
     DWORD dwSize,
     FORMATETC *pformatetc,
     STGMEDIUM *pstgmed);


 HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Stub( 
    IBindStatusCallback * This,
     DWORD grfBSCF,
     DWORD dwSize,
     RemFORMATETC *pformatetc,
     RemSTGMEDIUM *pstgmed);

 HRESULT __stdcall IWinInetInfo_QueryOption_Proxy( 
    IWinInetInfo * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD *pcbBuf);


 HRESULT __stdcall IWinInetInfo_QueryOption_Stub( 
    IWinInetInfo * This,
     DWORD dwOption,
     BYTE *pBuffer,
     DWORD *pcbBuf);

 HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Proxy( 
    IWinInetHttpInfo * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD *pcbBuf,
     DWORD *pdwFlags,
     DWORD *pdwReserved);


 HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Stub( 
    IWinInetHttpInfo * This,
     DWORD dwOption,
     BYTE *pBuffer,
     DWORD *pcbBuf,
     DWORD *pdwFlags,
     DWORD *pdwReserved);

 HRESULT __stdcall IBindHost_MonikerBindToStorage_Proxy( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID * const riid,
     void **ppvObj);


 HRESULT __stdcall IBindHost_MonikerBindToStorage_Stub( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID * const riid,
     IUnknown **ppvObj);

 HRESULT __stdcall IBindHost_MonikerBindToObject_Proxy( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID * const riid,
     void **ppvObj);


 HRESULT __stdcall IBindHost_MonikerBindToObject_Stub( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID * const riid,
     IUnknown **ppvObj);









#line 8199 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\urlmon.h"



#line 979 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"





 










#pragma warning( disable: 4049 )  

















#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"





#pragma once
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"

 



typedef struct IPropertyStorage IPropertyStorage;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"




typedef struct IPropertySetStorage IPropertySetStorage;
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"




typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;
#line 62 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"




typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"










void * __stdcall MIDL_user_allocate(size_t);
void __stdcall MIDL_user_free( void * ); 


 









#pragma warning(push)
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"
#pragma warning(disable:4201)    
#pragma warning(disable:4237)    
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"

#pragma once
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"



typedef struct tagVersionedStream
    {
    GUID guidVersion;
    IStream *pStream;
    } 	VERSIONEDSTREAM;

typedef struct tagVersionedStream *LPVERSIONEDSTREAM;

























typedef struct tagPROPVARIANT PROPVARIANT;
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"
typedef struct tagCAC
    {
    ULONG cElems;
     CHAR *pElems;
    } 	CAC;

typedef struct tagCAUB
    {
    ULONG cElems;
     UCHAR *pElems;
    } 	CAUB;

typedef struct tagCAI
    {
    ULONG cElems;
     SHORT *pElems;
    } 	CAI;

typedef struct tagCAUI
    {
    ULONG cElems;
     USHORT *pElems;
    } 	CAUI;

typedef struct tagCAL
    {
    ULONG cElems;
     LONG *pElems;
    } 	CAL;

typedef struct tagCAUL
    {
    ULONG cElems;
     ULONG *pElems;
    } 	CAUL;

typedef struct tagCAFLT
    {
    ULONG cElems;
     FLOAT *pElems;
    } 	CAFLT;

typedef struct tagCADBL
    {
    ULONG cElems;
     DOUBLE *pElems;
    } 	CADBL;

typedef struct tagCACY
    {
    ULONG cElems;
     CY *pElems;
    } 	CACY;

typedef struct tagCADATE
    {
    ULONG cElems;
     DATE *pElems;
    } 	CADATE;

typedef struct tagCABSTR
    {
    ULONG cElems;
     BSTR *pElems;
    } 	CABSTR;

typedef struct tagCABSTRBLOB
    {
    ULONG cElems;
     BSTRBLOB *pElems;
    } 	CABSTRBLOB;

typedef struct tagCABOOL
    {
    ULONG cElems;
     VARIANT_BOOL *pElems;
    } 	CABOOL;

typedef struct tagCASCODE
    {
    ULONG cElems;
     SCODE *pElems;
    } 	CASCODE;

typedef struct tagCAPROPVARIANT
    {
    ULONG cElems;
     PROPVARIANT *pElems;
    } 	CAPROPVARIANT;

typedef struct tagCAH
    {
    ULONG cElems;
     LARGE_INTEGER *pElems;
    } 	CAH;

typedef struct tagCAUH
    {
    ULONG cElems;
     ULARGE_INTEGER *pElems;
    } 	CAUH;

typedef struct tagCALPSTR
    {
    ULONG cElems;
     LPSTR *pElems;
    } 	CALPSTR;

typedef struct tagCALPWSTR
    {
    ULONG cElems;
     LPWSTR *pElems;
    } 	CALPWSTR;

typedef struct tagCAFILETIME
    {
    ULONG cElems;
     FILETIME *pElems;
    } 	CAFILETIME;

typedef struct tagCACLIPDATA
    {
    ULONG cElems;
     CLIPDATA *pElems;
    } 	CACLIPDATA;

typedef struct tagCACLSID
    {
    ULONG cElems;
     CLSID *pElems;
    } 	CACLSID;











typedef WORD PROPVAR_PAD1;
typedef WORD PROPVAR_PAD2;
typedef WORD PROPVAR_PAD3;

#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"

struct tagPROPVARIANT {
  union {
#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"
struct 
    {
    VARTYPE vt;
    PROPVAR_PAD1 wReserved1;
    PROPVAR_PAD2 wReserved2;
    PROPVAR_PAD3 wReserved3;
      union 
        {
           
         CHAR cVal;
         UCHAR bVal;
         SHORT iVal;
         USHORT uiVal;
         LONG lVal;
         ULONG ulVal;
         INT intVal;
         UINT uintVal;
         LARGE_INTEGER hVal;
         ULARGE_INTEGER uhVal;
         FLOAT fltVal;
         DOUBLE dblVal;
         VARIANT_BOOL boolVal;
         
         SCODE scode;
         CY cyVal;
         DATE date;
         FILETIME filetime;
         CLSID *puuid;
         CLIPDATA *pclipdata;
         BSTR bstrVal;
         BSTRBLOB bstrblobVal;
         BLOB blob;
         LPSTR pszVal;
         LPWSTR pwszVal;
         IUnknown *punkVal;
         IDispatch *pdispVal;
         IStream *pStream;
         IStorage *pStorage;
         LPVERSIONEDSTREAM pVersionedStream;
         LPSAFEARRAY parray;
         CAC cac;
         CAUB caub;
         CAI cai;
         CAUI caui;
         CAL cal;
         CAUL caul;
         CAH cah;
         CAUH cauh;
         CAFLT caflt;
         CADBL cadbl;
         CABOOL cabool;
         CASCODE cascode;
         CACY cacy;
         CADATE cadate;
         CAFILETIME cafiletime;
         CACLSID cauuid;
         CACLIPDATA caclipdata;
         CABSTR cabstr;
         CABSTRBLOB cabstrblob;
         CALPSTR calpstr;
         CALPWSTR calpwstr;
         CAPROPVARIANT capropvar;
         CHAR *pcVal;
         UCHAR *pbVal;
         SHORT *piVal;
         USHORT *puiVal;
         LONG *plVal;
         ULONG *pulVal;
         INT *pintVal;
         UINT *puintVal;
         FLOAT *pfltVal;
         DOUBLE *pdblVal;
         VARIANT_BOOL *pboolVal;
         DECIMAL *pdecVal;
         SCODE *pscode;
         CY *pcyVal;
         DATE *pdate;
         BSTR *pbstrVal;
         IUnknown **ppunkVal;
         IDispatch **ppdispVal;
         LPSAFEARRAY *pparray;
         PROPVARIANT *pvarVal;
        } 	;
    } ;

    DECIMAL decVal;
  };
};
#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"






typedef struct tagPROPVARIANT * LPPROPVARIANT;
#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"



















































































enum PIDMSI_STATUS_VALUE
    {	PIDMSI_STATUS_NORMAL	= 0,
	PIDMSI_STATUS_NEW	= PIDMSI_STATUS_NORMAL + 1,
	PIDMSI_STATUS_PRELIM	= PIDMSI_STATUS_NEW + 1,
	PIDMSI_STATUS_DRAFT	= PIDMSI_STATUS_PRELIM + 1,
	PIDMSI_STATUS_INPROGRESS	= PIDMSI_STATUS_DRAFT + 1,
	PIDMSI_STATUS_EDIT	= PIDMSI_STATUS_INPROGRESS + 1,
	PIDMSI_STATUS_REVIEW	= PIDMSI_STATUS_EDIT + 1,
	PIDMSI_STATUS_PROOF	= PIDMSI_STATUS_REVIEW + 1,
	PIDMSI_STATUS_FINAL	= PIDMSI_STATUS_PROOF + 1,
	PIDMSI_STATUS_OTHER	= 0x7fff
    } ;






typedef struct tagPROPSPEC
    {
    ULONG ulKind;
      union 
        {
         PROPID propid;
         LPOLESTR lpwstr;
           
        } 	;
    } 	PROPSPEC;

typedef struct tagSTATPROPSTG
    {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
    } 	STATPROPSTG;






typedef struct tagSTATPROPSETSTG
    {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
    } 	STATPROPSETSTG;



extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_v0_0_s_ifspec;





 


extern const IID IID_IPropertyStorage;

























































#line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"

    typedef struct IPropertyStorageVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IPropertyStorage * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IPropertyStorage * This);
        
        ULONG ( __stdcall *Release )( 
            IPropertyStorage * This);
        
        HRESULT ( __stdcall *ReadMultiple )( 
            IPropertyStorage * This,
             ULONG cpspec,
             const PROPSPEC rgpspec[  ],
             PROPVARIANT rgpropvar[  ]);
        
        HRESULT ( __stdcall *WriteMultiple )( 
            IPropertyStorage * This,
             ULONG cpspec,
             const PROPSPEC rgpspec[  ],
             const PROPVARIANT rgpropvar[  ],
             PROPID propidNameFirst);
        
        HRESULT ( __stdcall *DeleteMultiple )( 
            IPropertyStorage * This,
             ULONG cpspec,
             const PROPSPEC rgpspec[  ]);
        
        HRESULT ( __stdcall *ReadPropertyNames )( 
            IPropertyStorage * This,
             ULONG cpropid,
             const PROPID rgpropid[  ],
             LPOLESTR rglpwstrName[  ]);
        
        HRESULT ( __stdcall *WritePropertyNames )( 
            IPropertyStorage * This,
             ULONG cpropid,
             const PROPID rgpropid[  ],
             const LPOLESTR rglpwstrName[  ]);
        
        HRESULT ( __stdcall *DeletePropertyNames )( 
            IPropertyStorage * This,
             ULONG cpropid,
             const PROPID rgpropid[  ]);
        
        HRESULT ( __stdcall *Commit )( 
            IPropertyStorage * This,
             DWORD grfCommitFlags);
        
        HRESULT ( __stdcall *Revert )( 
            IPropertyStorage * This);
        
        HRESULT ( __stdcall *Enum )( 
            IPropertyStorage * This,
             IEnumSTATPROPSTG **ppenum);
        
        HRESULT ( __stdcall *SetTimes )( 
            IPropertyStorage * This,
             const FILETIME *pctime,
             const FILETIME *patime,
             const FILETIME *pmtime);
        
        HRESULT ( __stdcall *SetClass )( 
            IPropertyStorage * This,
             const IID * const clsid);
        
        HRESULT ( __stdcall *Stat )( 
            IPropertyStorage * This,
             STATPROPSETSTG *pstatpsstg);
        
        
    } IPropertyStorageVtbl;

    struct IPropertyStorage
    {
         struct IPropertyStorageVtbl *lpVtbl;
    };

    





















































#line 730 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"



HRESULT __stdcall IPropertyStorage_ReadMultiple_Proxy( 
    IPropertyStorage * This,
     ULONG cpspec,
     const PROPSPEC rgpspec[  ],
     PROPVARIANT rgpropvar[  ]);


void __stdcall IPropertyStorage_ReadMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_WriteMultiple_Proxy( 
    IPropertyStorage * This,
     ULONG cpspec,
     const PROPSPEC rgpspec[  ],
     const PROPVARIANT rgpropvar[  ],
     PROPID propidNameFirst);


void __stdcall IPropertyStorage_WriteMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_DeleteMultiple_Proxy( 
    IPropertyStorage * This,
     ULONG cpspec,
     const PROPSPEC rgpspec[  ]);


void __stdcall IPropertyStorage_DeleteMultiple_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_ReadPropertyNames_Proxy( 
    IPropertyStorage * This,
     ULONG cpropid,
     const PROPID rgpropid[  ],
     LPOLESTR rglpwstrName[  ]);


void __stdcall IPropertyStorage_ReadPropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_WritePropertyNames_Proxy( 
    IPropertyStorage * This,
     ULONG cpropid,
     const PROPID rgpropid[  ],
     const LPOLESTR rglpwstrName[  ]);


void __stdcall IPropertyStorage_WritePropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_DeletePropertyNames_Proxy( 
    IPropertyStorage * This,
     ULONG cpropid,
     const PROPID rgpropid[  ]);


void __stdcall IPropertyStorage_DeletePropertyNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Commit_Proxy( 
    IPropertyStorage * This,
     DWORD grfCommitFlags);


void __stdcall IPropertyStorage_Commit_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Revert_Proxy( 
    IPropertyStorage * This);


void __stdcall IPropertyStorage_Revert_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Enum_Proxy( 
    IPropertyStorage * This,
     IEnumSTATPROPSTG **ppenum);


void __stdcall IPropertyStorage_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_SetTimes_Proxy( 
    IPropertyStorage * This,
     const FILETIME *pctime,
     const FILETIME *patime,
     const FILETIME *pmtime);


void __stdcall IPropertyStorage_SetTimes_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_SetClass_Proxy( 
    IPropertyStorage * This,
     const IID * const clsid);


void __stdcall IPropertyStorage_SetClass_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertyStorage_Stat_Proxy( 
    IPropertyStorage * This,
     STATPROPSETSTG *pstatpsstg);


void __stdcall IPropertyStorage_Stat_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 891 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"






 

typedef  IPropertySetStorage *LPPROPERTYSETSTORAGE;


extern const IID IID_IPropertySetStorage;



























#line 931 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"

    typedef struct IPropertySetStorageVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IPropertySetStorage * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IPropertySetStorage * This);
        
        ULONG ( __stdcall *Release )( 
            IPropertySetStorage * This);
        
        HRESULT ( __stdcall *Create )( 
            IPropertySetStorage * This,
             const IID * const rfmtid,
             const CLSID *pclsid,
             DWORD grfFlags,
             DWORD grfMode,
             IPropertyStorage **ppprstg);
        
        HRESULT ( __stdcall *Open )( 
            IPropertySetStorage * This,
             const IID * const rfmtid,
             DWORD grfMode,
             IPropertyStorage **ppprstg);
        
        HRESULT ( __stdcall *Delete )( 
            IPropertySetStorage * This,
             const IID * const rfmtid);
        
        HRESULT ( __stdcall *Enum )( 
            IPropertySetStorage * This,
             IEnumSTATPROPSETSTG **ppenum);
        
        
    } IPropertySetStorageVtbl;

    struct IPropertySetStorage
    {
         struct IPropertySetStorageVtbl *lpVtbl;
    };

    





























#line 1008 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"



HRESULT __stdcall IPropertySetStorage_Create_Proxy( 
    IPropertySetStorage * This,
     const IID * const rfmtid,
     const CLSID *pclsid,
     DWORD grfFlags,
     DWORD grfMode,
     IPropertyStorage **ppprstg);


void __stdcall IPropertySetStorage_Create_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertySetStorage_Open_Proxy( 
    IPropertySetStorage * This,
     const IID * const rfmtid,
     DWORD grfMode,
     IPropertyStorage **ppprstg);


void __stdcall IPropertySetStorage_Open_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertySetStorage_Delete_Proxy( 
    IPropertySetStorage * This,
     const IID * const rfmtid);


void __stdcall IPropertySetStorage_Delete_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IPropertySetStorage_Enum_Proxy( 
    IPropertySetStorage * This,
     IEnumSTATPROPSETSTG **ppenum);


void __stdcall IPropertySetStorage_Enum_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1067 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"






 

typedef  IEnumSTATPROPSTG *LPENUMSTATPROPSTG;


extern const IID IID_IEnumSTATPROPSTG;






















#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"

    typedef struct IEnumSTATPROPSTGVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IEnumSTATPROPSTG * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IEnumSTATPROPSTG * This);
        
        ULONG ( __stdcall *Release )( 
            IEnumSTATPROPSTG * This);
        
         HRESULT ( __stdcall *Next )( 
            IEnumSTATPROPSTG * This,
             ULONG celt,
             STATPROPSTG *rgelt,
             ULONG *pceltFetched);
        
        HRESULT ( __stdcall *Skip )( 
            IEnumSTATPROPSTG * This,
             ULONG celt);
        
        HRESULT ( __stdcall *Reset )( 
            IEnumSTATPROPSTG * This);
        
        HRESULT ( __stdcall *Clone )( 
            IEnumSTATPROPSTG * This,
             IEnumSTATPROPSTG **ppenum);
        
        
    } IEnumSTATPROPSTGVtbl;

    struct IEnumSTATPROPSTG
    {
         struct IEnumSTATPROPSTGVtbl *lpVtbl;
    };

    





























#line 1174 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"



 HRESULT __stdcall IEnumSTATPROPSTG_RemoteNext_Proxy( 
    IEnumSTATPROPSTG * This,
     ULONG celt,
     STATPROPSTG *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSTG_Skip_Proxy( 
    IEnumSTATPROPSTG * This,
     ULONG celt);


void __stdcall IEnumSTATPROPSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSTG_Reset_Proxy( 
    IEnumSTATPROPSTG * This);


void __stdcall IEnumSTATPROPSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSTG_Clone_Proxy( 
    IEnumSTATPROPSTG * This,
     IEnumSTATPROPSTG **ppenum);


void __stdcall IEnumSTATPROPSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1228 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"






 

typedef  IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;


extern const IID IID_IEnumSTATPROPSETSTG;






















#line 1263 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"

    typedef struct IEnumSTATPROPSETSTGVtbl
    {
        
        
        HRESULT ( __stdcall *QueryInterface )( 
            IEnumSTATPROPSETSTG * This,
             const IID * const riid,
             void **ppvObject);
        
        ULONG ( __stdcall *AddRef )( 
            IEnumSTATPROPSETSTG * This);
        
        ULONG ( __stdcall *Release )( 
            IEnumSTATPROPSETSTG * This);
        
         HRESULT ( __stdcall *Next )( 
            IEnumSTATPROPSETSTG * This,
             ULONG celt,
             STATPROPSETSTG *rgelt,
             ULONG *pceltFetched);
        
        HRESULT ( __stdcall *Skip )( 
            IEnumSTATPROPSETSTG * This,
             ULONG celt);
        
        HRESULT ( __stdcall *Reset )( 
            IEnumSTATPROPSETSTG * This);
        
        HRESULT ( __stdcall *Clone )( 
            IEnumSTATPROPSETSTG * This,
             IEnumSTATPROPSETSTG **ppenum);
        
        
    } IEnumSTATPROPSETSTGVtbl;

    struct IEnumSTATPROPSETSTG
    {
         struct IEnumSTATPROPSETSTGVtbl *lpVtbl;
    };

    





























#line 1335 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"



 HRESULT __stdcall IEnumSTATPROPSETSTG_RemoteNext_Proxy( 
    IEnumSTATPROPSETSTG * This,
     ULONG celt,
     STATPROPSETSTG *rgelt,
     ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSETSTG_Skip_Proxy( 
    IEnumSTATPROPSETSTG * This,
     ULONG celt);


void __stdcall IEnumSTATPROPSETSTG_Skip_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSETSTG_Reset_Proxy( 
    IEnumSTATPROPSETSTG * This);


void __stdcall IEnumSTATPROPSETSTG_Reset_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


HRESULT __stdcall IEnumSTATPROPSETSTG_Clone_Proxy( 
    IEnumSTATPROPSETSTG * This,
     IEnumSTATPROPSETSTG **ppenum);


void __stdcall IEnumSTATPROPSETSTG_Clone_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1389 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"



 

typedef  IPropertyStorage *LPPROPERTYSTORAGE;

extern __declspec(dllimport) HRESULT __stdcall PropVariantCopy ( PROPVARIANT * pvarDest, const PROPVARIANT * pvarSrc );
extern __declspec(dllimport) HRESULT __stdcall PropVariantClear ( PROPVARIANT * pvar );
extern __declspec(dllimport) HRESULT __stdcall FreePropVariantArray ( ULONG cVariants, PROPVARIANT * rgvars );









#line 1409 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"



extern __declspec(dllimport) HRESULT __stdcall StgCreatePropStg( IUnknown* pUnk, const IID * const fmtid, const CLSID *pclsid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg );
extern __declspec(dllimport) HRESULT __stdcall StgOpenPropStg( IUnknown* pUnk, const IID * const fmtid, DWORD grfFlags, DWORD dwReserved, IPropertyStorage **ppPropStg );
extern __declspec(dllimport) HRESULT __stdcall StgCreatePropSetStg( IStorage *pStorage, DWORD dwReserved, IPropertySetStorage **ppPropSetStg);


extern __declspec(dllimport) HRESULT __stdcall FmtIdToPropStgName( const FMTID *pfmtid, LPOLESTR oszName );
extern __declspec(dllimport) HRESULT __stdcall PropStgNameToFmtId( const LPOLESTR oszName, FMTID *pfmtid );
#line 1420 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"

#pragma warning(pop)



#line 1426 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"


extern RPC_IF_HANDLE __MIDL_itf_propidl_0120_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0120_v0_0_s_ifspec;



unsigned long             __stdcall  BSTR_UserSize(     unsigned long *, unsigned long            , BSTR * ); 
unsigned char * __stdcall  BSTR_UserMarshal(  unsigned long *, unsigned char *, BSTR * ); 
unsigned char * __stdcall  BSTR_UserUnmarshal(unsigned long *, unsigned char *, BSTR * ); 
void                      __stdcall  BSTR_UserFree(     unsigned long *, BSTR * ); 

unsigned long             __stdcall  LPSAFEARRAY_UserSize(     unsigned long *, unsigned long            , LPSAFEARRAY * ); 
unsigned char * __stdcall  LPSAFEARRAY_UserMarshal(  unsigned long *, unsigned char *, LPSAFEARRAY * ); 
unsigned char * __stdcall  LPSAFEARRAY_UserUnmarshal(unsigned long *, unsigned char *, LPSAFEARRAY * ); 
void                      __stdcall  LPSAFEARRAY_UserFree(     unsigned long *, LPSAFEARRAY * ); 

 HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy( 
    IEnumSTATPROPSTG * This,
     ULONG celt,
     STATPROPSTG *rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub( 
    IEnumSTATPROPSTG * This,
     ULONG celt,
     STATPROPSTG *rgelt,
     ULONG *pceltFetched);

 HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy( 
    IEnumSTATPROPSETSTG * This,
     ULONG celt,
     STATPROPSETSTG *rgelt,
     ULONG *pceltFetched);


 HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub( 
    IEnumSTATPROPSETSTG * This,
     ULONG celt,
     STATPROPSETSTG *rgelt,
     ULONG *pceltFetched);









#line 1478 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\propidl.h"



#line 980 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"




extern __declspec(dllimport) HRESULT __stdcall CreateStdProgressIndicator( HWND hwndParent,
                                     LPCOLESTR pszTitle,
                                     IBindStatusCallback * pIbscCaller,
                                    IBindStatusCallback ** ppIbsc);







#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 996 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"
#line 997 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"

#line 999 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\objbase.h"

#line 70 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ole2.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"















#pragma once
#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack8.h"
#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"









#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"

extern const IID IID_StdOle;





























extern __declspec(dllimport) BSTR __stdcall SysAllocString(const OLECHAR *);
extern __declspec(dllimport) INT __stdcall  SysReAllocString(BSTR *, const OLECHAR *);
extern __declspec(dllimport) BSTR __stdcall SysAllocStringLen(const OLECHAR *, UINT);
extern __declspec(dllimport) INT __stdcall  SysReAllocStringLen(BSTR *, const OLECHAR *, UINT);
extern __declspec(dllimport) void __stdcall SysFreeString(BSTR);
extern __declspec(dllimport) UINT __stdcall SysStringLen(BSTR);


extern __declspec(dllimport) UINT __stdcall SysStringByteLen(BSTR bstr);
extern __declspec(dllimport) BSTR __stdcall SysAllocStringByteLen(LPCSTR psz, UINT len);
#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"





extern __declspec(dllimport) INT __stdcall DosDateTimeToVariantTime(USHORT wDosDate, USHORT wDosTime, DOUBLE * pvtime);

extern __declspec(dllimport) INT __stdcall VariantTimeToDosDateTime(DOUBLE vtime, USHORT * pwDosDate, USHORT * pwDosTime);


extern __declspec(dllimport) INT __stdcall SystemTimeToVariantTime(LPSYSTEMTIME lpSystemTime, DOUBLE *pvtime);
extern __declspec(dllimport) INT __stdcall VariantTimeToSystemTime(DOUBLE vtime, LPSYSTEMTIME lpSystemTime);
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"






extern __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptor(UINT cDims, SAFEARRAY ** ppsaOut);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptorEx(VARTYPE vt, UINT cDims, SAFEARRAY ** ppsaOut);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayAllocData(SAFEARRAY * psa);
extern __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreate(VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound);
extern __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateEx(VARTYPE vt, UINT cDims, SAFEARRAYBOUND * rgsabound, PVOID pvExtra);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayCopyData(SAFEARRAY *psaSource, SAFEARRAY *psaTarget);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyDescriptor(SAFEARRAY * psa);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyData(SAFEARRAY * psa);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayDestroy(SAFEARRAY * psa);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayRedim(SAFEARRAY * psa, SAFEARRAYBOUND * psaboundNew);
extern __declspec(dllimport) UINT __stdcall SafeArrayGetDim(SAFEARRAY * psa);
extern __declspec(dllimport) UINT __stdcall SafeArrayGetElemsize(SAFEARRAY * psa);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayGetUBound(SAFEARRAY * psa, UINT nDim, LONG * plUbound);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayGetLBound(SAFEARRAY * psa, UINT nDim, LONG * plLbound);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayLock(SAFEARRAY * psa);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayUnlock(SAFEARRAY * psa);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayAccessData(SAFEARRAY * psa, void ** ppvData);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayUnaccessData(SAFEARRAY * psa);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayGetElement(SAFEARRAY * psa, LONG * rgIndices, void * pv);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayPutElement(SAFEARRAY * psa, LONG * rgIndices, void * pv);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayCopy(SAFEARRAY * psa, SAFEARRAY ** ppsaOut);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayPtrOfIndex(SAFEARRAY * psa, LONG * rgIndices, void ** ppvData);
extern __declspec(dllimport) HRESULT __stdcall SafeArraySetRecordInfo(SAFEARRAY * psa, IRecordInfo * prinfo);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayGetRecordInfo(SAFEARRAY * psa, IRecordInfo ** prinfo);
extern __declspec(dllimport) HRESULT __stdcall SafeArraySetIID(SAFEARRAY * psa, const GUID * const guid);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayGetIID(SAFEARRAY * psa, GUID * pguid);
extern __declspec(dllimport) HRESULT __stdcall SafeArrayGetVartype(SAFEARRAY * psa, VARTYPE * pvt);
extern __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVector(VARTYPE vt, LONG lLbound, ULONG cElements);
extern __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVectorEx(VARTYPE vt, LONG lLbound, ULONG cElements, PVOID pvExtra);





extern __declspec(dllimport) void __stdcall VariantInit(VARIANTARG * pvarg);
extern __declspec(dllimport) HRESULT __stdcall VariantClear(VARIANTARG * pvarg);
extern __declspec(dllimport) HRESULT __stdcall VariantCopy(VARIANTARG * pvargDest, VARIANTARG * pvargSrc);
extern __declspec(dllimport) HRESULT __stdcall VariantCopyInd(VARIANT * pvarDest, VARIANTARG * pvargSrc);
extern __declspec(dllimport) HRESULT __stdcall VariantChangeType(VARIANTARG * pvargDest,
                VARIANTARG * pvarSrc, USHORT wFlags, VARTYPE vt);
extern __declspec(dllimport) HRESULT __stdcall VariantChangeTypeEx(VARIANTARG * pvargDest,
                VARIANTARG * pvarSrc, LCID lcid, USHORT wFlags, VARTYPE vt);




                                      
                                      

				      
				      


                                      
                                      







extern __declspec(dllimport) HRESULT __stdcall VectorFromBstr (BSTR bstr, SAFEARRAY ** ppsa);
extern __declspec(dllimport) HRESULT __stdcall BstrFromVector (SAFEARRAY *psa, BSTR *pbstr);














































#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"






















extern __declspec(dllimport) HRESULT __stdcall VarUI1FromI2(SHORT sIn, BYTE * pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromI4(LONG lIn, BYTE * pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromI8(LONG64 i64In, BYTE * pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromR4(FLOAT fltIn, BYTE * pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromR8(DOUBLE dblIn, BYTE * pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromCy(CY cyIn, BYTE * pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromDate(DATE dateIn, BYTE * pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, BYTE * pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromDisp(IDispatch * pdispIn, LCID lcid, BYTE * pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromBool(VARIANT_BOOL boolIn, BYTE * pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromI1(CHAR cIn, BYTE *pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromUI2(USHORT uiIn, BYTE *pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromUI4(ULONG ulIn, BYTE *pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromUI8(ULONG64 ui64In, BYTE * pbOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI1FromDec(DECIMAL *pdecIn, BYTE *pbOut);

extern __declspec(dllimport) HRESULT __stdcall VarI2FromUI1(BYTE bIn, SHORT * psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromI4(LONG lIn, SHORT * psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromI8(LONG64 i64In, SHORT * psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromR4(FLOAT fltIn, SHORT * psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromR8(DOUBLE dblIn, SHORT * psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromCy(CY cyIn, SHORT * psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromDate(DATE dateIn, SHORT * psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, SHORT * psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromDisp(IDispatch * pdispIn, LCID lcid, SHORT * psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromBool(VARIANT_BOOL boolIn, SHORT * psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromI1(CHAR cIn, SHORT *psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromUI2(USHORT uiIn, SHORT *psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromUI4(ULONG ulIn, SHORT *psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromUI8(ULONG64 ui64In, SHORT * psOut);
extern __declspec(dllimport) HRESULT __stdcall VarI2FromDec(DECIMAL *pdecIn, SHORT *psOut);

extern __declspec(dllimport) HRESULT __stdcall VarI4FromUI1(BYTE bIn, LONG * plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromI2(SHORT sIn, LONG * plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromI8(LONG64 i64In, LONG * plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromR4(FLOAT fltIn, LONG * plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromR8(DOUBLE dblIn, LONG * plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromCy(CY cyIn, LONG * plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromDate(DATE dateIn, LONG * plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, LONG * plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromDisp(IDispatch * pdispIn, LCID lcid, LONG * plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromBool(VARIANT_BOOL boolIn, LONG * plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromI1(CHAR cIn, LONG *plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromUI2(USHORT uiIn, LONG *plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromUI4(ULONG ulIn, LONG *plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In, LONG * plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromDec(DECIMAL *pdecIn, LONG *plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromInt(INT intIn, LONG *plOut);



extern __declspec(dllimport) HRESULT __stdcall VarI8FromUI1(BYTE bIn, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromI2(SHORT sIn, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromI4(LONG lIn, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromR4(FLOAT fltIn, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromR8(DOUBLE dblIn, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromCy(CY cyIn, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromDate(DATE dateIn, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromStr(OLECHAR * strIn, LCID lcid, unsigned long dwFlags, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromDisp(IDispatch * pdispIn, LCID lcid, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromBool(VARIANT_BOOL boolIn, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromI1(CHAR cIn, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromUI2(USHORT uiIn, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromUI4(ULONG ulIn, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromUI8(ULONG64 ui64In, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromDec(DECIMAL *pdecIn, LONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarI8FromInt(INT intIn, LONG64 * pi64Out);





extern __declspec(dllimport) HRESULT __stdcall VarR4FromUI1(BYTE bIn, FLOAT * pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromI2(SHORT sIn, FLOAT * pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromI4(LONG lIn, FLOAT * pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromI8(LONG64 i64In, FLOAT * pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromR8(DOUBLE dblIn, FLOAT * pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromCy(CY cyIn, FLOAT * pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromDate(DATE dateIn, FLOAT * pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, FLOAT *pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromDisp(IDispatch * pdispIn, LCID lcid, FLOAT * pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromBool(VARIANT_BOOL boolIn, FLOAT * pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromI1(CHAR cIn, FLOAT *pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromUI2(USHORT uiIn, FLOAT *pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromUI4(ULONG ulIn, FLOAT *pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromUI8(ULONG64 ui64In, FLOAT * pfltOut);
extern __declspec(dllimport) HRESULT __stdcall VarR4FromDec(DECIMAL *pdecIn, FLOAT *pfltOut);

extern __declspec(dllimport) HRESULT __stdcall VarR8FromUI1(BYTE bIn, DOUBLE * pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromI2(SHORT sIn, DOUBLE * pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromI4(LONG lIn, DOUBLE * pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromI8(LONG64 i64In, DOUBLE * pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromR4(FLOAT fltIn, DOUBLE * pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromCy(CY cyIn, DOUBLE * pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromDate(DATE dateIn, DOUBLE * pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DOUBLE *pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromDisp(IDispatch * pdispIn, LCID lcid, DOUBLE * pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromBool(VARIANT_BOOL boolIn, DOUBLE * pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromI1(CHAR cIn, DOUBLE *pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromUI2(USHORT uiIn, DOUBLE *pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromUI4(ULONG ulIn, DOUBLE *pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromUI8(ULONG64 ui64In, DOUBLE * pdblOut);
extern __declspec(dllimport) HRESULT __stdcall VarR8FromDec(DECIMAL *pdecIn, DOUBLE *pdblOut);

extern __declspec(dllimport) HRESULT __stdcall VarDateFromUI1(BYTE bIn, DATE * pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromI2(SHORT sIn, DATE * pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromI4(LONG lIn, DATE * pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromI8(LONG64 i64In, DATE * pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromR4(FLOAT fltIn, DATE * pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromR8(DOUBLE dblIn, DATE * pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromCy(CY cyIn, DATE * pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromDisp(IDispatch * pdispIn, LCID lcid, DATE * pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromBool(VARIANT_BOOL boolIn, DATE * pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromI1(CHAR cIn, DATE *pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromUI2(USHORT uiIn, DATE *pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromUI4(ULONG ulIn, DATE *pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromUI8(ULONG64 ui64In, DATE * pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromDec(DECIMAL *pdecIn, DATE *pdateOut);

extern __declspec(dllimport) HRESULT __stdcall VarCyFromUI1(BYTE bIn, CY * pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromI2(SHORT sIn, CY * pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromI4(LONG lIn, CY * pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromI8(LONG64 i64In, CY * pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromR4(FLOAT fltIn, CY * pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromR8(DOUBLE dblIn, CY * pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromDate(DATE dateIn, CY * pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, CY * pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromDisp(IDispatch * pdispIn, LCID lcid, CY * pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromBool(VARIANT_BOOL boolIn, CY * pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromI1(CHAR cIn, CY *pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromUI2(USHORT uiIn, CY *pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromUI4(ULONG ulIn, CY *pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromUI8(ULONG64 ui64In, CY * pcyOut);
extern __declspec(dllimport) HRESULT __stdcall VarCyFromDec(DECIMAL *pdecIn, CY *pcyOut);

extern __declspec(dllimport) HRESULT __stdcall VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromI8(LONG64 i64In, LCID lcid, unsigned long dwFlags, BSTR * pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromDate(DATE dateIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromDisp(IDispatch * pdispIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromUI8(ULONG64 ui64In, LCID lcid, unsigned long dwFlags, BSTR * pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarBstrFromDec(DECIMAL *pdecIn, LCID lcid, ULONG dwFlags, BSTR *pbstrOut);

extern __declspec(dllimport) HRESULT __stdcall VarBoolFromUI1(BYTE bIn, VARIANT_BOOL * pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromI2(SHORT sIn, VARIANT_BOOL * pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromI4(LONG lIn, VARIANT_BOOL * pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromI8(LONG64 i64In, VARIANT_BOOL * pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromR4(FLOAT fltIn, VARIANT_BOOL * pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromR8(DOUBLE dblIn, VARIANT_BOOL * pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromDate(DATE dateIn, VARIANT_BOOL * pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromCy(CY cyIn, VARIANT_BOOL * pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags, VARIANT_BOOL * pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromDisp(IDispatch * pdispIn, LCID lcid, VARIANT_BOOL * pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromI1(CHAR cIn, VARIANT_BOOL *pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromUI2(USHORT uiIn, VARIANT_BOOL *pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromUI4(ULONG ulIn, VARIANT_BOOL *pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromUI8(ULONG64 i64In, VARIANT_BOOL * pboolOut);
extern __declspec(dllimport) HRESULT __stdcall VarBoolFromDec(DECIMAL *pdecIn, VARIANT_BOOL *pboolOut);

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromUI1(
         BYTE bIn,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromI2(
         SHORT uiIn,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromI4(
         LONG lIn,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromI8(
         LONG64 i64In,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromR4(
         FLOAT fltIn,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromR8(
         DOUBLE dblIn,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromDate(
         DATE dateIn,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromCy(
         CY cyIn,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromStr(
         OLECHAR *strIn,
         LCID lcid,
         ULONG dwFlags,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromDisp(
         IDispatch *pdispIn,
         LCID lcid,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromBool(
         VARIANT_BOOL boolIn,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromUI2(
         USHORT uiIn,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromUI4(
         ULONG ulIn,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromUI8(
         ULONG64 i64In,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall 
VarI1FromDec(
         DECIMAL *pdecIn,
         CHAR *pcOut
    );

extern __declspec(dllimport) HRESULT __stdcall VarUI2FromUI1(BYTE bIn, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromI2(SHORT uiIn, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromI4(LONG lIn, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromI8(LONG64 i64In, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromR4(FLOAT fltIn, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromDate(DATE dateIn, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromCy(CY cyIn, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromDisp(IDispatch *pdispIn, LCID lcid, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromBool(VARIANT_BOOL boolIn, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromI1(CHAR cIn, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromUI4(ULONG ulIn, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromUI8(ULONG64 i64In, USHORT *puiOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI2FromDec(DECIMAL *pdecIn, USHORT *puiOut);

extern __declspec(dllimport) HRESULT __stdcall VarUI4FromUI1(BYTE bIn, ULONG *pulOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromI2(SHORT uiIn, ULONG *pulOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromI4(LONG lIn, ULONG *pulOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromI8(LONG64 i64In, ULONG *plOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromR4(FLOAT fltIn, ULONG *pulOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromR8(DOUBLE dblIn, ULONG *pulOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromDate(DATE dateIn, ULONG *pulOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromCy(CY cyIn, ULONG *pulOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, ULONG *pulOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromDisp(IDispatch *pdispIn, LCID lcid, ULONG *pulOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromBool(VARIANT_BOOL boolIn, ULONG *pulOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromI1(CHAR cIn, ULONG *pulOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromUI2(USHORT uiIn, ULONG *pulOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromUI8(ULONG64 ui64In, ULONG *plOut);
extern __declspec(dllimport) HRESULT __stdcall VarUI4FromDec(DECIMAL *pdecIn, ULONG *pulOut);



extern __declspec(dllimport) HRESULT __stdcall VarUI8FromUI1(BYTE bIn, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromI2(SHORT sIn, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromI4(LONG lIn, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromI8(LONG64 ui64In, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromR4(FLOAT fltIn, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromR8(DOUBLE dblIn, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromCy(CY cyIn, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromDate(DATE dateIn, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromStr(OLECHAR * strIn, LCID lcid, unsigned long dwFlags, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromDisp(IDispatch * pdispIn, LCID lcid, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromBool(VARIANT_BOOL boolIn, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromI1(CHAR cIn, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromUI2(USHORT uiIn, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromUI4(ULONG ulIn, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromDec(DECIMAL *pdecIn, ULONG64 * pi64Out);
extern __declspec(dllimport) HRESULT __stdcall VarUI8FromInt(INT intIn, ULONG64 * pi64Out);





extern __declspec(dllimport) HRESULT __stdcall VarDecFromUI1(BYTE bIn, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromI2(SHORT uiIn, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromI4(LONG lIn, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromI8(LONG64 i64In, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromR4(FLOAT fltIn, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromR8(DOUBLE dblIn, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromDate(DATE dateIn, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromCy(CY cyIn, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromStr(OLECHAR *strIn, LCID lcid, ULONG dwFlags, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromDisp(IDispatch *pdispIn, LCID lcid, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromBool(VARIANT_BOOL boolIn, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromI1(CHAR cIn, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromUI2(USHORT uiIn, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromUI4(ULONG ulIn, DECIMAL *pdecOut);
extern __declspec(dllimport) HRESULT __stdcall VarDecFromUI8(ULONG64 ui64In, DECIMAL *pdecOut);




extern __declspec(dllimport) HRESULT __stdcall VarI4FromI8(LONG64 i64In, LONG *plOut);
extern __declspec(dllimport) HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In, LONG *plOut);















































































typedef struct {
    INT   cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT   cchUsed;
    INT   nBaseShift;
    INT   nPwr10;
} NUMPARSE;







































extern __declspec(dllimport) HRESULT __stdcall VarParseNumFromStr(OLECHAR * strIn, LCID lcid, ULONG dwFlags,
            NUMPARSE * pnumprs, BYTE * rgbDig);

extern __declspec(dllimport) HRESULT __stdcall VarNumFromParseNum(NUMPARSE * pnumprs, BYTE * rgbDig,
            ULONG dwVtBits, VARIANT * pvar);





extern HRESULT __stdcall VarAdd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarAnd(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarCat(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarDiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarEqv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarIdiv(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarImp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarMod(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarMul(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarOr(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarPow(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarSub(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);
extern HRESULT __stdcall VarXor(LPVARIANT pvarLeft, LPVARIANT pvarRight, LPVARIANT pvarResult);

extern HRESULT __stdcall VarAbs(LPVARIANT pvarIn, LPVARIANT pvarResult);
extern HRESULT __stdcall VarFix(LPVARIANT pvarIn, LPVARIANT pvarResult);
extern HRESULT __stdcall VarInt(LPVARIANT pvarIn, LPVARIANT pvarResult);
extern HRESULT __stdcall VarNeg(LPVARIANT pvarIn, LPVARIANT pvarResult);
extern HRESULT __stdcall VarNot(LPVARIANT pvarIn, LPVARIANT pvarResult);

extern HRESULT __stdcall VarRound(LPVARIANT pvarIn, int cDecimals, LPVARIANT pvarResult);


extern HRESULT __stdcall VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid, ULONG dwFlags);


















extern HRESULT __stdcall VarDecAdd(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecDiv(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecMul(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecSub(LPDECIMAL pdecLeft, LPDECIMAL pdecRight, LPDECIMAL pdecResult);

extern HRESULT __stdcall VarDecAbs(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecFix(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecInt(LPDECIMAL pdecIn, LPDECIMAL pdecResult);
extern HRESULT __stdcall VarDecNeg(LPDECIMAL pdecIn, LPDECIMAL pdecResult);

extern HRESULT __stdcall VarDecRound(LPDECIMAL pdecIn, int cDecimals, LPDECIMAL pdecResult);

extern HRESULT __stdcall VarDecCmp(LPDECIMAL pdecLeft, LPDECIMAL pdecRight);
extern HRESULT __stdcall VarDecCmpR8(LPDECIMAL pdecLeft, double dblRight);




extern HRESULT __stdcall VarCyAdd(CY cyLeft, CY cyRight, LPCY pcyResult);
extern HRESULT __stdcall VarCyMul(CY cyLeft, CY cyRight, LPCY pcyResult);
extern HRESULT __stdcall VarCyMulI4(CY cyLeft, long lRight, LPCY pcyResult);
extern HRESULT __stdcall VarCyMulI8(CY cyLeft, LONG64 lRight, LPCY pcyResult);
extern HRESULT __stdcall VarCySub(CY cyLeft, CY cyRight, LPCY pcyResult);

extern HRESULT __stdcall VarCyAbs(CY cyIn, LPCY pcyResult);
extern HRESULT __stdcall VarCyFix(CY cyIn, LPCY pcyResult);
extern HRESULT __stdcall VarCyInt(CY cyIn, LPCY pcyResult);
extern HRESULT __stdcall VarCyNeg(CY cyIn, LPCY pcyResult);

extern HRESULT __stdcall VarCyRound(CY cyIn, int cDecimals, LPCY pcyResult);

extern HRESULT __stdcall VarCyCmp(CY cyLeft, CY cyRight);
extern HRESULT __stdcall VarCyCmpR8(CY cyLeft, double dblRight);




extern HRESULT __stdcall VarBstrCat(BSTR bstrLeft, BSTR bstrRight, LPBSTR pbstrResult);
extern HRESULT __stdcall VarBstrCmp(BSTR bstrLeft, BSTR bstrRight, LCID lcid, ULONG dwFlags); 
extern HRESULT __stdcall VarR8Pow(double dblLeft, double dblRight, double *pdblResult);
extern HRESULT __stdcall VarR4CmpR8(float fltLeft, double dblRight);
extern HRESULT __stdcall VarR8Round(double dblIn, int cDecimals, double *pdblResult);


























typedef struct {
    SYSTEMTIME st;
    USHORT  wDayOfYear;
} UDATE;





extern __declspec(dllimport) HRESULT __stdcall VarDateFromUdate(UDATE *pudateIn, ULONG dwFlags, DATE *pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarDateFromUdateEx(UDATE *pudateIn, LCID lcid, ULONG dwFlags, DATE *pdateOut);
extern __declspec(dllimport) HRESULT __stdcall VarUdateFromDate(DATE dateIn, ULONG dwFlags, UDATE *pudateOut);



   
extern __declspec(dllimport) HRESULT __stdcall GetAltMonthNames(LCID lcid, LPOLESTR * * prgp);





extern __declspec(dllimport) HRESULT __stdcall VarFormat(LPVARIANT pvarIn, LPOLESTR pstrFormat, int iFirstDay, int iFirstWeek, ULONG dwFlags, BSTR *pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarFormatDateTime(LPVARIANT pvarIn, int iNamedFormat, ULONG dwFlags, BSTR *pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarFormatNumber(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarFormatPercent(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarFormatCurrency(LPVARIANT pvarIn, int iNumDig, int iIncLead, int iUseParens, int iGroup, ULONG dwFlags, BSTR *pbstrOut);

extern __declspec(dllimport) HRESULT __stdcall VarWeekdayName(int iWeekday, int fAbbrev, int iFirstDay, ULONG dwFlags, BSTR *pbstrOut);
extern __declspec(dllimport) HRESULT __stdcall VarMonthName(int iMonth, int fAbbrev, ULONG dwFlags, BSTR *pbstrOut);

extern __declspec(dllimport) HRESULT __stdcall VarFormatFromTokens(LPVARIANT pvarIn, LPOLESTR pstrFormat, LPBYTE pbTokCur, ULONG dwFlags, BSTR *pbstrOut, LCID lcid);
extern __declspec(dllimport) HRESULT __stdcall VarTokenizeFormatString(LPOLESTR pstrFormat, LPBYTE rgbTok, int cbTok, int iFirstDay, int iFirstWeek, LCID lcid, int *pcbActual);





typedef ITypeLib * LPTYPELIB;







typedef LONG DISPID;
typedef DISPID MEMBERID;











typedef ITypeInfo * LPTYPEINFO;






typedef ITypeComp * LPTYPECOMP;






typedef ICreateTypeLib * LPCREATETYPELIB;

typedef ICreateTypeInfo * LPCREATETYPEINFO;








extern __declspec(dllimport) ULONG __stdcall LHashValOfNameSysA(SYSKIND syskind, LCID lcid,
            LPCSTR szName);
#line 897 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"

extern __declspec(dllimport) ULONG __stdcall
LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR * szName);












extern __declspec(dllimport) HRESULT __stdcall LoadTypeLib(const OLECHAR  *szFile, ITypeLib ** pptlib);



typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;








extern __declspec(dllimport) HRESULT __stdcall LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind,
            ITypeLib ** pptlib);



extern __declspec(dllimport) HRESULT __stdcall LoadRegTypeLib(const GUID * const rguid, WORD wVerMajor, WORD wVerMinor,
            LCID lcid, ITypeLib ** pptlib);



extern __declspec(dllimport) HRESULT __stdcall QueryPathOfRegTypeLib(const GUID * const guid, USHORT wMaj, USHORT wMin,
            LCID lcid, LPBSTR lpbstrPathName);



extern __declspec(dllimport) HRESULT __stdcall RegisterTypeLib(ITypeLib * ptlib, OLECHAR  *szFullPath,
            OLECHAR  *szHelpDir);




extern __declspec(dllimport) HRESULT __stdcall UnRegisterTypeLib(const GUID * const libID, WORD wVerMajor,
            WORD wVerMinor, LCID lcid, SYSKIND syskind);

extern __declspec(dllimport) HRESULT __stdcall CreateTypeLib(SYSKIND syskind, const OLECHAR  *szFile,
            ICreateTypeLib ** ppctlib);

extern __declspec(dllimport) HRESULT __stdcall CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib2 **ppctlib);






typedef IDispatch * LPDISPATCH;

typedef struct tagPARAMDATA {
    OLECHAR * szName;   
    VARTYPE vt;         
} PARAMDATA, * LPPARAMDATA;

typedef struct tagMETHODDATA {
    OLECHAR * szName;   
    PARAMDATA * ppdata; 
    DISPID dispid;      
    UINT iMeth;         
    CALLCONV cc;        
    UINT cArgs;         
    WORD wFlags;        
    VARTYPE vtReturn;
} METHODDATA, * LPMETHODDATA;

typedef struct tagINTERFACEDATA {
    METHODDATA * pmethdata;  
    UINT cMembers;      
} INTERFACEDATA, * LPINTERFACEDATA;






extern __declspec(dllimport) HRESULT __stdcall DispGetParam(DISPPARAMS * pdispparams, UINT position,
            VARTYPE vtTarg, VARIANT * pvarResult, UINT * puArgErr);



extern __declspec(dllimport) HRESULT __stdcall DispGetIDsOfNames(ITypeInfo * ptinfo, OLECHAR ** rgszNames,
            UINT cNames, DISPID * rgdispid);



extern __declspec(dllimport) HRESULT __stdcall DispInvoke(void * _this, ITypeInfo * ptinfo, DISPID dispidMember,
            WORD wFlags, DISPPARAMS * pparams, VARIANT * pvarResult,
            EXCEPINFO * pexcepinfo, UINT * puArgErr);



extern __declspec(dllimport) HRESULT __stdcall CreateDispTypeInfo(INTERFACEDATA * pidata, LCID lcid,
            ITypeInfo ** pptinfo);




extern __declspec(dllimport) HRESULT __stdcall CreateStdDispatch(IUnknown * punkOuter, void * pvThis,
            ITypeInfo * ptinfo, IUnknown ** ppunkStdDisp);




extern __declspec(dllimport) HRESULT __stdcall DispCallFunc(void * pvInstance, ULONG_PTR oVft, CALLCONV cc,
            VARTYPE vtReturn, UINT  cActuals, VARTYPE * prgvt,
            VARIANTARG ** prgpvarg, VARIANT * pvargResult);










extern __declspec(dllimport) HRESULT __stdcall RegisterActiveObject(IUnknown * punk, const IID * const rclsid,
            DWORD dwFlags, DWORD * pdwRegister);

extern __declspec(dllimport) HRESULT __stdcall RevokeActiveObject(DWORD dwRegister, void * pvReserved);

extern __declspec(dllimport) HRESULT __stdcall GetActiveObject(const IID * const rclsid, void * pvReserved,
            IUnknown ** ppunk);





extern __declspec(dllimport) HRESULT __stdcall SetErrorInfo(ULONG dwReserved, IErrorInfo * perrinfo);
extern __declspec(dllimport) HRESULT __stdcall GetErrorInfo(ULONG dwReserved, IErrorInfo ** pperrinfo);
extern __declspec(dllimport) HRESULT __stdcall CreateErrorInfo(ICreateErrorInfo ** pperrinfo);





extern __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromTypeInfo(ITypeInfo * pTypeInfo,
            IRecordInfo ** ppRecInfo);

extern __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromGuids(const GUID * const rGuidTypeLib,
            ULONG uVerMajor, ULONG uVerMinor, LCID lcid,
            const GUID * const rGuidTypeInfo, IRecordInfo ** ppRecInfo);





extern __declspec(dllimport) ULONG __stdcall OaBuildVersion(void);

extern __declspec(dllimport) void __stdcall ClearCustData(LPCUSTDATA pCustData);








#line 1077 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"




#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"











































#line 1126 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"
























#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 1151 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"
#line 1152 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"

#line 1154 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\oleauto.h"

#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ole2.h"






















































































extern __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);
#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ole2.h"




extern __declspec(dllimport) DWORD __stdcall OleBuildVersion( void );


extern __declspec(dllimport) HRESULT __stdcall ReadClassStg( LPSTORAGE pStg,  CLSID * pclsid);
extern __declspec(dllimport) HRESULT __stdcall WriteClassStg( LPSTORAGE pStg,  const IID * const rclsid);
extern __declspec(dllimport) HRESULT __stdcall ReadClassStm( LPSTREAM pStm,  CLSID * pclsid);
extern __declspec(dllimport) HRESULT __stdcall WriteClassStm( LPSTREAM pStm,  const IID * const rclsid);
extern __declspec(dllimport) HRESULT __stdcall WriteFmtUserTypeStg ( LPSTORAGE pstg,  CLIPFORMAT cf,  LPOLESTR lpszUserType);
extern __declspec(dllimport) HRESULT __stdcall ReadFmtUserTypeStg ( LPSTORAGE pstg,  CLIPFORMAT * pcf,  LPOLESTR * lplpszUserType);




extern __declspec(dllimport) HRESULT __stdcall OleInitialize( LPVOID pvReserved);
extern __declspec(dllimport) void __stdcall OleUninitialize(void);





extern __declspec(dllimport) HRESULT __stdcall  OleQueryLinkFromData( LPDATAOBJECT pSrcDataObject);
extern __declspec(dllimport) HRESULT __stdcall  OleQueryCreateFromData( LPDATAOBJECT pSrcDataObject);




extern __declspec(dllimport) HRESULT __stdcall  OleCreate( const IID * const rclsid,  const IID * const riid,  DWORD renderopt,
                 LPFORMATETC pFormatEtc,  LPOLECLIENTSITE pClientSite,
                 LPSTORAGE pStg,  LPVOID * ppvObj);

extern __declspec(dllimport) HRESULT __stdcall  OleCreateEx( const IID * const rclsid,  const IID * const riid,  DWORD dwFlags,
                 DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
                 LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
                 DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
                 LPSTORAGE pStg,  LPVOID * ppvObj);

extern __declspec(dllimport) HRESULT __stdcall  OleCreateFromData( LPDATAOBJECT pSrcDataObj,  const IID * const riid,
                 DWORD renderopt,  LPFORMATETC pFormatEtc,
                 LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,
                 LPVOID * ppvObj);

extern __declspec(dllimport) HRESULT __stdcall  OleCreateFromDataEx( LPDATAOBJECT pSrcDataObj,  const IID * const riid,
                 DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
                 LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
                 DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
                 LPSTORAGE pStg,  LPVOID * ppvObj);

extern __declspec(dllimport) HRESULT __stdcall  OleCreateLinkFromData( LPDATAOBJECT pSrcDataObj,  const IID * const riid,
                 DWORD renderopt,  LPFORMATETC pFormatEtc,
                 LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,
                 LPVOID * ppvObj);

extern __declspec(dllimport) HRESULT __stdcall  OleCreateLinkFromDataEx( LPDATAOBJECT pSrcDataObj,  const IID * const riid,
                 DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
                 LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
                  DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
                 LPSTORAGE pStg,  LPVOID * ppvObj);

extern __declspec(dllimport) HRESULT __stdcall  OleCreateStaticFromData( LPDATAOBJECT pSrcDataObj,  const IID * const iid,
                 DWORD renderopt,  LPFORMATETC pFormatEtc,
                 LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,
                 LPVOID * ppvObj);


extern __declspec(dllimport) HRESULT __stdcall  OleCreateLink( LPMONIKER pmkLinkSrc,  const IID * const riid,
             DWORD renderopt,  LPFORMATETC lpFormatEtc,
             LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,  LPVOID * ppvObj);

extern __declspec(dllimport) HRESULT __stdcall  OleCreateLinkEx( LPMONIKER pmkLinkSrc,  const IID * const riid,
             DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
             LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
             DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
             LPSTORAGE pStg,  LPVOID * ppvObj);

extern __declspec(dllimport) HRESULT __stdcall  OleCreateLinkToFile( LPCOLESTR lpszFileName,  const IID * const riid,
             DWORD renderopt,  LPFORMATETC lpFormatEtc,
             LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,  LPVOID * ppvObj);

extern __declspec(dllimport) HRESULT __stdcall  OleCreateLinkToFileEx( LPCOLESTR lpszFileName,  const IID * const riid,
             DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
             LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
             DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
             LPSTORAGE pStg,  LPVOID * ppvObj);

extern __declspec(dllimport) HRESULT __stdcall  OleCreateFromFile( const IID * const rclsid,  LPCOLESTR lpszFileName,  const IID * const riid,
             DWORD renderopt,  LPFORMATETC lpFormatEtc,
             LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,  LPVOID * ppvObj);

extern __declspec(dllimport) HRESULT __stdcall  OleCreateFromFileEx( const IID * const rclsid,  LPCOLESTR lpszFileName,  const IID * const riid,
             DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
             LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
             DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
             LPSTORAGE pStg,  LPVOID * ppvObj);

extern __declspec(dllimport) HRESULT __stdcall  OleLoad( LPSTORAGE pStg,  const IID * const riid,  LPOLECLIENTSITE pClientSite,
             LPVOID * ppvObj);

extern __declspec(dllimport) HRESULT __stdcall  OleSave( LPPERSISTSTORAGE pPS,  LPSTORAGE pStg,  BOOL fSameAsLoad);

extern __declspec(dllimport) HRESULT __stdcall  OleLoadFromStream(  LPSTREAM pStm,  const IID * const iidInterface,  LPVOID * ppvObj);
extern __declspec(dllimport) HRESULT __stdcall  OleSaveToStream(  LPPERSISTSTREAM pPStm,  LPSTREAM pStm );


extern __declspec(dllimport) HRESULT __stdcall  OleSetContainedObject( LPUNKNOWN pUnknown,  BOOL fContained);
extern __declspec(dllimport) HRESULT __stdcall  OleNoteObjectVisible( LPUNKNOWN pUnknown,  BOOL fVisible);




extern __declspec(dllimport) HRESULT __stdcall  RegisterDragDrop( HWND hwnd,  LPDROPTARGET pDropTarget);
extern __declspec(dllimport) HRESULT __stdcall  RevokeDragDrop( HWND hwnd);
extern __declspec(dllimport) HRESULT __stdcall  DoDragDrop( LPDATAOBJECT pDataObj,  LPDROPSOURCE pDropSource,
             DWORD dwOKEffects,  LPDWORD pdwEffect);



extern __declspec(dllimport) HRESULT __stdcall  OleSetClipboard( LPDATAOBJECT pDataObj);
extern __declspec(dllimport) HRESULT __stdcall  OleGetClipboard( LPDATAOBJECT * ppDataObj);
extern __declspec(dllimport) HRESULT __stdcall  OleFlushClipboard(void);
extern __declspec(dllimport) HRESULT __stdcall  OleIsCurrentClipboard( LPDATAOBJECT pDataObj);




extern __declspec(dllimport) HOLEMENU __stdcall   OleCreateMenuDescriptor ( HMENU hmenuCombined,
                                 LPOLEMENUGROUPWIDTHS lpMenuWidths);
extern __declspec(dllimport) HRESULT __stdcall              OleSetMenuDescriptor ( HOLEMENU holemenu,  HWND hwndFrame,
                                 HWND hwndActiveObject,
                                 LPOLEINPLACEFRAME lpFrame,
                                 LPOLEINPLACEACTIVEOBJECT lpActiveObj);
extern __declspec(dllimport) HRESULT __stdcall              OleDestroyMenuDescriptor ( HOLEMENU holemenu);

extern __declspec(dllimport) HRESULT __stdcall              OleTranslateAccelerator ( LPOLEINPLACEFRAME lpFrame,
                             LPOLEINPLACEFRAMEINFO lpFrameInfo,  LPMSG lpmsg);



extern __declspec(dllimport) HANDLE __stdcall OleDuplicateData ( HANDLE hSrc,  CLIPFORMAT cfFormat,
                         UINT uiFlags);

extern __declspec(dllimport) HRESULT __stdcall          OleDraw ( LPUNKNOWN pUnknown,  DWORD dwAspect,  HDC hdcDraw,
                     LPCRECT lprcBounds);

extern __declspec(dllimport) HRESULT __stdcall          OleRun( LPUNKNOWN pUnknown);
extern __declspec(dllimport) BOOL __stdcall   OleIsRunning( LPOLEOBJECT pObject);
extern __declspec(dllimport) HRESULT __stdcall          OleLockRunning( LPUNKNOWN pUnknown,  BOOL fLock,  BOOL fLastUnlockCloses);
extern __declspec(dllimport) void __stdcall   ReleaseStgMedium( LPSTGMEDIUM);
extern __declspec(dllimport) HRESULT __stdcall          CreateOleAdviseHolder( LPOLEADVISEHOLDER * ppOAHolder);

extern __declspec(dllimport) HRESULT __stdcall          OleCreateDefaultHandler( const IID * const clsid,  LPUNKNOWN pUnkOuter,
                     const IID * const riid,  LPVOID * lplpObj);

extern __declspec(dllimport) HRESULT __stdcall          OleCreateEmbeddingHelper( const IID * const clsid,  LPUNKNOWN pUnkOuter,
                     DWORD flags,  LPCLASSFACTORY pCF,
                     const IID * const riid,  LPVOID * lplpObj);

extern __declspec(dllimport) BOOL __stdcall   IsAccelerator( HACCEL hAccel,  int cAccelEntries,  LPMSG lpMsg,
                                         WORD * lpwCmd);


extern __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfFile( LPOLESTR lpszPath,  BOOL fUseFileAsLabel);

extern __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfClass( const IID * const rclsid,      LPOLESTR lpszLabel,
                                         BOOL fUseTypeAsLabel);

extern __declspec(dllimport) HGLOBAL __stdcall OleMetafilePictFromIconAndLabel( HICON hIcon,  LPOLESTR lpszLabel,
                                         LPOLESTR lpszSourceFile,  UINT iIconIndex);





extern __declspec(dllimport) HRESULT __stdcall                  OleRegGetUserType ( const IID * const clsid,  DWORD dwFormOfType,
                                         LPOLESTR * pszUserType);

extern __declspec(dllimport) HRESULT __stdcall                  OleRegGetMiscStatus     ( const IID * const clsid,  DWORD dwAspect,
                                         DWORD * pdwStatus);

extern __declspec(dllimport) HRESULT __stdcall                  OleRegEnumFormatEtc     ( const IID * const clsid,  DWORD dwDirection,
                                         LPENUMFORMATETC * ppenum);

extern __declspec(dllimport) HRESULT __stdcall                  OleRegEnumVerbs ( const IID * const clsid,  LPENUMOLEVERB * ppenum);


























typedef struct _OLESTREAM *  LPOLESTREAM;

typedef struct _OLESTREAMVTBL
{
    DWORD (__stdcall* Get)(LPOLESTREAM, void *, DWORD);
    DWORD (__stdcall* Put)(LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
typedef  OLESTREAMVTBL *  LPOLESTREAMVTBL;

typedef struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
} OLESTREAM;


extern __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorage
    ( LPOLESTREAM                lpolestream,
     LPSTORAGE                   pstg,
     const DVTARGETDEVICE *   ptd);

extern __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAM
    ( LPSTORAGE      pstg,
     LPOLESTREAM     lpolestream);



extern __declspec(dllimport) HRESULT __stdcall GetHGlobalFromILockBytes ( LPLOCKBYTES plkbyt,  HGLOBAL * phglobal);
extern __declspec(dllimport) HRESULT __stdcall CreateILockBytesOnHGlobal ( HGLOBAL hGlobal,  BOOL fDeleteOnRelease,
                                     LPLOCKBYTES * pplkbyt);

extern __declspec(dllimport) HRESULT __stdcall GetHGlobalFromStream ( LPSTREAM pstm,  HGLOBAL * phglobal);
extern __declspec(dllimport) HRESULT __stdcall CreateStreamOnHGlobal ( HGLOBAL hGlobal,  BOOL fDeleteOnRelease,
                                 LPSTREAM * ppstm);




extern __declspec(dllimport) HRESULT __stdcall OleDoAutoConvert( LPSTORAGE pStg,  LPCLSID pClsidNew);
extern __declspec(dllimport) HRESULT __stdcall OleGetAutoConvert( const IID * const clsidOld,  LPCLSID pClsidNew);
extern __declspec(dllimport) HRESULT __stdcall OleSetAutoConvert( const IID * const clsidOld,  const IID * const clsidNew);
extern __declspec(dllimport) HRESULT __stdcall GetConvertStg( LPSTORAGE pStg);
extern __declspec(dllimport) HRESULT __stdcall SetConvertStg( LPSTORAGE pStg,  BOOL fConvert);


extern __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAMEx
    ( LPSTORAGE          pstg,
                                    
      CLIPFORMAT         cfFormat,   
      LONG               lWidth,     
      LONG               lHeight,    
      DWORD              dwSize,     
      LPSTGMEDIUM        pmedium,    
      LPOLESTREAM        polestm);

extern __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorageEx
    ( LPOLESTREAM        polestm,
      LPSTORAGE          pstg,
                                    
      CLIPFORMAT *    pcfFormat,  
      LONG *          plwWidth,   
      LONG *          plHeight,   
      DWORD *         pdwSize,    
      LPSTGMEDIUM        pmedium);   



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ole2.h"
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ole2.h"











#line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ole2.h"






#line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\ole2.h"
#line 208 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 209 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 210 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"






















extern const GUID  IID_IPrintDialogCallback;






extern const GUID  IID_IPrintDialogServices;

#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"

#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\prsht.h"
























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\pshpack1.h"
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"













#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"


















#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"















typedef UINT_PTR (__stdcall *LPOFNHOOKPROC) (HWND, UINT, WPARAM, LPARAM);




#line 99 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"










typedef struct tagOFN_NT4A {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCSTR       lpstrFilter;
   LPSTR        lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPSTR        lpstrFile;
   DWORD        nMaxFile;
   LPSTR        lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCSTR       lpstrInitialDir;
   LPCSTR       lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCSTR       lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR       lpTemplateName;
} OPENFILENAME_NT4A, *LPOPENFILENAME_NT4A;
typedef struct tagOFN_NT4W {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCWSTR      lpstrFilter;
   LPWSTR       lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPWSTR       lpstrFile;
   DWORD        nMaxFile;
   LPWSTR       lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCWSTR      lpstrInitialDir;
   LPCWSTR      lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCWSTR      lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR      lpTemplateName;
} OPENFILENAME_NT4W, *LPOPENFILENAME_NT4W;




typedef OPENFILENAME_NT4A OPENFILENAME_NT4;
typedef LPOPENFILENAME_NT4A LPOPENFILENAME_NT4;
#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"

typedef struct tagOFNA {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCSTR       lpstrFilter;
   LPSTR        lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPSTR        lpstrFile;
   DWORD        nMaxFile;
   LPSTR        lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCSTR       lpstrInitialDir;
   LPCSTR       lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCSTR       lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR       lpTemplateName;








#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"
} OPENFILENAMEA, *LPOPENFILENAMEA;
typedef struct tagOFNW {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCWSTR      lpstrFilter;
   LPWSTR       lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPWSTR       lpstrFile;
   DWORD        nMaxFile;
   LPWSTR       lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCWSTR      lpstrInitialDir;
   LPCWSTR      lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCWSTR      lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR      lpTemplateName;








#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"
} OPENFILENAMEW, *LPOPENFILENAMEW;




typedef OPENFILENAMEA OPENFILENAME;
typedef LPOPENFILENAMEA LPOPENFILENAME;
#line 230 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"









#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"


__declspec(dllimport) BOOL  __stdcall GetOpenFileNameA(LPOPENFILENAMEA);
__declspec(dllimport) BOOL  __stdcall GetOpenFileNameW(LPOPENFILENAMEW);




#line 249 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"
__declspec(dllimport) BOOL  __stdcall GetSaveFileNameA(LPOPENFILENAMEA);
__declspec(dllimport) BOOL  __stdcall GetSaveFileNameW(LPOPENFILENAMEW);




#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"


__declspec(dllimport) short __stdcall GetFileTitleA(LPCSTR, LPSTR, WORD);
__declspec(dllimport) short __stdcall GetFileTitleW(LPCWSTR, LPWSTR, WORD);




#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"


























#line 292 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"



#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"




#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"















typedef UINT_PTR (__stdcall *LPCCHOOKPROC) (HWND, UINT, WPARAM, LPARAM);



typedef struct _OFNOTIFYA
{
        NMHDR           hdr;
        LPOPENFILENAMEA lpOFN;
        LPSTR           pszFile;        
} OFNOTIFYA, *LPOFNOTIFYA;

typedef struct _OFNOTIFYW
{
        NMHDR           hdr;
        LPOPENFILENAMEW lpOFN;
        LPWSTR          pszFile;        
} OFNOTIFYW, *LPOFNOTIFYW;




typedef OFNOTIFYA OFNOTIFY;
typedef LPOFNOTIFYA LPOFNOTIFY;
#line 340 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"



typedef struct _OFNOTIFYEXA
{
        NMHDR           hdr;
        LPOPENFILENAMEA lpOFN;
        LPVOID          psf;
        LPVOID          pidl;          
} OFNOTIFYEXA, *LPOFNOTIFYEXA;

typedef struct _OFNOTIFYEXW
{
        NMHDR           hdr;
        LPOPENFILENAMEW lpOFN;
        LPVOID          psf;
        LPVOID          pidl;          
} OFNOTIFYEXW, *LPOFNOTIFYEXW;




typedef OFNOTIFYEXA OFNOTIFYEX;
typedef LPOFNOTIFYEXA LPOFNOTIFYEX;
#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"

































#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"













#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"













#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"




























#line 456 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"


typedef struct tagCHOOSECOLORA {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HWND         hInstance;
   COLORREF     rgbResult;
   COLORREF*    lpCustColors;
   DWORD        Flags;
   LPARAM       lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCSTR       lpTemplateName;
} CHOOSECOLORA, *LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HWND         hInstance;
   COLORREF     rgbResult;
   COLORREF*    lpCustColors;
   DWORD        Flags;
   LPARAM       lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCWSTR      lpTemplateName;
} CHOOSECOLORW, *LPCHOOSECOLORW;




typedef CHOOSECOLORA CHOOSECOLOR;
typedef LPCHOOSECOLORA LPCHOOSECOLOR;
#line 487 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"
































#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"

__declspec(dllimport) BOOL __stdcall ChooseColorA(LPCHOOSECOLORA);
__declspec(dllimport) BOOL __stdcall ChooseColorW(LPCHOOSECOLORW);




#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"











#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"

typedef UINT_PTR (__stdcall *LPFRHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagFINDREPLACEA {
   DWORD        lStructSize;        
   HWND         hwndOwner;          
   HINSTANCE    hInstance;          
                                    
   DWORD        Flags;              
   LPSTR        lpstrFindWhat;      
   LPSTR        lpstrReplaceWith;   
   WORD         wFindWhatLen;       
   WORD         wReplaceWithLen;    
   LPARAM       lCustData;          
   LPFRHOOKPROC lpfnHook;           
   LPCSTR       lpTemplateName;     
} FINDREPLACEA, *LPFINDREPLACEA;
typedef struct tagFINDREPLACEW {
   DWORD        lStructSize;        
   HWND         hwndOwner;          
   HINSTANCE    hInstance;          
                                    
   DWORD        Flags;              
   LPWSTR       lpstrFindWhat;      
   LPWSTR       lpstrReplaceWith;   
   WORD         wFindWhatLen;       
   WORD         wReplaceWithLen;    
   LPARAM       lCustData;          
   LPFRHOOKPROC lpfnHook;           
   LPCWSTR      lpTemplateName;     
} FINDREPLACEW, *LPFINDREPLACEW;




typedef FINDREPLACEA FINDREPLACE;
typedef LPFINDREPLACEA LPFINDREPLACE;
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"























__declspec(dllimport) HWND __stdcall FindTextA(LPFINDREPLACEA);
__declspec(dllimport) HWND __stdcall FindTextW(LPFINDREPLACEW);




#line 608 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"

__declspec(dllimport) HWND __stdcall ReplaceTextA(LPFINDREPLACEA);
__declspec(dllimport) HWND __stdcall ReplaceTextW(LPFINDREPLACEW);




#line 616 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"








#line 625 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"

typedef UINT_PTR (__stdcall *LPCFHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagCHOOSEFONTA {
   DWORD           lStructSize;
   HWND            hwndOwner;          
   HDC             hDC;                
   LPLOGFONTA      lpLogFont;          
   INT             iPointSize;         
   DWORD           Flags;              
   COLORREF        rgbColors;          
   LPARAM          lCustData;          
   LPCFHOOKPROC    lpfnHook;           
   LPCSTR          lpTemplateName;     
   HINSTANCE       hInstance;          
                                       
   LPSTR           lpszStyle;          
                                       
   WORD            nFontType;          
                                       
                                       
   WORD            ___MISSING_ALIGNMENT__;
   INT             nSizeMin;           
   INT             nSizeMax;           
                                       
} CHOOSEFONTA, *LPCHOOSEFONTA;
typedef struct tagCHOOSEFONTW {
   DWORD           lStructSize;
   HWND            hwndOwner;          
   HDC             hDC;                
   LPLOGFONTW      lpLogFont;          
   INT             iPointSize;         
   DWORD           Flags;              
   COLORREF        rgbColors;          
   LPARAM          lCustData;          
   LPCFHOOKPROC    lpfnHook;           
   LPCWSTR         lpTemplateName;     
   HINSTANCE       hInstance;          
                                       
   LPWSTR          lpszStyle;          
                                       
   WORD            nFontType;          
                                       
                                       
   WORD            ___MISSING_ALIGNMENT__;
   INT             nSizeMin;           
   INT             nSizeMax;           
                                       
} CHOOSEFONTW, *LPCHOOSEFONTW;




typedef CHOOSEFONTA CHOOSEFONT;
typedef LPCHOOSEFONTA LPCHOOSEFONT;
#line 681 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"

__declspec(dllimport) BOOL __stdcall ChooseFontA(LPCHOOSEFONTA);
__declspec(dllimport) BOOL __stdcall ChooseFontW(LPCHOOSEFONTW);




#line 689 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"















#line 705 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"
















#line 722 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"






























































#line 785 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"







typedef UINT_PTR (__stdcall *LPPRINTHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (__stdcall *LPSETUPHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagPDA {
   DWORD            lStructSize;
   HWND             hwndOwner;
   HGLOBAL          hDevMode;
   HGLOBAL          hDevNames;
   HDC              hDC;
   DWORD            Flags;
   WORD             nFromPage;
   WORD             nToPage;
   WORD             nMinPage;
   WORD             nMaxPage;
   WORD             nCopies;
   HINSTANCE        hInstance;
   LPARAM           lCustData;
   LPPRINTHOOKPROC  lpfnPrintHook;
   LPSETUPHOOKPROC  lpfnSetupHook;
   LPCSTR           lpPrintTemplateName;
   LPCSTR           lpSetupTemplateName;
   HGLOBAL          hPrintTemplate;
   HGLOBAL          hSetupTemplate;
} PRINTDLGA, *LPPRINTDLGA;
typedef struct tagPDW {
   DWORD            lStructSize;
   HWND             hwndOwner;
   HGLOBAL          hDevMode;
   HGLOBAL          hDevNames;
   HDC              hDC;
   DWORD            Flags;
   WORD             nFromPage;
   WORD             nToPage;
   WORD             nMinPage;
   WORD             nMaxPage;
   WORD             nCopies;
   HINSTANCE        hInstance;
   LPARAM           lCustData;
   LPPRINTHOOKPROC  lpfnPrintHook;
   LPSETUPHOOKPROC  lpfnSetupHook;
   LPCWSTR          lpPrintTemplateName;
   LPCWSTR          lpSetupTemplateName;
   HGLOBAL          hPrintTemplate;
   HGLOBAL          hSetupTemplate;
} PRINTDLGW, *LPPRINTDLGW;




typedef PRINTDLGA PRINTDLG;
typedef LPPRINTDLGA LPPRINTDLG;
#line 844 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"

__declspec(dllimport) BOOL __stdcall PrintDlgA(LPPRINTDLGA);
__declspec(dllimport) BOOL __stdcall PrintDlgW(LPPRINTDLGW);




#line 852 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"






































typedef struct IPrintDialogCallback { struct IPrintDialogCallbackVtbl * lpVtbl; } IPrintDialogCallback; typedef struct IPrintDialogCallbackVtbl IPrintDialogCallbackVtbl; struct IPrintDialogCallbackVtbl
{
    
    HRESULT (__stdcall * QueryInterface) (IPrintDialogCallback * This, const IID * const riid, LPVOID *ppvObj) ;
    ULONG (__stdcall * AddRef) (IPrintDialogCallback * This) ;
    ULONG (__stdcall * Release) (IPrintDialogCallback * This) ;

    
    HRESULT (__stdcall * InitDone) (IPrintDialogCallback * This) ;
    HRESULT (__stdcall * SelectionChange) (IPrintDialogCallback * This) ;
    HRESULT (__stdcall * HandleMessage) (IPrintDialogCallback * This, HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *pResult) ;
};




















typedef struct IPrintDialogServices { struct IPrintDialogServicesVtbl * lpVtbl; } IPrintDialogServices; typedef struct IPrintDialogServicesVtbl IPrintDialogServicesVtbl; struct IPrintDialogServicesVtbl
{
    
    HRESULT (__stdcall * QueryInterface) (IPrintDialogServices * This, const IID * const riid, LPVOID *ppvObj) ;
    ULONG (__stdcall * AddRef) (IPrintDialogServices * This) ;
    ULONG (__stdcall * Release) (IPrintDialogServices * This) ;

    
    HRESULT (__stdcall * GetCurrentDevMode) (IPrintDialogServices * This, LPDEVMODE pDevMode, UINT *pcbSize) ;
    HRESULT (__stdcall * GetCurrentPrinterName) (IPrintDialogServices * This, LPTSTR pPrinterName, UINT *pcchSize) ;
    HRESULT (__stdcall * GetCurrentPortName) (IPrintDialogServices * This, LPTSTR pPortName, UINT *pcchSize) ;
};





typedef struct tagPRINTPAGERANGE {
   DWORD  nFromPage;
   DWORD  nToPage;
} PRINTPAGERANGE, *LPPRINTPAGERANGE;





typedef struct tagPDEXA {
   DWORD                 lStructSize;          
   HWND                  hwndOwner;            
   HGLOBAL               hDevMode;             
   HGLOBAL               hDevNames;            
   HDC                   hDC;                  
   DWORD                 Flags;                
   DWORD                 Flags2;               
   DWORD                 ExclusionFlags;       
   DWORD                 nPageRanges;          
   DWORD                 nMaxPageRanges;       
   LPPRINTPAGERANGE      lpPageRanges;         
   DWORD                 nMinPage;             
   DWORD                 nMaxPage;             
   DWORD                 nCopies;              
   HINSTANCE             hInstance;            
   LPCSTR                lpPrintTemplateName;  
   LPUNKNOWN             lpCallback;           
   DWORD                 nPropertyPages;       
   HPROPSHEETPAGE       *lphPropertyPages;     
   DWORD                 nStartPage;           
   DWORD                 dwResultAction;       
} PRINTDLGEXA, *LPPRINTDLGEXA;



typedef struct tagPDEXW {
   DWORD                 lStructSize;          
   HWND                  hwndOwner;            
   HGLOBAL               hDevMode;             
   HGLOBAL               hDevNames;            
   HDC                   hDC;                  
   DWORD                 Flags;                
   DWORD                 Flags2;               
   DWORD                 ExclusionFlags;       
   DWORD                 nPageRanges;          
   DWORD                 nMaxPageRanges;       
   LPPRINTPAGERANGE      lpPageRanges;         
   DWORD                 nMinPage;             
   DWORD                 nMaxPage;             
   DWORD                 nCopies;              
   HINSTANCE             hInstance;            
   LPCWSTR               lpPrintTemplateName;  
   LPUNKNOWN             lpCallback;           
   DWORD                 nPropertyPages;       
   HPROPSHEETPAGE       *lphPropertyPages;     
   DWORD                 nStartPage;           
   DWORD                 dwResultAction;       
} PRINTDLGEXW, *LPPRINTDLGEXW;




typedef PRINTDLGEXA PRINTDLGEX;
typedef LPPRINTDLGEXA LPPRINTDLGEX;
#line 1004 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"



__declspec(dllimport) HRESULT __stdcall PrintDlgExA(LPPRINTDLGEXA);
__declspec(dllimport) HRESULT __stdcall PrintDlgExW(LPPRINTDLGEXW);




#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"

#line 1016 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"

#line 1018 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"

































#line 1052 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"























#line 1076 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"




typedef struct tagDEVNAMES {
   WORD wDriverOffset;
   WORD wDeviceOffset;
   WORD wOutputOffset;
   WORD wDefault;
} DEVNAMES, *LPDEVNAMES;




__declspec(dllimport) DWORD __stdcall CommDlgExtendedError(void);










typedef UINT_PTR (__stdcall* LPPAGEPAINTHOOK)( HWND, UINT, WPARAM, LPARAM );
typedef UINT_PTR (__stdcall* LPPAGESETUPHOOK)( HWND, UINT, WPARAM, LPARAM );

typedef struct tagPSDA
{
    DWORD           lStructSize;
    HWND            hwndOwner;
    HGLOBAL         hDevMode;
    HGLOBAL         hDevNames;
    DWORD           Flags;
    POINT           ptPaperSize;
    RECT            rtMinMargin;
    RECT            rtMargin;
    HINSTANCE       hInstance;
    LPARAM          lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCSTR          lpPageSetupTemplateName;
    HGLOBAL         hPageSetupTemplate;
} PAGESETUPDLGA, * LPPAGESETUPDLGA;
typedef struct tagPSDW
{
    DWORD           lStructSize;
    HWND            hwndOwner;
    HGLOBAL         hDevMode;
    HGLOBAL         hDevNames;
    DWORD           Flags;
    POINT           ptPaperSize;
    RECT            rtMinMargin;
    RECT            rtMargin;
    HINSTANCE       hInstance;
    LPARAM          lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCWSTR         lpPageSetupTemplateName;
    HGLOBAL         hPageSetupTemplate;
} PAGESETUPDLGW, * LPPAGESETUPDLGW;




typedef PAGESETUPDLGA PAGESETUPDLG;
typedef LPPAGESETUPDLGA LPPAGESETUPDLG;
#line 1145 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"

__declspec(dllimport) BOOL __stdcall PageSetupDlgA( LPPAGESETUPDLGA );
__declspec(dllimport) BOOL __stdcall PageSetupDlgW( LPPAGESETUPDLGW );




#line 1153 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"





















#line 1175 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"














































































































































































































































































































































































































































































































































































































































































































































































































































































#line 2022 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"
#line 2023 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"








#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\poppack.h"
#line 2032 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"
#line 2033 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"
#line 2034 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"
#line 2035 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\commdlg.h"


#line 211 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"





















































#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"




#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"

#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"























#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"


__inline
PUWSTR
static
__declspec(deprecated)
ua_wcscpy(
     PUWSTR  Destination,
     PCUWSTR Source
    )
{
#pragma warning(push)
#pragma warning(disable:4996)
    return wcscpy(Destination, Source);
#pragma warning(pop)
}
































































































































































































































































































































































#line 457 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"






































































#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"




































#line 565 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"











































#line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"



#line 613 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"














#line 628 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"










#line 639 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"

#line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"






#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\stralign.h"

    

                                         



                                                      
#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"












#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"






























#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"








































#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"


















































































































typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR       lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;



typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR      lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;




typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"




typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE          = 0,
        SC_ACTION_RESTART       = 1,
        SC_ACTION_REBOOT        = 2,
        SC_ACTION_RUN_COMMAND   = 3
} SC_ACTION_TYPE;

typedef struct _SC_ACTION {
    SC_ACTION_TYPE  Type;
    DWORD           Delay;
} SC_ACTION, *LPSC_ACTION;

typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD       dwResetPeriod;
    LPSTR       lpRebootMsg;
    LPSTR       lpCommand;
    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD       dwResetPeriod;
    LPWSTR      lpRebootMsg;
    LPWSTR      lpCommand;
    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;




typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"






struct SC_HANDLE__ { int unused; }; typedef struct SC_HANDLE__ *SC_HANDLE;
typedef SC_HANDLE   *LPSC_HANDLE;

struct SERVICE_STATUS_HANDLE__ { int unused; }; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;





typedef enum _SC_STATUS_TYPE {
        SC_STATUS_PROCESS_INFO      = 0
} SC_STATUS_TYPE;




typedef enum _SC_ENUM_TYPE {
        SC_ENUM_PROCESS_INFO        = 0
} SC_ENUM_TYPE;






typedef struct _SERVICE_STATUS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;

typedef struct _SERVICE_STATUS_PROCESS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
    DWORD   dwProcessId;
    DWORD   dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;






typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR             lpServiceName;
    LPSTR             lpDisplayName;
    SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR            lpServiceName;
    LPWSTR            lpDisplayName;
    SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;




typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"

typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR                     lpServiceName;
    LPSTR                     lpDisplayName;
    SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR                    lpServiceName;
    LPWSTR                    lpDisplayName;
    SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;




typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
#line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"





typedef LPVOID  SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD   fIsLocked;
    LPSTR   lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD   fIsLocked;
    LPWSTR  lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;




typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"







typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPSTR   lpBinaryPathName;
    LPSTR   lpLoadOrderGroup;
    DWORD   dwTagId;
    LPSTR   lpDependencies;
    LPSTR   lpServiceStartName;
    LPSTR   lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPWSTR  lpBinaryPathName;
    LPWSTR  lpLoadOrderGroup;
    DWORD   dwTagId;
    LPWSTR  lpDependencies;
    LPWSTR  lpServiceStartName;
    LPWSTR  lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;




typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
#line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"







typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD   dwNumServicesArgs,
    LPWSTR  *lpServiceArgVectors
    );

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD   dwNumServicesArgs,
    LPSTR   *lpServiceArgVectors
    );





#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"






typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR                       lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA    lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR                      lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW    lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;




typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"





typedef void (__stdcall *LPHANDLER_FUNCTION)(
    DWORD    dwControl
    );

typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)(
    DWORD    dwControl,
    DWORD    dwEventType,
    LPVOID   lpEventData,
    LPVOID   lpContext
    );






__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigA(
                SC_HANDLE    hService,
                DWORD        dwServiceType,
                DWORD        dwStartType,
                DWORD        dwErrorControl,
              LPCSTR     lpBinaryPathName,
              LPCSTR     lpLoadOrderGroup,
             LPDWORD      lpdwTagId,
              LPCSTR     lpDependencies,
              LPCSTR     lpServiceStartName,
              LPCSTR     lpPassword,
              LPCSTR     lpDisplayName
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigW(
                SC_HANDLE    hService,
                DWORD        dwServiceType,
                DWORD        dwStartType,
                DWORD        dwErrorControl,
              LPCWSTR     lpBinaryPathName,
              LPCWSTR     lpLoadOrderGroup,
             LPDWORD      lpdwTagId,
              LPCWSTR     lpDependencies,
              LPCWSTR     lpServiceStartName,
              LPCWSTR     lpPassword,
              LPCWSTR     lpDisplayName
    );




#line 500 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2A(
                SC_HANDLE    hService,
                DWORD        dwInfoLevel,
              LPVOID       lpInfo
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2W(
                SC_HANDLE    hService,
                DWORD        dwInfoLevel,
              LPVOID       lpInfo
    );




#line 522 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
CloseServiceHandle(
                SC_HANDLE   hSCObject
    );

__declspec(dllimport)
BOOL
__stdcall
ControlService(
                SC_HANDLE           hService,
                DWORD               dwControl,
               LPSERVICE_STATUS    lpServiceStatus
    );


__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceA(
                SC_HANDLE    hSCManager,
                LPCSTR     lpServiceName,
              LPCSTR     lpDisplayName,
                DWORD        dwDesiredAccess,
                DWORD        dwServiceType,
                DWORD        dwStartType,
                DWORD        dwErrorControl,
              LPCSTR     lpBinaryPathName,
              LPCSTR     lpLoadOrderGroup,
             LPDWORD      lpdwTagId,
              LPCSTR     lpDependencies,
              LPCSTR     lpServiceStartName,
              LPCSTR     lpPassword
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceW(
                SC_HANDLE    hSCManager,
                LPCWSTR     lpServiceName,
              LPCWSTR     lpDisplayName,
                DWORD        dwDesiredAccess,
                DWORD        dwServiceType,
                DWORD        dwStartType,
                DWORD        dwErrorControl,
              LPCWSTR     lpBinaryPathName,
              LPCWSTR     lpLoadOrderGroup,
             LPDWORD      lpdwTagId,
              LPCWSTR     lpDependencies,
              LPCWSTR     lpServiceStartName,
              LPCWSTR     lpPassword
    );




#line 582 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteService(
                SC_HANDLE   hService
    );


__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesA(
                    SC_HANDLE               hService,
                    DWORD                   dwServiceState,
               
                    LPENUM_SERVICE_STATUSA  lpServices,
                    DWORD                   cbBufSize,
                   LPDWORD                 pcbBytesNeeded,
                   LPDWORD                 lpServicesReturned
    );

__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesW(
                    SC_HANDLE               hService,
                    DWORD                   dwServiceState,
               
                    LPENUM_SERVICE_STATUSW  lpServices,
                    DWORD                   cbBufSize,
                   LPDWORD                 pcbBytesNeeded,
                   LPDWORD                 lpServicesReturned
    );




#line 621 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusA(
                    SC_HANDLE               hSCManager,
                    DWORD                   dwServiceType,
                    DWORD                   dwServiceState,
          
                    LPENUM_SERVICE_STATUSA  lpServices,
                    DWORD                   cbBufSize,
                   LPDWORD                 pcbBytesNeeded,
                   LPDWORD                 lpServicesReturned,
               LPDWORD                 lpResumeHandle
    );

__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusW(
                    SC_HANDLE               hSCManager,
                    DWORD                   dwServiceType,
                    DWORD                   dwServiceState,
          
                    LPENUM_SERVICE_STATUSW  lpServices,
                    DWORD                   cbBufSize,
                   LPDWORD                 pcbBytesNeeded,
                   LPDWORD                 lpServicesReturned,
               LPDWORD                 lpResumeHandle
    );




#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExA(
                    SC_HANDLE               hSCManager,
                    SC_ENUM_TYPE            InfoLevel,
                    DWORD                   dwServiceType,
                    DWORD                   dwServiceState,
           
                    LPBYTE                  lpServices,
                    DWORD                   cbBufSize,
                   LPDWORD                 pcbBytesNeeded,
                   LPDWORD                 lpServicesReturned,
               LPDWORD                 lpResumeHandle,
                  LPCSTR                pszGroupName
    );

__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExW(
                    SC_HANDLE               hSCManager,
                    SC_ENUM_TYPE            InfoLevel,
                    DWORD                   dwServiceType,
                    DWORD                   dwServiceState,
           
                    LPBYTE                  lpServices,
                    DWORD                   cbBufSize,
                   LPDWORD                 pcbBytesNeeded,
                   LPDWORD                 lpServicesReturned,
               LPDWORD                 lpResumeHandle,
                  LPCWSTR                pszGroupName
    );




#line 697 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameA(
                    SC_HANDLE               hSCManager,
                    LPCSTR                lpDisplayName,
          
                    LPSTR                 lpServiceName,
                 LPDWORD                 lpcchBuffer
    );

__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameW(
                    SC_HANDLE               hSCManager,
                    LPCWSTR                lpDisplayName,
          
                    LPWSTR                 lpServiceName,
                 LPDWORD                 lpcchBuffer
    );




#line 725 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameA(
                    SC_HANDLE               hSCManager,
                    LPCSTR                lpServiceName,
           
                    LPSTR                 lpDisplayName,
                 LPDWORD                 lpcchBuffer
    );

__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameW(
                    SC_HANDLE               hSCManager,
                    LPCWSTR                lpServiceName,
           
                    LPWSTR                 lpDisplayName,
                 LPDWORD                 lpcchBuffer
    );




#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"

__declspec(dllimport)
SC_LOCK
__stdcall
LockServiceDatabase(
                    SC_HANDLE               hSCManager
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyBootConfigStatus(
                    BOOL                    BootAcceptable
    );


__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerA(
                  LPCSTR                lpMachineName,
                  LPCSTR                lpDatabaseName,
                    DWORD                   dwDesiredAccess
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerW(
                  LPCWSTR                lpMachineName,
                  LPCWSTR                lpDatabaseName,
                    DWORD                   dwDesiredAccess
    );




#line 791 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"


__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceA(
                    SC_HANDLE               hSCManager,
                    LPCSTR                lpServiceName,
                    DWORD                   dwDesiredAccess
    );

__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceW(
                    SC_HANDLE               hSCManager,
                    LPCWSTR                lpServiceName,
                    DWORD                   dwDesiredAccess
    );




#line 815 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigA(
                    SC_HANDLE               hService,
                
                    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
                    DWORD                   cbBufSize,
                   LPDWORD                 pcbBytesNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigW(
                    SC_HANDLE               hService,
                
                    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
                    DWORD                   cbBufSize,
                   LPDWORD                 pcbBytesNeeded
    );




#line 843 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2A(
                    SC_HANDLE               hService,
                    DWORD                   dwInfoLevel,
           
                    LPBYTE                  lpBuffer,
                    DWORD                   cbBufSize,
                   LPDWORD                 pcbBytesNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2W(
                    SC_HANDLE               hService,
                    DWORD                   dwInfoLevel,
           
                    LPBYTE                  lpBuffer,
                    DWORD                   cbBufSize,
                   LPDWORD                 pcbBytesNeeded
    );




#line 873 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusA(
                    SC_HANDLE                       hSCManager,
           
                    LPQUERY_SERVICE_LOCK_STATUSA    lpLockStatus,
                    DWORD                           cbBufSize,
                   LPDWORD                         pcbBytesNeeded
    );

__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusW(
                    SC_HANDLE                       hSCManager,
           
                    LPQUERY_SERVICE_LOCK_STATUSW    lpLockStatus,
                    DWORD                           cbBufSize,
                   LPDWORD                         pcbBytesNeeded
    );




#line 901 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
QueryServiceObjectSecurity(
                    SC_HANDLE               hService,
                    SECURITY_INFORMATION    dwSecurityInformation,
           
                    PSECURITY_DESCRIPTOR    lpSecurityDescriptor,
                    DWORD                   cbBufSize,
                   LPDWORD                 pcbBytesNeeded
    );


__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatus(
                    SC_HANDLE           hService,
                   LPSERVICE_STATUS    lpServiceStatus
    );


__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatusEx(
                    SC_HANDLE           hService,
                    SC_STATUS_TYPE      InfoLevel,
           
                    LPBYTE              lpBuffer,
                    DWORD               cbBufSize,
                   LPDWORD             pcbBytesNeeded
    );


__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
            LPCSTR                    lpServiceName,
              
            LPHANDLER_FUNCTION          lpHandlerProc
    );

__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
            LPCWSTR                    lpServiceName,
              
            LPHANDLER_FUNCTION          lpHandlerProc
    );




#line 960 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"


__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExA(
            LPCSTR                    lpServiceName,
            
            LPHANDLER_FUNCTION_EX       lpHandlerProc,
           LPVOID                     lpContext
    );

__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExW(
            LPCWSTR                    lpServiceName,
            
            LPHANDLER_FUNCTION_EX       lpHandlerProc,
           LPVOID                     lpContext
    );




#line 986 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
SetServiceObjectSecurity(
                SC_HANDLE               hService,
                SECURITY_INFORMATION    dwSecurityInformation,
                PSECURITY_DESCRIPTOR    lpSecurityDescriptor
    );

__declspec(dllimport)
BOOL
__stdcall
SetServiceStatus(
                SERVICE_STATUS_HANDLE   hServiceStatus,
                LPSERVICE_STATUS        lpServiceStatus
    );

__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherA(
         const  SERVICE_TABLE_ENTRYA    *lpServiceStartTable
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherW(
         const  SERVICE_TABLE_ENTRYW    *lpServiceStartTable
    );




#line 1021 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
StartServiceA(
                    SC_HANDLE            hService,
                    DWORD                dwNumServiceArgs,
                   
                    LPCSTR             *lpServiceArgVectors
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceW(
                    SC_HANDLE            hService,
                    DWORD                dwNumServiceArgs,
                   
                    LPCWSTR             *lpServiceArgVectors
    );




#line 1046 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
UnlockServiceDatabase(
                    SC_LOCK             ScLock
    );






#line 1060 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\winsvc.h"

#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mcx.h"












#pragma once
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mcx.h"

typedef struct _MODEMDEVCAPS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwModemProviderVersion;
    DWORD   dwModemManufacturerOffset;
    DWORD   dwModemManufacturerSize;
    DWORD   dwModemModelOffset;
    DWORD   dwModemModelSize;
    DWORD   dwModemVersionOffset;
    DWORD   dwModemVersionSize;

    
    DWORD   dwDialOptions;          
    DWORD   dwCallSetupFailTimer;   
    DWORD   dwInactivityTimeout;    
    DWORD   dwSpeakerVolume;        
    DWORD   dwSpeakerMode;          
    DWORD   dwModemOptions;         
    DWORD   dwMaxDTERate;           
    DWORD   dwMaxDCERate;           

    
    BYTE    abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwCallSetupFailTimer;       
    DWORD   dwInactivityTimeout;        
    DWORD   dwSpeakerVolume;            
    DWORD   dwSpeakerMode;              
    DWORD   dwPreferredModemOptions;    

    
    DWORD   dwNegotiatedModemOptions;   
    DWORD   dwNegotiatedDCERate;        

    
    BYTE    abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;

















































































































































































































































































































































































































































































































































































































































































#line 723 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\mcx.h"
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"



















struct HIMC__ { int unused; }; typedef struct HIMC__ *HIMC;
struct HIMCC__ { int unused; }; typedef struct HIMCC__ *HIMCC;



#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

typedef HKL   *LPHKL;
typedef UINT  *LPUINT;

typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM,  *NPCOMPOSITIONFORM,  *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM,  *NPCANDIDATEFORM,  *LPCANDIDATEFORM;


typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST,  *NPCANDIDATELIST,  *LPCANDIDATELIST;

typedef struct tagREGISTERWORDA {
    LPSTR   lpReading;
    LPSTR   lpWord;
} REGISTERWORDA, *PREGISTERWORDA,  *NPREGISTERWORDA,  *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR  lpReading;
    LPWSTR  lpWord;
} REGISTERWORDW, *PREGISTERWORDW,  *NPREGISTERWORDW,  *LPREGISTERWORDW;






typedef REGISTERWORDA REGISTERWORD;
typedef PREGISTERWORDA PREGISTERWORD;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef LPREGISTERWORDA LPREGISTERWORD;
#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"



typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
} RECONVERTSTRING, *PRECONVERTSTRING,  *NPRECONVERTSTRING,  *LPRECONVERTSTRING;

#line 89 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"



typedef struct tagSTYLEBUFA {
    DWORD       dwStyle;
    CHAR        szDescription[32];
} STYLEBUFA, *PSTYLEBUFA,  *NPSTYLEBUFA,  *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD       dwStyle;
    WCHAR       szDescription[32];
} STYLEBUFW, *PSTYLEBUFW,  *NPSTYLEBUFW,  *LPSTYLEBUFW;






typedef STYLEBUFA STYLEBUF;
typedef PSTYLEBUFA PSTYLEBUF;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"






typedef struct tagIMEMENUITEMINFOA {
    UINT        cbSize;
    UINT        fType;
    UINT        fState;
    UINT        wID;
    HBITMAP     hbmpChecked;
    HBITMAP     hbmpUnchecked;
    DWORD       dwItemData;
    CHAR        szString[80];
    HBITMAP     hbmpItem;
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA,  *NPIMEMENUITEMINFOA,  *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
    UINT        cbSize;
    UINT        fType;
    UINT        fState;
    UINT        wID;
    HBITMAP     hbmpChecked;
    HBITMAP     hbmpUnchecked;
    DWORD       dwItemData;
    WCHAR       szString[80];
    HBITMAP     hbmpItem;
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW,  *NPIMEMENUITEMINFOW,  *LPIMEMENUITEMINFOW;






typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

typedef struct tagIMECHARPOSITION {
    DWORD       dwSize;
    DWORD       dwCharPos;
    POINT       pt;
    UINT        cLineHeight;
    RECT        rcDocument;
} IMECHARPOSITION, *PIMECHARPOSITION,  *NPIMECHARPOSITION,  *LPIMECHARPOSITION;

typedef BOOL    (__stdcall* IMCENUMPROC)(HIMC, LPARAM);

#line 162 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"





HKL  __stdcall ImmInstallIMEA( LPCSTR lpszIMEFileName,  LPCSTR lpszLayoutText);
HKL  __stdcall ImmInstallIMEW( LPCWSTR lpszIMEFileName,  LPCWSTR lpszLayoutText);




#line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

HWND __stdcall ImmGetDefaultIMEWnd( HWND);

UINT __stdcall ImmGetDescriptionA( HKL,  LPSTR,  UINT uBufLen);
UINT __stdcall ImmGetDescriptionW( HKL,  LPWSTR,  UINT uBufLen);




#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

UINT __stdcall ImmGetIMEFileNameA( HKL,  LPSTR,  UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW( HKL,  LPWSTR,  UINT uBufLen);




#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

DWORD __stdcall ImmGetProperty( HKL,  DWORD);

BOOL __stdcall ImmIsIME( HKL);

BOOL __stdcall ImmSimulateHotKey( HWND,  DWORD);

HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext( HIMC);
HIMC __stdcall ImmGetContext( HWND);
BOOL __stdcall ImmReleaseContext( HWND,  HIMC);
HIMC __stdcall ImmAssociateContext( HWND,  HIMC);

BOOL __stdcall ImmAssociateContextEx( HWND,  HIMC,  DWORD);
#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

LONG  __stdcall ImmGetCompositionStringA( HIMC,  DWORD,  LPVOID,  DWORD);
LONG  __stdcall ImmGetCompositionStringW( HIMC,  DWORD,  LPVOID,  DWORD);




#line 215 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

BOOL  __stdcall ImmSetCompositionStringA( HIMC,  DWORD dwIndex,  LPVOID lpComp,  DWORD,  LPVOID lpRead,  DWORD);
BOOL  __stdcall ImmSetCompositionStringW( HIMC,  DWORD dwIndex,  LPVOID lpComp,  DWORD,  LPVOID lpRead,  DWORD);




#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

DWORD __stdcall ImmGetCandidateListCountA( HIMC,  LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW( HIMC,  LPDWORD lpdwListCount);




#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

DWORD __stdcall ImmGetCandidateListA( HIMC,  DWORD deIndex,  LPCANDIDATELIST,  DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW( HIMC,  DWORD deIndex,  LPCANDIDATELIST,  DWORD dwBufLen);




#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

DWORD __stdcall ImmGetGuideLineA( HIMC,  DWORD dwIndex,  LPSTR,  DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW( HIMC,  DWORD dwIndex,  LPWSTR,  DWORD dwBufLen);




#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

BOOL __stdcall ImmGetConversionStatus( HIMC,  LPDWORD,  LPDWORD);
BOOL __stdcall ImmSetConversionStatus( HIMC,  DWORD,  DWORD);
BOOL __stdcall ImmGetOpenStatus( HIMC);
BOOL __stdcall ImmSetOpenStatus( HIMC,  BOOL);


BOOL __stdcall ImmGetCompositionFontA( HIMC,  LPLOGFONTA);
BOOL __stdcall ImmGetCompositionFontW( HIMC,  LPLOGFONTW);




#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

BOOL __stdcall ImmSetCompositionFontA( HIMC,  LPLOGFONTA);
BOOL __stdcall ImmSetCompositionFontW( HIMC,  LPLOGFONTW);




#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"
#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

BOOL    __stdcall ImmConfigureIMEA( HKL,  HWND,  DWORD,  LPVOID);
BOOL    __stdcall ImmConfigureIMEW( HKL,  HWND,  DWORD,  LPVOID);




#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

LRESULT __stdcall ImmEscapeA( HKL,  HIMC,  UINT,  LPVOID);
LRESULT __stdcall ImmEscapeW( HKL,  HIMC,  UINT,  LPVOID);




#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

DWORD   __stdcall ImmGetConversionListA( HKL,  HIMC,  LPCSTR,  LPCANDIDATELIST,  DWORD dwBufLen,  UINT uFlag);
DWORD   __stdcall ImmGetConversionListW( HKL,  HIMC,  LPCWSTR,  LPCANDIDATELIST,  DWORD dwBufLen,  UINT uFlag);




#line 294 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

BOOL    __stdcall ImmNotifyIME( HIMC,  DWORD dwAction,  DWORD dwIndex,  DWORD dwValue);

BOOL __stdcall ImmGetStatusWindowPos( HIMC,  LPPOINT);
BOOL __stdcall ImmSetStatusWindowPos( HIMC,  LPPOINT);
BOOL __stdcall ImmGetCompositionWindow( HIMC,  LPCOMPOSITIONFORM);
BOOL __stdcall ImmSetCompositionWindow( HIMC,  LPCOMPOSITIONFORM);
BOOL __stdcall ImmGetCandidateWindow( HIMC,  DWORD,  LPCANDIDATEFORM);
BOOL __stdcall ImmSetCandidateWindow( HIMC,  LPCANDIDATEFORM);

BOOL __stdcall ImmIsUIMessageA( HWND,  UINT,  WPARAM,  LPARAM);
BOOL __stdcall ImmIsUIMessageW( HWND,  UINT,  WPARAM,  LPARAM);




#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"


UINT __stdcall ImmGetVirtualKey( HWND);

typedef int (__stdcall *REGISTERWORDENUMPROCA)(LPCSTR, DWORD, LPCSTR, LPVOID);
typedef int (__stdcall *REGISTERWORDENUMPROCW)(LPCWSTR, DWORD, LPCWSTR, LPVOID);




#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

BOOL __stdcall ImmRegisterWordA( HKL,  LPCSTR lpszReading,  DWORD,  LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW( HKL,  LPCWSTR lpszReading,  DWORD,  LPCWSTR lpszRegister);




#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

BOOL __stdcall ImmUnregisterWordA( HKL,  LPCSTR lpszReading,  DWORD,  LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW( HKL,  LPCWSTR lpszReading,  DWORD,  LPCWSTR lpszUnregister);




#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

UINT __stdcall ImmGetRegisterWordStyleA( HKL,  UINT nItem,  LPSTYLEBUFA);
UINT __stdcall ImmGetRegisterWordStyleW( HKL,  UINT nItem,  LPSTYLEBUFW);




#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

UINT __stdcall ImmEnumRegisterWordA( HKL,  REGISTERWORDENUMPROCA,  LPCSTR lpszReading,  DWORD,  LPCSTR lpszRegister,  LPVOID);
UINT __stdcall ImmEnumRegisterWordW( HKL,  REGISTERWORDENUMPROCW,  LPCWSTR lpszReading,  DWORD,  LPCWSTR lpszRegister,  LPVOID);




#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"


BOOL __stdcall ImmDisableIME( DWORD);
BOOL __stdcall ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD __stdcall ImmGetImeMenuItemsA( HIMC,  DWORD,  DWORD,  LPIMEMENUITEMINFOA,  LPIMEMENUITEMINFOA,  DWORD);
DWORD __stdcall ImmGetImeMenuItemsW( HIMC,  DWORD,  DWORD,  LPIMEMENUITEMINFOW,  LPIMEMENUITEMINFOW,  DWORD);




#line 365 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"

BOOL __stdcall ImmDisableTextFrameService(DWORD idThread);
#line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"








































































































































































































































































#line 633 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"






































































#line 704 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"








#line 713 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"





#line 719 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\imm.h"
#line 237 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"




#pragma warning(pop)





#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 8\\VC\\PlatformSDK\\include\\windows.h"

#line 2 "test.c"

int main()
{
}
