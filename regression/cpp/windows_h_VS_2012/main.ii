#line 1 "test.cpp"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winapifamily.h"


















#pragma once
#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winapifamily.h"























#line 45 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winapifamily.h"











































#line 89 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winapifamily.h"
#line 2 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"




















#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"



















#pragma warning(push)
#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"
#pragma warning(disable:4001) 
#line 24 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"

#pragma once































































































































































#line 186 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"











#line 198 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"







#line 206 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"
#line 207 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"







#line 215 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"
#line 216 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"






#line 223 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"

#line 225 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"

#line 227 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"

#line 229 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"

#line 231 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"

#line 233 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"



#line 237 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"


#line 240 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"
#line 241 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"








#line 250 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"



#line 254 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"



#line 258 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"



#line 262 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"



#line 266 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"



#line 270 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"

#line 272 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"



#pragma warning(pop)


#line 279 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"
#line 280 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"

#line 282 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\sdkddkver.h"

#line 23 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"





#pragma once
#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#pragma region Application Family



















































#line 84 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"




















#line 105 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"



#line 109 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"



#line 113 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"



#line 117 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"



#line 121 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"



#line 125 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"





#line 131 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"




#line 136 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 137 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"







#line 145 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 146 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"



#pragma warning(disable:4514)

#pragma warning(disable:4103)
#line 153 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#pragma warning(push)
#line 156 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 160 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\excpt.h"














#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"














 





#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


















#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"



#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"










#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"













#pragma once







































































































































#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"






































#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"


#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"

#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"





#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"



#line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"






#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"






#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"




#line 224 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"






























































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros




































































































































































































































































































































































































































































                                                




                                                

















































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1549 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"






























#line 1580 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"
























#line 1605 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"












#line 1618 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"







































#line 1658 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"


























































































































#line 1781 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"






































































































#line 1884 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"








































































































































































#line 2053 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"





































































































#line 2155 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"



















































































































































































































#line 2367 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"
extern "C" {




#line 2373 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"



































































































































































































































#line 2601 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2640 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"


































































































































































































































  

    
    
#line 2871 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"






#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"
#line 2879 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"






#line 2886 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"
#line 2887 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"










#line 2898 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"

































#line 2932 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"






















}
#line 2956 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ConcurrencySal.h"


















#pragma once


extern "C" {
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ConcurrencySal.h"
















































































































































































































































#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ConcurrencySal.h"



#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ConcurrencySal.h"


















































































#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ConcurrencySal.h"


}
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ConcurrencySal.h"

#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ConcurrencySal.h"
#line 2958 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\sal.h"


#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"




#pragma pack(push,8)

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"












#pragma once






#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"








#pragma pack(push,8)


extern "C" {
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"







#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"





typedef __w64 unsigned int   uintptr_t;
#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"

#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"





typedef char *  va_list;
#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"

#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"





#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"







#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"


#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"













#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"












































#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"


}
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"

#pragma pack(pop)

#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\vadefs.h"
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


extern "C" {
#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"





#line 74 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"




#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"




#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"







#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"







#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"













#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"





#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"







#line 132 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 136 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"







#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 145 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"




#line 150 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 152 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"




#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 160 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 161 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


 

#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
  
 #line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 169 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"










#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 181 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"






#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 189 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

















#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"




#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"








#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"






#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"





#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"






#line 242 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"






#line 250 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 251 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"




#line 256 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 263 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"





#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"










#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"










#line 295 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"






#line 302 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"














#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


#line 321 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 322 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"



#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"






#line 333 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 334 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"






#line 341 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"






#line 348 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"



 
  
 



#line 361 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


 
  
  
 



#line 372 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


 
  
   
  

#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
 



#line 386 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 387 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


 
  
 



#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 397 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


 
  
 



#line 406 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 407 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"



#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"





#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"




#line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 424 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"





typedef __w64 unsigned int   size_t;
#line 432 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"



typedef size_t rsize_t;

#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"





typedef __w64 int            intptr_t;
#line 448 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 450 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"














typedef __w64 int            ptrdiff_t;
#line 466 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 468 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"







typedef unsigned short wint_t;
typedef unsigned short wctype_t;

#line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


















typedef int errno_t;
#line 499 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


typedef __w64 long __time32_t;   

#line 504 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


typedef __int64 __time64_t;     

#line 509 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"





typedef __time64_t time_t;      
#line 516 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 518 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"







#line 526 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 527 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"



#line 531 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 533 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"




#line 538 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 540 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"





#line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"



#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"




#line 556 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 559 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"












  void __cdecl _invalid_parameter_noinfo(void);
  __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);
#line 574 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

 __declspec(noreturn)
void __cdecl _invoke_watson(  const wchar_t *,   const wchar_t *,   const wchar_t *, unsigned int, uintptr_t);






 







 
  
 #line 594 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 595 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"







#line 603 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


































































































































































#line 766 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 767 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1833 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"















































































































































#line 1977 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"
#line 1978 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

struct threadlocaleinfostruct;
struct threadmbcinfostruct;
typedef struct threadlocaleinfostruct * pthreadlocinfo;
typedef struct threadmbcinfostruct * pthreadmbcinfo;
struct __lc_time_data;

typedef struct localeinfo_struct
{
    pthreadlocinfo locinfo;
    pthreadmbcinfo mbcinfo;
} _locale_tstruct, *_locale_t;


typedef struct localerefcount {
        char *locale;
        wchar_t *wlocale;
        int *refcount;
        int *wrefcount;
} locrefcount;

typedef struct threadlocaleinfostruct {
        int refcount;
        unsigned int lc_codepage;
        unsigned int lc_collate_cp;
        unsigned int lc_time_cp;
        locrefcount lc_category[6];
        int lc_clike;
        int mb_cur_max;
        int * lconv_intl_refcount;
        int * lconv_num_refcount;
        int * lconv_mon_refcount;
        struct lconv * lconv;
        int * ctype1_refcount;
        unsigned short * ctype1;
        const unsigned short * pctype;
        const unsigned char * pclmap;
        const unsigned char * pcumap;
        struct __lc_time_data * lc_time_curr;
        wchar_t * locale_name[6];
} threadlocinfo;

#line 2021 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"


}
#line 2025 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"



#line 2029 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 2031 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"



#line 2035 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 2037 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"



#line 2041 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 2043 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"






#line 2050 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"



#line 2054 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#pragma pack(pop)

#line 2058 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"

#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\excpt.h"





#pragma pack(push,8)


extern "C" {
#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\excpt.h"




typedef enum _EXCEPTION_DISPOSITION {
    ExceptionContinueExecution,
    ExceptionContinueSearch,
    ExceptionNestedException,
    ExceptionCollidedUnwind
} EXCEPTION_DISPOSITION;











struct _EXCEPTION_RECORD;
struct _CONTEXT;

EXCEPTION_DISPOSITION __cdecl _except_handler (
      struct _EXCEPTION_RECORD *_ExceptionRecord,
      void * _EstablisherFrame,
      struct _CONTEXT *_ContextRecord,
      void * _DispatcherContext
    );





















#line 83 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\excpt.h"













unsigned long __cdecl _exception_code(void);
void *        __cdecl _exception_info(void);
int           __cdecl _abnormal_termination(void);













}
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\excpt.h"

#pragma pack(pop)

#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\excpt.h"
#line 161 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdarg.h"














#pragma once






#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdarg.h"








#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdarg.h"
#line 162 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 163 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"













#pragma once


extern "C" {
#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"





#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"











#pragma once

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"
















#pragma once
#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"



 

#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"
  
 #line 27 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"

 



  
 #line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"

 
  
  
 #line 39 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"

#line 41 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"





#line 47 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"


extern "C" {
#line 51 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"




























#line 80 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"












#line 93 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"








































































































#line 198 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"
#line 199 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"







































#line 239 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"





























#line 269 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"























































































#line 357 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"




















#line 378 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"





#line 384 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"


#line 387 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"



















































#line 439 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"










#line 450 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"








                                

}
#line 462 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"



























#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings_strict.h"




























#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings_strict.h"





























































































































































#pragma once
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings_undef.h"








































































































































































































































































































































































































































































#line 189 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings_strict.h"











































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1065 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings_strict.h"
































































#line 1130 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings_strict.h"






















































#line 1185 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings_strict.h"
#line 1186 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings_strict.h"
#line 1187 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings_strict.h"

#line 490 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"
#line 491 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"

















#line 509 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\driverspecs.h"




























































































































#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\sdv_driverspecs.h"





















#line 23 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\sdv_driverspecs.h"
#line 126 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\driverspecs.h"



#pragma once
#line 131 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\driverspecs.h"


extern "C" {
#line 135 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\driverspecs.h"

































































































#line 233 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\driverspecs.h"

    
    
    
    
    
    
    
    
    
    
    


#line 248 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\driverspecs.h"

    
    
    
    
    

    
    
    
    
    
    
    

    
    
    
    



    
    


    
    
    
    
    
    
    
    
    
    
    
    


    
    


    
    


    
    



    
    









    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    


    


    
    
    
    
    


    


    
    
    
    
    

    


    
    
    
    
    

    


    
    
    
    
    


    




    
    
    
    
    

    


    
    
    
    
    


    


    
    
    
    
    
    

    


    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    

    
    

    
    
    
    

    

    
    
    

    

    
    
    
    
    
    
    
    
    
    
    
    

    
    


    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    


    
    
    
    
     
    

    
    
        
        
        
        
    
    
    
    
    
    

    
    
    

    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    

    

    
    
    
    
    
    
    
    
    
    
    
#line 663 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\driverspecs.h"
    
#line 665 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\driverspecs.h"
    


    
    
    
    
    
    


    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    

    
    
    
    
    
    

    
    
    
    
    
    
    
    
    

    
    

    
    

    
    
    
    
    
    


    
    
    

    
    

    
    

    
    


    
    
    


    
    
    


    
    











































































    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

#line 850 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\driverspecs.h"

    
    
    

    
    
    


}
#line 862 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\driverspecs.h"

#line 864 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\driverspecs.h"


#line 511 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"












#line 524 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"

#line 526 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\specstrings.h"



#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"



#pragma region Application Family





#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"
#line 26 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"













#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"


extern "C" {
#line 44 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"







typedef unsigned long ULONG;
typedef ULONG *PULONG;
typedef unsigned short USHORT;
typedef USHORT *PUSHORT;
typedef unsigned char UCHAR;
typedef UCHAR *PUCHAR;
typedef   char *PSZ;
#line 59 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"








#line 68 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"
#line 69 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"



#line 73 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"



#line 77 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"



#line 81 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"



#line 85 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"



#line 89 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"












#line 102 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"






#line 109 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"



#line 113 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"
#line 114 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"


























#line 141 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"




#line 146 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"
#line 147 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"







#line 155 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"

typedef unsigned long       DWORD;
typedef int                 BOOL;
typedef unsigned char       BYTE;
typedef unsigned short      WORD;
typedef float               FLOAT;
typedef FLOAT               *PFLOAT;
typedef BOOL            *PBOOL;
typedef BOOL             *LPBOOL;
typedef BYTE            *PBYTE;
typedef BYTE             *LPBYTE;
typedef int             *PINT;
typedef int              *LPINT;
typedef WORD            *PWORD;
typedef WORD             *LPWORD;
typedef long             *LPLONG;
typedef DWORD           *PDWORD;
typedef DWORD            *LPDWORD;
typedef void             *LPVOID;
typedef const void       *LPCVOID;

typedef int                 INT;
typedef unsigned int        UINT;
typedef unsigned int        *PUINT;



#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





















#pragma warning(push)
#line 24 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 


extern "C" {
#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"













#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"














 



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"


extern "C" {
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"



#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"








#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"

#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"

 const unsigned short * __cdecl __pctype_func(void);

 extern const unsigned short *_pctype;


#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"
#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"





 extern const unsigned short _wctype[];
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"

 const wctype_t * __cdecl __pwctype_func(void);

 extern const wctype_t *_pwctype;


#line 63 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"
#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"
#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"


#line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"










                                













   int __cdecl _isctype(  int _C,   int _Type);
   int __cdecl _isctype_l(  int _C,   int _Type,   _locale_t _Locale);
    int __cdecl isalpha(  int _C);
   int __cdecl _isalpha_l(  int _C,   _locale_t _Locale);
    int __cdecl isupper(  int _C);
   int __cdecl _isupper_l(  int _C,   _locale_t _Locale);
    int __cdecl islower(  int _C);
   int __cdecl _islower_l(  int _C,   _locale_t _Locale);
    int __cdecl isdigit(  int _C);
   int __cdecl _isdigit_l(  int _C,   _locale_t _Locale);
   int __cdecl isxdigit(  int _C);
   int __cdecl _isxdigit_l(  int _C,   _locale_t _Locale);
    int __cdecl isspace(  int _C);
   int __cdecl _isspace_l(  int _C,   _locale_t _Locale);
   int __cdecl ispunct(  int _C);
   int __cdecl _ispunct_l(  int _C,   _locale_t _Locale);
    int __cdecl isalnum(  int _C);
   int __cdecl _isalnum_l(  int _C,   _locale_t _Locale);
   int __cdecl isprint(  int _C);
   int __cdecl _isprint_l(  int _C,   _locale_t _Locale);
   int __cdecl isgraph(  int _C);
   int __cdecl _isgraph_l(  int _C,   _locale_t _Locale);
   int __cdecl iscntrl(  int _C);
   int __cdecl _iscntrl_l(  int _C,   _locale_t _Locale);
    int __cdecl toupper(  int _C);
    int __cdecl tolower(  int _C);
    int __cdecl _tolower(  int _C);
   int __cdecl _tolower_l(  int _C,   _locale_t _Locale);
    int __cdecl _toupper(  int _C);
   int __cdecl _toupper_l(  int _C,   _locale_t _Locale);
   int __cdecl __isascii(  int _C);
   int __cdecl __toascii(  int _C);
   int __cdecl __iscsymf(  int _C);
   int __cdecl __iscsym(  int _C);

#line 128 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"







   int __cdecl iswalpha(  wint_t _C);
   int __cdecl _iswalpha_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswupper(  wint_t _C);
   int __cdecl _iswupper_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswlower(  wint_t _C);
   int __cdecl _iswlower_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswdigit(  wint_t _C);
   int __cdecl _iswdigit_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswxdigit(  wint_t _C);
   int __cdecl _iswxdigit_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswspace(  wint_t _C);
   int __cdecl _iswspace_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswpunct(  wint_t _C);
   int __cdecl _iswpunct_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswalnum(  wint_t _C);
   int __cdecl _iswalnum_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswprint(  wint_t _C);
   int __cdecl _iswprint_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswgraph(  wint_t _C);
   int __cdecl _iswgraph_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswcntrl(  wint_t _C);
   int __cdecl _iswcntrl_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl iswascii(  wint_t _C);

   wint_t __cdecl towupper(  wint_t _C);
   wint_t __cdecl _towupper_l(  wint_t _C,   _locale_t _Locale);
   wint_t __cdecl towlower(  wint_t _C);
   wint_t __cdecl _towlower_l(  wint_t _C,   _locale_t _Locale); 
   int __cdecl iswctype(  wint_t _C,   wctype_t _Type);
   int __cdecl _iswctype_l(  wint_t _C,   wctype_t _Type,   _locale_t _Locale);

   int __cdecl __iswcsymf(  wint_t _C);
   int __cdecl _iswcsymf_l(  wint_t _C,   _locale_t _Locale);
   int __cdecl __iswcsym(  wint_t _C);
   int __cdecl _iswcsym_l(  wint_t _C,   _locale_t _Locale);


   int __cdecl isleadbyte(  int _C);
   int __cdecl _isleadbyte_l(  int _C,   _locale_t _Locale);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "iswctype" " instead. See online help for details."))  int __cdecl is_wctype(  wint_t _C,   wctype_t _Type);
#line 176 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"


#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"













#line 193 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"

#line 195 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"


 extern int __mb_cur_max;


#line 201 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"
 int __cdecl ___mb_cur_max_func(void);
 int __cdecl ___mb_cur_max_l_func(_locale_t);
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"









#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"












































#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"






#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"


















































#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"


























#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"

#line 346 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"













#line 360 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"
















#line 377 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"

#line 379 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"


}
#line 383 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"

#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\ctype.h"
#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


















#line 51 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"









#line 61 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 62 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"








#line 71 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





#line 77 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 78 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\kernelspecs.h"






































#pragma once
#line 41 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\kernelspecs.h"


extern "C" {
#line 45 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\kernelspecs.h"

    
    
    

    
    
    

    
    
    #line 57 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\kernelspecs.h"
    

#line 60 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\kernelspecs.h"
    

#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\kernelspecs.h"
    

#line 66 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\kernelspecs.h"

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    
    
    
    


    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    

    
    
    
    
    
    
    

    
    















}
#line 251 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\kernelspecs.h"

#line 253 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\kernelspecs.h"
#line 83 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



#line 87 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



#line 91 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 93 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"











#line 105 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



#line 109 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"







#line 117 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


#line 120 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"









#line 130 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



#line 134 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"













#line 148 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





#line 154 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"












#line 167 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"





























#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"
 


#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"
  
   
  

#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"
  typedef unsigned long POINTER_64_INT;
 #line 42 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"
 
#line 44 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"



#line 48 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"

#line 50 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"







#line 58 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"





#pragma once
#line 65 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"


extern "C" {
#line 69 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"

typedef signed char         INT8, *PINT8;
typedef signed short        INT16, *PINT16;
typedef signed int          INT32, *PINT32;
typedef signed __int64      INT64, *PINT64;
typedef unsigned char       UINT8, *PUINT8;
typedef unsigned short      UINT16, *PUINT16;
typedef unsigned int        UINT32, *PUINT32;
typedef unsigned __int64    UINT64, *PUINT64;





typedef signed int LONG32, *PLONG32;





typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;







#line 99 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"

















#line 117 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"











#line 129 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"
    typedef __w64 int INT_PTR, *PINT_PTR;
    typedef __w64 unsigned int UINT_PTR, *PUINT_PTR;

    typedef __w64 long LONG_PTR, *PLONG_PTR;
    typedef __w64 unsigned long ULONG_PTR, *PULONG_PTR;

    

#line 138 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"
#line 139 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"





























































































































































































typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;
typedef __w64 long SHANDLE_PTR;
typedef __w64 unsigned long HANDLE_PTR;

















__inline
void * __ptr64
PtrToPtr64(
    const void *p
    )
{
    return((void * __ptr64) (unsigned __int64) (ULONG_PTR)p );
}

__inline
void *
Ptr64ToPtr(
    const void * __ptr64 p
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) p);
}

__inline
void * __ptr64
HandleToHandle64(
    const void *h
    )
{
    return((void * __ptr64)(__int64)(LONG_PTR)h );
}

__inline
void *
Handle64ToHandle(
    const void * __ptr64 h
    )
{
    return((void *) (ULONG_PTR) (unsigned __int64) h );
}
#line 385 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"






#line 392 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"























typedef ULONG_PTR SIZE_T, *PSIZE_T;
typedef LONG_PTR SSIZE_T, *PSSIZE_T;









































#line 459 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"





typedef ULONG_PTR DWORD_PTR, *PDWORD_PTR;





typedef __int64 LONG64, *PLONG64;






typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;







typedef ULONG_PTR KAFFINITY;
typedef KAFFINITY *PKAFFINITY;




}
#line 494 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"

#line 496 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\basetsd.h"
#line 169 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






#line 176 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






#line 183 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 184 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






#line 191 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 192 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






#line 199 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 200 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






#line 207 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 208 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



#line 212 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






#line 219 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 220 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






#line 227 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 228 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






#line 235 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 236 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






#line 243 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 244 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




#line 249 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 251 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 252 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






#line 259 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 260 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






#line 267 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 268 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"








#line 277 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 278 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"














#line 293 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"







typedef void *PVOID;
typedef void * __ptr64 PVOID64;








#line 311 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





#line 317 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
















#line 334 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"









typedef char CHAR;
typedef short SHORT;
typedef long LONG;

typedef int INT;
#line 349 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 350 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






typedef wchar_t WCHAR;    



#line 361 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef WCHAR *PWCHAR, *LPWCH, *PWCH;
typedef const WCHAR *LPCWCH, *PCWCH;

typedef   WCHAR *NWPSTR, *LPWSTR, *PWSTR;
typedef   PWSTR *PZPWSTR;
typedef   const PWSTR *PCZPWSTR;
typedef   WCHAR  *LPUWSTR, *PUWSTR;
typedef   const WCHAR *LPCWSTR, *PCWSTR;
typedef   PCWSTR *PZPCWSTR;
typedef   const WCHAR  *LPCUWSTR, *PCUWSTR;

typedef   WCHAR *PZZWSTR;
typedef   const WCHAR *PCZZWSTR;
typedef   WCHAR  *PUZZWSTR;
typedef   const WCHAR  *PCUZZWSTR;

typedef  WCHAR *PNZWCH;
typedef  const WCHAR *PCNZWCH;
typedef  WCHAR  *PUNZWCH;
typedef  const WCHAR  *PCUNZWCH;



typedef const WCHAR *LPCWCHAR, *PCWCHAR;
typedef const WCHAR  *LPCUWCHAR, *PCUWCHAR;





typedef unsigned long UCSCHAR;



















typedef UCSCHAR *PUCSCHAR;
typedef const UCSCHAR *PCUCSCHAR;

typedef UCSCHAR *PUCSSTR;
typedef UCSCHAR  *PUUCSSTR;

typedef const UCSCHAR *PCUCSSTR;
typedef const UCSCHAR  *PCUUCSSTR;

typedef UCSCHAR  *PUUCSCHAR;
typedef const UCSCHAR  *PCUUCSCHAR;

#line 425 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





typedef CHAR *PCHAR, *LPCH, *PCH;
typedef const CHAR *LPCCH, *PCCH;

typedef   CHAR *NPSTR, *LPSTR, *PSTR;
typedef   PSTR *PZPSTR;
typedef   const PSTR *PCZPSTR;
typedef   const CHAR *LPCSTR, *PCSTR;
typedef   PCSTR *PZPCSTR;

typedef   CHAR *PZZSTR;
typedef   const CHAR *PCZZSTR;

typedef  CHAR *PNZCH;
typedef  const CHAR *PCNZCH;

































typedef char TCHAR, *PTCHAR;
typedef unsigned char TBYTE , *PTBYTE ;

#line 481 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef LPCH LPTCH, PTCH;
typedef LPCCH LPCTCH, PCTCH;
typedef LPSTR PTSTR, LPTSTR, PUTSTR, LPUTSTR;
typedef LPCSTR PCTSTR, LPCTSTR, PCUTSTR, LPCUTSTR;
typedef PZZSTR PZZTSTR, PUZZTSTR;
typedef PCZZSTR PCZZTSTR, PCUZZTSTR;
typedef PZPSTR PZPTSTR;
typedef PNZCH PNZTCH, PUNZTCH;
typedef PCNZCH PCNZTCH, PCUNZTCH;


#line 494 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



typedef SHORT *PSHORT;  
typedef LONG *PLONG;    








typedef struct _PROCESSOR_NUMBER {
    WORD   Group;
    BYTE  Number;
    BYTE  Reserved;
} PROCESSOR_NUMBER, *PPROCESSOR_NUMBER;






typedef struct _GROUP_AFFINITY {
    KAFFINITY Mask;
    WORD   Group;
    WORD   Reserved[3];
} GROUP_AFFINITY, *PGROUP_AFFINITY;






typedef void *HANDLE;


#line 533 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 535 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



#line 539 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
typedef HANDLE *PHANDLE;





typedef BYTE   FCHAR;
typedef WORD   FSHORT;
typedef DWORD  FLONG;








typedef   long HRESULT;
#line 558 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 559 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


    


#line 565 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"









#line 575 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"













#line 589 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




























typedef char CCHAR;          
typedef DWORD LCID;         
typedef PDWORD PLCID;       
typedef WORD   LANGID;      








typedef enum {
    UNSPECIFIED_COMPARTMENT_ID = 0,
    DEFAULT_COMPARTMENT_ID
} COMPARTMENT_ID, *PCOMPARTMENT_ID;

#line 635 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"























#line 659 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
typedef struct _FLOAT128 {
    __int64 LowPart;
    __int64 HighPart;
} FLOAT128;

typedef FLOAT128 *PFLOAT128;










typedef __int64 LONGLONG;
typedef unsigned __int64 ULONGLONG;


















#line 696 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef LONGLONG *PLONGLONG;
typedef ULONGLONG *PULONGLONG;



typedef LONGLONG USN;



#line 707 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
typedef union _LARGE_INTEGER {
    struct {
        DWORD LowPart;
        LONG HighPart;
    } ;
    struct {
        DWORD LowPart;
        LONG HighPart;
    } u;
#line 717 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
    LONGLONG QuadPart;
} LARGE_INTEGER;

typedef LARGE_INTEGER *PLARGE_INTEGER;



#line 725 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
typedef union _ULARGE_INTEGER {
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } ;
    struct {
        DWORD LowPart;
        DWORD HighPart;
    } u;
#line 735 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
    ULONGLONG QuadPart;
} ULARGE_INTEGER;

typedef ULARGE_INTEGER *PULARGE_INTEGER;









typedef struct _LUID {
    DWORD LowPart;
    LONG HighPart;
} LUID, *PLUID;


typedef ULONGLONG  DWORDLONG;
typedef DWORDLONG *PDWORDLONG;





























#line 788 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"












ULONGLONG
__stdcall
Int64ShllMod32 (
      ULONGLONG Value,
      DWORD ShiftCount
    );

LONGLONG
__stdcall
Int64ShraMod32 (
      LONGLONG Value,
      DWORD ShiftCount
    );

ULONGLONG
__stdcall
Int64ShrlMod32 (
      ULONGLONG Value,
      DWORD ShiftCount
    );


#pragma warning(push)
#line 824 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma warning(disable:4035 4793)               

__inline ULONGLONG
__stdcall
Int64ShllMod32 (
      ULONGLONG Value,
      DWORD ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shld    edx, eax, cl
        shl     eax, cl
    }
}

__inline LONGLONG
__stdcall
Int64ShraMod32 (
      LONGLONG Value,
      DWORD ShiftCount
    )
{
    __asm {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        sar     edx, cl
    }
}

__inline ULONGLONG
__stdcall
Int64ShrlMod32 (
      ULONGLONG Value,
      DWORD ShiftCount
    )
{
    __asm    {
        mov     ecx, ShiftCount
        mov     eax, dword ptr [Value]
        mov     edx, dword ptr [Value+4]
        shrd    eax, edx, cl
        shr     edx, cl
    }
}


#pragma warning(pop)


#line 879 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





#line 885 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






extern "C" {
#line 893 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"









































#line 935 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"








unsigned int
__cdecl
_rotl (
      unsigned int Value,
      int Shift
    );

unsigned __int64
__cdecl
_rotl64 (
      unsigned __int64 Value,
      int Shift
    );

unsigned int
__cdecl
_rotr (
      unsigned int Value,
      int Shift
    );

unsigned __int64
__cdecl
_rotr64 (
      unsigned __int64 Value,
      int Shift
    );

#pragma intrinsic(_rotl)
#pragma intrinsic(_rotl64)
#pragma intrinsic(_rotr)
#pragma intrinsic(_rotr64)

#line 977 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


}
#line 981 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





typedef BYTE  BOOLEAN;           
typedef BOOLEAN *PBOOLEAN;       





typedef struct _LIST_ENTRY {
   struct _LIST_ENTRY *Flink;
   struct _LIST_ENTRY *Blink;
} LIST_ENTRY, *PLIST_ENTRY, * PRLIST_ENTRY;






typedef struct _SINGLE_LIST_ENTRY {
    struct _SINGLE_LIST_ENTRY *Next;
} SINGLE_LIST_ENTRY, *PSINGLE_LIST_ENTRY;






typedef struct LIST_ENTRY32 {
    DWORD Flink;
    DWORD Blink;
} LIST_ENTRY32;
typedef LIST_ENTRY32 *PLIST_ENTRY32;

typedef struct LIST_ENTRY64 {
    ULONGLONG Flink;
    ULONGLONG Blink;
} LIST_ENTRY64;
typedef LIST_ENTRY64 *PLIST_ENTRY64;


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"




















#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"
typedef struct _GUID {
    unsigned long  Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char  Data4[ 8 ];
} GUID;
#line 29 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"
#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"




































#line 67 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"








typedef GUID *LPGUID;
#line 77 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"



typedef const GUID *LPCGUID;
#line 82 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"




typedef GUID IID;
typedef IID *LPIID;


typedef GUID CLSID;
typedef CLSID *LPCLSID;


typedef GUID FMTID;
typedef FMTID *LPFMTID;







#line 104 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"







#line 112 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"
#line 113 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"







#line 121 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"
#line 122 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"







#line 130 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"
#line 131 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"







#line 139 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"
#line 140 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"

#line 142 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"














#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"














 



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"


extern "C" {
#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"




#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
















 void *  __cdecl _memccpy(   void * _Dst,   const void * _Src,   int _Val,   size_t _MaxCount);
   const void *  __cdecl memchr(   const void * _Buf ,   int _Val,   size_t _MaxCount);
   int     __cdecl _memicmp(  const void * _Buf1,   const void * _Buf2,   size_t _Size);
   int     __cdecl _memicmp_l(  const void * _Buf1,   const void * _Buf2,   size_t _Size,   _locale_t _Locale);
  int     __cdecl memcmp(  const void * _Buf1,   const void * _Buf2,   size_t _Size);

 

void *  __cdecl memcpy(  void * _Dst,   const void * _Src,   size_t _Size);

 errno_t  __cdecl memcpy_s(  void * _Dst,   rsize_t _DstSize,   const void * _Src,   rsize_t _MaxCount);





















#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"










#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
         
        
        void *  __cdecl memset(  void * _Dst,   int _Val,   size_t _Size);



__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memccpy" ". See online help for details."))  void * __cdecl memccpy(  void * _Dst,   const void * _Src,   int _Val,   size_t _Size);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_memicmp" ". See online help for details."))  int __cdecl memicmp(  const void * _Buf1,   const void * _Buf2,   size_t _Size);
#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"

#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"

  errno_t __cdecl _strset_s(  char * _Dst,   size_t _DstSize,   int _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(  char (&_Dest)[_Size],   int _Value) throw() { return _strset_s(_Dest, _Size, _Value); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strset( char *_Dest,  int _Value);

  errno_t __cdecl strcpy_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src);
#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Dest)[_Size],   const char * _Source) throw() { return strcpy_s(_Dest, _Size, _Source); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl strcpy( char *_Dest,  const char * _Source);

  errno_t __cdecl strcat_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src);
#line 114 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Dest)[_Size],   const char * _Source) throw() { return strcat_s(_Dest, _Size, _Source); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl strcat( char *_Dest,  const char * _Source);
          int     __cdecl strcmp(  const char * _Str1,   const char * _Str2);
          size_t  __cdecl strlen(  const char * _Str);
  


size_t  __cdecl strnlen(  const char * _Str,   size_t _MaxCount);

  static __inline


size_t  __cdecl strnlen_s(  const char * _Str,   size_t _MaxCount)
{
    return (_Str==0) ? 0 : strnlen(_Str, _MaxCount);
}
#line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"

  errno_t __cdecl memmove_s(  void * _Dst,   rsize_t _DstSize,   const void * _Src,   rsize_t _MaxCount);
#line 134 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"

  void *  __cdecl memmove(  void * _Dst,   const void * _Src,   size_t _Size);




#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"

   char *  __cdecl _strdup(  const char * _Src);



#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"

   const char *  __cdecl strchr(  const char * _Str,   int _Val);
   int     __cdecl _stricmp(   const char * _Str1,    const char * _Str2);
   int     __cdecl _strcmpi(   const char * _Str1,    const char * _Str2);
   int     __cdecl _stricmp_l(   const char * _Str1,    const char * _Str2,   _locale_t _Locale);
   int     __cdecl strcoll(   const char * _Str1,    const  char * _Str2);
   int     __cdecl _strcoll_l(   const char * _Str1,    const char * _Str2,   _locale_t _Locale);
   int     __cdecl _stricoll(   const char * _Str1,    const char * _Str2);
   int     __cdecl _stricoll_l(   const char * _Str1,    const char * _Str2,   _locale_t _Locale);
   int     __cdecl _strncoll  (  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strncoll_l(  const char * _Str1,   const char * _Str2,   size_t _MaxCount,   _locale_t _Locale);
   int     __cdecl _strnicoll (  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strnicoll_l(  const char * _Str1,   const char * _Str2,   size_t _MaxCount,   _locale_t _Locale);
   size_t  __cdecl strcspn(   const char * _Str,    const char * _Control);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char *  __cdecl _strerror(  const char * _ErrMsg);
  errno_t __cdecl _strerror_s(  char * _Buf,   size_t _SizeInBytes,   const char * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   const char * _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char *  __cdecl strerror(  int);

  errno_t __cdecl strerror_s(  char * _Buf,   size_t _SizeInBytes,   int _ErrNum);
#line 168 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
  errno_t __cdecl _strlwr_s(  char * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strlwr( char *_String);
  errno_t __cdecl _strlwr_s_l(  char * _Str,   size_t _Size,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);

  errno_t __cdecl strncat_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src,   rsize_t _MaxCount);
#line 178 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(  char (&_Dest)[_Size],   const char * _Source,   size_t _Count) throw() { return strncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable:6059)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl strncat(  char *_Dest,   const char * _Source,   size_t _Count);
#pragma warning(pop)
   int     __cdecl strncmp(  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strnicmp(  const char * _Str1,   const char * _Str2,   size_t _MaxCount);
   int     __cdecl _strnicmp_l(  const char * _Str1,   const char * _Str2,   size_t _MaxCount,   _locale_t _Locale);

  errno_t __cdecl strncpy_s(  char * _Dst,   rsize_t _SizeInBytes,   const char * _Src,   rsize_t _MaxCount);
#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Dest)[_Size],   const char * _Source,   size_t _Count) throw() { return strncpy_s(_Dest, _Size, _Source, _Count); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl strncpy(    char *_Dest,   const char * _Source,   size_t _Count);
  errno_t __cdecl _strnset_s(  char * _Str,   size_t _SizeInBytes,   int _Val,   size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(  char (&_Dest)[_Size],   int _Val,   size_t _Count) throw() { return _strnset_s(_Dest, _Size, _Val, _Count); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strnset(  char *_Dest,   int _Val,   size_t _Count);
   const char *  __cdecl strpbrk(  const char * _Str,   const char * _Control);
   const char *  __cdecl strrchr(  const char * _Str,   int _Ch);
 char *  __cdecl _strrev(  char * _Str);
   size_t  __cdecl strspn(  const char * _Str,   const char * _Control);
     const char *  __cdecl strstr(  const char * _Str,   const char * _SubStr);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char *  __cdecl strtok(  char * _Str,   const char * _Delim);

   char *  __cdecl strtok_s(  char * _Str,   const char * _Delim,     char ** _Context);
#line 204 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
  errno_t __cdecl _strupr_s(  char * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strupr( char *_String);
  errno_t __cdecl _strupr_s_l(  char * _Str,   size_t _Size, _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(  char (&_String)[_Size], _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _strupr_l(  char *_String,   _locale_t _Locale);
  size_t  __cdecl strxfrm (    char * _Dst,   const char * _Src,   size_t _MaxCount);
  size_t  __cdecl _strxfrm_l(    char * _Dst,   const char * _Src,   size_t _MaxCount,   _locale_t _Locale);


extern "C++" {


  inline char * __cdecl strchr(  char * _Str,   int _Ch)
	{ return (char*)strchr((const char*)_Str, _Ch); }
  inline char * __cdecl strpbrk(  char * _Str,   const char * _Control)
	{ return (char*)strpbrk((const char*)_Str, _Control); }
  inline char * __cdecl strrchr(  char * _Str,   int _Ch)
	{ return (char*)strrchr((const char*)_Str, _Ch); }
    inline char * __cdecl strstr(  char * _Str,   const char * _SubStr)
	{ return (char*)strstr((const char*)_Str, _SubStr); }
#line 226 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"


  inline void * __cdecl memchr(  void * _Pv,   int _C,   size_t _N)
	{ return (void*)memchr((const void*)_Pv, _C, _N); }
#line 231 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
}
#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"






#line 240 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"

  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strdup" ". See online help for details."))  char * __cdecl strdup(  const char * _Src);



#line 246 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"


  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strcmpi" ". See online help for details."))  int __cdecl strcmpi(  const char * _Str1,   const char * _Str2);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_stricmp" ". See online help for details."))  int __cdecl stricmp(  const char * _Str1,   const char * _Str2);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strlwr" ". See online help for details."))  char * __cdecl strlwr(  char * _Str);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnicmp" ". See online help for details."))  int __cdecl strnicmp(  const char * _Str1,   const char * _Str,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strnset" ". See online help for details."))  char * __cdecl strnset(  char * _Str,   int _Val,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strrev" ". See online help for details."))  char * __cdecl strrev(  char * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strset" ". See online help for details."))         char * __cdecl strset(  char * _Str,   int _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_strupr" ". See online help for details."))  char * __cdecl strupr(  char * _Str);

#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"









#line 268 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"

   wchar_t * __cdecl _wcsdup(  const wchar_t * _Str);



#line 274 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"


  errno_t __cdecl wcscat_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src);
#line 278 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Dest)[_Size],   const wchar_t * _Source) throw() { return wcscat_s(_Dest, _Size, _Source); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcscat( wchar_t *_Dest,  const wchar_t * _Source);
 

 const wchar_t * __cdecl wcschr(  const wchar_t * _Str, wchar_t _Ch);
   int __cdecl wcscmp(  const wchar_t * _Str1,   const wchar_t * _Str2);

  errno_t __cdecl wcscpy_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src);
#line 287 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Dest)[_Size],   const wchar_t * _Source) throw() { return wcscpy_s(_Dest, _Size, _Source); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcscpy( wchar_t *_Dest,  const wchar_t * _Source);
   size_t __cdecl wcscspn(  const wchar_t * _Str,   const wchar_t * _Control);
   size_t __cdecl wcslen(  const wchar_t * _Str);
  


size_t __cdecl wcsnlen(  const wchar_t * _Src,   size_t _MaxCount);

  static __inline


size_t __cdecl wcsnlen_s(  const wchar_t * _Src,   size_t _MaxCount)
{
    return (_Src == 0) ? 0 : wcsnlen(_Src, _MaxCount);
}
#line 304 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"

  errno_t __cdecl wcsncat_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src,   rsize_t _MaxCount);
#line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(  wchar_t (&_Dest)[_Size],   const wchar_t * _Source,   size_t _Count) throw() { return wcsncat_s(_Dest, _Size, _Source, _Count); } }
#pragma warning(push)
#pragma warning(disable:6059)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcsncat(  wchar_t *_Dest,   const wchar_t * _Source,   size_t _Count);
#pragma warning(pop)
   int __cdecl wcsncmp(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);

  errno_t __cdecl wcsncpy_s(  wchar_t * _Dst,   rsize_t _SizeInWords,   const wchar_t * _Src,   rsize_t _MaxCount);
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Dest)[_Size],   const wchar_t * _Source,   size_t _Count) throw() { return wcsncpy_s(_Dest, _Size, _Source, _Count); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcsncpy(    wchar_t *_Dest,   const wchar_t * _Source,   size_t _Count);
   const wchar_t * __cdecl wcspbrk(  const wchar_t * _Str,   const wchar_t * _Control);
   const wchar_t * __cdecl wcsrchr(  const wchar_t * _Str,   wchar_t _Ch);
   size_t __cdecl wcsspn(  const wchar_t * _Str,   const wchar_t * _Control);
   

 const wchar_t * __cdecl wcsstr(  const wchar_t * _Str,   const wchar_t * _SubStr);
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl wcstok(  wchar_t * _Str,   const wchar_t * _Delim);

   wchar_t * __cdecl wcstok_s(  wchar_t * _Str,   const wchar_t * _Delim,     wchar_t ** _Context);
#line 328 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcserror(  int _ErrNum);
  errno_t __cdecl _wcserror_s(  wchar_t * _Buf,   size_t _SizeInWords,   int _ErrNum);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl __wcserror(  const wchar_t * _Str);
  errno_t __cdecl __wcserror_s(  wchar_t * _Buffer,   size_t _SizeInWords,   const wchar_t * _ErrMsg);
extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   const wchar_t * _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }

   int __cdecl _wcsicmp(  const wchar_t * _Str1,   const wchar_t * _Str2);
   int __cdecl _wcsicmp_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   _locale_t _Locale);
   int __cdecl _wcsnicmp(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
   int __cdecl _wcsnicmp_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount,   _locale_t _Locale);
  errno_t __cdecl _wcsnset_s(  wchar_t * _Dst,   size_t _SizeInWords,   wchar_t _Val,   size_t _MaxCount);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(  wchar_t (&_Dst)[_Size], wchar_t _Val,   size_t _MaxCount) throw() { return _wcsnset_s(_Dst, _Size, _Val, _MaxCount); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcsnset(  wchar_t *_Str, wchar_t _Val,   size_t _MaxCount);
 wchar_t * __cdecl _wcsrev(  wchar_t * _Str);
  errno_t __cdecl _wcsset_s(  wchar_t * _Dst,   size_t _SizeInWords,   wchar_t _Value);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(  wchar_t (&_Str)[_Size], wchar_t _Val) throw() { return _wcsset_s(_Str, _Size, _Val); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcsset(  wchar_t *_Str, wchar_t _Val);

  errno_t __cdecl _wcslwr_s(  wchar_t * _Str,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcslwr( wchar_t *_String);
  errno_t __cdecl _wcslwr_s_l(  wchar_t * _Str,   size_t _SizeInWords,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);
  errno_t __cdecl _wcsupr_s(  wchar_t * _Str,   size_t _Size);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcsupr( wchar_t *_String);
  errno_t __cdecl _wcsupr_s_l(  wchar_t * _Str,   size_t _Size,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);
  size_t __cdecl wcsxfrm(    wchar_t * _Dst,   const wchar_t * _Src,   size_t _MaxCount);
  size_t __cdecl _wcsxfrm_l(    wchar_t * _Dst,   const wchar_t *_Src,   size_t _MaxCount,   _locale_t _Locale);
   int __cdecl wcscoll(  const wchar_t * _Str1,   const wchar_t * _Str2);
   int __cdecl _wcscoll_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   _locale_t _Locale);
   int __cdecl _wcsicoll(  const wchar_t * _Str1,   const wchar_t * _Str2);
   int __cdecl _wcsicoll_l(  const wchar_t * _Str1,   const wchar_t *_Str2,   _locale_t _Locale);
   int __cdecl _wcsncoll(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
   int __cdecl _wcsncoll_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount,   _locale_t _Locale);
   int __cdecl _wcsnicoll(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
   int __cdecl _wcsnicoll_l(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount,   _locale_t _Locale);




extern "C++" {
 

        inline wchar_t * __cdecl wcschr(  wchar_t *_Str, wchar_t _Ch)
        {return ((wchar_t *)wcschr((const wchar_t *)_Str, _Ch)); }
  inline wchar_t * __cdecl wcspbrk(  wchar_t *_Str,   const wchar_t *_Control)
        {return ((wchar_t *)wcspbrk((const wchar_t *)_Str, _Control)); }
  inline wchar_t * __cdecl wcsrchr(  wchar_t *_Str,   wchar_t _Ch)
        {return ((wchar_t *)wcsrchr((const wchar_t *)_Str, _Ch)); }
   

        inline wchar_t * __cdecl wcsstr(  wchar_t *_Str,   const wchar_t *_SubStr)
        {return ((wchar_t *)wcsstr((const wchar_t *)_Str, _SubStr)); }
}
#line 388 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"
#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"






#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"

  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsdup" ". See online help for details."))  wchar_t * __cdecl wcsdup(  const wchar_t * _Str);



#line 402 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"





  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicmp" ". See online help for details."))  int __cdecl wcsicmp(  const wchar_t * _Str1,   const wchar_t * _Str2);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnicmp" ". See online help for details."))  int __cdecl wcsnicmp(  const wchar_t * _Str1,   const wchar_t * _Str2,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsnset" ". See online help for details."))  wchar_t * __cdecl wcsnset(  wchar_t * _Str,   wchar_t _Val,   size_t _MaxCount);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsrev" ". See online help for details."))  wchar_t * __cdecl wcsrev(  wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsset" ". See online help for details."))  wchar_t * __cdecl wcsset(  wchar_t * _Str, wchar_t _Val);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcslwr" ". See online help for details."))  wchar_t * __cdecl wcslwr(  wchar_t * _Str);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsupr" ". See online help for details."))  wchar_t * __cdecl wcsupr(  wchar_t * _Str);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_wcsicoll" ". See online help for details."))  int __cdecl wcsicoll(  const wchar_t * _Str1,   const wchar_t * _Str2);

#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"


#line 420 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"



}
#line 425 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"

#line 427 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\string.h"

#line 147 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"



__inline int InlineIsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
   return (
      ((unsigned long *) &rguid1)[0] == ((unsigned long *) &rguid2)[0] &&
      ((unsigned long *) &rguid1)[1] == ((unsigned long *) &rguid2)[1] &&
      ((unsigned long *) &rguid1)[2] == ((unsigned long *) &rguid2)[2] &&
      ((unsigned long *) &rguid1)[3] == ((unsigned long *) &rguid2)[3]);
}

__inline int IsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
    return !memcmp(&rguid1, &rguid2, sizeof(GUID));
}











#line 175 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"

















__inline bool operator==(const GUID & guidOne, const GUID & guidOther)
{
    return !!IsEqualGUID(guidOne,guidOther);
}

__inline bool operator!=(const GUID & guidOne, const GUID & guidOther)
{
    return !(guidOne == guidOther);
}
#line 202 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"
#line 203 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"
#line 204 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"
#line 205 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"
#line 206 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"
#line 1026 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




typedef struct  _OBJECTID {     
    GUID Lineage;
    DWORD Uniquifier;
} OBJECTID;
#line 1035 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"








































































#pragma region Application Family




extern "C++" 
template <typename T, size_t N>
char (*RtlpNumberOf(  T (&)[N] ))[N];



#line 1124 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma endregion











































#line 1169 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





#line 1175 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"









































#line 1217 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

























typedef
 

EXCEPTION_DISPOSITION
__stdcall
EXCEPTION_ROUTINE (
      struct _EXCEPTION_RECORD *ExceptionRecord,
      PVOID EstablisherFrame,
      struct _CONTEXT *ContextRecord,
      PVOID DispatcherContext
    );

typedef EXCEPTION_ROUTINE *PEXCEPTION_ROUTINE;























































































































































































































































































































































































































































































































































































































































































































































































#line 2015 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
























#line 2040 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





















#line 2062 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"















  

























































#line 2136 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
  
#line 2138 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 2139 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





typedef ULONG_PTR KSPIN_LOCK;
typedef KSPIN_LOCK *PKSPIN_LOCK;






typedef struct __declspec(align(16)) _M128A {
    ULONGLONG Low;
    LONGLONG High;
} M128A, *PM128A;





typedef struct __declspec(align(16)) _XSAVE_FORMAT {
    WORD   ControlWord;
    WORD   StatusWord;
    BYTE  TagWord;
    BYTE  Reserved1;
    WORD   ErrorOpcode;
    DWORD ErrorOffset;
    WORD   ErrorSelector;
    WORD   Reserved2;
    DWORD DataOffset;
    WORD   DataSelector;
    WORD   Reserved3;
    DWORD MxCsr;
    DWORD MxCsr_Mask;
    M128A FloatRegisters[8];






#line 2183 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

    M128A XmmRegisters[8];
    BYTE  Reserved4[220];

    
    
    
    

    DWORD   Cr0NpxState;

#line 2195 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

} XSAVE_FORMAT, *PXSAVE_FORMAT;

typedef struct __declspec(align(8)) _XSAVE_AREA_HEADER {
    DWORD64 Mask;
    DWORD64 Reserved[7];
} XSAVE_AREA_HEADER, *PXSAVE_AREA_HEADER;

typedef struct __declspec(align(16)) _XSAVE_AREA {
    XSAVE_FORMAT LegacyState;
    XSAVE_AREA_HEADER Header;
} XSAVE_AREA, *PXSAVE_AREA;

typedef struct _XSTATE_CONTEXT {
    DWORD64 Mask;
    DWORD Length;
    DWORD Reserved1;
      PXSAVE_AREA Area;


    DWORD Reserved2;
#line 2217 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

    PVOID Buffer;


    DWORD Reserved3;
#line 2223 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

} XSTATE_CONTEXT, *PXSTATE_CONTEXT;





typedef struct _SCOPE_TABLE_AMD64 {
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_AMD64, *PSCOPE_TABLE_AMD64;












































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































typedef struct _SCOPE_TABLE_ARM {
    DWORD Count;
    struct
    {
        DWORD BeginAddress;
        DWORD EndAddress;
        DWORD HandlerAddress;
        DWORD JumpTarget;
    } ScopeRecord[1];
} SCOPE_TABLE_ARM, *PSCOPE_TABLE_ARM;













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































extern "C" {
#line 4645 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


















#line 4664 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




















#line 4685 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





void
__int2c (
    void
    );

#pragma intrinsic(__int2c)





#line 4702 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"























#line 4726 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 4728 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"










































#line 4771 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 4772 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


}
#line 4776 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





































#pragma warning(push)
#line 4815 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma warning(disable:4164)   
                                

#pragma function(_enable)
#pragma function(_disable)
#line 4821 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


#pragma warning(pop)


#line 4827 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 4829 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 4830 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





extern "C" {
#line 4837 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





















 
BOOLEAN
_bittest (
      LONG const *Base,
      LONG Offset
    );

BOOLEAN
_bittestandcomplement (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_bittestandset (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_bittestandreset (
      LONG *Base,
      LONG Offset
    );

BOOLEAN
_interlockedbittestandset (
       LONG volatile *Base,
      LONG Offset
    );

BOOLEAN
_interlockedbittestandreset (
       LONG volatile *Base,
      LONG Offset
    );

#pragma intrinsic(_bittest)
#pragma intrinsic(_bittestandcomplement)
#pragma intrinsic(_bittestandset)
#pragma intrinsic(_bittestandreset)
#pragma intrinsic(_interlockedbittestandset)
#pragma intrinsic(_interlockedbittestandreset)








 
BOOLEAN
_BitScanForward (
      DWORD *Index,
      DWORD Mask
    );

 
BOOLEAN
_BitScanReverse (
      DWORD *Index,
      DWORD Mask
    );

#pragma intrinsic(_BitScanForward)
#pragma intrinsic(_BitScanReverse)





































#line 4963 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





SHORT
_InterlockedExchange16 (
       SHORT volatile *Destination,
      SHORT ExChange
    );

#pragma intrinsic(_InterlockedExchange16)

#line 4977 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"












SHORT
_InterlockedAnd16 (
       SHORT volatile *Destination,
      SHORT Value
    );

SHORT
_InterlockedCompareExchange16 (
       SHORT volatile *Destination,
      SHORT ExChange,
      SHORT Comperand
    );

SHORT
_InterlockedOr16 (
       SHORT volatile *Destination,
      SHORT Value
    );

SHORT
_InterlockedIncrement16 (
       SHORT volatile *Destination
    );

SHORT
_InterlockedDecrement16 (
       SHORT volatile *Destination
    );

#pragma intrinsic(_InterlockedAnd16)
#pragma intrinsic(_InterlockedCompareExchange16)
#pragma intrinsic(_InterlockedOr16)
#pragma intrinsic(_InterlockedIncrement16)
#pragma intrinsic(_InterlockedDecrement16)

#line 5025 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


#pragma warning(push)
#pragma warning(disable:4035 4793)

__forceinline
BOOLEAN
InterlockedBitTestAndComplement (
       LONG volatile *Base,
      LONG Bit
    )
{
    __asm {
           mov eax, Bit
           mov ecx, Base
           lock btc [ecx], eax
           setc al
    };
}
#pragma warning(pop)
#line 5046 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"











BYTE 
__readfsbyte (
      DWORD Offset
    );

WORD  
__readfsword (
      DWORD Offset
    );

DWORD
__readfsdword (
      DWORD Offset
    );

void
__writefsbyte (
      DWORD Offset,
      BYTE  Data
    );

void
__writefsword (
      DWORD Offset,
      WORD   Data
    );

void
__writefsdword (
      DWORD Offset,
      DWORD Data
    );

#pragma intrinsic(__readfsbyte)
#pragma intrinsic(__readfsword)
#pragma intrinsic(__readfsdword)
#pragma intrinsic(__writefsbyte)
#pragma intrinsic(__writefsword)
#pragma intrinsic(__writefsdword)

#line 5098 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





void
__incfsbyte (
      DWORD Offset
    );

void
__addfsbyte (
      DWORD Offset,
      BYTE  Value
    );

void
__incfsword (
      DWORD Offset
    );

void
__addfsword (
      DWORD Offset,
      WORD   Value
    );

void
__incfsdword (
      DWORD Offset
    );

void
__addfsdword (
      DWORD Offset,
      DWORD Value
    );

#pragma intrinsic(__incfsbyte)
#pragma intrinsic(__addfsbyte)
#pragma intrinsic(__incfsword)
#pragma intrinsic(__addfsword)
#pragma intrinsic(__incfsdword)
#pragma intrinsic(__addfsdword)

#line 5144 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 5146 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




void
_mm_pause (
    void
    );

#pragma intrinsic(_mm_pause)









#line 5166 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


}
#line 5170 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 5172 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





#pragma warning( push )
#pragma warning( disable : 4793 )
__forceinline
void
MemoryBarrier (
    void
    )
{
    LONG Barrier;
    __asm {
        xchg Barrier, eax
    }
}
#pragma warning( pop )

#line 5193 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"























DWORD64
__readpmc (
      DWORD Counter
    );

#pragma intrinsic(__readpmc)
















#line 5239 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"









DWORD64
__rdtsc (
    void
    );

#pragma intrinsic(__rdtsc)













#line 5268 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





__inline PVOID GetFiberData( void )    { return *(PVOID *) (ULONG_PTR) __readfsdword (0x10);}
__inline PVOID GetCurrentFiber( void ) { return (PVOID) (ULONG_PTR) __readfsdword (0x10);}


















#line 5294 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


#line 5297 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






















































#line 5352 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef struct _FLOATING_SAVE_AREA {
    DWORD   ControlWord;
    DWORD   StatusWord;
    DWORD   TagWord;
    DWORD   ErrorOffset;
    DWORD   ErrorSelector;
    DWORD   DataOffset;
    DWORD   DataSelector;
    BYTE    RegisterArea[80];
    DWORD   Cr0NpxState;
} FLOATING_SAVE_AREA;

typedef FLOATING_SAVE_AREA *PFLOATING_SAVE_AREA;









typedef char __C_ASSERT__[(sizeof(XSAVE_FORMAT) == 512)?1:-1];

#line 5378 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack4.h"


#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack4.h"
#line 34 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack4.h"
#line 5383 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"











typedef struct _CONTEXT {

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DWORD ContextFlags;

    
    
    
    
    

    DWORD   Dr0;
    DWORD   Dr1;
    DWORD   Dr2;
    DWORD   Dr3;
    DWORD   Dr6;
    DWORD   Dr7;

    
    
    
    

    FLOATING_SAVE_AREA FloatSave;

    
    
    
    

    DWORD   SegGs;
    DWORD   SegFs;
    DWORD   SegEs;
    DWORD   SegDs;

    
    
    
    

    DWORD   Edi;
    DWORD   Esi;
    DWORD   Ebx;
    DWORD   Edx;
    DWORD   Ecx;
    DWORD   Eax;

    
    
    
    

    DWORD   Ebp;
    DWORD   Eip;
    DWORD   SegCs;              
    DWORD   EFlags;             
    DWORD   Esp;
    DWORD   SegSs;

    
    
    
    
    

    BYTE    ExtendedRegisters[512];

} CONTEXT;

typedef CONTEXT *PCONTEXT;

#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"
#line 5483 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


#line 5486 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





typedef struct _LDT_ENTRY {
    WORD    LimitLow;
    WORD    BaseLow;
    union {
        struct {
            BYTE    BaseMid;
            BYTE    Flags1;     
            BYTE    Flags2;     
            BYTE    BaseHi;
        } Bytes;
        struct {
            DWORD   BaseMid : 8;
            DWORD   Type : 5;
            DWORD   Dpl : 2;
            DWORD   Pres : 1;
            DWORD   LimitHi : 4;
            DWORD   Sys : 1;
            DWORD   Reserved_0 : 1;
            DWORD   Default_Big : 1;
            DWORD   Granularity : 1;
            DWORD   BaseHi : 8;
        } Bits;
    } HighWord;
} LDT_ENTRY, *PLDT_ENTRY;

#line 5517 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 6719 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


























































































































































#line 6874 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
































































































































































































































































































































































































































































































































extern "C" {
#line 7388 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

__forceinline
CHAR
ReadAcquire8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
CHAR
ReadNoFence8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
SHORT
ReadAcquire16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
SHORT
ReadNoFence16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG
ReadAcquire (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG
ReadNoFence (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease (
       LONG volatile *Destination,
      LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence (
       LONG volatile *Destination,
      LONG Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
LONG64
ReadAcquire64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
LONG64
ReadNoFence64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *Source;
    return Value;
}

__forceinline
void
WriteRelease64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *Destination = Value;
    return;
}

__forceinline
void
WriteNoFence64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *Destination = Value;
    return;
}


}
#line 7608 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 7610 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





__forceinline
CHAR
ReadRaw8 (
       CHAR const volatile *Source
    )

{

    CHAR Value;

    Value = *(CHAR *)Source;
    return Value;
}

__forceinline
void
WriteRaw8 (
       CHAR volatile *Destination,
      CHAR Value
    )

{

    *(CHAR *)Destination = Value;
    return;
}

__forceinline
SHORT
ReadRaw16 (
       SHORT const volatile *Source
    )

{

    SHORT Value;

    Value = *(SHORT *)Source;
    return Value;
}

__forceinline
void
WriteRaw16 (
       SHORT volatile *Destination,
      SHORT Value
    )

{

    *(SHORT *)Destination = Value;
    return;
}

__forceinline
LONG
ReadRaw (
       LONG const volatile *Source
    )

{

    LONG Value;

    Value = *(LONG *)Source;
    return Value;
}

__forceinline
void
WriteRaw (
       LONG volatile *Destination,
      LONG Value
    )

{

    *(LONG *)Destination = Value;
    return;
}

__forceinline
LONG64
ReadRaw64 (
       LONG64 const volatile *Source
    )

{

    LONG64 Value;

    Value = *(LONG64 *)Source;
    return Value;
}

__forceinline
void
WriteRaw64 (
       LONG64 volatile *Destination,
      LONG64 Value
    )

{

    *(LONG64 *)Destination = Value;
    return;
}





__forceinline
BYTE 
ReadUCharAcquire (
       BYTE  const volatile *Source
    )

{

    return (BYTE )ReadAcquire8((PCHAR)Source);
}

__forceinline
BYTE 
ReadUCharNoFence (
       BYTE  const volatile *Source
    )

{

    return (BYTE )ReadNoFence8((PCHAR)Source);
}

__forceinline
BYTE 
ReadUCharRaw (
       BYTE  const volatile *Source
    )

{

    return (BYTE )ReadRaw8((PCHAR)Source);
}

__forceinline
void
WriteUCharRelease (
       BYTE  volatile *Destination,
      BYTE  Value
    )

{

    WriteRelease8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharNoFence (
       BYTE  volatile *Destination,
      BYTE  Value
    )

{

    WriteNoFence8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
void
WriteUCharRaw (
       BYTE  volatile *Destination,
      BYTE  Value
    )

{

    WriteRaw8((PCHAR)Destination, (CHAR)Value);
    return;
}

__forceinline
WORD  
ReadUShortAcquire (
       WORD   const volatile *Source
    )

{

    return (WORD  )ReadAcquire16((PSHORT)Source);
}

__forceinline
WORD  
ReadUShortNoFence (
       WORD   const volatile *Source
    )

{

    return (WORD  )ReadNoFence16((PSHORT)Source);
}

__forceinline
WORD  
ReadUShortRaw (
       WORD   const volatile *Source
    )

{

    return (WORD  )ReadRaw16((PSHORT)Source);
}

__forceinline
void
WriteUShortRelease (
       WORD   volatile *Destination,
      WORD   Value
    )

{

    WriteRelease16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortNoFence (
       WORD   volatile *Destination,
      WORD   Value
    )

{

    WriteNoFence16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
void
WriteUShortRaw (
       WORD   volatile *Destination,
      WORD   Value
    )

{

    WriteRaw16((PSHORT)Destination, (SHORT)Value);
    return;
}

__forceinline
DWORD
ReadULongAcquire (
       DWORD const volatile *Source
    )

{

    return (DWORD)ReadAcquire((PLONG)Source);
}

__forceinline
DWORD
ReadULongNoFence (
       DWORD const volatile *Source
    )

{

    return (DWORD)ReadNoFence((PLONG)Source);
}

__forceinline
DWORD
ReadULongRaw (
       DWORD const volatile *Source
    )

{

    return (DWORD)ReadRaw((PLONG)Source);
}

__forceinline
void
WriteULongRelease (
       DWORD volatile *Destination,
      DWORD Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongNoFence (
       DWORD volatile *Destination,
      DWORD Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WriteULongRaw (
       DWORD volatile *Destination,
      DWORD Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
DWORD64
ReadULong64Acquire (
       DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadAcquire64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64NoFence (
       DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadNoFence64((PLONG64)Source);
}

__forceinline
DWORD64
ReadULong64Raw (
       DWORD64 const volatile *Source
    )

{

    return (DWORD64)ReadRaw64((PLONG64)Source);
}

__forceinline
void
WriteULong64Release (
       DWORD64 volatile *Destination,
      DWORD64 Value
    )

{

    WriteRelease64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64NoFence (
       DWORD64 volatile *Destination,
      DWORD64 Value
    )

{

    WriteNoFence64((PLONG64)Destination, (LONG64)Value);
    return;
}

__forceinline
void
WriteULong64Raw (
       DWORD64 volatile *Destination,
      DWORD64 Value
    )

{

    WriteRaw64((PLONG64)Destination, (LONG64)Value);
    return;
}















__forceinline
PVOID
ReadPointerAcquire (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadAcquire((PLONG)Source);
}

__forceinline
PVOID
ReadPointerNoFence (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadNoFence((PLONG)Source);
}

__forceinline
PVOID
ReadPointerRaw (
       PVOID const volatile *Source
    )

{

    return (PVOID)ReadRaw((PLONG)Source);
}

__forceinline
void
WritePointerRelease (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteRelease((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WritePointerNoFence (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteNoFence((PLONG)Destination, (LONG)Value);
    return;
}

__forceinline
void
WritePointerRaw (
       PVOID volatile *Destination,
      PVOID Value
    )

{

    WriteRaw((PLONG)Destination, (LONG)Value);
    return;
}



























































































































#line 8224 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 8226 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


#line 8229 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


























#line 8256 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"









typedef struct _WOW64_FLOATING_SAVE_AREA {
    DWORD   ControlWord;
    DWORD   StatusWord;
    DWORD   TagWord;
    DWORD   ErrorOffset;
    DWORD   ErrorSelector;
    DWORD   DataOffset;
    DWORD   DataSelector;
    BYTE    RegisterArea[80];
    DWORD   Cr0NpxState;
} WOW64_FLOATING_SAVE_AREA;

typedef WOW64_FLOATING_SAVE_AREA *PWOW64_FLOATING_SAVE_AREA;

#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack4.h"


#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack4.h"
#line 34 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack4.h"
#line 8280 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"











typedef struct _WOW64_CONTEXT {

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DWORD ContextFlags;

    
    
    
    
    

    DWORD   Dr0;
    DWORD   Dr1;
    DWORD   Dr2;
    DWORD   Dr3;
    DWORD   Dr6;
    DWORD   Dr7;

    
    
    
    

    WOW64_FLOATING_SAVE_AREA FloatSave;

    
    
    
    

    DWORD   SegGs;
    DWORD   SegFs;
    DWORD   SegEs;
    DWORD   SegDs;

    
    
    
    

    DWORD   Edi;
    DWORD   Esi;
    DWORD   Ebx;
    DWORD   Edx;
    DWORD   Ecx;
    DWORD   Eax;

    
    
    
    

    DWORD   Ebp;
    DWORD   Eip;
    DWORD   SegCs;              
    DWORD   EFlags;             
    DWORD   Esp;
    DWORD   SegSs;

    
    
    
    
    

    BYTE    ExtendedRegisters[512];

} WOW64_CONTEXT;

typedef WOW64_CONTEXT *PWOW64_CONTEXT;

#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"
#line 8380 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


typedef struct _WOW64_LDT_ENTRY {
    WORD    LimitLow;
    WORD    BaseLow;
    union {
        struct {
            BYTE    BaseMid;
            BYTE    Flags1;     
            BYTE    Flags2;     
            BYTE    BaseHi;
        } Bytes;
        struct {
            DWORD   BaseMid : 8;
            DWORD   Type : 5;
            DWORD   Dpl : 2;
            DWORD   Pres : 1;
            DWORD   LimitHi : 4;
            DWORD   Sys : 1;
            DWORD   Reserved_0 : 1;
            DWORD   Default_Big : 1;
            DWORD   Granularity : 1;
            DWORD   BaseHi : 8;
        } Bits;
    } HighWord;
} WOW64_LDT_ENTRY, *PWOW64_LDT_ENTRY;

typedef struct _WOW64_DESCRIPTOR_TABLE_ENTRY {
    DWORD Selector;
    WOW64_LDT_ENTRY Descriptor;
} WOW64_DESCRIPTOR_TABLE_ENTRY, *PWOW64_DESCRIPTOR_TABLE_ENTRY;






















typedef struct _EXCEPTION_RECORD {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    struct _EXCEPTION_RECORD *ExceptionRecord;
    PVOID ExceptionAddress;
    DWORD NumberParameters;
    ULONG_PTR ExceptionInformation[15];
    } EXCEPTION_RECORD;

typedef EXCEPTION_RECORD *PEXCEPTION_RECORD;

typedef struct _EXCEPTION_RECORD32 {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    DWORD ExceptionRecord;
    DWORD ExceptionAddress;
    DWORD NumberParameters;
    DWORD ExceptionInformation[15];
} EXCEPTION_RECORD32, *PEXCEPTION_RECORD32;

typedef struct _EXCEPTION_RECORD64 {
    DWORD    ExceptionCode;
    DWORD ExceptionFlags;
    DWORD64 ExceptionRecord;
    DWORD64 ExceptionAddress;
    DWORD NumberParameters;
    DWORD __unusedAlignment;
    DWORD64 ExceptionInformation[15];
} EXCEPTION_RECORD64, *PEXCEPTION_RECORD64;





typedef struct _EXCEPTION_POINTERS {
    PEXCEPTION_RECORD ExceptionRecord;
    PCONTEXT ContextRecord;
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;

















#line 8489 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef PVOID PACCESS_TOKEN;            
typedef PVOID PSECURITY_DESCRIPTOR;     
typedef PVOID PSID;     
typedef PVOID PCLAIMS_BLOB;     







































typedef DWORD ACCESS_MASK;
typedef ACCESS_MASK *PACCESS_MASK;























































typedef struct _GENERIC_MAPPING {
    ACCESS_MASK GenericRead;
    ACCESS_MASK GenericWrite;
    ACCESS_MASK GenericExecute;
    ACCESS_MASK GenericAll;
} GENERIC_MAPPING;
typedef GENERIC_MAPPING *PGENERIC_MAPPING;












#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"
#line 8610 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef struct _LUID_AND_ATTRIBUTES {
    LUID Luid;
    DWORD Attributes;
    } LUID_AND_ATTRIBUTES, * PLUID_AND_ATTRIBUTES;
typedef LUID_AND_ATTRIBUTES LUID_AND_ATTRIBUTES_ARRAY[1];
typedef LUID_AND_ATTRIBUTES_ARRAY *PLUID_AND_ATTRIBUTES_ARRAY;

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 8619 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


































typedef struct _SID_IDENTIFIER_AUTHORITY {
    BYTE  Value[6];
} SID_IDENTIFIER_AUTHORITY, *PSID_IDENTIFIER_AUTHORITY;
#line 8657 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




typedef struct _SID {
   BYTE  Revision;
   BYTE  SubAuthorityCount;
   SID_IDENTIFIER_AUTHORITY IdentifierAuthority;



   DWORD SubAuthority[1];
#line 8670 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
} SID, *PISID;
#line 8672 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





                                                



#line 8682 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


typedef enum _SID_NAME_USE {
    SidTypeUser = 1,
    SidTypeGroup,
    SidTypeDomain,
    SidTypeAlias,
    SidTypeWellKnownGroup,
    SidTypeDeletedAccount,
    SidTypeInvalid,
    SidTypeUnknown,
    SidTypeComputer,
    SidTypeLabel
} SID_NAME_USE, *PSID_NAME_USE;

typedef struct _SID_AND_ATTRIBUTES {



    PSID Sid;
#line 8703 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
    DWORD Attributes;
    } SID_AND_ATTRIBUTES, * PSID_AND_ATTRIBUTES;

typedef SID_AND_ATTRIBUTES SID_AND_ATTRIBUTES_ARRAY[1];
typedef SID_AND_ATTRIBUTES_ARRAY *PSID_AND_ATTRIBUTES_ARRAY;


typedef ULONG_PTR SID_HASH_ENTRY, *PSID_HASH_ENTRY;

typedef struct _SID_AND_ATTRIBUTES_HASH {
    DWORD SidCount;
    PSID_AND_ATTRIBUTES SidAttr;
    SID_HASH_ENTRY Hash[32];
} SID_AND_ATTRIBUTES_HASH, *PSID_AND_ATTRIBUTES_HASH;


















































































































































































































































































































































typedef enum {

    WinNullSid                                  = 0,
    WinWorldSid                                 = 1,
    WinLocalSid                                 = 2,
    WinCreatorOwnerSid                          = 3,
    WinCreatorGroupSid                          = 4,
    WinCreatorOwnerServerSid                    = 5,
    WinCreatorGroupServerSid                    = 6,
    WinNtAuthoritySid                           = 7,
    WinDialupSid                                = 8,
    WinNetworkSid                               = 9,
    WinBatchSid                                 = 10,
    WinInteractiveSid                           = 11,
    WinServiceSid                               = 12,
    WinAnonymousSid                             = 13,
    WinProxySid                                 = 14,
    WinEnterpriseControllersSid                 = 15,
    WinSelfSid                                  = 16,
    WinAuthenticatedUserSid                     = 17,
    WinRestrictedCodeSid                        = 18,
    WinTerminalServerSid                        = 19,
    WinRemoteLogonIdSid                         = 20,
    WinLogonIdsSid                              = 21,
    WinLocalSystemSid                           = 22,
    WinLocalServiceSid                          = 23,
    WinNetworkServiceSid                        = 24,
    WinBuiltinDomainSid                         = 25,
    WinBuiltinAdministratorsSid                 = 26,
    WinBuiltinUsersSid                          = 27,
    WinBuiltinGuestsSid                         = 28,
    WinBuiltinPowerUsersSid                     = 29,
    WinBuiltinAccountOperatorsSid               = 30,
    WinBuiltinSystemOperatorsSid                = 31,
    WinBuiltinPrintOperatorsSid                 = 32,
    WinBuiltinBackupOperatorsSid                = 33,
    WinBuiltinReplicatorSid                     = 34,
    WinBuiltinPreWindows2000CompatibleAccessSid = 35,
    WinBuiltinRemoteDesktopUsersSid             = 36,
    WinBuiltinNetworkConfigurationOperatorsSid  = 37,
    WinAccountAdministratorSid                  = 38,
    WinAccountGuestSid                          = 39,
    WinAccountKrbtgtSid                         = 40,
    WinAccountDomainAdminsSid                   = 41,
    WinAccountDomainUsersSid                    = 42,
    WinAccountDomainGuestsSid                   = 43,
    WinAccountComputersSid                      = 44,
    WinAccountControllersSid                    = 45,
    WinAccountCertAdminsSid                     = 46,
    WinAccountSchemaAdminsSid                   = 47,
    WinAccountEnterpriseAdminsSid               = 48,
    WinAccountPolicyAdminsSid                   = 49,
    WinAccountRasAndIasServersSid               = 50,
    WinNTLMAuthenticationSid                    = 51,
    WinDigestAuthenticationSid                  = 52,
    WinSChannelAuthenticationSid                = 53,
    WinThisOrganizationSid                      = 54,
    WinOtherOrganizationSid                     = 55,
    WinBuiltinIncomingForestTrustBuildersSid    = 56,
    WinBuiltinPerfMonitoringUsersSid            = 57,
    WinBuiltinPerfLoggingUsersSid               = 58,
    WinBuiltinAuthorizationAccessSid            = 59,
    WinBuiltinTerminalServerLicenseServersSid   = 60,
    WinBuiltinDCOMUsersSid                      = 61,
    WinBuiltinIUsersSid                         = 62,
    WinIUserSid                                 = 63,
    WinBuiltinCryptoOperatorsSid                = 64,
    WinUntrustedLabelSid                        = 65,
    WinLowLabelSid                              = 66,
    WinMediumLabelSid                           = 67,
    WinHighLabelSid                             = 68,
    WinSystemLabelSid                           = 69,
    WinWriteRestrictedCodeSid                   = 70,
    WinCreatorOwnerRightsSid                    = 71,
    WinCacheablePrincipalsGroupSid              = 72,
    WinNonCacheablePrincipalsGroupSid           = 73,
    WinEnterpriseReadonlyControllersSid         = 74,
    WinAccountReadonlyControllersSid            = 75,
    WinBuiltinEventLogReadersGroup              = 76,
    WinNewEnterpriseReadonlyControllersSid      = 77,
    WinBuiltinCertSvcDComAccessGroup            = 78,
    WinMediumPlusLabelSid                       = 79,
    WinLocalLogonSid                            = 80,
    WinConsoleLogonSid                          = 81,
    WinThisOrganizationCertificateSid           = 82,
    WinApplicationPackageAuthoritySid           = 83,
    WinBuiltinAnyPackageSid                     = 84,
    WinCapabilityInternetClientSid              = 85,
    WinCapabilityInternetClientServerSid        = 86,
    WinCapabilityPrivateNetworkClientServerSid  = 87,
    WinCapabilityPicturesLibrarySid             = 88,
    WinCapabilityVideosLibrarySid               = 89,
    WinCapabilityMusicLibrarySid                = 90,
    WinCapabilityDocumentsLibrarySid            = 91,
    WinCapabilitySharedUserCertificatesSid      = 92,
    WinCapabilityEnterpriseAuthenticationSid    = 93,
    WinCapabilityRemovableStorageSid            = 94,
    WinBuiltinRDSRemoteAccessServersSid         = 95,
    WinBuiltinRDSEndpointServersSid             = 96,
    WinBuiltinRDSManagementServersSid           = 97,
    WinUserModeDriversSid                       = 98,
    WinBuiltinHyperVAdminsSid                   = 99,
    WinAccountCloneableControllersSid           = 100,
    WinBuiltinAccessControlAssistanceOperatorsSid = 101,
    WinBuiltinRemoteManagementUsersSid          = 102,
    WinAuthenticationAuthorityAssertedSid       = 103,
    WinAuthenticationServiceAssertedSid         = 104,
} WELL_KNOWN_SID_TYPE;
































































































typedef struct _ACL {
    BYTE  AclRevision;
    BYTE  Sbz1;
    WORD   AclSize;
    WORD   AceCount;
    WORD   Sbz2;
} ACL;
typedef ACL *PACL;






















typedef struct _ACE_HEADER {
    BYTE  AceType;
    BYTE  AceFlags;
    WORD   AceSize;
} ACE_HEADER;
typedef ACE_HEADER *PACE_HEADER;











































































































typedef struct _ACCESS_ALLOWED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_ALLOWED_ACE;

typedef ACCESS_ALLOWED_ACE *PACCESS_ALLOWED_ACE;

typedef struct _ACCESS_DENIED_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} ACCESS_DENIED_ACE;
typedef ACCESS_DENIED_ACE *PACCESS_DENIED_ACE;

typedef struct _SYSTEM_AUDIT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_AUDIT_ACE;
typedef SYSTEM_AUDIT_ACE *PSYSTEM_AUDIT_ACE;

typedef struct _SYSTEM_ALARM_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_ALARM_ACE;
typedef SYSTEM_ALARM_ACE *PSYSTEM_ALARM_ACE;

typedef struct _SYSTEM_RESOURCE_ATTRIBUTE_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_RESOURCE_ATTRIBUTE_ACE, *PSYSTEM_RESOURCE_ATTRIBUTE_ACE;

typedef struct _SYSTEM_SCOPED_POLICY_ID_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_SCOPED_POLICY_ID_ACE, *PSYSTEM_SCOPED_POLICY_ID_ACE;

typedef struct _SYSTEM_MANDATORY_LABEL_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
} SYSTEM_MANDATORY_LABEL_ACE, *PSYSTEM_MANDATORY_LABEL_ACE;











typedef struct _ACCESS_ALLOWED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_ALLOWED_OBJECT_ACE, *PACCESS_ALLOWED_OBJECT_ACE;

typedef struct _ACCESS_DENIED_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} ACCESS_DENIED_OBJECT_ACE, *PACCESS_DENIED_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_AUDIT_OBJECT_ACE, *PSYSTEM_AUDIT_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
} SYSTEM_ALARM_OBJECT_ACE, *PSYSTEM_ALARM_OBJECT_ACE;






typedef struct _ACCESS_ALLOWED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} ACCESS_ALLOWED_CALLBACK_ACE, *PACCESS_ALLOWED_CALLBACK_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} ACCESS_DENIED_CALLBACK_ACE, *PACCESS_DENIED_CALLBACK_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_AUDIT_CALLBACK_ACE, *PSYSTEM_AUDIT_CALLBACK_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD SidStart;
    
} SYSTEM_ALARM_CALLBACK_ACE, *PSYSTEM_ALARM_CALLBACK_ACE;

typedef struct _ACCESS_ALLOWED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} ACCESS_ALLOWED_CALLBACK_OBJECT_ACE, *PACCESS_ALLOWED_CALLBACK_OBJECT_ACE;

typedef struct _ACCESS_DENIED_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} ACCESS_DENIED_CALLBACK_OBJECT_ACE, *PACCESS_DENIED_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_AUDIT_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} SYSTEM_AUDIT_CALLBACK_OBJECT_ACE, *PSYSTEM_AUDIT_CALLBACK_OBJECT_ACE;

typedef struct _SYSTEM_ALARM_CALLBACK_OBJECT_ACE {
    ACE_HEADER Header;
    ACCESS_MASK Mask;
    DWORD Flags;
    GUID ObjectType;
    GUID InheritedObjectType;
    DWORD SidStart;
    
} SYSTEM_ALARM_CALLBACK_OBJECT_ACE, *PSYSTEM_ALARM_CALLBACK_OBJECT_ACE;















typedef enum _ACL_INFORMATION_CLASS {
    AclRevisionInformation = 1,
    AclSizeInformation
} ACL_INFORMATION_CLASS;






typedef struct _ACL_REVISION_INFORMATION {
    DWORD AclRevision;
} ACL_REVISION_INFORMATION;
typedef ACL_REVISION_INFORMATION *PACL_REVISION_INFORMATION;





typedef struct _ACL_SIZE_INFORMATION {
    DWORD AceCount;
    DWORD AclBytesInUse;
    DWORD AclBytesFree;
} ACL_SIZE_INFORMATION;
typedef ACL_SIZE_INFORMATION *PACL_SIZE_INFORMATION;


























typedef WORD   SECURITY_DESCRIPTOR_CONTROL, *PSECURITY_DESCRIPTOR_CONTROL;

























































































typedef struct _SECURITY_DESCRIPTOR_RELATIVE {
    BYTE  Revision;
    BYTE  Sbz1;
    SECURITY_DESCRIPTOR_CONTROL Control;
    DWORD Owner;
    DWORD Group;
    DWORD Sacl;
    DWORD Dacl;
    } SECURITY_DESCRIPTOR_RELATIVE, *PISECURITY_DESCRIPTOR_RELATIVE;

typedef struct _SECURITY_DESCRIPTOR {
   BYTE  Revision;
   BYTE  Sbz1;
   SECURITY_DESCRIPTOR_CONTROL Control;
   PSID Owner;
   PSID Group;
   PACL Sacl;
   PACL Dacl;

   } SECURITY_DESCRIPTOR, *PISECURITY_DESCRIPTOR;


















































typedef struct _OBJECT_TYPE_LIST {
    WORD   Level;
    WORD   Sbz;
    GUID *ObjectType;
} OBJECT_TYPE_LIST, *POBJECT_TYPE_LIST;















typedef enum _AUDIT_EVENT_TYPE {
    AuditEventObjectAccess,
    AuditEventDirectoryServiceAccess
} AUDIT_EVENT_TYPE, *PAUDIT_EVENT_TYPE;


















































typedef struct _PRIVILEGE_SET {
    DWORD PrivilegeCount;
    DWORD Control;
    LUID_AND_ATTRIBUTES Privilege[1];
    } PRIVILEGE_SET, * PPRIVILEGE_SET;
















typedef enum _ACCESS_REASON_TYPE{

    AccessReasonNone                    = 0x00000000,   

    
    
    
    
    
    AccessReasonAllowedAce                  = 0x00010000,   
    AccessReasonDeniedAce                   = 0x00020000,   

    AccessReasonAllowedParentAce            = 0x00030000,   
    AccessReasonDeniedParentAce             = 0x00040000,   

    AccessReasonNotGrantedByCape            = 0x00050000,   
    AccessReasonNotGrantedByParentCape      = 0x00060000,   

    AccessReasonNotGrantedToAppContainer    = 0x00070000,   

    AccessReasonMissingPrivilege            = 0x00100000,
    AccessReasonFromPrivilege               = 0x00200000,


    AccessReasonIntegrityLevel              = 0x00300000,

    AccessReasonOwnership                   = 0x00400000,

    AccessReasonNullDacl                    = 0x00500000,
    AccessReasonEmptyDacl                   = 0x00600000,

    AccessReasonNoSD                        = 0x00700000,
    AccessReasonNoGrant                     = 0x00800000    
}
ACCESS_REASON_TYPE;

 












typedef DWORD ACCESS_REASON;

typedef struct _ACCESS_REASONS{
        ACCESS_REASON Data[32];
} ACCESS_REASONS, *PACCESS_REASONS;
























typedef struct _SE_SECURITY_DESCRIPTOR
{
    DWORD Size;
    DWORD Flags;
    PSECURITY_DESCRIPTOR SecurityDescriptor;
} SE_SECURITY_DESCRIPTOR, *PSE_SECURITY_DESCRIPTOR;

typedef struct _SE_ACCESS_REQUEST
{
    DWORD Size;
    PSE_SECURITY_DESCRIPTOR SeSecurityDescriptor;
    ACCESS_MASK DesiredAccess;
    ACCESS_MASK PreviouslyGrantedAccess;
    PSID PrincipalSelfSid;      
    PGENERIC_MAPPING GenericMapping;
    DWORD ObjectTypeListCount;
    POBJECT_TYPE_LIST ObjectTypeList;
} SE_ACCESS_REQUEST, *PSE_ACCESS_REQUEST;


typedef struct _SE_ACCESS_REPLY
{
    DWORD Size;
    DWORD ResultListCount;  
    PACCESS_MASK GrantedAccess;
    PDWORD    AccessStatus;
    PACCESS_REASONS AccessReason;
    PPRIVILEGE_SET* Privileges;
} SE_ACCESS_REPLY, *PSE_ACCESS_REPLY;






























































typedef enum _SECURITY_IMPERSONATION_LEVEL {
    SecurityAnonymous,
    SecurityIdentification,
    SecurityImpersonation,
    SecurityDelegation
    } SECURITY_IMPERSONATION_LEVEL, * PSECURITY_IMPERSONATION_LEVEL;












































#line 10109 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

















typedef enum _TOKEN_TYPE {
    TokenPrimary = 1,
    TokenImpersonation
    } TOKEN_TYPE;
typedef TOKEN_TYPE *PTOKEN_TYPE;







typedef enum _TOKEN_ELEVATION_TYPE {
    TokenElevationTypeDefault = 1,
    TokenElevationTypeFull,
    TokenElevationTypeLimited,
} TOKEN_ELEVATION_TYPE, *PTOKEN_ELEVATION_TYPE;






typedef enum _TOKEN_INFORMATION_CLASS {
    TokenUser = 1,
    TokenGroups,
    TokenPrivileges,
    TokenOwner,
    TokenPrimaryGroup,
    TokenDefaultDacl,
    TokenSource,
    TokenType,
    TokenImpersonationLevel,
    TokenStatistics,
    TokenRestrictedSids,
    TokenSessionId,
    TokenGroupsAndPrivileges,
    TokenSessionReference,
    TokenSandBoxInert,
    TokenAuditPolicy,
    TokenOrigin,
    TokenElevationType,
    TokenLinkedToken,
    TokenElevation,
    TokenHasRestrictions,
    TokenAccessInformation,
    TokenVirtualizationAllowed,
    TokenVirtualizationEnabled,
    TokenIntegrityLevel,
    TokenUIAccess,
    TokenMandatoryPolicy,
    TokenLogonSid,
    TokenIsAppContainer,
    TokenCapabilities,
    TokenAppContainerSid,
    TokenAppContainerNumber,
    TokenUserClaimAttributes,
    TokenDeviceClaimAttributes,
    TokenRestrictedUserClaimAttributes,
    TokenRestrictedDeviceClaimAttributes,
    TokenDeviceGroups,
    TokenRestrictedDeviceGroups,
    TokenSecurityAttributes,
    TokenIsRestricted,
    MaxTokenInfoClass  
} TOKEN_INFORMATION_CLASS, *PTOKEN_INFORMATION_CLASS;






typedef struct _TOKEN_USER {
    SID_AND_ATTRIBUTES User;
} TOKEN_USER, *PTOKEN_USER;

typedef struct _TOKEN_GROUPS {
    DWORD GroupCount;



    SID_AND_ATTRIBUTES Groups[1];
#line 10209 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
} TOKEN_GROUPS, *PTOKEN_GROUPS;


typedef struct _TOKEN_PRIVILEGES {
    DWORD PrivilegeCount;
    LUID_AND_ATTRIBUTES Privileges[1];
} TOKEN_PRIVILEGES, *PTOKEN_PRIVILEGES;


typedef struct _TOKEN_OWNER {
    PSID Owner;
} TOKEN_OWNER, *PTOKEN_OWNER;


typedef struct _TOKEN_PRIMARY_GROUP {
    PSID PrimaryGroup;
} TOKEN_PRIMARY_GROUP, *PTOKEN_PRIMARY_GROUP;


typedef struct _TOKEN_DEFAULT_DACL {
    PACL DefaultDacl;
} TOKEN_DEFAULT_DACL, *PTOKEN_DEFAULT_DACL;

typedef struct _TOKEN_USER_CLAIMS {
    PCLAIMS_BLOB UserClaims;
} TOKEN_USER_CLAIMS, *PTOKEN_USER_CLAIMS;

typedef struct _TOKEN_DEVICE_CLAIMS {
    PCLAIMS_BLOB DeviceClaims;
} TOKEN_DEVICE_CLAIMS, *PTOKEN_DEVICE_CLAIMS;

typedef struct _TOKEN_GROUPS_AND_PRIVILEGES {
    DWORD SidCount;
    DWORD SidLength;
    PSID_AND_ATTRIBUTES Sids;
    DWORD RestrictedSidCount;
    DWORD RestrictedSidLength;
    PSID_AND_ATTRIBUTES RestrictedSids;
    DWORD PrivilegeCount;
    DWORD PrivilegeLength;
    PLUID_AND_ATTRIBUTES Privileges;
    LUID AuthenticationId;
} TOKEN_GROUPS_AND_PRIVILEGES, *PTOKEN_GROUPS_AND_PRIVILEGES;

typedef struct _TOKEN_LINKED_TOKEN {
    HANDLE LinkedToken;
} TOKEN_LINKED_TOKEN, *PTOKEN_LINKED_TOKEN;

typedef struct _TOKEN_ELEVATION {
    DWORD TokenIsElevated;
} TOKEN_ELEVATION, *PTOKEN_ELEVATION;

typedef struct _TOKEN_MANDATORY_LABEL {
    SID_AND_ATTRIBUTES Label;
} TOKEN_MANDATORY_LABEL, *PTOKEN_MANDATORY_LABEL;








typedef struct _TOKEN_MANDATORY_POLICY {
    DWORD Policy;
} TOKEN_MANDATORY_POLICY, *PTOKEN_MANDATORY_POLICY;

typedef struct _TOKEN_ACCESS_INFORMATION {
    PSID_AND_ATTRIBUTES_HASH SidHash;
    PSID_AND_ATTRIBUTES_HASH RestrictedSidHash;
    PTOKEN_PRIVILEGES Privileges;
    LUID AuthenticationId;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    TOKEN_MANDATORY_POLICY MandatoryPolicy;
    DWORD Flags;
    DWORD AppContainerNumber;
    PSID PackageSid;
    PSID_AND_ATTRIBUTES_HASH CapabilitiesHash;
} TOKEN_ACCESS_INFORMATION, *PTOKEN_ACCESS_INFORMATION;







typedef struct _TOKEN_AUDIT_POLICY {
    BYTE  PerUserPolicy[(((56)) >> 1) + 1];
} TOKEN_AUDIT_POLICY, *PTOKEN_AUDIT_POLICY;



typedef struct _TOKEN_SOURCE {
    CHAR SourceName[8];
    LUID SourceIdentifier;
} TOKEN_SOURCE, *PTOKEN_SOURCE;


typedef struct _TOKEN_STATISTICS {
    LUID TokenId;
    LUID AuthenticationId;
    LARGE_INTEGER ExpirationTime;
    TOKEN_TYPE TokenType;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    DWORD DynamicCharged;
    DWORD DynamicAvailable;
    DWORD GroupCount;
    DWORD PrivilegeCount;
    LUID ModifiedId;
} TOKEN_STATISTICS, *PTOKEN_STATISTICS;



typedef struct _TOKEN_CONTROL {
    LUID TokenId;
    LUID AuthenticationId;
    LUID ModifiedId;
    TOKEN_SOURCE TokenSource;
} TOKEN_CONTROL, *PTOKEN_CONTROL;

typedef struct _TOKEN_ORIGIN {
    LUID OriginatingLogonSession ;
} TOKEN_ORIGIN, * PTOKEN_ORIGIN ;


typedef enum _MANDATORY_LEVEL {
    MandatoryLevelUntrusted = 0,
    MandatoryLevelLow,
    MandatoryLevelMedium,
    MandatoryLevelHigh,
    MandatoryLevelSystem,
    MandatoryLevelSecureProcess,
    MandatoryLevelCount
} MANDATORY_LEVEL, *PMANDATORY_LEVEL;

typedef struct _TOKEN_APPCONTAINER_INFORMATION {
    PSID TokenAppContainer;
} TOKEN_APPCONTAINER_INFORMATION, *PTOKEN_APPCONTAINER_INFORMATION;































typedef struct _CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE {
    DWORD64             Version;
    PWSTR               Name;
} CLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE, *PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE;








typedef struct _CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE {
    PVOID   pValue;         
    DWORD   ValueLength;    
} CLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE,
    *PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE;



































































typedef struct _CLAIM_SECURITY_ATTRIBUTE_V1 {

    
    
    
    

    PWSTR   Name; 

    
    
    

    WORD    ValueType;

    
    
    
    

    WORD    Reserved;

    
    
    

    DWORD   Flags;

    
    
    

    DWORD   ValueCount;

    
    
    

    union {
        PLONG64                                         pInt64;
        PDWORD64                                        pUint64;
        PWSTR                                           *ppString;
        PCLAIM_SECURITY_ATTRIBUTE_FQBN_VALUE            pFqbn;
        PCLAIM_SECURITY_ATTRIBUTE_OCTET_STRING_VALUE    pOctetString;
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_V1, *PCLAIM_SECURITY_ATTRIBUTE_V1;






typedef struct _CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1 {

    
    
    
    

    DWORD   Name;

    
    
    

    WORD    ValueType;

    
    
    
    

    WORD    Reserved;

    
    
    

    DWORD   Flags;

    
    
    

    DWORD   ValueCount;

    
    
    

    union {
        DWORD pInt64[1];
        DWORD pUint64[1];
        DWORD ppString[1];
        DWORD pFqbn[1];
        DWORD pOctetString[1];
    } Values;
} CLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1, *PCLAIM_SECURITY_ATTRIBUTE_RELATIVE_V1;





















typedef struct _CLAIM_SECURITY_ATTRIBUTES_INFORMATION {

    
    
    

    WORD    Version;

    
    
    

    WORD    Reserved;

    DWORD   AttributeCount;
    union {
        PCLAIM_SECURITY_ATTRIBUTE_V1    pAttributeV1;
    } Attribute;
} CLAIM_SECURITY_ATTRIBUTES_INFORMATION, *PCLAIM_SECURITY_ATTRIBUTES_INFORMATION;








typedef BOOLEAN SECURITY_CONTEXT_TRACKING_MODE,
                    * PSECURITY_CONTEXT_TRACKING_MODE;







typedef struct _SECURITY_QUALITY_OF_SERVICE {
    DWORD Length;
    SECURITY_IMPERSONATION_LEVEL ImpersonationLevel;
    SECURITY_CONTEXT_TRACKING_MODE ContextTrackingMode;
    BOOLEAN EffectiveOnly;
    } SECURITY_QUALITY_OF_SERVICE, * PSECURITY_QUALITY_OF_SERVICE;






typedef struct _SE_IMPERSONATION_STATE {
    PACCESS_TOKEN Token;
    BOOLEAN CopyOnOpen;
    BOOLEAN EffectiveOnly;
    SECURITY_IMPERSONATION_LEVEL Level;
} SE_IMPERSONATION_STATE, *PSE_IMPERSONATION_STATE;






typedef DWORD SECURITY_INFORMATION, *PSECURITY_INFORMATION;




















typedef enum _SE_LEARNING_MODE_DATA_TYPE {
    SeLearningModeInvalidType = 0,
    SeLearningModeSettings,
    SeLearningModeMax
} SE_LEARNING_MODE_DATA_TYPE;



typedef struct _SECURITY_CAPABILITIES {
    PSID AppContainerSid;
    PSID_AND_ATTRIBUTES Capabilities;
    DWORD CapabilityCount;
    DWORD Reserved;
} SECURITY_CAPABILITIES, *PSECURITY_CAPABILITIES, *LPSECURITY_CAPABILITIES;




















#line 10698 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





#line 10704 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



#line 10708 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





















#line 10730 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"








typedef struct _JOB_SET_ARRAY {
    HANDLE JobHandle;   
    DWORD MemberLevel;  
    DWORD Flags;        
} JOB_SET_ARRAY, *PJOB_SET_ARRAY;




typedef struct _EXCEPTION_REGISTRATION_RECORD {
    struct _EXCEPTION_REGISTRATION_RECORD *Next;
    PEXCEPTION_ROUTINE Handler;
} EXCEPTION_REGISTRATION_RECORD;

typedef EXCEPTION_REGISTRATION_RECORD *PEXCEPTION_REGISTRATION_RECORD;

typedef struct _NT_TIB {
    struct _EXCEPTION_REGISTRATION_RECORD *ExceptionList;
    PVOID StackBase;
    PVOID StackLimit;
    PVOID SubSystemTib;

    union {
        PVOID FiberData;
        DWORD Version;
    };


#line 10767 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
    PVOID ArbitraryUserPointer;
    struct _NT_TIB *Self;
} NT_TIB;
typedef NT_TIB *PNT_TIB;




typedef struct _NT_TIB32 {
    DWORD ExceptionList;
    DWORD StackBase;
    DWORD StackLimit;
    DWORD SubSystemTib;


    union {
        DWORD FiberData;
        DWORD Version;
    };


#line 10789 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

    DWORD ArbitraryUserPointer;
    DWORD Self;
} NT_TIB32, *PNT_TIB32;

typedef struct _NT_TIB64 {
    DWORD64 ExceptionList;
    DWORD64 StackBase;
    DWORD64 StackLimit;
    DWORD64 SubSystemTib;


    union {
        DWORD64 FiberData;
        DWORD Version;
    };



#line 10809 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

    DWORD64 ArbitraryUserPointer;
    DWORD64 Self;
} NT_TIB64, *PNT_TIB64;








typedef struct _UMS_CREATE_THREAD_ATTRIBUTES {  
    DWORD UmsVersion;   
        PVOID UmsContext;   
        PVOID UmsCompletionList;   
} UMS_CREATE_THREAD_ATTRIBUTES, *PUMS_CREATE_THREAD_ATTRIBUTES; 

typedef struct _QUOTA_LIMITS {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;
    LARGE_INTEGER TimeLimit;
} QUOTA_LIMITS, *PQUOTA_LIMITS;







typedef union _RATE_QUOTA_LIMIT {
    DWORD RateData;
    struct {
        DWORD RatePercent : 7;
        DWORD Reserved0   : 25;
    } ;
} RATE_QUOTA_LIMIT, *PRATE_QUOTA_LIMIT;

typedef struct _QUOTA_LIMITS_EX {
    SIZE_T PagedPoolLimit;
    SIZE_T NonPagedPoolLimit;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    SIZE_T PagefileLimit;               
    LARGE_INTEGER TimeLimit;
    SIZE_T WorkingSetLimit;             
    SIZE_T Reserved2;
    SIZE_T Reserved3;
    SIZE_T Reserved4;
    DWORD  Flags;
    RATE_QUOTA_LIMIT CpuRateLimit;
} QUOTA_LIMITS_EX, *PQUOTA_LIMITS_EX;

typedef struct _IO_COUNTERS {
    ULONGLONG  ReadOperationCount;
    ULONGLONG  WriteOperationCount;
    ULONGLONG  OtherOperationCount;
    ULONGLONG ReadTransferCount;
    ULONGLONG WriteTransferCount;
    ULONGLONG OtherTransferCount;
} IO_COUNTERS;
typedef IO_COUNTERS *PIO_COUNTERS;




typedef enum _HARDWARE_COUNTER_TYPE {
    PMCCounter,
    MaxHardwareCounterType
} HARDWARE_COUNTER_TYPE, *PHARDWARE_COUNTER_TYPE;
typedef enum _PROCESS_MITIGATION_POLICY {
    ProcessDEPPolicy,
    ProcessASLRPolicy,
    ProcessReserved1MitigationPolicy,
    ProcessStrictHandleCheckPolicy,
    ProcessSystemCallDisablePolicy,
    ProcessMitigationOptionsMask,
    ProcessExtensionPointDisablePolicy,
    MaxProcessMitigationPolicy
} PROCESS_MITIGATION_POLICY, *PPROCESS_MITIGATION_POLICY;






typedef struct _PROCESS_MITIGATION_ASLR_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD EnableBottomUpRandomization : 1;
            DWORD EnableForceRelocateImages : 1;
            DWORD EnableHighEntropy : 1;
            DWORD DisallowStrippedImages : 1;
            DWORD ReservedFlags : 28;
        };
    };
} PROCESS_MITIGATION_ASLR_POLICY, *PPROCESS_MITIGATION_ASLR_POLICY;

typedef struct _PROCESS_MITIGATION_DEP_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD Enable : 1;
            DWORD DisableAtlThunkEmulation : 1;
            DWORD ReservedFlags : 30;
        };
    };
    BOOLEAN Permanent;
} PROCESS_MITIGATION_DEP_POLICY, *PPROCESS_MITIGATION_DEP_POLICY;

typedef struct _PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD RaiseExceptionOnInvalidHandleReference : 1;
            DWORD HandleExceptionsPermanentlyEnabled : 1;
            DWORD ReservedFlags : 30;
        };
    };
} PROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY, *PPROCESS_MITIGATION_STRICT_HANDLE_CHECK_POLICY;

typedef struct _PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisallowWin32kSystemCalls : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY, *PPROCESS_MITIGATION_SYSTEM_CALL_DISABLE_POLICY;

typedef struct _PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY {
    union {
        DWORD Flags;
        struct {
            DWORD DisableExtensionPoints : 1;
            DWORD ReservedFlags : 31;
        };
    };
} PROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY, *PPROCESS_MITIGATION_EXTENSION_POINT_DISABLE_POLICY;


typedef struct _JOBOBJECT_BASIC_ACCOUNTING_INFORMATION {
    LARGE_INTEGER TotalUserTime;
    LARGE_INTEGER TotalKernelTime;
    LARGE_INTEGER ThisPeriodTotalUserTime;
    LARGE_INTEGER ThisPeriodTotalKernelTime;
    DWORD TotalPageFaultCount;
    DWORD TotalProcesses;
    DWORD ActiveProcesses;
    DWORD TotalTerminatedProcesses;
} JOBOBJECT_BASIC_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_BASIC_LIMIT_INFORMATION {
    LARGE_INTEGER PerProcessUserTimeLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD LimitFlags;
    SIZE_T MinimumWorkingSetSize;
    SIZE_T MaximumWorkingSetSize;
    DWORD ActiveProcessLimit;
    ULONG_PTR Affinity;
    DWORD PriorityClass;
    DWORD SchedulingClass;
} JOBOBJECT_BASIC_LIMIT_INFORMATION, *PJOBOBJECT_BASIC_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_EXTENDED_LIMIT_INFORMATION {
    JOBOBJECT_BASIC_LIMIT_INFORMATION BasicLimitInformation;
    IO_COUNTERS IoInfo;
    SIZE_T ProcessMemoryLimit;
    SIZE_T JobMemoryLimit;
    SIZE_T PeakProcessMemoryUsed;
    SIZE_T PeakJobMemoryUsed;
} JOBOBJECT_EXTENDED_LIMIT_INFORMATION, *PJOBOBJECT_EXTENDED_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_BASIC_PROCESS_ID_LIST {
    DWORD NumberOfAssignedProcesses;
    DWORD NumberOfProcessIdsInList;
    ULONG_PTR ProcessIdList[1];
} JOBOBJECT_BASIC_PROCESS_ID_LIST, *PJOBOBJECT_BASIC_PROCESS_ID_LIST;

typedef struct _JOBOBJECT_BASIC_UI_RESTRICTIONS {
    DWORD UIRestrictionsClass;
} JOBOBJECT_BASIC_UI_RESTRICTIONS, *PJOBOBJECT_BASIC_UI_RESTRICTIONS;





typedef struct _JOBOBJECT_SECURITY_LIMIT_INFORMATION {
    DWORD SecurityLimitFlags ;
    HANDLE JobToken ;
    PTOKEN_GROUPS SidsToDisable ;
    PTOKEN_PRIVILEGES PrivilegesToDelete ;
    PTOKEN_GROUPS RestrictedSids ;
} JOBOBJECT_SECURITY_LIMIT_INFORMATION, *PJOBOBJECT_SECURITY_LIMIT_INFORMATION ;

typedef struct _JOBOBJECT_END_OF_JOB_TIME_INFORMATION {
    DWORD EndOfJobTimeAction;
} JOBOBJECT_END_OF_JOB_TIME_INFORMATION, *PJOBOBJECT_END_OF_JOB_TIME_INFORMATION;

typedef struct _JOBOBJECT_ASSOCIATE_COMPLETION_PORT {
    PVOID CompletionKey;
    HANDLE CompletionPort;
} JOBOBJECT_ASSOCIATE_COMPLETION_PORT, *PJOBOBJECT_ASSOCIATE_COMPLETION_PORT;

typedef struct _JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION {
    JOBOBJECT_BASIC_ACCOUNTING_INFORMATION BasicInfo;
    IO_COUNTERS IoInfo;
} JOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION, *PJOBOBJECT_BASIC_AND_IO_ACCOUNTING_INFORMATION;

typedef struct _JOBOBJECT_JOBSET_INFORMATION {
    DWORD MemberLevel;
} JOBOBJECT_JOBSET_INFORMATION, *PJOBOBJECT_JOBSET_INFORMATION;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE {
    ToleranceLow = 1,
    ToleranceMedium,
    ToleranceHigh
} JOBOBJECT_RATE_CONTROL_TOLERANCE;

typedef enum _JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL {
    ToleranceIntervalShort = 1,
    ToleranceIntervalMedium,
    ToleranceIntervalLong
} JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL;

typedef struct _JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION {
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceInterval;
    DWORD LimitFlags;
} JOBOBJECT_NOTIFICATION_LIMIT_INFORMATION, *PJOBOBJECT_NOTIFICATION_LIMIT_INFORMATION;

typedef struct _JOBOBJECT_LIMIT_VIOLATION_INFORMATION {
    DWORD LimitFlags;
    DWORD ViolationLimitFlags;
    DWORD64 IoReadBytes;
    DWORD64 IoReadBytesLimit;
    DWORD64 IoWriteBytes;
    DWORD64 IoWriteBytesLimit;
    LARGE_INTEGER PerJobUserTime;
    LARGE_INTEGER PerJobUserTimeLimit;
    DWORD64 JobMemory;
    DWORD64 JobMemoryLimit;
    JOBOBJECT_RATE_CONTROL_TOLERANCE RateControlTolerance;
    JOBOBJECT_RATE_CONTROL_TOLERANCE_INTERVAL RateControlToleranceLimit;
} JOBOBJECT_LIMIT_VIOLATION_INFORMATION, *PJOBOBJECT_LIMIT_VIOLATION_INFORMATION;

typedef struct _JOBOBJECT_CPU_RATE_CONTROL_INFORMATION {
    DWORD ControlFlags;
    union {
        DWORD CpuRate;
        DWORD Weight;
    };
} JOBOBJECT_CPU_RATE_CONTROL_INFORMATION, *PJOBOBJECT_CPU_RATE_CONTROL_INFORMATION;




















































































































typedef enum _JOBOBJECTINFOCLASS {
    JobObjectBasicAccountingInformation = 1,
    JobObjectBasicLimitInformation,
    JobObjectBasicProcessIdList,
    JobObjectBasicUIRestrictions,
    JobObjectSecurityLimitInformation,  
    JobObjectEndOfJobTimeInformation,
    JobObjectAssociateCompletionPortInformation,
    JobObjectBasicAndIoAccountingInformation,
    JobObjectExtendedLimitInformation,
    JobObjectJobSetInformation,
    JobObjectGroupInformation,
    JobObjectNotificationLimitInformation,
    JobObjectLimitViolationInformation,
    JobObjectGroupInformationEx,
    JobObjectCpuRateControlInformation,
    JobObjectCompletionFilter,
    JobObjectCompletionCounter,
    JobObjectReserved1Information = 18,
    JobObjectReserved2Information,
    JobObjectReserved3Information,
    JobObjectReserved4Information,
    JobObjectReserved5Information,
    JobObjectReserved6Information,
    JobObjectReserved7Information,
    JobObjectReserved8Information,
    MaxJobObjectInfoClass
} JOBOBJECTINFOCLASS;


typedef enum _FIRMWARE_TYPE {
    FirmwareTypeUnknown,
    FirmwareTypeBios,
    FirmwareTypeUefi,
    FirmwareTypeMax
} FIRMWARE_TYPE, *PFIRMWARE_TYPE;






























typedef enum _LOGICAL_PROCESSOR_RELATIONSHIP {
    RelationProcessorCore,
    RelationNumaNode,
    RelationCache,
    RelationProcessorPackage,
    RelationGroup,
    RelationAll = 0xffff
} LOGICAL_PROCESSOR_RELATIONSHIP;



typedef enum _PROCESSOR_CACHE_TYPE {
    CacheUnified,
    CacheInstruction,
    CacheData,
    CacheTrace
} PROCESSOR_CACHE_TYPE;



typedef struct _CACHE_DESCRIPTOR {
    BYTE   Level;
    BYTE   Associativity;
    WORD   LineSize;
    DWORD  Size;
    PROCESSOR_CACHE_TYPE Type;
} CACHE_DESCRIPTOR, *PCACHE_DESCRIPTOR;

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION {
    ULONG_PTR   ProcessorMask;
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    union {
        struct {
            BYTE  Flags;
        } ProcessorCore;
        struct {
            DWORD NodeNumber;
        } NumaNode;
        CACHE_DESCRIPTOR Cache;
        ULONGLONG  Reserved[2];
    } ;
} SYSTEM_LOGICAL_PROCESSOR_INFORMATION, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION;

typedef struct _PROCESSOR_RELATIONSHIP {
    BYTE  Flags;
    BYTE  Reserved[21];
    WORD   GroupCount;
      GROUP_AFFINITY GroupMask[1];
} PROCESSOR_RELATIONSHIP, *PPROCESSOR_RELATIONSHIP;

typedef struct _NUMA_NODE_RELATIONSHIP {
    DWORD NodeNumber;
    BYTE  Reserved[20];
    GROUP_AFFINITY GroupMask;
} NUMA_NODE_RELATIONSHIP, *PNUMA_NODE_RELATIONSHIP;

typedef struct _CACHE_RELATIONSHIP {
    BYTE  Level;
    BYTE  Associativity;
    WORD   LineSize;
    DWORD CacheSize;
    PROCESSOR_CACHE_TYPE Type;
    BYTE  Reserved[20];
    GROUP_AFFINITY GroupMask;
} CACHE_RELATIONSHIP, *PCACHE_RELATIONSHIP;

typedef struct _PROCESSOR_GROUP_INFO {
    BYTE  MaximumProcessorCount;
    BYTE  ActiveProcessorCount;
    BYTE  Reserved[38];
    KAFFINITY ActiveProcessorMask;
} PROCESSOR_GROUP_INFO, *PPROCESSOR_GROUP_INFO;

typedef struct _GROUP_RELATIONSHIP {
    WORD   MaximumGroupCount;
    WORD   ActiveGroupCount;
    BYTE  Reserved[20];
    PROCESSOR_GROUP_INFO GroupInfo[1];
} GROUP_RELATIONSHIP, *PGROUP_RELATIONSHIP;

  struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX {
    LOGICAL_PROCESSOR_RELATIONSHIP Relationship;
    DWORD Size;
    union {
        PROCESSOR_RELATIONSHIP Processor;
        NUMA_NODE_RELATIONSHIP NumaNode;
        CACHE_RELATIONSHIP Cache;
        GROUP_RELATIONSHIP Group;
    } ;
};

typedef struct _SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX SYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX, *PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX;



typedef struct _SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION {
    DWORD64 CycleTime;
} SYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION, *PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION;



























































































typedef struct _XSTATE_FEATURE {
    DWORD Offset;
    DWORD Size;
} XSTATE_FEATURE, *PXSTATE_FEATURE;

typedef struct _XSTATE_CONFIGURATION {
    
    DWORD64 EnabledFeatures;

    
    DWORD64 EnabledVolatileFeatures;

    
    DWORD Size;

    DWORD OptimizedSave : 1;

    
    XSTATE_FEATURE Features[(64)];

} XSTATE_CONFIGURATION, *PXSTATE_CONFIGURATION;


typedef struct _MEMORY_BASIC_INFORMATION {
    PVOID BaseAddress;
    PVOID AllocationBase;
    DWORD AllocationProtect;
    SIZE_T RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION, *PMEMORY_BASIC_INFORMATION;

typedef struct _MEMORY_BASIC_INFORMATION32 {
    DWORD BaseAddress;
    DWORD AllocationBase;
    DWORD AllocationProtect;
    DWORD RegionSize;
    DWORD State;
    DWORD Protect;
    DWORD Type;
} MEMORY_BASIC_INFORMATION32, *PMEMORY_BASIC_INFORMATION32;

typedef struct __declspec(align(16)) _MEMORY_BASIC_INFORMATION64 {
    ULONGLONG BaseAddress;
    ULONGLONG AllocationBase;
    DWORD     AllocationProtect;
    DWORD     __alignment1;
    ULONGLONG RegionSize;
    DWORD     State;
    DWORD     Protect;
    DWORD     Type;
    DWORD     __alignment2;
} MEMORY_BASIC_INFORMATION64, *PMEMORY_BASIC_INFORMATION64;

























#pragma region Desktop Family           





#line 11528 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma endregion                       




















































































































































typedef struct _FILE_ID_128 {                               
    BYTE  Identifier[16];                                   
} FILE_ID_128, *PFILE_ID_128;                               





typedef struct _FILE_NOTIFY_INFORMATION {
    DWORD NextEntryOffset;
    DWORD Action;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NOTIFY_INFORMATION, *PFILE_NOTIFY_INFORMATION;






typedef union _FILE_SEGMENT_ELEMENT {
    PVOID64 Buffer;
    ULONGLONG Alignment;
}FILE_SEGMENT_ELEMENT, *PFILE_SEGMENT_ELEMENT;













































#line 11747 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"










typedef struct _REPARSE_GUID_DATA_BUFFER {
    DWORD  ReparseTag;
    WORD   ReparseDataLength;
    WORD   Reserved;
    GUID   ReparseGuid;
    struct {
        BYTE   DataBuffer[1];
    } GenericReparseBuffer;
} REPARSE_GUID_DATA_BUFFER, *PREPARSE_GUID_DATA_BUFFER;
























































































typedef struct _SCRUB_DATA_INPUT {

    
    
    

    DWORD Size;

    
    
    
    
    
    

    DWORD Flags;

    
    
    
    
    

    DWORD MaximumIos;

    
    
    

    DWORD Reserved[17];

    
    
    
    
    

    BYTE  ResumeContext[816];

} SCRUB_DATA_INPUT, *PSCRUB_DATA_INPUT;

typedef struct _SCRUB_DATA_OUTPUT {

    
    
    

    DWORD Size;

    
    
    
    
    
    
    

    DWORD Flags;

    
    
    

    DWORD Status;

    
    
    
    

    ULONGLONG ErrorFileOffset;

    
    
    
    

    ULONGLONG ErrorLength;

    
    
    

    ULONGLONG NumberOfBytesRepaired;

    
    
    

    ULONGLONG NumberOfBytesFailed;

    
    
    

    ULONGLONG InternalFileReference;

    
    
    

    DWORD Reserved[6];

    
    
    
    
    
    
    
    
    
    
    
    

    BYTE  ResumeContext[816];

} SCRUB_DATA_OUTPUT, *PSCRUB_DATA_OUTPUT;

#line 11975 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
































extern "C" const GUID  GUID_MAX_POWER_SAVINGS;






extern "C" const GUID  GUID_MIN_POWER_SAVINGS;






extern "C" const GUID  GUID_TYPICAL_POWER_SAVINGS;







extern "C" const GUID  NO_SUBGROUP_GUID;







extern "C" const GUID  ALL_POWERSCHEMES_GUID;




































extern "C" const GUID  GUID_POWERSCHEME_PERSONALITY;








extern "C" const GUID  GUID_ACTIVE_POWERSCHEME;














extern "C" const GUID  GUID_IDLE_RESILIENCY_SUBGROUP;





extern "C" const GUID  GUID_IDLE_RESILIENCY_PERIOD;






extern "C" const GUID  GUID_DISK_COALESCING_POWERDOWN_TIMEOUT;













extern "C" const GUID  GUID_EXECUTION_REQUIRED_REQUEST_TIMEOUT;








extern "C" const GUID  GUID_VIDEO_SUBGROUP;





extern "C" const GUID  GUID_VIDEO_POWERDOWN_TIMEOUT;





extern "C" const GUID  GUID_VIDEO_ANNOYANCE_TIMEOUT;





extern "C" const GUID  GUID_VIDEO_ADAPTIVE_PERCENT_INCREASE;





extern "C" const GUID  GUID_VIDEO_DIM_TIMEOUT;





extern "C" const GUID  GUID_VIDEO_ADAPTIVE_POWERDOWN;





extern "C" const GUID  GUID_MONITOR_POWER_ON;




extern "C" const GUID  GUID_DEVICE_POWER_POLICY_VIDEO_BRIGHTNESS;





extern "C" const GUID  GUID_DEVICE_POWER_POLICY_VIDEO_DIM_BRIGHTNESS;




extern "C" const GUID  GUID_VIDEO_CURRENT_MONITOR_BRIGHTNESS;






extern "C" const GUID  GUID_VIDEO_ADAPTIVE_DISPLAY_BRIGHTNESS;





extern "C" const GUID  GUID_CONSOLE_DISPLAY_STATE;







extern "C" const GUID  GUID_ALLOW_DISPLAY_REQUIRED;







extern "C" const GUID  GUID_VIDEO_CONSOLE_LOCK_TIMEOUT;






extern "C" const GUID  GUID_ADAPTIVE_POWER_BEHAVIOR_SUBGROUP;






extern "C" const GUID  GUID_NON_ADAPTIVE_INPUT_TIMEOUT;







extern "C" const GUID  GUID_DISK_SUBGROUP;





extern "C" const GUID  GUID_DISK_POWERDOWN_TIMEOUT;






extern "C" const GUID  GUID_DISK_IDLE_TIMEOUT;








extern "C" const GUID  GUID_DISK_BURST_IGNORE_THRESHOLD;





extern "C" const GUID  GUID_DISK_ADAPTIVE_POWERDOWN;








extern "C" const GUID  GUID_SLEEP_SUBGROUP;







extern "C" const GUID  GUID_SLEEP_IDLE_THRESHOLD;





extern "C" const GUID  GUID_STANDBY_TIMEOUT;








extern "C" const GUID  GUID_UNATTEND_SLEEP_TIMEOUT;





extern "C" const GUID  GUID_HIBERNATE_TIMEOUT;





extern "C" const GUID  GUID_HIBERNATE_FASTS4_POLICY;








extern "C" const GUID  GUID_CRITICAL_POWER_TRANSITION;





extern "C" const GUID  GUID_SYSTEM_AWAYMODE;





extern "C" const GUID  GUID_ALLOW_AWAYMODE;







extern "C" const GUID  GUID_ALLOW_STANDBY_STATES;






extern "C" const GUID  GUID_ALLOW_RTC_WAKE;







extern "C" const GUID  GUID_ALLOW_SYSTEM_REQUIRED;








extern "C" const GUID  GUID_SYSTEM_BUTTON_SUBGROUP;


















extern "C" const GUID  GUID_POWERBUTTON_ACTION;





extern "C" const GUID  GUID_SLEEPBUTTON_ACTION;






extern "C" const GUID  GUID_USERINTERFACEBUTTON_ACTION;





extern "C" const GUID  GUID_LIDCLOSE_ACTION;
extern "C" const GUID  GUID_LIDOPEN_POWERSTATE;








extern "C" const GUID  GUID_BATTERY_SUBGROUP;











extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_0;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_0;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_0;

extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_1;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_1;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_1;

extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_2;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_2;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_2;

extern "C" const GUID  GUID_BATTERY_DISCHARGE_ACTION_3;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_LEVEL_3;
extern "C" const GUID  GUID_BATTERY_DISCHARGE_FLAGS_3;








extern "C" const GUID  GUID_PROCESSOR_SETTINGS_SUBGROUP;





extern "C" const GUID  GUID_PROCESSOR_THROTTLE_POLICY;












extern "C" const GUID  GUID_PROCESSOR_THROTTLE_MAXIMUM;







extern "C" const GUID  GUID_PROCESSOR_THROTTLE_MINIMUM;







extern "C" const GUID  GUID_PROCESSOR_ALLOW_THROTTLING;





extern "C" const GUID  GUID_PROCESSOR_IDLESTATE_POLICY;





extern "C" const GUID  GUID_PROCESSOR_PERFSTATE_POLICY;







extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_POLICY;







extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_POLICY;








extern "C" const GUID  GUID_PROCESSOR_PERF_INCREASE_TIME;








extern "C" const GUID  GUID_PROCESSOR_PERF_DECREASE_TIME;







extern "C" const GUID  GUID_PROCESSOR_PERF_TIME_CHECK;







extern "C" const GUID  GUID_PROCESSOR_PERF_BOOST_POLICY;
#line 12560 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"










extern "C" const GUID  GUID_PROCESSOR_PERF_BOOST_MODE;
#line 12572 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"














extern "C" const GUID  GUID_PROCESSOR_IDLE_ALLOW_SCALING;






extern "C" const GUID  GUID_PROCESSOR_IDLE_DISABLE;








extern "C" const GUID  GUID_PROCESSOR_IDLE_STATE_MAXIMUM;








extern "C" const GUID  GUID_PROCESSOR_IDLE_TIME_CHECK;








extern "C" const GUID  GUID_PROCESSOR_IDLE_DEMOTE_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_IDLE_PROMOTE_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_POLICY;












extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_POLICY;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_MAX_CORES;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_MIN_CORES;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_INCREASE_TIME;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_DECREASE_TIME;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_DECREASE_FACTOR;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_HISTORY_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_AFFINITY_WEIGHTING;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_DECREASE_FACTOR;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_HISTORY_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_WEIGHTING;






extern "C" const GUID  GUID_PROCESSOR_CORE_PARKING_OVER_UTILIZATION_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PARKING_CORE_OVERRIDE;







extern "C" const GUID  GUID_PROCESSOR_PARKING_PERF_STATE;







extern "C" const GUID  GUID_PROCESSOR_PARKING_CONCURRENCY_THRESHOLD;







extern "C" const GUID  GUID_PROCESSOR_PARKING_HEADROOM_THRESHOLD;






extern "C" const GUID  GUID_PROCESSOR_PERF_HISTORY;







extern "C" const GUID  GUID_PROCESSOR_PERF_LATENCY_HINT;







extern "C" const GUID  GUID_PROCESSOR_DISTRIBUTE_UTILITY;







extern "C" const GUID  GUID_SYSTEM_COOLING_POLICY;









extern "C" const GUID  GUID_LOCK_CONSOLE_ON_WAKE;









extern "C" const GUID  GUID_DEVICE_IDLE_POLICY;




















extern "C" const GUID  GUID_ACDC_POWER_SOURCE;















extern "C" const GUID  GUID_LIDSWITCH_STATE_CHANGE;
















extern "C" const GUID  GUID_BATTERY_PERCENTAGE_REMAINING;






extern "C" const GUID  GUID_GLOBAL_USER_PRESENCE;










extern "C" const GUID  GUID_SESSION_DISPLAY_STATUS;









extern "C" const GUID  GUID_SESSION_USER_PRESENCE;






extern "C" const GUID  GUID_IDLE_BACKGROUND_TASK;






extern "C" const GUID  GUID_BACKGROUND_TASK_NOTIFICATION;







extern "C" const GUID  GUID_APPLAUNCH_BUTTON;










extern "C" const GUID  GUID_PCIEXPRESS_SETTINGS_SUBGROUP;





extern "C" const GUID  GUID_PCIEXPRESS_ASPM_POLICY;











extern "C" const GUID  GUID_ENABLE_SWITCH_FORCED_SHUTDOWN;


typedef enum _SYSTEM_POWER_STATE {
    PowerSystemUnspecified = 0,
    PowerSystemWorking     = 1,
    PowerSystemSleeping1   = 2,
    PowerSystemSleeping2   = 3,
    PowerSystemSleeping3   = 4,
    PowerSystemHibernate   = 5,
    PowerSystemShutdown    = 6,
    PowerSystemMaximum     = 7
} SYSTEM_POWER_STATE, *PSYSTEM_POWER_STATE;



typedef enum {
    PowerActionNone = 0,
    PowerActionReserved,
    PowerActionSleep,
    PowerActionHibernate,
    PowerActionShutdown,
    PowerActionShutdownReset,
    PowerActionShutdownOff,
    PowerActionWarmEject
} POWER_ACTION, *PPOWER_ACTION;

typedef enum _DEVICE_POWER_STATE {
    PowerDeviceUnspecified = 0,
    PowerDeviceD0,
    PowerDeviceD1,
    PowerDeviceD2,
    PowerDeviceD3,
    PowerDeviceMaximum
} DEVICE_POWER_STATE, *PDEVICE_POWER_STATE;

typedef enum _MONITOR_DISPLAY_STATE {
    PowerMonitorOff = 0,
    PowerMonitorOn,
    PowerMonitorDim
} MONITOR_DISPLAY_STATE, *PMONITOR_DISPLAY_STATE;

typedef enum _USER_ACTIVITY_PRESENCE {
    PowerUserPresent = 0,
    PowerUserNotPresent,
    PowerUserInactive,
    PowerUserMaximum,
    PowerUserInvalid = PowerUserMaximum
} USER_ACTIVITY_PRESENCE, *PUSER_ACTIVITY_PRESENCE;









typedef DWORD EXECUTION_STATE, *PEXECUTION_STATE;

typedef enum {
    LT_DONT_CARE,
    LT_LOWEST_LATENCY
} LATENCY_TIME;

















typedef enum _POWER_REQUEST_TYPE {
    PowerRequestDisplayRequired,
    PowerRequestSystemRequired,
    PowerRequestAwayModeRequired,
    PowerRequestExecutionRequired
} POWER_REQUEST_TYPE, *PPOWER_REQUEST_TYPE;




















typedef struct CM_Power_Data_s {
    DWORD               PD_Size;
    DEVICE_POWER_STATE  PD_MostRecentPowerState;
    DWORD               PD_Capabilities;
    DWORD               PD_D1Latency;
    DWORD               PD_D2Latency;
    DWORD               PD_D3Latency;
    DEVICE_POWER_STATE  PD_PowerStateMapping[7];
    SYSTEM_POWER_STATE  PD_DeepestSystemWake;
} CM_POWER_DATA, *PCM_POWER_DATA;

#line 13074 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



typedef enum {
    SystemPowerPolicyAc,
    SystemPowerPolicyDc,
    VerifySystemPolicyAc,
    VerifySystemPolicyDc,
    SystemPowerCapabilities,
    SystemBatteryState,
    SystemPowerStateHandler,
    ProcessorStateHandler,
    SystemPowerPolicyCurrent,
    AdministratorPowerPolicy,
    SystemReserveHiberFile,
    ProcessorInformation,
    SystemPowerInformation,
    ProcessorStateHandler2,
    LastWakeTime,                                   
    LastSleepTime,                                  
    SystemExecutionState,
    SystemPowerStateNotifyHandler,
    ProcessorPowerPolicyAc,
    ProcessorPowerPolicyDc,
    VerifyProcessorPowerPolicyAc,
    VerifyProcessorPowerPolicyDc,
    ProcessorPowerPolicyCurrent,
    SystemPowerStateLogging,
    SystemPowerLoggingEntry,
    SetPowerSettingValue,
    NotifyUserPowerSetting,
    PowerInformationLevelUnused0,
    SystemMonitorHiberBootPowerOff,
    SystemVideoState,
    TraceApplicationPowerMessage,
    TraceApplicationPowerMessageEnd,
    ProcessorPerfStates,
    ProcessorIdleStates,
    ProcessorCap,
    SystemWakeSource,
    SystemHiberFileInformation,
    TraceServicePowerMessage,
    ProcessorLoad,
    PowerShutdownNotification,
    MonitorCapabilities,
    SessionPowerInit,
    SessionDisplayState,
    PowerRequestCreate,
    PowerRequestAction,
    GetPowerRequestList,
    ProcessorInformationEx,
    NotifyUserModeLegacyPowerEvent,
    GroupPark,
    ProcessorIdleDomains,
    WakeTimerList,
    SystemHiberFileSize,
    ProcessorIdleStatesHv,
    ProcessorPerfStatesHv,
    ProcessorPerfCapHv,
    ProcessorSetIdle,
    LogicalProcessorIdling,
    UserPresence, 
    PowerSettingNotificationName,
    GetPowerSettingValue,
    IdleResiliency,
    SessionRITState,
    SessionConnectNotification,
    SessionPowerCleanup,
    SessionLockState,
    SystemHiberbootState,
    PlatformInformation,
    PdcInvocation,
    MonitorInvocation,
    FirmwareTableInformationRegistered,
    SetShutdownSelectedTime,
    SuspendResumeInvocation,
    PlmPowerRequestCreate,
    ScreenOff,
    CsDeviceNotification,
    PlatformRole,
    LastResumePerformance,
    DisplayBurst,
    ExitLatencySamplingPercentage,
    ApplyLowPowerScenarioSettings,
    PowerInformationLevelMaximum
} POWER_INFORMATION_LEVEL;





typedef enum {
    UserNotPresent = 0,
    UserPresent = 1,
    UserUnknown = 0xff
} POWER_USER_PRESENCE_TYPE, *PPOWER_USER_PRESENCE_TYPE;

typedef struct _POWER_USER_PRESENCE {
	POWER_USER_PRESENCE_TYPE UserPresence;
} POWER_USER_PRESENCE, *PPOWER_USER_PRESENCE;




typedef struct _POWER_SESSION_CONNECT {
    BOOLEAN Connected;  
    BOOLEAN Console;    
} POWER_SESSION_CONNECT, *PPOWER_SESSION_CONNECT;

typedef struct _POWER_SESSION_TIMEOUTS {
    DWORD InputTimeout;
    DWORD DisplayTimeout;
} POWER_SESSION_TIMEOUTS, *PPOWER_SESSION_TIMEOUTS;




typedef struct _POWER_SESSION_RIT_STATE {
    BOOLEAN Active;  
    DWORD LastInputTime; 
} POWER_SESSION_RIT_STATE, *PPOWER_SESSION_RIT_STATE;




typedef struct _POWER_SESSION_WINLOGON {
    DWORD SessionId; 
    BOOLEAN Console; 
    BOOLEAN Locked; 
} POWER_SESSION_WINLOGON, *PPOWER_SESSION_WINLOGON;




typedef struct _POWER_IDLE_RESILIENCY {
    DWORD CoalescingTimeout; 
    DWORD IdleResiliencyPeriod; 
} POWER_IDLE_RESILIENCY, *PPOWER_IDLE_RESILIENCY;




typedef enum {
    MonitorRequestReasonUnknown,
    MonitorRequestReasonPowerButton,
    MonitorRequestReasonRemoteConnection,
    MonitorRequestReasonScMonitorpower,
    MonitorRequestReasonUserInput,
    MonitorRequestReasonAcDcDisplayBurst,
    MonitorRequestReasonUserDisplayBurst,
    MonitorRequestReasonPoSetSystemState,
    MonitorRequestReasonSetThreadExecutionState,
    MonitorRequestReasonFullWake,
    MonitorRequestReasonSessionUnlock,
    MonitorRequestReasonScreenOffRequest,
    MonitorRequestReasonIdleTimeout,
    MonitorRequestReasonPolicyChange,
    MonitorRequestReasonMax
} POWER_MONITOR_REQUEST_REASON;




typedef struct _POWER_MONITOR_INVOCATION {
    BOOLEAN On; 
    BOOLEAN Console;
    POWER_MONITOR_REQUEST_REASON RequestReason;
} POWER_MONITOR_INVOCATION, *PPOWER_MONITOR_INVOCATION;





typedef struct _RESUME_PERFORMANCE {
    DWORD PostTimeMs;
    ULONGLONG TotalResumeTimeMs;
    ULONGLONG ResumeCompleteTimestamp;
} RESUME_PERFORMANCE, *PRESUME_PERFORMANCE;





typedef enum {
    PoAc,
    PoDc,
    PoHot,
    PoConditionMaximum
} SYSTEM_POWER_CONDITION;

typedef struct {

    
    
    
    
    DWORD       Version;


    
    
    
    GUID        Guid;


    
    
    
    
    SYSTEM_POWER_CONDITION PowerCondition;

    
    
    
    DWORD       DataLength;

    
    
    
    BYTE    Data[1];
} SET_POWER_SETTING_VALUE, *PSET_POWER_SETTING_VALUE;



typedef struct {
    GUID Guid;
} NOTIFY_USER_POWER_SETTING, *PNOTIFY_USER_POWER_SETTING;






typedef struct _APPLICATIONLAUNCH_SETTING_VALUE {

    
    
    
    
    LARGE_INTEGER       ActivationTime;

    
    
    
    DWORD               Flags;

    
    
    
    DWORD               ButtonInstanceID;


} APPLICATIONLAUNCH_SETTING_VALUE, *PAPPLICATIONLAUNCH_SETTING_VALUE;





typedef enum _POWER_PLATFORM_ROLE {
    PlatformRoleUnspecified = 0,
    PlatformRoleDesktop,
    PlatformRoleMobile,
    PlatformRoleWorkstation,
    PlatformRoleEnterpriseServer,
    PlatformRoleSOHOServer,
    PlatformRoleAppliancePC,
    PlatformRolePerformanceServer, 
    PlatformRoleSlate,             
    PlatformRoleMaximum
} POWER_PLATFORM_ROLE, *PPOWER_PLATFORM_ROLE;

















#line 13362 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef struct _POWER_PLATFORM_INFORMATION {
    BOOLEAN AoAc;
} POWER_PLATFORM_INFORMATION, *PPOWER_PLATFORM_INFORMATION;






typedef struct {
    DWORD       Granularity;
    DWORD       Capacity;
} BATTERY_REPORTING_SCALE, *PBATTERY_REPORTING_SCALE;
#line 13377 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



typedef struct {
    DWORD   Frequency;
    DWORD   Flags;
    DWORD   PercentFrequency;
} PPM_WMI_LEGACY_PERFSTATE, *PPPM_WMI_LEGACY_PERFSTATE;

typedef struct {
    DWORD Latency;
    DWORD Power;
    DWORD TimeCheck;
    BYTE  PromotePercent;
    BYTE  DemotePercent;
    BYTE  StateType;
    BYTE  Reserved;
    DWORD StateFlags;
    DWORD Context;
    DWORD IdleHandler;
    DWORD Reserved1;            
} PPM_WMI_IDLE_STATE, *PPPM_WMI_IDLE_STATE;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;          
    DWORD OldState;             
    DWORD64 TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES, *PPPM_WMI_IDLE_STATES;

typedef struct {
    DWORD Type;
    DWORD Count;
    DWORD TargetState;          
    DWORD OldState;             
    PVOID TargetProcessors;
    PPM_WMI_IDLE_STATE State[1];
} PPM_WMI_IDLE_STATES_EX, *PPPM_WMI_IDLE_STATES_EX;

typedef struct {
    DWORD Frequency;            
    DWORD Power;                
    BYTE  PercentFrequency;
    BYTE  IncreaseLevel;        
    BYTE  DecreaseLevel;        
    BYTE  Type;                 
    DWORD IncreaseTime;         
    DWORD DecreaseTime;         
    DWORD64 Control;            
    DWORD64 Status;             
    DWORD HitCount;
    DWORD Reserved1;            
    DWORD64 Reserved2;
    DWORD64 Reserved3;
} PPM_WMI_PERF_STATE, *PPPM_WMI_PERF_STATE;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;         
    DWORD MaxPerfState;         
    DWORD MinPerfState;         
    DWORD LowestPerfState;      
    DWORD ThermalConstraint;
    BYTE  BusyAdjThreshold;
    BYTE  PolicyType;           
    BYTE  Type;
    BYTE  Reserved;
    DWORD TimerInterval;
    DWORD64 TargetProcessors;   
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES, *PPPM_WMI_PERF_STATES;

typedef struct {
    DWORD Count;
    DWORD MaxFrequency;
    DWORD CurrentState;         
    DWORD MaxPerfState;         
    DWORD MinPerfState;         
    DWORD LowestPerfState;      
    DWORD ThermalConstraint;
    BYTE  BusyAdjThreshold;
    BYTE  PolicyType;           
    BYTE  Type;
    BYTE  Reserved;
    DWORD TimerInterval;
    PVOID TargetProcessors;     
    DWORD PStateHandler;
    DWORD PStateContext;
    DWORD TStateHandler;
    DWORD TStateContext;
    DWORD FeedbackHandler;
    DWORD Reserved1;
    DWORD64 Reserved2;
    PPM_WMI_PERF_STATE State[1];
} PPM_WMI_PERF_STATES_EX, *PPPM_WMI_PERF_STATES_EX;







typedef struct {
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD64 TotalTime;
    DWORD IdleTimeBuckets[6];
} PPM_IDLE_STATE_ACCOUNTING, *PPPM_IDLE_STATE_ACCOUNTING;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD64 StartTime;
    PPM_IDLE_STATE_ACCOUNTING State[1];
} PPM_IDLE_ACCOUNTING, *PPPM_IDLE_ACCOUNTING;







typedef struct {
    DWORD64 TotalTimeUs;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD Count;
} PPM_IDLE_STATE_BUCKET_EX, *PPPM_IDLE_STATE_BUCKET_EX;

typedef struct {
    DWORD64 TotalTime;
    DWORD IdleTransitions;
    DWORD FailedTransitions;
    DWORD InvalidBucketIndex;
    DWORD MinTimeUs;
    DWORD MaxTimeUs;
    DWORD CancelledTransitions;
    PPM_IDLE_STATE_BUCKET_EX IdleTimeBuckets[16];
} PPM_IDLE_STATE_ACCOUNTING_EX, *PPPM_IDLE_STATE_ACCOUNTING_EX;

typedef struct {
    DWORD StateCount;
    DWORD TotalTransitions;
    DWORD ResetCount;
    DWORD AbortCount;
    DWORD64 StartTime;
      PPM_IDLE_STATE_ACCOUNTING_EX State[1];
} PPM_IDLE_ACCOUNTING_EX, *PPPM_IDLE_ACCOUNTING_EX;



























































extern "C" const GUID  PPM_PERFSTATE_CHANGE_GUID;
#line 13598 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


extern "C" const GUID  PPM_PERFSTATE_DOMAIN_CHANGE_GUID;
#line 13602 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


extern "C" const GUID  PPM_IDLESTATE_CHANGE_GUID;
#line 13606 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


extern "C" const GUID  PPM_PERFSTATES_DATA_GUID;
#line 13610 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


extern "C" const GUID  PPM_IDLESTATES_DATA_GUID;
#line 13614 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


extern "C" const GUID  PPM_IDLE_ACCOUNTING_GUID;
#line 13618 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


extern "C" const GUID  PPM_IDLE_ACCOUNTING_EX_GUID;
#line 13622 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


extern "C" const GUID  PPM_THERMALCONSTRAINT_GUID;
#line 13626 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


extern "C" const GUID  PPM_PERFMON_PERFSTATE_GUID;
#line 13630 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


extern "C" const GUID  PPM_THERMAL_POLICY_CHANGE_GUID;
#line 13634 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


typedef struct {
    DWORD State;
    DWORD Status;
    DWORD Latency;
    DWORD Speed;
    DWORD Processor;
} PPM_PERFSTATE_EVENT, *PPPM_PERFSTATE_EVENT;

typedef struct {
    DWORD State;
    DWORD Latency;
    DWORD Speed;
    DWORD64 Processors;
} PPM_PERFSTATE_DOMAIN_EVENT, *PPPM_PERFSTATE_DOMAIN_EVENT;

typedef struct {
    DWORD NewState;
    DWORD OldState;
    DWORD64 Processors;
} PPM_IDLESTATE_EVENT, *PPPM_IDLESTATE_EVENT;

typedef struct {
    DWORD ThermalConstraint;
    DWORD64 Processors;
} PPM_THERMALCHANGE_EVENT, *PPPM_THERMALCHANGE_EVENT;

#pragma warning(push)
#pragma warning(disable:4121)

typedef struct {
    BYTE  Mode;
    DWORD64 Processors;
} PPM_THERMAL_POLICY_EVENT, *PPPM_THERMAL_POLICY_EVENT;

#pragma warning(pop)




typedef struct {
    POWER_ACTION    Action;
    DWORD           Flags;
    DWORD           EventCode;
} POWER_ACTION_POLICY, *PPOWER_ACTION_POLICY;
































typedef struct {
    BOOLEAN                 Enable;
    BYTE                    Spare[3];
    DWORD                   BatteryLevel;
    POWER_ACTION_POLICY     PowerPolicy;
    SYSTEM_POWER_STATE      MinSystemState;
} SYSTEM_POWER_LEVEL, *PSYSTEM_POWER_LEVEL;








typedef struct _SYSTEM_POWER_POLICY {
    DWORD                   Revision;       

    
    POWER_ACTION_POLICY     PowerButton;
    POWER_ACTION_POLICY     SleepButton;
    POWER_ACTION_POLICY     LidClose;
    SYSTEM_POWER_STATE      LidOpenWake;
    DWORD                   Reserved;

    
    POWER_ACTION_POLICY     Idle;
    DWORD                   IdleTimeout;
    BYTE                    IdleSensitivity;

    BYTE                    DynamicThrottle;
    BYTE                    Spare2[2];

    
    SYSTEM_POWER_STATE      MinSleep;
    SYSTEM_POWER_STATE      MaxSleep;
    SYSTEM_POWER_STATE      ReducedLatencySleep;
    DWORD                   WinLogonFlags;

    DWORD                   Spare3;

    
    
    DWORD                   DozeS4Timeout;

    
    DWORD                   BroadcastCapacityResolution;
    SYSTEM_POWER_LEVEL      DischargePolicy[4];

    
    DWORD                   VideoTimeout;
    BOOLEAN                 VideoDimDisplay;
    DWORD                   VideoReserved[3];

    
    DWORD                   SpindownTimeout;

    
    BOOLEAN                 OptimizeForPower;
    BYTE                    FanThrottleTolerance;
    BYTE                    ForcedThrottle;
    BYTE                    MinThrottle;
    POWER_ACTION_POLICY     OverThrottled;

} SYSTEM_POWER_POLICY, *PSYSTEM_POWER_POLICY;










typedef struct {
    DWORD TimeCheck;
    BYTE  DemotePercent;
    BYTE  PromotePercent;
    BYTE  Spare[2];
} PROCESSOR_IDLESTATE_INFO, *PPROCESSOR_IDLESTATE_INFO;

typedef struct {
    WORD   Revision;
    union {
        WORD   AsWORD  ;
        struct {
            WORD   AllowScaling : 1;
            WORD   Disabled : 1;
            WORD   Reserved : 14;
        } ;
    } Flags;

    DWORD PolicyCount;
    PROCESSOR_IDLESTATE_INFO Policy[0x3];
} PROCESSOR_IDLESTATE_POLICY, *PPROCESSOR_IDLESTATE_POLICY;














typedef struct _PROCESSOR_POWER_POLICY_INFO {

    
    DWORD                   TimeCheck;                      
    DWORD                   DemoteLimit;                    
    DWORD                   PromoteLimit;                   

    
    BYTE                    DemotePercent;
    BYTE                    PromotePercent;
    BYTE                    Spare[2];

    
    DWORD                   AllowDemotion:1;
    DWORD                   AllowPromotion:1;
    DWORD                   Reserved:30;

} PROCESSOR_POWER_POLICY_INFO, *PPROCESSOR_POWER_POLICY_INFO;


typedef struct _PROCESSOR_POWER_POLICY {
    DWORD                       Revision;       

    
    BYTE                        DynamicThrottle;
    BYTE                        Spare[3];

    
    DWORD                       DisableCStates:1;
    DWORD                       Reserved:31;

    
    
    
    DWORD                       PolicyCount;
    PROCESSOR_POWER_POLICY_INFO Policy[3];

} PROCESSOR_POWER_POLICY, *PPROCESSOR_POWER_POLICY;





typedef struct {
    DWORD Revision;
    BYTE  MaxThrottle;
    BYTE  MinThrottle;
    BYTE  BusyAdjThreshold;
    union {
        BYTE  Spare;
        union {
            BYTE  AsBYTE ;
            struct {
                BYTE  NoDomainAccounting : 1;
                BYTE  IncreasePolicy: 2;
                BYTE  DecreasePolicy: 2;
                BYTE  Reserved : 3;
            } ;
        } Flags;
    } ;

    DWORD TimeCheck;
    DWORD IncreaseTime;
    DWORD DecreaseTime;
    DWORD IncreasePercent;
    DWORD DecreasePercent;
} PROCESSOR_PERFSTATE_POLICY, *PPROCESSOR_PERFSTATE_POLICY;


typedef struct _ADMINISTRATOR_POWER_POLICY {

    
    SYSTEM_POWER_STATE      MinSleep;
    SYSTEM_POWER_STATE      MaxSleep;

    
    DWORD                   MinVideoTimeout;
    DWORD                   MaxVideoTimeout;

    
    DWORD                   MinSpindownTimeout;
    DWORD                   MaxSpindownTimeout;
} ADMINISTRATOR_POWER_POLICY, *PADMINISTRATOR_POWER_POLICY;


typedef struct {
    
    BOOLEAN             PowerButtonPresent;
    BOOLEAN             SleepButtonPresent;
    BOOLEAN             LidPresent;
    BOOLEAN             SystemS1;
    BOOLEAN             SystemS2;
    BOOLEAN             SystemS3;
    BOOLEAN             SystemS4;           
    BOOLEAN             SystemS5;           
    BOOLEAN             HiberFilePresent;
    BOOLEAN             FullWake;
    BOOLEAN             VideoDimPresent;
    BOOLEAN             ApmPresent;
    BOOLEAN             UpsPresent;

    
    BOOLEAN             ThermalControl;
    BOOLEAN             ProcessorThrottle;
    BYTE                ProcessorMinThrottle;




#line 13932 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
    BYTE                ProcessorMaxThrottle;
    BOOLEAN             FastSystemS4;
    BOOLEAN             Hiberboot;
    BOOLEAN             WakeAlarmPresent;
    BOOLEAN             AoAc;
#line 13938 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

    
    BOOLEAN             DiskSpinDown;
    BYTE                spare3[8];

    
    BOOLEAN             SystemBatteriesPresent;
    BOOLEAN             BatteriesAreShortTerm;
    BATTERY_REPORTING_SCALE BatteryScale[3];

    
    SYSTEM_POWER_STATE  AcOnLineWake;
    SYSTEM_POWER_STATE  SoftLidWake;
    SYSTEM_POWER_STATE  RtcWake;
    SYSTEM_POWER_STATE  MinDeviceWakeState; 
    SYSTEM_POWER_STATE  DefaultLowLatencyWake;
} SYSTEM_POWER_CAPABILITIES, *PSYSTEM_POWER_CAPABILITIES;

typedef struct {
    BOOLEAN             AcOnLine;
    BOOLEAN             BatteryPresent;
    BOOLEAN             Charging;
    BOOLEAN             Discharging;
    BOOLEAN             Spare1[3];

    BYTE                Tag;

    DWORD               MaxCapacity;
    DWORD               RemainingCapacity;
    DWORD               Rate;
    DWORD               EstimatedTime;

    DWORD               DefaultAlert1;
    DWORD               DefaultAlert2;
} SYSTEM_BATTERY_STATE, *PSYSTEM_BATTERY_STATE;










#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack4.h"


#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack4.h"
#line 34 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack4.h"
#line 13984 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"







#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack2.h"


#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack2.h"
#line 34 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack2.h"
#line 13992 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"









#line 14002 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef struct _IMAGE_DOS_HEADER {      
    WORD   e_magic;                     
    WORD   e_cblp;                      
    WORD   e_cp;                        
    WORD   e_crlc;                      
    WORD   e_cparhdr;                   
    WORD   e_minalloc;                  
    WORD   e_maxalloc;                  
    WORD   e_ss;                        
    WORD   e_sp;                        
    WORD   e_csum;                      
    WORD   e_ip;                        
    WORD   e_cs;                        
    WORD   e_lfarlc;                    
    WORD   e_ovno;                      
    WORD   e_res[4];                    
    WORD   e_oemid;                     
    WORD   e_oeminfo;                   
    WORD   e_res2[10];                  
    LONG   e_lfanew;                    
  } IMAGE_DOS_HEADER, *PIMAGE_DOS_HEADER;

typedef struct _IMAGE_OS2_HEADER {      
    WORD   ne_magic;                    
    CHAR   ne_ver;                      
    CHAR   ne_rev;                      
    WORD   ne_enttab;                   
    WORD   ne_cbenttab;                 
    LONG   ne_crc;                      
    WORD   ne_flags;                    
    WORD   ne_autodata;                 
    WORD   ne_heap;                     
    WORD   ne_stack;                    
    LONG   ne_csip;                     
    LONG   ne_sssp;                     
    WORD   ne_cseg;                     
    WORD   ne_cmod;                     
    WORD   ne_cbnrestab;                
    WORD   ne_segtab;                   
    WORD   ne_rsrctab;                  
    WORD   ne_restab;                   
    WORD   ne_modtab;                   
    WORD   ne_imptab;                   
    LONG   ne_nrestab;                  
    WORD   ne_cmovent;                  
    WORD   ne_align;                    
    WORD   ne_cres;                     
    BYTE   ne_exetyp;                   
    BYTE   ne_flagsothers;              
    WORD   ne_pretthunks;               
    WORD   ne_psegrefbytes;             
    WORD   ne_swaparea;                 
    WORD   ne_expver;                   
  } IMAGE_OS2_HEADER, *PIMAGE_OS2_HEADER;

typedef struct _IMAGE_VXD_HEADER {      
    WORD   e32_magic;                   
    BYTE   e32_border;                  
    BYTE   e32_worder;                  
    DWORD  e32_level;                   
    WORD   e32_cpu;                     
    WORD   e32_os;                      
    DWORD  e32_ver;                     
    DWORD  e32_mflags;                  
    DWORD  e32_mpages;                  
    DWORD  e32_startobj;                
    DWORD  e32_eip;                     
    DWORD  e32_stackobj;                
    DWORD  e32_esp;                     
    DWORD  e32_pagesize;                
    DWORD  e32_lastpagesize;            
    DWORD  e32_fixupsize;               
    DWORD  e32_fixupsum;                
    DWORD  e32_ldrsize;                 
    DWORD  e32_ldrsum;                  
    DWORD  e32_objtab;                  
    DWORD  e32_objcnt;                  
    DWORD  e32_objmap;                  
    DWORD  e32_itermap;                 
    DWORD  e32_rsrctab;                 
    DWORD  e32_rsrccnt;                 
    DWORD  e32_restab;                  
    DWORD  e32_enttab;                  
    DWORD  e32_dirtab;                  
    DWORD  e32_dircnt;                  
    DWORD  e32_fpagetab;                
    DWORD  e32_frectab;                 
    DWORD  e32_impmod;                  
    DWORD  e32_impmodcnt;               
    DWORD  e32_impproc;                 
    DWORD  e32_pagesum;                 
    DWORD  e32_datapage;                
    DWORD  e32_preload;                 
    DWORD  e32_nrestab;                 
    DWORD  e32_cbnrestab;               
    DWORD  e32_nressum;                 
    DWORD  e32_autodata;                
    DWORD  e32_debuginfo;               
    DWORD  e32_debuglen;                
    DWORD  e32_instpreload;             
    DWORD  e32_instdemand;              
    DWORD  e32_heapsize;                
    BYTE   e32_res3[12];                
    DWORD  e32_winresoff;
    DWORD  e32_winreslen;
    WORD   e32_devid;                   
    WORD   e32_ddkver;                  
  } IMAGE_VXD_HEADER, *PIMAGE_VXD_HEADER;


#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"
#line 14114 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 14115 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





typedef struct _IMAGE_FILE_HEADER {
    WORD    Machine;
    WORD    NumberOfSections;
    DWORD   TimeDateStamp;
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
    WORD    SizeOfOptionalHeader;
    WORD    Characteristics;
} IMAGE_FILE_HEADER, *PIMAGE_FILE_HEADER;






















































typedef struct _IMAGE_DATA_DIRECTORY {
    DWORD   VirtualAddress;
    DWORD   Size;
} IMAGE_DATA_DIRECTORY, *PIMAGE_DATA_DIRECTORY;







typedef struct _IMAGE_OPTIONAL_HEADER {
    
    
    

    WORD    Magic;
    BYTE    MajorLinkerVersion;
    BYTE    MinorLinkerVersion;
    DWORD   SizeOfCode;
    DWORD   SizeOfInitializedData;
    DWORD   SizeOfUninitializedData;
    DWORD   AddressOfEntryPoint;
    DWORD   BaseOfCode;
    DWORD   BaseOfData;

    
    
    

    DWORD   ImageBase;
    DWORD   SectionAlignment;
    DWORD   FileAlignment;
    WORD    MajorOperatingSystemVersion;
    WORD    MinorOperatingSystemVersion;
    WORD    MajorImageVersion;
    WORD    MinorImageVersion;
    WORD    MajorSubsystemVersion;
    WORD    MinorSubsystemVersion;
    DWORD   Win32VersionValue;
    DWORD   SizeOfImage;
    DWORD   SizeOfHeaders;
    DWORD   CheckSum;
    WORD    Subsystem;
    WORD    DllCharacteristics;
    DWORD   SizeOfStackReserve;
    DWORD   SizeOfStackCommit;
    DWORD   SizeOfHeapReserve;
    DWORD   SizeOfHeapCommit;
    DWORD   LoaderFlags;
    DWORD   NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;

typedef struct _IMAGE_ROM_OPTIONAL_HEADER {
    WORD   Magic;
    BYTE   MajorLinkerVersion;
    BYTE   MinorLinkerVersion;
    DWORD  SizeOfCode;
    DWORD  SizeOfInitializedData;
    DWORD  SizeOfUninitializedData;
    DWORD  AddressOfEntryPoint;
    DWORD  BaseOfCode;
    DWORD  BaseOfData;
    DWORD  BaseOfBss;
    DWORD  GprMask;
    DWORD  CprMask[4];
    DWORD  GpValue;
} IMAGE_ROM_OPTIONAL_HEADER, *PIMAGE_ROM_OPTIONAL_HEADER;

typedef struct _IMAGE_OPTIONAL_HEADER64 {
    WORD        Magic;
    BYTE        MajorLinkerVersion;
    BYTE        MinorLinkerVersion;
    DWORD       SizeOfCode;
    DWORD       SizeOfInitializedData;
    DWORD       SizeOfUninitializedData;
    DWORD       AddressOfEntryPoint;
    DWORD       BaseOfCode;
    ULONGLONG   ImageBase;
    DWORD       SectionAlignment;
    DWORD       FileAlignment;
    WORD        MajorOperatingSystemVersion;
    WORD        MinorOperatingSystemVersion;
    WORD        MajorImageVersion;
    WORD        MinorImageVersion;
    WORD        MajorSubsystemVersion;
    WORD        MinorSubsystemVersion;
    DWORD       Win32VersionValue;
    DWORD       SizeOfImage;
    DWORD       SizeOfHeaders;
    DWORD       CheckSum;
    WORD        Subsystem;
    WORD        DllCharacteristics;
    ULONGLONG   SizeOfStackReserve;
    ULONGLONG   SizeOfStackCommit;
    ULONGLONG   SizeOfHeapReserve;
    ULONGLONG   SizeOfHeapCommit;
    DWORD       LoaderFlags;
    DWORD       NumberOfRvaAndSizes;
    IMAGE_DATA_DIRECTORY DataDirectory[16];
} IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;










typedef IMAGE_OPTIONAL_HEADER32             IMAGE_OPTIONAL_HEADER;
typedef PIMAGE_OPTIONAL_HEADER32            PIMAGE_OPTIONAL_HEADER;

#line 14299 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef struct _IMAGE_NT_HEADERS64 {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER64 OptionalHeader;
} IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;

typedef struct _IMAGE_NT_HEADERS {
    DWORD Signature;
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_OPTIONAL_HEADER32 OptionalHeader;
} IMAGE_NT_HEADERS32, *PIMAGE_NT_HEADERS32;

typedef struct _IMAGE_ROM_HEADERS {
    IMAGE_FILE_HEADER FileHeader;
    IMAGE_ROM_OPTIONAL_HEADER OptionalHeader;
} IMAGE_ROM_HEADERS, *PIMAGE_ROM_HEADERS;





typedef IMAGE_NT_HEADERS32                  IMAGE_NT_HEADERS;
typedef PIMAGE_NT_HEADERS32                 PIMAGE_NT_HEADERS;
#line 14324 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



































































typedef struct ANON_OBJECT_HEADER {
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
} ANON_OBJECT_HEADER;

typedef struct ANON_OBJECT_HEADER_V2 {
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
    DWORD   Flags;           
    DWORD   MetaDataSize;    
    DWORD   MetaDataOffset;  
} ANON_OBJECT_HEADER_V2;

typedef struct ANON_OBJECT_HEADER_BIGOBJ {
   
    WORD    Sig1;            
    WORD    Sig2;            
    WORD    Version;         
    WORD    Machine;         
    DWORD   TimeDateStamp;
    CLSID   ClassID;         
    DWORD   SizeOfData;      
    DWORD   Flags;           
    DWORD   MetaDataSize;    
    DWORD   MetaDataOffset;  

    
    DWORD   NumberOfSections; 
    DWORD   PointerToSymbolTable;
    DWORD   NumberOfSymbols;
} ANON_OBJECT_HEADER_BIGOBJ;







typedef struct _IMAGE_SECTION_HEADER {
    BYTE    Name[8];
    union {
            DWORD   PhysicalAddress;
            DWORD   VirtualSize;
    } Misc;
    DWORD   VirtualAddress;
    DWORD   SizeOfRawData;
    DWORD   PointerToRawData;
    DWORD   PointerToRelocations;
    DWORD   PointerToLinenumbers;
    WORD    NumberOfRelocations;
    WORD    NumberOfLinenumbers;
    DWORD   Characteristics;
} IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;

































































#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack2.h"


#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack2.h"
#line 34 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack2.h"
#line 14520 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 14521 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





typedef struct _IMAGE_SYMBOL {
    union {
        BYTE    ShortName[8];
        struct {
            DWORD   Short;     
            DWORD   Long;      
        } Name;
        DWORD   LongName[2];    
    } N;
    DWORD   Value;
    SHORT   SectionNumber;
    WORD    Type;
    BYTE    StorageClass;
    BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL;
typedef IMAGE_SYMBOL  *PIMAGE_SYMBOL;



typedef struct _IMAGE_SYMBOL_EX {
    union {
        BYTE     ShortName[8];
        struct {
            DWORD   Short;     
            DWORD   Long;      
        } Name;
        DWORD   LongName[2];    
    } N;
    DWORD   Value;
    LONG    SectionNumber;
    WORD    Type;
    BYTE    StorageClass;
    BYTE    NumberOfAuxSymbols;
} IMAGE_SYMBOL_EX;
typedef IMAGE_SYMBOL_EX  *PIMAGE_SYMBOL_EX;
































































































#line 14658 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




#line 14663 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





#line 14669 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




#line 14674 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



#line 14678 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


#line 14681 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"
#line 14683 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef struct IMAGE_AUX_SYMBOL_TOKEN_DEF {
    BYTE  bAuxType;                  
    BYTE  bReserved;                 
    DWORD SymbolTableIndex;
    BYTE  rgbReserved[12];           
} IMAGE_AUX_SYMBOL_TOKEN_DEF;

typedef IMAGE_AUX_SYMBOL_TOKEN_DEF  *PIMAGE_AUX_SYMBOL_TOKEN_DEF;

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 14694 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





typedef union _IMAGE_AUX_SYMBOL {
    struct {
        DWORD    TagIndex;                      
        union {
            struct {
                WORD    Linenumber;             
                WORD    Size;                   
            } LnSz;
           DWORD    TotalSize;
        } Misc;
        union {
            struct {                            
                DWORD    PointerToLinenumber;
                DWORD    PointerToNextFunction;
            } Function;
            struct {                            
                WORD     Dimension[4];
            } Array;
        } FcnAry;
        WORD    TvIndex;                        
    } Sym;
    struct {
        BYTE    Name[18];
    } File;
    struct {
        DWORD   Length;                         
        WORD    NumberOfRelocations;            
        WORD    NumberOfLinenumbers;            
        DWORD   CheckSum;                       
        SHORT   Number;                         
        BYTE    Selection;                      
	BYTE    bReserved;
	SHORT   HighNumber;                     
    } Section;
    IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
    struct {
        DWORD crc;
        BYTE  rgbReserved[14];
    } CRC;
} IMAGE_AUX_SYMBOL;
typedef IMAGE_AUX_SYMBOL  *PIMAGE_AUX_SYMBOL;

typedef union _IMAGE_AUX_SYMBOL_EX {
    struct {
        DWORD   WeakDefaultSymIndex;                       
        DWORD   WeakSearchType;
        BYTE    rgbReserved[12];
    } Sym;
    struct {
        BYTE    Name[sizeof(IMAGE_SYMBOL_EX)];
    } File;
    struct {
        DWORD   Length;                         
        WORD    NumberOfRelocations;            
        WORD    NumberOfLinenumbers;            
        DWORD   CheckSum;                       
        SHORT   Number;                         
        BYTE    Selection;                      
        BYTE    bReserved;
        SHORT   HighNumber;                     
        BYTE    rgbReserved[2];
    } Section;
    struct{
        IMAGE_AUX_SYMBOL_TOKEN_DEF TokenDef;
        BYTE  rgbReserved[2];
    };
    struct {
        DWORD crc;
        BYTE  rgbReserved[16];
    } CRC;
} IMAGE_AUX_SYMBOL_EX;
typedef IMAGE_AUX_SYMBOL_EX  *PIMAGE_AUX_SYMBOL_EX;

typedef enum IMAGE_AUX_SYMBOL_TYPE {
    IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1,
} IMAGE_AUX_SYMBOL_TYPE;






















typedef struct _IMAGE_RELOCATION {
    union {
        DWORD   VirtualAddress;
        DWORD   RelocCount;             
    } ;
    DWORD   SymbolTableIndex;
    WORD    Type;
} IMAGE_RELOCATION;
typedef IMAGE_RELOCATION  *PIMAGE_RELOCATION;




























































































































                                                
                                                
                                                
                                                




















































































































































































































































typedef struct _IMAGE_LINENUMBER {
    union {
        DWORD   SymbolTableIndex;               
        DWORD   VirtualAddress;                 
    } Type;
    WORD    Linenumber;                         
} IMAGE_LINENUMBER;
typedef IMAGE_LINENUMBER  *PIMAGE_LINENUMBER;


#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"
#line 15189 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 15190 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





typedef struct _IMAGE_BASE_RELOCATION {
    DWORD   VirtualAddress;
    DWORD   SizeOfBlock;

} IMAGE_BASE_RELOCATION;
typedef IMAGE_BASE_RELOCATION  * PIMAGE_BASE_RELOCATION;









































typedef struct _IMAGE_ARCHIVE_MEMBER_HEADER {
    BYTE     Name[16];                          
    BYTE     Date[12];                          
    BYTE     UserID[6];                         
    BYTE     GroupID[6];                        
    BYTE     Mode[8];                           
    BYTE     Size[10];                          
    BYTE     EndHeader[2];                      
} IMAGE_ARCHIVE_MEMBER_HEADER, *PIMAGE_ARCHIVE_MEMBER_HEADER;











typedef struct _IMAGE_EXPORT_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Name;
    DWORD   Base;
    DWORD   NumberOfFunctions;
    DWORD   NumberOfNames;
    DWORD   AddressOfFunctions;     
    DWORD   AddressOfNames;         
    DWORD   AddressOfNameOrdinals;  
} IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;





typedef struct _IMAGE_IMPORT_BY_NAME {
    WORD    Hint;
    CHAR   Name[1];
} IMAGE_IMPORT_BY_NAME, *PIMAGE_IMPORT_BY_NAME;

#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack8.h"


#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack8.h"
#line 34 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\pshpack8.h"
#line 15286 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef struct _IMAGE_THUNK_DATA64 {
    union {
        ULONGLONG ForwarderString;  
        ULONGLONG Function;         
        ULONGLONG Ordinal;
        ULONGLONG AddressOfData;    
    } u1;
} IMAGE_THUNK_DATA64;
typedef IMAGE_THUNK_DATA64 * PIMAGE_THUNK_DATA64;

#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"
#line 15298 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef struct _IMAGE_THUNK_DATA32 {
    union {
        DWORD ForwarderString;      
        DWORD Function;             
        DWORD Ordinal;
        DWORD AddressOfData;        
    } u1;
} IMAGE_THUNK_DATA32;
typedef IMAGE_THUNK_DATA32 * PIMAGE_THUNK_DATA32;












typedef void
(__stdcall *PIMAGE_TLS_CALLBACK) (
    PVOID DllHandle,
    DWORD Reason,
    PVOID Reserved
    );

typedef struct _IMAGE_TLS_DIRECTORY64 {
    ULONGLONG   StartAddressOfRawData;
    ULONGLONG   EndAddressOfRawData;
    ULONGLONG   AddressOfIndex;         
    ULONGLONG   AddressOfCallBacks;     
    DWORD   SizeOfZeroFill;
    DWORD   Characteristics;
} IMAGE_TLS_DIRECTORY64;
typedef IMAGE_TLS_DIRECTORY64 * PIMAGE_TLS_DIRECTORY64;

typedef struct _IMAGE_TLS_DIRECTORY32 {
    DWORD   StartAddressOfRawData;
    DWORD   EndAddressOfRawData;
    DWORD   AddressOfIndex;             
    DWORD   AddressOfCallBacks;         
    DWORD   SizeOfZeroFill;
    DWORD   Characteristics;
} IMAGE_TLS_DIRECTORY32;
typedef IMAGE_TLS_DIRECTORY32 * PIMAGE_TLS_DIRECTORY32;












typedef IMAGE_THUNK_DATA32              IMAGE_THUNK_DATA;
typedef PIMAGE_THUNK_DATA32             PIMAGE_THUNK_DATA;

typedef IMAGE_TLS_DIRECTORY32           IMAGE_TLS_DIRECTORY;
typedef PIMAGE_TLS_DIRECTORY32          PIMAGE_TLS_DIRECTORY;
#line 15364 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef struct _IMAGE_IMPORT_DESCRIPTOR {
    union {
        DWORD   Characteristics;            
        DWORD   OriginalFirstThunk;         
    } ;
    DWORD   TimeDateStamp;                  
                                            
                                            
                                            

    DWORD   ForwarderChain;                 
    DWORD   Name;
    DWORD   FirstThunk;                     
} IMAGE_IMPORT_DESCRIPTOR;
typedef IMAGE_IMPORT_DESCRIPTOR  *PIMAGE_IMPORT_DESCRIPTOR;





typedef struct _IMAGE_BOUND_IMPORT_DESCRIPTOR {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    NumberOfModuleForwarderRefs;

} IMAGE_BOUND_IMPORT_DESCRIPTOR,  *PIMAGE_BOUND_IMPORT_DESCRIPTOR;

typedef struct _IMAGE_BOUND_FORWARDER_REF {
    DWORD   TimeDateStamp;
    WORD    OffsetModuleName;
    WORD    Reserved;
} IMAGE_BOUND_FORWARDER_REF, *PIMAGE_BOUND_FORWARDER_REF;

typedef struct _IMAGE_DELAYLOAD_DESCRIPTOR {
    union {
        DWORD AllAttributes;
        struct {
            DWORD RvaBased : 1;             
            DWORD ReservedAttributes : 31;
        };
    } Attributes;

    DWORD DllNameRVA;                       
    DWORD ModuleHandleRVA;                  
    DWORD ImportAddressTableRVA;            
    DWORD ImportNameTableRVA;               
    DWORD BoundImportAddressTableRVA;       
    DWORD UnloadInformationTableRVA;        
    DWORD TimeDateStamp;                    
                                            

} IMAGE_DELAYLOAD_DESCRIPTOR, *PIMAGE_DELAYLOAD_DESCRIPTOR;

typedef const IMAGE_DELAYLOAD_DESCRIPTOR *PCIMAGE_DELAYLOAD_DESCRIPTOR;



















typedef struct _IMAGE_RESOURCE_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    WORD    NumberOfNamedEntries;
    WORD    NumberOfIdEntries;

} IMAGE_RESOURCE_DIRECTORY, *PIMAGE_RESOURCE_DIRECTORY;


















typedef struct _IMAGE_RESOURCE_DIRECTORY_ENTRY {
    union {
        struct {
            DWORD NameOffset:31;
            DWORD NameIsString:1;
        } ;
        DWORD   Name;
        WORD    Id;
    } ;
    union {
        DWORD   OffsetToData;
        struct {
            DWORD   OffsetToDirectory:31;
            DWORD   DataIsDirectory:1;
        } ;
    } ;
} IMAGE_RESOURCE_DIRECTORY_ENTRY, *PIMAGE_RESOURCE_DIRECTORY_ENTRY;










typedef struct _IMAGE_RESOURCE_DIRECTORY_STRING {
    WORD    Length;
    CHAR    NameString[ 1 ];
} IMAGE_RESOURCE_DIRECTORY_STRING, *PIMAGE_RESOURCE_DIRECTORY_STRING;


typedef struct _IMAGE_RESOURCE_DIR_STRING_U {
    WORD    Length;
    WCHAR   NameString[ 1 ];
} IMAGE_RESOURCE_DIR_STRING_U, *PIMAGE_RESOURCE_DIR_STRING_U;











typedef struct _IMAGE_RESOURCE_DATA_ENTRY {
    DWORD   OffsetToData;
    DWORD   Size;
    DWORD   CodePage;
    DWORD   Reserved;
} IMAGE_RESOURCE_DATA_ENTRY, *PIMAGE_RESOURCE_DATA_ENTRY;





typedef struct {
    DWORD   Size;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   GlobalFlagsClear;
    DWORD   GlobalFlagsSet;
    DWORD   CriticalSectionDefaultTimeout;
    DWORD   DeCommitFreeBlockThreshold;
    DWORD   DeCommitTotalFreeThreshold;
    DWORD   LockPrefixTable;            
    DWORD   MaximumAllocationSize;
    DWORD   VirtualMemoryThreshold;
    DWORD   ProcessHeapFlags;
    DWORD   ProcessAffinityMask;
    WORD    CSDVersion;
    WORD    Reserved1;
    DWORD   EditList;                   
    DWORD   SecurityCookie;             
    DWORD   SEHandlerTable;             
    DWORD   SEHandlerCount;
} IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;

typedef struct {
    DWORD      Size;
    DWORD      TimeDateStamp;
    WORD       MajorVersion;
    WORD       MinorVersion;
    DWORD      GlobalFlagsClear;
    DWORD      GlobalFlagsSet;
    DWORD      CriticalSectionDefaultTimeout;
    ULONGLONG  DeCommitFreeBlockThreshold;
    ULONGLONG  DeCommitTotalFreeThreshold;
    ULONGLONG  LockPrefixTable;         
    ULONGLONG  MaximumAllocationSize;
    ULONGLONG  VirtualMemoryThreshold;
    ULONGLONG  ProcessAffinityMask;
    DWORD      ProcessHeapFlags;
    WORD       CSDVersion;
    WORD       Reserved1;
    ULONGLONG  EditList;                
    ULONGLONG  SecurityCookie;          
    ULONGLONG  SEHandlerTable;          
    ULONGLONG  SEHandlerCount;
} IMAGE_LOAD_CONFIG_DIRECTORY64, *PIMAGE_LOAD_CONFIG_DIRECTORY64;





typedef IMAGE_LOAD_CONFIG_DIRECTORY32     IMAGE_LOAD_CONFIG_DIRECTORY;
typedef PIMAGE_LOAD_CONFIG_DIRECTORY32    PIMAGE_LOAD_CONFIG_DIRECTORY;
#line 15577 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"










typedef struct _IMAGE_CE_RUNTIME_FUNCTION_ENTRY {
    DWORD FuncStart;
    DWORD PrologLen : 8;
    DWORD FuncLen : 22;
    DWORD ThirtyTwoBit : 1;
    DWORD ExceptionFlag : 1;
} IMAGE_CE_RUNTIME_FUNCTION_ENTRY, * PIMAGE_CE_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ARM_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    union {
        DWORD UnwindData;
        struct {
            DWORD Flag : 2;
            DWORD FunctionLength : 11;
            DWORD Ret : 2;
            DWORD H : 1;
            DWORD Reg : 3;
            DWORD R : 1;
            DWORD L : 1;
            DWORD C : 1;
            DWORD StackAdjust : 10;
        } ;
    } ;
} IMAGE_ARM_RUNTIME_FUNCTION_ENTRY, * PIMAGE_ARM_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY {
    ULONGLONG BeginAddress;
    ULONGLONG EndAddress;
    ULONGLONG ExceptionHandler;
    ULONGLONG HandlerData;
    ULONGLONG PrologEndAddress;
} IMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA64_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    DWORD ExceptionHandler;
    DWORD HandlerData;
    DWORD PrologEndAddress;
} IMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY, *PIMAGE_ALPHA_RUNTIME_FUNCTION_ENTRY;

typedef struct _IMAGE_RUNTIME_FUNCTION_ENTRY {
    DWORD BeginAddress;
    DWORD EndAddress;
    union {
        DWORD UnwindInfoAddress;
        DWORD UnwindData;
    } ;
} _IMAGE_RUNTIME_FUNCTION_ENTRY, *_PIMAGE_RUNTIME_FUNCTION_ENTRY;

typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_IA64_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_IA64_RUNTIME_FUNCTION_ENTRY;








#line 15649 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




#line 15654 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




#line 15659 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef  _IMAGE_RUNTIME_FUNCTION_ENTRY  IMAGE_RUNTIME_FUNCTION_ENTRY;
typedef _PIMAGE_RUNTIME_FUNCTION_ENTRY PIMAGE_RUNTIME_FUNCTION_ENTRY;

#line 15664 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





typedef struct _IMAGE_DEBUG_DIRECTORY {
    DWORD   Characteristics;
    DWORD   TimeDateStamp;
    WORD    MajorVersion;
    WORD    MinorVersion;
    DWORD   Type;
    DWORD   SizeOfData;
    DWORD   AddressOfRawData;
    DWORD   PointerToRawData;
} IMAGE_DEBUG_DIRECTORY, *PIMAGE_DEBUG_DIRECTORY;















typedef struct _IMAGE_COFF_SYMBOLS_HEADER {
    DWORD   NumberOfSymbols;
    DWORD   LvaToFirstSymbol;
    DWORD   NumberOfLinenumbers;
    DWORD   LvaToFirstLinenumber;
    DWORD   RvaToFirstByteOfCode;
    DWORD   RvaToLastByteOfCode;
    DWORD   RvaToFirstByteOfData;
    DWORD   RvaToLastByteOfData;
} IMAGE_COFF_SYMBOLS_HEADER, *PIMAGE_COFF_SYMBOLS_HEADER;






typedef struct _FPO_DATA {
    DWORD       ulOffStart;             
    DWORD       cbProcSize;             
    DWORD       cdwLocals;              
    WORD        cdwParams;              
    WORD        cbProlog : 8;           
    WORD        cbRegs   : 3;           
    WORD        fHasSEH  : 1;           
    WORD        fUseBP   : 1;           
    WORD        reserved : 1;           
    WORD        cbFrame  : 2;           
} FPO_DATA, *PFPO_DATA;





typedef struct _IMAGE_DEBUG_MISC {
    DWORD       DataType;               
    DWORD       Length;                 
                                        
    BOOLEAN     Unicode;                
    BYTE        Reserved[ 3 ];
    BYTE        Data[ 1 ];              
} IMAGE_DEBUG_MISC, *PIMAGE_DEBUG_MISC;








typedef struct _IMAGE_FUNCTION_ENTRY {
    DWORD   StartingAddress;
    DWORD   EndingAddress;
    DWORD   EndOfPrologue;
} IMAGE_FUNCTION_ENTRY, *PIMAGE_FUNCTION_ENTRY;

typedef struct _IMAGE_FUNCTION_ENTRY64 {
    ULONGLONG   StartingAddress;
    ULONGLONG   EndingAddress;
    union {
        ULONGLONG   EndOfPrologue;
        ULONGLONG   UnwindInfoAddress;
    } ;
} IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;





















typedef struct _IMAGE_SEPARATE_DEBUG_HEADER {
    WORD        Signature;
    WORD        Flags;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       ImageBase;
    DWORD       SizeOfImage;
    DWORD       NumberOfSections;
    DWORD       ExportedNamesSize;
    DWORD       DebugDirectorySize;
    DWORD       SectionAlignment;
    DWORD       Reserved[2];
} IMAGE_SEPARATE_DEBUG_HEADER, *PIMAGE_SEPARATE_DEBUG_HEADER;

typedef struct _NON_PAGED_DEBUG_INFO {
    WORD        Signature;
    WORD        Flags;
    DWORD       Size;
    WORD        Machine;
    WORD        Characteristics;
    DWORD       TimeDateStamp;
    DWORD       CheckSum;
    DWORD       SizeOfImage;
    ULONGLONG   ImageBase;
    
    
} NON_PAGED_DEBUG_INFO, *PNON_PAGED_DEBUG_INFO;







#line 15815 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



                                                









typedef struct _ImageArchitectureHeader {
    unsigned int AmaskValue: 1;                 
                                                
    int :7;                                     
    unsigned int AmaskShift: 8;                 
    int :16;                                    
    DWORD FirstEntryRVA;                        
} IMAGE_ARCHITECTURE_HEADER, *PIMAGE_ARCHITECTURE_HEADER;

typedef struct _ImageArchitectureEntry {
    DWORD FixupInstRVA;                         
    DWORD NewInst;                              
} IMAGE_ARCHITECTURE_ENTRY, *PIMAGE_ARCHITECTURE_ENTRY;

#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"


#line 36 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"
#line 37 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\poppack.h"
#line 15843 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"








typedef struct IMPORT_OBJECT_HEADER {
    WORD    Sig1;                       
    WORD    Sig2;                       
    WORD    Version;
    WORD    Machine;
    DWORD   TimeDateStamp;              
    DWORD   SizeOfData;                 

    union {
        WORD    Ordinal;                
        WORD    Hint;
    } ;

    WORD    Type : 2;                   
    WORD    NameType : 3;               
    WORD    Reserved : 11;              
} IMPORT_OBJECT_HEADER;

typedef enum IMPORT_OBJECT_TYPE
{
    IMPORT_OBJECT_CODE = 0,
    IMPORT_OBJECT_DATA = 1,
    IMPORT_OBJECT_CONST = 2,
} IMPORT_OBJECT_TYPE;

typedef enum IMPORT_OBJECT_NAME_TYPE
{
    IMPORT_OBJECT_ORDINAL = 0,          
    IMPORT_OBJECT_NAME = 1,             
    IMPORT_OBJECT_NAME_NO_PREFIX = 2,   
    IMPORT_OBJECT_NAME_UNDECORATE = 3,  
                                        
} IMPORT_OBJECT_NAME_TYPE;





typedef enum ReplacesCorHdrNumericDefines
{

    COMIMAGE_FLAGS_ILONLY               =0x00000001,
    COMIMAGE_FLAGS_32BITREQUIRED        =0x00000002,
    COMIMAGE_FLAGS_IL_LIBRARY           =0x00000004,
    COMIMAGE_FLAGS_STRONGNAMESIGNED     =0x00000008,
    COMIMAGE_FLAGS_NATIVE_ENTRYPOINT    =0x00000010,
    COMIMAGE_FLAGS_TRACKDEBUGDATA       =0x00010000,


    COR_VERSION_MAJOR_V2                =2,
    COR_VERSION_MAJOR                   =COR_VERSION_MAJOR_V2,
    COR_VERSION_MINOR                   =5,
    COR_DELETED_NAME_LENGTH             =8,
    COR_VTABLEGAP_NAME_LENGTH           =8,


    NATIVE_TYPE_MAX_CB                  =1,
    COR_ILMETHOD_SECT_SMALL_MAX_DATASIZE=0xFF,


    IMAGE_COR_MIH_METHODRVA             =0x01,
    IMAGE_COR_MIH_EHRVA                 =0x02,
    IMAGE_COR_MIH_BASICBLOCK            =0x08,


    COR_VTABLE_32BIT                    =0x01,          
    COR_VTABLE_64BIT                    =0x02,          
    COR_VTABLE_FROM_UNMANAGED           =0x04,          
    COR_VTABLE_FROM_UNMANAGED_RETAIN_APPDOMAIN  =0x08,  
    COR_VTABLE_CALL_MOST_DERIVED        =0x10,          


    IMAGE_COR_EATJ_THUNK_SIZE           =32,            


    
    MAX_CLASS_NAME                      =1024,
    MAX_PACKAGE_NAME                    =1024,
} ReplacesCorHdrNumericDefines;


typedef struct IMAGE_COR20_HEADER
{
    
    DWORD                   cb;
    WORD                    MajorRuntimeVersion;
    WORD                    MinorRuntimeVersion;

    
    IMAGE_DATA_DIRECTORY    MetaData;
    DWORD                   Flags;

    
    
    union {
        DWORD               EntryPointToken;
        DWORD               EntryPointRVA;
    } ;

    
    IMAGE_DATA_DIRECTORY    Resources;
    IMAGE_DATA_DIRECTORY    StrongNameSignature;

    
    IMAGE_DATA_DIRECTORY    CodeManagerTable;
    IMAGE_DATA_DIRECTORY    VTableFixups;
    IMAGE_DATA_DIRECTORY    ExportAddressTableJumps;

    
    IMAGE_DATA_DIRECTORY    ManagedNativeHeader;

} IMAGE_COR20_HEADER, *PIMAGE_COR20_HEADER;

#line 15965 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































#line 83 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"



#line 87 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"


























































































#line 178 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"
#line 15971 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"







#pragma region Desktop Family






__declspec(dllimport)
WORD  
__stdcall
RtlCaptureStackBackTrace(
      DWORD FramesToSkip,
      DWORD FramesToCapture,
      PVOID * BackTrace,
      PDWORD BackTraceHash
    );


#line 15997 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




__declspec(dllimport)
void
__stdcall
RtlCaptureContext(
      PCONTEXT ContextRecord
    );


#line 16010 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 16012 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
void
__stdcall
RtlUnwind(
      PVOID TargetFrame,
      PVOID TargetIp,
      PEXCEPTION_RECORD ExceptionRecord,
      PVOID ReturnValue
    );


#line 16032 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma endregion




























































































































































#line 16190 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





























































































































































#line 16348 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"




































































































#line 16449 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

























#line 16475 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


#pragma region Application Family






__declspec(dllimport)
PVOID
__stdcall
RtlPcToFileHeader(
      PVOID PcValue,
      PVOID * BaseOfImage
    );


#line 16494 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 16496 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma endregion


#pragma region Desktop Family








 
__declspec(dllimport)
SIZE_T
__stdcall
RtlCompareMemory(
      const void * Source1,
      const void * Source2,
      SIZE_T Length
    );


#line 16520 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 16522 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 16524 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma endregion










#line 16536 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

























#line 16562 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef struct _SINGLE_LIST_ENTRY SLIST_ENTRY, *PSLIST_ENTRY;

#line 16566 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


























#line 16593 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef union _SLIST_HEADER {
    ULONGLONG Alignment;
    struct {
        SLIST_ENTRY Next;
        WORD   Depth;
        WORD   Sequence;
    } ;
} SLIST_HEADER, *PSLIST_HEADER;

#line 16604 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 16606 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


#pragma region Desktop Family


__declspec(dllimport)
void
__stdcall
RtlInitializeSListHead (
      PSLIST_HEADER ListHead
    );

 
__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlFirstEntrySList (
      const SLIST_HEADER *ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPopEntrySList (
      PSLIST_HEADER ListHead
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushEntrySList (
      PSLIST_HEADER ListHead,
        PSLIST_ENTRY ListEntry
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedPushListSListEx (
      PSLIST_HEADER ListHead,
        PSLIST_ENTRY List,
      PSLIST_ENTRY ListEnd,
      DWORD Count
    );

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
RtlInterlockedFlushSList (
      PSLIST_HEADER ListHead
    );

__declspec(dllimport)
WORD  
__stdcall
RtlQueryDepthSList (
      PSLIST_HEADER ListHead
    );

#line 16666 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma endregion


























typedef union _RTL_RUN_ONCE {       
    PVOID Ptr;                      
} RTL_RUN_ONCE, *PRTL_RUN_ONCE;     

#line 16698 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef struct _RTL_BARRIER {                       
            DWORD Reserved1;                        
            DWORD Reserved2;                        
            ULONG_PTR Reserved3[2];                 
            DWORD Reserved4;                        
            DWORD Reserved5;                        
} RTL_BARRIER, *PRTL_BARRIER;                       























__declspec(noreturn)
void
__fastfail(
      unsigned int Code
    );

#pragma intrinsic(__fastfail)

#line 16738 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"















#pragma region Desktop Family


__forceinline
DWORD
HEAP_MAKE_TAG_FLAGS (
      DWORD TagBase,
      DWORD Tag
    )

{
    return ((DWORD)((TagBase) + ((Tag) << 18)));
}
#line 16767 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#line 16768 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma endregion






















































#line 16824 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"











__forceinline
PVOID
RtlSecureZeroMemory(
      PVOID ptr,
      SIZE_T cnt
    )
{
    volatile char *vptr = (volatile char *)ptr;





#line 16849 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

    while (cnt) {





#line 16857 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

        *vptr = 0;

#line 16861 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

        vptr++;
        cnt--;
    }

#line 16867 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

    return ptr;
}

#line 16872 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



















typedef struct _MESSAGE_RESOURCE_ENTRY {
    WORD   Length;
    WORD   Flags;
    BYTE  Text[ 1 ];
} MESSAGE_RESOURCE_ENTRY, *PMESSAGE_RESOURCE_ENTRY;



typedef struct _MESSAGE_RESOURCE_BLOCK {
    DWORD LowId;
    DWORD HighId;
    DWORD OffsetToEntries;
} MESSAGE_RESOURCE_BLOCK, *PMESSAGE_RESOURCE_BLOCK;

typedef struct _MESSAGE_RESOURCE_DATA {
    DWORD NumberOfBlocks;
    MESSAGE_RESOURCE_BLOCK Blocks[ 1 ];
} MESSAGE_RESOURCE_DATA, *PMESSAGE_RESOURCE_DATA;

typedef struct _OSVERSIONINFOA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
} OSVERSIONINFOA, *POSVERSIONINFOA, *LPOSVERSIONINFOA;

typedef struct _OSVERSIONINFOW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
} OSVERSIONINFOW, *POSVERSIONINFOW, *LPOSVERSIONINFOW, RTL_OSVERSIONINFOW, *PRTL_OSVERSIONINFOW;





typedef OSVERSIONINFOA OSVERSIONINFO;
typedef POSVERSIONINFOA POSVERSIONINFO;
typedef LPOSVERSIONINFOA LPOSVERSIONINFO;
#line 16936 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

typedef struct _OSVERSIONINFOEXA {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    CHAR   szCSDVersion[ 128 ];     
    WORD   wServicePackMajor;
    WORD   wServicePackMinor;
    WORD   wSuiteMask;
    BYTE  wProductType;
    BYTE  wReserved;
} OSVERSIONINFOEXA, *POSVERSIONINFOEXA, *LPOSVERSIONINFOEXA;
typedef struct _OSVERSIONINFOEXW {
    DWORD dwOSVersionInfoSize;
    DWORD dwMajorVersion;
    DWORD dwMinorVersion;
    DWORD dwBuildNumber;
    DWORD dwPlatformId;
    WCHAR  szCSDVersion[ 128 ];     
    WORD   wServicePackMajor;
    WORD   wServicePackMinor;
    WORD   wSuiteMask;
    BYTE  wProductType;
    BYTE  wReserved;
} OSVERSIONINFOEXW, *POSVERSIONINFOEXW, *LPOSVERSIONINFOEXW, RTL_OSVERSIONINFOEXW, *PRTL_OSVERSIONINFOEXW;





typedef OSVERSIONINFOEXA OSVERSIONINFOEX;
typedef POSVERSIONINFOEXA POSVERSIONINFOEX;
typedef LPOSVERSIONINFOEXA LPOSVERSIONINFOEX;
#line 16972 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"













































#pragma region Desktop Family


















__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
      ULONGLONG ConditionMask,
      DWORD TypeMask,
      BYTE  Condition
    );

#line 17046 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 17048 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 17050 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma endregion



#pragma region Desktop Family






__declspec(dllimport)
BOOLEAN
__stdcall
RtlGetProductInfo(
       DWORD  OSMajorVersion,
       DWORD  OSMinorVersion,
       DWORD  SpMajorVersion,
       DWORD  SpMinorVersion,
      PDWORD ReturnedProductType
    );

#line 17073 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



#line 17077 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma endregion



typedef enum _RTL_UMS_THREAD_INFO_CLASS {
    UmsThreadInvalidInfoClass = 0,
    UmsThreadUserContext,
    UmsThreadPriority,              
    UmsThreadAffinity,              
    UmsThreadTeb,
    UmsThreadIsSuspended,
    UmsThreadIsTerminated,
    UmsThreadMaxInfoClass
} RTL_UMS_THREAD_INFO_CLASS, *PRTL_UMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON {
    UmsSchedulerStartup = 0,
    UmsSchedulerThreadBlocked,
    UmsSchedulerThreadYield,
} RTL_UMS_SCHEDULER_REASON, *PRTL_UMS_SCHEDULER_REASON;

typedef

void
__stdcall
RTL_UMS_SCHEDULER_ENTRY_POINT(
      RTL_UMS_SCHEDULER_REASON Reason,
      ULONG_PTR ActivationPayload,
      PVOID SchedulerParam
    );

typedef RTL_UMS_SCHEDULER_ENTRY_POINT *PRTL_UMS_SCHEDULER_ENTRY_POINT;
































#line 17142 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 17144 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"










#line 17155 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"






#pragma region Desktop Family








__declspec(dllimport)
DWORD
__stdcall
RtlCrc32(
      const void *Buffer,
      size_t Size,
      DWORD InitialCrc
    );

__declspec(dllimport)
ULONGLONG
__stdcall
RtlCrc64(
      const void *Buffer,
      size_t Size,
      ULONGLONG InitialCrc
    );
	

   
#line 17191 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma endregion



#line 17196 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


typedef struct _RTL_CRITICAL_SECTION_DEBUG {
    WORD   Type;
    WORD   CreatorBackTraceIndex;
    struct _RTL_CRITICAL_SECTION *CriticalSection;
    LIST_ENTRY ProcessLocksList;
    DWORD EntryCount;
    DWORD ContentionCount;
    DWORD Flags;
    WORD   CreatorBackTraceIndexHigh;
    WORD   SpareWORD  ;
} RTL_CRITICAL_SECTION_DEBUG, *PRTL_CRITICAL_SECTION_DEBUG, RTL_RESOURCE_DEBUG, *PRTL_RESOURCE_DEBUG;




















#pragma pack(push, 8)

typedef struct _RTL_CRITICAL_SECTION {
    PRTL_CRITICAL_SECTION_DEBUG DebugInfo;

    
    
    
    

    LONG LockCount;
    LONG RecursionCount;
    HANDLE OwningThread;        
    HANDLE LockSemaphore;
    ULONG_PTR SpinCount;        
} RTL_CRITICAL_SECTION, *PRTL_CRITICAL_SECTION;

#pragma pack(pop)

typedef struct _RTL_SRWLOCK {                            
        PVOID Ptr;                                       
} RTL_SRWLOCK, *PRTL_SRWLOCK;                            

typedef struct _RTL_CONDITION_VARIABLE {                    
        PVOID Ptr;                                       
} RTL_CONDITION_VARIABLE, *PRTL_CONDITION_VARIABLE;      


typedef
void
(__stdcall *PAPCFUNC)(
      ULONG_PTR Parameter
    );
typedef LONG (__stdcall *PVECTORED_EXCEPTION_HANDLER)(
    struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef enum _HEAP_INFORMATION_CLASS {

    HeapCompatibilityInformation,
    HeapEnableTerminationOnCorruption


} HEAP_INFORMATION_CLASS;













typedef void (__stdcall * WAITORTIMERCALLBACKFUNC) (PVOID, BOOLEAN );   
typedef void (__stdcall * WORKERCALLBACKFUNC) (PVOID );                 
typedef void (__stdcall * APC_CALLBACK_FUNCTION) (DWORD   , PVOID, PVOID); 
typedef WAITORTIMERCALLBACKFUNC WAITORTIMERCALLBACK; 
typedef
void
(__stdcall *PFLS_CALLBACK_FUNCTION) (
     PVOID lpFlsData
    );

typedef
BOOLEAN
(__stdcall *PSECURE_MEMORY_CACHE_CALLBACK) (
      PVOID Addr,
      SIZE_T Range
    );




typedef enum _ACTIVATION_CONTEXT_INFO_CLASS {
    ActivationContextBasicInformation                       = 1,
    ActivationContextDetailedInformation                    = 2,
    AssemblyDetailedInformationInActivationContext          = 3,
    FileInformationInAssemblyOfAssemblyInActivationContext  = 4,
    RunlevelInformationInActivationContext                  = 5,
    CompatibilityInformationInActivationContext             = 6,
    ActivationContextManifestResourceName                   = 7,
    MaxActivationContextInfoClass,

    
    
    
    AssemblyDetailedInformationInActivationContxt           = 3,
    FileInformationInAssemblyOfAssemblyInActivationContxt   = 4
} ACTIVATION_CONTEXT_INFO_CLASS;




typedef struct _ACTIVATION_CONTEXT_QUERY_INDEX {
    DWORD ulAssemblyIndex;
    DWORD ulFileIndexInAssembly;
} ACTIVATION_CONTEXT_QUERY_INDEX, * PACTIVATION_CONTEXT_QUERY_INDEX;

typedef const struct _ACTIVATION_CONTEXT_QUERY_INDEX * PCACTIVATION_CONTEXT_QUERY_INDEX;







typedef struct _ASSEMBLY_FILE_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulFilenameLength;
    DWORD ulPathLength;

    PCWSTR lpFileName;
    PCWSTR lpFilePath;
} ASSEMBLY_FILE_DETAILED_INFORMATION, *PASSEMBLY_FILE_DETAILED_INFORMATION;
typedef const ASSEMBLY_FILE_DETAILED_INFORMATION *PCASSEMBLY_FILE_DETAILED_INFORMATION;










typedef struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION {
    DWORD ulFlags;
    DWORD ulEncodedAssemblyIdentityLength;      
    DWORD ulManifestPathType;                   
    DWORD ulManifestPathLength;                 
    LARGE_INTEGER liManifestLastWriteTime;      
    DWORD ulPolicyPathType;                     
    DWORD ulPolicyPathLength;                   
    LARGE_INTEGER liPolicyLastWriteTime;        
    DWORD ulMetadataSatelliteRosterIndex;

    DWORD ulManifestVersionMajor;               
    DWORD ulManifestVersionMinor;               
    DWORD ulPolicyVersionMajor;                 
    DWORD ulPolicyVersionMinor;                 
    DWORD ulAssemblyDirectoryNameLength;        

    PCWSTR lpAssemblyEncodedAssemblyIdentity;
    PCWSTR lpAssemblyManifestPath;
    PCWSTR lpAssemblyPolicyPath;
    PCWSTR lpAssemblyDirectoryName;

    DWORD  ulFileCount;
} ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION, * PACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION * PCACTIVATION_CONTEXT_ASSEMBLY_DETAILED_INFORMATION ;

typedef enum
{
    ACTCTX_RUN_LEVEL_UNSPECIFIED = 0,
    ACTCTX_RUN_LEVEL_AS_INVOKER,
    ACTCTX_RUN_LEVEL_HIGHEST_AVAILABLE,
    ACTCTX_RUN_LEVEL_REQUIRE_ADMIN,
    ACTCTX_RUN_LEVEL_NUMBERS
} ACTCTX_REQUESTED_RUN_LEVEL;

typedef struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION {
    DWORD ulFlags;
    ACTCTX_REQUESTED_RUN_LEVEL  RunLevel;
    DWORD UiAccess;
} ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION, * PACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION * PCACTIVATION_CONTEXT_RUN_LEVEL_INFORMATION ;

typedef enum
{
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_UNKNOWN = 0,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_OS,
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE_MITIGATION
} ACTCTX_COMPATIBILITY_ELEMENT_TYPE;

typedef struct _COMPATIBILITY_CONTEXT_ELEMENT {
    GUID Id;
    ACTCTX_COMPATIBILITY_ELEMENT_TYPE Type;
} COMPATIBILITY_CONTEXT_ELEMENT, *PCOMPATIBILITY_CONTEXT_ELEMENT;

typedef const struct _COMPATIBILITY_CONTEXT_ELEMENT *PCCOMPATIBILITY_CONTEXT_ELEMENT;

#pragma warning(push)
#pragma warning(disable:4200)

typedef struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION {
    DWORD ElementCount;
    COMPATIBILITY_CONTEXT_ELEMENT Elements[];
} ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION, * PACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;

#pragma warning(pop)

typedef const struct _ACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION * PCACTIVATION_CONTEXT_COMPATIBILITY_INFORMATION;




typedef struct _SUPPORTED_OS_INFO {
    WORD   OsCount;
    WORD   MitigationExist;
    WORD   OsList[(4)];
} SUPPORTED_OS_INFO, *PSUPPORTED_OS_INFO;

typedef struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION {
    DWORD dwFlags;
    DWORD ulFormatVersion;
    DWORD ulAssemblyCount;
    DWORD ulRootManifestPathType;
    DWORD ulRootManifestPathChars;
    DWORD ulRootConfigurationPathType;
    DWORD ulRootConfigurationPathChars;
    DWORD ulAppDirPathType;
    DWORD ulAppDirPathChars;
    PCWSTR lpRootManifestPath;
    PCWSTR lpRootConfigurationPath;
    PCWSTR lpAppDirPath;
} ACTIVATION_CONTEXT_DETAILED_INFORMATION, *PACTIVATION_CONTEXT_DETAILED_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_DETAILED_INFORMATION *PCACTIVATION_CONTEXT_DETAILED_INFORMATION;




typedef struct _HARDWARE_COUNTER_DATA {
    HARDWARE_COUNTER_TYPE Type;
    DWORD Reserved;
    DWORD64 Value;
} HARDWARE_COUNTER_DATA, *PHARDWARE_COUNTER_DATA;



typedef struct _PERFORMANCE_DATA {
    WORD   Size;
    BYTE  Version;
    BYTE  HwCountersCount;
    DWORD ContextSwitchCount;
    DWORD64 WaitReasonBitMap;
    DWORD64 CycleTime;
    DWORD RetryCount;
    DWORD Reserved;
    HARDWARE_COUNTER_DATA HwCounters[16];
} PERFORMANCE_DATA, *PPERFORMANCE_DATA;














































typedef struct _EVENTLOGRECORD {
    DWORD  Length;        
    DWORD  Reserved;      
    DWORD  RecordNumber;  
    DWORD  TimeGenerated; 
    DWORD  TimeWritten;   
    DWORD  EventID;
    WORD   EventType;
    WORD   NumStrings;
    WORD   EventCategory;
    WORD   ReservedFlags; 
    DWORD  ClosingRecordNumber; 
    DWORD  StringOffset;  
    DWORD  UserSidLength;
    DWORD  UserSidOffset;
    DWORD  DataLength;
    DWORD  DataOffset;    
    
    
    
    
    
    
    
    
    
    
    
} EVENTLOGRECORD, *PEVENTLOGRECORD;






#pragma warning(push)
#line 17559 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
#pragma warning(disable : 4200) 

struct _EVENTSFORLOGFILE;
typedef struct _EVENTSFORLOGFILE EVENTSFORLOGFILE, *PEVENTSFORLOGFILE;

struct _PACKEDEVENTINFO;
typedef struct _PACKEDEVENTINFO PACKEDEVENTINFO, *PPACKEDEVENTINFO;



struct _EVENTSFORLOGFILE
{
    DWORD           ulSize;
    WCHAR           szLogicalLogFile[256];        
    DWORD           ulNumRecords;
    EVENTLOGRECORD  pEventLogRecords[];
};

struct _PACKEDEVENTINFO
{
    DWORD               ulSize;  
    DWORD               ulNumEventsForLogFile; 
    DWORD               ulOffsets[];           
};

#line 17585 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


#pragma warning(pop)


#line 17591 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





















































                                                    


                                                    


                                                    


                                                    
                                                    




























































                                                      


















                                            






























































typedef enum _CM_SERVICE_NODE_TYPE {
    DriverType               = 0x00000001,
    FileSystemType           = 0x00000002,
    Win32ServiceOwnProcess   = 0x00000010,
    Win32ServiceShareProcess = 0x00000020,
    AdapterType              = 0x00000004,
    RecognizerType           = 0x00000008
} SERVICE_NODE_TYPE;

typedef enum _CM_SERVICE_LOAD_TYPE {
    BootLoad    = 0x00000000,
    SystemLoad  = 0x00000001,
    AutoLoad    = 0x00000002,
    DemandLoad  = 0x00000003,
    DisableLoad = 0x00000004
} SERVICE_LOAD_TYPE;

typedef enum _CM_ERROR_CONTROL_TYPE {
    IgnoreError   = 0x00000000,
    NormalError   = 0x00000001,
    SevereError   = 0x00000002,
    CriticalError = 0x00000003
} SERVICE_ERROR_TYPE;

































































typedef struct _TAPE_ERASE {
    DWORD Type;
    BOOLEAN Immediate;
} TAPE_ERASE, *PTAPE_ERASE;












typedef struct _TAPE_PREPARE {
    DWORD Operation;
    BOOLEAN Immediate;
} TAPE_PREPARE, *PTAPE_PREPARE;










typedef struct _TAPE_WRITE_MARKS {
    DWORD Type;
    DWORD Count;
    BOOLEAN Immediate;
} TAPE_WRITE_MARKS, *PTAPE_WRITE_MARKS;









typedef struct _TAPE_GET_POSITION {
    DWORD Type;
    DWORD Partition;
    LARGE_INTEGER Offset;
} TAPE_GET_POSITION, *PTAPE_GET_POSITION;
















typedef struct _TAPE_SET_POSITION {
    DWORD Method;
    DWORD Partition;
    LARGE_INTEGER Offset;
    BOOLEAN Immediate;
} TAPE_SET_POSITION, *PTAPE_SET_POSITION;























































































typedef struct _TAPE_GET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD DefaultBlockSize;
    DWORD MaximumBlockSize;
    DWORD MinimumBlockSize;
    DWORD MaximumPartitionCount;
    DWORD FeaturesLow;
    DWORD FeaturesHigh;
    DWORD EOTWarningZoneSize;
} TAPE_GET_DRIVE_PARAMETERS, *PTAPE_GET_DRIVE_PARAMETERS;





typedef struct _TAPE_SET_DRIVE_PARAMETERS {
    BOOLEAN ECC;
    BOOLEAN Compression;
    BOOLEAN DataPadding;
    BOOLEAN ReportSetmarks;
    DWORD EOTWarningZoneSize;
} TAPE_SET_DRIVE_PARAMETERS, *PTAPE_SET_DRIVE_PARAMETERS;





typedef struct _TAPE_GET_MEDIA_PARAMETERS {
    LARGE_INTEGER Capacity;
    LARGE_INTEGER Remaining;
    DWORD BlockSize;
    DWORD PartitionCount;
    BOOLEAN WriteProtected;
} TAPE_GET_MEDIA_PARAMETERS, *PTAPE_GET_MEDIA_PARAMETERS;





typedef struct _TAPE_SET_MEDIA_PARAMETERS {
    DWORD BlockSize;
} TAPE_SET_MEDIA_PARAMETERS, *PTAPE_SET_MEDIA_PARAMETERS;









typedef struct _TAPE_CREATE_PARTITION {
    DWORD Method;
    DWORD Count;
    DWORD Size;
} TAPE_CREATE_PARTITION, *PTAPE_CREATE_PARTITION;











typedef struct _TAPE_WMI_OPERATIONS {
   DWORD Method;
   DWORD DataBufferSize;
   PVOID DataBuffer;
} TAPE_WMI_OPERATIONS, *PTAPE_WMI_OPERATIONS;




typedef enum _TAPE_DRIVE_PROBLEM_TYPE {
   TapeDriveProblemNone, TapeDriveReadWriteWarning,
   TapeDriveReadWriteError, TapeDriveReadWarning,
   TapeDriveWriteWarning, TapeDriveReadError,
   TapeDriveWriteError, TapeDriveHardwareError,
   TapeDriveUnsupportedMedia, TapeDriveScsiConnectionError,
   TapeDriveTimetoClean, TapeDriveCleanDriveNow,
   TapeDriveMediaLifeExpired, TapeDriveSnappedTape
} TAPE_DRIVE_PROBLEM_TYPE;

#line 18133 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"





extern "C" {
#line 18140 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\ktmtypes.h"






















extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\ktmtypes.h"


typedef GUID UOW, *PUOW;
typedef GUID CRM_PROTOCOL_ID, *PCRM_PROTOCOL_ID;

















































typedef ULONG NOTIFICATION_MASK;






















































typedef struct _TRANSACTION_NOTIFICATION {
    PVOID         TransactionKey;
    ULONG         TransactionNotification;
    LARGE_INTEGER TmVirtualClock;
    ULONG         ArgumentLength;
} TRANSACTION_NOTIFICATION, *PTRANSACTION_NOTIFICATION;

typedef struct _TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT {
    GUID   EnlistmentId;
    UOW    UOW;
} TRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT, *PTRANSACTION_NOTIFICATION_RECOVERY_ARGUMENT;



typedef struct _TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT {
    GUID TmIdentity;
    ULONG Flags;
} TRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT, *PTRANSACTION_NOTIFICATION_TM_ONLINE_ARGUMENT;

typedef ULONG SAVEPOINT_ID, *PSAVEPOINT_ID;

typedef struct _TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT {
    SAVEPOINT_ID SavepointId;
} TRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT, *PTRANSACTION_NOTIFICATION_SAVEPOINT_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT {
    ULONG PropagationCookie;
    GUID  UOW;
    GUID  TmIdentity;
    ULONG BufferLength;
    
} TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT;

typedef struct _TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT {
    ULONG MarshalCookie;
    GUID  UOW;
} TRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT, *PTRANSACTION_NOTIFICATION_MARSHAL_ARGUMENT;

typedef TRANSACTION_NOTIFICATION_PROPAGATE_ARGUMENT TRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT, *PTRANSACTION_NOTIFICATION_PROMOTE_ARGUMENT;







typedef struct _KCRM_MARSHAL_HEADER {
    ULONG              VersionMajor;
    ULONG              VersionMinor;
    ULONG              NumProtocols;
    ULONG              Unused;        
} KCRM_MARSHAL_HEADER, *PKCRM_MARSHAL_HEADER, * PRKCRM_MARSHAL_HEADER;

typedef struct _KCRM_TRANSACTION_BLOB {
    UOW                UOW;
    GUID               TmIdentity;
    ULONG              IsolationLevel;
    ULONG              IsolationFlags;
    ULONG              Timeout;
    WCHAR              Description[64];
} KCRM_TRANSACTION_BLOB, *PKCRM_TRANSACTION_BLOB, * PRKCRM_TRANSACTION_BLOB;

typedef struct _KCRM_PROTOCOL_BLOB {
    CRM_PROTOCOL_ID    ProtocolId;
      ULONG StaticInfoLength;
    ULONG              TransactionIdInfoLength; 
    ULONG              Unused1;        
    ULONG              Unused2;        
} KCRM_PROTOCOL_BLOB, *PKCRM_PROTOCOL_BLOB, * PRKCRM_PROTOCOL_BLOB;


}
#line 206 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\ktmtypes.h"

#line 208 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\ktmtypes.h"
#line 18143 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"








































































































































































typedef enum _TRANSACTION_OUTCOME {
    TransactionOutcomeUndetermined = 1,
    TransactionOutcomeCommitted,
    TransactionOutcomeAborted,
} TRANSACTION_OUTCOME;


typedef enum _TRANSACTION_STATE {
    TransactionStateNormal = 1,
    TransactionStateIndoubt,
    TransactionStateCommittedNotify,
} TRANSACTION_STATE;


typedef struct _TRANSACTION_BASIC_INFORMATION {
    GUID    TransactionId;
    DWORD   State;
    DWORD   Outcome;
} TRANSACTION_BASIC_INFORMATION, *PTRANSACTION_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_BASIC_INFORMATION {
    GUID    TmIdentity;
    LARGE_INTEGER VirtualClock;
} TRANSACTIONMANAGER_BASIC_INFORMATION, *PTRANSACTIONMANAGER_BASIC_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOG_INFORMATION {
    GUID  LogIdentity;
} TRANSACTIONMANAGER_LOG_INFORMATION, *PTRANSACTIONMANAGER_LOG_INFORMATION;

typedef struct _TRANSACTIONMANAGER_LOGPATH_INFORMATION {
    DWORD LogPathLength;
      WCHAR LogPath[1]; 

} TRANSACTIONMANAGER_LOGPATH_INFORMATION, *PTRANSACTIONMANAGER_LOGPATH_INFORMATION;

typedef struct _TRANSACTIONMANAGER_RECOVERY_INFORMATION {
    ULONGLONG  LastRecoveredLsn;
} TRANSACTIONMANAGER_RECOVERY_INFORMATION, *PTRANSACTIONMANAGER_RECOVERY_INFORMATION;



typedef struct _TRANSACTIONMANAGER_OLDEST_INFORMATION {
    GUID OldestTransactionGuid;
} TRANSACTIONMANAGER_OLDEST_INFORMATION, *PTRANSACTIONMANAGER_OLDEST_INFORMATION;



typedef struct _TRANSACTION_PROPERTIES_INFORMATION {
    DWORD              IsolationLevel;
    DWORD              IsolationFlags;
    LARGE_INTEGER      Timeout;
    DWORD              Outcome;
    DWORD              DescriptionLength;
    WCHAR              Description[1];            

} TRANSACTION_PROPERTIES_INFORMATION, *PTRANSACTION_PROPERTIES_INFORMATION;



typedef struct _TRANSACTION_BIND_INFORMATION {
    HANDLE TmHandle;
} TRANSACTION_BIND_INFORMATION, *PTRANSACTION_BIND_INFORMATION;

typedef struct _TRANSACTION_ENLISTMENT_PAIR {
    GUID   EnlistmentId;
    GUID   ResourceManagerId;
} TRANSACTION_ENLISTMENT_PAIR, *PTRANSACTION_ENLISTMENT_PAIR;

typedef struct _TRANSACTION_ENLISTMENTS_INFORMATION {
    DWORD                       NumberOfEnlistments;
    TRANSACTION_ENLISTMENT_PAIR EnlistmentPair[1]; 
} TRANSACTION_ENLISTMENTS_INFORMATION, *PTRANSACTION_ENLISTMENTS_INFORMATION;

typedef struct _TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION {
    TRANSACTION_ENLISTMENT_PAIR SuperiorEnlistmentPair;
} TRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION, *PTRANSACTION_SUPERIOR_ENLISTMENT_INFORMATION;


typedef struct _RESOURCEMANAGER_BASIC_INFORMATION {
    GUID    ResourceManagerId;
    DWORD   DescriptionLength;
    WCHAR   Description[1];            
} RESOURCEMANAGER_BASIC_INFORMATION, *PRESOURCEMANAGER_BASIC_INFORMATION;

typedef struct _RESOURCEMANAGER_COMPLETION_INFORMATION {
    HANDLE    IoCompletionPortHandle;
    ULONG_PTR CompletionKey;
} RESOURCEMANAGER_COMPLETION_INFORMATION, *PRESOURCEMANAGER_COMPLETION_INFORMATION;




typedef enum _TRANSACTION_INFORMATION_CLASS {
    TransactionBasicInformation,
    TransactionPropertiesInformation,
    TransactionEnlistmentInformation,
    TransactionSuperiorEnlistmentInformation

    ,


    TransactionBindInformation, 
    TransactionDTCPrivateInformation 
    ,

} TRANSACTION_INFORMATION_CLASS;


typedef enum _TRANSACTIONMANAGER_INFORMATION_CLASS {
    TransactionManagerBasicInformation,
    TransactionManagerLogInformation,
    TransactionManagerLogPathInformation,
    TransactionManagerRecoveryInformation = 4

    ,



    TransactionManagerOnlineProbeInformation = 3,
    TransactionManagerOldestTransactionInformation = 5



} TRANSACTIONMANAGER_INFORMATION_CLASS;



typedef enum _RESOURCEMANAGER_INFORMATION_CLASS {
    ResourceManagerBasicInformation,
    ResourceManagerCompletionInformation,
} RESOURCEMANAGER_INFORMATION_CLASS;


typedef struct _ENLISTMENT_BASIC_INFORMATION {
    GUID    EnlistmentId;
    GUID    TransactionId;
    GUID    ResourceManagerId;
} ENLISTMENT_BASIC_INFORMATION, *PENLISTMENT_BASIC_INFORMATION;

typedef struct _ENLISTMENT_CRM_INFORMATION {
    GUID   CrmTransactionManagerId;
    GUID   CrmResourceManagerId;
    GUID   CrmEnlistmentId;
} ENLISTMENT_CRM_INFORMATION, *PENLISTMENT_CRM_INFORMATION;



typedef enum _ENLISTMENT_INFORMATION_CLASS {
    EnlistmentBasicInformation,
    EnlistmentRecoveryInformation,
    EnlistmentCrmInformation
} ENLISTMENT_INFORMATION_CLASS;

typedef struct _TRANSACTION_LIST_ENTRY {
    UOW    UOW;
} TRANSACTION_LIST_ENTRY, *PTRANSACTION_LIST_ENTRY;

typedef struct _TRANSACTION_LIST_INFORMATION {
    DWORD   NumberOfTransactions;
    TRANSACTION_LIST_ENTRY TransactionInformation[1]; 
} TRANSACTION_LIST_INFORMATION, *PTRANSACTION_LIST_INFORMATION;






typedef enum _KTMOBJECT_TYPE {

    KTMOBJECT_TRANSACTION,
    KTMOBJECT_TRANSACTION_MANAGER,
    KTMOBJECT_RESOURCE_MANAGER,
    KTMOBJECT_ENLISTMENT,
    KTMOBJECT_INVALID

} KTMOBJECT_TYPE, *PKTMOBJECT_TYPE;









typedef struct _KTMOBJECT_CURSOR {

    
    
    

    GUID    LastQuery;

    
    
    

    DWORD   ObjectIdCount;

    
    
    

    GUID    ObjectIds[1];

} KTMOBJECT_CURSOR, *PKTMOBJECT_CURSOR;




}
#line 18523 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 18525 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
typedef DWORD TP_VERSION, *PTP_VERSION; 

typedef struct _TP_CALLBACK_INSTANCE TP_CALLBACK_INSTANCE, *PTP_CALLBACK_INSTANCE;

typedef void (__stdcall *PTP_SIMPLE_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context
    );

typedef struct _TP_POOL TP_POOL, *PTP_POOL; 

typedef enum _TP_CALLBACK_PRIORITY {
    TP_CALLBACK_PRIORITY_HIGH,
    TP_CALLBACK_PRIORITY_NORMAL,
    TP_CALLBACK_PRIORITY_LOW,
    TP_CALLBACK_PRIORITY_INVALID,
    TP_CALLBACK_PRIORITY_COUNT = TP_CALLBACK_PRIORITY_INVALID
} TP_CALLBACK_PRIORITY;

typedef struct _TP_POOL_STACK_INFORMATION {
    SIZE_T StackReserve;
    SIZE_T StackCommit;
}TP_POOL_STACK_INFORMATION, *PTP_POOL_STACK_INFORMATION;

typedef struct _TP_CLEANUP_GROUP TP_CLEANUP_GROUP, *PTP_CLEANUP_GROUP; 

typedef void (__stdcall *PTP_CLEANUP_GROUP_CANCEL_CALLBACK)(
      PVOID ObjectContext,
      PVOID CleanupContext
    );








typedef struct _TP_CALLBACK_ENVIRON_V3 {
    TP_VERSION                         Version;
    PTP_POOL                           Pool;
    PTP_CLEANUP_GROUP                  CleanupGroup;
    PTP_CLEANUP_GROUP_CANCEL_CALLBACK  CleanupGroupCancelCallback;
    PVOID                              RaceDll;
    struct _ACTIVATION_CONTEXT        *ActivationContext;
    PTP_SIMPLE_CALLBACK                FinalizationCallback;
    union {
        DWORD                          Flags;
        struct {
            DWORD                      LongFunction :  1;
            DWORD                      Persistent   :  1;
            DWORD                      Private      : 30;
        } s;
    } u;
    TP_CALLBACK_PRIORITY               CallbackPriority;
    DWORD                              Size;
} TP_CALLBACK_ENVIRON_V3;

typedef TP_CALLBACK_ENVIRON_V3 TP_CALLBACK_ENVIRON, *PTP_CALLBACK_ENVIRON;























#line 18608 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"



__forceinline
void
TpInitializeCallbackEnviron(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{



    CallbackEnviron->Version = 3;





#line 18627 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

    CallbackEnviron->Pool = 0;
    CallbackEnviron->CleanupGroup = 0;
    CallbackEnviron->CleanupGroupCancelCallback = 0;
    CallbackEnviron->RaceDll = 0;
    CallbackEnviron->ActivationContext = 0;
    CallbackEnviron->FinalizationCallback = 0;
    CallbackEnviron->u.Flags = 0;



    CallbackEnviron->CallbackPriority = TP_CALLBACK_PRIORITY_NORMAL;
    CallbackEnviron->Size = sizeof(TP_CALLBACK_ENVIRON);

#line 18642 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

}

__forceinline
void
TpSetCallbackThreadpool(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         PTP_POOL             Pool
    )
{
    CallbackEnviron->Pool = Pool;
}

__forceinline
void
TpSetCallbackCleanupGroup(
       PTP_CALLBACK_ENVIRON              CallbackEnviron,
          PTP_CLEANUP_GROUP                 CleanupGroup,
      PTP_CLEANUP_GROUP_CANCEL_CALLBACK CleanupGroupCancelCallback
    )
{
    CallbackEnviron->CleanupGroup = CleanupGroup;
    CallbackEnviron->CleanupGroupCancelCallback = CleanupGroupCancelCallback;
}

__forceinline
void
TpSetCallbackActivationContext(
       PTP_CALLBACK_ENVIRON CallbackEnviron,
      struct _ACTIVATION_CONTEXT *ActivationContext
    )
{
    CallbackEnviron->ActivationContext = ActivationContext;
}

__forceinline
void
TpSetCallbackNoActivationContext(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->ActivationContext = (struct _ACTIVATION_CONTEXT *)(LONG_PTR) -1; 
}

__forceinline
void
TpSetCallbackLongFunction(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.LongFunction = 1;
}

__forceinline
void
TpSetCallbackRaceWithDll(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         PVOID                DllHandle
    )
{
    CallbackEnviron->RaceDll = DllHandle;
}

__forceinline
void
TpSetCallbackFinalizationCallback(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         PTP_SIMPLE_CALLBACK  FinalizationCallback
    )
{
    CallbackEnviron->FinalizationCallback = FinalizationCallback;
}



__forceinline
void
TpSetCallbackPriority(
      PTP_CALLBACK_ENVIRON CallbackEnviron,
         TP_CALLBACK_PRIORITY Priority
    )
{
    CallbackEnviron->CallbackPriority = Priority;
}

#line 18728 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

__forceinline
void
TpSetCallbackPersistent(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    CallbackEnviron->u.s.Persistent = 1;
}


__forceinline
void
TpDestroyCallbackEnviron(
      PTP_CALLBACK_ENVIRON CallbackEnviron
    )
{
    
    
    
    
    

    (CallbackEnviron);
}

#line 18755 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


typedef struct _TP_WORK TP_WORK, *PTP_WORK;

typedef void (__stdcall *PTP_WORK_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
          PTP_WORK              Work
    );

typedef struct _TP_TIMER TP_TIMER, *PTP_TIMER;

typedef void (__stdcall *PTP_TIMER_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
          PTP_TIMER             Timer
    );

typedef DWORD    TP_WAIT_RESULT;

typedef struct _TP_WAIT TP_WAIT, *PTP_WAIT;

typedef void (__stdcall *PTP_WAIT_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
          PTP_WAIT              Wait,
             TP_WAIT_RESULT        WaitResult
    );

typedef struct _TP_IO TP_IO, *PTP_IO;



































#line 18821 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"
































#line 18854 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"








__inline struct _TEB * NtCurrentTeb( void ) { return (struct _TEB *) (ULONG_PTR) __readfsdword (0x18); }

















#line 18881 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 18883 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"













#line 18897 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


}
#line 18901 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


#pragma warning(pop)



#line 18908 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"

#line 18910 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"


#line 183 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"
#line 184 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"


typedef UINT_PTR            WPARAM;
typedef LONG_PTR            LPARAM;
typedef LONG_PTR            LRESULT;





#line 195 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"



#line 199 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"

#line 201 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"








typedef HANDLE          *SPHANDLE;
typedef HANDLE           *LPHANDLE;
typedef HANDLE              HGLOBAL;
typedef HANDLE              HLOCAL;
typedef HANDLE              GLOBALHANDLE;
typedef HANDLE              LOCALHANDLE;







typedef int ( __stdcall *FARPROC)();
typedef int ( __stdcall *NEARPROC)();
typedef int (__stdcall *PROC)();
#line 226 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"




#line 231 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"




#line 236 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"

typedef WORD                ATOM;   

struct HKEY__{int unused;}; typedef struct HKEY__ *HKEY;
typedef HKEY *PHKEY;
struct HMETAFILE__{int unused;}; typedef struct HMETAFILE__ *HMETAFILE;
struct HINSTANCE__{int unused;}; typedef struct HINSTANCE__ *HINSTANCE;
typedef HINSTANCE HMODULE;      
struct HRGN__{int unused;}; typedef struct HRGN__ *HRGN;
struct HRSRC__{int unused;}; typedef struct HRSRC__ *HRSRC;
struct HSPRITE__{int unused;}; typedef struct HSPRITE__ *HSPRITE;
struct HLSURF__{int unused;}; typedef struct HLSURF__ *HLSURF;
struct HSTR__{int unused;}; typedef struct HSTR__ *HSTR;
struct HTASK__{int unused;}; typedef struct HTASK__ *HTASK;
struct HWINSTA__{int unused;}; typedef struct HWINSTA__ *HWINSTA;
struct HKL__{int unused;}; typedef struct HKL__ *HKL;


typedef int HFILE;


#line 258 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"





typedef struct _FILETIME {
    DWORD dwLowDateTime;
    DWORD dwHighDateTime;
} FILETIME, *PFILETIME, *LPFILETIME;



}
#line 272 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"

#line 274 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"
#pragma endregion

#line 277 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\minwindef.h"

#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"






#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnt.h"































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"
#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"



#pragma region Application Family


struct HWND__{int unused;}; typedef struct HWND__ *HWND;
struct HHOOK__{int unused;}; typedef struct HHOOK__ *HHOOK;

#line 43 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"
#pragma endregion












#line 57 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"

#pragma region Application Family




typedef void * HGDIOBJ;


#line 67 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"
#line 68 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"


struct HACCEL__{int unused;}; typedef struct HACCEL__ *HACCEL;
#line 72 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"

struct HBITMAP__{int unused;}; typedef struct HBITMAP__ *HBITMAP;
struct HBRUSH__{int unused;}; typedef struct HBRUSH__ *HBRUSH;
#line 76 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"

struct HCOLORSPACE__{int unused;}; typedef struct HCOLORSPACE__ *HCOLORSPACE;
#line 79 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"

struct HDC__{int unused;}; typedef struct HDC__ *HDC;
#line 82 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"
struct HGLRC__{int unused;}; typedef struct HGLRC__ *HGLRC;          
struct HDESK__{int unused;}; typedef struct HDESK__ *HDESK;
struct HENHMETAFILE__{int unused;}; typedef struct HENHMETAFILE__ *HENHMETAFILE;

struct HFONT__{int unused;}; typedef struct HFONT__ *HFONT;
#line 88 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"
struct HICON__{int unused;}; typedef struct HICON__ *HICON;

struct HMENU__{int unused;}; typedef struct HMENU__ *HMENU;
#line 92 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"

struct HPALETTE__{int unused;}; typedef struct HPALETTE__ *HPALETTE;
struct HPEN__{int unused;}; typedef struct HPEN__ *HPEN;
#line 96 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"


struct HWINEVENTHOOK__{int unused;}; typedef struct HWINEVENTHOOK__ *HWINEVENTHOOK;
#line 100 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"

#line 102 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"
#pragma endregion




#pragma region Application Family


struct HMONITOR__{int unused;}; typedef struct HMONITOR__ *HMONITOR;

#line 113 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"
#pragma endregion

#line 116 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"

#pragma region Desktop Family


struct HUMPD__{int unused;}; typedef struct HUMPD__ *HUMPD;

#line 123 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"
#pragma endregion

#line 126 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"

#pragma region Application Family



typedef HICON HCURSOR;      


#line 135 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"

typedef DWORD   COLORREF;

#line 139 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"
#pragma endregion

#pragma region Desktop Family


typedef DWORD   *LPCOLORREF;



#line 149 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"
#pragma endregion

#pragma region Application Family


typedef struct tagRECT
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECT, *PRECT,  *NPRECT,  *LPRECT;

typedef const RECT * LPCRECT;

typedef struct _RECTL       
{
    LONG    left;
    LONG    top;
    LONG    right;
    LONG    bottom;
} RECTL, *PRECTL, *LPRECTL;

typedef const RECTL * LPCRECTL;

typedef struct tagPOINT
{
    LONG  x;
    LONG  y;
} POINT, *PPOINT,  *NPPOINT,  *LPPOINT;

typedef struct _POINTL      
{
    LONG  x;
    LONG  y;
} POINTL, *PPOINTL;

typedef struct tagSIZE
{
    LONG        cx;
    LONG        cy;
} SIZE, *PSIZE, *LPSIZE;

typedef SIZE               SIZEL;
typedef SIZE               *PSIZEL, *LPSIZEL;

typedef struct tagPOINTS
{

    SHORT   x;
    SHORT   y;



#line 204 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"
} POINTS, *PPOINTS, *LPPOINTS;

#line 207 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"
#pragma endregion

































}
#line 243 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"

#line 245 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\windef.h"

#line 165 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"















#pragma once
#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#pragma warning(push)
#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma warning(disable:4001) 
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"
















#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"
#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






#line 26 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"
#line 27 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"
#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"








#line 44 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"
#line 45 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"







#line 53 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






#line 60 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"
#line 61 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






#line 68 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"
#line 69 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






#line 76 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"
#line 77 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






#line 84 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"
#line 85 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






#line 92 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"
#line 93 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"

#line 95 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"
#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"







#pragma once




#pragma warning(disable:4514)

#pragma warning(disable:4103)
#line 17 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"

#pragma warning(push)
#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 24 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"





extern "C" {
#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"














typedef struct _SECURITY_ATTRIBUTES {
    DWORD nLength;
    LPVOID lpSecurityDescriptor;
    BOOL bInheritHandle;
} SECURITY_ATTRIBUTES, *PSECURITY_ATTRIBUTES, *LPSECURITY_ATTRIBUTES;

typedef struct _OVERLAPPED {
    ULONG_PTR Internal;
    ULONG_PTR InternalHigh;
    union {
        struct {
            DWORD Offset;
            DWORD OffsetHigh;
        } ;
        PVOID Pointer;
    } ;

    HANDLE  hEvent;
} OVERLAPPED, *LPOVERLAPPED;

typedef struct _OVERLAPPED_ENTRY {
    ULONG_PTR lpCompletionKey;
    LPOVERLAPPED lpOverlapped;
    ULONG_PTR Internal;
    DWORD dwNumberOfBytesTransferred;
} OVERLAPPED_ENTRY, *LPOVERLAPPED_ENTRY;


















typedef struct _SYSTEMTIME {
    WORD wYear;
    WORD wMonth;
    WORD wDayOfWeek;
    WORD wDay;
    WORD wHour;
    WORD wMinute;
    WORD wSecond;
    WORD wMilliseconds;
} SYSTEMTIME, *PSYSTEMTIME, *LPSYSTEMTIME;


typedef struct _WIN32_FIND_DATAA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    CHAR   cFileName[ 260 ];
    CHAR   cAlternateFileName[ 14 ];





} WIN32_FIND_DATAA, *PWIN32_FIND_DATAA, *LPWIN32_FIND_DATAA;
typedef struct _WIN32_FIND_DATAW {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD dwReserved0;
    DWORD dwReserved1;
    WCHAR  cFileName[ 260 ];
    WCHAR  cAlternateFileName[ 14 ];





} WIN32_FIND_DATAW, *PWIN32_FIND_DATAW, *LPWIN32_FIND_DATAW;





typedef WIN32_FIND_DATAA WIN32_FIND_DATA;
typedef PWIN32_FIND_DATAA PWIN32_FIND_DATA;
typedef LPWIN32_FIND_DATAA LPWIN32_FIND_DATA;
#line 144 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"



typedef enum _FINDEX_INFO_LEVELS {
    FindExInfoStandard,
    FindExInfoBasic,
    FindExInfoMaxInfoLevel
} FINDEX_INFO_LEVELS;




typedef enum _FINDEX_SEARCH_OPS {
    FindExSearchNameMatch,
    FindExSearchLimitToDirectories,
    FindExSearchLimitToDevices,
    FindExSearchMaxSearchOp
} FINDEX_SEARCH_OPS;
#line 163 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"

typedef enum _GET_FILEEX_INFO_LEVELS {
    GetFileExInfoStandard,
    GetFileExMaxInfoLevel
} GET_FILEEX_INFO_LEVELS;


typedef enum _FILE_INFO_BY_HANDLE_CLASS {
    FileBasicInfo,
    FileStandardInfo,
    FileNameInfo,
    FileRenameInfo,
    FileDispositionInfo,
    FileAllocationInfo,
    FileEndOfFileInfo,
    FileStreamInfo,
    FileCompressionInfo,
    FileAttributeTagInfo,
    FileIdBothDirectoryInfo,
    FileIdBothDirectoryRestartInfo,
    FileIoPriorityHintInfo,
    FileRemoteProtocolInfo,
    FileFullDirectoryInfo,
    FileFullDirectoryRestartInfo,

    FileStorageInfo, 
    FileAlignmentInfo,    
    FileIdInfo,
    FileIdExtdDirectoryInfo,
    FileIdExtdDirectoryRestartInfo,
#line 194 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"
    MaximumFileInfoByHandleClass
} FILE_INFO_BY_HANDLE_CLASS, *PFILE_INFO_BY_HANDLE_CLASS;
#line 197 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"

typedef RTL_CRITICAL_SECTION CRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION PCRITICAL_SECTION;
typedef PRTL_CRITICAL_SECTION LPCRITICAL_SECTION;

typedef RTL_CRITICAL_SECTION_DEBUG CRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG PCRITICAL_SECTION_DEBUG;
typedef PRTL_CRITICAL_SECTION_DEBUG LPCRITICAL_SECTION_DEBUG;

typedef
void
(__stdcall *LPOVERLAPPED_COMPLETION_ROUTINE)(
         DWORD dwErrorCode,
         DWORD dwNumberOfBytesTransfered,
      LPOVERLAPPED lpOverlapped
    );




typedef struct _PROCESS_HEAP_ENTRY {
    PVOID lpData;
    DWORD cbData;
    BYTE cbOverhead;
    BYTE iRegionIndex;
    WORD wFlags;
    union {
        struct {
            HANDLE hMem;
            DWORD dwReserved[ 3 ];
        } Block;
        struct {
            DWORD dwCommittedSize;
            DWORD dwUnCommittedSize;
            LPVOID lpFirstBlock;
            LPVOID lpLastBlock;
        } Region;
    } ;
} PROCESS_HEAP_ENTRY, *LPPROCESS_HEAP_ENTRY, *PPROCESS_HEAP_ENTRY;







typedef struct _REASON_CONTEXT {
    ULONG Version;
    DWORD Flags;
    union {
        struct {
            HMODULE LocalizedReasonModule;
            ULONG LocalizedReasonId;
            ULONG ReasonStringCount;
            LPWSTR *ReasonStrings;

        } Detailed;

        LPWSTR SimpleReasonString;
    } Reason;
} REASON_CONTEXT, *PREASON_CONTEXT;














typedef DWORD (__stdcall *PTHREAD_START_ROUTINE)(
    LPVOID lpThreadParameter
    );
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

typedef struct _EXCEPTION_DEBUG_INFO {
    EXCEPTION_RECORD ExceptionRecord;
    DWORD dwFirstChance;
} EXCEPTION_DEBUG_INFO, *LPEXCEPTION_DEBUG_INFO;

typedef struct _CREATE_THREAD_DEBUG_INFO {
    HANDLE hThread;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
} CREATE_THREAD_DEBUG_INFO, *LPCREATE_THREAD_DEBUG_INFO;

typedef struct _CREATE_PROCESS_DEBUG_INFO {
    HANDLE hFile;
    HANDLE hProcess;
    HANDLE hThread;
    LPVOID lpBaseOfImage;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpThreadLocalBase;
    LPTHREAD_START_ROUTINE lpStartAddress;
    LPVOID lpImageName;
    WORD fUnicode;
} CREATE_PROCESS_DEBUG_INFO, *LPCREATE_PROCESS_DEBUG_INFO;

typedef struct _EXIT_THREAD_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_THREAD_DEBUG_INFO, *LPEXIT_THREAD_DEBUG_INFO;

typedef struct _EXIT_PROCESS_DEBUG_INFO {
    DWORD dwExitCode;
} EXIT_PROCESS_DEBUG_INFO, *LPEXIT_PROCESS_DEBUG_INFO;

typedef struct _LOAD_DLL_DEBUG_INFO {
    HANDLE hFile;
    LPVOID lpBaseOfDll;
    DWORD dwDebugInfoFileOffset;
    DWORD nDebugInfoSize;
    LPVOID lpImageName;
    WORD fUnicode;
} LOAD_DLL_DEBUG_INFO, *LPLOAD_DLL_DEBUG_INFO;

typedef struct _UNLOAD_DLL_DEBUG_INFO {
    LPVOID lpBaseOfDll;
} UNLOAD_DLL_DEBUG_INFO, *LPUNLOAD_DLL_DEBUG_INFO;

typedef struct _OUTPUT_DEBUG_STRING_INFO {
    LPSTR lpDebugStringData;
    WORD fUnicode;
    WORD nDebugStringLength;
} OUTPUT_DEBUG_STRING_INFO, *LPOUTPUT_DEBUG_STRING_INFO;

typedef struct _RIP_INFO {
    DWORD dwError;
    DWORD dwType;
} RIP_INFO, *LPRIP_INFO;


typedef struct _DEBUG_EVENT {
    DWORD dwDebugEventCode;
    DWORD dwProcessId;
    DWORD dwThreadId;
    union {
        EXCEPTION_DEBUG_INFO Exception;
        CREATE_THREAD_DEBUG_INFO CreateThread;
        CREATE_PROCESS_DEBUG_INFO CreateProcessInfo;
        EXIT_THREAD_DEBUG_INFO ExitThread;
        EXIT_PROCESS_DEBUG_INFO ExitProcess;
        LOAD_DLL_DEBUG_INFO LoadDll;
        UNLOAD_DLL_DEBUG_INFO UnloadDll;
        OUTPUT_DEBUG_STRING_INFO DebugString;
        RIP_INFO RipInfo;
    } u;
} DEBUG_EVENT, *LPDEBUG_EVENT;







typedef PCONTEXT LPCONTEXT;
#line 359 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"

























































}
#line 418 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"





#pragma warning(pop)





#line 430 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"
#line 431 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"

#line 433 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\minwinbase.h"

#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"
 











#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"














#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"


extern "C" {
#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"




#pragma region Desktop Family





__declspec(dllimport)
 
LPCH
__stdcall
GetEnvironmentStrings(
    void
    );


__declspec(dllimport)
 
LPWCH
__stdcall
GetEnvironmentStringsW(
    void
    );






#line 73 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsW(
         LPWCH NewEnvironment
    );





__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsA(
         LPCH penv
    );

__declspec(dllimport)
BOOL
__stdcall
FreeEnvironmentStringsW(
         LPWCH penv
    );





#line 104 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"

__declspec(dllimport)
HANDLE
__stdcall
GetStdHandle(
      DWORD nStdHandle
    );


__declspec(dllimport)
BOOL
__stdcall
SetStdHandle(
      DWORD nStdHandle,
      HANDLE hHandle
    );





__declspec(dllimport)
BOOL
__stdcall
SetStdHandleEx(
      DWORD nStdHandle,
      HANDLE hHandle,
      PHANDLE phPrevValue
    );


#line 136 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"

__declspec(dllimport)
LPSTR
__stdcall
GetCommandLineA(
    void
    );

__declspec(dllimport)
LPWSTR
__stdcall
GetCommandLineW(
    void
    );





#line 156 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetEnvironmentVariableA(
      LPCSTR lpName,
      LPSTR lpBuffer,
      DWORD nSize
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetEnvironmentVariableW(
      LPCWSTR lpName,
      LPWSTR lpBuffer,
      DWORD nSize
    );





#line 182 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableA(
      LPCSTR lpName,
      LPCSTR lpValue
    );

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentVariableW(
      LPCWSTR lpName,
      LPCWSTR lpValue
    );





#line 204 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"

__declspec(dllimport)
 
DWORD
__stdcall
ExpandEnvironmentStringsA(
      LPCSTR lpSrc,
      LPSTR lpDst,
      DWORD nSize
    );

__declspec(dllimport)
 
DWORD
__stdcall
ExpandEnvironmentStringsW(
      LPCWSTR lpSrc,
      LPWSTR lpDst,
      DWORD nSize
    );





#line 230 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryA(
      LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
SetCurrentDirectoryW(
      LPCWSTR lpPathName
    );





#line 250 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetCurrentDirectoryA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetCurrentDirectoryW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );





#line 274 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"

__declspec(dllimport)
DWORD
__stdcall
SearchPathW(
      LPCWSTR lpPath,
      LPCWSTR lpFileName,
      LPCWSTR lpExtension,
      DWORD nBufferLength,
      LPWSTR lpBuffer,
      LPWSTR * lpFilePart
    );






#line 293 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"








__declspec(dllimport)
DWORD
__stdcall
SearchPathA(
      LPCSTR lpPath,
      LPCSTR lpFileName,
      LPCSTR lpExtension,
      DWORD nBufferLength,
      LPSTR lpBuffer,
      LPSTR * lpFilePart
    );





__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathA(
      LPCSTR ExeName
    );

__declspec(dllimport)
BOOL
__stdcall
NeedCurrentDirectoryForExePathW(
      LPCWSTR ExeName
    );





#line 336 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"

#line 338 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"

#line 340 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"



#line 344 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"
#pragma endregion





}
#line 352 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"

#line 354 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processenv.h"


#line 38 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
 
 











#pragma once
#line 16 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"













#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"


extern "C" {
#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#pragma region Application Family
















#line 59 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion






#pragma region Desktop Family






__declspec(dllimport)
LONG
__stdcall
CompareFileTime(
      const FILETIME * lpFileTime1,
      const FILETIME * lpFileTime2
    );


#line 83 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryA(
      LPCSTR lpPathName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryW(
      LPCWSTR lpPathName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );





#line 110 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 112 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
HANDLE
__stdcall
CreateFileA(
      LPCSTR lpFileName,
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD dwCreationDisposition,
      DWORD dwFlagsAndAttributes,
      HANDLE hTemplateFile
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateFileW(
      LPCWSTR lpFileName,
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD dwCreationDisposition,
      DWORD dwFlagsAndAttributes,
      HANDLE hTemplateFile
    );





#line 149 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceW(
      DWORD dwFlags,
      LPCWSTR lpDeviceName,
      LPCWSTR lpTargetPath
    );






#line 165 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
DeleteFileA(
      LPCSTR lpFileName
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteFileW(
      LPCWSTR lpFileName
    );





#line 190 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 192 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointW(
      LPCWSTR lpszVolumeMountPoint
    );






__declspec(dllimport)
BOOL
__stdcall
FileTimeToLocalFileTime(
      const FILETIME * lpFileTime,
      LPFILETIME lpLocalFileTime
    );


#line 220 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
FindClose(
      HANDLE hFindFile
    );


#line 238 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
FindCloseChangeNotification(
      HANDLE hChangeHandle
    );


__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationA(
      LPCSTR lpPathName,
      BOOL bWatchSubtree,
      DWORD dwNotifyFilter
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstChangeNotificationW(
      LPCWSTR lpPathName,
      BOOL bWatchSubtree,
      DWORD dwNotifyFilter
    );





#line 275 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileA(
      LPCSTR lpFileName,
      LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileW(
      LPCWSTR lpFileName,
      LPWIN32_FIND_DATAW lpFindFileData
    );





#line 297 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 299 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExA(
      LPCSTR lpFileName,
      FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
      FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
      DWORD dwAdditionalFlags
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileExW(
      LPCWSTR lpFileName,
      FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
      FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
      DWORD dwAdditionalFlags
    );





#line 337 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 339 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 341 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeW(
      LPWSTR lpszVolumeName,
      DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindNextChangeNotification(
      HANDLE hChangeHandle
    );


#line 369 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
FindNextFileA(
      HANDLE hFindFile,
      LPWIN32_FIND_DATAA lpFindFileData
    );

__declspec(dllimport)
BOOL
__stdcall
FindNextFileW(
      HANDLE hFindFile,
      LPWIN32_FIND_DATAW lpFindFileData
    );





#line 396 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 398 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeW(
      HANDLE hFindVolume,
      LPWSTR lpszVolumeName,
      DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
FindVolumeClose(
      HANDLE hFindVolume
    );


#line 427 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
FlushFileBuffers(
      HANDLE hFile
    );


#line 442 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceA(
      LPCSTR lpRootPathName,
      LPDWORD lpSectorsPerCluster,
      LPDWORD lpBytesPerSector,
      LPDWORD lpNumberOfFreeClusters,
      LPDWORD lpTotalNumberOfClusters
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceW(
      LPCWSTR lpRootPathName,
      LPDWORD lpSectorsPerCluster,
      LPDWORD lpBytesPerSector,
      LPDWORD lpNumberOfFreeClusters,
      LPDWORD lpTotalNumberOfClusters
    );





#line 475 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 477 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExA(
      LPCSTR lpDirectoryName,
      PULARGE_INTEGER lpFreeBytesAvailableToCaller,
      PULARGE_INTEGER lpTotalNumberOfBytes,
      PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );

__declspec(dllimport)
BOOL
__stdcall
GetDiskFreeSpaceExW(
      LPCWSTR lpDirectoryName,
      PULARGE_INTEGER lpFreeBytesAvailableToCaller,
      PULARGE_INTEGER lpTotalNumberOfBytes,
      PULARGE_INTEGER lpTotalNumberOfFreeBytes
    );





#line 508 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 510 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
UINT
__stdcall
GetDriveTypeA(
      LPCSTR lpRootPathName
    );

__declspec(dllimport)
UINT
__stdcall
GetDriveTypeW(
      LPCWSTR lpRootPathName
    );





#line 535 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesA(
      LPCSTR lpFileName
    );

__declspec(dllimport)
DWORD
__stdcall
GetFileAttributesW(
      LPCWSTR lpFileName
    );





#line 555 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 557 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



typedef struct _WIN32_FILE_ATTRIBUTE_DATA {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
} WIN32_FILE_ATTRIBUTE_DATA, *LPWIN32_FILE_ATTRIBUTE_DATA;

#line 573 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExA(
      LPCSTR lpFileName,
      GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesExW(
      LPCWSTR lpFileName,
      GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation
    );





#line 602 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 604 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



typedef struct _BY_HANDLE_FILE_INFORMATION {
    DWORD dwFileAttributes;
    FILETIME ftCreationTime;
    FILETIME ftLastAccessTime;
    FILETIME ftLastWriteTime;
    DWORD dwVolumeSerialNumber;
    DWORD nFileSizeHigh;
    DWORD nFileSizeLow;
    DWORD nNumberOfLinks;
    DWORD nFileIndexHigh;
    DWORD nFileIndexLow;
} BY_HANDLE_FILE_INFORMATION, *PBY_HANDLE_FILE_INFORMATION, *LPBY_HANDLE_FILE_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandle(
      HANDLE hFile,
      LPBY_HANDLE_FILE_INFORMATION lpFileInformation
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileSize(
      HANDLE hFile,
      LPDWORD lpFileSizeHigh
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileSizeEx(
      HANDLE hFile,
      PLARGE_INTEGER lpFileSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileTime(
      HANDLE hFile,
      LPFILETIME lpCreationTime,
      LPFILETIME lpLastAccessTime,
      LPFILETIME lpLastWriteTime
    );


__declspec(dllimport)
DWORD
__stdcall
GetFileType(
      HANDLE hFile
    );





__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleA(
      HANDLE hFile,
      LPSTR lpszFilePath,
      DWORD cchFilePath,
      DWORD dwFlags
    );

__declspec(dllimport)
DWORD
__stdcall
GetFinalPathNameByHandleW(
      HANDLE hFile,
      LPWSTR lpszFilePath,
      DWORD cchFilePath,
      DWORD dwFlags
    );





#line 697 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 699 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameA(
      LPCSTR lpFileName,
      DWORD nBufferLength,
      LPSTR lpBuffer,
     LPSTR * lpFilePart
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameW(
      LPCWSTR lpFileName,
      DWORD nBufferLength,
      LPWSTR lpBuffer,
     LPWSTR * lpFilePart
    );





#line 727 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

__declspec(dllimport)
DWORD
__stdcall
GetLogicalDrives(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetLogicalDriveStringsW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );






__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameA(
      LPCSTR lpszShortPath,
      LPSTR lpszLongPath,
      DWORD cchBuffer
    );

__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameW(
      LPCWSTR lpszShortPath,
      LPWSTR lpszLongPath,
      DWORD cchBuffer
    );





#line 774 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetShortPathNameW(
      LPCWSTR lpszLongPath,
      LPWSTR lpszShortPath,
      DWORD cchBuffer
    );






__declspec(dllimport)
UINT
__stdcall
GetTempFileNameW(
      LPCWSTR lpPathName,
      LPCWSTR lpPrefixString,
      UINT uUnique,
      LPWSTR lpTempFileName
    );









__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationByHandleW(
      HANDLE hFile,
      LPWSTR lpVolumeNameBuffer,
      DWORD nVolumeNameSize,
      LPDWORD lpVolumeSerialNumber,
      LPDWORD lpMaximumComponentLength,
      LPDWORD lpFileSystemFlags,
      LPWSTR lpFileSystemNameBuffer,
      DWORD nFileSystemNameSize
    );


#line 824 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationW(
      LPCWSTR lpRootPathName,
      LPWSTR lpVolumeNameBuffer,
      DWORD nVolumeNameSize,
      LPDWORD lpVolumeSerialNumber,
      LPDWORD lpMaximumComponentLength,
      LPDWORD lpFileSystemFlags,
      LPWSTR lpFileSystemNameBuffer,
      DWORD nFileSystemNameSize
    );






__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameW(
      LPCWSTR lpszFileName,
      LPWSTR lpszVolumePathName,
      DWORD cchBufferLength
    );






__declspec(dllimport)
BOOL
__stdcall
LocalFileTimeToFileTime(
      const FILETIME * lpLocalFileTime,
      LPFILETIME lpFileTime
    );


__declspec(dllimport)
BOOL
__stdcall
LockFile(
      HANDLE hFile,
      DWORD dwFileOffsetLow,
      DWORD dwFileOffsetHigh,
      DWORD nNumberOfBytesToLockLow,
      DWORD nNumberOfBytesToLockHigh
    );


#line 880 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
LockFileEx(
      HANDLE hFile,
      DWORD dwFlags,
      DWORD dwReserved,
      DWORD nNumberOfBytesToLockLow,
      DWORD nNumberOfBytesToLockHigh,
      LPOVERLAPPED lpOverlapped
    );


#line 900 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceW(
      LPCWSTR lpDeviceName,
      LPWSTR lpTargetPath,
      DWORD ucchMax
    );






#line 921 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
BOOL
__stdcall
ReadFile(
      HANDLE hFile,
       LPVOID lpBuffer,
      DWORD nNumberOfBytesToRead,
      LPDWORD lpNumberOfBytesRead,
      LPOVERLAPPED lpOverlapped
    );


#line 941 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
ReadFileEx(
      HANDLE hFile,
       LPVOID lpBuffer,
      DWORD nNumberOfBytesToRead,
      LPOVERLAPPED lpOverlapped,
      LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)
 
BOOL
__stdcall
ReadFileScatter(
      HANDLE hFile,
      FILE_SEGMENT_ELEMENT aSegmentArray[],
      DWORD nNumberOfBytesToRead,
      LPDWORD lpReserved,
      LPOVERLAPPED lpOverlapped
    );


#line 974 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryA(
      LPCSTR lpPathName
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryW(
      LPCWSTR lpPathName
    );





#line 999 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetEndOfFile(
      HANDLE hFile
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesA(
      LPCSTR lpFileName,
      DWORD dwFileAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesW(
      LPCWSTR lpFileName,
      DWORD dwFileAttributes
    );





#line 1029 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"




__declspec(dllimport)
BOOL
__stdcall
SetFileInformationByHandle(
      HANDLE hFile,
      FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
      LPVOID lpFileInformation,
      DWORD dwBufferSize
    );


#line 1045 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 1047 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
SetFilePointer(
      HANDLE hFile,
      LONG lDistanceToMove,
      PLONG lpDistanceToMoveHigh,
      DWORD dwMoveMethod
    );


#line 1065 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
SetFilePointerEx(
      HANDLE hFile,
      LARGE_INTEGER liDistanceToMove,
      PLARGE_INTEGER lpNewFilePointer,
      DWORD dwMoveMethod
    );


#line 1083 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetFileTime(
      HANDLE hFile,
      const FILETIME * lpCreationTime,
      const FILETIME * lpLastAccessTime,
      const FILETIME * lpLastWriteTime
    );





__declspec(dllimport)
BOOL
__stdcall
SetFileValidData(
      HANDLE hFile,
      LONGLONG ValidDataLength
    );


#line 1113 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

__declspec(dllimport)
BOOL
__stdcall
UnlockFile(
      HANDLE hFile,
      DWORD dwFileOffsetLow,
      DWORD dwFileOffsetHigh,
      DWORD nNumberOfBytesToUnlockLow,
      DWORD nNumberOfBytesToUnlockHigh
    );


#line 1127 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
UnlockFileEx(
      HANDLE hFile,
      DWORD dwReserved,
      DWORD nNumberOfBytesToUnlockLow,
      DWORD nNumberOfBytesToUnlockHigh,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFile(
      HANDLE hFile,
      LPCVOID lpBuffer,
      DWORD nNumberOfBytesToWrite,
      LPDWORD lpNumberOfBytesWritten,
      LPOVERLAPPED lpOverlapped
    );


#line 1158 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
WriteFileEx(
      HANDLE hFile,
      LPCVOID lpBuffer,
      DWORD nNumberOfBytesToWrite,
      LPOVERLAPPED lpOverlapped,
      LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );


__declspec(dllimport)
BOOL
__stdcall
WriteFileGather(
      HANDLE hFile,
      FILE_SEGMENT_ELEMENT aSegmentArray[],
      DWORD nNumberOfBytesToWrite,
      LPDWORD lpReserved,
      LPOVERLAPPED lpOverlapped
    );


#line 1189 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion








#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetTempPathW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointW(
      LPCWSTR lpszVolumeMountPoint,
      LPWSTR lpszVolumeName,
      DWORD cchBufferLength
    );









__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameW(
      LPCWSTR lpszVolumeName,
         LPWCH lpszVolumePathNames,
      DWORD cchBufferLength,
      PDWORD lpcchReturnLength
    );






#line 1248 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 1250 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion

#pragma region Application Family






typedef struct _CREATEFILE2_EXTENDED_PARAMETERS {
    DWORD dwSize;   
    DWORD dwFileAttributes;
    DWORD dwFileFlags;   
    DWORD dwSecurityQosFlags;	
    LPSECURITY_ATTRIBUTES lpSecurityAttributes; 
    HANDLE hTemplateFile;      
} CREATEFILE2_EXTENDED_PARAMETERS, *PCREATEFILE2_EXTENDED_PARAMETERS, *LPCREATEFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HANDLE
__stdcall
CreateFile2(
      LPCWSTR lpFileName,
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      DWORD dwCreationDisposition,
      LPCREATEFILE2_EXTENDED_PARAMETERS pCreateExParams
    );


#line 1281 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 1283 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"
#pragma endregion


#line 1287 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"







}
#line 1296 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"

#line 1298 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fileapi.h"


#line 39 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"
 











#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"













#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"


extern "C" {
#line 39 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"






#pragma region Application Family





__declspec(dllimport)
BOOL
__stdcall
IsDebuggerPresent(
    void
    );

#line 59 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"

#line 61 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
void
__stdcall
DebugBreak(
    void
    );


#line 76 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
void
__stdcall
OutputDebugStringA(
      LPCSTR lpOutputString
    );

__declspec(dllimport)
void
__stdcall
OutputDebugStringW(
      LPCWSTR lpOutputString
    );





#line 101 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"

#line 103 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"
#pragma endregion



#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
ContinueDebugEvent(
      DWORD dwProcessId,
      DWORD dwThreadId,
      DWORD dwContinueStatus
    );


__declspec(dllimport)
BOOL
__stdcall
WaitForDebugEvent(
      LPDEBUG_EVENT lpDebugEvent,
      DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcess(
      DWORD dwProcessId
    );


__declspec(dllimport)
BOOL
__stdcall
DebugActiveProcessStop(
      DWORD dwProcessId
    );




  
__declspec(dllimport)
BOOL
__stdcall
CheckRemoteDebuggerPresent(
      HANDLE hProcess,
      PBOOL pbDebuggerPresent
    );
  
  
#line 162 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"

#line 164 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"

#line 166 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"
#pragma endregion






}
#line 175 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"


#line 178 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\debugapi.h"


#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\utilapiset.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\utilapiset.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\utilapiset.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\utilapiset.h"










#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\utilapiset.h"


extern "C" {
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\utilapiset.h"

#pragma region Application Family



__declspec(dllimport)
 
PVOID
__stdcall
EncodePointer(
      PVOID Ptr
    );


__declspec(dllimport)
 
PVOID
__stdcall
DecodePointer(
      PVOID Ptr
    );


#line 58 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\utilapiset.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
PVOID
__stdcall
EncodeSystemPointer(
      PVOID Ptr
    );


__declspec(dllimport)
 
PVOID
__stdcall
DecodeSystemPointer(
      PVOID Ptr
    );


__declspec(dllimport)
BOOL
__stdcall
Beep(
      DWORD dwFreq,
      DWORD dwDuration
    );


#line 92 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\utilapiset.h"
#pragma endregion


}
#line 97 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\utilapiset.h"

#line 99 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\utilapiset.h"
#line 41 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\handleapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\handleapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\handleapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\handleapi.h"










#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\handleapi.h"


extern "C" {
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\handleapi.h"






#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
CloseHandle(
      HANDLE hObject
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateHandle(
      HANDLE hSourceProcessHandle,
      HANDLE hSourceHandle,
      HANDLE hTargetProcessHandle,
     LPHANDLE lpTargetHandle,
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      DWORD dwOptions
    );


#line 70 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\handleapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetHandleInformation(
      HANDLE hObject,
      LPDWORD lpdwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetHandleInformation(
      HANDLE hObject,
      DWORD dwMask,
      DWORD dwFlags
    );


#line 96 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\handleapi.h"
#pragma endregion


}
#line 101 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\handleapi.h"

#line 103 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\handleapi.h"
#line 42 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"
 











#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"












#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"


extern "C" {
#line 38 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"






#pragma region Desktop Family







typedef LONG (__stdcall *PTOP_LEVEL_EXCEPTION_FILTER)(
      struct _EXCEPTION_POINTERS *ExceptionInfo
    );

typedef PTOP_LEVEL_EXCEPTION_FILTER LPTOP_LEVEL_EXCEPTION_FILTER;





#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)

void
__stdcall
RaiseException(
      DWORD dwExceptionCode,
      DWORD dwExceptionFlags,
      DWORD nNumberOfArguments,
      const ULONG_PTR * lpArguments
    );


#line 82 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
LONG
__stdcall
UnhandledExceptionFilter(
      struct _EXCEPTION_POINTERS * ExceptionInfo
    );


__declspec(dllimport)
LPTOP_LEVEL_EXCEPTION_FILTER
__stdcall
SetUnhandledExceptionFilter(
      LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter
    );


#line 106 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Application Family





__declspec(dllimport)
   
DWORD
__stdcall
GetLastError(
    void
    );


#line 124 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"

__declspec(dllimport)
void
__stdcall
SetLastError(
      DWORD dwErrCode
    );


#line 134 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"
#pragma endregion

#pragma region Desktop Family






__declspec(dllimport)
UINT
__stdcall
GetErrorMode(
    void
    );


#line 152 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"

__declspec(dllimport)
UINT
__stdcall
SetErrorMode(
      UINT uMode
    );


#line 162 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"
#pragma endregion





#pragma region Desktop Family






__declspec(dllimport)
 
PVOID
__stdcall
AddVectoredExceptionHandler(
      ULONG First,
      PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredExceptionHandler(
      PVOID Handle
    );


__declspec(dllimport)
 
PVOID
__stdcall
AddVectoredContinueHandler(
      ULONG First,
      PVECTORED_EXCEPTION_HANDLER Handler
    );


__declspec(dllimport)
ULONG
__stdcall
RemoveVectoredContinueHandler(
      PVOID Handle
    );


#line 212 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"























#line 236 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"
#line 237 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"

#line 239 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"

#line 241 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"
#pragma endregion







}
#line 251 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"

#line 253 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\errhandlingapi.h"


#line 43 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fibersapi.h"
 











#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fibersapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fibersapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fibersapi.h"












#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fibersapi.h"


extern "C" {
#line 38 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fibersapi.h"






#pragma region Application Family








#line 54 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fibersapi.h"

__declspec(dllimport)
DWORD
__stdcall
FlsAlloc(
      PFLS_CALLBACK_FUNCTION lpCallback
    );


__declspec(dllimport)
PVOID
__stdcall
FlsGetValue(
      DWORD dwFlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
FlsSetValue(
      DWORD dwFlsIndex,
      PVOID lpFlsData
    );


__declspec(dllimport)
BOOL
__stdcall
FlsFree(
      DWORD dwFlsIndex
    );


#line 89 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fibersapi.h"

#line 91 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fibersapi.h"
#pragma endregion





#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
IsThreadAFiber(
    void
    );


#line 113 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fibersapi.h"

#line 115 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fibersapi.h"
#pragma endregion







}
#line 125 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fibersapi.h"

#line 127 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\fibersapi.h"


#line 44 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namedpipeapi.h"
 
 










#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namedpipeapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namedpipeapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namedpipeapi.h"













#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namedpipeapi.h"


extern "C" {
#line 39 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namedpipeapi.h"








__declspec(dllimport)
BOOL
__stdcall
CreatePipe(
      PHANDLE hReadPipe,
      PHANDLE hWritePipe,
      LPSECURITY_ATTRIBUTES lpPipeAttributes,
      DWORD nSize
    );


__declspec(dllimport)
BOOL
__stdcall
ConnectNamedPipe(
      HANDLE hNamedPipe,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
DisconnectNamedPipe(
      HANDLE hNamedPipe
    );


__declspec(dllimport)
BOOL
__stdcall
SetNamedPipeHandleState(
      HANDLE hNamedPipe,
      LPDWORD lpMode,
      LPDWORD lpMaxCollectionCount,
      LPDWORD lpCollectDataTimeout
    );


__declspec(dllimport)
BOOL
__stdcall
PeekNamedPipe(
      HANDLE hNamedPipe,
      LPVOID lpBuffer,
      DWORD nBufferSize,
      LPDWORD lpBytesRead,
      LPDWORD lpTotalBytesAvail,
      LPDWORD lpBytesLeftThisMessage
    );


__declspec(dllimport)
BOOL
__stdcall
TransactNamedPipe(
      HANDLE hNamedPipe,
      LPVOID lpInBuffer,
      DWORD nInBufferSize,
      LPVOID lpOutBuffer,
      DWORD nOutBufferSize,
      LPDWORD lpBytesRead,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeW(
      LPCWSTR lpName,
      DWORD dwOpenMode,
      DWORD dwPipeMode,
      DWORD nMaxInstances,
      DWORD nOutBufferSize,
      DWORD nInBufferSize,
      DWORD nDefaultTimeOut,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );






__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeW(
      LPCWSTR lpNamedPipeName,
      DWORD nTimeOut
    );









__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameW(
      HANDLE Pipe,
      LPWSTR ClientComputerName,
      ULONG ClientComputerNameLength
    );


#line 159 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namedpipeapi.h"





#line 165 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namedpipeapi.h"






__declspec(dllimport)
 
BOOL
__stdcall
ImpersonateNamedPipeClient(
      HANDLE hNamedPipe
    );
                               

#line 181 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namedpipeapi.h"



}
#line 186 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namedpipeapi.h"

#line 188 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namedpipeapi.h"


#line 45 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\profileapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\profileapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\profileapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\profileapi.h"










#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\profileapi.h"


extern "C" {
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\profileapi.h"





__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceCounter(
      LARGE_INTEGER * lpPerformanceCount
    );


__declspec(dllimport)
BOOL
__stdcall
QueryPerformanceFrequency(
      LARGE_INTEGER * lpFrequency
    );



}
#line 58 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\profileapi.h"

#line 60 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\profileapi.h"
#line 46 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"













#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"


extern "C" {
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"

#pragma region Desktop Family







typedef struct _HEAP_SUMMARY {
    DWORD cb;
    SIZE_T cbAllocated;
    SIZE_T cbCommitted;
    SIZE_T cbReserved;
    SIZE_T cbMaxReserve;
} HEAP_SUMMARY, *PHEAP_SUMMARY;
typedef PHEAP_SUMMARY LPHEAP_SUMMARY;

#line 56 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"
#pragma endregion

#pragma region Desktop Family







__declspec(dllimport)
 
HANDLE
__stdcall
HeapCreate(
      DWORD flOptions,
      SIZE_T dwInitialSize,
      SIZE_T dwMaximumSize
    );


__declspec(dllimport)
BOOL
__stdcall
HeapDestroy(
      HANDLE hHeap
    );

    
#line 86 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
 
LPVOID
__stdcall
HeapAlloc(
      HANDLE hHeap,
      DWORD dwFlags,
      SIZE_T dwBytes
    );


__declspec(dllimport)
 
 
 
LPVOID
__stdcall
HeapReAlloc(
      HANDLE hHeap,
      DWORD dwFlags,
        LPVOID lpMem,
      SIZE_T dwBytes
    );


__declspec(dllimport)
BOOL
__stdcall
HeapFree(
      HANDLE hHeap,
      DWORD dwFlags,
          LPVOID lpMem
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapSize(
      HANDLE hHeap,
      DWORD dwFlags,
      LPCVOID lpMem
    );


#line 139 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
HeapValidate(
      HANDLE hHeap,
      DWORD dwFlags,
      LPCVOID lpMem
    );


__declspec(dllimport)
SIZE_T
__stdcall
HeapCompact(
      HANDLE hHeap,
      DWORD dwFlags
    );





BOOL
__stdcall
HeapSummary(
      HANDLE hHeap,
      DWORD dwFlags,
      LPHEAP_SUMMARY lpSummary
    );


#line 177 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"

#line 179 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
HANDLE
__stdcall
GetProcessHeap(
    void
    );


#line 194 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetProcessHeaps(
      DWORD NumberOfHeaps,
      PHANDLE ProcessHeaps
    );


__declspec(dllimport)
BOOL
__stdcall
HeapLock(
      HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapUnlock(
      HANDLE hHeap
    );


__declspec(dllimport)
BOOL
__stdcall
HeapWalk(
      HANDLE hHeap,
      LPPROCESS_HEAP_ENTRY lpEntry
    );


__declspec(dllimport)
BOOL
__stdcall
HeapSetInformation(
      HANDLE HeapHandle,
      HEAP_INFORMATION_CLASS HeapInformationClass,
      PVOID HeapInformation,
      SIZE_T HeapInformationLength
    );


__declspec(dllimport)
BOOL
__stdcall
HeapQueryInformation(
      HANDLE HeapHandle,
      HEAP_INFORMATION_CLASS HeapInformationClass,
      PVOID HeapInformation,
      SIZE_T HeapInformationLength,
      PSIZE_T ReturnLength
    );

    
#line 258 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"
#pragma endregion






}
#line 267 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"

#line 269 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\heapapi.h"
#line 47 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"
 











#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"













#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"


extern "C" {
#line 39 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"






#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResult(
      HANDLE hFile,
      LPOVERLAPPED lpOverlapped,
      LPDWORD lpNumberOfBytesTransferred,
      BOOL bWait
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateIoCompletionPort(
      HANDLE FileHandle,
      HANDLE ExistingCompletionPort,
      ULONG_PTR CompletionKey,
      DWORD NumberOfConcurrentThreads
    );


__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatus(
      HANDLE CompletionPort,
      LPDWORD lpNumberOfBytesTransferred,
      PULONG_PTR lpCompletionKey,
      LPOVERLAPPED * lpOverlapped,
      DWORD dwMilliseconds
    );





__declspec(dllimport)
BOOL
__stdcall
GetQueuedCompletionStatusEx(
      HANDLE CompletionPort,
      LPOVERLAPPED_ENTRY lpCompletionPortEntries,
      ULONG ulCount,
      PULONG ulNumEntriesRemoved,
      DWORD dwMilliseconds,
      BOOL fAlertable
    );


#line 101 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"

__declspec(dllimport)
BOOL
__stdcall
PostQueuedCompletionStatus(
      HANDLE CompletionPort,
      DWORD dwNumberOfBytesTransferred,
      ULONG_PTR dwCompletionKey,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
BOOL
__stdcall
DeviceIoControl(
      HANDLE hDevice,
      DWORD dwIoControlCode,
      LPVOID lpInBuffer,
      DWORD nInBufferSize,
      LPVOID lpOutBuffer,
      DWORD nOutBufferSize,
      LPDWORD lpBytesReturned,
      LPOVERLAPPED lpOverlapped
    );





__declspec(dllimport)
BOOL
__stdcall
CancelIoEx(
      HANDLE hFile,
      LPOVERLAPPED lpOverlapped
    );


#line 141 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"

#line 143 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"
#pragma endregion








#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
GetOverlappedResultEx(
      HANDLE hFile,
      LPOVERLAPPED lpOverlapped,
      LPDWORD lpNumberOfBytesTransferred,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


#line 169 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
CancelIo(
      HANDLE hFile
    );





__declspec(dllimport)
BOOL
__stdcall
CancelSynchronousIo(
      HANDLE hThread
    );


#line 195 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"

#line 197 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"
#pragma endregion

#line 200 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"







}
#line 209 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"

#line 211 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ioapiset.h"


#line 48 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
 
 











#pragma once
#line 16 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"













#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"


extern "C" {
#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"







#pragma region Application Family









typedef RTL_SRWLOCK SRWLOCK, *PSRWLOCK;

#line 60 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion






#pragma region Application Family






__declspec(dllimport)
void
__stdcall
InitializeSRWLock(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockExclusive(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
ReleaseSRWLockShared(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockExclusive(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

void
__stdcall
AcquireSRWLockShared(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockExclusive(
      PSRWLOCK SRWLock
    );


__declspec(dllimport)

BOOLEAN
__stdcall
TryAcquireSRWLockShared(
      PSRWLOCK SRWLock
    );


#line 137 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"

#line 139 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family















#line 158 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"

__declspec(dllimport)
void
__stdcall
InitializeCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );


#line 168 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"

#line 170 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
void
__stdcall
EnterCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );


#line 193 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
InitializeCriticalSectionAndSpinCount(
      LPCRITICAL_SECTION lpCriticalSection,
      DWORD dwSpinCount
    );


#line 210 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
InitializeCriticalSectionEx(
      LPCRITICAL_SECTION lpCriticalSection,
      DWORD dwSpinCount,
      DWORD Flags
    );


#line 230 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"

#line 232 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
SetCriticalSectionSpinCount(
      LPCRITICAL_SECTION lpCriticalSection,
      DWORD dwSpinCount
    );


#line 248 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
TryEnterCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );


#line 266 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"

__declspec(dllimport)
void
__stdcall
DeleteCriticalSection(
      LPCRITICAL_SECTION lpCriticalSection
    );










typedef RTL_RUN_ONCE INIT_ONCE;
typedef PRTL_RUN_ONCE PINIT_ONCE;
typedef PRTL_RUN_ONCE LPINIT_ONCE;


















typedef
BOOL
(__stdcall *PINIT_ONCE_FN) (
      PINIT_ONCE InitOnce,
      PVOID Parameter,
     PVOID *Context
    );




__declspec(dllimport)
void
__stdcall
InitOnceInitialize(
      PINIT_ONCE InitOnce
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceExecuteOnce(
      PINIT_ONCE InitOnce,
       PINIT_ONCE_FN InitFn,
      PVOID Parameter,
     LPVOID * Context
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceBeginInitialize(
      LPINIT_ONCE lpInitOnce,
      DWORD dwFlags,
      PBOOL fPending,
     LPVOID * lpContext
    );


__declspec(dllimport)
BOOL
__stdcall
InitOnceComplete(
      LPINIT_ONCE lpInitOnce,
      DWORD dwFlags,
      LPVOID lpContext
    );


#line 356 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"





typedef RTL_CONDITION_VARIABLE CONDITION_VARIABLE, *PCONDITION_VARIABLE;
















__declspec(dllimport)
void
__stdcall
InitializeConditionVariable(
      PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeConditionVariable(
      PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
void
__stdcall
WakeAllConditionVariable(
      PCONDITION_VARIABLE ConditionVariable
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableCS(
      PCONDITION_VARIABLE ConditionVariable,
      PCRITICAL_SECTION CriticalSection,
      DWORD dwMilliseconds
    );


__declspec(dllimport)
BOOL
__stdcall
SleepConditionVariableSRW(
      PCONDITION_VARIABLE ConditionVariable,
      PSRWLOCK SRWLock,
      DWORD dwMilliseconds,
      ULONG Flags
    );


#line 424 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"





__declspec(dllimport)
BOOL
__stdcall
SetEvent(
      HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ResetEvent(
      HANDLE hEvent
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseSemaphore(
      HANDLE hSemaphore,
      LONG lReleaseCount,
      LPLONG lpPreviousCount
    );


__declspec(dllimport)
BOOL
__stdcall
ReleaseMutex(
      HANDLE hMutex
    );


#line 464 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObject(
      HANDLE hHandle,
      DWORD dwMilliseconds
    );


__declspec(dllimport)
DWORD
__stdcall
SleepEx(
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


#line 489 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
DWORD
__stdcall
WaitForSingleObjectEx(
      HANDLE hHandle,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjectsEx(
      DWORD nCount,
      const HANDLE * lpHandles,
      BOOL bWaitAll,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );









#line 525 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexA(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      BOOL bInitialOwner,
      LPCSTR lpName
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexW(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      BOOL bInitialOwner,
      LPCWSTR lpName
    );





#line 556 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"

#line 558 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
HANDLE
__stdcall
OpenMutexW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );






#line 580 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventA(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      BOOL bManualReset,
      BOOL bInitialState,
      LPCSTR lpName
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventW(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      BOOL bManualReset,
      BOOL bInitialState,
      LPCWSTR lpName
    );





#line 613 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"

#line 615 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
HANDLE
__stdcall
OpenEventA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );

__declspec(dllimport)
 
HANDLE
__stdcall
OpenEventW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );





#line 646 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenSemaphoreW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );






#line 663 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion




#pragma region Desktop Family



typedef
void
(__stdcall *PTIMERAPCROUTINE)(
      LPVOID lpArgToCompletionRoutine,
          DWORD dwTimerLowValue,
          DWORD dwTimerHighValue
    );

__declspec(dllimport)
 
HANDLE
__stdcall
OpenWaitableTimerW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpTimerName
    );









BOOL
__stdcall
SetWaitableTimerEx(
      HANDLE hTimer,
      const LARGE_INTEGER * lpDueTime,
      LONG lPeriod,
      PTIMERAPCROUTINE pfnCompletionRoutine,
      LPVOID lpArgToCompletionRoutine,
      PREASON_CONTEXT WakeContext,
      ULONG TolerableDelay
    );


#line 712 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetWaitableTimer(
      HANDLE hTimer,
      const LARGE_INTEGER * lpDueTime,
      LONG lPeriod,
      PTIMERAPCROUTINE pfnCompletionRoutine,
      LPVOID lpArgToCompletionRoutine,
      BOOL fResume
    );


__declspec(dllimport)
BOOL
__stdcall
CancelWaitableTimer(
      HANDLE hTimer
    );


#line 735 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion




#pragma region Application Family





__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexExA(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      LPCSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateMutexExW(
      LPSECURITY_ATTRIBUTES lpMutexAttributes,
      LPCWSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );





#line 773 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"




__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventExA(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      LPCSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateEventExW(
      LPSECURITY_ATTRIBUTES lpEventAttributes,
      LPCWSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );





#line 804 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"

__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreExW(
      LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
      LONG lInitialCount,
      LONG lMaximumCount,
      LPCWSTR lpName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );






#line 824 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerExW(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
      LPCWSTR lpTimerName,
      DWORD dwFlags,
      DWORD dwDesiredAccess
    );






#line 849 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#line 852 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"

#line 854 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"








#pragma region Desktop Family



typedef RTL_BARRIER SYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER PSYNCHRONIZATION_BARRIER;
typedef PRTL_BARRIER LPSYNCHRONIZATION_BARRIER;





BOOL
__stdcall
EnterSynchronizationBarrier(
      LPSYNCHRONIZATION_BARRIER lpBarrier,
      DWORD dwFlags
    );


BOOL
__stdcall
InitializeSynchronizationBarrier(
      LPSYNCHRONIZATION_BARRIER lpBarrier,
      LONG lTotalThreads,
      LONG lSpinCount
    );


BOOL
__stdcall
DeleteSynchronizationBarrier(
      LPSYNCHRONIZATION_BARRIER lpBarrier
    );


__declspec(dllimport)
void
__stdcall
Sleep(
      DWORD dwMilliseconds
    );


BOOL
__stdcall
WaitOnAddress(
      volatile void * Address,
      PVOID CompareAddress,
      SIZE_T AddressSize,
      DWORD dwMilliseconds
    );


void
__stdcall
WakeByAddressSingle(
      PVOID Address
    );


void
__stdcall
WakeByAddressAll(
      PVOID Address
    );




__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
      HANDLE hObjectToSignal,
      HANDLE hObjectToWaitOn,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );


#line 944 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"

#line 946 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"
#pragma endregion

#line 949 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"






}
#line 957 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"

#line 959 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\synchapi.h"


#line 49 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"
 
 










#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"












#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"


extern "C" {
#line 38 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"












__declspec(dllimport)
LONG
__stdcall
InterlockedIncrement(
      LONG volatile * lpAddend
    );


__declspec(dllimport)
LONG
__stdcall
InterlockedDecrement(
      LONG volatile * lpAddend
    );


__declspec(dllimport)
LONG
__stdcall
InterlockedExchange(
      LONG volatile * Target,
      LONG Value
    );







__declspec(dllimport)
LONG
__stdcall
InterlockedExchangeAdd(
      LONG volatile * Addend,
      LONG Value
    );


__declspec(dllimport)
LONG
__stdcall
InterlockedCompareExchange(
      LONG volatile * Destination,
      LONG Exchange,
      LONG Comperand
    );





__declspec(dllimport)
LONGLONG
__stdcall
InterlockedCompareExchange64(
      LONGLONG volatile * Destination,
      LONGLONG Exchange,
      LONGLONG Comperand
    );


#line 113 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"

#line 115 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"




__declspec(dllimport)
void
__stdcall
InitializeSListHead(
      PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPopEntrySList(
      PSLIST_HEADER ListHead
    );


__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushEntrySList(
      PSLIST_HEADER ListHead,
      PSLIST_ENTRY ListEntry
    );







__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedPushListSListEx(
      PSLIST_HEADER ListHead,
      PSLIST_ENTRY List,
      PSLIST_ENTRY ListEnd,
      ULONG Count
    );


#line 161 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"

__declspec(dllimport)
PSLIST_ENTRY
__stdcall
InterlockedFlushSList(
      PSLIST_HEADER ListHead
    );


__declspec(dllimport)
USHORT
__stdcall
QueryDepthSList(
      PSLIST_HEADER ListHead
    );


#line 179 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"

#line 181 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"

#line 183 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"





}
#line 190 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"

#line 192 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\interlockedapi.h"

#line 50 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
 











#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"













#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"


extern "C" {
#line 39 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"






#pragma region Desktop Family



typedef struct _PROCESS_INFORMATION {
    HANDLE hProcess;
    HANDLE hThread;
    DWORD dwProcessId;
    DWORD dwThreadId;
} PROCESS_INFORMATION, *PPROCESS_INFORMATION, *LPPROCESS_INFORMATION;

typedef struct _STARTUPINFOA {
    DWORD   cb;
    LPSTR   lpReserved;
    LPSTR   lpDesktop;
    LPSTR   lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOA, *LPSTARTUPINFOA;
typedef struct _STARTUPINFOW {
    DWORD   cb;
    LPWSTR  lpReserved;
    LPWSTR  lpDesktop;
    LPWSTR  lpTitle;
    DWORD   dwX;
    DWORD   dwY;
    DWORD   dwXSize;
    DWORD   dwYSize;
    DWORD   dwXCountChars;
    DWORD   dwYCountChars;
    DWORD   dwFillAttribute;
    DWORD   dwFlags;
    WORD    wShowWindow;
    WORD    cbReserved2;
    LPBYTE  lpReserved2;
    HANDLE  hStdInput;
    HANDLE  hStdOutput;
    HANDLE  hStdError;
} STARTUPINFOW, *LPSTARTUPINFOW;




typedef STARTUPINFOA STARTUPINFO;
typedef LPSTARTUPINFOA LPSTARTUPINFO;
#line 103 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"




__declspec(dllimport)
DWORD
__stdcall
QueueUserAPC(
      PAPCFUNC pfnAPC,
      HANDLE hThread,
      ULONG_PTR dwData
    );


#line 118 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetProcessTimes(
      HANDLE hProcess,
      LPFILETIME lpCreationTime,
      LPFILETIME lpExitTime,
      LPFILETIME lpKernelTime,
      LPFILETIME lpUserTime
    );


#line 132 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
HANDLE
__stdcall
GetCurrentProcess(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessId(
    void
    );


#line 155 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitProcess(
      UINT uExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
TerminateProcess(
      HANDLE hProcess,
      UINT uExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
GetExitCodeProcess(
      HANDLE hProcess,
      LPDWORD lpExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
SwitchToThread(
    void
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateThread(
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      SIZE_T dwStackSize,
      LPTHREAD_START_ROUTINE lpStartAddress,
        LPVOID lpParameter,
      DWORD dwCreationFlags,
      LPDWORD lpThreadId
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateRemoteThread(
      HANDLE hProcess,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      SIZE_T dwStackSize,
      LPTHREAD_START_ROUTINE lpStartAddress,
      LPVOID lpParameter,
      DWORD dwCreationFlags,
      LPDWORD lpThreadId
    );


#line 226 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
HANDLE
__stdcall
GetCurrentThread(
    void
    );


__declspec(dllimport)
DWORD
__stdcall
GetCurrentThreadId(
    void
    );


#line 249 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HANDLE
__stdcall
OpenThread(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      DWORD dwThreadId
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadPriority(
      HANDLE hThread,
      int nPriority
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadPriorityBoost(
      HANDLE hThread,
      BOOL bDisablePriorityBoost
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadPriorityBoost(
      HANDLE hThread,
      PBOOL pDisablePriorityBoost
    );


__declspec(dllimport)
int
__stdcall
GetThreadPriority(
      HANDLE hThread
    );


__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
ExitThread(
      DWORD dwExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
TerminateThread(
      HANDLE hThread,
      DWORD dwExitCode
    );


__declspec(dllimport)
 
BOOL
__stdcall
GetExitCodeThread(
      HANDLE hThread,
      LPDWORD lpExitCode
    );


__declspec(dllimport)
DWORD
__stdcall
SuspendThread(
      HANDLE hThread
    );


__declspec(dllimport)
DWORD
__stdcall
ResumeThread(
      HANDLE hThread
    );








 
__declspec(dllimport)
DWORD
__stdcall
TlsAlloc(
    void
    );


__declspec(dllimport)
LPVOID
__stdcall
TlsGetValue(
      DWORD dwTlsIndex
    );


__declspec(dllimport)
BOOL
__stdcall
TlsSetValue(
      DWORD dwTlsIndex,
      LPVOID lpTlsValue
    );


__declspec(dllimport)
BOOL
__stdcall
TlsFree(
      DWORD dwTlsIndex
    );




__declspec(dllimport)
BOOL
__stdcall
CreateProcessA(
      LPCSTR lpApplicationName,
      LPSTR lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL bInheritHandles,
      DWORD dwCreationFlags,
      LPVOID lpEnvironment,
      LPCSTR lpCurrentDirectory,
      LPSTARTUPINFOA lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );

__declspec(dllimport)
BOOL
__stdcall
CreateProcessW(
      LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL bInheritHandles,
      DWORD dwCreationFlags,
      LPVOID lpEnvironment,
      LPCWSTR lpCurrentDirectory,
      LPSTARTUPINFOW lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );





#line 424 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"

#line 426 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetProcessShutdownParameters(
      DWORD dwLevel,
      DWORD dwFlags
    );


__declspec(dllimport)
DWORD
__stdcall
GetProcessVersion(
      DWORD ProcessId
    );


__declspec(dllimport)
void
__stdcall
GetStartupInfoW(
      LPSTARTUPINFOW lpStartupInfo
    );





#line 456 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion





#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserW(
      HANDLE hToken,
      LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
      LPSECURITY_ATTRIBUTES lpProcessAttributes,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      BOOL bInheritHandles,
      DWORD dwCreationFlags,
      LPVOID lpEnvironment,
      LPCWSTR lpCurrentDirectory,
      LPSTARTUPINFOW lpStartupInfo,
      LPPROCESS_INFORMATION lpProcessInformation
    );






#line 489 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 492 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"

#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
SetThreadToken(
      PHANDLE Thread,
      HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
OpenProcessToken(
      HANDLE ProcessHandle,
      DWORD DesiredAccess,
     PHANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
OpenThreadToken(
      HANDLE ThreadHandle,
      DWORD DesiredAccess,
      BOOL OpenAsSelf,
     PHANDLE TokenHandle
    );


#line 529 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetPriorityClass(
      HANDLE hProcess,
      DWORD dwPriorityClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadStackGuarantee(
      PULONG StackSizeInBytes
    );


__declspec(dllimport)
DWORD
__stdcall
GetPriorityClass(
      HANDLE hProcess
    );


__declspec(dllimport)
BOOL
__stdcall
ProcessIdToSessionId(
      DWORD dwProcessId,
      DWORD * pSessionId
    );






__declspec(dllimport)
DWORD
__stdcall
GetProcessId(
      HANDLE Process
    );


#line 584 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"




__declspec(dllimport)
DWORD
__stdcall
GetThreadId(
      HANDLE Thread
    );


#line 597 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"


typedef struct _PROC_THREAD_ATTRIBUTE_LIST *PPROC_THREAD_ATTRIBUTE_LIST, *LPPROC_THREAD_ATTRIBUTE_LIST;

#line 602 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion




#pragma region Application Family



__declspec(dllimport)
void
__stdcall
FlushProcessWriteBuffers(
    void
    );


#line 620 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetProcessIdOfThread(
      HANDLE Thread
    );


__declspec(dllimport)
 
BOOL
__stdcall
InitializeProcThreadAttributeList(
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
      DWORD dwAttributeCount,
      DWORD dwFlags,
      PSIZE_T lpSize
    );


__declspec(dllimport)
void
__stdcall
DeleteProcThreadAttributeList(
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList
    );




__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityUpdateMode(
      HANDLE hProcess,
      DWORD dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessAffinityUpdateMode(
      HANDLE hProcess,
      LPDWORD lpdwFlags
    );




__declspec(dllimport)
BOOL
__stdcall
UpdateProcThreadAttribute(
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
      DWORD dwFlags,
      DWORD_PTR Attribute,
      PVOID lpValue,
      SIZE_T cbSize,
      PVOID lpPreviousValue,
      PSIZE_T lpReturnSize
    );


#line 691 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 694 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"

#pragma region Desktop Family



__declspec(dllimport)
 
HANDLE
__stdcall
CreateRemoteThreadEx(
      HANDLE hProcess,
      LPSECURITY_ATTRIBUTES lpThreadAttributes,
      SIZE_T dwStackSize,
      LPTHREAD_START_ROUTINE lpStartAddress,
      LPVOID lpParameter,
      DWORD dwCreationFlags,
      LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,
      LPDWORD lpThreadId
    );


#line 716 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion









#pragma region Desktop Family






__declspec(dllimport)
void
__stdcall
GetCurrentThreadStackLimits(
      PULONG_PTR LowLimit,
      PULONG_PTR HighLimit
    );


#line 743 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetThreadContext(
      HANDLE hThread,
      LPCONTEXT lpContext
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadContext(
      HANDLE hThread,
      const CONTEXT * lpContext
    );





__declspec(dllimport)
BOOL
__stdcall
SetProcessMitigationPolicy(
      PROCESS_MITIGATION_POLICY MitigationPolicy,
      PVOID lpBuffer,
      SIZE_T dwLength
    );


__declspec(dllimport)
BOOL
__stdcall
GetProcessMitigationPolicy(
      HANDLE hProcess,
      PROCESS_MITIGATION_POLICY MitigationPolicy,
      PVOID lpBuffer,
      SIZE_T dwLength
    );


#line 787 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"

#line 789 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 792 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#line 793 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"




#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
FlushInstructionCache(
      HANDLE hProcess,
      LPCVOID lpBaseAddress,
      SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadTimes(
      HANDLE hThread,
      LPFILETIME lpCreationTime,
      LPFILETIME lpExitTime,
      LPFILETIME lpKernelTime,
      LPFILETIME lpUserTime
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenProcess(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      DWORD dwProcessId
    );


#line 834 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion

#pragma region Application Family



BOOL
__stdcall
IsProcessorFeaturePresent(
      DWORD ProcessorFeature
    );


#line 848 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 851 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"




#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetProcessHandleCount(
      HANDLE hProcess,
      PDWORD pdwHandleCount
    );

    
#line 869 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 872 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"




#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetCurrentProcessorNumber(
    void
    );


#line 889 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 892 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"




#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetThreadIdealProcessorEx(
      HANDLE hThread,
      PPROCESSOR_NUMBER lpIdealProcessor,
      PPROCESSOR_NUMBER lpPreviousIdealProcessor
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadIdealProcessorEx(
      HANDLE hThread,
      PPROCESSOR_NUMBER lpIdealProcessor
    );


__declspec(dllimport)
void
__stdcall
GetCurrentProcessorNumberEx(
      PPROCESSOR_NUMBER ProcNumber
    );


#line 928 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"
#pragma endregion

#line 931 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"








}
#line 941 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"

#line 943 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processthreadsapi.h"



#line 51 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
 
 











#pragma once
#line 16 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"





#pragma warning(disable:4514)

#pragma warning(disable:4103)
#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"


#pragma warning(push)
#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#pragma warning(disable:4001)
#pragma warning(disable:4201)
#pragma warning(disable:4214)
#line 39 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"











#line 51 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"


extern "C" {
#line 55 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"







#pragma region Application Family



typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;          
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        } ;
    } ;
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO, *LPSYSTEM_INFO;

#line 86 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#pragma endregion






#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetVersion(
    void
    );


typedef struct _MEMORYSTATUSEX {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    DWORDLONG ullTotalPhys;
    DWORDLONG ullAvailPhys;
    DWORDLONG ullTotalPageFile;
    DWORDLONG ullAvailPageFile;
    DWORDLONG ullTotalVirtual;
    DWORDLONG ullAvailVirtual;
    DWORDLONG ullAvailExtendedVirtual;
} MEMORYSTATUSEX, *LPMEMORYSTATUSEX;

__declspec(dllimport)
BOOL
__stdcall
GlobalMemoryStatusEx(
      LPMEMORYSTATUSEX lpBuffer
    );


#line 126 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
void
__stdcall
GetSystemTime(
      LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)
void
__stdcall
GetSystemTimeAsFileTime(
      LPFILETIME lpSystemTimeAsFileTime
    );


__declspec(dllimport)
void
__stdcall
GetLocalTime(
      LPSYSTEMTIME lpSystemTime
    );


#line 157 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetLocalTime(
      const SYSTEMTIME * lpSystemTime
    );


__declspec(dllimport)
void
__stdcall
GetSystemInfo(
      LPSYSTEM_INFO lpSystemInfo
    );


#line 180 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#pragma endregion




#pragma region Desktop Family



 
__declspec(dllimport)
DWORD
__stdcall
GetTickCount(
    void
    );


#line 199 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
ULONGLONG
__stdcall
GetTickCount64(
    void
    );


#line 217 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"

#line 219 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
GetSystemTimeAdjustment(
      PDWORD lpTimeAdjustment,
      PDWORD lpTimeIncrement,
      PBOOL lpTimeAdjustmentDisabled
    );


__declspec(dllimport)
 
UINT
__stdcall
GetSystemDirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );

__declspec(dllimport)
 
UINT
__stdcall
GetSystemDirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );





#line 259 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"

__declspec(dllimport)
 
 
UINT
__stdcall
GetWindowsDirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );

__declspec(dllimport)
 
 
UINT
__stdcall
GetWindowsDirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );





#line 285 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"

__declspec(dllimport)
 
UINT
__stdcall
GetSystemWindowsDirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );

__declspec(dllimport)
 
UINT
__stdcall
GetSystemWindowsDirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );





#line 309 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"

#line 311 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#pragma endregion






#pragma region Desktop Family



typedef enum _COMPUTER_NAME_FORMAT {
    ComputerNameNetBIOS,
    ComputerNameDnsHostname,
    ComputerNameDnsDomain,
    ComputerNameDnsFullyQualified,
    ComputerNamePhysicalNetBIOS,
    ComputerNamePhysicalDnsHostname,
    ComputerNamePhysicalDnsDomain,
    ComputerNamePhysicalDnsFullyQualified,
    ComputerNameMax
} COMPUTER_NAME_FORMAT ;

#line 335 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#pragma endregion






#pragma region Desktop Family



__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameExA(
      COMPUTER_NAME_FORMAT NameType,
      LPSTR lpBuffer,
      LPDWORD nSize
    );

__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameExW(
      COMPUTER_NAME_FORMAT NameType,
      LPWSTR lpBuffer,
      LPDWORD nSize
    );





#line 371 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"








__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExW(
      COMPUTER_NAME_FORMAT NameType,
      LPCWSTR lpBuffer
    );






__declspec(dllimport)
BOOL
__stdcall
SetSystemTime(
      const SYSTEMTIME * lpSystemTime
    );


#line 401 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"





__declspec(dllimport)
BOOL
__stdcall
GetVersionExA(
      LPOSVERSIONINFOA lpVersionInformation
    );

__declspec(dllimport)
BOOL
__stdcall
GetVersionExW(
      LPOSVERSIONINFOW lpVersionInformation
    );





#line 425 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformation(
      PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer,
      PDWORD ReturnedLength
    );





__declspec(dllimport)
BOOL
__stdcall
GetLogicalProcessorInformationEx(
      LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,
      PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer,
      PDWORD ReturnedLength
    );


#line 449 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"

#line 451 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#pragma endregion








#pragma region Application Family



__declspec(dllimport)
void
__stdcall
GetNativeSystemInfo(
      LPSYSTEM_INFO lpSystemInfo
    );


#line 473 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#pragma endregion

#line 476 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"




#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetProductInfo(
      DWORD dwOSMajorVersion,
      DWORD dwOSMinorVersion,
      DWORD dwSpMajorVersion,
      DWORD dwSpMinorVersion,
      PDWORD pdwReturnedProductType
    );

    
#line 497 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#pragma endregion

#line 500 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"

#pragma region Desktop Family






__declspec(dllimport)
ULONGLONG
__stdcall
VerSetConditionMask(
      ULONGLONG ConditionMask,
      ULONG TypeMask,
      UCHAR Condition
    );


#line 519 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"




__declspec(dllimport)
BOOL
__stdcall
GetOsSafeBootMode(
      PDWORD Flags
    );


#line 532 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"




__declspec(dllimport)
void
__stdcall
GetSystemTimePreciseAsFileTime(
      LPFILETIME lpSystemTimeAsFileTime
    );


__declspec(dllimport)
UINT
__stdcall
EnumSystemFirmwareTables(
      DWORD FirmwareTableProviderSignature,
      PVOID pFirmwareTableEnumBuffer,
      DWORD BufferSize
    );


__declspec(dllimport)
UINT
__stdcall
GetSystemFirmwareTable(
      DWORD FirmwareTableProviderSignature,
      DWORD FirmwareTableID,
      PVOID pFirmwareTableBuffer,
      DWORD BufferSize
    );


#line 566 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"

#line 568 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#pragma endregion







}
#line 578 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"





#pragma warning(pop)





#line 590 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"
#line 591 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"

#line 593 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\sysinfoapi.h"


#line 52 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
 











#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"













#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"



extern "C" {
#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"

#pragma region Application Family










#line 53 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#pragma endregion

#pragma region Desktop Family





#line 62 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family






#line 72 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#pragma endregion






#pragma region Desktop Family






__declspec(dllimport)
   
LPVOID
__stdcall
VirtualAlloc(
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flAllocationType,
      DWORD flProtect
    );



#line 100 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"


#line 103 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"


#line 106 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
__declspec(dllimport)
BOOL
__stdcall
VirtualFree(
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD dwFreeType
    );


__declspec(dllimport)
 
BOOL
__stdcall
VirtualProtect(
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flNewProtect,
      PDWORD lpflOldProtect
    );


#line 129 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
SIZE_T
__stdcall
VirtualQuery(
      LPCVOID lpAddress,
      PMEMORY_BASIC_INFORMATION lpBuffer,
      SIZE_T dwLength
    );


#line 146 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
   
LPVOID
__stdcall
VirtualAllocEx(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flAllocationType,
      DWORD flProtect
    );



#line 167 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"


#line 170 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"


#line 173 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"


#line 176 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
__declspec(dllimport)
BOOL
__stdcall
VirtualFreeEx(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD dwFreeType
    );


__declspec(dllimport)
 
BOOL
__stdcall
VirtualProtectEx(
      HANDLE hProcess,
      LPVOID lpAddress,
      SIZE_T dwSize,
      DWORD flNewProtect,
      PDWORD lpflOldProtect
    );


__declspec(dllimport)
SIZE_T
__stdcall
VirtualQueryEx(
      HANDLE hProcess,
      LPCVOID lpAddress,
      PMEMORY_BASIC_INFORMATION lpBuffer,
      SIZE_T dwLength
    );


__declspec(dllimport)
 
BOOL
__stdcall
ReadProcessMemory(
      HANDLE hProcess,
      LPCVOID lpBaseAddress,
      LPVOID lpBuffer,
      SIZE_T nSize,
      SIZE_T * lpNumberOfBytesRead
    );


__declspec(dllimport)
 
BOOL
__stdcall
WriteProcessMemory(
      HANDLE hProcess,
      LPVOID lpBaseAddress,
      LPCVOID lpBuffer,
      SIZE_T nSize,
      SIZE_T * lpNumberOfBytesWritten
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingW(
      HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
      DWORD flProtect,
      DWORD dwMaximumSizeHigh,
      DWORD dwMaximumSizeLow,
      LPCWSTR lpName
    );






__declspec(dllimport)
 
HANDLE
__stdcall
OpenFileMappingW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );






__declspec(dllimport)
   
LPVOID
__stdcall
MapViewOfFile(
      HANDLE hFileMappingObject,
      DWORD dwDesiredAccess,
      DWORD dwFileOffsetHigh,
      DWORD dwFileOffsetLow,
      SIZE_T dwNumberOfBytesToMap
    );


__declspec(dllimport)
   
LPVOID
__stdcall
MapViewOfFileEx(
      HANDLE hFileMappingObject,
      DWORD dwDesiredAccess,
      DWORD dwFileOffsetHigh,
      DWORD dwFileOffsetLow,
      SIZE_T dwNumberOfBytesToMap,
      LPVOID lpBaseAddress
    );


#line 298 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
FlushViewOfFile(
      LPCVOID lpBaseAddress,
      SIZE_T dwNumberOfBytesToFlush
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFile(
      LPCVOID lpBaseAddress
    );


#line 322 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#pragma endregion








#pragma region Desktop Family



__declspec(dllimport)
SIZE_T
__stdcall
GetLargePageMinimum(
    void
    );


__declspec(dllimport)
 
BOOL
__stdcall
GetProcessWorkingSetSizeEx(
      HANDLE hProcess,
      PSIZE_T lpMinimumWorkingSetSize,
      PSIZE_T lpMaximumWorkingSetSize,
      PDWORD Flags
    );


__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSizeEx(
      HANDLE hProcess,
      SIZE_T dwMinimumWorkingSetSize,
      SIZE_T dwMaximumWorkingSetSize,
      DWORD Flags
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualLock(
      LPVOID lpAddress,
      SIZE_T dwSize
    );


__declspec(dllimport)
BOOL
__stdcall
VirtualUnlock(
      LPVOID lpAddress,
      SIZE_T dwSize
    );


__declspec(dllimport)
 
UINT
__stdcall
GetWriteWatch(
      DWORD dwFlags,
      PVOID lpBaseAddress,
      SIZE_T dwRegionSize,
      PVOID * lpAddresses,
      ULONG_PTR * lpdwCount,
      LPDWORD lpdwGranularity
    );


__declspec(dllimport)
UINT
__stdcall
ResetWriteWatch(
      LPVOID lpBaseAddress,
      SIZE_T dwRegionSize
    );


#line 408 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#pragma endregion

#line 411 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"




#pragma region Desktop Family



typedef enum _MEMORY_RESOURCE_NOTIFICATION_TYPE {
    LowMemoryResourceNotification,
    HighMemoryResourceNotification
} MEMORY_RESOURCE_NOTIFICATION_TYPE;

__declspec(dllimport)
 
HANDLE
__stdcall
CreateMemoryResourceNotification(
      MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType
    );


__declspec(dllimport)
 
BOOL
__stdcall
QueryMemoryResourceNotification(
      HANDLE ResourceNotificationHandle,
      PBOOL ResourceState
    );


#line 444 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#pragma endregion

#line 447 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"




#pragma region Desktop Family









__declspec(dllimport)
 
BOOL
__stdcall
GetSystemFileCacheSize(
      PSIZE_T lpMinimumFileCacheSize,
      PSIZE_T lpMaximumFileCacheSize,
      PDWORD lpFlags
    );


__declspec(dllimport)
BOOL
__stdcall
SetSystemFileCacheSize(
      SIZE_T MinimumFileCacheSize,
      SIZE_T MaximumFileCacheSize,
      DWORD Flags
    );


#line 483 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#pragma endregion

#line 486 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"




#pragma region Desktop Family



__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingNumaW(
      HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
      DWORD flProtect,
      DWORD dwMaximumSizeHigh,
      DWORD dwMaximumSizeLow,
      LPCWSTR lpName,
      DWORD nndPreferred
    );






#line 514 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#pragma endregion

#line 517 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"




#pragma region Desktop Family



typedef struct _WIN32_MEMORY_RANGE_ENTRY {
    PVOID VirtualAddress;
    SIZE_T NumberOfBytes;
} WIN32_MEMORY_RANGE_ENTRY, *PWIN32_MEMORY_RANGE_ENTRY;

__declspec(dllimport)
BOOL
__stdcall
PrefetchVirtualMemory(
      HANDLE hProcess,
      ULONG_PTR NumberOfEntries,
      PWIN32_MEMORY_RANGE_ENTRY VirtualAddresses,
      ULONG Flags
    );


__declspec(dllimport)
BOOL
__stdcall
UnmapViewOfFileEx(
      PVOID BaseAddress,
      ULONG UnmapFlags
    );


#line 551 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingFromApp(
      HANDLE hFile,
      PSECURITY_ATTRIBUTES SecurityAttributes,
      ULONG PageProtection,
      ULONG64 MaximumSize,
      PCWSTR Name
    );


__declspec(dllimport)
   
PVOID
__stdcall
MapViewOfFileFromApp(
      HANDLE hFileMappingObject,
      ULONG DesiredAccess,
      ULONG64 FileOffset,
      SIZE_T NumberOfBytesToMap
    );


#line 583 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"
#pragma endregion

#line 586 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"







}
#line 595 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"

#line 597 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\memoryapi.h"



#line 53 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoollegacyapiset.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoollegacyapiset.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoollegacyapiset.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoollegacyapiset.h"











#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoollegacyapiset.h"


extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoollegacyapiset.h"





#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
QueueUserWorkItem(
      LPTHREAD_START_ROUTINE Function,
      PVOID Context,
      ULONG Flags
    );


__declspec(dllimport)
 
BOOL
__stdcall
UnregisterWaitEx(
      HANDLE WaitHandle,
      HANDLE CompletionEvent
    );


__declspec(dllimport)
 
HANDLE
__stdcall
CreateTimerQueue(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
CreateTimerQueueTimer(
     PHANDLE phNewTimer,
      HANDLE TimerQueue,
      WAITORTIMERCALLBACK Callback,
      PVOID Parameter,
      DWORD DueTime,
      DWORD Period,
      ULONG Flags
    );


__declspec(dllimport)
 
BOOL
__stdcall
ChangeTimerQueueTimer(
      HANDLE TimerQueue,
      HANDLE Timer,
      ULONG DueTime,
      ULONG Period
    );


__declspec(dllimport)
 
BOOL
__stdcall
DeleteTimerQueueTimer(
      HANDLE TimerQueue,
      HANDLE Timer,
      HANDLE CompletionEvent
    );


__declspec(dllimport)
 
BOOL
__stdcall
DeleteTimerQueueEx(
      HANDLE TimerQueue,
      HANDLE CompletionEvent
    );


#line 121 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoollegacyapiset.h"
#pragma endregion


}
#line 126 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoollegacyapiset.h"

#line 128 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoollegacyapiset.h"
#line 54 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoolapiset.h"
 
 









#pragma once
#line 14 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoolapiset.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoolapiset.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoolapiset.h"













#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoolapiset.h"


extern "C" {
#line 38 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoolapiset.h"





#pragma region Desktop Family



typedef
void
(__stdcall *PTP_WIN32_IO_CALLBACK)(
          PTP_CALLBACK_INSTANCE Instance,
      PVOID                 Context,
      PVOID                 Overlapped,
             ULONG                 IoResult,
             ULONG_PTR             NumberOfBytesTransferred,
          PTP_IO                Io
    );




__declspec(dllimport)
 
PTP_POOL
__stdcall
CreateThreadpool(
      PVOID reserved
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolThreadMaximum(
      PTP_POOL ptpp,
      DWORD cthrdMost
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolThreadMinimum(
      PTP_POOL ptpp,
      DWORD cthrdMic
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolStackInformation(
      PTP_POOL ptpp,
      PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
BOOL
__stdcall
QueryThreadpoolStackInformation(
      PTP_POOL ptpp,
      PTP_POOL_STACK_INFORMATION ptpsi
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpool(
      PTP_POOL ptpp
    );


__declspec(dllimport)
 
PTP_CLEANUP_GROUP
__stdcall
CreateThreadpoolCleanupGroup(
    void
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroupMembers(
      PTP_CLEANUP_GROUP ptpcg,
      BOOL fCancelPendingCallbacks,
      PVOID pvCleanupContext
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolCleanupGroup(
      PTP_CLEANUP_GROUP ptpcg
    );


__declspec(dllimport)
void
__stdcall
SetEventWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HANDLE evt
    );


__declspec(dllimport)
void
__stdcall
ReleaseSemaphoreWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HANDLE sem,
      DWORD crel
    );


__declspec(dllimport)
void
__stdcall
ReleaseMutexWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HANDLE mut
    );


__declspec(dllimport)
void
__stdcall
LeaveCriticalSectionWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      PCRITICAL_SECTION pcs
    );


__declspec(dllimport)
void
__stdcall
FreeLibraryWhenCallbackReturns(
      PTP_CALLBACK_INSTANCE pci,
      HMODULE mod
    );


__declspec(dllimport)
BOOL
__stdcall
CallbackMayRunLong(
      PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)
void
__stdcall
DisassociateCurrentThreadFromCallback(
      PTP_CALLBACK_INSTANCE pci
    );


__declspec(dllimport)
 
BOOL
__stdcall
TrySubmitThreadpoolCallback(
      PTP_SIMPLE_CALLBACK pfns,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
 
PTP_WORK
__stdcall
CreateThreadpoolWork(
      PTP_WORK_CALLBACK pfnwk,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SubmitThreadpoolWork(
      PTP_WORK pwk
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWorkCallbacks(
      PTP_WORK pwk,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWork(
      PTP_WORK pwk
    );


__declspec(dllimport)
 
PTP_TIMER
__stdcall
CreateThreadpoolTimer(
      PTP_TIMER_CALLBACK pfnti,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolTimer(
      PTP_TIMER pti,
      PFILETIME pftDueTime,
      DWORD msPeriod,
      DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
IsThreadpoolTimerSet(
      PTP_TIMER pti
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolTimerCallbacks(
      PTP_TIMER pti,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolTimer(
      PTP_TIMER pti
    );


__declspec(dllimport)
 
PTP_WAIT
__stdcall
CreateThreadpoolWait(
      PTP_WAIT_CALLBACK pfnwa,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
SetThreadpoolWait(
      PTP_WAIT pwa,
      HANDLE h,
      PFILETIME pftTimeout
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolWaitCallbacks(
      PTP_WAIT pwa,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolWait(
      PTP_WAIT pwa
    );


__declspec(dllimport)
 
PTP_IO
__stdcall
CreateThreadpoolIo(
      HANDLE fl,
      PTP_WIN32_IO_CALLBACK pfnio,
      PVOID pv,
      PTP_CALLBACK_ENVIRON pcbe
    );


__declspec(dllimport)
void
__stdcall
StartThreadpoolIo(
      PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
CancelThreadpoolIo(
      PTP_IO pio
    );


__declspec(dllimport)
void
__stdcall
WaitForThreadpoolIoCallbacks(
      PTP_IO pio,
      BOOL fCancelPendingCallbacks
    );


__declspec(dllimport)
void
__stdcall
CloseThreadpoolIo(
      PTP_IO pio
    );





__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolTimerEx(
      PTP_TIMER pti,
      PFILETIME pftDueTime,
      DWORD msPeriod,
      DWORD msWindowLength
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadpoolWaitEx(
      PTP_WAIT pwa,
      HANDLE h,
      PFILETIME pftTimeout,
        PVOID Reserved
    );


#line 406 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoolapiset.h"


#line 409 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoolapiset.h"

#line 411 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoolapiset.h"
#pragma endregion


}
#line 416 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoolapiset.h"

#line 418 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\threadpoolapiset.h"
#line 55 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\bemapiset.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\bemapiset.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\bemapiset.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\bemapiset.h"











#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\bemapiset.h"


extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\bemapiset.h"

#pragma region Desktop Family






typedef struct _CONTRACT_DESCRIPTION CONTRACT_DESCRIPTION;

typedef struct _BEM_REFERENCE BEM_REFERENCE;

typedef void (__stdcall* BEM_FREE_INTERFACE_CALLBACK)(  void* interfaceInstance);

HRESULT
__stdcall
BemCreateReference(
      const GUID & iid,
      void * interfaceInstance,
      BEM_FREE_INTERFACE_CALLBACK freeCallback,
     BEM_REFERENCE ** reference
    );


HRESULT
__stdcall
BemCreateContractFrom(
      LPCWSTR dllPath,
      const GUID & extensionId,
      const CONTRACT_DESCRIPTION * contractDescription,
      void * hostContract,
     void ** contract
    );


HRESULT
__stdcall
BemCopyReference(
      BEM_REFERENCE * reference,
     BEM_REFERENCE ** copiedReference
    );

        
void
__stdcall
BemFreeReference(
      BEM_REFERENCE * reference
    );

    
void
__stdcall
BemFreeContract(
      void * contract
    );

    
#line 93 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\bemapiset.h"

#line 95 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\bemapiset.h"
#pragma endregion


}
#line 100 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\bemapiset.h"

#line 102 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\bemapiset.h"
#line 56 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\jobapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\jobapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\jobapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\jobapi.h"











#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\jobapi.h"


extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\jobapi.h"

#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
IsProcessInJob(
      HANDLE ProcessHandle,
      HANDLE JobHandle,
      PBOOL Result
    );


#line 54 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\jobapi.h"

#line 56 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\jobapi.h"
#pragma endregion


}
#line 61 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\jobapi.h"

#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\jobapi.h"
#line 57 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wow64apiset.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wow64apiset.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wow64apiset.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wow64apiset.h"











#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wow64apiset.h"


extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wow64apiset.h"

#pragma region Desktop Family









__declspec(dllimport)
BOOL
__stdcall
Wow64DisableWow64FsRedirection(
      PVOID * OldValue
    );


__declspec(dllimport)
BOOL
__stdcall
Wow64RevertWow64FsRedirection(
      PVOID OlValue
    );


#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wow64apiset.h"

#line 65 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wow64apiset.h"




__declspec(dllimport)
BOOL
__stdcall
IsWow64Process(
      HANDLE hProcess,
      PBOOL Wow64Process
    );


#line 79 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wow64apiset.h"

#line 81 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wow64apiset.h"
#pragma endregion


}
#line 86 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wow64apiset.h"

#line 88 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wow64apiset.h"
#line 58 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"
 











#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"













#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"


extern "C" {
#line 39 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

#pragma region Desktop Family















typedef struct tagENUMUILANG{
    ULONG  NumOfEnumUILang;   
    ULONG  SizeOfEnumUIBuffer;     
    LANGID *pEnumUIBuffer;   
}ENUMUILANG, *PENUMUILANG;


typedef BOOL (__stdcall* ENUMRESLANGPROCA)(
      HMODULE hModule,
      LPCSTR lpType,
      LPCSTR lpName,
      WORD wLanguage,
      LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESLANGPROCW)(
      HMODULE hModule,
      LPCWSTR lpType,
      LPCWSTR lpName,
      WORD wLanguage,
      LONG_PTR lParam);




#line 80 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

typedef BOOL (__stdcall* ENUMRESNAMEPROCA)(
      HMODULE hModule,
      LPCSTR lpType,
      LPSTR lpName,
      LONG_PTR lParam);
typedef BOOL (__stdcall* ENUMRESNAMEPROCW)(
      HMODULE hModule,
      LPCWSTR lpType,
      LPWSTR lpName,
      LONG_PTR lParam);




#line 96 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

typedef BOOL (__stdcall* ENUMRESTYPEPROCA)(
      HMODULE hModule,
      LPSTR lpType,
      LONG_PTR lParam
    );
typedef BOOL (__stdcall* ENUMRESTYPEPROCW)(
      HMODULE hModule,
      LPWSTR lpType,
      LONG_PTR lParam
    );




#line 112 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"






















#line 135 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

#line 137 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"
#pragma endregion






#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
DisableThreadLibraryCalls(
      HMODULE hLibModule
    );


#line 157 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceExW(
      HMODULE hModule,
      LPCWSTR lpType,
      LPCWSTR lpName,
      WORD wLanguage
    );






#line 180 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
int
__stdcall
FindStringOrdinal(
      DWORD dwFindStringOrdinalFlags,
      LPCWSTR lpStringSource,
      int cchSource,
      LPCWSTR lpStringValue,
      int cchValue,
      BOOL bIgnoreCase
    );

    
#line 203 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

__declspec(dllimport)
BOOL
__stdcall
FreeLibrary(
      HMODULE hLibModule
    );


#line 213 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
FreeLibraryAndExitThread(
      HMODULE hLibModule,
      DWORD dwExitCode
    );


__declspec(dllimport)
BOOL
__stdcall
FreeResource(
      HGLOBAL hResData
    );


__declspec(dllimport)
 
 
DWORD
__stdcall
GetModuleFileNameA(
      HMODULE hModule,
      LPSTR lpFilename,
      DWORD nSize
    );

__declspec(dllimport)
 
 
DWORD
__stdcall
GetModuleFileNameW(
      HMODULE hModule,
      LPWSTR lpFilename,
      DWORD nSize
    );





#line 264 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleA(
      LPCSTR lpModuleName
    );

__declspec(dllimport)


HMODULE
__stdcall
GetModuleHandleW(
      LPCWSTR lpModuleName
    );





#line 288 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"








typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXA)(
             DWORD        dwFlags,
         LPCSTR     lpModuleName,
     HMODULE*    phModule
    );
typedef
BOOL
(__stdcall*
PGET_MODULE_HANDLE_EXW)(
             DWORD        dwFlags,
         LPCWSTR     lpModuleName,
     HMODULE*    phModule
    );




#line 317 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExA(
      DWORD dwFlags,
      LPCSTR lpModuleName,
      HMODULE * phModule
    );

__declspec(dllimport)
BOOL
__stdcall
GetModuleHandleExW(
      DWORD dwFlags,
      LPCWSTR lpModuleName,
      HMODULE * phModule
    );





#line 341 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

#line 343 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

#line 345 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
FARPROC
__stdcall
GetProcAddress(
      HMODULE hModule,
      LPCSTR lpProcName
    );


#line 361 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryExA(
      LPCSTR lpLibFileName,
      HANDLE hFile,
      DWORD dwFlags
    );

__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryExW(
      LPCWSTR lpLibFileName,
      HANDLE hFile,
      DWORD dwFlags
    );





#line 392 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"















__declspec(dllimport)
 
HGLOBAL
__stdcall
LoadResource(
      HMODULE hModule,
      HRSRC hResInfo
    );


#line 418 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"
#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
int
__stdcall
LoadStringA(
      HINSTANCE hInstance,
      UINT uID,
      LPSTR lpBuffer,
      int cchBufferMax
    );

__declspec(dllimport)
int
__stdcall
LoadStringW(
      HINSTANCE hInstance,
      UINT uID,
      LPWSTR lpBuffer,
      int cchBufferMax
    );





#line 451 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

#line 453 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"
#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
LPVOID
__stdcall
LockResource(
      HGLOBAL hResData
    );


__declspec(dllimport)
DWORD
__stdcall
SizeofResource(
      HMODULE hModule,
      HRSRC hResInfo
    );


#line 479 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"
#pragma endregion








#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExA(
      HMODULE hModule,
      LPCSTR lpType,
      LPCSTR lpName,
      ENUMRESLANGPROCA lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesExW(
      HMODULE hModule,
      LPCWSTR lpType,
      LPCWSTR lpName,
      ENUMRESLANGPROCW lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );





#line 523 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExA(
      HMODULE hModule,
      LPCSTR lpType,
      ENUMRESNAMEPROCA lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesExW(
      HMODULE hModule,
      LPCWSTR lpType,
      ENUMRESNAMEPROCW lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );





#line 553 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExA(
      HMODULE hModule,
      ENUMRESTYPEPROCA lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesExW(
      HMODULE hModule,
      ENUMRESTYPEPROCW lpEnumFunc,
      LONG_PTR lParam,
    DWORD dwFlags,
    LANGID LangId
    );





#line 581 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

__declspec(dllimport)
BOOL
__stdcall
QueryOptionalDelayLoadedAPI(
      HMODULE CallerModule,
      LPCSTR lpDllName,
      LPCSTR lpProcName,
      DWORD Reserved
    );


#line 594 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"
#pragma endregion

#line 597 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"



#pragma region Desktop Family



typedef PVOID DLL_DIRECTORY_COOKIE, *PDLL_DIRECTORY_COOKIE;

__declspec(dllimport)
DLL_DIRECTORY_COOKIE
__stdcall
AddDllDirectory(
      PCWSTR NewDirectory
    );


__declspec(dllimport)
BOOL
__stdcall
RemoveDllDirectory(
      DLL_DIRECTORY_COOKIE Cookie
    );


__declspec(dllimport)
BOOL
__stdcall
SetDefaultDllDirectories(
      DWORD DirectoryFlags
    );


#line 631 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"
#pragma endregion





}
#line 639 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"

#line 641 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\libloaderapi.h"



#line 59 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"
 
 










#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"













#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"


extern "C" {
#line 39 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"



#pragma region Desktop Family










__declspec(dllimport)
BOOL
__stdcall
AccessCheck(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      PGENERIC_MAPPING GenericMapping,
      PPRIVILEGE_SET PrivilegeSet,
      LPDWORD PrivilegeSetLength,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPWSTR ObjectTypeName,
      LPWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      DWORD DesiredAccess,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByType(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID PrincipalSelfSid,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      PPRIVILEGE_SET PrivilegeSet,
      LPDWORD PrivilegeSetLength,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultList(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID PrincipalSelfSid,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      PPRIVILEGE_SET PrivilegeSet,
      LPDWORD PrivilegeSetLength,
      LPDWORD GrantedAccessList,
      LPDWORD AccessStatusList
    );


__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPCWSTR ObjectTypeName,
      LPCWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      DWORD DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccess,
      LPBOOL AccessStatus,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPCWSTR ObjectTypeName,
      LPCWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      DWORD DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccessList,
      LPDWORD AccessStatusList,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      HANDLE ClientToken,
      LPCWSTR ObjectTypeName,
      LPCWSTR ObjectName,
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
      DWORD DesiredAccess,
      AUDIT_EVENT_TYPE AuditType,
      DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
      DWORD ObjectTypeListLength,
      PGENERIC_MAPPING GenericMapping,
      BOOL ObjectCreation,
      LPDWORD GrantedAccessList,
      LPDWORD AccessStatusList,
      LPBOOL pfGenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedAceEx(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessAllowedObjectAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      GUID * ObjectTypeGuid,
      GUID * InheritedObjectTypeGuid,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedAceEx(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAccessDeniedObjectAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      GUID * ObjectTypeGuid,
      GUID * InheritedObjectTypeGuid,
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AddAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD dwStartingAceIndex,
      LPVOID pAceList,
      DWORD nAceListLength
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD dwAccessMask,
      PSID pSid,
      BOOL bAuditSuccess,
      BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessAceEx(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD dwAccessMask,
      PSID pSid,
      BOOL bAuditSuccess,
      BOOL bAuditFailure
    );


__declspec(dllimport)
BOOL
__stdcall
AddAuditAccessObjectAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      GUID * ObjectTypeGuid,
      GUID * InheritedObjectTypeGuid,
      PSID pSid,
      BOOL bAuditSuccess,
      BOOL bAuditFailure
    );





__declspec(dllimport)
BOOL
__stdcall
AddMandatoryAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD MandatoryPolicy,
      PSID pLabelSid
    );


#line 353 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"






__declspec(dllimport)
BOOL
__stdcall
AddResourceAttributeAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid,
      PCLAIM_SECURITY_ATTRIBUTES_INFORMATION pAttributeInfo,
      PDWORD pReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AddScopedPolicyIDAce(
      PACL pAcl,
      DWORD dwAceRevision,
      DWORD AceFlags,
      DWORD AccessMask,
      PSID pSid
    );


#line 386 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"



__declspec(dllimport)
BOOL
__stdcall
AdjustTokenGroups(
      HANDLE TokenHandle,
      BOOL ResetToDefault,
      PTOKEN_GROUPS NewState,
      DWORD BufferLength,
      PTOKEN_GROUPS PreviousState,
      PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AdjustTokenPrivileges(
      HANDLE TokenHandle,
      BOOL DisableAllPrivileges,
      PTOKEN_PRIVILEGES NewState,
      DWORD BufferLength,
      PTOKEN_PRIVILEGES PreviousState,
      PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateAndInitializeSid(
      PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
      BYTE nSubAuthorityCount,
      DWORD nSubAuthority0,
      DWORD nSubAuthority1,
      DWORD nSubAuthority2,
      DWORD nSubAuthority3,
      DWORD nSubAuthority4,
      DWORD nSubAuthority5,
      DWORD nSubAuthority6,
      DWORD nSubAuthority7,
     PSID * pSid
    );


__declspec(dllimport)
BOOL
__stdcall
AllocateLocallyUniqueId(
      PLUID Luid
    );


__declspec(dllimport)
BOOL
__stdcall
AreAllAccessesGranted(
      DWORD GrantedAccess,
      DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
AreAnyAccessesGranted(
      DWORD GrantedAccess,
      DWORD DesiredAccess
    );


__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembership(
      HANDLE TokenHandle,
      PSID SidToCheck,
      PBOOL IsMember
    );







__declspec(dllimport)
BOOL
__stdcall
CheckTokenCapability(
      HANDLE TokenHandle,
      PSID CapabilitySidToCheck,
      PBOOL HasCapability
    );


__declspec(dllimport)
BOOL
__stdcall
GetAppContainerAce(
      PACL Acl,
      DWORD StartingAceIndex,
     PVOID * AppContainerAce,
      DWORD * AppContainerAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
CheckTokenMembershipEx(
      HANDLE TokenHandle,
      PSID SidToCheck,
      DWORD Flags,
      PBOOL IsMember
    );


#line 507 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"



__declspec(dllimport)
BOOL
__stdcall
ConvertToAutoInheritPrivateObjectSecurity(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,
     PSECURITY_DESCRIPTOR * NewSecurityDescriptor,
      GUID * ObjectType,
      BOOLEAN IsDirectoryObject,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CopySid(
      DWORD nDestinationSidLength,
      PSID pDestinationSid,
      PSID pSourceSid
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurity(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CreatorDescriptor,
     PSECURITY_DESCRIPTOR * NewDescriptor,
      BOOL IsDirectoryObject,
      HANDLE Token,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityEx(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CreatorDescriptor,
     PSECURITY_DESCRIPTOR * NewDescriptor,
      GUID * ObjectType,
      BOOL IsContainerObject,
      ULONG AutoInheritFlags,
      HANDLE Token,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreatePrivateObjectSecurityWithMultipleInheritance(
      PSECURITY_DESCRIPTOR ParentDescriptor,
      PSECURITY_DESCRIPTOR CreatorDescriptor,
     PSECURITY_DESCRIPTOR * NewDescriptor,
      GUID ** ObjectTypes,
      ULONG GuidCount,
      BOOL IsContainerObject,
      ULONG AutoInheritFlags,
      HANDLE Token,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
CreateRestrictedToken(
      HANDLE ExistingTokenHandle,
      DWORD Flags,
      DWORD DisableSidCount,
      PSID_AND_ATTRIBUTES SidsToDisable,
      DWORD DeletePrivilegeCount,
      PLUID_AND_ATTRIBUTES PrivilegesToDelete,
      DWORD RestrictedSidCount,
      PSID_AND_ATTRIBUTES SidsToRestrict,
     PHANDLE NewTokenHandle
    );





__declspec(dllimport)
 
BOOL
__stdcall
CreateWellKnownSid(
      WELL_KNOWN_SID_TYPE WellKnownSidType,
      PSID DomainSid,
      PSID pSid,
      DWORD * cbSid
    );


__declspec(dllimport)
 
BOOL
__stdcall
EqualDomainSid(
      PSID pSid1,
      PSID pSid2,
      BOOL * pfEqual
    );


#line 620 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteAce(
      PACL pAcl,
      DWORD dwAceIndex
    );


__declspec(dllimport)
BOOL
__stdcall
DestroyPrivateObjectSecurity(
        PSECURITY_DESCRIPTOR * ObjectDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateToken(
      HANDLE ExistingTokenHandle,
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
     PHANDLE DuplicateTokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
DuplicateTokenEx(
      HANDLE hExistingToken,
      DWORD dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpTokenAttributes,
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,
      TOKEN_TYPE TokenType,
     PHANDLE phNewToken
    );


__declspec(dllimport)
BOOL
__stdcall
EqualPrefixSid(
      PSID pSid1,
      PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
EqualSid(
      PSID pSid1,
      PSID pSid2
    );


__declspec(dllimport)
BOOL
__stdcall
FindFirstFreeAce(
      PACL pAcl,
     LPVOID * pAce
    );


__declspec(dllimport)
PVOID
__stdcall
FreeSid(
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetAce(
      PACL pAcl,
      DWORD dwAceIndex,
     LPVOID * pAce
    );


__declspec(dllimport)
BOOL
__stdcall
GetAclInformation(
      PACL pAcl,
      LPVOID pAclInformation,
      DWORD nAclInformationLength,
      ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityW(
      LPCWSTR lpFileName,
      SECURITY_INFORMATION RequestedInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      DWORD nLength,
      LPDWORD lpnLengthNeeded
    );






__declspec(dllimport)
BOOL
__stdcall
GetKernelObjectSecurity(
      HANDLE Handle,
      SECURITY_INFORMATION RequestedInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      DWORD nLength,
      LPDWORD lpnLengthNeeded
    );


__declspec(dllimport)
DWORD
__stdcall
GetLengthSid(
      PSID pSid
    );


__declspec(dllimport)
 
BOOL
__stdcall
GetPrivateObjectSecurity(
      PSECURITY_DESCRIPTOR ObjectDescriptor,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ResultantDescriptor,
      DWORD DescriptorLength,
      PDWORD ReturnLength
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorControl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSECURITY_DESCRIPTOR_CONTROL pControl,
      LPDWORD lpdwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorDacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      LPBOOL lpbDaclPresent,
     PACL * pDacl,
      LPBOOL lpbDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorGroup(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
     PSID * pGroup,
      LPBOOL lpbGroupDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorLength(
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorOwner(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
     PSID * pOwner,
      LPBOOL lpbOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
GetSecurityDescriptorRMControl(
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
GetSecurityDescriptorSacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      LPBOOL lpbSaclPresent,
     PACL * pSacl,
      LPBOOL lpbSaclDefaulted
    );


__declspec(dllimport)
PSID_IDENTIFIER_AUTHORITY
__stdcall
GetSidIdentifierAuthority(
      PSID pSid
    );


__declspec(dllimport)
DWORD
__stdcall
GetSidLengthRequired(
      UCHAR nSubAuthorityCount
    );


__declspec(dllimport)
PDWORD
__stdcall
GetSidSubAuthority(
      PSID pSid,
      DWORD nSubAuthority
    );


__declspec(dllimport)
PUCHAR
__stdcall
GetSidSubAuthorityCount(
      PSID pSid
    );


__declspec(dllimport)
BOOL
__stdcall
GetTokenInformation(
      HANDLE TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      LPVOID TokenInformation,
      DWORD TokenInformationLength,
      PDWORD ReturnLength
    );





__declspec(dllimport)
 
BOOL
__stdcall
GetWindowsAccountDomainSid(
      PSID pSid,
      PSID pDomainSid,
      DWORD * cbDomainSid
    );


#line 895 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"

__declspec(dllimport)
BOOL
__stdcall
ImpersonateAnonymousToken(
      HANDLE ThreadHandle
    );


 
__declspec(dllimport)
BOOL
__stdcall
ImpersonateLoggedOnUser(
      HANDLE hToken
    );


 
__declspec(dllimport)
BOOL
__stdcall
ImpersonateSelf(
      SECURITY_IMPERSONATION_LEVEL ImpersonationLevel
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeAcl(
      PACL pAcl,
      DWORD nAclLength,
      DWORD dwAclRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSecurityDescriptor(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      DWORD dwRevision
    );


__declspec(dllimport)
BOOL
__stdcall
InitializeSid(
      PSID Sid,
      PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,
      BYTE nSubAuthorityCount
    );


__declspec(dllimport)
BOOL
__stdcall
IsTokenRestricted(
      HANDLE TokenHandle
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidAcl(
      PACL pAcl
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSecurityDescriptor(
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
IsValidSid(
      PSID pSid
    );





__declspec(dllimport)
BOOL
__stdcall
IsWellKnownSid(
      PSID pSid,
      WELL_KNOWN_SID_TYPE WellKnownSidType
    );


#line 996 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"

__declspec(dllimport)
 
BOOL
__stdcall
MakeAbsoluteSD(
      PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
      PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
      LPDWORD lpdwAbsoluteSecurityDescriptorSize,
      PACL pDacl,
      LPDWORD lpdwDaclSize,
      PACL pSacl,
      LPDWORD lpdwSaclSize,
      PSID pOwner,
      LPDWORD lpdwOwnerSize,
      PSID pPrimaryGroup,
      LPDWORD lpdwPrimaryGroupSize
    );


__declspec(dllimport)
 
BOOL
__stdcall
MakeSelfRelativeSD(
      PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,
      PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,
      LPDWORD lpdwBufferLength
    );


__declspec(dllimport)
void
__stdcall
MapGenericMask(
      PDWORD AccessMask,
      PGENERIC_MAPPING GenericMapping
    );


__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      LPWSTR ObjectTypeName,
      LPWSTR ObjectName,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      DWORD GrantedAccess,
      PPRIVILEGE_SET Privileges,
      BOOL ObjectCreation,
      BOOL AccessGranted,
      LPBOOL GenerateOnClose
    );






__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmW(
      LPCWSTR SubsystemName,
      LPVOID HandleId,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );






__declspec(dllimport)
BOOL
__stdcall
PrivilegeCheck(
      HANDLE ClientToken,
      PPRIVILEGE_SET RequiredPrivileges,
      LPBOOL pfResult
    );


__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmW(
      LPCWSTR SubsystemName,
      LPCWSTR ServiceName,
      HANDLE ClientToken,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );









__declspec(dllimport)
void
__stdcall
QuerySecurityAccessMask(
      SECURITY_INFORMATION SecurityInformation,
      LPDWORD DesiredAccess
    );


#line 1143 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"

__declspec(dllimport)
BOOL
__stdcall
RevertToSelf(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
SetAclInformation(
      PACL pAcl,
      LPVOID pAclInformation,
      DWORD nAclInformationLength,
      ACL_INFORMATION_CLASS dwAclInformationClass
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityW(
      LPCWSTR lpFileName,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );





__declspec(dllimport)
BOOL
__stdcall
SetKernelObjectSecurity(
      HANDLE Handle,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR SecurityDescriptor
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurity(
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ModificationDescriptor,
      PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
      PGENERIC_MAPPING GenericMapping,
      HANDLE Token
    );


__declspec(dllimport)
BOOL
__stdcall
SetPrivateObjectSecurityEx(
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR ModificationDescriptor,
      PSECURITY_DESCRIPTOR * ObjectsSecurityDescriptor,
      ULONG AutoInheritFlags,
      PGENERIC_MAPPING GenericMapping,
      HANDLE Token
    );





__declspec(dllimport)
void
__stdcall
SetSecurityAccessMask(
      SECURITY_INFORMATION SecurityInformation,
      LPDWORD DesiredAccess
    );


#line 1224 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorControl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,
      SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorDacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      BOOL bDaclPresent,
      PACL pDacl,
      BOOL bDaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorGroup(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID pGroup,
      BOOL bGroupDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorOwner(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      PSID pOwner,
      BOOL bOwnerDefaulted
    );


__declspec(dllimport)
DWORD
__stdcall
SetSecurityDescriptorRMControl(
      PSECURITY_DESCRIPTOR SecurityDescriptor,
      PUCHAR RMControl
    );


__declspec(dllimport)
BOOL
__stdcall
SetSecurityDescriptorSacl(
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      BOOL bSaclPresent,
      PACL pSacl,
      BOOL bSaclDefaulted
    );


__declspec(dllimport)
BOOL
__stdcall
SetTokenInformation(
      HANDLE TokenHandle,
      TOKEN_INFORMATION_CLASS TokenInformationClass,
      LPVOID TokenInformation,
      DWORD TokenInformationLength
    );







__declspec(dllimport)
BOOL
__stdcall
SetCachedSigningLevel(
      PHANDLE SourceFiles,
      ULONG SourceFileCount,
      ULONG Flags,
      HANDLE TargetFile
    );


__declspec(dllimport)
BOOL
__stdcall
GetCachedSigningLevel(
      HANDLE File,
      PULONG Flags,
      PULONG SigningLevel,
      PUCHAR Thumbprint,
      PULONG ThumbprintSize,
      PULONG ThumbprintAlgorithm
    );

    
#line 1327 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"

#line 1329 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"
#pragma endregion




}
#line 1336 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"

#line 1338 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securitybaseapi.h"

#line 60 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namespaceapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namespaceapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namespaceapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namespaceapi.h"











#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namespaceapi.h"


extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namespaceapi.h"

#pragma region Desktop Family





__declspec(dllimport)
HANDLE
__stdcall
CreatePrivateNamespaceW(
      LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
      LPVOID lpBoundaryDescriptor,
      LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
HANDLE
__stdcall
OpenPrivateNamespaceW(
      LPVOID lpBoundaryDescriptor,
      LPCWSTR lpAliasPrefix
    );


__declspec(dllimport)
BOOLEAN
__stdcall
ClosePrivateNamespace(
      HANDLE Handle,
      ULONG Flags
    );


__declspec(dllimport)
HANDLE
__stdcall
CreateBoundaryDescriptorW(
      LPCWSTR Name,
      ULONG Flags
    );


__declspec(dllimport)
BOOL
__stdcall
AddSIDToBoundaryDescriptor(
      HANDLE * BoundaryDescriptor,
      PSID RequiredSid
    );


__declspec(dllimport)
void
__stdcall
DeleteBoundaryDescriptor(
      HANDLE BoundaryDescriptor
    );


#line 97 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namespaceapi.h"
#pragma endregion


}
#line 102 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namespaceapi.h"

#line 104 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\namespaceapi.h"
#line 61 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\systemtopologyapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\systemtopologyapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\systemtopologyapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\systemtopologyapi.h"











#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\systemtopologyapi.h"


extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\systemtopologyapi.h"

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
GetNumaHighestNodeNumber(
      PULONG HighestNodeNumber
    );





__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMaskEx(
      USHORT Node,
      PGROUP_AFFINITY ProcessorMask
    );


#line 61 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\systemtopologyapi.h"

#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\systemtopologyapi.h"
#pragma endregion


}
#line 68 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\systemtopologyapi.h"

#line 70 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\systemtopologyapi.h"
#line 62 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processtopologyapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processtopologyapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processtopologyapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processtopologyapi.h"











#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processtopologyapi.h"


extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processtopologyapi.h"

#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
GetProcessGroupAffinity(
      HANDLE hProcess,
      PUSHORT GroupCount,
      PUSHORT GroupArray
    );



__declspec(dllimport)
BOOL
__stdcall
SetProcessGroupAffinity(
      HANDLE hProcess,
      const GROUP_AFFINITY * GroupAffinity,
      PGROUP_AFFINITY PreviousGroupAffinity
    );


__declspec(dllimport)
BOOL
__stdcall
GetThreadGroupAffinity(
      HANDLE hThread,
      PGROUP_AFFINITY GroupAffinity
    );


__declspec(dllimport)
BOOL
__stdcall
SetThreadGroupAffinity(
      HANDLE hThread,
      const GROUP_AFFINITY * GroupAffinity,
      PGROUP_AFFINITY PreviousGroupAffinity
    );


#line 84 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processtopologyapi.h"

#line 86 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processtopologyapi.h"
#pragma endregion


}
#line 91 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processtopologyapi.h"

#line 93 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\processtopologyapi.h"
#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securityappcontainer.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securityappcontainer.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securityappcontainer.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securityappcontainer.h"













#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securityappcontainer.h"

#pragma region Desktop Family




extern "C" {
#line 41 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securityappcontainer.h"








BOOL
GetAppContainerNamedObjectPath(
      HANDLE Token,
      PSID AppContainerSid,
      ULONG ObjectPathLength,
      LPWSTR ObjectPath,
      PULONG ReturnLength
    );


#line 60 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securityappcontainer.h"


}
#line 64 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securityappcontainer.h"

#line 66 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securityappcontainer.h"
#pragma endregion

#line 69 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\securityappcontainer.h"
#line 64 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\realtimeapiset.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\realtimeapiset.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\realtimeapiset.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\realtimeapiset.h"










#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\realtimeapiset.h"


extern "C" {
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\realtimeapiset.h"

#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
QueryThreadCycleTime(
      HANDLE ThreadHandle,
      PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryProcessCycleTime(
      HANDLE ProcessHandle,
      PULONG64 CycleTime
    );


__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTime(
      PULONG BufferLength,
      PULONG64 ProcessorIdleCycleTime
    );


#line 70 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\realtimeapiset.h"




__declspec(dllimport)
BOOL
__stdcall
QueryIdleProcessorCycleTimeEx(
      USHORT Group,
      PULONG BufferLength,
      PULONG64 ProcessorIdleCycleTime
    );

    
#line 85 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\realtimeapiset.h"

#line 87 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\realtimeapiset.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
BOOL
__stdcall
QueryUnbiasedInterruptTime(
      PULONGLONG UnbiasedTime
    );


#line 105 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\realtimeapiset.h"

#line 107 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\realtimeapiset.h"
#pragma endregion


}
#line 112 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\realtimeapiset.h"

#line 114 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\realtimeapiset.h"
#line 65 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


extern "C" {
#line 69 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#pragma region Application Family












#line 84 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




#line 92 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family






















































#line 150 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




































#line 187 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"














#line 202 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 204 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"











#line 216 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 218 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"






























































typedef void (__stdcall *PFIBER_START_ROUTINE)(
    LPVOID lpFiberParameter
    );
typedef PFIBER_START_ROUTINE LPFIBER_START_ROUTINE;
#line 285 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"









typedef PLDT_ENTRY LPLDT_ENTRY;


#line 298 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





































































































typedef struct _COMMPROP {
    WORD wPacketLength;
    WORD wPacketVersion;
    DWORD dwServiceMask;
    DWORD dwReserved1;
    DWORD dwMaxTxQueue;
    DWORD dwMaxRxQueue;
    DWORD dwMaxBaud;
    DWORD dwProvSubType;
    DWORD dwProvCapabilities;
    DWORD dwSettableParams;
    DWORD dwSettableBaud;
    WORD wSettableData;
    WORD wSettableStopParity;
    DWORD dwCurrentTxQueue;
    DWORD dwCurrentRxQueue;
    DWORD dwProvSpec1;
    DWORD dwProvSpec2;
    WCHAR wcProvChar[1];
} COMMPROP,*LPCOMMPROP;







typedef struct _COMSTAT {
    DWORD fCtsHold : 1;
    DWORD fDsrHold : 1;
    DWORD fRlsdHold : 1;
    DWORD fXoffHold : 1;
    DWORD fXoffSent : 1;
    DWORD fEof : 1;
    DWORD fTxim : 1;
    DWORD fReserved : 25;
    DWORD cbInQue;
    DWORD cbOutQue;
} COMSTAT, *LPCOMSTAT;
















typedef struct _DCB {
    DWORD DCBlength;      
    DWORD BaudRate;       
    DWORD fBinary: 1;     
    DWORD fParity: 1;     
    DWORD fOutxCtsFlow:1; 
    DWORD fOutxDsrFlow:1; 
    DWORD fDtrControl:2;  
    DWORD fDsrSensitivity:1; 
    DWORD fTXContinueOnXoff: 1; 
    DWORD fOutX: 1;       
    DWORD fInX: 1;        
    DWORD fErrorChar: 1;  
    DWORD fNull: 1;       
    DWORD fRtsControl:2;  
    DWORD fAbortOnError:1; 
    DWORD fDummy2:17;     
    WORD wReserved;       
    WORD XonLim;          
    WORD XoffLim;         
    BYTE ByteSize;        
    BYTE Parity;          
    BYTE StopBits;        
    char XonChar;         
    char XoffChar;        
    char ErrorChar;       
    char EofChar;         
    char EvtChar;         
    WORD wReserved1;      
} DCB, *LPDCB;

typedef struct _COMMTIMEOUTS {
    DWORD ReadIntervalTimeout;          
    DWORD ReadTotalTimeoutMultiplier;   
    DWORD ReadTotalTimeoutConstant;     
    DWORD WriteTotalTimeoutMultiplier;  
    DWORD WriteTotalTimeoutConstant;    
} COMMTIMEOUTS,*LPCOMMTIMEOUTS;

typedef struct _COMMCONFIG {
    DWORD dwSize;               
    WORD wVersion;              
    WORD wReserved;             
    DCB dcb;                    
    DWORD dwProviderSubType;    

    DWORD dwProviderOffset;     

    DWORD dwProviderSize;       
    WCHAR wcProviderData[1];    
} COMMCONFIG,*LPCOMMCONFIG;




































typedef struct _MEMORYSTATUS {
    DWORD dwLength;
    DWORD dwMemoryLoad;
    SIZE_T dwTotalPhys;
    SIZE_T dwAvailPhys;
    SIZE_T dwTotalPageFile;
    SIZE_T dwAvailPageFile;
    SIZE_T dwTotalVirtual;
    SIZE_T dwAvailVirtual;
} MEMORYSTATUS, *LPMEMORYSTATUS;



























































































typedef struct _JIT_DEBUG_INFO {
    DWORD dwSize;
    DWORD dwProcessorArchitecture;
    DWORD dwThreadID;
    DWORD dwReserved0;
    ULONG64 lpExceptionAddress;
    ULONG64 lpExceptionRecord;
    ULONG64 lpContextRecord;
} JIT_DEBUG_INFO, *LPJIT_DEBUG_INFO;

typedef JIT_DEBUG_INFO JIT_DEBUG_INFO32, *LPJIT_DEBUG_INFO32;
typedef JIT_DEBUG_INFO JIT_DEBUG_INFO64, *LPJIT_DEBUG_INFO64;


typedef PEXCEPTION_RECORD LPEXCEPTION_RECORD;
typedef PEXCEPTION_POINTERS LPEXCEPTION_POINTERS;
#line 659 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"














#line 674 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





































































































































































































typedef struct _OFSTRUCT {
    BYTE cBytes;
    BYTE fFixedDisk;
    WORD nErrCode;
    WORD Reserved1;
    WORD Reserved2;
    CHAR szPathName[128];
} OFSTRUCT, *LPOFSTRUCT, *POFSTRUCT;






















































































































































































































































































































































































































































































































































































































































































































































































































#line 1670 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




























































































































































































#line 1859 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


























































































































#line 1982 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





__forceinline
LONGLONG
InterlockedAnd64 (
      LONGLONG volatile *Destination,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old & Value,
                                          Old) != Old);

    return Old;
}

__forceinline
LONGLONG
InterlockedOr64 (
      LONGLONG volatile *Destination,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old | Value,
                                          Old) != Old);

    return Old;
}

__forceinline
LONGLONG
InterlockedXor64 (
      LONGLONG volatile *Destination,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Destination;
    } while (InterlockedCompareExchange64(Destination,
                                          Old ^ Value,
                                          Old) != Old);

    return Old;
}

__forceinline
LONGLONG
InterlockedIncrement64 (
      LONGLONG volatile *Addend
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old + 1,
                                          Old) != Old);

    return Old + 1;
}

__forceinline
LONGLONG
InterlockedDecrement64 (
      LONGLONG volatile *Addend
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old - 1,
                                          Old) != Old);

    return Old - 1;
}

__forceinline
LONGLONG
InterlockedExchange64 (
      LONGLONG volatile *Target,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Target;
    } while (InterlockedCompareExchange64(Target,
                                          Value,
                                          Old) != Old);

    return Old;
}

__forceinline
LONGLONG
InterlockedExchangeAdd64(
      LONGLONG volatile *Addend,
         LONGLONG Value
    )
{
    LONGLONG Old;

    do {
        Old = *Addend;
    } while (InterlockedCompareExchange64(Addend,
                                          Old + Value,
                                          Old) != Old);

    return Old;
}

#line 2112 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


#line 2115 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"







__forceinline
  PVOID

__cdecl
#line 2127 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
__InlineInterlockedCompareExchangePointer (
      
#line 2131 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
             PVOID volatile *Destination,
      PVOID ExChange,
      PVOID Comperand
    )
{
    return((PVOID)(LONG_PTR)InterlockedCompareExchange((LONG volatile *)Destination, (LONG)(LONG_PTR)ExChange, (LONG)(LONG_PTR)Comperand));
}








#line 2147 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"














#line 2162 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 2164 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 2166 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"






#line 2173 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


int



#line 2183 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
__stdcall
#line 2185 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


#line 2188 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
WinMain (
      HINSTANCE hInstance,
      HINSTANCE hPrevInstance,
      LPSTR lpCmdLine,
      int nShowCmd
    );

int


#line 2199 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
__stdcall
#line 2201 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
wWinMain(
      HINSTANCE hInstance,
      HINSTANCE hPrevInstance,
      LPWSTR lpCmdLine,
      int nShowCmd
    );

__declspec(dllimport)
 
 
HGLOBAL
__stdcall
GlobalAlloc(
      UINT uFlags,
      SIZE_T dwBytes
    );

__declspec(dllimport)
 
 
HGLOBAL
__stdcall
GlobalReAlloc (
      HGLOBAL hMem,
      SIZE_T dwBytes,
      UINT uFlags
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalSize (
      HGLOBAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
GlobalFlags (
      HGLOBAL hMem
    );

__declspec(dllimport)
 
LPVOID
__stdcall
GlobalLock (
      HGLOBAL hMem
    );

__declspec(dllimport)
 
HGLOBAL
__stdcall
GlobalHandle (
      LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnlock(
      HGLOBAL hMem
    );

__declspec(dllimport)
 
HGLOBAL
__stdcall
GlobalFree(
      HGLOBAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
GlobalCompact(
      DWORD dwMinFree
    );

__declspec(dllimport)
void
__stdcall
GlobalFix(
      HGLOBAL hMem
    );

__declspec(dllimport)
void
__stdcall
GlobalUnfix(
      HGLOBAL hMem
    );

__declspec(dllimport)
LPVOID
__stdcall
GlobalWire(
      HGLOBAL hMem
    );

__declspec(dllimport)
BOOL
__stdcall
GlobalUnWire(
      HGLOBAL hMem
    );

 
__declspec(dllimport)
void
__stdcall
GlobalMemoryStatus(
      LPMEMORYSTATUS lpBuffer
    );

__declspec(dllimport)
 
 
HLOCAL
__stdcall
LocalAlloc(
      UINT uFlags,
      SIZE_T uBytes
    );

__declspec(dllimport)
 
 
HLOCAL
__stdcall
LocalReAlloc(
      HLOCAL hMem,
      SIZE_T uBytes,
      UINT uFlags
    );

__declspec(dllimport)
 
LPVOID
__stdcall
LocalLock(
      HLOCAL hMem
    );

__declspec(dllimport)
 
HLOCAL
__stdcall
LocalHandle(
      LPCVOID pMem
    );

__declspec(dllimport)
BOOL
__stdcall
LocalUnlock(
      HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalSize(
      HLOCAL hMem
    );

__declspec(dllimport)
UINT
__stdcall
LocalFlags(
      HLOCAL hMem
    );

__declspec(dllimport)
HLOCAL
__stdcall
LocalFree(
      HLOCAL hMem
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalShrink(
      HLOCAL hMem,
      UINT cbNewSize
    );

__declspec(dllimport)
SIZE_T
__stdcall
LocalCompact(
      UINT uMinFree
    );



__declspec(dllimport)
BOOL
__stdcall
GetProcessorSystemCycleTime (
      USHORT Group,
      PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,
      PDWORD ReturnedLength
    );

#line 2409 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
 
LPVOID
__stdcall
VirtualAllocExNuma(
          HANDLE hProcess,
      LPVOID lpAddress,
          SIZE_T dwSize,
          DWORD  flAllocationType,
          DWORD  flProtect,
          DWORD  nndPreferred
    );

#line 2426 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetPhysicallyInstalledSystemMemory(
      PULONGLONG TotalMemoryInKilobytes
    );

#line 2437 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"













#line 2451 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 2453 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeA(
       LPCSTR lpApplicationName,
      LPDWORD  lpBinaryType
    );
__declspec(dllimport)
BOOL
__stdcall
GetBinaryTypeW(
       LPCWSTR lpApplicationName,
      LPDWORD  lpBinaryType
    );




#line 2473 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetShortPathNameA(
      LPCSTR lpszLongPath,
      LPSTR  lpszShortPath,
      DWORD cchBuffer
    );


#line 2486 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameTransactedA(
          LPCSTR lpszShortPath,
      LPSTR  lpszLongPath,
          DWORD cchBuffer,
          HANDLE hTransaction
    );
__declspec(dllimport)
 
DWORD
__stdcall
GetLongPathNameTransactedW(
          LPCWSTR lpszShortPath,
      LPWSTR  lpszLongPath,
          DWORD cchBuffer,
          HANDLE hTransaction
    );




#line 2514 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 2516 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetProcessAffinityMask(
       HANDLE hProcess,
      PDWORD_PTR lpProcessAffinityMask,
      PDWORD_PTR lpSystemAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessAffinityMask(
      HANDLE hProcess,
      DWORD_PTR dwProcessAffinityMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessIoCounters(
       HANDLE hProcess,
      PIO_COUNTERS lpIoCounters
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessWorkingSetSize(
       HANDLE hProcess,
      PSIZE_T lpMinimumWorkingSetSize,
      PSIZE_T lpMaximumWorkingSetSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessWorkingSetSize(
      HANDLE hProcess,
      SIZE_T dwMinimumWorkingSetSize,
      SIZE_T dwMaximumWorkingSetSize
    );

__declspec(dllimport)

void
__stdcall
FatalExit(
      int ExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
SetEnvironmentStringsA(
         LPCH NewEnvironment
    );


#line 2577 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 2579 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
void
__stdcall
RaiseFailFastException(
      PEXCEPTION_RECORD pExceptionRecord,
      PCONTEXT pContextRecord,
      DWORD dwFlags
    );

#line 2594 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family










__declspec(dllimport)
 
LPVOID
__stdcall
CreateFiber(
          SIZE_T dwStackSize,
          LPFIBER_START_ROUTINE lpStartAddress,
      LPVOID lpParameter
    );

__declspec(dllimport)
 
LPVOID
__stdcall
CreateFiberEx(
          SIZE_T dwStackCommitSize,
          SIZE_T dwStackReserveSize,
          DWORD dwFlags,
          LPFIBER_START_ROUTINE lpStartAddress,
      LPVOID lpParameter
    );

__declspec(dllimport)
void
__stdcall
DeleteFiber(
      LPVOID lpFiber
    );

__declspec(dllimport)
 
LPVOID
__stdcall
ConvertThreadToFiber(
      LPVOID lpParameter
    );

__declspec(dllimport)
 
LPVOID
__stdcall
ConvertThreadToFiberEx(
      LPVOID lpParameter,
          DWORD dwFlags
    );



__declspec(dllimport)
BOOL
__stdcall
ConvertFiberToThread(
    void
    );

#line 2663 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
void
__stdcall
SwitchToFiber(
      LPVOID lpFiber
    );









typedef void *PUMS_CONTEXT;

typedef void *PUMS_COMPLETION_LIST;

typedef enum _RTL_UMS_THREAD_INFO_CLASS UMS_THREAD_INFO_CLASS, *PUMS_THREAD_INFO_CLASS;

typedef enum _RTL_UMS_SCHEDULER_REASON UMS_SCHEDULER_REASON;

typedef PRTL_UMS_SCHEDULER_ENTRY_POINT PUMS_SCHEDULER_ENTRY_POINT;

typedef struct _UMS_SCHEDULER_STARTUP_INFO {

    
    
    
    ULONG UmsVersion;

    
    
    
    PUMS_COMPLETION_LIST CompletionList;

    
    
    
    
    PUMS_SCHEDULER_ENTRY_POINT SchedulerProc;

    
    
    
    PVOID SchedulerParam;

} UMS_SCHEDULER_STARTUP_INFO, *PUMS_SCHEDULER_STARTUP_INFO;

typedef struct _UMS_SYSTEM_THREAD_INFORMATION {
    ULONG UmsVersion;
    union {
        struct {
            ULONG IsUmsSchedulerThread : 1;
            ULONG IsUmsWorkerThread : 1;
        } ;
        ULONG ThreadUmsFlags;
    } ;
} UMS_SYSTEM_THREAD_INFORMATION, *PUMS_SYSTEM_THREAD_INFORMATION;

 
__declspec(dllimport)
BOOL
__stdcall
CreateUmsCompletionList(
     PUMS_COMPLETION_LIST* UmsCompletionList
    );

__declspec(dllimport)
BOOL
__stdcall
DequeueUmsCompletionListItems(
      PUMS_COMPLETION_LIST UmsCompletionList,
      DWORD WaitTimeOut,
      PUMS_CONTEXT* UmsThreadList
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsCompletionListEvent(
      PUMS_COMPLETION_LIST UmsCompletionList,
      PHANDLE UmsCompletionEvent
    );

__declspec(dllimport)
BOOL
__stdcall
ExecuteUmsThread(
      PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
UmsThreadYield(
      PVOID SchedulerParam
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsCompletionList(
      PUMS_COMPLETION_LIST UmsCompletionList
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetCurrentUmsThread(
    void
    );

__declspec(dllimport)
PUMS_CONTEXT
__stdcall
GetNextUmsListItem(
      PUMS_CONTEXT UmsContext
    );

__declspec(dllimport)
BOOL
__stdcall
QueryUmsThreadInformation(
      PUMS_CONTEXT UmsThread,
      UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
      PVOID UmsThreadInformation,
      ULONG UmsThreadInformationLength,
      PULONG ReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetUmsThreadInformation(
      PUMS_CONTEXT UmsThread,
      UMS_THREAD_INFO_CLASS UmsThreadInfoClass,
      PVOID UmsThreadInformation,
      ULONG UmsThreadInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
DeleteUmsThreadContext(
      PUMS_CONTEXT UmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
CreateUmsThreadContext(
     PUMS_CONTEXT *lpUmsThread
    );

__declspec(dllimport)
BOOL
__stdcall
EnterUmsSchedulingMode(
      PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetUmsSystemThreadInformation(
      HANDLE ThreadHandle,
      PUMS_SYSTEM_THREAD_INFORMATION SystemThreadInfo
    );

#line 2836 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





#line 2842 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD_PTR
__stdcall
SetThreadAffinityMask(
      HANDLE hThread,
      DWORD_PTR dwThreadAffinityMask
    );


__declspec(dllimport)
DWORD
__stdcall
SetThreadIdealProcessor(
      HANDLE hThread,
      DWORD dwIdealProcessor
    );
#line 2860 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





typedef enum _THREAD_INFORMATION_CLASS {
    ThreadMemoryPriority,
    ThreadAbsoluteCpuPriority,
    ThreadInformationClassMax
} THREAD_INFORMATION_CLASS;





typedef enum _PROCESS_INFORMATION_CLASS {
    ProcessMemoryPriority,
    ProcessInformationClassMax
} PROCESS_INFORMATION_CLASS;



__declspec(dllimport)
BOOL
__stdcall
GetThreadInformation (
      HANDLE hThread,
      THREAD_INFORMATION_CLASS ThreadInformationClass,
      LPVOID ThreadInformation,
      DWORD ThreadInformationSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadInformation (
      HANDLE hThread,
      THREAD_INFORMATION_CLASS ThreadInformationClass,
      LPVOID ThreadInformation,
      DWORD ThreadInformationSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessInformation (
      HANDLE hProcess,
      PROCESS_INFORMATION_CLASS ProcessInformationClass,
      LPVOID ProcessInformation,
      DWORD ProcessInformationSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetProcessInformation (
      HANDLE hProcess,
      PROCESS_INFORMATION_CLASS ProcessInformationClass,
      LPVOID ProcessInformation,
      DWORD ProcessInformationSize
    );












typedef struct _MEMORY_PRIORITY_INFORMATION {
    ULONG MemoryPriority;
} MEMORY_PRIORITY_INFORMATION, *PMEMORY_PRIORITY_INFORMATION;

#line 2938 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"






__declspec(dllimport)
BOOL
__stdcall
SetProcessDEPPolicy(
      DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessDEPPolicy(
      HANDLE hProcess,
      LPDWORD lpFlags,
      PBOOL lpPermanent
    );

#line 2961 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetProcessPriorityBoost(
      HANDLE hProcess,
      BOOL bDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
GetProcessPriorityBoost(
       HANDLE hProcess,
      PBOOL  pDisablePriorityBoost
    );

__declspec(dllimport)
BOOL
__stdcall
RequestWakeupLatency(
      LATENCY_TIME latency
    );

__declspec(dllimport)
BOOL
__stdcall
IsSystemResumeAutomatic(
    void
    );



__declspec(dllimport)
BOOL
__stdcall
GetThreadIOPendingFlag(
       HANDLE hThread,
      PBOOL  lpIOIsPending
    );

#line 3003 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetThreadSelectorEntry(
       HANDLE hThread,
       DWORD dwSelector,
      LPLDT_ENTRY lpSelectorEntry
    );

__declspec(dllimport)
EXECUTION_STATE
__stdcall
SetThreadExecutionState(
      EXECUTION_STATE esFlags
    );







typedef REASON_CONTEXT POWER_REQUEST_CONTEXT, *PPOWER_REQUEST_CONTEXT, *LPPOWER_REQUEST_CONTEXT;

__declspec(dllimport)
HANDLE
__stdcall
PowerCreateRequest (
      PREASON_CONTEXT Context
    );

__declspec(dllimport)
BOOL
__stdcall
PowerSetRequest (
      HANDLE PowerRequest,
      POWER_REQUEST_TYPE RequestType
    );

__declspec(dllimport)
BOOL
__stdcall
PowerClearRequest (
      HANDLE PowerRequest,
      POWER_REQUEST_TYPE RequestType
    );

#line 3052 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 3054 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family






#line 3064 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


















#line 3086 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 3087 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





















__declspec(dllimport)
BOOL
__stdcall
SetFileCompletionNotificationModes(
      HANDLE FileHandle,
      UCHAR Flags
    );

__declspec(dllimport)
BOOL
__stdcall
SetFileIoOverlappedRange(
      HANDLE FileHandle,
      PUCHAR OverlappedRangeStart,
      ULONG Length
    );

#line 3126 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"










__declspec(dllimport)
DWORD
__stdcall
GetThreadErrorMode(
    void
    );

__declspec(dllimport)
BOOL
__stdcall
SetThreadErrorMode(
      DWORD dwNewMode,
      LPDWORD lpOldMode
    );





__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadContext(
         HANDLE hThread,
      PWOW64_CONTEXT lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
Wow64SetThreadContext(
      HANDLE hThread,
      const WOW64_CONTEXT *lpContext
    );

#line 3172 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
Wow64GetThreadSelectorEntry(
      HANDLE hThread,
      DWORD dwSelector,
      PWOW64_LDT_ENTRY lpSelectorEntry
    );

#line 3185 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 3187 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
DWORD
__stdcall
Wow64SuspendThread(
      HANDLE hThread
    );

#line 3198 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DebugSetProcessKillOnExit(
      BOOL KillOnExit
    );

__declspec(dllimport)
BOOL
__stdcall
DebugBreakProcess (
      HANDLE Process
    );

#line 3214 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family




#line 3222 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 3224 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
PulseEvent(
      HANDLE hEvent
    );

__declspec(dllimport)
DWORD
__stdcall
WaitForMultipleObjects(
      DWORD nCount,
      const HANDLE *lpHandles,
      BOOL bWaitAll,
      DWORD dwMilliseconds
    );

__declspec(dllimport)
ATOM
__stdcall
GlobalDeleteAtom(
      ATOM nAtom
    );

__declspec(dllimport)
BOOL
__stdcall
InitAtomTable(
      DWORD nSize
    );

__declspec(dllimport)
ATOM
__stdcall
DeleteAtom(
      ATOM nAtom
    );

__declspec(dllimport)
UINT
__stdcall
SetHandleCount(
      UINT uNumber
    );

__declspec(dllimport)
BOOL
__stdcall
RequestDeviceWakeup(
      HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
CancelDeviceWakeupRequest(
      HANDLE hDevice
    );

__declspec(dllimport)
BOOL
__stdcall
GetDevicePowerState(
       HANDLE hDevice,
      BOOL *pfOn
    );

__declspec(dllimport)
BOOL
__stdcall
SetMessageWaitingIndicator(
      HANDLE hMsgIndicator,
      ULONG ulMsgCount
    );


__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameA(
      HANDLE hFile,
      LPCSTR lpShortName
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileShortNameW(
      HANDLE hFile,
      LPCWSTR lpShortName
    );




#line 3324 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"






__declspec(dllimport)
DWORD
__stdcall
LoadModule(
      LPCSTR lpModuleName,
      LPVOID lpParameterBlock
    );


 
__declspec(dllimport)
UINT
__stdcall
WinExec(
      LPCSTR lpCmdLine,
      UINT uCmdShow
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommBreak(
      HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
ClearCommError(
           HANDLE hFile,
      LPDWORD lpErrors,
      LPCOMSTAT lpStat
    );

__declspec(dllimport)
BOOL
__stdcall
SetupComm(
      HANDLE hFile,
      DWORD dwInQueue,
      DWORD dwOutQueue
    );

__declspec(dllimport)
BOOL
__stdcall
EscapeCommFunction(
      HANDLE hFile,
      DWORD dwFunc
    );

__declspec(dllimport)
 
BOOL
__stdcall
GetCommConfig(
           HANDLE hCommDev,
      LPCOMMCONFIG lpCC,
        LPDWORD lpdwSize
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommMask(
       HANDLE hFile,
      LPDWORD lpEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommProperties(
         HANDLE hFile,
      LPCOMMPROP lpCommProp
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommModemStatus(
       HANDLE hFile,
      LPDWORD lpModemStat
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommState(
       HANDLE hFile,
      LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
GetCommTimeouts(
       HANDLE hFile,
      LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
PurgeComm(
      HANDLE hFile,
      DWORD dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommBreak(
      HANDLE hFile
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommConfig(
      HANDLE hCommDev,
      LPCOMMCONFIG lpCC,
      DWORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommMask(
      HANDLE hFile,
      DWORD dwEvtMask
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommState(
      HANDLE hFile,
      LPDCB lpDCB
    );

__declspec(dllimport)
BOOL
__stdcall
SetCommTimeouts(
      HANDLE hFile,
      LPCOMMTIMEOUTS lpCommTimeouts
    );

__declspec(dllimport)
BOOL
__stdcall
TransmitCommChar(
      HANDLE hFile,
      char cChar
    );

__declspec(dllimport)
BOOL
__stdcall
WaitCommEvent(
             HANDLE hFile,
          LPDWORD lpEvtMask,
      LPOVERLAPPED lpOverlapped
    );


__declspec(dllimport)
DWORD
__stdcall
SetTapePosition(
      HANDLE hDevice,
      DWORD dwPositionMethod,
      DWORD dwPartition,
      DWORD dwOffsetLow,
      DWORD dwOffsetHigh,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapePosition(
       HANDLE hDevice,
       DWORD dwPositionType,
      LPDWORD lpdwPartition,
      LPDWORD lpdwOffsetLow,
      LPDWORD lpdwOffsetHigh
    );

__declspec(dllimport)
DWORD
__stdcall
PrepareTape(
      HANDLE hDevice,
      DWORD dwOperation,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
EraseTape(
      HANDLE hDevice,
      DWORD dwEraseType,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
CreateTapePartition(
      HANDLE hDevice,
      DWORD dwPartitionMethod,
      DWORD dwCount,
      DWORD dwSize
    );

__declspec(dllimport)
DWORD
__stdcall
WriteTapemark(
      HANDLE hDevice,
      DWORD dwTapemarkType,
      DWORD dwTapemarkCount,
      BOOL bImmediate
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeStatus(
      HANDLE hDevice
    );

__declspec(dllimport)
DWORD
__stdcall
GetTapeParameters(
         HANDLE hDevice,
         DWORD dwOperation,
      LPDWORD lpdwSize,
      LPVOID lpTapeInformation
    );




__declspec(dllimport)
DWORD
__stdcall
SetTapeParameters(
      HANDLE hDevice,
      DWORD dwOperation,
      LPVOID lpTapeInformation
    );




#line 3591 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
int
__stdcall
MulDiv(
      int nNumber,
      int nNumerator,
      int nDenominator
    );

#line 3606 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


typedef enum _DEP_SYSTEM_POLICY_TYPE {
    DEPPolicyAlwaysOff = 0,
    DEPPolicyAlwaysOn,
    DEPPolicyOptIn,
    DEPPolicyOptOut,
    DEPTotalPolicyCount
} DEP_SYSTEM_POLICY_TYPE;



__declspec(dllimport)
DEP_SYSTEM_POLICY_TYPE
__stdcall
GetSystemDEPPolicy(
    void
    );

#line 3629 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetSystemRegistryQuota(
      PDWORD pdwQuotaAllowed,
      PDWORD pdwQuotaUsed
    );

BOOL
__stdcall
GetSystemTimes(
      LPFILETIME lpIdleTime,
      LPFILETIME lpKernelTime,
      LPFILETIME lpUserTime
    );

#line 3649 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
FileTimeToDosDateTime(
       const FILETIME *lpFileTime,
      LPWORD lpFatDate,
      LPWORD lpFatTime
    );

__declspec(dllimport)
BOOL
__stdcall
DosDateTimeToFileTime(
       WORD wFatDate,
       WORD wFatTime,
      LPFILETIME lpFileTime
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemTimeAdjustment(
      DWORD dwTimeAdjustment,
      BOOL  bTimeAdjustmentDisabled
    );

#line 3681 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion


#pragma region Application Family



__declspec(dllimport)
 
DWORD
__stdcall
FormatMessageA(
          DWORD dwFlags,
      LPCVOID lpSource,
          DWORD dwMessageId,
          DWORD dwLanguageId,
         LPSTR lpBuffer,
          DWORD nSize,
      va_list *Arguments
    );
__declspec(dllimport)
 
DWORD
__stdcall
FormatMessageW(
          DWORD dwFlags,
      LPCVOID lpSource,
          DWORD dwMessageId,
          DWORD dwLanguageId,
         LPWSTR lpBuffer,
          DWORD nSize,
      va_list *Arguments
    );




#line 3719 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





























#line 3749 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 3750 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"








#line 3759 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family










__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeInfo(
           HANDLE hNamedPipe,
      LPDWORD lpFlags,
      LPDWORD lpOutBufferSize,
      LPDWORD lpInBufferSize,
      LPDWORD lpMaxInstances
    );

__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotA(
          LPCSTR lpName,
          DWORD nMaxMessageSize,
          DWORD lReadTimeout,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateMailslotW(
          LPCWSTR lpName,
          DWORD nMaxMessageSize,
          DWORD lReadTimeout,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 3806 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetMailslotInfo(
           HANDLE hMailslot,
      LPDWORD lpMaxMessageSize,
      LPDWORD lpNextSize,
      LPDWORD lpMessageCount,
      LPDWORD lpReadTimeout
    );

__declspec(dllimport)
BOOL
__stdcall
SetMailslotInfo(
      HANDLE hMailslot,
      DWORD lReadTimeout
    );





__declspec(dllimport)
BOOL
__stdcall
EncryptFileA(
      LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
EncryptFileW(
      LPCWSTR lpFileName
    );




#line 3847 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DecryptFileA(
            LPCSTR lpFileName,
      DWORD dwReserved
    );
__declspec(dllimport)
BOOL
__stdcall
DecryptFileW(
            LPCWSTR lpFileName,
      DWORD dwReserved
    );




#line 3867 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
















__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusA(
       LPCSTR lpFileName,
      LPDWORD  lpStatus
    );
__declspec(dllimport)
BOOL
__stdcall
FileEncryptionStatusW(
       LPCWSTR lpFileName,
      LPDWORD  lpStatus
    );




#line 3902 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"







typedef
DWORD
(__stdcall *PFE_EXPORT_FUNC)(
      PBYTE pbData,
      PVOID pvCallbackContext,
          ULONG ulLength
    );

typedef
DWORD
(__stdcall *PFE_IMPORT_FUNC)(
      PBYTE pbData,
      PVOID pvCallbackContext,
       PULONG ulLength
    );












__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawA(
             LPCSTR lpFileName,
             ULONG    ulFlags,
     PVOID   *pvContext
    );
__declspec(dllimport)
DWORD
__stdcall
OpenEncryptedFileRawW(
             LPCWSTR lpFileName,
             ULONG    ulFlags,
     PVOID   *pvContext
    );




#line 3957 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
ReadEncryptedFileRaw(
          PFE_EXPORT_FUNC pfExportCallback,
      PVOID           pvCallbackContext,
          PVOID           pvContext
    );

__declspec(dllimport)
DWORD
__stdcall
WriteEncryptedFileRaw(
          PFE_IMPORT_FUNC pfImportCallback,
      PVOID           pvCallbackContext,
          PVOID           pvContext
    );

__declspec(dllimport)
void
__stdcall
CloseEncryptedFileRaw(
      PVOID           pvContext
    );





__declspec(dllimport)
int
__stdcall
lstrcmpA(
      LPCSTR lpString1,
      LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpW(
      LPCWSTR lpString1,
      LPCWSTR lpString2
    );




#line 4006 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrcmpiA(
      LPCSTR lpString1,
      LPCSTR lpString2
    );
__declspec(dllimport)
int
__stdcall
lstrcmpiW(
      LPCWSTR lpString1,
      LPCWSTR lpString2
    );




#line 4026 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
LPSTR
__stdcall
lstrcpynA(
      LPSTR lpString1,
      LPCSTR lpString2,
      int iMaxLength
    );
__declspec(dllimport)
 
LPWSTR
__stdcall
lstrcpynW(
      LPWSTR lpString1,
      LPCWSTR lpString2,
      int iMaxLength
    );




#line 4050 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


#pragma warning(push)
#pragma warning(disable:4995)
#line 4055 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcpyA(
      LPSTR lpString1, 
       LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcpyW(
      LPWSTR lpString1, 
       LPCWSTR lpString2
    );




#line 4075 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
LPSTR
__stdcall
lstrcatA(
      LPSTR lpString1, 
         LPCSTR lpString2
    );
__declspec(dllimport)
LPWSTR
__stdcall
lstrcatW(
      LPWSTR lpString1, 
         LPCWSTR lpString2
    );




#line 4095 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


#pragma warning(pop)
#line 4099 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
int
__stdcall
lstrlenA(
      LPCSTR lpString
    );
__declspec(dllimport)
int
__stdcall
lstrlenW(
      LPCWSTR lpString
    );




#line 4117 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
HFILE
__stdcall
OpenFile(
         LPCSTR lpFileName,
      LPOFSTRUCT lpReOpenBuff,
         UINT uStyle
    );

__declspec(dllimport)
HFILE
__stdcall
_lopen(
      LPCSTR lpPathName,
      int iReadWrite
    );

__declspec(dllimport)
HFILE
__stdcall
_lcreat(
      LPCSTR lpPathName,
      int  iAttribute
    );

__declspec(dllimport)
UINT
__stdcall
_lread(
      HFILE hFile,
      LPVOID lpBuffer,
      UINT uBytes
    );

__declspec(dllimport)
UINT
__stdcall
_lwrite(
      HFILE hFile,
      LPCCH lpBuffer,
      UINT uBytes
    );

__declspec(dllimport)
long
__stdcall
_hread(
      HFILE hFile,
      LPVOID lpBuffer,
      long lBytes
    );

__declspec(dllimport)
long
__stdcall
_hwrite(
      HFILE hFile,
      LPCCH lpBuffer,
      long lBytes
    );

__declspec(dllimport)
HFILE
__stdcall
_lclose(
      HFILE hFile
    );

__declspec(dllimport)
LONG
__stdcall
_llseek(
      HFILE hFile,
      LONG lOffset,
      int iOrigin
    );

__declspec(dllimport)
BOOL
__stdcall
IsTextUnicode(
      const void* lpv,
             int iSize,
      LPINT lpiResult
    );


__declspec(dllimport)
DWORD
__stdcall
SignalObjectAndWait(
      HANDLE hObjectToSignal,
      HANDLE hObjectToWaitOn,
      DWORD dwMilliseconds,
      BOOL bAlertable
    );
#line 4215 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BackupRead(
         HANDLE hFile,
      LPBYTE lpBuffer,
         DWORD nNumberOfBytesToRead,
        LPDWORD lpNumberOfBytesRead,
         BOOL bAbort,
         BOOL bProcessSecurity,
      LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupSeek(
         HANDLE hFile,
         DWORD  dwLowBytesToSeek,
         DWORD  dwHighBytesToSeek,
        LPDWORD lpdwLowByteSeeked,
        LPDWORD lpdwHighByteSeeked,
      LPVOID *lpContext
    );

__declspec(dllimport)
BOOL
__stdcall
BackupWrite(
         HANDLE hFile,
      LPBYTE lpBuffer,
         DWORD nNumberOfBytesToWrite,
        LPDWORD lpNumberOfBytesWritten,
         BOOL bAbort,
         BOOL bProcessSecurity,
      LPVOID *lpContext
    );




typedef struct _WIN32_STREAM_ID {
        DWORD          dwStreamId ;
        DWORD          dwStreamAttributes ;
        LARGE_INTEGER  Size ;
        DWORD          dwStreamNameSize ;
        WCHAR          cStreamName[ 1 ] ;
} WIN32_STREAM_ID, *LPWIN32_STREAM_ID ;
















































#line 4313 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



typedef struct _STARTUPINFOEXA {
    STARTUPINFOA StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXA, *LPSTARTUPINFOEXA;
typedef struct _STARTUPINFOEXW {
    STARTUPINFOW StartupInfo;
    LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList;
} STARTUPINFOEXW, *LPSTARTUPINFOEXW;




typedef STARTUPINFOEXA STARTUPINFOEX;
typedef LPSTARTUPINFOEXA LPSTARTUPINFOEX;
#line 4331 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 4333 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



#line 4337 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
 
HANDLE
__stdcall
OpenMutexA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );


#line 4354 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreA(
      LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
          LONG lInitialCount,
          LONG lMaximumCount,
      LPCSTR lpName
    );
__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreW(
      LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
          LONG lInitialCount,
          LONG lMaximumCount,
      LPCWSTR lpName
    );




#line 4380 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenSemaphoreA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );


#line 4393 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerA(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
          BOOL bManualReset,
      LPCSTR lpTimerName
    );
__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerW(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
          BOOL bManualReset,
      LPCWSTR lpTimerName
    );




#line 4419 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenWaitableTimerA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpTimerName
    );


#line 4432 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
 
HANDLE
__stdcall
CreateSemaphoreExA(
         LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,
             LONG lInitialCount,
             LONG lMaximumCount,
         LPCSTR lpName,
       DWORD dwFlags,
             DWORD dwDesiredAccess
    );


#line 4450 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
CreateWaitableTimerExA(
      LPSECURITY_ATTRIBUTES lpTimerAttributes,
      LPCSTR lpTimerName,
          DWORD dwFlags,
          DWORD dwDesiredAccess
    );


#line 4464 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 4466 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 4468 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingA(
          HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
          DWORD flProtect,
          DWORD dwMaximumSizeHigh,
          DWORD dwMaximumSizeLow,
      LPCSTR lpName
    );


#line 4484 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
 
HANDLE
__stdcall
CreateFileMappingNumaA(
          HANDLE hFile,
      LPSECURITY_ATTRIBUTES lpFileMappingAttributes,
          DWORD flProtect,
          DWORD dwMaximumSizeHigh,
          DWORD dwMaximumSizeLow,
      LPCSTR lpName,
          DWORD nndPreferred
    );



#line 4504 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 4506 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenFileMappingA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );


#line 4518 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetLogicalDriveStringsA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );


#line 4530 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryA(
      LPCSTR lpLibFileName
    );
__declspec(dllimport)
 
HMODULE
__stdcall
LoadLibraryW(
      LPCWSTR lpLibFileName
    );




#line 4551 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 4553 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family




__declspec(dllimport)
 
HMODULE
__stdcall
LoadPackagedLibrary (
            LPCWSTR lpwLibFileName,
      DWORD Reserved
    );

#line 4570 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 4572 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameA(
      HANDLE hProcess,
      DWORD dwFlags,
      LPSTR lpExeName,
      PDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
QueryFullProcessImageNameW(
      HANDLE hProcess,
      DWORD dwFlags,
      LPWSTR lpExeName,
      PDWORD lpdwSize
    );




#line 4604 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 4606 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"














typedef enum _PROC_THREAD_ATTRIBUTE_NUM {
    ProcThreadAttributeParentProcess        = 0,
    ProcThreadAttributeHandleList           = 2,

    ProcThreadAttributeGroupAffinity        = 3,
    ProcThreadAttributePreferredNode        = 4,
    ProcThreadAttributeIdealProcessor       = 5,
    ProcThreadAttributeUmsThread            = 6,
    ProcThreadAttributeMitigationPolicy     = 7,
#line 4630 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

    ProcThreadAttributeSecurityCapabilities = 9,
#line 4633 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
} PROC_THREAD_ATTRIBUTE_NUM;
#line 4635 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"












#line 4648 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"












#line 4661 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




#line 4666 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"










#line 4677 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


























































































#line 4768 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
GetProcessShutdownParameters(
      LPDWORD lpdwLevel,
      LPDWORD lpdwFlags
    );

__declspec(dllimport)
void
__stdcall
FatalAppExitA(
      UINT uAction,
      LPCSTR lpMessageText
    );
__declspec(dllimport)
void
__stdcall
FatalAppExitW(
      UINT uAction,
      LPCWSTR lpMessageText
    );




#line 4797 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
void
__stdcall
GetStartupInfoA(
      LPSTARTUPINFOA lpStartupInfo
    );


#line 4807 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





















#line 4829 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



















#line 4849 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize
    );




#line 4873 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize,
      PDWORD pdwAttribubutes
    );
__declspec(dllimport)
DWORD
__stdcall
GetFirmwareEnvironmentVariableExW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pBuffer,
      DWORD    nSize,
      PDWORD pdwAttribubutes
    );




#line 4901 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 4903 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pValue,
      DWORD    nSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pValue,
      DWORD    nSize
    );




#line 4927 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExA(
      LPCSTR lpName,
      LPCSTR lpGuid,
      PVOID pValue,
      DWORD    nSize,
      DWORD    dwAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
SetFirmwareEnvironmentVariableExW(
      LPCWSTR lpName,
      LPCWSTR lpGuid,
      PVOID pValue,
      DWORD    nSize,
      DWORD    dwAttributes
    );




#line 4955 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 4957 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetFirmwareType (
      PFIRMWARE_TYPE FirmwareType
    );


__declspec(dllimport)
BOOL
__stdcall
IsNativeVhdBoot (
      PBOOL NativeVhdBoot
    );

#line 4976 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceA(
      HMODULE hModule,
          LPCSTR lpName,
          LPCSTR lpType
    );
__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceW(
      HMODULE hModule,
          LPCWSTR lpName,
          LPCWSTR lpType
    );




#line 5000 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
HRSRC
__stdcall
FindResourceExA(
      HMODULE hModule,
          LPCSTR lpType,
          LPCSTR lpName,
          WORD    wLanguage
    );


#line 5014 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesA(
      HMODULE hModule,
          ENUMRESTYPEPROCA lpEnumFunc,
          LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceTypesW(
      HMODULE hModule,
          ENUMRESTYPEPROCW lpEnumFunc,
          LONG_PTR lParam
    );




#line 5036 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesA(
      HMODULE hModule,
          LPCSTR lpType,
          ENUMRESNAMEPROCA lpEnumFunc,
          LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceNamesW(
      HMODULE hModule,
          LPCWSTR lpType,
          ENUMRESNAMEPROCW lpEnumFunc,
          LONG_PTR lParam
    );




#line 5060 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesA(
      HMODULE hModule,
          LPCSTR lpType,
          LPCSTR lpName,
          ENUMRESLANGPROCA lpEnumFunc,
          LONG_PTR lParam
    );
__declspec(dllimport)
BOOL
__stdcall
EnumResourceLanguagesW(
      HMODULE hModule,
          LPCWSTR lpType,
          LPCWSTR lpName,
          ENUMRESLANGPROCW lpEnumFunc,
          LONG_PTR lParam
    );




#line 5086 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceA(
      LPCSTR pFileName,
      BOOL bDeleteExistingResources
    );
__declspec(dllimport)
HANDLE
__stdcall
BeginUpdateResourceW(
      LPCWSTR pFileName,
      BOOL bDeleteExistingResources
    );




#line 5106 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateResourceA(
      HANDLE hUpdate,
      LPCSTR lpType,
      LPCSTR lpName,
      WORD wLanguage,
      LPVOID lpData,
      DWORD cb
    );
__declspec(dllimport)
BOOL
__stdcall
UpdateResourceW(
      HANDLE hUpdate,
      LPCWSTR lpType,
      LPCWSTR lpName,
      WORD wLanguage,
      LPVOID lpData,
      DWORD cb
    );




#line 5134 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceA(
      HANDLE hUpdate,
      BOOL   fDiscard
    );
__declspec(dllimport)
BOOL
__stdcall
EndUpdateResourceW(
      HANDLE hUpdate,
      BOOL   fDiscard
    );




#line 5154 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomW(
      LPCWSTR lpString
    );




#line 5174 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExA(
      LPCSTR lpString,
      DWORD Flags
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalAddAtomExW(
      LPCWSTR lpString,
      DWORD Flags
    );




#line 5194 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
GlobalFindAtomW(
      LPCWSTR lpString
    );




#line 5212 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameA(
      ATOM nAtom,
      LPSTR lpBuffer,
      int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GlobalGetAtomNameW(
      ATOM nAtom,
      LPWSTR lpBuffer,
      int nSize
    );




#line 5234 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
AddAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
AddAtomW(
      LPCWSTR lpString
    );




#line 5252 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
ATOM
__stdcall
FindAtomA(
      LPCSTR lpString
    );
__declspec(dllimport)
ATOM
__stdcall
FindAtomW(
      LPCWSTR lpString
    );




#line 5270 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetAtomNameA(
      ATOM nAtom,
      LPSTR lpBuffer,
      int nSize
    );
__declspec(dllimport)
UINT
__stdcall
GetAtomNameW(
      ATOM nAtom,
      LPWSTR lpBuffer,
      int nSize
    );




#line 5292 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetProfileIntA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      INT nDefault
    );
__declspec(dllimport)
UINT
__stdcall
GetProfileIntW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      INT nDefault
    );




#line 5314 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpDefault,
      LPSTR lpReturnedString,
          DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpDefault,
      LPWSTR lpReturnedString,
          DWORD nSize
    );




#line 5340 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpString
    );




#line 5362 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionA(
      LPCSTR lpAppName,
      LPSTR lpReturnedString,
      DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetProfileSectionW(
      LPCWSTR lpAppName,
      LPWSTR lpReturnedString,
      DWORD nSize
    );




#line 5384 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionA(
      LPCSTR lpAppName,
      LPCSTR lpString
    );
__declspec(dllimport)
BOOL
__stdcall
WriteProfileSectionW(
      LPCWSTR lpAppName,
      LPCWSTR lpString
    );




#line 5404 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntA(
          LPCSTR lpAppName,
          LPCSTR lpKeyName,
          INT nDefault,
      LPCSTR lpFileName
    );
__declspec(dllimport)
UINT
__stdcall
GetPrivateProfileIntW(
          LPCWSTR lpAppName,
          LPCWSTR lpKeyName,
          INT nDefault,
      LPCWSTR lpFileName
    );




#line 5428 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"























#line 5452 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpDefault,
      LPSTR lpReturnedString,
          DWORD nSize,
      LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpDefault,
      LPWSTR lpReturnedString,
          DWORD nSize,
      LPCWSTR lpFileName
    );




#line 5480 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



























#line 5508 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringA(
      LPCSTR lpAppName,
      LPCSTR lpKeyName,
      LPCSTR lpString,
      LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStringW(
      LPCWSTR lpAppName,
      LPCWSTR lpKeyName,
      LPCWSTR lpString,
      LPCWSTR lpFileName
    );




#line 5532 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionA(
          LPCSTR lpAppName,
      LPSTR lpReturnedString,
          DWORD nSize,
      LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionW(
          LPCWSTR lpAppName,
      LPWSTR lpReturnedString,
          DWORD nSize,
      LPCWSTR lpFileName
    );




#line 5556 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"























#line 5580 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionA(
      LPCSTR lpAppName,
      LPCSTR lpString,
      LPCSTR lpFileName
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileSectionW(
      LPCWSTR lpAppName,
      LPCWSTR lpString,
      LPCWSTR lpFileName
    );




#line 5602 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesA(
      LPSTR lpszReturnBuffer,
          DWORD nSize,
      LPCSTR lpFileName
    );
__declspec(dllimport)
DWORD
__stdcall
GetPrivateProfileSectionNamesW(
      LPWSTR lpszReturnBuffer,
          DWORD nSize,
      LPCWSTR lpFileName
    );




#line 5625 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





















#line 5647 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructA(
          LPCSTR lpszSection,
          LPCSTR lpszKey,
      LPVOID   lpStruct,
          UINT     uSizeStruct,
      LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
GetPrivateProfileStructW(
          LPCWSTR lpszSection,
          LPCWSTR lpszKey,
      LPVOID   lpStruct,
          UINT     uSizeStruct,
      LPCWSTR szFile
    );




#line 5673 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

























#line 5699 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructA(
          LPCSTR lpszSection,
          LPCSTR lpszKey,
      LPVOID lpStruct,
          UINT     uSizeStruct,
      LPCSTR szFile
    );
__declspec(dllimport)
BOOL
__stdcall
WritePrivateProfileStructW(
          LPCWSTR lpszSection,
          LPCWSTR lpszKey,
      LPVOID lpStruct,
          UINT     uSizeStruct,
      LPCWSTR szFile
    );




#line 5725 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetTempPathA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );


#line 5736 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
UINT
__stdcall
GetTempFileNameA(
      LPCSTR lpPathName,
      LPCSTR lpPrefixString,
      UINT uUnique,
      LPSTR lpTempFileName
    );


#line 5749 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"























#line 5773 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




__declspec(dllimport)
 
UINT
__stdcall
GetSystemWow64DirectoryA(
      LPSTR lpBuffer,
      UINT uSize
    );
__declspec(dllimport)
 
UINT
__stdcall
GetSystemWow64DirectoryW(
      LPWSTR lpBuffer,
      UINT uSize
    );




#line 5798 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOLEAN
__stdcall
Wow64EnableWow64FsRedirection (
      BOOLEAN Wow64FsEnableRedirection
    );




typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_A)(  LPSTR lpBuffer,   UINT uSize);
typedef UINT (__stdcall* PGET_SYSTEM_WOW64_DIRECTORY_W)(  LPWSTR lpBuffer,   UINT uSize);





















#line 5833 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 5835 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 5836 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

















#line 5854 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



















#line 5874 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryA(
      LPCSTR lpPathName
    );
__declspec(dllimport)
BOOL
__stdcall
SetDllDirectoryW(
      LPCWSTR lpPathName
    );




#line 5894 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetDllDirectoryA(
      DWORD nBufferLength,
      LPSTR lpBuffer
    );
__declspec(dllimport)
 
DWORD
__stdcall
GetDllDirectoryW(
      DWORD nBufferLength,
      LPWSTR lpBuffer
    );




#line 5916 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 5918 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"






__declspec(dllimport)
BOOL
__stdcall
SetSearchPathMode (
      DWORD Flags
    );

#line 5932 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family




















#line 5956 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 5958 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExA(
          LPCSTR lpTemplateDirectory,
          LPCSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryExW(
          LPCWSTR lpTemplateDirectory,
          LPCWSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 5984 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedA(
      LPCSTR lpTemplateDirectory,
          LPCSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateDirectoryTransactedW(
      LPCWSTR lpTemplateDirectory,
          LPCWSTR lpNewDirectory,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          HANDLE hTransaction
    );




#line 6010 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedA(
      LPCSTR lpPathName,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
RemoveDirectoryTransactedW(
      LPCWSTR lpPathName,
          HANDLE hTransaction
    );




#line 6030 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameTransactedA(
                 LPCSTR lpFileName,
                 DWORD nBufferLength,
      LPSTR lpBuffer,
     LPSTR *lpFilePart,
                 HANDLE hTransaction
    );
__declspec(dllimport)
 
DWORD
__stdcall
GetFullPathNameTransactedW(
                 LPCWSTR lpFileName,
                 DWORD nBufferLength,
      LPWSTR lpBuffer,
     LPWSTR *lpFilePart,
                 HANDLE hTransaction
    );




#line 6058 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6060 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"







__declspec(dllimport)
BOOL
__stdcall
DefineDosDeviceA(
          DWORD dwFlags,
          LPCSTR lpDeviceName,
      LPCSTR lpTargetPath
    );


#line 6078 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
QueryDosDeviceA(
      LPCSTR lpDeviceName,
      LPSTR lpTargetPath,
          DWORD ucchMax
    );


#line 6090 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedA(
            LPCSTR lpFileName,
            DWORD dwDesiredAccess,
            DWORD dwShareMode,
        LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            DWORD dwCreationDisposition,
            DWORD dwFlagsAndAttributes,
        HANDLE hTemplateFile,
            HANDLE hTransaction,
        PUSHORT pusMiniVersion,
      PVOID  lpExtendedParameter
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateFileTransactedW(
            LPCWSTR lpFileName,
            DWORD dwDesiredAccess,
            DWORD dwShareMode,
        LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            DWORD dwCreationDisposition,
            DWORD dwFlagsAndAttributes,
        HANDLE hTemplateFile,
            HANDLE hTransaction,
        PUSHORT pusMiniVersion,
      PVOID  lpExtendedParameter
    );




#line 6130 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6132 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




__declspec(dllimport)
HANDLE
__stdcall
ReOpenFile(
      HANDLE  hOriginalFile,
      DWORD   dwDesiredAccess,
      DWORD   dwShareMode,
      DWORD   dwFlagsAndAttributes
    );

#line 6147 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedA(
          LPCSTR lpFileName,
          DWORD dwFileAttributes,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
SetFileAttributesTransactedW(
          LPCWSTR lpFileName,
          DWORD dwFileAttributes,
          HANDLE hTransaction
    );




#line 6172 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedA(
       LPCSTR lpFileName,
       GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
GetFileAttributesTransactedW(
       LPCWSTR lpFileName,
       GET_FILEEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFileInformation,
          HANDLE hTransaction
    );




#line 6196 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6198 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeA(
       LPCSTR lpFileName,
      LPDWORD  lpFileSizeHigh
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeW(
       LPCWSTR lpFileName,
      LPDWORD  lpFileSizeHigh
    );




#line 6218 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedA(
           LPCSTR lpFileName,
      LPDWORD  lpFileSizeHigh,
           HANDLE hTransaction
    );
__declspec(dllimport)
DWORD
__stdcall
GetCompressedFileSizeTransactedW(
           LPCWSTR lpFileName,
      LPDWORD  lpFileSizeHigh,
           HANDLE hTransaction
    );




#line 6242 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedA(
          LPCSTR lpFileName,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
DeleteFileTransactedW(
          LPCWSTR lpFileName,
          HANDLE hTransaction
    );




#line 6262 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6264 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6266 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family


















#line 6288 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6290 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3A(
           LPCSTR lpName,
      LPSTR lpOemName,
           DWORD OemNameSize,
      PBOOL pbNameContainsSpaces ,
          PBOOL pbNameLegal
    );
__declspec(dllimport)
BOOL
__stdcall
CheckNameLegalDOS8Dot3W(
           LPCWSTR lpName,
      LPSTR lpOemName,
           DWORD OemNameSize,
      PBOOL pbNameContainsSpaces ,
          PBOOL pbNameLegal
    );




#line 6322 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6324 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6326 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion



#pragma region Desktop Family




__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedA(
            LPCSTR lpFileName,
            FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
            FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
            DWORD dwAdditionalFlags,
            HANDLE hTransaction
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileTransactedW(
            LPCWSTR lpFileName,
            FINDEX_INFO_LEVELS fInfoLevelId,
      LPVOID lpFindFileData,
            FINDEX_SEARCH_OPS fSearchOp,
      LPVOID lpSearchFilter,
            DWORD dwAdditionalFlags,
            HANDLE hTransaction
    );




#line 6364 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6366 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6368 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#line 6371 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
CopyFileA(
      LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
      BOOL bFailIfExists
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileW(
      LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
      BOOL bFailIfExists
    );




#line 6397 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





















#line 6419 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6421 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion



#pragma region Desktop Family


typedef
DWORD
(__stdcall *LPPROGRESS_ROUTINE)(
          LARGE_INTEGER TotalFileSize,
          LARGE_INTEGER TotalBytesTransferred,
          LARGE_INTEGER StreamSize,
          LARGE_INTEGER StreamBytesTransferred,
          DWORD dwStreamNumber,
          DWORD dwCallbackReason,
          HANDLE hSourceFile,
          HANDLE hDestinationFile,
      LPVOID lpData
    );

__declspec(dllimport)
BOOL
__stdcall
CopyFileExA(
             LPCSTR lpExistingFileName,
             LPCSTR lpNewFileName,
         LPPROGRESS_ROUTINE lpProgressRoutine,
         LPVOID lpData,
    
      LPBOOL pbCancel,
             DWORD dwCopyFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileExW(
             LPCWSTR lpExistingFileName,
             LPCWSTR lpNewFileName,
         LPPROGRESS_ROUTINE lpProgressRoutine,
         LPVOID lpData,
    
      LPBOOL pbCancel,
             DWORD dwCopyFlags
    );




#line 6471 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedA(
          LPCSTR lpExistingFileName,
          LPCSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
      LPBOOL pbCancel,
          DWORD dwCopyFlags,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CopyFileTransactedW(
          LPCWSTR lpExistingFileName,
          LPCWSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
      LPBOOL pbCancel,
          DWORD dwCopyFlags,
          HANDLE hTransaction
    );




#line 6503 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6505 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6507 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family








typedef enum _COPYFILE2_MESSAGE_TYPE {
     COPYFILE2_CALLBACK_NONE = 0,
     COPYFILE2_CALLBACK_CHUNK_STARTED,
     COPYFILE2_CALLBACK_CHUNK_FINISHED,
     COPYFILE2_CALLBACK_STREAM_STARTED,
     COPYFILE2_CALLBACK_STREAM_FINISHED,
     COPYFILE2_CALLBACK_POLL_CONTINUE,
     COPYFILE2_CALLBACK_ERROR,
     COPYFILE2_CALLBACK_MAX,
} COPYFILE2_MESSAGE_TYPE;

typedef enum _COPYFILE2_MESSAGE_ACTION {
    COPYFILE2_PROGRESS_CONTINUE = 0,
    COPYFILE2_PROGRESS_CANCEL,
    COPYFILE2_PROGRESS_STOP,
    COPYFILE2_PROGRESS_QUIET,
    COPYFILE2_PROGRESS_PAUSE,
} COPYFILE2_MESSAGE_ACTION;

typedef enum _COPYFILE2_COPY_PHASE {
    COPYFILE2_PHASE_NONE = 0,
    COPYFILE2_PHASE_PREPARE_SOURCE,
    COPYFILE2_PHASE_PREPARE_DEST,
    COPYFILE2_PHASE_READ_SOURCE,
    COPYFILE2_PHASE_WRITE_DESTINATION,
    COPYFILE2_PHASE_SERVER_COPY,
    COPYFILE2_PHASE_NAMEGRAFT_COPY,
    
    COPYFILE2_PHASE_MAX,
} COPYFILE2_COPY_PHASE;



typedef struct COPYFILE2_MESSAGE {

    COPYFILE2_MESSAGE_TYPE  Type;
    DWORD                   dwPadding;

    union {

        struct {
            DWORD           dwStreamNumber; 
            DWORD           dwReserved;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliChunkNumber; 
            ULARGE_INTEGER  uliChunkSize;  
            ULARGE_INTEGER  uliStreamSize; 
            ULARGE_INTEGER  uliTotalFileSize; 
        } ChunkStarted;

        struct {
            DWORD           dwStreamNumber; 
            DWORD           dwFlags;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliChunkNumber; 
            ULARGE_INTEGER  uliChunkSize;  
            ULARGE_INTEGER  uliStreamSize; 
            ULARGE_INTEGER  uliStreamBytesTransferred; 
            ULARGE_INTEGER  uliTotalFileSize; 
            ULARGE_INTEGER  uliTotalBytesTransferred; 
        } ChunkFinished;

        struct {
            DWORD           dwStreamNumber;
            DWORD           dwReserved;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliStreamSize; 
            ULARGE_INTEGER  uliTotalFileSize; 
        } StreamStarted;

        struct {
            DWORD           dwStreamNumber;
            DWORD           dwReserved;
            HANDLE           hSourceFile; 
            HANDLE           hDestinationFile; 
            ULARGE_INTEGER  uliStreamSize;
            ULARGE_INTEGER  uliStreamBytesTransferred;
            ULARGE_INTEGER  uliTotalFileSize;
            ULARGE_INTEGER  uliTotalBytesTransferred;
        } StreamFinished;

        struct {
            DWORD           dwReserved;
        } PollContinue;

        struct {
            COPYFILE2_COPY_PHASE    CopyPhase;
            DWORD                   dwStreamNumber;
            HRESULT                 hrFailure;
            DWORD                   dwReserved;
            ULARGE_INTEGER          uliChunkNumber;
            ULARGE_INTEGER          uliStreamSize;
            ULARGE_INTEGER          uliStreamBytesTransferred;
            ULARGE_INTEGER          uliTotalFileSize;
            ULARGE_INTEGER          uliTotalBytesTransferred;
        } Error;

    } Info;

} COPYFILE2_MESSAGE;

typedef
COPYFILE2_MESSAGE_ACTION (__stdcall *PCOPYFILE2_PROGRESS_ROUTINE)(
         const COPYFILE2_MESSAGE     *pMessage,
     PVOID                       pvCallbackContext
);

typedef struct COPYFILE2_EXTENDED_PARAMETERS {
  DWORD                         dwSize;
  DWORD                         dwCopyFlags;
  BOOL                          *pfCancel;
  PCOPYFILE2_PROGRESS_ROUTINE   pProgressRoutine;
  PVOID                         pvCallbackContext;
} COPYFILE2_EXTENDED_PARAMETERS;

__declspec(dllimport)
HRESULT
__stdcall
CopyFile2(
         PCWSTR                          pwszExistingFileName,
         PCWSTR                          pwszNewFileName,
     COPYFILE2_EXTENDED_PARAMETERS   *pExtendedParameters
);

#line 6646 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6648 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#line 6651 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
MoveFileA(
      LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileW(
      LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName
    );




#line 6674 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



















#line 6694 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6696 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
BOOL
__stdcall
MoveFileExA(
          LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
          DWORD    dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileExW(
          LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
          DWORD    dwFlags
    );




#line 6722 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6724 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressA(
          LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileWithProgressW(
          LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags
    );




#line 6755 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 6756 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedA(
          LPCSTR lpExistingFileName,
      LPCSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
MoveFileTransactedW(
          LPCWSTR lpExistingFileName,
      LPCWSTR lpNewFileName,
      LPPROGRESS_ROUTINE lpProgressRoutine,
      LPVOID lpData,
          DWORD dwFlags,
          HANDLE hTransaction
    );




#line 6785 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 6786 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6788 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family









#line 6801 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6803 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family





__declspec(dllimport)
BOOL
__stdcall
ReplaceFileA(
            LPCSTR lpReplacedFileName,
            LPCSTR lpReplacementFileName,
        LPCSTR lpBackupFileName,
            DWORD    dwReplaceFlags,
      LPVOID   lpExclude,
      LPVOID  lpReserved
    );
__declspec(dllimport)
BOOL
__stdcall
ReplaceFileW(
            LPCWSTR lpReplacedFileName,
            LPCWSTR lpReplacementFileName,
        LPCWSTR lpBackupFileName,
            DWORD    dwReplaceFlags,
      LPVOID   lpExclude,
      LPVOID  lpReserved
    );




#line 6838 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 6839 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"







__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkA(
            LPCSTR lpFileName,
            LPCSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkW(
            LPCWSTR lpFileName,
            LPCWSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 6867 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6869 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"






__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedA(
            LPCSTR lpFileName,
            LPCSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            HANDLE hTransaction
    );
__declspec(dllimport)
BOOL
__stdcall
CreateHardLinkTransactedW(
            LPCWSTR lpFileName,
            LPCWSTR lpExistingFileName,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
            HANDLE hTransaction
    );




#line 6898 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 6900 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"








typedef enum _STREAM_INFO_LEVELS {

    FindStreamInfoStandard,
    FindStreamInfoMaxInfoLevel

} STREAM_INFO_LEVELS;

typedef struct _WIN32_FIND_STREAM_DATA {

    LARGE_INTEGER StreamSize;
    WCHAR cStreamName[ 260 + 36 ];

} WIN32_FIND_STREAM_DATA, *PWIN32_FIND_STREAM_DATA;

__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamW(
            LPCWSTR lpFileName,
            STREAM_INFO_LEVELS InfoLevel,
      LPVOID lpFindStreamData,
      DWORD dwFlags
    );


__declspec(dllimport)
HANDLE
__stdcall
FindFirstStreamTransactedW (
            LPCWSTR lpFileName,
            STREAM_INFO_LEVELS InfoLevel,
      LPVOID lpFindStreamData,
      DWORD dwFlags,
            HANDLE hTransaction
    );
#line 6944 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextStreamW(
       HANDLE hFindStream,
      LPVOID lpFindStreamData
    );
#line 6953 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameW (
         LPCWSTR lpFileName,
         DWORD dwFlags,
      LPDWORD StringLength,
      PWSTR LinkName
    );

__declspec(dllimport)
BOOL
__stdcall
FindNextFileNameW (
         HANDLE hFindStream,
      LPDWORD StringLength,
      PWSTR LinkName
    );

__declspec(dllimport)
HANDLE
__stdcall
FindFirstFileNameTransactedW (
          LPCWSTR lpFileName,
          DWORD dwFlags,
       LPDWORD StringLength,
      PWSTR LinkName,
      HANDLE hTransaction
    );

#line 6987 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
CreateNamedPipeA(
          LPCSTR lpName,
          DWORD dwOpenMode,
          DWORD dwPipeMode,
          DWORD nMaxInstances,
          DWORD nOutBufferSize,
          DWORD nInBufferSize,
          DWORD nDefaultTimeOut,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );


#line 7004 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateA(
           HANDLE hNamedPipe,
      LPDWORD lpState,
      LPDWORD lpCurInstances,
      LPDWORD lpMaxCollectionCount,
      LPDWORD lpCollectDataTimeout,
      LPSTR lpUserName,
           DWORD nMaxUserNameSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeHandleStateW(
           HANDLE hNamedPipe,
      LPDWORD lpState,
      LPDWORD lpCurInstances,
      LPDWORD lpMaxCollectionCount,
      LPDWORD lpCollectDataTimeout,
      LPWSTR lpUserName,
           DWORD nMaxUserNameSize
    );




#line 7034 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeA(
       LPCSTR lpNamedPipeName,
      LPVOID lpInBuffer,
       DWORD nInBufferSize,
      LPVOID lpOutBuffer,
       DWORD nOutBufferSize,
      LPDWORD lpBytesRead,
       DWORD nTimeOut
    );
__declspec(dllimport)
BOOL
__stdcall
CallNamedPipeW(
       LPCWSTR lpNamedPipeName,
      LPVOID lpInBuffer,
       DWORD nInBufferSize,
      LPVOID lpOutBuffer,
       DWORD nOutBufferSize,
      LPDWORD lpBytesRead,
       DWORD nTimeOut
    );




#line 7064 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
WaitNamedPipeA(
      LPCSTR lpNamedPipeName,
      DWORD nTimeOut
    );


#line 7075 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientComputerNameA(
      HANDLE Pipe,
       LPSTR ClientComputerName,
      ULONG ClientComputerNameLength
    );



#line 7091 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientProcessId(
      HANDLE Pipe,
      PULONG ClientProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeClientSessionId(
      HANDLE Pipe,
      PULONG ClientSessionId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerProcessId(
      HANDLE Pipe,
      PULONG ServerProcessId
    );

__declspec(dllimport)
BOOL
__stdcall
GetNamedPipeServerSessionId(
      HANDLE Pipe,
      PULONG ServerSessionId
    );

#line 7125 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelA(
      LPCSTR lpRootPathName,
      LPCSTR lpVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeLabelW(
      LPCWSTR lpRootPathName,
      LPCWSTR lpVolumeName
    );




#line 7145 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
void
__stdcall
SetFileApisToOEM( void );

__declspec(dllimport)
void
__stdcall
SetFileApisToANSI( void );

__declspec(dllimport)
BOOL
__stdcall
AreFileApisANSI( void );

__declspec(dllimport)
BOOL
__stdcall
GetVolumeInformationA(
       LPCSTR lpRootPathName,
      LPSTR lpVolumeNameBuffer,
           DWORD nVolumeNameSize,
      LPDWORD lpVolumeSerialNumber,
      LPDWORD lpMaximumComponentLength,
      LPDWORD lpFileSystemFlags,
      LPSTR lpFileSystemNameBuffer,
           DWORD nFileSystemNameSize
    );



#line 7178 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
SetFileBandwidthReservation(
       HANDLE  hFile,
       DWORD   nPeriodMilliseconds,
       DWORD   nBytesPerPeriod,
       BOOL    bDiscardable,
      LPDWORD lpTransferSize,
      LPDWORD lpNumOutstandingRequests
    );

__declspec(dllimport)
BOOL
__stdcall
GetFileBandwidthReservation(
       HANDLE  hFile,
      LPDWORD lpPeriodMilliseconds,
      LPDWORD lpBytesPerPeriod,
      LPBOOL  pDiscardable,
      LPDWORD lpTransferSize,
      LPDWORD lpNumOutstandingRequests
    );

#line 7206 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
ClearEventLogA (
          HANDLE hEventLog,
      LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
ClearEventLogW (
          HANDLE hEventLog,
      LPCWSTR lpBackupFileName
    );




#line 7230 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BackupEventLogA (
      HANDLE hEventLog,
      LPCSTR lpBackupFileName
    );
__declspec(dllimport)
BOOL
__stdcall
BackupEventLogW (
      HANDLE hEventLog,
      LPCWSTR lpBackupFileName
    );




#line 7250 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CloseEventLog (
      HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
DeregisterEventSource (
      HANDLE hEventLog
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyChangeEventLog(
      HANDLE  hEventLog,
      HANDLE  hEvent
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfEventLogRecords (
       HANDLE hEventLog,
      PDWORD NumberOfRecords
    );

__declspec(dllimport)
BOOL
__stdcall
GetOldestEventLogRecord (
       HANDLE hEventLog,
      PDWORD OldestRecord
    );

__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogA (
      LPCSTR lpUNCServerName,
          LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenEventLogW (
      LPCWSTR lpUNCServerName,
          LPCWSTR lpSourceName
    );




#line 7308 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceA (
      LPCSTR lpUNCServerName,
          LPCSTR lpSourceName
    );
__declspec(dllimport)
HANDLE
__stdcall
RegisterEventSourceW (
      LPCWSTR lpUNCServerName,
          LPCWSTR lpSourceName
    );




#line 7328 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogA (
      LPCSTR lpUNCServerName,
          LPCSTR lpFileName
    );
__declspec(dllimport)
HANDLE
__stdcall
OpenBackupEventLogW (
      LPCWSTR lpUNCServerName,
          LPCWSTR lpFileName
    );




#line 7348 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReadEventLogA (
       HANDLE     hEventLog,
       DWORD      dwReadFlags,
       DWORD      dwRecordOffset,
      LPVOID     lpBuffer,
       DWORD      nNumberOfBytesToRead,
      DWORD      *pnBytesRead,
      DWORD      *pnMinNumberOfBytesNeeded
    );
__declspec(dllimport)
BOOL
__stdcall
ReadEventLogW (
       HANDLE     hEventLog,
       DWORD      dwReadFlags,
       DWORD      dwRecordOffset,
      LPVOID     lpBuffer,
       DWORD      nNumberOfBytesToRead,
      DWORD      *pnBytesRead,
      DWORD      *pnMinNumberOfBytesNeeded
    );




#line 7378 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ReportEventA (
          HANDLE     hEventLog,
          WORD       wType,
          WORD       wCategory,
          DWORD      dwEventID,
      PSID       lpUserSid,
          WORD       wNumStrings,
          DWORD      dwDataSize,
      LPCSTR *lpStrings,
      LPVOID lpRawData
    );
__declspec(dllimport)
BOOL
__stdcall
ReportEventW (
          HANDLE     hEventLog,
          WORD       wType,
          WORD       wCategory,
          DWORD      dwEventID,
      PSID       lpUserSid,
          WORD       wNumStrings,
          DWORD      dwDataSize,
      LPCWSTR *lpStrings,
      LPVOID lpRawData
    );




#line 7412 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




typedef struct _EVENTLOG_FULL_INFORMATION
{
    DWORD    dwFull;
}
EVENTLOG_FULL_INFORMATION, *LPEVENTLOG_FULL_INFORMATION;

__declspec(dllimport)
BOOL
__stdcall
GetEventLogInformation (
       HANDLE     hEventLog,
       DWORD      dwInfoLevel,
      LPVOID lpBuffer,
       DWORD      cbBufSize,
      LPDWORD    pcbBytesNeeded
    );








typedef ULONG OPERATION_ID;





typedef struct _OPERATION_START_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_START_PARAMETERS, *POPERATION_START_PARAMETERS;







typedef struct _OPERATION_END_PARAMETERS {
    ULONG Version;
    OPERATION_ID OperationId;
    ULONG Flags;
} OPERATION_END_PARAMETERS, *POPERATION_END_PARAMETERS;



__declspec(dllimport)
BOOL
__stdcall
OperationStart (
      OPERATION_START_PARAMETERS* OperationStartParams
    );

__declspec(dllimport)
BOOL
__stdcall
OperationEnd (
      OPERATION_END_PARAMETERS* OperationEndParams
    );

#line 7481 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"







__declspec(dllimport)
BOOL
__stdcall
AccessCheckAndAuditAlarmA (
          LPCSTR SubsystemName,
      LPVOID HandleId,
          LPSTR ObjectTypeName,
      LPSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
          DWORD DesiredAccess,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
         LPDWORD GrantedAccess,
         LPBOOL AccessStatus,
         LPBOOL pfGenerateOnClose
    );


#line 7507 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeAndAuditAlarmA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          LPCSTR ObjectTypeName,
      LPCSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
          DWORD DesiredAccess,
          AUDIT_EVENT_TYPE AuditType,
          DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
          DWORD ObjectTypeListLength,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
         LPDWORD GrantedAccess,
         LPBOOL AccessStatus,
         LPBOOL pfGenerateOnClose
    );


#line 7534 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          LPCSTR ObjectTypeName,
      LPCSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
          DWORD DesiredAccess,
          AUDIT_EVENT_TYPE AuditType,
          DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
          DWORD ObjectTypeListLength,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
            LPDWORD GrantedAccess,
            LPDWORD AccessStatusList,
         LPBOOL pfGenerateOnClose
    );


#line 7559 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AccessCheckByTypeResultListAndAuditAlarmByHandleA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          HANDLE ClientToken,
          LPCSTR ObjectTypeName,
      LPCSTR ObjectName,
          PSECURITY_DESCRIPTOR SecurityDescriptor,
      PSID PrincipalSelfSid,
          DWORD DesiredAccess,
          AUDIT_EVENT_TYPE AuditType,
          DWORD Flags,
      POBJECT_TYPE_LIST ObjectTypeList,
          DWORD ObjectTypeListLength,
          PGENERIC_MAPPING GenericMapping,
          BOOL ObjectCreation,
            LPDWORD GrantedAccess,
            LPDWORD AccessStatusList,
         LPBOOL pfGenerateOnClose
    );


#line 7585 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 7586 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ObjectOpenAuditAlarmA (
          LPCSTR SubsystemName,
          LPVOID HandleId,
          LPSTR ObjectTypeName,
      LPSTR ObjectName,
          PSECURITY_DESCRIPTOR pSecurityDescriptor,
          HANDLE ClientToken,
          DWORD DesiredAccess,
          DWORD GrantedAccess,
      PPRIVILEGE_SET Privileges,
          BOOL ObjectCreation,
          BOOL AccessGranted,
         LPBOOL GenerateOnClose
    );


#line 7607 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ObjectPrivilegeAuditAlarmA (
      LPCSTR SubsystemName,
      LPVOID HandleId,
      HANDLE ClientToken,
      DWORD DesiredAccess,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );


#line 7622 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ObjectCloseAuditAlarmA (
      LPCSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );


#line 7634 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
ObjectDeleteAuditAlarmA (
      LPCSTR SubsystemName,
      LPVOID HandleId,
      BOOL GenerateOnClose
    );


#line 7646 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
PrivilegedServiceAuditAlarmA (
      LPCSTR SubsystemName,
      LPCSTR ServiceName,
      HANDLE ClientToken,
      PPRIVILEGE_SET Privileges,
      BOOL AccessGranted
    );


#line 7660 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
AddConditionalAce (
      PACL pAcl,
         DWORD dwAceRevision,
         DWORD AceFlags,
         UCHAR AceType,
         DWORD AccessMask,
         PSID pSid,
         PWCHAR ConditionStr,
      DWORD *ReturnLength
    );
#line 7676 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetFileSecurityA (
      LPCSTR lpFileName,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


#line 7688 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetFileSecurityA (
       LPCSTR lpFileName,
       SECURITY_INFORMATION RequestedInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
       DWORD nLength,
      LPDWORD lpnLengthNeeded
    );


#line 7702 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
ReadDirectoryChangesW(
             HANDLE hDirectory,
      LPVOID lpBuffer,
             DWORD nBufferLength,
             BOOL bWatchSubtree,
             DWORD dwNotifyFilter,
        LPDWORD lpBytesReturned,
      LPOVERLAPPED lpOverlapped,
         LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine
    );
#line 7718 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
  
LPVOID
__stdcall
MapViewOfFileExNuma(
          HANDLE hFileMappingObject,
          DWORD dwDesiredAccess,
          DWORD dwFileOffsetHigh,
          DWORD dwFileOffsetLow,
          SIZE_T dwNumberOfBytesToMap,
      LPVOID lpBaseAddress,
          DWORD nndPreferred
    );

#line 7736 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
IsBadReadPtr(
      const void *lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadWritePtr(
      LPVOID lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeReadPtr(
      const void *lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadHugeWritePtr(
      LPVOID lp,
          UINT_PTR ucb
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadCodePtr(
      FARPROC lpfn
    );

__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrA(
      LPCSTR lpsz,
          UINT_PTR ucchMax
    );
__declspec(dllimport)
BOOL
__stdcall
IsBadStringPtrW(
      LPCWSTR lpsz,
          UINT_PTR ucchMax
    );




#line 7795 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidA(
      LPCSTR lpSystemName,
      PSID Sid,
      LPSTR Name,
       LPDWORD cchName,
      LPSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidW(
      LPCWSTR lpSystemName,
      PSID Sid,
      LPWSTR Name,
       LPDWORD cchName,
      LPWSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );




#line 7825 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameA(
      LPCSTR lpSystemName,
          LPCSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameW(
      LPCWSTR lpSystemName,
          LPCWSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPWSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );




#line 7855 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameLocalA(
          LPCSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountNameLocalW(
          LPCWSTR lpAccountName,
      PSID Sid,
       LPDWORD cbSid,
      LPWSTR ReferencedDomainName,
       LPDWORD cchReferencedDomainName,
         PSID_NAME_USE peUse
    );




#line 7885 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidLocalA(
      PSID Sid,
      LPSTR Name,
       LPDWORD cchName,
      LPSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupAccountSidLocalW(
      PSID Sid,
      LPWSTR Name,
       LPDWORD cchName,
      LPWSTR ReferencedDomainName,
      LPDWORD cchReferencedDomainName,
      PSID_NAME_USE peUse
    );




#line 7913 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"























#line 7937 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueA(
      LPCSTR lpSystemName,
          LPCSTR lpName,
         PLUID   lpLuid
    );
__declspec(dllimport)
BOOL
__stdcall
LookupPrivilegeValueW(
      LPCWSTR lpSystemName,
          LPCWSTR lpName,
         PLUID   lpLuid
    );




#line 7959 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeNameA(
      LPCSTR lpSystemName,
          PLUID   lpLuid,
      LPSTR lpName,
       LPDWORD cchName
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeNameW(
      LPCWSTR lpSystemName,
          PLUID   lpLuid,
      LPWSTR lpName,
       LPDWORD cchName
    );




#line 7983 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeDisplayNameA(
      LPCSTR lpSystemName,
          LPCSTR lpName,
      LPSTR lpDisplayName,
       LPDWORD cchDisplayName,
         LPDWORD lpLanguageId
    );
__declspec(dllimport)
  BOOL
__stdcall
LookupPrivilegeDisplayNameW(
      LPCWSTR lpSystemName,
          LPCWSTR lpName,
      LPWSTR lpDisplayName,
       LPDWORD cchDisplayName,
         LPDWORD lpLanguageId
    );




#line 8009 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBA(
       LPCSTR lpDef,
      LPDCB lpDCB
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBW(
       LPCWSTR lpDef,
      LPDCB lpDCB
    );




#line 8029 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsA(
       LPCSTR lpDef,
      LPDCB lpDCB,
      LPCOMMTIMEOUTS lpCommTimeouts
    );
__declspec(dllimport)
BOOL
__stdcall
BuildCommDCBAndTimeoutsW(
       LPCWSTR lpDef,
      LPDCB lpDCB,
      LPCOMMTIMEOUTS lpCommTimeouts
    );




#line 8051 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogA(
          LPCSTR lpszName,
      HWND hWnd,
       LPCOMMCONFIG lpCC
    );
__declspec(dllimport)
BOOL
__stdcall
CommConfigDialogW(
          LPCWSTR lpszName,
      HWND hWnd,
       LPCOMMCONFIG lpCC
    );




#line 8073 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigA(
         LPCSTR lpszName,
      LPCOMMCONFIG lpCC,
      LPDWORD lpdwSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetDefaultCommConfigW(
         LPCWSTR lpszName,
      LPCOMMCONFIG lpCC,
      LPDWORD lpdwSize
    );




#line 8095 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigA(
      LPCSTR lpszName,
      LPCOMMCONFIG lpCC,
      DWORD dwSize
    );
__declspec(dllimport)
BOOL
__stdcall
SetDefaultCommConfigW(
      LPCWSTR lpszName,
      LPCOMMCONFIG lpCC,
      DWORD dwSize
    );




#line 8117 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





#line 8123 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameA (
      LPSTR lpBuffer,
      LPDWORD nSize
    );
__declspec(dllimport)
 
BOOL
__stdcall
GetComputerNameW (
      LPWSTR lpBuffer,
      LPDWORD nSize
    );




#line 8145 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
SetComputerNameA (
      LPCSTR lpComputerName
    );
__declspec(dllimport)
BOOL
__stdcall
SetComputerNameW (
      LPCWSTR lpComputerName
    );




#line 8163 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




__declspec(dllimport)
BOOL
__stdcall
SetComputerNameExA (
      COMPUTER_NAME_FORMAT NameType,
      LPCTSTR lpBuffer
    );


#line 8177 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


__declspec(dllimport)
 
BOOL
__stdcall
DnsHostnameToComputerNameA (
         LPCSTR Hostname,
      LPSTR ComputerName,
      LPDWORD nSize
    );
__declspec(dllimport)
 
BOOL
__stdcall
DnsHostnameToComputerNameW (
         LPCWSTR Hostname,
      LPWSTR ComputerName,
      LPDWORD nSize
    );




#line 8202 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 8204 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetUserNameA (
      LPSTR lpBuffer,
      LPDWORD pcbBuffer
    );
__declspec(dllimport)
BOOL
__stdcall
GetUserNameW (
      LPWSTR lpBuffer,
      LPDWORD pcbBuffer
    );




#line 8224 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"













#line 8238 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





#line 8244 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


#line 8247 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


#line 8250 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
LogonUserA (
             LPCSTR lpszUsername,
         LPCSTR lpszDomain,
         LPCSTR lpszPassword,
             DWORD dwLogonType,
             DWORD dwLogonProvider,
     PHANDLE phToken
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserW (
             LPCWSTR lpszUsername,
         LPCWSTR lpszDomain,
         LPCWSTR lpszPassword,
             DWORD dwLogonType,
             DWORD dwLogonProvider,
     PHANDLE phToken
    );




#line 8280 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
LogonUserExA (
                 LPCSTR lpszUsername,
             LPCSTR lpszDomain,
             LPCSTR lpszPassword,
                 DWORD dwLogonType,
                 DWORD dwLogonProvider,
     PHANDLE phToken,
     PSID  *ppLogonSid,
     PVOID *ppProfileBuffer,
            LPDWORD pdwProfileLength,
            PQUOTA_LIMITS pQuotaLimits
    );
__declspec(dllimport)
BOOL
__stdcall
LogonUserExW (
                 LPCWSTR lpszUsername,
             LPCWSTR lpszDomain,
             LPCWSTR lpszPassword,
                 DWORD dwLogonType,
                 DWORD dwLogonProvider,
     PHANDLE phToken,
     PSID  *ppLogonSid,
     PVOID *ppProfileBuffer,
            LPDWORD pdwProfileLength,
            PQUOTA_LIMITS pQuotaLimits
    );




#line 8316 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





#line 8322 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
CreateProcessAsUserA (
         HANDLE hToken,
         LPCSTR lpApplicationName,
      LPSTR lpCommandLine,
         LPSECURITY_ATTRIBUTES lpProcessAttributes,
         LPSECURITY_ATTRIBUTES lpThreadAttributes,
             BOOL bInheritHandles,
             DWORD dwCreationFlags,
         LPVOID lpEnvironment,
         LPCSTR lpCurrentDirectory,
             LPSTARTUPINFOA lpStartupInfo,
            LPPROCESS_INFORMATION lpProcessInformation
    );


#line 8342 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"











__declspec(dllimport)
  BOOL
__stdcall
CreateProcessWithLogonW(
             LPCWSTR lpUsername,
         LPCWSTR lpDomain,
             LPCWSTR lpPassword,
             DWORD dwLogonFlags,
         LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
             DWORD dwCreationFlags,
         LPVOID lpEnvironment,
         LPCWSTR lpCurrentDirectory,
             LPSTARTUPINFOW lpStartupInfo,
            LPPROCESS_INFORMATION lpProcessInformation
      );

__declspec(dllimport)
  BOOL
__stdcall
CreateProcessWithTokenW(
             HANDLE hToken,
             DWORD dwLogonFlags,
         LPCWSTR lpApplicationName,
      LPWSTR lpCommandLine,
             DWORD dwCreationFlags,
         LPVOID lpEnvironment,
         LPCWSTR lpCurrentDirectory,
             LPSTARTUPINFOW lpStartupInfo,
            LPPROCESS_INFORMATION lpProcessInformation
      );

#line 8386 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
IsTokenUntrusted(
      HANDLE TokenHandle
    );







__declspec(dllimport)
BOOL
__stdcall
RegisterWaitForSingleObject(
     PHANDLE phNewWaitObject,
             HANDLE hObject,
             WAITORTIMERCALLBACK Callback,
         PVOID Context,
             ULONG dwMilliseconds,
             ULONG dwFlags
    );

__declspec(dllimport)
 
BOOL
__stdcall
UnregisterWait(
      HANDLE WaitHandle
    );

__declspec(dllimport)
BOOL
__stdcall
BindIoCompletionCallback (
      HANDLE FileHandle,
      LPOVERLAPPED_COMPLETION_ROUTINE Function,
      ULONG Flags
    );

__declspec(dllimport)
HANDLE
__stdcall
SetTimerQueueTimer(
      HANDLE TimerQueue,
          WAITORTIMERCALLBACK Callback,
      PVOID Parameter,
          DWORD DueTime,
          DWORD Period,
          BOOL PreferIo
    );

__declspec(dllimport)
 
BOOL
__stdcall
CancelTimerQueueTimer(
      HANDLE TimerQueue,
          HANDLE Timer
    );

__declspec(dllimport)
 
BOOL
__stdcall
DeleteTimerQueue(
      HANDLE TimerQueue
    );





__forceinline
void
InitializeThreadpoolEnvironment(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpInitializeCallbackEnviron(pcbe);
}

__forceinline
void
SetThreadpoolCallbackPool(
      PTP_CALLBACK_ENVIRON pcbe,
         PTP_POOL             ptpp
    )
{
    TpSetCallbackThreadpool(pcbe, ptpp);
}

__forceinline
void
SetThreadpoolCallbackCleanupGroup(
       PTP_CALLBACK_ENVIRON              pcbe,
          PTP_CLEANUP_GROUP                 ptpcg,
      PTP_CLEANUP_GROUP_CANCEL_CALLBACK pfng
    )
{
    TpSetCallbackCleanupGroup(pcbe, ptpcg, pfng);
}

__forceinline
void
SetThreadpoolCallbackRunsLong(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackLongFunction(pcbe);
}

__forceinline
void
SetThreadpoolCallbackLibrary(
      PTP_CALLBACK_ENVIRON pcbe,
         PVOID                mod
    )
{
    TpSetCallbackRaceWithDll(pcbe, mod);
}



__forceinline
void
SetThreadpoolCallbackPriority(
      PTP_CALLBACK_ENVIRON pcbe,
         TP_CALLBACK_PRIORITY Priority
    )
{
    TpSetCallbackPriority(pcbe, Priority);
}

#line 8524 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__forceinline
void
SetThreadpoolCallbackPersistent(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpSetCallbackPersistent(pcbe);
}

__forceinline
void
DestroyThreadpoolEnvironment(
      PTP_CALLBACK_ENVIRON pcbe
    )
{
    TpDestroyCallbackEnviron(pcbe);
}

#line 8544 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





__declspec(dllimport)
 
HANDLE
__stdcall
CreatePrivateNamespaceA(
      LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,
          LPVOID lpBoundaryDescriptor,
          LPCSTR lpAliasPrefix
    );





#line 8564 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenPrivateNamespaceA(
          LPVOID lpBoundaryDescriptor,
          LPCSTR lpAliasPrefix
    );





#line 8579 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"






__declspec(dllimport)
 
HANDLE
__stdcall
CreateBoundaryDescriptorA(
      LPCSTR Name,
      ULONG Flags
    );





#line 8599 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
AddIntegrityLabelToBoundaryDescriptor(
      HANDLE * BoundaryDescriptor,
      PSID IntegrityLabel
    );


#line 8611 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 8613 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
















typedef struct tagHW_PROFILE_INFOA {
    DWORD  dwDockInfo;
    CHAR   szHwProfileGuid[39];
    CHAR   szHwProfileName[80];
} HW_PROFILE_INFOA, *LPHW_PROFILE_INFOA;
typedef struct tagHW_PROFILE_INFOW {
    DWORD  dwDockInfo;
    WCHAR  szHwProfileGuid[39];
    WCHAR  szHwProfileName[80];
} HW_PROFILE_INFOW, *LPHW_PROFILE_INFOW;




typedef HW_PROFILE_INFOA HW_PROFILE_INFO;
typedef LPHW_PROFILE_INFOA LPHW_PROFILE_INFO;
#line 8646 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileA (
      LPHW_PROFILE_INFOA  lpHwProfileInfo
    );
__declspec(dllimport)
BOOL
__stdcall
GetCurrentHwProfileW (
      LPHW_PROFILE_INFOW  lpHwProfileInfo
    );




#line 8665 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 8666 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoA(
      LPOSVERSIONINFOEXA lpVersionInformation,
         DWORD dwTypeMask,
         DWORDLONG dwlConditionMask
    );
__declspec(dllimport)
BOOL
__stdcall
VerifyVersionInfoW(
      LPOSVERSIONINFOEXW lpVersionInformation,
         DWORD dwTypeMask,
         DWORDLONG dwlConditionMask
    );




#line 8688 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


#line 8691 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion





#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winerror.h"












#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winerror.h"


































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21938 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winerror.h"











































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 25982 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winerror.h"


__forceinline HRESULT HRESULT_FROM_WIN32(unsigned long x) { return (HRESULT)(x) <= 0 ? (HRESULT)(x) : (HRESULT) (((x) & 0x0000FFFF) | (7 << 16) | 0x80000000);}


#line 25988 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winerror.h"










































#line 26031 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winerror.h"


























































































































































































#line 26218 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winerror.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































 
 
 
 
 



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 45072 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winerror.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 52798 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winerror.h"

#line 8698 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"
 










#pragma once
#line 14 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"











#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"


extern "C" {
#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"



#pragma region Application Family







typedef struct _TIME_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
} TIME_ZONE_INFORMATION, *PTIME_ZONE_INFORMATION, *LPTIME_ZONE_INFORMATION;

typedef struct _TIME_DYNAMIC_ZONE_INFORMATION {
    LONG Bias;
    WCHAR StandardName[ 32 ];
    SYSTEMTIME StandardDate;
    LONG StandardBias;
    WCHAR DaylightName[ 32 ];
    SYSTEMTIME DaylightDate;
    LONG DaylightBias;
    WCHAR TimeZoneKeyName[ 128 ];
    BOOLEAN DynamicDaylightTimeDisabled;
} DYNAMIC_TIME_ZONE_INFORMATION, *PDYNAMIC_TIME_ZONE_INFORMATION;

__declspec(dllimport)
 
BOOL
__stdcall
SystemTimeToTzSpecificLocalTime(
      const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
      const SYSTEMTIME * lpUniversalTime,
      LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
TzSpecificLocalTimeToSystemTime(
      const TIME_ZONE_INFORMATION * lpTimeZoneInformation,
      const SYSTEMTIME * lpLocalTime,
      LPSYSTEMTIME lpUniversalTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
FileTimeToSystemTime(
      const FILETIME * lpFileTime,
      LPSYSTEMTIME lpSystemTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
SystemTimeToFileTime(
      const SYSTEMTIME * lpSystemTime,
      LPFILETIME lpFileTime
    );


__declspec(dllimport)
 
DWORD
__stdcall
GetTimeZoneInformation(
      LPTIME_ZONE_INFORMATION lpTimeZoneInformation
    );


#line 121 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SetTimeZoneInformation(
      const TIME_ZONE_INFORMATION * lpTimeZoneInformation
    );





__declspec(dllimport)
BOOL
__stdcall
SetDynamicTimeZoneInformation(
      const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation
    );


#line 147 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"

#line 149 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"
#pragma endregion

#pragma region Application Family






__declspec(dllimport)
 
DWORD
__stdcall
GetDynamicTimeZoneInformation(
      PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation
    );


#line 168 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"




 
BOOL
__stdcall
GetTimeZoneInformationForYear(
      USHORT wYear,
      PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,
      LPTIME_ZONE_INFORMATION ptzi
    );


#line 183 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"






__declspec(dllimport)
 
DWORD
__stdcall
EnumDynamicTimeZoneInformation(
      const DWORD dwIndex,
      PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation
    );


__declspec(dllimport)
 
DWORD
__stdcall
GetDynamicTimeZoneInformationEffectiveYears(
      const PDYNAMIC_TIME_ZONE_INFORMATION lpTimeZoneInformation,
      LPDWORD FirstYear,
      LPDWORD LastYear
    );


__declspec(dllimport)
 
BOOL
__stdcall
SystemTimeToTzSpecificLocalTimeEx(
      const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,
      const SYSTEMTIME * lpUniversalTime,
      LPSYSTEMTIME lpLocalTime
    );


__declspec(dllimport)
 
BOOL
__stdcall
TzSpecificLocalTimeToSystemTimeEx(
      const DYNAMIC_TIME_ZONE_INFORMATION * lpTimeZoneInformation,
      const SYSTEMTIME * lpLocalTime,
      LPSYSTEMTIME lpUniversalTime
    );


#line 233 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"

#line 235 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"
#pragma endregion




}
#line 242 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"

#line 244 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timezoneapi.h"

#line 8699 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#pragma region Desktop Family






























typedef struct _SYSTEM_POWER_STATUS {
    BYTE ACLineStatus;
    BYTE BatteryFlag;
    BYTE BatteryLifePercent;
    BYTE Reserved1;
    DWORD BatteryLifeTime;
    DWORD BatteryFullLifeTime;
}   SYSTEM_POWER_STATUS, *LPSYSTEM_POWER_STATUS;

__declspec(dllimport)
BOOL
__stdcall
GetSystemPowerStatus(
      LPSYSTEM_POWER_STATUS lpSystemPowerStatus
    );

__declspec(dllimport)
BOOL
__stdcall
SetSystemPowerState(
      BOOL fSuspend,
      BOOL fForce
    );

#line 8756 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




typedef
void
__stdcall
BAD_MEMORY_CALLBACK_ROUTINE(
    void
    );

typedef BAD_MEMORY_CALLBACK_ROUTINE *PBAD_MEMORY_CALLBACK_ROUTINE;

__declspec(dllimport)
PVOID
__stdcall
RegisterBadMemoryNotification(
      PBAD_MEMORY_CALLBACK_ROUTINE Callback
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterBadMemoryNotification(
      PVOID RegistrationHandle
    );



__declspec(dllimport)
BOOL
__stdcall
GetMemoryErrorHandlingCapabilities(
      PULONG Capabilities
    );

#line 8793 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"






__declspec(dllimport)
BOOL
__stdcall
AllocateUserPhysicalPages(
         HANDLE hProcess,
      PULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );



__declspec(dllimport)
BOOL
__stdcall
AllocateUserPhysicalPagesNuma(
         HANDLE hProcess,
      PULONG_PTR NumberOfPages,
      PULONG_PTR PageArray,
         DWORD nndPreferred
    );

#line 8821 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FreeUserPhysicalPages(
         HANDLE hProcess,
      PULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );

__declspec(dllimport)
BOOL
__stdcall
MapUserPhysicalPages(
      PVOID VirtualAddress,
      ULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );

__declspec(dllimport)
BOOL
__stdcall
MapUserPhysicalPagesScatter(
      PVOID *VirtualAddresses,
      ULONG_PTR NumberOfPages,
      PULONG_PTR PageArray
    );

__declspec(dllimport)
 
HANDLE
__stdcall
CreateJobObjectA(
      LPSECURITY_ATTRIBUTES lpJobAttributes,
      LPCSTR lpName
    );
__declspec(dllimport)
 
HANDLE
__stdcall
CreateJobObjectW(
      LPSECURITY_ATTRIBUTES lpJobAttributes,
      LPCWSTR lpName
    );




#line 8870 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
 
HANDLE
__stdcall
OpenJobObjectA(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCSTR lpName
    );
__declspec(dllimport)
 
HANDLE
__stdcall
OpenJobObjectW(
      DWORD dwDesiredAccess,
      BOOL bInheritHandle,
      LPCWSTR lpName
    );




#line 8894 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
AssignProcessToJobObject(
      HANDLE hJob,
      HANDLE hProcess
    );

__declspec(dllimport)
BOOL
__stdcall
TerminateJobObject(
      HANDLE hJob,
      UINT uExitCode
    );

__declspec(dllimport)
BOOL
__stdcall
QueryInformationJobObject(
       HANDLE hJob,
           JOBOBJECTINFOCLASS JobObjectInformationClass,
      LPVOID lpJobObjectInformation,
           DWORD cbJobObjectInformationLength,
      LPDWORD lpReturnLength
    );

__declspec(dllimport)
BOOL
__stdcall
SetInformationJobObject(
      HANDLE hJob,
      JOBOBJECTINFOCLASS JobObjectInformationClass,
      LPVOID lpJobObjectInformation,
      DWORD cbJobObjectInformationLength
    );

__declspec(dllimport)
BOOL
__stdcall
CreateJobSet (
      ULONG NumJob,
      PJOB_SET_ARRAY UserJobSet,
      ULONG Flags);

__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeA(
      LPSTR lpszVolumeName,
      DWORD cchBufferLength
    );


#line 8950 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeA(
      HANDLE hFindVolume,
      LPSTR lpszVolumeName,
         DWORD cchBufferLength
    );


#line 8962 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointA(
      LPCSTR lpszRootPathName,
      LPSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );
__declspec(dllimport)
HANDLE
__stdcall
FindFirstVolumeMountPointW(
      LPCWSTR lpszRootPathName,
      LPWSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );




#line 8984 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointA(
      HANDLE hFindVolumeMountPoint,
      LPSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );
__declspec(dllimport)
BOOL
__stdcall
FindNextVolumeMountPointW(
      HANDLE hFindVolumeMountPoint,
      LPWSTR lpszVolumeMountPoint,
      DWORD cchBufferLength
    );




#line 9006 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindVolumeMountPointClose(
      HANDLE hFindVolumeMountPoint
    );

__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointA(
      LPCSTR lpszVolumeMountPoint,
      LPCSTR lpszVolumeName
    );
__declspec(dllimport)
BOOL
__stdcall
SetVolumeMountPointW(
      LPCWSTR lpszVolumeMountPoint,
      LPCWSTR lpszVolumeName
    );




#line 9033 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteVolumeMountPointA(
      LPCSTR lpszVolumeMountPoint
    );


#line 9043 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetVolumeNameForVolumeMountPointA(
      LPCSTR lpszVolumeMountPoint,
      LPSTR lpszVolumeName,
      DWORD cchBufferLength
    );


#line 9055 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNameA(
      LPCSTR lpszFileName,
      LPSTR lpszVolumePathName,
      DWORD cchBufferLength
    );


#line 9067 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 9069 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetVolumePathNamesForVolumeNameA(
       LPCSTR lpszVolumeName,
         LPCH lpszVolumePathNames,
       DWORD cchBufferLength,
      PDWORD lpcchReturnLength
    );



#line 9085 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 9087 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"












typedef struct tagACTCTXA {
    ULONG       cbSize;
    DWORD       dwFlags;
    LPCSTR      lpSource;
    USHORT      wProcessorArchitecture;
    LANGID      wLangId;
    LPCSTR      lpAssemblyDirectory;
    LPCSTR      lpResourceName;
    LPCSTR      lpApplicationName;
    HMODULE     hModule;
} ACTCTXA, *PACTCTXA;
typedef struct tagACTCTXW {
    ULONG       cbSize;
    DWORD       dwFlags;
    LPCWSTR     lpSource;
    USHORT      wProcessorArchitecture;
    LANGID      wLangId;
    LPCWSTR     lpAssemblyDirectory;
    LPCWSTR     lpResourceName;
    LPCWSTR     lpApplicationName;
    HMODULE     hModule;
} ACTCTXW, *PACTCTXW;




typedef ACTCTXA ACTCTX;
typedef PACTCTXA PACTCTX;
#line 9128 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

typedef const ACTCTXA *PCACTCTXA;
typedef const ACTCTXW *PCACTCTXW;



typedef PCACTCTXA PCACTCTX;
#line 9136 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxA(
      PCACTCTXA pActCtx
    );
__declspec(dllimport)
HANDLE
__stdcall
CreateActCtxW(
      PCACTCTXW pActCtx
    );




#line 9156 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
void
__stdcall
AddRefActCtx(
      HANDLE hActCtx
    );


__declspec(dllimport)
void
__stdcall
ReleaseActCtx(
      HANDLE hActCtx
    );

__declspec(dllimport)
BOOL
__stdcall
ZombifyActCtx(
      HANDLE hActCtx
    );


 
__declspec(dllimport)
BOOL
__stdcall
ActivateActCtx(
      HANDLE hActCtx,
        ULONG_PTR *lpCookie
    );




 
__declspec(dllimport)
BOOL
__stdcall
DeactivateActCtx(
      DWORD dwFlags,
      ULONG_PTR ulCookie
    );

__declspec(dllimport)
BOOL
__stdcall
GetCurrentActCtx(
     HANDLE *lphActCtx);


typedef struct tagACTCTX_SECTION_KEYED_DATA_2600 {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;
} ACTCTX_SECTION_KEYED_DATA_2600, *PACTCTX_SECTION_KEYED_DATA_2600;
typedef const ACTCTX_SECTION_KEYED_DATA_2600 * PCACTCTX_SECTION_KEYED_DATA_2600;

typedef struct tagACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA {
    PVOID lpInformation;
    PVOID lpSectionBase;
    ULONG ulSectionLength;
    PVOID lpSectionGlobalDataBase;
    ULONG ulSectionGlobalDataLength;
} ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA, *PACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;
typedef const ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA *PCACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA;

typedef struct tagACTCTX_SECTION_KEYED_DATA {
    ULONG cbSize;
    ULONG ulDataFormatVersion;
    PVOID lpData;
    ULONG ulLength;
    PVOID lpSectionGlobalData;
    ULONG ulSectionGlobalDataLength;
    PVOID lpSectionBase;
    ULONG ulSectionTotalLength;
    HANDLE hActCtx;
    ULONG ulAssemblyRosterIndex;

    ULONG ulFlags;
    ACTCTX_SECTION_KEYED_DATA_ASSEMBLY_METADATA AssemblyMetadata;
} ACTCTX_SECTION_KEYED_DATA, *PACTCTX_SECTION_KEYED_DATA;
typedef const ACTCTX_SECTION_KEYED_DATA * PCACTCTX_SECTION_KEYED_DATA;







 
__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringA(
            DWORD dwFlags,
      const GUID *lpExtensionGuid,
            ULONG ulSectionId,
            LPCSTR lpStringToFind,
           PACTCTX_SECTION_KEYED_DATA ReturnedData
    );
 
__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionStringW(
            DWORD dwFlags,
      const GUID *lpExtensionGuid,
            ULONG ulSectionId,
            LPCWSTR lpStringToFind,
           PACTCTX_SECTION_KEYED_DATA ReturnedData
    );




#line 9281 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
FindActCtxSectionGuid(
            DWORD dwFlags,
      const GUID *lpExtensionGuid,
            ULONG ulSectionId,
        const GUID *lpGuidToFind,
           PACTCTX_SECTION_KEYED_DATA ReturnedData
    );





typedef struct _ACTIVATION_CONTEXT_BASIC_INFORMATION {
    HANDLE  hActCtx;
    DWORD   dwFlags;
} ACTIVATION_CONTEXT_BASIC_INFORMATION, *PACTIVATION_CONTEXT_BASIC_INFORMATION;

typedef const struct _ACTIVATION_CONTEXT_BASIC_INFORMATION *PCACTIVATION_CONTEXT_BASIC_INFORMATION;



#line 9307 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 9308 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




































 
__declspec(dllimport)
BOOL
__stdcall
QueryActCtxW(
           DWORD dwFlags,
           HANDLE hActCtx,
       PVOID pvSubInstance,
           ULONG ulInfoClass,
      PVOID pvBuffer,
           SIZE_T cbBuffer,
      SIZE_T *pcbWrittenOrRequired
    );

typedef   BOOL (__stdcall * PQUERYACTCTXW_FUNC)(
           DWORD dwFlags,
           HANDLE hActCtx,
       PVOID pvSubInstance,
           ULONG ulInfoClass,
      PVOID pvBuffer,
           SIZE_T cbBuffer,
      SIZE_T *pcbWrittenOrRequired
    );

#line 9369 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




__declspec(dllimport)
DWORD
__stdcall
WTSGetActiveConsoleSessionId(
    void
    );

#line 9381 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
WORD
__stdcall
GetActiveProcessorGroupCount(
    void
    );

__declspec(dllimport)
WORD
__stdcall
GetMaximumProcessorGroupCount(
    void
    );

__declspec(dllimport)
DWORD
__stdcall
GetActiveProcessorCount(
      WORD GroupNumber
    );

__declspec(dllimport)
DWORD
__stdcall
GetMaximumProcessorCount(
      WORD GroupNumber
    );

#line 9413 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNode(
       UCHAR Processor,
      PUCHAR NodeNumber
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeNumberFromHandle(
       HANDLE hFile,
      PUSHORT NodeNumber
    );

#line 9437 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetNumaProcessorNodeEx(
       PPROCESSOR_NUMBER Processor,
      PUSHORT NodeNumber
    );

#line 9449 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOL
__stdcall
GetNumaNodeProcessorMask(
       UCHAR Node,
      PULONGLONG ProcessorMask
    );

__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNode(
       UCHAR Node,
      PULONGLONG AvailableBytes
    );



__declspec(dllimport)
BOOL
__stdcall
GetNumaAvailableMemoryNodeEx(
       USHORT Node,
      PULONGLONG AvailableBytes
    );

#line 9477 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNode(
       ULONG ProximityId,
      PUCHAR NodeNumber
    );

#line 9489 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
GetNumaProximityNodeEx(
       ULONG ProximityId,
      PUSHORT NodeNumber
    );

#line 9501 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




typedef DWORD (__stdcall *APPLICATION_RECOVERY_CALLBACK)(PVOID pvParameter);































__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRecoveryCallback(
       APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,
       PVOID pvParameter,
      DWORD dwPingInterval,
      DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRecoveryCallback(void);

__declspec(dllimport)
HRESULT
__stdcall
RegisterApplicationRestart(
      PCWSTR pwzCommandline,
      DWORD dwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
UnregisterApplicationRestart(void);

__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRecoveryCallback(
       HANDLE hProcess,
      APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,
     PVOID* ppvParameter,
      PDWORD pdwPingInterval,
      PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
GetApplicationRestartSettings(
      HANDLE hProcess,
      PWSTR pwzCommandline,
      PDWORD pcchSize,
      PDWORD pdwFlags
    );

__declspec(dllimport)
HRESULT
__stdcall
ApplicationRecoveryInProgress(
      PBOOL pbCancelled
    );

__declspec(dllimport)
void
__stdcall
ApplicationRecoveryFinished(
      BOOL bSuccess
    );

#line 9601 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 9603 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion



#pragma region Application Family


typedef struct _FILE_BASIC_INFO {
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    DWORD FileAttributes;
} FILE_BASIC_INFO, *PFILE_BASIC_INFO;

typedef struct _FILE_STANDARD_INFO {
    LARGE_INTEGER AllocationSize;
    LARGE_INTEGER EndOfFile;
    DWORD NumberOfLinks;
    BOOLEAN DeletePending;
    BOOLEAN Directory;
} FILE_STANDARD_INFO, *PFILE_STANDARD_INFO;

typedef struct _FILE_NAME_INFO {
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_NAME_INFO, *PFILE_NAME_INFO;

typedef struct _FILE_RENAME_INFO {
    BOOLEAN ReplaceIfExists;
    HANDLE RootDirectory;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FILE_RENAME_INFO, *PFILE_RENAME_INFO;

typedef struct _FILE_ALLOCATION_INFO {
    LARGE_INTEGER AllocationSize;
} FILE_ALLOCATION_INFO, *PFILE_ALLOCATION_INFO;

typedef struct _FILE_END_OF_FILE_INFO {
    LARGE_INTEGER EndOfFile;
} FILE_END_OF_FILE_INFO, *PFILE_END_OF_FILE_INFO;

typedef struct _FILE_STREAM_INFO {
    DWORD NextEntryOffset;
    DWORD StreamNameLength;
    LARGE_INTEGER StreamSize;
    LARGE_INTEGER StreamAllocationSize;
    WCHAR StreamName[1];
} FILE_STREAM_INFO, *PFILE_STREAM_INFO;

typedef struct _FILE_COMPRESSION_INFO {
    LARGE_INTEGER CompressedFileSize;
    WORD CompressionFormat;
    UCHAR CompressionUnitShift;
    UCHAR ChunkShift;
    UCHAR ClusterShift;
    UCHAR Reserved[3];
} FILE_COMPRESSION_INFO, *PFILE_COMPRESSION_INFO;

typedef struct _FILE_ATTRIBUTE_TAG_INFO {
    DWORD FileAttributes;
    DWORD ReparseTag;
} FILE_ATTRIBUTE_TAG_INFO, *PFILE_ATTRIBUTE_TAG_INFO;

typedef struct _FILE_DISPOSITION_INFO {
    BOOLEAN DeleteFileA;
} FILE_DISPOSITION_INFO, *PFILE_DISPOSITION_INFO;

typedef struct _FILE_ID_BOTH_DIR_INFO {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    DWORD FileAttributes;
    DWORD FileNameLength;
    DWORD EaSize;
    CCHAR ShortNameLength;
    WCHAR ShortName[12];
    LARGE_INTEGER FileId;
    WCHAR FileName[1];
} FILE_ID_BOTH_DIR_INFO, *PFILE_ID_BOTH_DIR_INFO;

typedef struct _FILE_FULL_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    WCHAR FileName[1];
} FILE_FULL_DIR_INFO, *PFILE_FULL_DIR_INFO;

typedef enum _PRIORITY_HINT {
      IoPriorityHintVeryLow = 0,
      IoPriorityHintLow,
      IoPriorityHintNormal,
      MaximumIoPriorityHintType
} PRIORITY_HINT;

typedef struct _FILE_IO_PRIORITY_HINT_INFO {
    PRIORITY_HINT PriorityHint;
} FILE_IO_PRIORITY_HINT_INFO, *PFILE_IO_PRIORITY_HINT_INFO;





typedef struct _FILE_ALIGNMENT_INFO {
    ULONG AlignmentRequirement;
} FILE_ALIGNMENT_INFO, *PFILE_ALIGNMENT_INFO;




















typedef struct _FILE_STORAGE_INFO {
    ULONG LogicalBytesPerSector;
    ULONG PhysicalBytesPerSectorForAtomicity;
    ULONG PhysicalBytesPerSectorForPerformance;
    ULONG FileSystemEffectivePhysicalBytesPerSectorForAtomicity;
    ULONG Flags;
    ULONG ByteOffsetForSectorAlignment;
    ULONG ByteOffsetForPartitionAlignment;
} FILE_STORAGE_INFO, *PFILE_STORAGE_INFO;




typedef struct _FILE_ID_INFO {
    ULONGLONG VolumeSerialNumber;
    FILE_ID_128 FileId;
} FILE_ID_INFO, *PFILE_ID_INFO;




typedef struct _FILE_ID_EXTD_DIR_INFO {
    ULONG NextEntryOffset;
    ULONG FileIndex;
    LARGE_INTEGER CreationTime;
    LARGE_INTEGER LastAccessTime;
    LARGE_INTEGER LastWriteTime;
    LARGE_INTEGER ChangeTime;
    LARGE_INTEGER EndOfFile;
    LARGE_INTEGER AllocationSize;
    ULONG FileAttributes;
    ULONG FileNameLength;
    ULONG EaSize;
    ULONG ReparsePointTag;
    FILE_ID_128 FileId;
    WCHAR FileName[1];
} FILE_ID_EXTD_DIR_INFO, *PFILE_ID_EXTD_DIR_INFO;

#line 9782 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"












#line 9795 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"









#line 9805 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"










#line 9816 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

typedef struct _FILE_REMOTE_PROTOCOL_INFO
{
    
    USHORT StructureVersion;     
    USHORT StructureSize;        

    ULONG  Protocol;             

    
    USHORT ProtocolMajorVersion;
    USHORT ProtocolMinorVersion;
    USHORT ProtocolRevision;

    USHORT Reserved;

    
    ULONG  Flags;

    struct {
        ULONG Reserved[8];
    } GenericReserved;

    





#line 9846 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
    union {

        struct {

            struct {
                ULONG Capabilities;
            } Server;

            struct {
                ULONG Capabilities;
                ULONG CachingFlags;
            } Share;

        } Smb2;

        ULONG Reserved[16];

    } ProtocolSpecific;

#line 9866 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

} FILE_REMOTE_PROTOCOL_INFO, *PFILE_REMOTE_PROTOCOL_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetFileInformationByHandleEx(
       HANDLE hFile,
       FILE_INFO_BY_HANDLE_CLASS FileInformationClass,
      LPVOID lpFileInformation,
       DWORD dwBufferSize
);

#line 9880 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


typedef enum _FILE_ID_TYPE {
      FileIdType,
      ObjectIdType,
      ExtendedFileIdType,
      MaximumFileIdType
} FILE_ID_TYPE, *PFILE_ID_TYPE;

typedef struct FILE_ID_DESCRIPTOR {
    DWORD dwSize;  
    FILE_ID_TYPE Type; 
    union {
        LARGE_INTEGER FileId;
        GUID ObjectId;

        FILE_ID_128 ExtendedFileId;
#line 9901 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
    } ;
} FILE_ID_DESCRIPTOR, *LPFILE_ID_DESCRIPTOR;

__declspec(dllimport)
HANDLE
__stdcall
OpenFileById (
          HANDLE hVolumeHint,
          LPFILE_ID_DESCRIPTOR lpFileId,
          DWORD dwDesiredAccess,
          DWORD dwShareMode,
      LPSECURITY_ATTRIBUTES lpSecurityAttributes,
          DWORD dwFlagsAndAttributes
    );

#line 9917 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#line 9920 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#pragma region Desktop Family












__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkA (
      LPCSTR lpSymlinkFileName,
      LPCSTR lpTargetFileName,
      DWORD dwFlags
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkW (
      LPCWSTR lpSymlinkFileName,
      LPCWSTR lpTargetFileName,
      DWORD dwFlags
    );




#line 9955 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedA (
          LPCSTR lpSymlinkFileName,
          LPCSTR lpTargetFileName,
          DWORD dwFlags,
          HANDLE hTransaction
    );
__declspec(dllimport)
BOOLEAN
__stdcall
CreateSymbolicLinkTransactedW (
          LPCWSTR lpSymlinkFileName,
          LPCWSTR lpTargetFileName,
          DWORD dwFlags,
          HANDLE hTransaction
    );




#line 9979 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 9981 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




__declspec(dllimport)
BOOL
__stdcall
QueryActCtxSettingsW(
           DWORD dwFlags,
           HANDLE hActCtx,
           PCWSTR settingsNameSpace,
               PCWSTR settingName,
      PWSTR pvBuffer,
           SIZE_T dwBuffer,
      SIZE_T *pdwWrittenOrRequired
    );

#line 9999 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



__declspec(dllimport)
BOOL
__stdcall
ReplacePartitionUnit (
      PWSTR TargetPartition,
      PWSTR SparePartition,
      ULONG Flags
    );

#line 10012 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




__declspec(dllimport)
BOOL
__stdcall
AddSecureMemoryCacheCallback(
       PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );

__declspec(dllimport)
BOOL
__stdcall
RemoveSecureMemoryCacheCallback(
       PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack
    );

#line 10031 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 10033 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion



#pragma region Desktop Family


 
__declspec(dllimport)
BOOL
__stdcall
CopyContext(
      PCONTEXT Destination,
      DWORD ContextFlags,
      PCONTEXT Source
    );

#line 10051 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Application Family


 
__declspec(dllimport)
BOOL
__stdcall
InitializeContext(
      PVOID Buffer,
      DWORD ContextFlags,
      PCONTEXT* Context,
      PDWORD ContextLength
    );
#line 10067 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion



#pragma region Application Family


__declspec(dllimport)
DWORD64
__stdcall
GetEnabledXStateFeatures(
    void
    );

 
__declspec(dllimport)
BOOL
__stdcall
GetXStateFeaturesMask(
      PCONTEXT Context,
      PDWORD64 FeatureMask
    );

 
__declspec(dllimport)
PVOID
__stdcall
LocateXStateFeature(
      PCONTEXT Context,
      DWORD FeatureId,
      PDWORD Length
    );

#line 10101 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#pragma region Desktop Family


 
__declspec(dllimport)
BOOL
__stdcall
SetXStateFeaturesMask(
      PCONTEXT Context,
      DWORD64 FeatureMask
    );

#line 10116 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#line 10119 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 10121 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
EnableThreadProfiling(
      HANDLE ThreadHandle,
      DWORD Flags,
      DWORD64 HardwareCounters,
      HANDLE *PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
DisableThreadProfiling(
      HANDLE PerformanceDataHandle
    );

__declspec(dllimport)
DWORD
__stdcall
QueryThreadProfiling(
      HANDLE ThreadHandle,
      PBOOLEAN Enabled
    );

__declspec(dllimport)
DWORD
__stdcall
ReadThreadProfilingData(
      HANDLE PerformanceDataHandle,
      DWORD Flags,
      PPERFORMANCE_DATA PerformanceData
    );

#line 10162 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#pragma endregion

#line 10165 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"






#line 10172 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 10173 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"


}
#line 10177 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



#pragma warning(pop)




#line 10186 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 10187 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"



#line 10191 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




























#pragma once
#line 10221 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"










#line 10232 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"





extern "C++" {

__forceinline
unsigned
InterlockedIncrement(
       unsigned volatile *Addend
    )
{
    return (unsigned) InterlockedIncrement((volatile long*) Addend);
}

__forceinline
unsigned long
InterlockedIncrement(
       unsigned long volatile *Addend
    )
{
    return (unsigned long) InterlockedIncrement((volatile long*) Addend);
}



__forceinline
unsigned __int64
InterlockedIncrement(
       unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) InterlockedIncrement64((volatile __int64*) Addend);
}

#line 10269 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__forceinline
unsigned
InterlockedDecrement(
       unsigned volatile *Addend
    )
{
    return (unsigned long) InterlockedDecrement((volatile long*) Addend);
}

__forceinline
unsigned long
InterlockedDecrement(
       unsigned long volatile *Addend
    )
{
    return (unsigned long) InterlockedDecrement((volatile long*) Addend);
}



__forceinline
unsigned __int64
InterlockedDecrement(
       unsigned __int64 volatile *Addend
    )
{
    return (unsigned __int64) InterlockedDecrement64((volatile __int64*) Addend);
}

#line 10300 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__forceinline
unsigned
InterlockedExchange(
       unsigned volatile *Target,
      unsigned Value
    )
{
    return (unsigned) InterlockedExchange((volatile long*) Target, (long) Value);
}

__forceinline
unsigned long
InterlockedExchange(
       unsigned long volatile *Target,
      unsigned long Value
    )
{
    return (unsigned long) InterlockedExchange((volatile long*) Target, (long) Value);
}



__forceinline
unsigned __int64
InterlockedExchange(
       unsigned __int64 volatile *Target,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) InterlockedExchange64((volatile __int64*) Target, (__int64) Value);
}

#line 10334 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__forceinline
unsigned
InterlockedExchangeAdd(
       unsigned volatile *Addend,
      unsigned Value
    )
{
    return (unsigned) InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned
InterlockedExchangeSubtract(
       unsigned volatile *Addend,
      unsigned Value
    )
{
    return (unsigned) InterlockedExchangeAdd((volatile long*) Addend,  - (long) Value);
}

__forceinline
unsigned long
InterlockedExchangeAdd(
       unsigned long volatile *Addend,
      unsigned long Value
    )
{
    return (unsigned long) InterlockedExchangeAdd((volatile long*) Addend, (long) Value);
}

__forceinline
unsigned long
InterlockedExchangeSubtract(
       unsigned long volatile *Addend,
      unsigned long Value
    )
{
    return (unsigned long) InterlockedExchangeAdd((volatile long*) Addend,  - (long) Value);
}



__forceinline
unsigned __int64
InterlockedExchangeAdd(
       unsigned __int64 volatile *Addend,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) InterlockedExchangeAdd64((volatile __int64*) Addend,  (__int64) Value);
}

__forceinline
unsigned __int64
InterlockedExchangeSubtract(
       unsigned __int64 volatile *Addend,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) InterlockedExchangeAdd64((volatile __int64*) Addend,  - (__int64) Value);
}

#line 10398 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

__forceinline
unsigned
InterlockedCompareExchange(
       unsigned volatile *Destination,
      unsigned Exchange,
      unsigned Comperand
    )
{
    return (unsigned) InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}

__forceinline
unsigned long
InterlockedCompareExchange(
       unsigned long volatile *Destination,
      unsigned long Exchange,
      unsigned long Comperand
    )
{
    return (unsigned long) InterlockedCompareExchange((volatile long*) Destination, (long) Exchange, (long) Comperand);
}



__forceinline
unsigned __int64
InterlockedCompareExchange(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Exchange,
      unsigned __int64 Comperand
    )
{
    return (unsigned __int64) InterlockedCompareExchange64((volatile __int64*) Destination, (__int64) Exchange, (__int64) Comperand);
}

__forceinline
unsigned __int64
InterlockedAnd(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) InterlockedAnd64((volatile __int64*) Destination, (__int64) Value);
}

__forceinline
unsigned __int64
InterlockedOr(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) InterlockedOr64((volatile __int64*) Destination, (__int64) Value);
}

__forceinline
unsigned __int64
InterlockedXor(
       unsigned __int64 volatile *Destination,
      unsigned __int64 Value
    )
{
    return (unsigned __int64) InterlockedXor64((volatile __int64*) Destination, (__int64) Value);
}

#line 10465 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

} 
#line 10468 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 10470 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"




#line 10475 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 10476 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 10477 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 10478 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 10479 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"
#line 10480 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winbase.h"

#line 166 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"














#pragma once


#pragma warning(push)
#pragma warning(disable: 4201)      
#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"














#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"









#line 46 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


extern "C" {
#line 50 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
















































#line 99 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"





#line 105 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"






#line 112 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"






























#line 143 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"













#line 157 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

















#line 175 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
















#line 192 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


#line 195 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


#line 198 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"














































































#line 277 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"








#pragma region Desktop Family



typedef struct _DRAWPATRECT {
        POINT ptPosition;
        POINT ptSize;
        WORD wStyle;
        WORD wPattern;
} DRAWPATRECT, *PDRAWPATRECT;
#line 296 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 298 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 301 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"




































































































#line 402 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"











#pragma region Desktop Family






typedef struct _PSINJECTDATA {

    DWORD   DataBytes;      
    WORD    InjectionPoint; 
    WORD    PageNumber;     

    

} PSINJECTDATA, *PPSINJECTDATA;

#line 431 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion



































































#line 500 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Desktop Family






typedef struct _PSFEATURE_OUTPUT {

    BOOL bPageIndependent;
    BOOL bSetPageDevice;

} PSFEATURE_OUTPUT, *PPSFEATURE_OUTPUT;





typedef struct _PSFEATURE_CUSTPAPER {

    LONG lOrientation;
    LONG lWidth;
    LONG lHeight;
    LONG lWidthOffset;
    LONG lHeightOffset;

} PSFEATURE_CUSTPAPER, *PPSFEATURE_CUSTPAPER;

#line 530 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion



















































#pragma region Application Family


typedef struct  tagXFORM
  {
    FLOAT   eM11;
    FLOAT   eM12;
    FLOAT   eM21;
    FLOAT   eM22;
    FLOAT   eDx;
    FLOAT   eDy;
  } XFORM, *PXFORM,  *LPXFORM;


typedef struct tagBITMAP
  {
    LONG        bmType;
    LONG        bmWidth;
    LONG        bmHeight;
    LONG        bmWidthBytes;
    WORD        bmPlanes;
    WORD        bmBitsPixel;
    LPVOID      bmBits;
  } BITMAP, *PBITMAP,  *NPBITMAP,  *LPBITMAP;

#line 608 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 611 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagRGBTRIPLE {
        BYTE    rgbtBlue;
        BYTE    rgbtGreen;
        BYTE    rgbtRed;
} RGBTRIPLE, *PRGBTRIPLE,  *NPRGBTRIPLE,  *LPRGBTRIPLE;

#line 622 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 625 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagRGBQUAD {
        BYTE    rgbBlue;
        BYTE    rgbGreen;
        BYTE    rgbRed;
        BYTE    rgbReserved;
} RGBQUAD;

#line 637 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef RGBQUAD * LPRGBQUAD;

#line 645 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion


















#pragma region Application Family


typedef LONG   LCSCSTYPE;



typedef LONG    LCSGAMUTMATCH;



























typedef long            FXPT16DOT16,  *LPFXPT16DOT16;
typedef long            FXPT2DOT30,  *LPFXPT2DOT30;




typedef struct tagCIEXYZ
{
        FXPT2DOT30 ciexyzX;
        FXPT2DOT30 ciexyzY;
        FXPT2DOT30 ciexyzZ;
} CIEXYZ;

#line 713 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef CIEXYZ   *LPCIEXYZ;

#line 721 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct tagICEXYZTRIPLE
{
        CIEXYZ  ciexyzRed;
        CIEXYZ  ciexyzGreen;
        CIEXYZ  ciexyzBlue;
} CIEXYZTRIPLE;

#line 734 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef CIEXYZTRIPLE     *LPCIEXYZTRIPLE;

#line 742 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family







typedef struct tagLOGCOLORSPACEA {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    CHAR   lcsFilename[260];
} LOGCOLORSPACEA, *LPLOGCOLORSPACEA;
typedef struct tagLOGCOLORSPACEW {
    DWORD lcsSignature;
    DWORD lcsVersion;
    DWORD lcsSize;
    LCSCSTYPE lcsCSType;
    LCSGAMUTMATCH lcsIntent;
    CIEXYZTRIPLE lcsEndpoints;
    DWORD lcsGammaRed;
    DWORD lcsGammaGreen;
    DWORD lcsGammaBlue;
    WCHAR  lcsFilename[260];
} LOGCOLORSPACEW, *LPLOGCOLORSPACEW;




typedef LOGCOLORSPACEA LOGCOLORSPACE;
typedef LPLOGCOLORSPACEA LPLOGCOLORSPACE;
#line 783 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 785 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 788 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Desktop Family



typedef struct tagBITMAPCOREHEADER {
        DWORD   bcSize;                 
        WORD    bcWidth;
        WORD    bcHeight;
        WORD    bcPlanes;
        WORD    bcBitCount;
} BITMAPCOREHEADER,  *LPBITMAPCOREHEADER, *PBITMAPCOREHEADER;

#line 802 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct tagBITMAPINFOHEADER{
        DWORD      biSize;
        LONG       biWidth;
        LONG       biHeight;
        WORD       biPlanes;
        WORD       biBitCount;
        DWORD      biCompression;
        DWORD      biSizeImage;
        LONG       biXPelsPerMeter;
        LONG       biYPelsPerMeter;
        DWORD      biClrUsed;
        DWORD      biClrImportant;
} BITMAPINFOHEADER,  *LPBITMAPINFOHEADER, *PBITMAPINFOHEADER;

#line 822 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion



#pragma region Desktop Family


typedef struct {
        DWORD        bV4Size;
        LONG         bV4Width;
        LONG         bV4Height;
        WORD         bV4Planes;
        WORD         bV4BitCount;
        DWORD        bV4V4Compression;
        DWORD        bV4SizeImage;
        LONG         bV4XPelsPerMeter;
        LONG         bV4YPelsPerMeter;
        DWORD        bV4ClrUsed;
        DWORD        bV4ClrImportant;
        DWORD        bV4RedMask;
        DWORD        bV4GreenMask;
        DWORD        bV4BlueMask;
        DWORD        bV4AlphaMask;
        DWORD        bV4CSType;
        CIEXYZTRIPLE bV4Endpoints;
        DWORD        bV4GammaRed;
        DWORD        bV4GammaGreen;
        DWORD        bV4GammaBlue;
} BITMAPV4HEADER,  *LPBITMAPV4HEADER, *PBITMAPV4HEADER;

#line 853 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion
#line 855 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"



#pragma region Desktop Family

typedef struct {
        DWORD        bV5Size;
        LONG         bV5Width;
        LONG         bV5Height;
        WORD         bV5Planes;
        WORD         bV5BitCount;
        DWORD        bV5Compression;
        DWORD        bV5SizeImage;
        LONG         bV5XPelsPerMeter;
        LONG         bV5YPelsPerMeter;
        DWORD        bV5ClrUsed;
        DWORD        bV5ClrImportant;
        DWORD        bV5RedMask;
        DWORD        bV5GreenMask;
        DWORD        bV5BlueMask;
        DWORD        bV5AlphaMask;
        DWORD        bV5CSType;
        CIEXYZTRIPLE bV5Endpoints;
        DWORD        bV5GammaRed;
        DWORD        bV5GammaGreen;
        DWORD        bV5GammaBlue;
        DWORD        bV5Intent;
        DWORD        bV5ProfileData;
        DWORD        bV5ProfileSize;
        DWORD        bV5Reserved;
} BITMAPV5HEADER,  *LPBITMAPV5HEADER, *PBITMAPV5HEADER;

#line 888 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion




#line 894 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"









#line 904 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER    bmiHeader;
    RGBQUAD             bmiColors[1];
} BITMAPINFO,  *LPBITMAPINFO, *PBITMAPINFO;

#line 914 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER    bmciHeader;
    RGBTRIPLE           bmciColors[1];
} BITMAPCOREINFO,  *LPBITMAPCOREINFO, *PBITMAPCOREINFO;

#line 925 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"
#line 928 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Desktop Family


typedef struct tagBITMAPFILEHEADER {
        WORD    bfType;
        DWORD   bfSize;
        WORD    bfReserved1;
        WORD    bfReserved2;
        DWORD   bfOffBits;
} BITMAPFILEHEADER,  *LPBITMAPFILEHEADER, *PBITMAPFILEHEADER;

#line 941 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 944 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"






#pragma region Desktop Family


typedef struct tagFONTSIGNATURE
{
    DWORD fsUsb[4];
    DWORD fsCsb[2];
} FONTSIGNATURE, *PFONTSIGNATURE, *LPFONTSIGNATURE;

typedef struct tagCHARSETINFO
{
    UINT ciCharset;
    UINT ciACP;
    FONTSIGNATURE fs;
} CHARSETINFO, *PCHARSETINFO,  *NPCHARSETINFO,  *LPCHARSETINFO;

#line 967 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion






#line 975 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagLOCALESIGNATURE
{
    DWORD lsUsb[4];
    DWORD lsCsbDefault[2];
    DWORD lsCsbSupported[2];
} LOCALESIGNATURE, *PLOCALESIGNATURE, *LPLOCALESIGNATURE;

#line 987 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 990 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#line 991 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"



#pragma region Application Family




typedef struct tagHANDLETABLE
  {
    HGDIOBJ     objectHandle[1];
  } HANDLETABLE, *PHANDLETABLE,  *LPHANDLETABLE;

typedef struct tagMETARECORD
  {
    DWORD       rdSize;
    WORD        rdFunction;
    WORD        rdParm[1];
  } METARECORD;

#line 1012 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct tagMETARECORD  *PMETARECORD;

#line 1020 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct tagMETARECORD   *LPMETARECORD;

typedef struct tagMETAFILEPICT
  {
    LONG        mm;
    LONG        xExt;
    LONG        yExt;
    HMETAFILE   hMF;
  } METAFILEPICT,  *LPMETAFILEPICT;

#line 1036 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"
#line 1039 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Desktop Family


typedef struct tagMETAHEADER
{
    WORD        mtType;
    WORD        mtHeaderSize;
    WORD        mtVersion;
    DWORD       mtSize;
    WORD        mtNoObjects;
    DWORD       mtMaxRecord;
    WORD        mtNoParameters;
} METAHEADER;
typedef struct tagMETAHEADER  *PMETAHEADER;
typedef struct tagMETAHEADER   *LPMETAHEADER;

#line 1057 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 1060 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Application Family



typedef struct tagENHMETARECORD
{
    DWORD   iType;              
    DWORD   nSize;              
    DWORD   dParm[1];           
} ENHMETARECORD, *PENHMETARECORD, *LPENHMETARECORD;

typedef struct tagENHMETAHEADER
{
    DWORD   iType;              
    DWORD   nSize;              
                                
    RECTL   rclBounds;          
    RECTL   rclFrame;           
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   nBytes;             
    DWORD   nRecords;           
    WORD    nHandles;           
                                
    WORD    sReserved;          
    DWORD   nDescription;       
                                
    DWORD   offDescription;     
                                
    DWORD   nPalEntries;        
    SIZEL   szlDevice;          
    SIZEL   szlMillimeters;     

    DWORD   cbPixelFormat;      
                                
    DWORD   offPixelFormat;     
                                
    DWORD   bOpenGL;            
                                
#line 1101 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

    SIZEL   szlMicrometers;     
#line 1104 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

} ENHMETAHEADER, *PENHMETAHEADER, *LPENHMETAHEADER;

#line 1108 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 1111 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"









#pragma region Desktop Family








    typedef BYTE BCHAR;
#line 1131 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 1133 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion



#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"
#line 1138 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICA, *PTEXTMETRICA,  *NPTEXTMETRICA,  *LPTEXTMETRICA;
typedef struct tagTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
} TEXTMETRICW, *PTEXTMETRICW,  *NPTEXTMETRICW,  *LPTEXTMETRICW;






typedef TEXTMETRICA TEXTMETRIC;
typedef PTEXTMETRICA PTEXTMETRIC;
typedef NPTEXTMETRICA NPTEXTMETRIC;
typedef LPTEXTMETRICA LPTEXTMETRIC;
#line 1199 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 1201 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 1204 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#line 1205 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"















#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"
#line 1221 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Desktop Family


typedef struct tagNEWTEXTMETRICA
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    BYTE        tmFirstChar;
    BYTE        tmLastChar;
    BYTE        tmDefaultChar;
    BYTE        tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICA, *PNEWTEXTMETRICA,  *NPNEWTEXTMETRICA,  *LPNEWTEXTMETRICA;
typedef struct tagNEWTEXTMETRICW
{
    LONG        tmHeight;
    LONG        tmAscent;
    LONG        tmDescent;
    LONG        tmInternalLeading;
    LONG        tmExternalLeading;
    LONG        tmAveCharWidth;
    LONG        tmMaxCharWidth;
    LONG        tmWeight;
    LONG        tmOverhang;
    LONG        tmDigitizedAspectX;
    LONG        tmDigitizedAspectY;
    WCHAR       tmFirstChar;
    WCHAR       tmLastChar;
    WCHAR       tmDefaultChar;
    WCHAR       tmBreakChar;
    BYTE        tmItalic;
    BYTE        tmUnderlined;
    BYTE        tmStruckOut;
    BYTE        tmPitchAndFamily;
    BYTE        tmCharSet;
    DWORD   ntmFlags;
    UINT    ntmSizeEM;
    UINT    ntmCellHeight;
    UINT    ntmAvgWidth;
} NEWTEXTMETRICW, *PNEWTEXTMETRICW,  *NPNEWTEXTMETRICW,  *LPNEWTEXTMETRICW;






typedef NEWTEXTMETRICA NEWTEXTMETRIC;
typedef PNEWTEXTMETRICA PNEWTEXTMETRIC;
typedef NPNEWTEXTMETRICA NPNEWTEXTMETRIC;
typedef LPNEWTEXTMETRICA LPNEWTEXTMETRIC;
#line 1290 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 1292 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 1295 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"



#pragma region Desktop Family


typedef struct tagNEWTEXTMETRICEXA
{
    NEWTEXTMETRICA  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXA;
typedef struct tagNEWTEXTMETRICEXW
{
    NEWTEXTMETRICW  ntmTm;
    FONTSIGNATURE   ntmFontSig;
}NEWTEXTMETRICEXW;



typedef NEWTEXTMETRICEXA NEWTEXTMETRICEX;
#line 1316 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 1318 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion
#line 1320 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 1322 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"



#pragma region Desktop Family


typedef struct tagPELARRAY
  {
    LONG        paXCount;
    LONG        paYCount;
    LONG        paXExt;
    LONG        paYExt;
    BYTE        paRGBs;
  } PELARRAY, *PPELARRAY,  *NPPELARRAY,  *LPPELARRAY;

#line 1338 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family



typedef struct tagLOGBRUSH
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    ULONG_PTR   lbHatch;
  } LOGBRUSH, *PLOGBRUSH,  *NPLOGBRUSH,  *LPLOGBRUSH;

typedef struct tagLOGBRUSH32
  {
    UINT        lbStyle;
    COLORREF    lbColor;
    ULONG       lbHatch;
  } LOGBRUSH32, *PLOGBRUSH32,  *NPLOGBRUSH32,  *LPLOGBRUSH32;

#line 1359 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef LOGBRUSH            PATTERN;
typedef PATTERN             *PPATTERN;
typedef PATTERN         *NPPATTERN;
typedef PATTERN          *LPPATTERN;

#line 1370 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family



typedef struct tagLOGPEN
  {
    UINT        lopnStyle;
    POINT       lopnWidth;
    COLORREF    lopnColor;
  } LOGPEN, *PLOGPEN,  *NPLOGPEN,  *LPLOGPEN;

#line 1384 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct tagEXTLOGPEN {
    DWORD       elpPenStyle;
    DWORD       elpWidth;
    UINT        elpBrushStyle;
    COLORREF    elpColor;
    ULONG_PTR   elpHatch;
    DWORD       elpNumEntries;
    DWORD       elpStyleEntry[1];
} EXTLOGPEN, *PEXTLOGPEN,  *NPEXTLOGPEN,  *LPEXTLOGPEN;

#line 1400 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct tagEXTLOGPEN32 {
    DWORD       elpPenStyle;
    DWORD       elpWidth;
    UINT        elpBrushStyle;
    COLORREF    elpColor;
    ULONG       elpHatch;
    DWORD       elpNumEntries;
    DWORD       elpStyleEntry[1];
} EXTLOGPEN32, *PEXTLOGPEN32,  *NPEXTLOGPEN32,  *LPEXTLOGPEN32;



typedef struct tagPALETTEENTRY {
    BYTE        peRed;
    BYTE        peGreen;
    BYTE        peBlue;
    BYTE        peFlags;
} PALETTEENTRY, *PPALETTEENTRY,  *LPPALETTEENTRY;
#line 1424 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"




typedef struct tagLOGPALETTE {
    WORD        palVersion;
    WORD        palNumEntries;
      PALETTEENTRY        palPalEntry[1];
} LOGPALETTE, *PLOGPALETTE,  *NPLOGPALETTE,  *LPLOGPALETTE;
#line 1434 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"





typedef struct tagLOGFONTA
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    CHAR      lfFaceName[32];
} LOGFONTA, *PLOGFONTA,  *NPLOGFONTA,  *LPLOGFONTA;
typedef struct tagLOGFONTW
{
    LONG      lfHeight;
    LONG      lfWidth;
    LONG      lfEscapement;
    LONG      lfOrientation;
    LONG      lfWeight;
    BYTE      lfItalic;
    BYTE      lfUnderline;
    BYTE      lfStrikeOut;
    BYTE      lfCharSet;
    BYTE      lfOutPrecision;
    BYTE      lfClipPrecision;
    BYTE      lfQuality;
    BYTE      lfPitchAndFamily;
    WCHAR     lfFaceName[32];
} LOGFONTW, *PLOGFONTW,  *NPLOGFONTW,  *LPLOGFONTW;






typedef LOGFONTA LOGFONT;
typedef PLOGFONTA PLOGFONT;
typedef NPLOGFONTA NPLOGFONT;
typedef LPLOGFONTA LPLOGFONT;
#line 1484 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 1486 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion



#pragma region Desktop Family



typedef struct tagENUMLOGFONTA
{
    LOGFONTA elfLogFont;
    BYTE     elfFullName[64];
    BYTE     elfStyle[32];
} ENUMLOGFONTA, * LPENUMLOGFONTA;

typedef struct tagENUMLOGFONTW
{
    LOGFONTW elfLogFont;
    WCHAR    elfFullName[64];
    WCHAR    elfStyle[32];
} ENUMLOGFONTW, * LPENUMLOGFONTW;




typedef ENUMLOGFONTA ENUMLOGFONT;
typedef LPENUMLOGFONTA LPENUMLOGFONT;
#line 1514 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


typedef struct tagENUMLOGFONTEXA
{
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    BYTE        elfScript[32];
} ENUMLOGFONTEXA,  *LPENUMLOGFONTEXA;
typedef struct tagENUMLOGFONTEXW
{
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    WCHAR       elfScript[32];
} ENUMLOGFONTEXW,  *LPENUMLOGFONTEXW;




typedef ENUMLOGFONTEXA ENUMLOGFONTEX;
typedef LPENUMLOGFONTEXA LPENUMLOGFONTEX;
#line 1537 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#line 1538 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 1540 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion





















#line 1563 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"








#line 1572 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"




#line 1577 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"






#line 1584 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"








































#line 1625 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"




                                    

                                    

                                    



































#pragma region Application Family


typedef struct tagPANOSE
{
    BYTE    bFamilyType;
    BYTE    bSerifStyle;
    BYTE    bWeight;
    BYTE    bProportion;
    BYTE    bContrast;
    BYTE    bStrokeVariation;
    BYTE    bArmStyle;
    BYTE    bLetterform;
    BYTE    bMidline;
    BYTE    bXHeight;
} PANOSE, * LPPANOSE;

















































































































typedef struct tagEXTLOGFONTA {
    LOGFONTA    elfLogFont;
    BYTE        elfFullName[64];
    BYTE        elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTA, *PEXTLOGFONTA,  *NPEXTLOGFONTA,  *LPEXTLOGFONTA;
typedef struct tagEXTLOGFONTW {
    LOGFONTW    elfLogFont;
    WCHAR       elfFullName[64];
    WCHAR       elfStyle[32];
    DWORD       elfVersion;     
    DWORD       elfStyleSize;
    DWORD       elfMatch;
    DWORD       elfReserved;
    BYTE        elfVendorId[4];
    DWORD       elfCulture;     
    PANOSE      elfPanose;
} EXTLOGFONTW, *PEXTLOGFONTW,  *NPEXTLOGFONTW,  *LPEXTLOGFONTW;






typedef EXTLOGFONTA EXTLOGFONT;
typedef PEXTLOGFONTA PEXTLOGFONT;
typedef NPEXTLOGFONTA NPEXTLOGFONT;
typedef LPEXTLOGFONTA LPEXTLOGFONT;
#line 1833 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 1835 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion
















































































#line 1917 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"




#line 1922 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"







#line 1930 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


































































































                             

                             

                             





#line 2039 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"










































































#line 2114 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"





































#line 2152 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"




























#pragma region Application Family



typedef struct _devicemodeA {
    BYTE   dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };
      
      struct {
        POINTL dmPosition;
        DWORD  dmDisplayOrientation;
        DWORD  dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    BYTE   dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    };
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
#line 2236 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#line 2237 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
} DEVMODEA, *PDEVMODEA, *NPDEVMODEA, *LPDEVMODEA;
typedef struct _devicemodeW {
    WCHAR  dmDeviceName[32];
    WORD dmSpecVersion;
    WORD dmDriverVersion;
    WORD dmSize;
    WORD dmDriverExtra;
    DWORD dmFields;
    union {
      
      struct {
        short dmOrientation;
        short dmPaperSize;
        short dmPaperLength;
        short dmPaperWidth;
        short dmScale;
        short dmCopies;
        short dmDefaultSource;
        short dmPrintQuality;
      };
      
      struct {
        POINTL dmPosition;
        DWORD  dmDisplayOrientation;
        DWORD  dmDisplayFixedOutput;
      };
    };
    short dmColor;
    short dmDuplex;
    short dmYResolution;
    short dmTTOption;
    short dmCollate;
    WCHAR  dmFormName[32];
    WORD   dmLogPixels;
    DWORD  dmBitsPerPel;
    DWORD  dmPelsWidth;
    DWORD  dmPelsHeight;
    union {
        DWORD  dmDisplayFlags;
        DWORD  dmNup;
    };
    DWORD  dmDisplayFrequency;

    DWORD  dmICMMethod;
    DWORD  dmICMIntent;
    DWORD  dmMediaType;
    DWORD  dmDitherType;
    DWORD  dmReserved1;
    DWORD  dmReserved2;

    DWORD  dmPanningWidth;
    DWORD  dmPanningHeight;
#line 2290 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#line 2291 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
} DEVMODEW, *PDEVMODEW, *NPDEVMODEW, *LPDEVMODEW;






typedef DEVMODEA DEVMODE;
typedef PDEVMODEA PDEVMODE;
typedef NPDEVMODEA NPDEVMODE;
typedef LPDEVMODEA LPDEVMODE;
#line 2303 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"












































































































#line 2412 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 2414 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion








#line 2424 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"










#line 2435 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


#line 2438 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"






















#line 2461 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


#line 2464 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"













































































#line 2542 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"




















































#line 2595 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"







#line 2603 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"












































#line 2648 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
















#line 2665 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

















































#line 2715 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct _DISPLAY_DEVICEA {
    DWORD  cb;
    CHAR   DeviceName[32];
    CHAR   DeviceString[128];
    DWORD  StateFlags;
    CHAR   DeviceID[128];
    CHAR   DeviceKey[128];
} DISPLAY_DEVICEA, *PDISPLAY_DEVICEA, *LPDISPLAY_DEVICEA;
typedef struct _DISPLAY_DEVICEW {
    DWORD  cb;
    WCHAR  DeviceName[32];
    WCHAR  DeviceString[128];
    DWORD  StateFlags;
    WCHAR  DeviceID[128];
    WCHAR  DeviceKey[128];
} DISPLAY_DEVICEW, *PDISPLAY_DEVICEW, *LPDISPLAY_DEVICEW;





typedef DISPLAY_DEVICEA DISPLAY_DEVICE;
typedef PDISPLAY_DEVICEA PDISPLAY_DEVICE;
typedef LPDISPLAY_DEVICEA LPDISPLAY_DEVICE;
#line 2744 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 2746 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion








#line 2756 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


#line 2759 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"




#line 2764 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"



#line 2768 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"





#line 2774 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"




                                          
                                          

#pragma region Application Family


typedef struct DISPLAYCONFIG_RATIONAL
{
    UINT32    Numerator;
    UINT32    Denominator;
} DISPLAYCONFIG_RATIONAL;

typedef enum
{
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_OTHER                   = -1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HD15                    =  0,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SVIDEO                  =  1,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPOSITE_VIDEO         =  2,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_COMPONENT_VIDEO         =  3,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DVI                     =  4,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_HDMI                    =  5,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_LVDS                    =  6,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_D_JPN                   =  8,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDI                     =  9,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EXTERNAL    = 10,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_DISPLAYPORT_EMBEDDED    = 11,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EXTERNAL            = 12,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_UDI_EMBEDDED            = 13,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_SDTVDONGLE              = 14,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_INTERNAL                = 0x80000000,
    DISPLAYCONFIG_OUTPUT_TECHNOLOGY_FORCE_UINT32            = 0xFFFFFFFF
} DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY;

typedef enum
{
    DISPLAYCONFIG_SCANLINE_ORDERING_UNSPECIFIED                 = 0,
    DISPLAYCONFIG_SCANLINE_ORDERING_PROGRESSIVE                 = 1,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED                  = 2,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_UPPERFIELDFIRST  = DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED,
    DISPLAYCONFIG_SCANLINE_ORDERING_INTERLACED_LOWERFIELDFIRST  = 3,
    DISPLAYCONFIG_SCANLINE_ORDERING_FORCE_UINT32                = 0xFFFFFFFF
} DISPLAYCONFIG_SCANLINE_ORDERING;

typedef struct DISPLAYCONFIG_2DREGION
{
    UINT32 cx;
    UINT32 cy;
} DISPLAYCONFIG_2DREGION;

typedef struct DISPLAYCONFIG_VIDEO_SIGNAL_INFO
{
    UINT64                          pixelRate;
    DISPLAYCONFIG_RATIONAL          hSyncFreq;
    DISPLAYCONFIG_RATIONAL          vSyncFreq;
    DISPLAYCONFIG_2DREGION          activeSize;
    DISPLAYCONFIG_2DREGION          totalSize;
    UINT32                          videoStandard;
    DISPLAYCONFIG_SCANLINE_ORDERING scanLineOrdering;
} DISPLAYCONFIG_VIDEO_SIGNAL_INFO;

typedef enum
{
    DISPLAYCONFIG_SCALING_IDENTITY                  = 1,
    DISPLAYCONFIG_SCALING_CENTERED                  = 2,
    DISPLAYCONFIG_SCALING_STRETCHED                 = 3,
    DISPLAYCONFIG_SCALING_ASPECTRATIOCENTEREDMAX    = 4,
    DISPLAYCONFIG_SCALING_CUSTOM                    = 5,
    DISPLAYCONFIG_SCALING_PREFERRED                 = 128,
    DISPLAYCONFIG_SCALING_FORCE_UINT32              = 0xFFFFFFFF
} DISPLAYCONFIG_SCALING;

typedef enum
{
    DISPLAYCONFIG_ROTATION_IDENTITY     = 1,
    DISPLAYCONFIG_ROTATION_ROTATE90     = 2,
    DISPLAYCONFIG_ROTATION_ROTATE180    = 3,
    DISPLAYCONFIG_ROTATION_ROTATE270    = 4,
    DISPLAYCONFIG_ROTATION_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_ROTATION;

typedef enum
{
    DISPLAYCONFIG_MODE_INFO_TYPE_SOURCE = 1,
    DISPLAYCONFIG_MODE_INFO_TYPE_TARGET = 2,
    DISPLAYCONFIG_MODE_INFO_TYPE_FORCE_UINT32 = 0xFFFFFFFF
} DISPLAYCONFIG_MODE_INFO_TYPE;

typedef enum
{
    DISPLAYCONFIG_PIXELFORMAT_8BPP          = 1,
    DISPLAYCONFIG_PIXELFORMAT_16BPP         = 2,
    DISPLAYCONFIG_PIXELFORMAT_24BPP         = 3,
    DISPLAYCONFIG_PIXELFORMAT_32BPP         = 4,
    DISPLAYCONFIG_PIXELFORMAT_NONGDI        = 5,
    DISPLAYCONFIG_PIXELFORMAT_FORCE_UINT32  = 0xffffffff
} DISPLAYCONFIG_PIXELFORMAT;

typedef struct DISPLAYCONFIG_SOURCE_MODE
{
    UINT32                      width;
    UINT32                      height;
    DISPLAYCONFIG_PIXELFORMAT   pixelFormat;
    POINTL                      position;
} DISPLAYCONFIG_SOURCE_MODE;

typedef struct DISPLAYCONFIG_TARGET_MODE
{
    DISPLAYCONFIG_VIDEO_SIGNAL_INFO   targetVideoSignalInfo;
} DISPLAYCONFIG_TARGET_MODE;

typedef struct DISPLAYCONFIG_MODE_INFO
{
    DISPLAYCONFIG_MODE_INFO_TYPE    infoType;
    UINT32                          id;
    LUID                            adapterId;
    union
    {
        DISPLAYCONFIG_TARGET_MODE   targetMode;
        DISPLAYCONFIG_SOURCE_MODE   sourceMode;
    };
} DISPLAYCONFIG_MODE_INFO;



typedef struct DISPLAYCONFIG_PATH_SOURCE_INFO
{
    LUID    adapterId;
    UINT32  id;
    UINT32  modeInfoIdx;
    UINT32  statusFlags;
} DISPLAYCONFIG_PATH_SOURCE_INFO;







typedef struct DISPLAYCONFIG_PATH_TARGET_INFO
{
    LUID                                    adapterId;
    UINT32                                  id;
    UINT32                                  modeInfoIdx;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY   outputTechnology;
    DISPLAYCONFIG_ROTATION                  rotation;
    DISPLAYCONFIG_SCALING                   scaling;
    DISPLAYCONFIG_RATIONAL                  refreshRate;
    DISPLAYCONFIG_SCANLINE_ORDERING         scanLineOrdering;
    BOOL                                    targetAvailable;
    UINT32                                  statusFlags;
} DISPLAYCONFIG_PATH_TARGET_INFO;










typedef struct DISPLAYCONFIG_PATH_INFO
{
    DISPLAYCONFIG_PATH_SOURCE_INFO  sourceInfo;
    DISPLAYCONFIG_PATH_TARGET_INFO  targetInfo;
    UINT32                          flags;
} DISPLAYCONFIG_PATH_INFO;







typedef enum
{
      DISPLAYCONFIG_TOPOLOGY_INTERNAL       = 0x00000001,
      DISPLAYCONFIG_TOPOLOGY_CLONE          = 0x00000002,
      DISPLAYCONFIG_TOPOLOGY_EXTEND         = 0x00000004,
      DISPLAYCONFIG_TOPOLOGY_EXTERNAL       = 0x00000008,
      DISPLAYCONFIG_TOPOLOGY_FORCE_UINT32   = 0xFFFFFFFF
} DISPLAYCONFIG_TOPOLOGY_ID;

typedef enum
{
      DISPLAYCONFIG_DEVICE_INFO_GET_SOURCE_NAME             = 1,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_NAME             = 2,
      DISPLAYCONFIG_DEVICE_INFO_GET_TARGET_PREFERRED_MODE   = 3,
      DISPLAYCONFIG_DEVICE_INFO_GET_ADAPTER_NAME            = 4,
      DISPLAYCONFIG_DEVICE_INFO_SET_TARGET_PERSISTENCE      = 5,
      DISPLAYCONFIG_DEVICE_INFO_FORCE_UINT32                = 0xFFFFFFFF
} DISPLAYCONFIG_DEVICE_INFO_TYPE;

#line 2972 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion


#pragma region Application Family


typedef struct DISPLAYCONFIG_DEVICE_INFO_HEADER
{
    DISPLAYCONFIG_DEVICE_INFO_TYPE  type;
    UINT32                          size;
    LUID                            adapterId;
    UINT32                          id;
} DISPLAYCONFIG_DEVICE_INFO_HEADER;

#line 2987 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct DISPLAYCONFIG_SOURCE_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER            header;
    WCHAR                                       viewGdiDeviceName[32];
} DISPLAYCONFIG_SOURCE_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS
{
    union
    {
        struct
        {
            UINT32  friendlyNameFromEdid : 1;
            UINT32  friendlyNameForced : 1;
            UINT32  edidIdsValid : 1;
            UINT32  reserved : 29;
        };
        UINT32  value;
    };
} DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS;

typedef struct DISPLAYCONFIG_TARGET_DEVICE_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER            header;
    DISPLAYCONFIG_TARGET_DEVICE_NAME_FLAGS      flags;
    DISPLAYCONFIG_VIDEO_OUTPUT_TECHNOLOGY       outputTechnology;
    UINT16                                      edidManufactureId;
    UINT16                                      edidProductCodeId;
    UINT32                                      connectorInstance;
    WCHAR                                       monitorFriendlyDeviceName[64];
    WCHAR                                       monitorDevicePath[128];
} DISPLAYCONFIG_TARGET_DEVICE_NAME;

typedef struct DISPLAYCONFIG_TARGET_PREFERRED_MODE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
    UINT32                              width;
    UINT32                              height;
    DISPLAYCONFIG_TARGET_MODE           targetMode;
} DISPLAYCONFIG_TARGET_PREFERRED_MODE;

typedef struct DISPLAYCONFIG_ADAPTER_NAME
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
    WCHAR                               adapterDevicePath[128];
} DISPLAYCONFIG_ADAPTER_NAME;

typedef struct DISPLAYCONFIG_SET_TARGET_PERSISTENCE
{
    DISPLAYCONFIG_DEVICE_INFO_HEADER    header;
    union
    {
        struct
        {
            UINT32 bootPersistenceOn    : 1;
            UINT32 reserved             : 31;
        };
        UINT32 value;
    };
} DISPLAYCONFIG_SET_TARGET_PERSISTENCE;

#line 3054 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion
































#line 3088 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"





#pragma region Application Family


typedef struct _RGNDATAHEADER {
    DWORD   dwSize;
    DWORD   iType;
    DWORD   nCount;
    DWORD   nRgnSize;
    RECT    rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;

typedef struct _RGNDATA {
    RGNDATAHEADER   rdh;
    char            Buffer[1];
} RGNDATA, *PRGNDATA,  *NPRGNDATA,  *LPRGNDATA;

#line 3110 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion






#pragma region Desktop Family


typedef struct _ABC {
    int     abcA;
    UINT    abcB;
    int     abcC;
} ABC, *PABC,  *NPABC,  *LPABC;

typedef struct _ABCFLOAT {
    FLOAT   abcfA;
    FLOAT   abcfB;
    FLOAT   abcfC;
} ABCFLOAT, *PABCFLOAT,  *NPABCFLOAT,  *LPABCFLOAT;

#line 3133 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion







#pragma region Desktop Family


typedef struct _OUTLINETEXTMETRICA {
    UINT    otmSize;
    TEXTMETRICA otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICA, *POUTLINETEXTMETRICA,  *NPOUTLINETEXTMETRICA,  *LPOUTLINETEXTMETRICA;
typedef struct _OUTLINETEXTMETRICW {
    UINT    otmSize;
    TEXTMETRICW otmTextMetrics;
    BYTE    otmFiller;
    PANOSE  otmPanoseNumber;
    UINT    otmfsSelection;
    UINT    otmfsType;
     int    otmsCharSlopeRise;
     int    otmsCharSlopeRun;
     int    otmItalicAngle;
    UINT    otmEMSquare;
     int    otmAscent;
     int    otmDescent;
    UINT    otmLineGap;
    UINT    otmsCapEmHeight;
    UINT    otmsXHeight;
    RECT    otmrcFontBox;
     int    otmMacAscent;
     int    otmMacDescent;
    UINT    otmMacLineGap;
    UINT    otmusMinimumPPEM;
    POINT   otmptSubscriptSize;
    POINT   otmptSubscriptOffset;
    POINT   otmptSuperscriptSize;
    POINT   otmptSuperscriptOffset;
    UINT    otmsStrikeoutSize;
     int    otmsStrikeoutPosition;
     int    otmsUnderscoreSize;
     int    otmsUnderscorePosition;
    PSTR    otmpFamilyName;
    PSTR    otmpFaceName;
    PSTR    otmpStyleName;
    PSTR    otmpFullName;
} OUTLINETEXTMETRICW, *POUTLINETEXTMETRICW,  *NPOUTLINETEXTMETRICW,  *LPOUTLINETEXTMETRICW;






typedef OUTLINETEXTMETRICA OUTLINETEXTMETRIC;
typedef POUTLINETEXTMETRICA POUTLINETEXTMETRIC;
typedef NPOUTLINETEXTMETRICA NPOUTLINETEXTMETRIC;
typedef LPOUTLINETEXTMETRICA LPOUTLINETEXTMETRIC;
#line 3223 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 3225 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion





#line 3232 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Application Family


typedef struct tagPOLYTEXTA
{
    int       x;
    int       y;
    UINT      n;
    LPCSTR    lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTA, *PPOLYTEXTA,  *NPPOLYTEXTA,  *LPPOLYTEXTA;
typedef struct tagPOLYTEXTW
{
    int       x;
    int       y;
    UINT      n;
    LPCWSTR   lpstr;
    UINT      uiFlags;
    RECT      rcl;
    int      *pdx;
} POLYTEXTW, *PPOLYTEXTW,  *NPPOLYTEXTW,  *LPPOLYTEXTW;






typedef POLYTEXTA POLYTEXT;
typedef PPOLYTEXTA PPOLYTEXT;
typedef NPPOLYTEXTA NPPOLYTEXT;
typedef LPPOLYTEXTA LPPOLYTEXT;
#line 3267 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 3269 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct _FIXED {

    WORD    fract;
    short   value;



#line 3282 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
} FIXED;


typedef struct _MAT2 {
     FIXED  eM11;
     FIXED  eM12;
     FIXED  eM21;
     FIXED  eM22;
} MAT2,  *LPMAT2;



typedef struct _GLYPHMETRICS {
    UINT    gmBlackBoxX;
    UINT    gmBlackBoxY;
    POINT   gmptGlyphOrigin;
    short   gmCellIncX;
    short   gmCellIncY;
} GLYPHMETRICS,  *LPGLYPHMETRICS;

#line 3303 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion













#line 3318 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"



#line 3322 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"







#pragma region Desktop Family


typedef struct tagPOINTFX
{
    FIXED x;
    FIXED y;
} POINTFX, * LPPOINTFX;

typedef struct tagTTPOLYCURVE
{
    WORD    wType;
    WORD    cpfx;
    POINTFX apfx[1];
} TTPOLYCURVE, * LPTTPOLYCURVE;

typedef struct tagTTPOLYGONHEADER
{
    DWORD   cb;
    DWORD   dwType;
    POINTFX pfxStart;
} TTPOLYGONHEADER, * LPTTPOLYGONHEADER;

#line 3353 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion













































#pragma region Desktop Family


typedef struct tagGCP_RESULTSA
    {
    DWORD   lStructSize;
    LPSTR     lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSA, * LPGCP_RESULTSA;
typedef struct tagGCP_RESULTSW
    {
    DWORD   lStructSize;
    LPWSTR    lpOutString;
    UINT  *lpOrder;
    int   *lpDx;
    int   *lpCaretPos;
    LPSTR   lpClass;
    LPWSTR  lpGlyphs;
    UINT    nGlyphs;
    int     nMaxFit;
    } GCP_RESULTSW, * LPGCP_RESULTSW;




typedef GCP_RESULTSA GCP_RESULTS;
typedef LPGCP_RESULTSA LPGCP_RESULTS;
#line 3433 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 3435 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion
#line 3437 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Desktop Family


typedef struct _RASTERIZER_STATUS {
    short   nSize;
    short   wFlags;
    short   nLanguageID;
} RASTERIZER_STATUS,  *LPRASTERIZER_STATUS;

#line 3448 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion





#pragma region Application Family



typedef struct tagPIXELFORMATDESCRIPTOR
{
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerType;
    BYTE  bReserved;
    DWORD dwLayerMask;
    DWORD dwVisibleMask;
    DWORD dwDamageMask;
} PIXELFORMATDESCRIPTOR, *PPIXELFORMATDESCRIPTOR,  *LPPIXELFORMATDESCRIPTOR;

#line 3489 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion


































#pragma region Desktop Family





typedef int (__stdcall* OLDFONTENUMPROCA)(const LOGFONTA *, const TEXTMETRICA *, DWORD, LPARAM);
typedef int (__stdcall* OLDFONTENUMPROCW)(const LOGFONTW *, const TEXTMETRICW *, DWORD, LPARAM);




#line 3537 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"








#line 3546 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

typedef OLDFONTENUMPROCA    FONTENUMPROCA;
typedef OLDFONTENUMPROCW    FONTENUMPROCW;



typedef FONTENUMPROCA FONTENUMPROC;
#line 3554 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

typedef int (__stdcall* GOBJENUMPROC)(LPVOID, LPARAM);
typedef void (__stdcall* LINEDDAPROC)(int, int, LPARAM);











#line 3569 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 3571 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion



#pragma region Desktop Family


__declspec(dllimport) int __stdcall AddFontResourceA(  LPCSTR);
__declspec(dllimport) int __stdcall AddFontResourceW(  LPCWSTR);




#line 3585 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

 __declspec(dllimport) BOOL  __stdcall AnimatePalette(   HPALETTE hPal,   UINT iStartIndex,    UINT cEntries,   const PALETTEENTRY * ppe);
 __declspec(dllimport) BOOL  __stdcall Arc(   HDC hdc,   int x1,   int y1,   int x2,   int y2,   int x3,   int y3,   int x4,   int y4);
 __declspec(dllimport) BOOL  __stdcall BitBlt(   HDC hdc,   int x,   int y,   int cx,   int cy,   HDC hdcSrc,   int x1,   int y1,   DWORD rop);
__declspec(dllimport) BOOL  __stdcall CancelDC(   HDC hdc);
 __declspec(dllimport) BOOL  __stdcall Chord(   HDC hdc,   int x1,   int y1,   int x2,   int y2,   int x3,   int y3,   int x4,   int y4);
__declspec(dllimport) int   __stdcall ChoosePixelFormat(   HDC hdc,   const PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) HMETAFILE  __stdcall CloseMetaFile(   HDC hdc);
__declspec(dllimport) int     __stdcall CombineRgn(   HRGN hrgnDst,   HRGN hrgnSrc1,   HRGN hrgnSrc2,   int iMode);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileA(   HMETAFILE,   LPCSTR);
__declspec(dllimport) HMETAFILE __stdcall CopyMetaFileW(   HMETAFILE,   LPCWSTR);




#line 3601 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
 __declspec(dllimport) HBITMAP __stdcall CreateBitmap(   int nWidth,   int nHeight,   UINT nPlanes,   UINT nBitCount,   const void *lpBits);
 __declspec(dllimport) HBITMAP __stdcall CreateBitmapIndirect(   const BITMAP *pbm);
 __declspec(dllimport) HBRUSH  __stdcall CreateBrushIndirect(   const LOGBRUSH *plbrush);
__declspec(dllimport) HBITMAP __stdcall CreateCompatibleBitmap(   HDC hdc,   int cx,   int cy);
__declspec(dllimport) HBITMAP __stdcall CreateDiscardableBitmap(   HDC hdc,   int cx,   int cy);
__declspec(dllimport) HDC     __stdcall CreateCompatibleDC(   HDC hdc);
__declspec(dllimport) HDC     __stdcall CreateDCA(   LPCSTR pwszDriver,   LPCSTR pwszDevice,   LPCSTR pszPort,   const DEVMODEA * pdm);
__declspec(dllimport) HDC     __stdcall CreateDCW(   LPCWSTR pwszDriver,   LPCWSTR pwszDevice,   LPCWSTR pszPort,   const DEVMODEW * pdm);




#line 3614 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) HBITMAP __stdcall CreateDIBitmap(   HDC hdc,   const BITMAPINFOHEADER *pbmih,   DWORD flInit,   const void *pjBits,   const BITMAPINFO *pbmi,   UINT iUsage);
__declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrush(   HGLOBAL h,   UINT iUsage);
 __declspec(dllimport) HBRUSH  __stdcall CreateDIBPatternBrushPt(   const void *lpPackedDIB,   UINT iUsage);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgn(   int x1,   int y1,   int x2,   int y2);
__declspec(dllimport) HRGN    __stdcall CreateEllipticRgnIndirect(   const RECT *lprect);
 __declspec(dllimport) HFONT   __stdcall CreateFontIndirectA(   const LOGFONTA *lplf);
 __declspec(dllimport) HFONT   __stdcall CreateFontIndirectW(   const LOGFONTW *lplf);




#line 3626 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) HFONT   __stdcall CreateFontA(   int cHeight,   int cWidth,   int cEscapement,   int cOrientation,   int cWeight,   DWORD bItalic,
                               DWORD bUnderline,   DWORD bStrikeOut,   DWORD iCharSet,   DWORD iOutPrecision,   DWORD iClipPrecision,
                               DWORD iQuality,   DWORD iPitchAndFamily,   LPCSTR pszFaceName);
__declspec(dllimport) HFONT   __stdcall CreateFontW(   int cHeight,   int cWidth,   int cEscapement,   int cOrientation,   int cWeight,   DWORD bItalic,
                               DWORD bUnderline,   DWORD bStrikeOut,   DWORD iCharSet,   DWORD iOutPrecision,   DWORD iClipPrecision,
                               DWORD iQuality,   DWORD iPitchAndFamily,   LPCWSTR pszFaceName);




#line 3637 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport) HBRUSH  __stdcall CreateHatchBrush(   int iHatch,   COLORREF color);
__declspec(dllimport) HDC     __stdcall CreateICA(   LPCSTR pszDriver,   LPCSTR pszDevice,   LPCSTR pszPort,   const DEVMODEA * pdm);
__declspec(dllimport) HDC     __stdcall CreateICW(   LPCWSTR pszDriver,   LPCWSTR pszDevice,   LPCWSTR pszPort,   const DEVMODEW * pdm);




#line 3646 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) HDC     __stdcall CreateMetaFileA(   LPCSTR pszFile);
__declspec(dllimport) HDC     __stdcall CreateMetaFileW(   LPCWSTR pszFile);




#line 3653 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
 __declspec(dllimport) HPALETTE __stdcall CreatePalette(   const LOGPALETTE * plpal);
__declspec(dllimport) HPEN    __stdcall CreatePen(   int iStyle,   int cWidth,   COLORREF color);
 __declspec(dllimport) HPEN    __stdcall CreatePenIndirect(   const LOGPEN *plpen);
__declspec(dllimport) HRGN    __stdcall CreatePolyPolygonRgn(    const POINT *pptl,
                                                  const INT  *pc,
                                                  int cPoly,
                                                  int iMode);
 __declspec(dllimport) HBRUSH  __stdcall CreatePatternBrush(   HBITMAP hbm);
__declspec(dllimport) HRGN    __stdcall CreateRectRgn(   int x1,   int y1,   int x2,   int y2);
__declspec(dllimport) HRGN    __stdcall CreateRectRgnIndirect(   const RECT *lprect);
__declspec(dllimport) HRGN    __stdcall CreateRoundRectRgn(   int x1,   int y1,   int x2,   int y2,   int w,   int h);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceA(   DWORD fdwHidden,   LPCSTR lpszFont,   LPCSTR lpszFile,   LPCSTR lpszPath);
__declspec(dllimport) BOOL    __stdcall CreateScalableFontResourceW(   DWORD fdwHidden,   LPCWSTR lpszFont,   LPCWSTR lpszFile,   LPCWSTR lpszPath);




#line 3671 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) HBRUSH  __stdcall CreateSolidBrush(   COLORREF color);

__declspec(dllimport) BOOL __stdcall DeleteDC(   HDC hdc);
__declspec(dllimport) BOOL __stdcall DeleteMetaFile(   HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall DeleteObject(   HGDIOBJ ho);
__declspec(dllimport) int  __stdcall DescribePixelFormat(    HDC hdc,
                                              int iPixelFormat,
                                              UINT nBytes,
                                              LPPIXELFORMATDESCRIPTOR ppfd);





typedef UINT   (__stdcall* LPFNDEVMODE)(HWND, HMODULE, LPDEVMODE, LPSTR, LPSTR, LPDEVMODE, LPSTR, UINT);

typedef DWORD  (__stdcall* LPFNDEVCAPS)(LPSTR, LPSTR, UINT, LPSTR, LPDEVMODE);

#line 3690 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion






































#line 3730 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


















#line 3749 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#line 3750 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

















#line 3768 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesA(
                     LPCSTR         pDevice,
                 LPCSTR         pPort,
                     WORD             fwCapability,
      LPSTR          pOutput,
                 const DEVMODEA   *pDevMode
    );
__declspec(dllimport)
int
__stdcall
DeviceCapabilitiesW(
                     LPCWSTR         pDevice,
                 LPCWSTR         pPort,
                     WORD             fwCapability,
      LPWSTR          pOutput,
                 const DEVMODEW   *pDevMode
    );




#line 3797 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport) int  __stdcall DrawEscape(     HDC    hdc,
                                      int    iEscape,
                                      int    cjIn,
                                      LPCSTR lpIn);

 __declspec(dllimport) BOOL __stdcall Ellipse(   HDC hdc,   int left,   int top,    int right,   int bottom);


__declspec(dllimport) int  __stdcall EnumFontFamiliesExA(   HDC hdc,   LPLOGFONTA lpLogfont,   FONTENUMPROCA lpProc,   LPARAM lParam,   DWORD dwFlags);
__declspec(dllimport) int  __stdcall EnumFontFamiliesExW(   HDC hdc,   LPLOGFONTW lpLogfont,   FONTENUMPROCW lpProc,   LPARAM lParam,   DWORD dwFlags);




#line 3813 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#line 3814 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport) int  __stdcall EnumFontFamiliesA(   HDC hdc,   LPCSTR lpLogfont,   FONTENUMPROCA lpProc,   LPARAM lParam);
__declspec(dllimport) int  __stdcall EnumFontFamiliesW(   HDC hdc,   LPCWSTR lpLogfont,   FONTENUMPROCW lpProc,   LPARAM lParam);




#line 3822 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) int  __stdcall EnumFontsA(   HDC hdc,   LPCSTR lpLogfont,    FONTENUMPROCA lpProc,   LPARAM lParam);
__declspec(dllimport) int  __stdcall EnumFontsW(   HDC hdc,   LPCWSTR lpLogfont,    FONTENUMPROCW lpProc,   LPARAM lParam);




#line 3829 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


__declspec(dllimport) int  __stdcall EnumObjects(   HDC hdc,   int nType,   GOBJENUMPROC lpFunc,   LPARAM lParam);


#line 3835 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


__declspec(dllimport) BOOL __stdcall EqualRgn(   HRGN hrgn1,   HRGN hrgn2);
 __declspec(dllimport) int  __stdcall Escape(     HDC hdc,
                                  int iEscape,
                                  int cjIn,
                                  LPCSTR pvIn,
                                  LPVOID pvOut);
__declspec(dllimport) int  __stdcall ExtEscape(      HDC hdc,
                                      int iEscape,
                                      int cjInput,
                                      LPCSTR lpInData,
                                      int cjOutput,
                                      LPSTR lpOutData);
 __declspec(dllimport) int  __stdcall ExcludeClipRect(   HDC hdc,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) HRGN __stdcall ExtCreateRegion(   const XFORM * lpx,   DWORD nCount,   const RGNDATA * lpData);
 __declspec(dllimport) BOOL __stdcall ExtFloodFill(   HDC hdc,   int x,   int y,   COLORREF color,   UINT type);
 __declspec(dllimport) BOOL __stdcall FillRgn(   HDC hdc,   HRGN hrgn,   HBRUSH hbr);
 __declspec(dllimport) BOOL __stdcall FloodFill(   HDC hdc,   int x,   int y,   COLORREF color);
 __declspec(dllimport) BOOL __stdcall FrameRgn(   HDC hdc,   HRGN hrgn,   HBRUSH hbr,   int w,   int h);
__declspec(dllimport) int  __stdcall GetROP2(   HDC hdc);
__declspec(dllimport) BOOL __stdcall GetAspectRatioFilterEx(   HDC hdc,   LPSIZE lpsize);
__declspec(dllimport) COLORREF __stdcall GetBkColor(   HDC hdc);


__declspec(dllimport) COLORREF __stdcall GetDCBrushColor(   HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetDCPenColor(   HDC hdc);
#line 3863 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport)
int
__stdcall
GetBkMode(
      HDC hdc
    );

__declspec(dllimport)
LONG
__stdcall
GetBitmapBits(
      HBITMAP hbit,
      LONG cb,
      LPVOID lpvBits
    );

__declspec(dllimport) BOOL  __stdcall GetBitmapDimensionEx(   HBITMAP hbit,   LPSIZE lpsize);
__declspec(dllimport) UINT  __stdcall GetBoundsRect(   HDC hdc,   LPRECT lprect,   UINT flags);

__declspec(dllimport) BOOL  __stdcall GetBrushOrgEx(   HDC hdc,   LPPOINT lppt);

__declspec(dllimport) BOOL  __stdcall GetCharWidthA(   HDC hdc,   UINT iFirst,   UINT iLast,   LPINT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidthW(   HDC hdc,   UINT iFirst,   UINT iLast,   LPINT lpBuffer);




#line 3892 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidth32A(   HDC hdc,   UINT iFirst,   UINT iLast,    LPINT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidth32W(   HDC hdc,   UINT iFirst,   UINT iLast,    LPINT lpBuffer);




#line 3899 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatA(   HDC hdc,   UINT iFirst,   UINT iLast,   PFLOAT lpBuffer);
__declspec(dllimport) BOOL  __stdcall GetCharWidthFloatW(   HDC hdc,   UINT iFirst,   UINT iLast,   PFLOAT lpBuffer);




#line 3906 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsA(   HDC hdc,
                                              UINT wFirst,
                                              UINT wLast,
                                              LPABC lpABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsW(   HDC hdc,
                                              UINT wFirst,
                                              UINT wLast,
                                              LPABC lpABC);




#line 3920 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatA(   HDC hdc,   UINT iFirst,   UINT iLast,   LPABCFLOAT lpABC);
__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsFloatW(   HDC hdc,   UINT iFirst,   UINT iLast,   LPABCFLOAT lpABC);




#line 3928 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) int   __stdcall GetClipBox(   HDC hdc,    LPRECT lprect);
__declspec(dllimport) int   __stdcall GetClipRgn(   HDC hdc,   HRGN hrgn);
__declspec(dllimport) int   __stdcall GetMetaRgn(   HDC hdc,   HRGN hrgn);
__declspec(dllimport) HGDIOBJ __stdcall GetCurrentObject(   HDC hdc,   UINT type);
__declspec(dllimport) BOOL  __stdcall GetCurrentPositionEx(   HDC hdc,    LPPOINT lppt);
__declspec(dllimport) int   __stdcall GetDeviceCaps(   HDC hdc,   int index);
__declspec(dllimport) int   __stdcall GetDIBits(   HDC hdc,   HBITMAP hbm,   UINT start,   UINT cLines,
      LPVOID lpvBits,  LPBITMAPINFO lpbmi,   UINT usage);  

 
__declspec(dllimport) DWORD __stdcall GetFontData (      HDC     hdc,
                                          DWORD   dwTable,
                                          DWORD   dwOffset,
                                          PVOID pvBuffer,
                                          DWORD   cjBuffer
                                        );

__declspec(dllimport) DWORD __stdcall GetGlyphOutlineA(      HDC hdc,
                                              UINT uChar,
                                              UINT fuFormat,
                                              LPGLYPHMETRICS lpgm,
                                              DWORD cjBuffer,
                                              LPVOID pvBuffer,
                                              const MAT2 *lpmat2
                                        );
__declspec(dllimport) DWORD __stdcall GetGlyphOutlineW(      HDC hdc,
                                              UINT uChar,
                                              UINT fuFormat,
                                              LPGLYPHMETRICS lpgm,
                                              DWORD cjBuffer,
                                              LPVOID pvBuffer,
                                              const MAT2 *lpmat2
                                        );




#line 3966 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport) int   __stdcall GetGraphicsMode(   HDC hdc);
__declspec(dllimport) int   __stdcall GetMapMode(   HDC hdc);
__declspec(dllimport) UINT  __stdcall GetMetaFileBitsEx(  HMETAFILE hMF,   UINT cbBuffer,   LPVOID lpData);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileA(   LPCSTR lpName);
__declspec(dllimport) HMETAFILE   __stdcall GetMetaFileW(   LPCWSTR lpName);




#line 3977 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) COLORREF __stdcall GetNearestColor(   HDC hdc,   COLORREF color);
__declspec(dllimport) UINT  __stdcall GetNearestPaletteIndex(   HPALETTE h,   COLORREF color);
__declspec(dllimport) DWORD __stdcall GetObjectType(   HGDIOBJ h);



__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsA(   HDC hdc,
                                                  UINT cjCopy,
                                                  LPOUTLINETEXTMETRICA potm);
__declspec(dllimport) UINT __stdcall GetOutlineTextMetricsW(   HDC hdc,
                                                  UINT cjCopy,
                                                  LPOUTLINETEXTMETRICW potm);




#line 3994 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 3996 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

 
__declspec(dllimport) UINT  __stdcall GetPaletteEntries(     HPALETTE hpal,
                                              UINT iStart,
                                              UINT cEntries,
                                              LPPALETTEENTRY pPalEntries);
__declspec(dllimport) COLORREF __stdcall GetPixel(   HDC hdc,   int x,   int y);
__declspec(dllimport) int   __stdcall GetPixelFormat(   HDC hdc);
__declspec(dllimport) int   __stdcall GetPolyFillMode(   HDC hdc);
__declspec(dllimport) BOOL  __stdcall GetRasterizerCaps(     LPRASTERIZER_STATUS lpraststat,
                                              UINT cjBytes);

__declspec(dllimport) int   __stdcall GetRandomRgn (  HDC hdc,   HRGN hrgn,   INT i);
__declspec(dllimport) DWORD __stdcall GetRegionData(     HRGN hrgn,
                                          DWORD nCount,
                                          LPRGNDATA lpRgnData);
__declspec(dllimport) int   __stdcall GetRgnBox(   HRGN hrgn,    LPRECT lprc);
__declspec(dllimport) HGDIOBJ __stdcall GetStockObject(   int i);
__declspec(dllimport) int   __stdcall GetStretchBltMode(  HDC hdc);
__declspec(dllimport)
UINT
__stdcall
GetSystemPaletteEntries(
      HDC  hdc,
      UINT iStart,
      UINT cEntries,
      LPPALETTEENTRY pPalEntries
    );

__declspec(dllimport) UINT  __stdcall GetSystemPaletteUse(  HDC hdc);
__declspec(dllimport) int   __stdcall GetTextCharacterExtra(  HDC hdc);
__declspec(dllimport) UINT  __stdcall GetTextAlign(  HDC hdc);
__declspec(dllimport) COLORREF __stdcall GetTextColor(  HDC hdc);

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointA(
      HDC hdc,
      LPCSTR lpString,
      int c,
      LPSIZE lpsz
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPointW(
      HDC hdc,
      LPCWSTR lpString,
      int c,
      LPSIZE lpsz
    );




#line 4053 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32A(
      HDC hdc,
      LPCSTR lpString,
      int c,
      LPSIZE psizl
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentPoint32W(
      HDC hdc,
      LPCWSTR lpString,
      int c,
      LPSIZE psizl
    );




#line 4077 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointA(
      HDC hdc,
      LPCSTR lpszString,
      int cchString,
      int nMaxExtent,
      LPINT lpnFit,
      LPINT lpnDx,
      LPSIZE lpSize
    );
__declspec(dllimport)
BOOL
__stdcall
GetTextExtentExPointW(
      HDC hdc,
      LPCWSTR lpszString,
      int cchString,
      int nMaxExtent,
      LPINT lpnFit,
      LPINT lpnDx,
      LPSIZE lpSize
    );




#line 4107 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


__declspec(dllimport) int __stdcall GetTextCharset(   HDC hdc);
__declspec(dllimport) int __stdcall GetTextCharsetInfo(   HDC hdc,   LPFONTSIGNATURE lpSig,   DWORD dwFlags);
__declspec(dllimport) BOOL __stdcall TranslateCharsetInfo(   DWORD  *lpSrc,    LPCHARSETINFO lpCs,   DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetFontLanguageInfo(   HDC hdc);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementA(    HDC hdc,   LPCSTR lpString,   int nCount,   int nMexExtent,   LPGCP_RESULTSA lpResults,   DWORD dwFlags);
__declspec(dllimport) DWORD __stdcall GetCharacterPlacementW(    HDC hdc,   LPCWSTR lpString,   int nCount,   int nMexExtent,   LPGCP_RESULTSW lpResults,   DWORD dwFlags);




#line 4120 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#line 4121 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 4123 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagWCRANGE
{
    WCHAR  wcLow;
    USHORT cGlyphs;
} WCRANGE, *PWCRANGE, *LPWCRANGE;


typedef struct tagGLYPHSET
{
    DWORD    cbThis;
    DWORD    flAccel;
    DWORD    cGlyphsSupported;
    DWORD    cRanges;
    WCRANGE  ranges[1];
} GLYPHSET, *PGLYPHSET,  *LPGLYPHSET;









__declspec(dllimport) DWORD __stdcall GetFontUnicodeRanges(   HDC hdc,   LPGLYPHSET lpgs);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesA(   HDC hdc,   LPCSTR lpstr,   int c,   LPWORD pgi,   DWORD fl);
__declspec(dllimport) DWORD __stdcall GetGlyphIndicesW(   HDC hdc,   LPCWSTR lpstr,   int c,   LPWORD pgi,   DWORD fl);




#line 4162 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall GetTextExtentPointI(  HDC hdc,   LPWORD pgiIn,   int cgi,   LPSIZE psize);
__declspec(dllimport) BOOL  __stdcall GetTextExtentExPointI (    HDC hdc,
                                                  LPWORD lpwszString,
                                                  int cwchString,
                                                  int nMaxExtent,
                                                  LPINT lpnFit,
                                                  LPINT lpnDx,
                                                  LPSIZE lpSize
                                                );

__declspec(dllimport) BOOL  __stdcall GetCharWidthI(     HDC hdc,
                                          UINT giFirst,
                                          UINT cgi,
                                          LPWORD pgi,
                                          LPINT piWidths
                                        );

__declspec(dllimport) BOOL  __stdcall GetCharABCWidthsI(     HDC    hdc,
                                              UINT   giFirst,
                                              UINT   cgi,
                                              LPWORD pgi,
                                              LPABC  pabc
                                        );








typedef struct tagDESIGNVECTOR
{
    DWORD  dvReserved;
    DWORD  dvNumAxes;
    LONG   dvValues[16];
} DESIGNVECTOR, *PDESIGNVECTOR,  *LPDESIGNVECTOR;

__declspec(dllimport) int  __stdcall AddFontResourceExA(   LPCSTR name,   DWORD fl,   PVOID res);
__declspec(dllimport) int  __stdcall AddFontResourceExW(   LPCWSTR name,   DWORD fl,   PVOID res);




#line 4207 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL __stdcall RemoveFontResourceExA(   LPCSTR name,   DWORD fl,   PVOID pdv);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceExW(   LPCWSTR name,   DWORD fl,   PVOID pdv);




#line 4214 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) HANDLE __stdcall AddFontMemResourceEx(     PVOID pFileView,
                                                  DWORD cjSize,
                                                  PVOID pvResrved,
                                                  DWORD* pNumFonts);

__declspec(dllimport) BOOL __stdcall RemoveFontMemResourceEx(   HANDLE h);









typedef struct tagAXISINFOA
{
    LONG   axMinValue;
    LONG   axMaxValue;
    BYTE   axAxisName[16];
} AXISINFOA, *PAXISINFOA,  *LPAXISINFOA;
typedef struct tagAXISINFOW
{
    LONG   axMinValue;
    LONG   axMaxValue;
    WCHAR  axAxisName[16];
} AXISINFOW, *PAXISINFOW,  *LPAXISINFOW;





typedef AXISINFOA AXISINFO;
typedef PAXISINFOA PAXISINFO;
typedef LPAXISINFOA LPAXISINFO;
#line 4250 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

typedef struct tagAXESLISTA
{
    DWORD     axlReserved;
    DWORD     axlNumAxes;
    AXISINFOA axlAxisInfo[16];
} AXESLISTA, *PAXESLISTA,  *LPAXESLISTA;
typedef struct tagAXESLISTW
{
    DWORD     axlReserved;
    DWORD     axlNumAxes;
    AXISINFOW axlAxisInfo[16];
} AXESLISTW, *PAXESLISTW,  *LPAXESLISTW;





typedef AXESLISTA AXESLIST;
typedef PAXESLISTA PAXESLIST;
typedef LPAXESLISTA LPAXESLIST;
#line 4272 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"





typedef struct tagENUMLOGFONTEXDVA
{
    ENUMLOGFONTEXA elfEnumLogfontEx;
    DESIGNVECTOR   elfDesignVector;
} ENUMLOGFONTEXDVA, *PENUMLOGFONTEXDVA,  *LPENUMLOGFONTEXDVA;
typedef struct tagENUMLOGFONTEXDVW
{
    ENUMLOGFONTEXW elfEnumLogfontEx;
    DESIGNVECTOR   elfDesignVector;
} ENUMLOGFONTEXDVW, *PENUMLOGFONTEXDVW,  *LPENUMLOGFONTEXDVW;





typedef ENUMLOGFONTEXDVA ENUMLOGFONTEXDV;
typedef PENUMLOGFONTEXDVA PENUMLOGFONTEXDV;
typedef LPENUMLOGFONTEXDVA LPENUMLOGFONTEXDV;
#line 4296 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport) HFONT  __stdcall CreateFontIndirectExA(   const ENUMLOGFONTEXDVA *);
__declspec(dllimport) HFONT  __stdcall CreateFontIndirectExW(   const ENUMLOGFONTEXDVW *);




#line 4304 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


typedef struct tagENUMTEXTMETRICA
{
    NEWTEXTMETRICEXA etmNewTextMetricEx;
    AXESLISTA        etmAxesList;
} ENUMTEXTMETRICA, *PENUMTEXTMETRICA,  *LPENUMTEXTMETRICA;
typedef struct tagENUMTEXTMETRICW
{
    NEWTEXTMETRICEXW etmNewTextMetricEx;
    AXESLISTW        etmAxesList;
} ENUMTEXTMETRICW, *PENUMTEXTMETRICW,  *LPENUMTEXTMETRICW;





typedef ENUMTEXTMETRICA ENUMTEXTMETRIC;
typedef PENUMTEXTMETRICA PENUMTEXTMETRIC;
typedef LPENUMTEXTMETRICA LPENUMTEXTMETRIC;
#line 4325 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#line 4326 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 4328 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 4331 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Desktop Family


__declspec(dllimport) BOOL  __stdcall GetViewportExtEx(   HDC hdc,   LPSIZE lpsize);
__declspec(dllimport) BOOL  __stdcall GetViewportOrgEx(   HDC hdc,   LPPOINT lppoint);
__declspec(dllimport) BOOL  __stdcall GetWindowExtEx(   HDC hdc,   LPSIZE lpsize);
__declspec(dllimport) BOOL  __stdcall GetWindowOrgEx(   HDC hdc,   LPPOINT lppoint);

 __declspec(dllimport) int  __stdcall IntersectClipRect(   HDC hdc,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) BOOL __stdcall InvertRgn(   HDC hdc,   HRGN hrgn);
__declspec(dllimport) BOOL __stdcall LineDDA(   int xStart,   int yStart,   int xEnd,   int yEnd,   LINEDDAPROC lpProc,   LPARAM data);
 __declspec(dllimport) BOOL __stdcall LineTo(   HDC hdc,   int x,   int y);
__declspec(dllimport) BOOL __stdcall MaskBlt(   HDC hdcDest,   int xDest,   int yDest,   int width,   int height,
                HDC hdcSrc,   int xSrc,   int ySrc,   HBITMAP hbmMask,   int xMask,   int yMask,   DWORD rop);
__declspec(dllimport) BOOL __stdcall PlgBlt(   HDC hdcDest,   const POINT * lpPoint,   HDC hdcSrc,   int xSrc,   int ySrc,   int width,
                       int height,   HBITMAP hbmMask,   int xMask,   int yMask);

 __declspec(dllimport) int  __stdcall OffsetClipRgn(  HDC hdc,   int x,   int y);
__declspec(dllimport) int  __stdcall OffsetRgn(  HRGN hrgn,   int x,   int y);
 __declspec(dllimport) BOOL __stdcall PatBlt(  HDC hdc,   int x,   int y,   int w,   int h,   DWORD rop);
 __declspec(dllimport) BOOL __stdcall Pie(  HDC hdc,   int left,   int top,   int right,   int bottom,   int xr1,   int yr1,   int xr2,   int yr2);
__declspec(dllimport) BOOL __stdcall PlayMetaFile(  HDC hdc,   HMETAFILE hmf);
 __declspec(dllimport) BOOL __stdcall PaintRgn(  HDC hdc,   HRGN hrgn);
 __declspec(dllimport) BOOL __stdcall PolyPolygon(  HDC hdc,    const POINT *apt,    const INT *asz,    int csz);
__declspec(dllimport) BOOL __stdcall PtInRegion(  HRGN hrgn,   int x,   int y);
__declspec(dllimport) BOOL __stdcall PtVisible(  HDC hdc,   int x,   int y);
__declspec(dllimport) BOOL __stdcall RectInRegion(  HRGN hrgn,   const RECT * lprect);
__declspec(dllimport) BOOL __stdcall RectVisible(  HDC hdc,   const RECT * lprect);
 __declspec(dllimport) BOOL __stdcall Rectangle(  HDC hdc,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) BOOL __stdcall RestoreDC(  HDC hdc,   int nSavedDC);
 __declspec(dllimport) HDC  __stdcall ResetDCA(  HDC hdc,   const DEVMODEA * lpdm);
 __declspec(dllimport) HDC  __stdcall ResetDCW(  HDC hdc,   const DEVMODEW * lpdm);




#line 4369 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
 __declspec(dllimport) UINT __stdcall RealizePalette(  HDC hdc);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceA(  LPCSTR lpFileName);
__declspec(dllimport) BOOL __stdcall RemoveFontResourceW(  LPCWSTR lpFileName);




#line 4377 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
 __declspec(dllimport) BOOL  __stdcall RoundRect(  HDC hdc,   int left,   int top,   int right,   int bottom,   int width,   int height);
 __declspec(dllimport) BOOL __stdcall ResizePalette(  HPALETTE hpal,   UINT n);

 __declspec(dllimport) int  __stdcall SaveDC(  HDC hdc);
 __declspec(dllimport) int  __stdcall SelectClipRgn(  HDC hdc,   HRGN hrgn);
__declspec(dllimport) int  __stdcall ExtSelectClipRgn(  HDC hdc,   HRGN hrgn,   int mode);
__declspec(dllimport) int  __stdcall SetMetaRgn(  HDC hdc);
 __declspec(dllimport) HGDIOBJ __stdcall SelectObject(  HDC hdc,   HGDIOBJ h);
 __declspec(dllimport) HPALETTE __stdcall SelectPalette(  HDC hdc,   HPALETTE hPal,   BOOL bForceBkgd);
 __declspec(dllimport) COLORREF __stdcall SetBkColor(  HDC hdc,   COLORREF color);


__declspec(dllimport) COLORREF __stdcall SetDCBrushColor(  HDC hdc,   COLORREF color);
__declspec(dllimport) COLORREF __stdcall SetDCPenColor(  HDC hdc,   COLORREF color);
#line 4392 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

 __declspec(dllimport) int   __stdcall SetBkMode(  HDC hdc,   int mode);

__declspec(dllimport)
LONG __stdcall
SetBitmapBits(
      HBITMAP hbm,
      DWORD cb,
      const void *pvBits);

__declspec(dllimport) UINT  __stdcall SetBoundsRect(  HDC hdc,   const RECT * lprect,   UINT flags);
__declspec(dllimport) int   __stdcall SetDIBits(  HDC hdc,   HBITMAP hbm,   UINT start,   UINT cLines,   const void *lpBits,   const BITMAPINFO * lpbmi,   UINT ColorUse);
 __declspec(dllimport) int   __stdcall SetDIBitsToDevice(  HDC hdc,   int xDest,   int yDest,   DWORD w,   DWORD h,   int xSrc,
          int ySrc,   UINT StartScan,   UINT cLines,   const void * lpvBits,   const BITMAPINFO * lpbmi,   UINT ColorUse);
 __declspec(dllimport) DWORD __stdcall SetMapperFlags(  HDC hdc,   DWORD flags);
__declspec(dllimport) int   __stdcall SetGraphicsMode(  HDC hdc,   int iMode);
 __declspec(dllimport) int   __stdcall SetMapMode(  HDC hdc,   int iMode);


 __declspec(dllimport) DWORD __stdcall SetLayout(  HDC hdc,   DWORD l);
__declspec(dllimport) DWORD __stdcall GetLayout(  HDC hdc);
#line 4414 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport) HMETAFILE   __stdcall SetMetaFileBitsEx(  UINT cbBuffer,   const BYTE *lpData);
 __declspec(dllimport) UINT  __stdcall SetPaletteEntries(     HPALETTE hpal,
                                              UINT iStart,
                                              UINT cEntries,
                                              const PALETTEENTRY *pPalEntries);
 __declspec(dllimport) COLORREF __stdcall SetPixel(  HDC hdc,   int x,   int y,   COLORREF color);
__declspec(dllimport) BOOL   __stdcall SetPixelV(  HDC hdc,   int x,   int y,   COLORREF color);
__declspec(dllimport) BOOL  __stdcall SetPixelFormat(  HDC hdc,   int format,   const PIXELFORMATDESCRIPTOR * ppfd);
 __declspec(dllimport) int   __stdcall SetPolyFillMode(  HDC hdc,   int mode);
 __declspec(dllimport) BOOL  __stdcall StretchBlt(  HDC hdcDest,   int xDest,   int yDest,   int wDest,   int hDest,   HDC hdcSrc,   int xSrc,   int ySrc,   int wSrc,   int hSrc,   DWORD rop);
__declspec(dllimport) BOOL   __stdcall SetRectRgn(  HRGN hrgn,   int left,   int top,   int right,   int bottom);
 __declspec(dllimport) int   __stdcall StretchDIBits(  HDC hdc,   int xDest,   int yDest,   int DestWidth,   int DestHeight,   int xSrc,   int ySrc,   int SrcWidth,   int SrcHeight,
          const void * lpBits,   const BITMAPINFO * lpbmi,   UINT iUsage,   DWORD rop);
 __declspec(dllimport) int   __stdcall SetROP2(  HDC hdc,   int rop2);
 __declspec(dllimport) int   __stdcall SetStretchBltMode(  HDC hdc,   int mode);
__declspec(dllimport) UINT  __stdcall SetSystemPaletteUse(  HDC hdc,   UINT use);
 __declspec(dllimport) int   __stdcall SetTextCharacterExtra(  HDC hdc,   int extra);
 __declspec(dllimport) COLORREF __stdcall SetTextColor(  HDC hdc,   COLORREF color);
 __declspec(dllimport) UINT  __stdcall SetTextAlign(  HDC hdc,   UINT align);
 __declspec(dllimport) BOOL  __stdcall SetTextJustification(  HDC hdc,   int extra,   int count);
__declspec(dllimport) BOOL  __stdcall UpdateColors(  HDC hdc);

#line 4438 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion












































#pragma region Application Family


typedef USHORT COLOR16;

typedef struct _TRIVERTEX
{
    LONG    x;
    LONG    y;
    COLOR16 Red;
    COLOR16 Green;
    COLOR16 Blue;
    COLOR16 Alpha;
}TRIVERTEX,*PTRIVERTEX,*LPTRIVERTEX;

#line 4499 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family


typedef struct _GRADIENT_TRIANGLE
{
    ULONG Vertex1;
    ULONG Vertex2;
    ULONG Vertex3;
} GRADIENT_TRIANGLE,*PGRADIENT_TRIANGLE,*LPGRADIENT_TRIANGLE;

typedef struct _GRADIENT_RECT
{
    ULONG UpperLeft;
    ULONG LowerRight;
}GRADIENT_RECT,*PGRADIENT_RECT,*LPGRADIENT_RECT;

#line 4518 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Application Family


typedef struct _BLENDFUNCTION
{
    BYTE   BlendOp;
    BYTE   BlendFlags;
    BYTE   SourceConstantAlpha;
    BYTE   AlphaFormat;
}BLENDFUNCTION,*PBLENDFUNCTION;

#line 4532 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#pragma region Desktop Family















__declspec(dllimport) BOOL __stdcall AlphaBlend(
      HDC hdcDest,
      int xoriginDest,
      int yoriginDest,
      int wDest,
      int hDest,
      HDC hdcSrc,
      int xoriginSrc,
      int yoriginSrc,
      int wSrc,
      int hSrc,
      BLENDFUNCTION ftn);

__declspec(dllimport) BOOL __stdcall TransparentBlt(
      HDC hdcDest,
      int xoriginDest,
      int yoriginDest,
      int wDest,
      int hDest,
      HDC hdcSrc,
      int xoriginSrc,
      int yoriginSrc,
      int wSrc,
      int hSrc,
      UINT crTransparent);











__declspec(dllimport)
BOOL
__stdcall
GradientFill(
      HDC hdc,
      PTRIVERTEX pVertex,
      ULONG nVertex,
      PVOID pMesh,
      ULONG nMesh,
      ULONG ulMode
    );

#line 4599 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 4602 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Desktop Family





__declspec(dllimport) BOOL  __stdcall GdiAlphaBlend(  HDC hdcDest,   int xoriginDest,   int yoriginDest,   int wDest,   int hDest,   HDC hdcSrc,   int xoriginSrc,   int yoriginSrc,   int wSrc,   int hSrc,   BLENDFUNCTION ftn);

__declspec(dllimport) BOOL  __stdcall GdiTransparentBlt(  HDC hdcDest,  int xoriginDest,   int yoriginDest,   int wDest,   int hDest,   HDC hdcSrc,
                                             int xoriginSrc,   int yoriginSrc,   int wSrc,   int hSrc,   UINT crTransparent);

__declspec(dllimport) BOOL  __stdcall GdiGradientFill(   HDC hdc,
                                          PTRIVERTEX pVertex,
                                          ULONG nVertex,
                                          PVOID pMesh,
                                          ULONG nCount,
                                          ULONG ulMode);

#line 4622 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"





__declspec(dllimport) BOOL  __stdcall PlayMetaFileRecord(    HDC hdc,
                                              LPHANDLETABLE lpHandleTable,
                                              LPMETARECORD lpMR,
                                              UINT noObjs);

typedef int (__stdcall* MFENUMPROC)(   HDC hdc,   HANDLETABLE * lpht,   METARECORD * lpMR,   int nObj,   LPARAM param);
__declspec(dllimport) BOOL  __stdcall EnumMetaFile(   HDC hdc,   HMETAFILE hmf,   MFENUMPROC proc,   LPARAM param);

typedef int (__stdcall* ENHMFENUMPROC)(  HDC hdc,   HANDLETABLE * lpht,   const ENHMETARECORD * lpmr,   int nHandles,   LPARAM data);



__declspec(dllimport) HENHMETAFILE __stdcall CloseEnhMetaFile(   HDC hdc);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileA(   HENHMETAFILE hEnh,   LPCSTR lpFileName);
__declspec(dllimport) HENHMETAFILE __stdcall CopyEnhMetaFileW(   HENHMETAFILE hEnh,   LPCWSTR lpFileName);




#line 4647 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileA(   HDC hdc,   LPCSTR lpFilename,   const RECT *lprc,   LPCSTR lpDesc);
__declspec(dllimport) HDC   __stdcall CreateEnhMetaFileW(   HDC hdc,   LPCWSTR lpFilename,   const RECT *lprc,   LPCWSTR lpDesc);




#line 4654 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall DeleteEnhMetaFile(   HENHMETAFILE hmf);
__declspec(dllimport) BOOL  __stdcall EnumEnhMetaFile(   HDC hdc,   HENHMETAFILE hmf,   ENHMFENUMPROC proc,
                                          LPVOID param,   const RECT * lpRect);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileA(   LPCSTR lpName);
__declspec(dllimport) HENHMETAFILE  __stdcall GetEnhMetaFileW(   LPCWSTR lpName);




#line 4664 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileBits(    HENHMETAFILE hEMF,
                                              UINT nSize,
                                              LPBYTE lpData);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionA(    HENHMETAFILE hemf,
                                                      UINT cchBuffer,
                                                      LPSTR lpDescription);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileDescriptionW(    HENHMETAFILE hemf,
                                                      UINT cchBuffer,
                                                      LPWSTR lpDescription);




#line 4678 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) UINT  __stdcall GetEnhMetaFileHeader(      HENHMETAFILE hemf,
                                                  UINT nSize,
                                                  LPENHMETAHEADER lpEnhMetaHeader);
__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePaletteEntries(  HENHMETAFILE hemf,
                                                      UINT nNumEntries,
                                                      LPPALETTEENTRY lpPaletteEntries);

__declspec(dllimport) UINT  __stdcall GetEnhMetaFilePixelFormat(     HENHMETAFILE hemf,
                                                      UINT cbBuffer,
                                                      PIXELFORMATDESCRIPTOR *ppfd);
__declspec(dllimport) UINT  __stdcall GetWinMetaFileBits(    HENHMETAFILE hemf,
                                              UINT cbData16,
                                              LPBYTE pData16,
                                              INT iMapMode,
                                              HDC hdcRef);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFile(   HDC hdc,   HENHMETAFILE hmf,   const RECT * lprect);
__declspec(dllimport) BOOL  __stdcall PlayEnhMetaFileRecord(     HDC hdc,
                                                  LPHANDLETABLE pht,
                                                  const ENHMETARECORD *pmr,
                                                  UINT cht);

__declspec(dllimport) HENHMETAFILE  __stdcall SetEnhMetaFileBits(    UINT nSize,
                                                      const BYTE * pb);

__declspec(dllimport) HENHMETAFILE  __stdcall SetWinMetaFileBits(    UINT nSize,
                                                      const BYTE *lpMeta16Data,
                                                      HDC hdcRef,
                                                      const METAFILEPICT *lpMFP);
__declspec(dllimport) BOOL  __stdcall GdiComment(  HDC hdc,   UINT nSize,   const BYTE *lpData);

#line 4709 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"



__declspec(dllimport) BOOL __stdcall GetTextMetricsA(   HDC hdc,   LPTEXTMETRICA lptm);
__declspec(dllimport) BOOL __stdcall GetTextMetricsW(   HDC hdc,   LPTEXTMETRICW lptm);




#line 4719 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"



















#line 4739 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 4741 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"



typedef struct tagDIBSECTION {
    BITMAP       dsBm;
    BITMAPINFOHEADER    dsBmih;
    DWORD               dsBitfields[3];
    HANDLE              dshSection;
    DWORD               dsOffset;
} DIBSECTION,  *LPDIBSECTION, *PDIBSECTION;


__declspec(dllimport) BOOL __stdcall AngleArc(   HDC hdc,   int x,   int y,   DWORD r,   FLOAT StartAngle,   FLOAT SweepAngle);
__declspec(dllimport) BOOL __stdcall PolyPolyline(  HDC hdc,   const POINT *apt,   const DWORD *asz,   DWORD csz);
__declspec(dllimport) BOOL __stdcall GetWorldTransform(   HDC hdc,   LPXFORM lpxf);
__declspec(dllimport) BOOL __stdcall SetWorldTransform(   HDC hdc,   const XFORM * lpxf);
__declspec(dllimport) BOOL __stdcall ModifyWorldTransform(   HDC hdc,   const XFORM * lpxf,   DWORD mode);
__declspec(dllimport) BOOL __stdcall CombineTransform(   LPXFORM lpxfOut,   const XFORM *lpxf1,   const XFORM *lpxf2);






__declspec(dllimport)   HBITMAP __stdcall CreateDIBSection(
             HDC               hdc, 
                 const BITMAPINFO *pbmi, 
                 UINT              usage, 
    
    
                    void            **ppvBits, 
             HANDLE            hSection, 
                 DWORD             offset);


 
__declspec(dllimport) UINT __stdcall GetDIBColorTable(   HDC  hdc,
                                          UINT iStart,
                                          UINT cEntries,
                                          RGBQUAD *prgbq);
__declspec(dllimport) UINT __stdcall SetDIBColorTable(   HDC  hdc,
                                          UINT iStart,
                                          UINT cEntries,
                                          const RGBQUAD *prgbq);




































typedef struct  tagCOLORADJUSTMENT {
    WORD   caSize;
    WORD   caFlags;
    WORD   caIlluminantIndex;
    WORD   caRedGamma;
    WORD   caGreenGamma;
    WORD   caBlueGamma;
    WORD   caReferenceBlack;
    WORD   caReferenceWhite;
    SHORT  caContrast;
    SHORT  caBrightness;
    SHORT  caColorfulness;
    SHORT  caRedGreenTint;
} COLORADJUSTMENT, *PCOLORADJUSTMENT,  *LPCOLORADJUSTMENT;

__declspec(dllimport) BOOL __stdcall SetColorAdjustment(   HDC hdc,   const COLORADJUSTMENT *lpca);
__declspec(dllimport) BOOL __stdcall GetColorAdjustment(   HDC hdc,   LPCOLORADJUSTMENT lpca);
__declspec(dllimport) HPALETTE __stdcall CreateHalftonePalette(   HDC hdc);


typedef BOOL (__stdcall* ABORTPROC)(   HDC,   int);


#line 4845 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

typedef struct _DOCINFOA {
    int     cbSize;
    LPCSTR   lpszDocName;
    LPCSTR   lpszOutput;

    LPCSTR   lpszDatatype;
    DWORD    fwType;
#line 4854 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
} DOCINFOA, *LPDOCINFOA;
typedef struct _DOCINFOW {
    int     cbSize;
    LPCWSTR  lpszDocName;
    LPCWSTR  lpszOutput;

    LPCWSTR  lpszDatatype;
    DWORD    fwType;
#line 4863 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
} DOCINFOW, *LPDOCINFOW;




typedef DOCINFOA DOCINFO;
typedef LPDOCINFOA LPDOCINFO;
#line 4871 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"




#line 4876 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

 __declspec(dllimport) int __stdcall StartDocA(  HDC hdc,   const DOCINFOA *lpdi);
 __declspec(dllimport) int __stdcall StartDocW(  HDC hdc,   const DOCINFOW *lpdi);




#line 4884 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
 __declspec(dllimport) int __stdcall EndDoc(  HDC hdc);
 __declspec(dllimport) int __stdcall StartPage(  HDC hdc);
 __declspec(dllimport) int __stdcall EndPage(  HDC hdc);
 __declspec(dllimport) int __stdcall AbortDoc(  HDC hdc);
__declspec(dllimport) int __stdcall SetAbortProc(  HDC hdc,   ABORTPROC proc);

__declspec(dllimport) BOOL __stdcall AbortPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall ArcTo(  HDC hdc,   int left,   int top,   int right,   int bottom,   int xr1,   int yr1,   int xr2,   int yr2);
__declspec(dllimport) BOOL __stdcall BeginPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall CloseFigure(  HDC hdc);
__declspec(dllimport) BOOL __stdcall EndPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall FillPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall FlattenPath(  HDC hdc);
__declspec(dllimport) int  __stdcall GetPath(  HDC hdc,   LPPOINT apt,   LPBYTE aj, int cpt);
__declspec(dllimport) HRGN __stdcall PathToRegion(  HDC hdc);
__declspec(dllimport) BOOL __stdcall PolyDraw(  HDC hdc,   const POINT * apt,   const BYTE * aj,   int cpt);
__declspec(dllimport) BOOL __stdcall SelectClipPath(  HDC hdc,   int mode);
__declspec(dllimport) int  __stdcall SetArcDirection(  HDC hdc,   int dir);
__declspec(dllimport) BOOL __stdcall SetMiterLimit(  HDC hdc,   FLOAT limit,   PFLOAT old);
__declspec(dllimport) BOOL __stdcall StrokeAndFillPath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall StrokePath(  HDC hdc);
__declspec(dllimport) BOOL __stdcall WidenPath(  HDC hdc);
__declspec(dllimport) HPEN __stdcall ExtCreatePen(   DWORD iPenStyle,
                                      DWORD cWidth,
                                      const LOGBRUSH *plbrush,
                                      DWORD cStyle,
                                      const DWORD *pstyle);
__declspec(dllimport) BOOL __stdcall GetMiterLimit(  HDC hdc,   PFLOAT plimit);
__declspec(dllimport) int  __stdcall GetArcDirection(  HDC hdc);

__declspec(dllimport) int   __stdcall GetObjectA(  HANDLE h,   int c,   LPVOID pv);
__declspec(dllimport) int   __stdcall GetObjectW(  HANDLE h,   int c,   LPVOID pv);




#line 4921 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"




















#line 4942 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


 __declspec(dllimport) BOOL  __stdcall MoveToEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall TextOutA(   HDC hdc,   int x,   int y,   LPCSTR lpString,   int c);
 __declspec(dllimport) BOOL  __stdcall TextOutW(   HDC hdc,   int x,   int y,   LPCWSTR lpString,   int c);




#line 4952 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
 __declspec(dllimport) BOOL  __stdcall ExtTextOutA(   HDC hdc,   int x,   int y,   UINT options,   const RECT * lprect,   LPCSTR lpString,   UINT c,   const INT * lpDx);
 __declspec(dllimport) BOOL  __stdcall ExtTextOutW(   HDC hdc,   int x,   int y,   UINT options,   const RECT * lprect,   LPCWSTR lpString,   UINT c,   const INT * lpDx);




#line 4959 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall PolyTextOutA(  HDC hdc,   const POLYTEXTA * ppt,   int nstrings);
__declspec(dllimport) BOOL  __stdcall PolyTextOutW(  HDC hdc,   const POLYTEXTW * ppt,   int nstrings);




#line 4966 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport) HRGN  __stdcall CreatePolygonRgn(      const POINT *pptl,
                                              int cPoint,
                                              int iMode);
__declspec(dllimport) BOOL  __stdcall DPtoLP(   HDC hdc,   LPPOINT lppt,   int c);
__declspec(dllimport) BOOL  __stdcall LPtoDP(   HDC hdc,   LPPOINT lppt,   int c);
 __declspec(dllimport) BOOL  __stdcall Polygon(  HDC hdc,   const POINT *apt,   int cpt);
 __declspec(dllimport) BOOL  __stdcall Polyline(  HDC hdc,   const POINT *apt,   int cpt);

__declspec(dllimport) BOOL  __stdcall PolyBezier(  HDC hdc,   const POINT * apt,   DWORD cpt);
__declspec(dllimport) BOOL  __stdcall PolyBezierTo(  HDC hdc,   const POINT * apt,   DWORD cpt);
__declspec(dllimport) BOOL  __stdcall PolylineTo(  HDC hdc,   const POINT * apt,   DWORD cpt);

 __declspec(dllimport) BOOL  __stdcall SetViewportExtEx(   HDC hdc,   int x,   int y,   LPSIZE lpsz);
 __declspec(dllimport) BOOL  __stdcall SetViewportOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall SetWindowExtEx(   HDC hdc,   int x,   int y,   LPSIZE lpsz);
 __declspec(dllimport) BOOL  __stdcall SetWindowOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);

 __declspec(dllimport) BOOL  __stdcall OffsetViewportOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall OffsetWindowOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);
 __declspec(dllimport) BOOL  __stdcall ScaleViewportExtEx(   HDC hdc,   int xn,   int dx,   int yn,   int yd,   LPSIZE lpsz);
 __declspec(dllimport) BOOL  __stdcall ScaleWindowExtEx(   HDC hdc,   int xn,   int xd,   int yn,   int yd,   LPSIZE lpsz);
__declspec(dllimport) BOOL  __stdcall SetBitmapDimensionEx(   HBITMAP hbm,   int w,   int h,   LPSIZE lpsz);
__declspec(dllimport) BOOL  __stdcall SetBrushOrgEx(   HDC hdc,   int x,   int y,   LPPOINT lppt);

__declspec(dllimport) int   __stdcall GetTextFaceA(   HDC hdc,   int c,    LPSTR lpName);
__declspec(dllimport) int   __stdcall GetTextFaceW(   HDC hdc,   int c,    LPWSTR lpName);




#line 4998 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"



typedef struct tagKERNINGPAIR {
   WORD wFirst;
   WORD wSecond;
   int  iKernAmount;
} KERNINGPAIR, *LPKERNINGPAIR;

__declspec(dllimport) DWORD __stdcall GetKerningPairsA(      HDC hdc,
                                              DWORD nPairs,
                                              LPKERNINGPAIR   lpKernPair);
__declspec(dllimport) DWORD __stdcall GetKerningPairsW(      HDC hdc,
                                              DWORD nPairs,
                                              LPKERNINGPAIR   lpKernPair);




#line 5018 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


__declspec(dllimport) BOOL  __stdcall GetDCOrgEx(   HDC hdc,   LPPOINT lppt);
__declspec(dllimport) BOOL  __stdcall FixBrushOrgEx(   HDC hdc,   int x,   int y,    LPPOINT ptl);
__declspec(dllimport) BOOL  __stdcall UnrealizeObject(   HGDIOBJ h);

__declspec(dllimport) BOOL  __stdcall GdiFlush(void);
__declspec(dllimport) DWORD __stdcall GdiSetBatchLimit(   DWORD dw);
__declspec(dllimport) DWORD __stdcall GdiGetBatchLimit(void);








typedef int (__stdcall* ICMENUMPROCA)(LPSTR, LPARAM);
typedef int (__stdcall* ICMENUMPROCW)(LPWSTR, LPARAM);




#line 5042 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport) int         __stdcall SetICMMode(   HDC hdc,   int mode);
__declspec(dllimport) BOOL        __stdcall CheckColorsInGamut(      HDC hdc,
                                                      LPRGBTRIPLE lpRGBTriple,
                                                      LPVOID dlpBuffer,
                                                      DWORD nCount);

__declspec(dllimport) HCOLORSPACE __stdcall GetColorSpace(   HDC hdc);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceA(   HCOLORSPACE hColorSpace,
                                                  LPLOGCOLORSPACEA lpBuffer,
                                                  DWORD nSize);
__declspec(dllimport) BOOL        __stdcall GetLogColorSpaceW(   HCOLORSPACE hColorSpace,
                                                  LPLOGCOLORSPACEW lpBuffer,
                                                  DWORD nSize);




#line 5061 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceA(   LPLOGCOLORSPACEA lplcs);
__declspec(dllimport) HCOLORSPACE __stdcall CreateColorSpaceW(   LPLOGCOLORSPACEW lplcs);




#line 5069 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) HCOLORSPACE __stdcall SetColorSpace(   HDC hdc,   HCOLORSPACE hcs);
__declspec(dllimport) BOOL        __stdcall DeleteColorSpace(   HCOLORSPACE hcs);
__declspec(dllimport) BOOL        __stdcall GetICMProfileA(      HDC hdc,
                                                  LPDWORD pBufSize,
                                                  LPSTR pszFilename);
__declspec(dllimport) BOOL        __stdcall GetICMProfileW(      HDC hdc,
                                                  LPDWORD pBufSize,
                                                  LPWSTR pszFilename);




#line 5082 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport) BOOL        __stdcall SetICMProfileA(   HDC hdc,   LPSTR lpFileName);
__declspec(dllimport) BOOL        __stdcall SetICMProfileW(   HDC hdc,   LPWSTR lpFileName);




#line 5090 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL        __stdcall GetDeviceGammaRamp(   HDC hdc,   LPVOID lpRamp);
__declspec(dllimport) BOOL        __stdcall SetDeviceGammaRamp(   HDC hdc,    LPVOID lpRamp);
__declspec(dllimport) BOOL        __stdcall ColorMatchToTarget(   HDC hdc,   HDC hdcTarget,   DWORD action);
__declspec(dllimport) int         __stdcall EnumICMProfilesA(   HDC hdc,   ICMENUMPROCA proc,   LPARAM param);
__declspec(dllimport) int         __stdcall EnumICMProfilesW(   HDC hdc,   ICMENUMPROCW proc,   LPARAM param);




#line 5100 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

__declspec(dllimport) BOOL        __stdcall UpdateICMRegKeyA(   DWORD reserved,   LPSTR lpszCMID,   LPSTR lpszFileName,   UINT command);

__declspec(dllimport) BOOL        __stdcall UpdateICMRegKeyW(   DWORD reserved,   LPWSTR lpszCMID,   LPWSTR lpszFileName,   UINT command);




#line 5109 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma deprecated (UpdateICMRegKeyW)
#pragma deprecated (UpdateICMRegKeyA)

#line 5113 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


__declspec(dllimport) BOOL        __stdcall ColorCorrectPalette(   HDC hdc,   HPALETTE hPal,   DWORD deFirst,   DWORD num);
#line 5117 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"









#line 5127 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"




















































































































#line 5244 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
















#line 5261 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"





#line 5267 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"









#line 5277 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"



typedef struct tagEMR
{
    DWORD   iType;              
    DWORD   nSize;              
                                
} EMR, *PEMR;



typedef struct tagEMRTEXT
{
    POINTL  ptlReference;
    DWORD   nChars;
    DWORD   offString;          
    DWORD   fOptions;
    RECTL   rcl;
    DWORD   offDx;              
                                
} EMRTEXT, *PEMRTEXT;



typedef struct tagABORTPATH
{
    EMR     emr;
} EMRABORTPATH,      *PEMRABORTPATH,
  EMRBEGINPATH,      *PEMRBEGINPATH,
  EMRENDPATH,        *PEMRENDPATH,
  EMRCLOSEFIGURE,    *PEMRCLOSEFIGURE,
  EMRFLATTENPATH,    *PEMRFLATTENPATH,
  EMRWIDENPATH,      *PEMRWIDENPATH,
  EMRSETMETARGN,     *PEMRSETMETARGN,
  EMRSAVEDC,         *PEMRSAVEDC,
  EMRREALIZEPALETTE, *PEMRREALIZEPALETTE;

typedef struct tagEMRSELECTCLIPPATH
{
    EMR     emr;
    DWORD   iMode;
} EMRSELECTCLIPPATH,    *PEMRSELECTCLIPPATH,
  EMRSETBKMODE,         *PEMRSETBKMODE,
  EMRSETMAPMODE,        *PEMRSETMAPMODE,

  EMRSETLAYOUT,         *PEMRSETLAYOUT,
#line 5325 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
  EMRSETPOLYFILLMODE,   *PEMRSETPOLYFILLMODE,
  EMRSETROP2,           *PEMRSETROP2,
  EMRSETSTRETCHBLTMODE, *PEMRSETSTRETCHBLTMODE,
  EMRSETICMMODE,        *PEMRSETICMMODE,
  EMRSETTEXTALIGN,      *PEMRSETTEXTALIGN;

typedef struct tagEMRSETMITERLIMIT
{
    EMR     emr;
    FLOAT   eMiterLimit;
} EMRSETMITERLIMIT, *PEMRSETMITERLIMIT;

typedef struct tagEMRRESTOREDC
{
    EMR     emr;
    LONG    iRelative;          
} EMRRESTOREDC, *PEMRRESTOREDC;

typedef struct tagEMRSETARCDIRECTION
{
    EMR     emr;
    DWORD   iArcDirection;      
                                
} EMRSETARCDIRECTION, *PEMRSETARCDIRECTION;

typedef struct tagEMRSETMAPPERFLAGS
{
    EMR     emr;
    DWORD   dwFlags;
} EMRSETMAPPERFLAGS, *PEMRSETMAPPERFLAGS;

typedef struct tagEMRSETTEXTCOLOR
{
    EMR     emr;
    COLORREF crColor;
} EMRSETBKCOLOR,   *PEMRSETBKCOLOR,
  EMRSETTEXTCOLOR, *PEMRSETTEXTCOLOR;

typedef struct tagEMRSELECTOBJECT
{
    EMR     emr;
    DWORD   ihObject;           
} EMRSELECTOBJECT, *PEMRSELECTOBJECT,
  EMRDELETEOBJECT, *PEMRDELETEOBJECT;

typedef struct tagEMRSELECTPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
} EMRSELECTPALETTE, *PEMRSELECTPALETTE;

typedef struct tagEMRRESIZEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   cEntries;
} EMRRESIZEPALETTE, *PEMRRESIZEPALETTE;

typedef struct tagEMRSETPALETTEENTRIES
{
    EMR     emr;
    DWORD   ihPal;              
    DWORD   iStart;
    DWORD   cEntries;
    PALETTEENTRY aPalEntries[1];
} EMRSETPALETTEENTRIES, *PEMRSETPALETTEENTRIES;

typedef struct tagEMRSETCOLORADJUSTMENT
{
    EMR     emr;
    COLORADJUSTMENT ColorAdjustment;
} EMRSETCOLORADJUSTMENT, *PEMRSETCOLORADJUSTMENT;

typedef struct tagEMRGDICOMMENT
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGDICOMMENT, *PEMRGDICOMMENT;

typedef struct tagEMREOF
{
    EMR     emr;
    DWORD   nPalEntries;        
    DWORD   offPalEntries;      
    DWORD   nSizeLast;          
                                
                                
} EMREOF, *PEMREOF;

typedef struct tagEMRLINETO
{
    EMR     emr;
    POINTL  ptl;
} EMRLINETO,   *PEMRLINETO,
  EMRMOVETOEX, *PEMRMOVETOEX;

typedef struct tagEMROFFSETCLIPRGN
{
    EMR     emr;
    POINTL  ptlOffset;
} EMROFFSETCLIPRGN, *PEMROFFSETCLIPRGN;

typedef struct tagEMRFILLPATH
{
    EMR     emr;
    RECTL   rclBounds;          
} EMRFILLPATH,          *PEMRFILLPATH,
  EMRSTROKEANDFILLPATH, *PEMRSTROKEANDFILLPATH,
  EMRSTROKEPATH,        *PEMRSTROKEPATH;

typedef struct tagEMREXCLUDECLIPRECT
{
    EMR     emr;
    RECTL   rclClip;
} EMREXCLUDECLIPRECT,   *PEMREXCLUDECLIPRECT,
  EMRINTERSECTCLIPRECT, *PEMRINTERSECTCLIPRECT;

typedef struct tagEMRSETVIEWPORTORGEX
{
    EMR     emr;
    POINTL  ptlOrigin;
} EMRSETVIEWPORTORGEX, *PEMRSETVIEWPORTORGEX,
  EMRSETWINDOWORGEX,   *PEMRSETWINDOWORGEX,
  EMRSETBRUSHORGEX,    *PEMRSETBRUSHORGEX;

typedef struct tagEMRSETVIEWPORTEXTEX
{
    EMR     emr;
    SIZEL   szlExtent;
} EMRSETVIEWPORTEXTEX, *PEMRSETVIEWPORTEXTEX,
  EMRSETWINDOWEXTEX,   *PEMRSETWINDOWEXTEX;

typedef struct tagEMRSCALEVIEWPORTEXTEX
{
    EMR     emr;
    LONG    xNum;
    LONG    xDenom;
    LONG    yNum;
    LONG    yDenom;
} EMRSCALEVIEWPORTEXTEX, *PEMRSCALEVIEWPORTEXTEX,
  EMRSCALEWINDOWEXTEX,   *PEMRSCALEWINDOWEXTEX;

typedef struct tagEMRSETWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
} EMRSETWORLDTRANSFORM, *PEMRSETWORLDTRANSFORM;

typedef struct tagEMRMODIFYWORLDTRANSFORM
{
    EMR     emr;
    XFORM   xform;
    DWORD   iMode;
} EMRMODIFYWORLDTRANSFORM, *PEMRMODIFYWORLDTRANSFORM;

typedef struct tagEMRSETPIXELV
{
    EMR     emr;
    POINTL  ptlPixel;
    COLORREF crColor;
} EMRSETPIXELV, *PEMRSETPIXELV;

typedef struct tagEMREXTFLOODFILL
{
    EMR     emr;
    POINTL  ptlStart;
    COLORREF crColor;
    DWORD   iMode;
} EMREXTFLOODFILL, *PEMREXTFLOODFILL;

typedef struct tagEMRELLIPSE
{
    EMR     emr;
    RECTL   rclBox;             
} EMRELLIPSE,  *PEMRELLIPSE,
  EMRRECTANGLE, *PEMRRECTANGLE;


typedef struct tagEMRROUNDRECT
{
    EMR     emr;
    RECTL   rclBox;             
    SIZEL   szlCorner;
} EMRROUNDRECT, *PEMRROUNDRECT;

typedef struct tagEMRARC
{
    EMR     emr;
    RECTL   rclBox;             
    POINTL  ptlStart;
    POINTL  ptlEnd;
} EMRARC,   *PEMRARC,
  EMRARCTO, *PEMRARCTO,
  EMRCHORD, *PEMRCHORD,
  EMRPIE,   *PEMRPIE;

typedef struct tagEMRANGLEARC
{
    EMR     emr;
    POINTL  ptlCenter;
    DWORD   nRadius;
    FLOAT   eStartAngle;
    FLOAT   eSweepAngle;
} EMRANGLEARC, *PEMRANGLEARC;

typedef struct tagEMRPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;
    POINTL  aptl[1];
} EMRPOLYLINE,     *PEMRPOLYLINE,
  EMRPOLYBEZIER,   *PEMRPOLYBEZIER,
  EMRPOLYGON,      *PEMRPOLYGON,
  EMRPOLYBEZIERTO, *PEMRPOLYBEZIERTO,
  EMRPOLYLINETO,   *PEMRPOLYLINETO;

typedef struct tagEMRPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;
    POINTS  apts[1];
} EMRPOLYLINE16,     *PEMRPOLYLINE16,
  EMRPOLYBEZIER16,   *PEMRPOLYBEZIER16,
  EMRPOLYGON16,      *PEMRPOLYGON16,
  EMRPOLYBEZIERTO16, *PEMRPOLYBEZIERTO16,
  EMRPOLYLINETO16,   *PEMRPOLYLINETO16;

typedef struct tagEMRPOLYDRAW
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cptl;               
    POINTL  aptl[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW, *PEMRPOLYDRAW;

typedef struct tagEMRPOLYDRAW16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cpts;               
    POINTS  apts[1];            
    BYTE    abTypes[1];         
} EMRPOLYDRAW16, *PEMRPOLYDRAW16;

typedef struct tagEMRPOLYPOLYLINE
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cptl;               
    DWORD   aPolyCounts[1];     
    POINTL  aptl[1];            
} EMRPOLYPOLYLINE, *PEMRPOLYPOLYLINE,
  EMRPOLYPOLYGON,  *PEMRPOLYPOLYGON;

typedef struct tagEMRPOLYPOLYLINE16
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   nPolys;             
    DWORD   cpts;               
    DWORD   aPolyCounts[1];     
    POINTS  apts[1];            
} EMRPOLYPOLYLINE16, *PEMRPOLYPOLYLINE16,
  EMRPOLYPOLYGON16,  *PEMRPOLYPOLYGON16;

typedef struct tagEMRINVERTRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    BYTE    RgnData[1];
} EMRINVERTRGN, *PEMRINVERTRGN,
  EMRPAINTRGN,  *PEMRPAINTRGN;

typedef struct tagEMRFILLRGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    BYTE    RgnData[1];
} EMRFILLRGN, *PEMRFILLRGN;

typedef struct tagEMRFRAMERGN
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbRgnData;          
    DWORD   ihBrush;            
    SIZEL   szlStroke;
    BYTE    RgnData[1];
} EMRFRAMERGN, *PEMRFRAMERGN;

typedef struct tagEMREXTSELECTCLIPRGN
{
    EMR     emr;
    DWORD   cbRgnData;          
    DWORD   iMode;
    BYTE    RgnData[1];
} EMREXTSELECTCLIPRGN, *PEMREXTSELECTCLIPRGN;

typedef struct tagEMREXTTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    EMRTEXT emrtext;            
                                
} EMREXTTEXTOUTA, *PEMREXTTEXTOUTA,
  EMREXTTEXTOUTW, *PEMREXTTEXTOUTW;

typedef struct tagEMRPOLYTEXTOUTA
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   iGraphicsMode;      
    FLOAT   exScale;            
    FLOAT   eyScale;            
    LONG    cStrings;
    EMRTEXT aemrtext[1];        
                                
} EMRPOLYTEXTOUTA, *PEMRPOLYTEXTOUTA,
  EMRPOLYTEXTOUTW, *PEMRPOLYTEXTOUTW;

typedef struct tagEMRBITBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
} EMRBITBLT, *PEMRBITBLT;

typedef struct tagEMRSTRETCHBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRSTRETCHBLT, *PEMRSTRETCHBLT;

typedef struct tagEMRMASKBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRMASKBLT, *PEMRMASKBLT;

typedef struct tagEMRPLGBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    POINTL  aptlDest[3];
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    xMask;
    LONG    yMask;
    DWORD   iUsageMask;         
    DWORD   offBmiMask;         
    DWORD   cbBmiMask;          
    DWORD   offBitsMask;        
    DWORD   cbBitsMask;         
} EMRPLGBLT, *PEMRPLGBLT;

typedef struct tagEMRSETDIBITSTODEVICE
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   iStartScan;
    DWORD   cScans;
} EMRSETDIBITSTODEVICE, *PEMRSETDIBITSTODEVICE;

typedef struct tagEMRSTRETCHDIBITS
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    xSrc;
    LONG    ySrc;
    LONG    cxSrc;
    LONG    cySrc;
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    DWORD   iUsageSrc;          
    DWORD   dwRop;
    LONG    cxDest;
    LONG    cyDest;
} EMRSTRETCHDIBITS, *PEMRSTRETCHDIBITS;

typedef struct tagEMREXTCREATEFONTINDIRECTW
{
    EMR     emr;
    DWORD   ihFont;             
    EXTLOGFONTW elfw;
} EMREXTCREATEFONTINDIRECTW, *PEMREXTCREATEFONTINDIRECTW;

typedef struct tagEMRCREATEPALETTE
{
    EMR     emr;
    DWORD   ihPal;              
    LOGPALETTE lgpl;            
                                
} EMRCREATEPALETTE, *PEMRCREATEPALETTE;

typedef struct tagEMRCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    LOGPEN  lopn;
} EMRCREATEPEN, *PEMRCREATEPEN;

typedef struct tagEMREXTCREATEPEN
{
    EMR     emr;
    DWORD   ihPen;              
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
    EXTLOGPEN32 elp;            
} EMREXTCREATEPEN, *PEMREXTCREATEPEN;

typedef struct tagEMRCREATEBRUSHINDIRECT
{
    EMR        emr;
    DWORD      ihBrush;          
    LOGBRUSH32 lb;               
                                 
} EMRCREATEBRUSHINDIRECT, *PEMRCREATEBRUSHINDIRECT;

typedef struct tagEMRCREATEMONOBRUSH
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEMONOBRUSH, *PEMRCREATEMONOBRUSH;

typedef struct tagEMRCREATEDIBPATTERNBRUSHPT
{
    EMR     emr;
    DWORD   ihBrush;            
    DWORD   iUsage;             
    DWORD   offBmi;             
    DWORD   cbBmi;              
                                
                                
    DWORD   offBits;            
    DWORD   cbBits;             
} EMRCREATEDIBPATTERNBRUSHPT, *PEMRCREATEDIBPATTERNBRUSHPT;

typedef struct tagEMRFORMAT
{
    DWORD   dSignature;         
    DWORD   nVersion;           
    DWORD   cbData;             
    DWORD   offData;            
                                
} EMRFORMAT, *PEMRFORMAT;



typedef struct tagEMRGLSRECORD
{
    EMR     emr;
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSRECORD, *PEMRGLSRECORD;

typedef struct tagEMRGLSBOUNDEDRECORD
{
    EMR     emr;
    RECTL   rclBounds;          
    DWORD   cbData;             
    BYTE    Data[1];
} EMRGLSBOUNDEDRECORD, *PEMRGLSBOUNDEDRECORD;

typedef struct tagEMRPIXELFORMAT
{
    EMR     emr;
    PIXELFORMATDESCRIPTOR pfd;
} EMRPIXELFORMAT, *PEMRPIXELFORMAT;

typedef struct tagEMRCREATECOLORSPACE
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEA  lcs;        
} EMRCREATECOLORSPACE, *PEMRCREATECOLORSPACE;

typedef struct tagEMRSETCOLORSPACE
{
    EMR     emr;
    DWORD   ihCS;               
} EMRSETCOLORSPACE,    *PEMRSETCOLORSPACE,
  EMRSELECTCOLORSPACE, *PEMRSELECTCOLORSPACE,
  EMRDELETECOLORSPACE, *PEMRDELETECOLORSPACE;

#line 5908 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"



typedef struct tagEMREXTESCAPE
{
    EMR     emr;
    INT     iEscape;            
    INT     cbEscData;          
    BYTE    EscData[1];         
} EMREXTESCAPE,  *PEMREXTESCAPE,
  EMRDRAWESCAPE, *PEMRDRAWESCAPE;

typedef struct tagEMRNAMEDESCAPE
{
    EMR     emr;
    INT     iEscape;            
    INT     cbDriver;           
    INT     cbEscData;          
    BYTE    EscData[1];         
} EMRNAMEDESCAPE, *PEMRNAMEDESCAPE;



typedef struct tagEMRSETICMPROFILE
{
    EMR     emr;
    DWORD   dwFlags;            
    DWORD   cbName;             
    DWORD   cbData;             
    BYTE    Data[1];            
} EMRSETICMPROFILE,  *PEMRSETICMPROFILE,
  EMRSETICMPROFILEA, *PEMRSETICMPROFILEA,
  EMRSETICMPROFILEW, *PEMRSETICMPROFILEW;



typedef struct tagEMRCREATECOLORSPACEW
{
    EMR             emr;
    DWORD           ihCS;       
    LOGCOLORSPACEW  lcs;        
    DWORD           dwFlags;    
    DWORD           cbData;     
    BYTE            Data[1];    
} EMRCREATECOLORSPACEW, *PEMRCREATECOLORSPACEW;



typedef struct tagCOLORMATCHTOTARGET
{
    EMR     emr;
    DWORD   dwAction;           
    DWORD   dwFlags;            
    DWORD   cbName;             
    DWORD   cbData;             
    BYTE    Data[1];            
} EMRCOLORMATCHTOTARGET, *PEMRCOLORMATCHTOTARGET;

typedef struct tagCOLORCORRECTPALETTE
{
    EMR     emr;
    DWORD   ihPalette;          
    DWORD   nFirstEntry;        
    DWORD   nPalEntries;        
    DWORD   nReserved;          
} EMRCOLORCORRECTPALETTE, *PEMRCOLORCORRECTPALETTE;

typedef struct tagEMRALPHABLEND
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRALPHABLEND, *PEMRALPHABLEND;

typedef struct tagEMRGRADIENTFILL
{
    EMR       emr;
    RECTL     rclBounds;          
    DWORD     nVer;
    DWORD     nTri;
    ULONG     ulMode;
    TRIVERTEX Ver[1];
}EMRGRADIENTFILL,*PEMRGRADIENTFILL;

typedef struct tagEMRTRANSPARENTBLT
{
    EMR     emr;
    RECTL   rclBounds;          
    LONG    xDest;
    LONG    yDest;
    LONG    cxDest;
    LONG    cyDest;
    DWORD   dwRop;
    LONG    xSrc;
    LONG    ySrc;
    XFORM   xformSrc;           
    COLORREF crBkColorSrc;      
    DWORD   iUsageSrc;          
                                
    DWORD   offBmiSrc;          
    DWORD   cbBmiSrc;           
    DWORD   offBitsSrc;         
    DWORD   cbBitsSrc;          
    LONG    cxSrc;
    LONG    cySrc;
} EMRTRANSPARENTBLT, *PEMRTRANSPARENTBLT;


#line 6033 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"










#line 6044 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"




__declspec(dllimport) BOOL  __stdcall wglCopyContext(HGLRC, HGLRC, UINT);
__declspec(dllimport) HGLRC __stdcall wglCreateContext(HDC);
__declspec(dllimport) HGLRC __stdcall wglCreateLayerContext(HDC, int);
__declspec(dllimport) BOOL  __stdcall wglDeleteContext(HGLRC);
__declspec(dllimport) HGLRC __stdcall wglGetCurrentContext(void);
__declspec(dllimport) HDC   __stdcall wglGetCurrentDC(void);
__declspec(dllimport) PROC  __stdcall wglGetProcAddress(LPCSTR);
__declspec(dllimport) BOOL  __stdcall wglMakeCurrent(HDC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglShareLists(HGLRC, HGLRC);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);
__declspec(dllimport) BOOL  __stdcall wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);




#line 6064 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
__declspec(dllimport) BOOL  __stdcall SwapBuffers(HDC);

typedef struct _POINTFLOAT {
    FLOAT   x;
    FLOAT   y;
} POINTFLOAT, *PPOINTFLOAT;

typedef struct _GLYPHMETRICSFLOAT {
    FLOAT       gmfBlackBoxX;
    FLOAT       gmfBlackBoxY;
    POINTFLOAT  gmfptGlyphOrigin;
    FLOAT       gmfCellIncX;
    FLOAT       gmfCellIncY;
} GLYPHMETRICSFLOAT, *PGLYPHMETRICSFLOAT,  *LPGLYPHMETRICSFLOAT;



__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);
__declspec(dllimport) BOOL  __stdcall wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT,
                                           FLOAT, int, LPGLYPHMETRICSFLOAT);




#line 6090 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


typedef struct tagLAYERPLANEDESCRIPTOR { 
    WORD  nSize;
    WORD  nVersion;
    DWORD dwFlags;
    BYTE  iPixelType;
    BYTE  cColorBits;
    BYTE  cRedBits;
    BYTE  cRedShift;
    BYTE  cGreenBits;
    BYTE  cGreenShift;
    BYTE  cBlueBits;
    BYTE  cBlueShift;
    BYTE  cAlphaBits;
    BYTE  cAlphaShift;
    BYTE  cAccumBits;
    BYTE  cAccumRedBits;
    BYTE  cAccumGreenBits;
    BYTE  cAccumBlueBits;
    BYTE  cAccumAlphaBits;
    BYTE  cDepthBits;
    BYTE  cStencilBits;
    BYTE  cAuxBuffers;
    BYTE  iLayerPlane;
    BYTE  bReserved;
    COLORREF crTransparent;
} LAYERPLANEDESCRIPTOR, *PLAYERPLANEDESCRIPTOR,  *LPLAYERPLANEDESCRIPTOR;

















































__declspec(dllimport) BOOL  __stdcall wglDescribeLayerPlane(HDC, int, int, UINT,
                                             LPLAYERPLANEDESCRIPTOR);
__declspec(dllimport) int   __stdcall wglSetLayerPaletteEntries(HDC, int, int, int,
                                                 const COLORREF *);
__declspec(dllimport) int   __stdcall wglGetLayerPaletteEntries(HDC, int, int, int,
                                                 COLORREF *);
__declspec(dllimport) BOOL  __stdcall wglRealizeLayerPalette(HDC, int, BOOL);
__declspec(dllimport) BOOL  __stdcall wglSwapLayerBuffers(HDC, UINT);



typedef struct _WGLSWAP
{
    HDC hdc;
    UINT uiFlags;
} WGLSWAP, *PWGLSWAP,  *LPWGLSWAP;



__declspec(dllimport) DWORD __stdcall wglSwapMultipleBuffers(UINT, const WGLSWAP *);

#line 6189 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 6191 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion

#line 6194 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#pragma region Desktop Family



#line 6200 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"
#pragma endregion


}
#line 6205 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


#pragma warning(pop)
#line 6209 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"

#line 6211 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wingdi.h"


#line 167 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

















#pragma once










#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#line 38 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






extern "C" {
#line 46 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 56 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#pragma region Desktop Family


typedef HANDLE HDWP;
typedef void MENUTEMPLATEA;
typedef void MENUTEMPLATEW;



typedef MENUTEMPLATEA MENUTEMPLATE;
#line 70 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
typedef PVOID LPMENUTEMPLATEA;
typedef PVOID LPMENUTEMPLATEW;



typedef LPMENUTEMPLATEA LPMENUTEMPLATE;
#line 77 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

typedef LRESULT (__stdcall* WNDPROC)(HWND, UINT, WPARAM, LPARAM);

#line 81 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion



#pragma region Application Family


typedef INT_PTR (__stdcall* DLGPROC)(HWND, UINT, WPARAM, LPARAM);

#line 91 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family


typedef void (__stdcall* TIMERPROC)(HWND, UINT, UINT_PTR, DWORD);
typedef BOOL (__stdcall* GRAYSTRINGPROC)(HDC, LPARAM, int);
typedef BOOL (__stdcall* WNDENUMPROC)(HWND, LPARAM);
typedef LRESULT (__stdcall* HOOKPROC)(int code, WPARAM wParam, LPARAM lParam);
typedef void (__stdcall* SENDASYNCPROC)(HWND, UINT, ULONG_PTR, LRESULT);

typedef BOOL (__stdcall* PROPENUMPROCA)(HWND, LPCSTR, HANDLE);
typedef BOOL (__stdcall* PROPENUMPROCW)(HWND, LPCWSTR, HANDLE);

typedef BOOL (__stdcall* PROPENUMPROCEXA)(HWND, LPSTR, HANDLE, ULONG_PTR);
typedef BOOL (__stdcall* PROPENUMPROCEXW)(HWND, LPWSTR, HANDLE, ULONG_PTR);

typedef int (__stdcall* EDITWORDBREAKPROCA)(LPSTR lpch, int ichCurrent, int cch, int code);
typedef int (__stdcall* EDITWORDBREAKPROCW)(LPWSTR lpch, int ichCurrent, int cch, int code);


typedef BOOL (__stdcall* DRAWSTATEPROC)(HDC hdc, LPARAM lData, WPARAM wData, int cx, int cy);
#line 114 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 117 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion





































#line 156 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family







typedef PROPENUMPROCA        PROPENUMPROC;
typedef PROPENUMPROCEXA      PROPENUMPROCEX;
typedef EDITWORDBREAKPROCA   EDITWORDBREAKPROC;
#line 169 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



typedef BOOL (__stdcall* NAMEENUMPROCA)(LPSTR, LPARAM);
typedef BOOL (__stdcall* NAMEENUMPROCW)(LPWSTR, LPARAM);

typedef NAMEENUMPROCA   WINSTAENUMPROCA;
typedef NAMEENUMPROCA   DESKTOPENUMPROCA;
typedef NAMEENUMPROCW   WINSTAENUMPROCW;
typedef NAMEENUMPROCW   DESKTOPENUMPROCW;












#line 192 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







typedef WINSTAENUMPROCA     WINSTAENUMPROC;
typedef DESKTOPENUMPROCA    DESKTOPENUMPROC;

#line 203 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 205 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion








#line 215 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




























#line 244 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"















#line 260 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 263 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#pragma warning(push)
#pragma warning(disable:4995)
#line 268 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
wvsprintfA(
      LPSTR,
        LPCSTR,
      va_list arglist);
__declspec(dllimport)
int
__stdcall
wvsprintfW(
      LPWSTR,
        LPCWSTR,
      va_list arglist);




#line 291 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
int
__cdecl
wsprintfA(
      LPSTR,
        LPCSTR,
    ...);
__declspec(dllimport)
int
__cdecl
wsprintfW(
      LPWSTR,
        LPCWSTR,
    ...);




#line 311 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#pragma warning(pop)
#line 315 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 317 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion




































#line 355 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"










































#line 398 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"















#line 414 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


























#line 441 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"








































































































































































#line 610 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









































#line 652 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 659 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





































#line 697 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


















#line 716 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





#line 722 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 727 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 734 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 737 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





























#pragma region Desktop Family





typedef struct tagCBT_CREATEWNDA
{
    struct tagCREATESTRUCTA *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDA, *LPCBT_CREATEWNDA;



typedef struct tagCBT_CREATEWNDW
{
    struct tagCREATESTRUCTW *lpcs;
    HWND           hwndInsertAfter;
} CBT_CREATEWNDW, *LPCBT_CREATEWNDW;




typedef CBT_CREATEWNDA CBT_CREATEWND;
typedef LPCBT_CREATEWNDA LPCBT_CREATEWND;
#line 792 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




typedef struct tagCBTACTIVATESTRUCT
{
    BOOL    fMouse;
    HWND    hWndActive;
} CBTACTIVATESTRUCT, *LPCBTACTIVATESTRUCT;

#line 803 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family





typedef struct tagWTSSESSION_NOTIFICATION
{
    DWORD cbSize;
    DWORD dwSessionId;

} WTSSESSION_NOTIFICATION, *PWTSSESSION_NOTIFICATION;

#line 821 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

















#line 840 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



























#line 868 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 872 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 877 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 882 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




























































#line 943 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 947 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"











#line 959 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


typedef struct
{
    HWND    hwnd;
    RECT    rc;
} SHELLHOOKINFO, *LPSHELLHOOKINFO;




typedef struct tagEVENTMSG {
    UINT    message;
    UINT    paramL;
    UINT    paramH;
    DWORD    time;
    HWND     hwnd;
} EVENTMSG, *PEVENTMSGMSG,  *NPEVENTMSGMSG,  *LPEVENTMSGMSG;

typedef struct tagEVENTMSG *PEVENTMSG,  *NPEVENTMSG,  *LPEVENTMSG;




typedef struct tagCWPSTRUCT {
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPSTRUCT, *PCWPSTRUCT,  *NPCWPSTRUCT,  *LPCWPSTRUCT;





typedef struct tagCWPRETSTRUCT {
    LRESULT lResult;
    LPARAM  lParam;
    WPARAM  wParam;
    UINT    message;
    HWND    hwnd;
} CWPRETSTRUCT, *PCWPRETSTRUCT,  *NPCWPRETSTRUCT,  *LPCWPRETSTRUCT;

#line 1005 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 1007 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion














#pragma region Desktop Family





typedef struct tagKBDLLHOOKSTRUCT {
    DWORD   vkCode;
    DWORD   scanCode;
    DWORD   flags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} KBDLLHOOKSTRUCT,  *LPKBDLLHOOKSTRUCT, *PKBDLLHOOKSTRUCT;




typedef struct tagMSLLHOOKSTRUCT {
    POINT   pt;
    DWORD   mouseData;
    DWORD   flags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} MSLLHOOKSTRUCT,  *LPMSLLHOOKSTRUCT, *PMSLLHOOKSTRUCT;

#line 1048 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 1051 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family





typedef struct tagDEBUGHOOKINFO
{
    DWORD   idThread;
    DWORD   idThreadInstaller;
    LPARAM  lParam;
    WPARAM  wParam;
    int     code;
} DEBUGHOOKINFO, *PDEBUGHOOKINFO,  *NPDEBUGHOOKINFO, * LPDEBUGHOOKINFO;




typedef struct tagMOUSEHOOKSTRUCT {
    POINT   pt;
    HWND    hwnd;
    UINT    wHitTestCode;
    ULONG_PTR dwExtraInfo;
} MOUSEHOOKSTRUCT,  *LPMOUSEHOOKSTRUCT, *PMOUSEHOOKSTRUCT;



typedef struct tagMOUSEHOOKSTRUCTEX : public tagMOUSEHOOKSTRUCT
{
    DWORD   mouseData;
} MOUSEHOOKSTRUCTEX, *LPMOUSEHOOKSTRUCTEX, *PMOUSEHOOKSTRUCTEX;






#line 1090 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 1091 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





typedef struct tagHARDWAREHOOKSTRUCT {
    HWND    hwnd;
    UINT    message;
    WPARAM  wParam;
    LPARAM  lParam;
} HARDWAREHOOKSTRUCT,  *LPHARDWAREHOOKSTRUCT, *PHARDWAREHOOKSTRUCT;
#line 1103 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 1105 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 1108 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"














#line 1123 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 1128 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 1138 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#pragma region Desktop Family


__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutA(
      LPCSTR pwszKLID,
      UINT Flags);
__declspec(dllimport)
HKL
__stdcall
LoadKeyboardLayoutW(
      LPCWSTR pwszKLID,
      UINT Flags);




#line 1164 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



__declspec(dllimport)
HKL
__stdcall
ActivateKeyboardLayout(
      HKL hkl,
      UINT Flags);







#line 1181 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
int
__stdcall
ToUnicodeEx(
      UINT wVirtKey,
      UINT wScanCode,
      const BYTE *lpKeyState,
      LPWSTR pwszBuff,
      int cchBuff,
      UINT wFlags,
      HKL dwhkl);
#line 1195 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnloadKeyboardLayout(
      HKL hkl);

__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameA(
      LPSTR pwszKLID);
__declspec(dllimport)
BOOL
__stdcall
GetKeyboardLayoutNameW(
      LPWSTR pwszKLID);




#line 1217 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
int
__stdcall
GetKeyboardLayoutList(
      int nBuff,
      HKL  *lpList);

__declspec(dllimport)
HKL
__stdcall
GetKeyboardLayout(
      DWORD idThread);

#line 1233 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 1236 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagMOUSEMOVEPOINT {
    int   x;
    int   y;
    DWORD time;
    ULONG_PTR dwExtraInfo;
} MOUSEMOVEPOINT, *PMOUSEMOVEPOINT, * LPMOUSEMOVEPOINT;

#line 1251 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
GetMouseMovePointsEx(
      UINT cbSize,
      LPMOUSEMOVEPOINT lppt,
      LPMOUSEMOVEPOINT lpptBuf,
      int nBufPoints,
      DWORD resolution);

#line 1273 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 1276 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"























#pragma region Desktop Family


__declspec(dllimport)
HDESK
__stdcall
CreateDesktopA(
      LPCSTR lpszDesktop,
      LPCSTR lpszDevice,
      DEVMODEA* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopW(
      LPCWSTR lpszDesktop,
      LPCWSTR lpszDevice,
      DEVMODEW* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);




#line 1327 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExA(
      LPCSTR lpszDesktop,
      LPCSTR lpszDevice,
      DEVMODEA* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa,
      ULONG ulHeapSize,
      PVOID pvoid);
__declspec(dllimport)
HDESK
__stdcall
CreateDesktopExW(
      LPCWSTR lpszDesktop,
      LPCWSTR lpszDevice,
      DEVMODEW* pDevmode,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa,
      ULONG ulHeapSize,
      PVOID pvoid);




#line 1357 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 1359 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 1362 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 1363 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
HDESK
__stdcall
OpenDesktopA(
      LPCSTR lpszDesktop,
      DWORD dwFlags,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HDESK
__stdcall
OpenDesktopW(
      LPCWSTR lpszDesktop,
      DWORD dwFlags,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);




#line 1388 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HDESK
__stdcall
OpenInputDesktop(
      DWORD dwFlags,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);


__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsA(
      HWINSTA hwinsta,
      DESKTOPENUMPROCA lpEnumFunc,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumDesktopsW(
      HWINSTA hwinsta,
      DESKTOPENUMPROCW lpEnumFunc,
      LPARAM lParam);




#line 1417 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumDesktopWindows(
      HDESK hDesktop,
      WNDENUMPROC lpfn,
      LPARAM lParam);


__declspec(dllimport)
BOOL
__stdcall
SwitchDesktop(
      HDESK hDesktop);


__declspec(dllimport)
BOOL
__stdcall
SetThreadDesktop(
       HDESK hDesktop);

__declspec(dllimport)
BOOL
__stdcall
CloseDesktop(
      HDESK hDesktop);

__declspec(dllimport)
HDESK
__stdcall
GetThreadDesktop(
      DWORD dwThreadId);

#line 1453 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 1456 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





























#pragma region Desktop Family


__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationA(
      LPCSTR lpwinsta,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);
__declspec(dllimport)
HWINSTA
__stdcall
CreateWindowStationW(
      LPCWSTR lpwinsta,
      DWORD dwFlags,
      ACCESS_MASK dwDesiredAccess,
      LPSECURITY_ATTRIBUTES lpsa);




#line 1509 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationA(
      LPCSTR lpszWinSta,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);
__declspec(dllimport)
HWINSTA
__stdcall
OpenWindowStationW(
      LPCWSTR lpszWinSta,
      BOOL fInherit,
      ACCESS_MASK dwDesiredAccess);




#line 1529 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsA(
      WINSTAENUMPROCA lpEnumFunc,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumWindowStationsW(
      WINSTAENUMPROCW lpEnumFunc,
      LPARAM lParam);




#line 1547 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CloseWindowStation(
      HWINSTA hWinSta);

__declspec(dllimport)
BOOL
__stdcall
SetProcessWindowStation(
      HWINSTA hWinSta);

__declspec(dllimport)
HWINSTA
__stdcall
GetProcessWindowStation(
    void);

#line 1567 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 1570 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetUserObjectSecurity(
      HANDLE hObj,
      PSECURITY_INFORMATION pSIRequested,
      PSECURITY_DESCRIPTOR pSID);

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectSecurity(
      HANDLE hObj,
      PSECURITY_INFORMATION pSIRequested,
      PSECURITY_DESCRIPTOR pSID,
      DWORD nLength,
      LPDWORD lpnLengthNeeded);

#line 1595 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion








#line 1605 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagUSEROBJECTFLAGS {
    BOOL fInherit;
    BOOL fReserved;
    DWORD dwFlags;
} USEROBJECTFLAGS, *PUSEROBJECTFLAGS;

__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationA(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength,
      LPDWORD lpnLengthNeeded);
__declspec(dllimport)
BOOL
__stdcall
GetUserObjectInformationW(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength,
      LPDWORD lpnLengthNeeded);




#line 1638 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationA(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength);
__declspec(dllimport)
BOOL
__stdcall
SetUserObjectInformationW(
      HANDLE hObj,
      int nIndex,
      PVOID pvInfo,
      DWORD nLength);




#line 1660 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 1662 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 1665 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family



typedef struct tagWNDCLASSEXA {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXA, *PWNDCLASSEXA,  *NPWNDCLASSEXA,  *LPWNDCLASSEXA;
typedef struct tagWNDCLASSEXW {
    UINT        cbSize;
    
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
    
    HICON       hIconSm;
} WNDCLASSEXW, *PWNDCLASSEXW,  *NPWNDCLASSEXW,  *LPWNDCLASSEXW;






typedef WNDCLASSEXA WNDCLASSEX;
typedef PWNDCLASSEXA PWNDCLASSEX;
typedef NPWNDCLASSEXA NPWNDCLASSEX;
typedef LPWNDCLASSEXA LPWNDCLASSEX;
#line 1713 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 1714 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

typedef struct tagWNDCLASSA {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCSTR      lpszMenuName;
    LPCSTR      lpszClassName;
} WNDCLASSA, *PWNDCLASSA,  *NPWNDCLASSA,  *LPWNDCLASSA;
typedef struct tagWNDCLASSW {
    UINT        style;
    WNDPROC     lpfnWndProc;
    int         cbClsExtra;
    int         cbWndExtra;
    HINSTANCE   hInstance;
    HICON       hIcon;
    HCURSOR     hCursor;
    HBRUSH      hbrBackground;
    LPCWSTR     lpszMenuName;
    LPCWSTR     lpszClassName;
} WNDCLASSW, *PWNDCLASSW,  *NPWNDCLASSW,  *LPWNDCLASSW;






typedef WNDCLASSA WNDCLASS;
typedef PWNDCLASSA PWNDCLASS;
typedef NPWNDCLASSA NPWNDCLASS;
typedef LPWNDCLASSA LPWNDCLASS;
#line 1750 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsHungAppWindow(
      HWND hwnd);



__declspec(dllimport)
void
__stdcall
DisableProcessWindowsGhosting(
    void);
#line 1765 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 1767 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion




#pragma region Application Family





typedef struct tagMSG {
    HWND        hwnd;
    UINT        message;
    WPARAM      wParam;
    LPARAM      lParam;
    DWORD       time;
    POINT       pt;



} MSG, *PMSG,  *NPMSG,  *LPMSG;

#line 1791 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion











#line 1804 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"













































#line 1850 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





















#line 1872 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



































#line 1908 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#line 1916 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"














#pragma region Desktop Family





typedef struct tagMINMAXINFO {
    POINT ptReserved;
    POINT ptMaxSize;
    POINT ptMaxPosition;
    POINT ptMinTrackSize;
    POINT ptMaxTrackSize;
} MINMAXINFO, *PMINMAXINFO, *LPMINMAXINFO;

#line 1945 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion



















#line 1966 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 1967 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



















#pragma region Desktop Family





typedef struct tagCOPYDATASTRUCT {
    ULONG_PTR dwData;
    DWORD cbData;
      PVOID lpData;
} COPYDATASTRUCT, *PCOPYDATASTRUCT;


typedef struct tagMDINEXTMENU
{
    HMENU   hmenuIn;
    HMENU   hmenuNext;
    HWND    hwndNext;
} MDINEXTMENU, * PMDINEXTMENU,  * LPMDINEXTMENU;
#line 2006 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 2008 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion






















#line 2032 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"










#line 2043 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

















#line 2061 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 2066 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 2070 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
















#line 2087 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 2094 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"












#line 2107 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"































#line 2139 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 2140 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 2141 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 2143 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 2144 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"























#line 2168 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 2173 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 2176 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 2186 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 2196 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"










#line 2207 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"










#line 2218 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

































#pragma region Desktop Family


typedef struct {
    GUID PowerSetting;
    DWORD DataLength;
    UCHAR Data[1];
} POWERBROADCAST_SETTING, *PPOWERBROADCAST_SETTING;


#line 2262 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 2265 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 2267 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 2268 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 2270 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 2274 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"























#line 2298 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 2302 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"















#line 2318 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 2328 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 2331 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 2335 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 2340 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 2344 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 2351 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
























#line 2376 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 2380 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 2384 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 2389 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 2396 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 2401 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 2406 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"








#line 2415 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#line 2423 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




















#line 2444 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




































#line 2481 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"










#line 2492 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 2495 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 2497 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 2499 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
















#line 2516 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageA(
      LPCSTR lpString);
__declspec(dllimport)
UINT
__stdcall
RegisterWindowMessageW(
      LPCWSTR lpString);




#line 2536 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 2538 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion





















#pragma region Desktop Family





typedef struct tagWINDOWPOS {
    HWND    hwnd;
    HWND    hwndInsertAfter;
    int     x;
    int     y;
    int     cx;
    int     cy;
    UINT    flags;
} WINDOWPOS, *LPWINDOWPOS, *PWINDOWPOS;




typedef struct tagNCCALCSIZE_PARAMS {
    RECT       rgrc[3];
    PWINDOWPOS lppos;
} NCCALCSIZE_PARAMS, *LPNCCALCSIZE_PARAMS;

#line 2585 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion




























#line 2615 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 2617 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 2627 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





#line 2633 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#pragma region Desktop Family


typedef struct tagTRACKMOUSEEVENT {
    DWORD cbSize;
    DWORD dwFlags;
    HWND  hwndTrack;
    DWORD dwHoverTime;
} TRACKMOUSEEVENT, *LPTRACKMOUSEEVENT;

__declspec(dllimport)
BOOL
__stdcall
TrackMouseEvent(
      LPTRACKMOUSEEVENT lpEventTrack);

#line 2653 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 2656 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 2660 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 2661 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 2664 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


































































#line 2731 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

















#line 2749 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 2754 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 2759 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 2763 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 2767 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 2771 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 2774 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




















#line 2795 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 2799 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"























































#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawEdge(
      HDC hdc,
      LPRECT qrc,
      UINT edge,
      UINT grfFlags);

#line 2867 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion









#line 2878 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

































#line 2912 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawFrameControl(
      HDC,
      LPRECT,
      UINT,
      UINT);


#line 2931 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion










#line 2943 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 2946 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawCaption(
      HWND hwnd,
      HDC hdc,
      const RECT * lprect,
      UINT flags);


#line 2961 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion




#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawAnimatedRects(
      HWND hwnd,
      int idAni,
      const RECT *lprcFrom,
      const RECT *lprcTo);

#line 2979 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 2982 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
























#line 3007 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 3010 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#line 3018 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




















#line 3039 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"










#pragma region Desktop Family


typedef struct tagACCEL {

    BYTE   fVirt;               
    WORD   key;
    WORD   cmd;




#line 3062 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
} ACCEL, *LPACCEL;

typedef struct tagPAINTSTRUCT {
    HDC         hdc;
    BOOL        fErase;
    RECT        rcPaint;
    BOOL        fRestore;
    BOOL        fIncUpdate;
    BYTE        rgbReserved[32];
} PAINTSTRUCT, *PPAINTSTRUCT, *NPPAINTSTRUCT, *LPPAINTSTRUCT;

typedef struct tagCREATESTRUCTA {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCSTR      lpszName;
    LPCSTR      lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTA, *LPCREATESTRUCTA;
typedef struct tagCREATESTRUCTW {
    LPVOID      lpCreateParams;
    HINSTANCE   hInstance;
    HMENU       hMenu;
    HWND        hwndParent;
    int         cy;
    int         cx;
    int         y;
    int         x;
    LONG        style;
    LPCWSTR     lpszName;
    LPCWSTR     lpszClass;
    DWORD       dwExStyle;
} CREATESTRUCTW, *LPCREATESTRUCTW;




typedef CREATESTRUCTA CREATESTRUCT;
typedef LPCREATESTRUCTA LPCREATESTRUCT;
#line 3108 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

typedef struct tagWINDOWPLACEMENT {
    UINT  length;
    UINT  flags;
    UINT  showCmd;
    POINT ptMinPosition;
    POINT ptMaxPosition;
    RECT  rcNormalPosition;



} WINDOWPLACEMENT;
typedef WINDOWPLACEMENT *PWINDOWPLACEMENT, *LPWINDOWPLACEMENT;





#line 3127 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 3129 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion



#pragma region Application Family


typedef struct tagNMHDR
{
    HWND      hwndFrom;
    UINT_PTR  idFrom;
    UINT      code;         
}   NMHDR;

#line 3144 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family


typedef NMHDR  * LPNMHDR;

typedef struct tagSTYLESTRUCT
{
    DWORD   styleOld;
    DWORD   styleNew;
} STYLESTRUCT, * LPSTYLESTRUCT;

#line 3158 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion
#line 3160 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"











#line 3172 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



















#line 3192 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 3199 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 3200 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family





typedef struct tagMEASUREITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    UINT       itemWidth;
    UINT       itemHeight;
    ULONG_PTR  itemData;
} MEASUREITEMSTRUCT,  *PMEASUREITEMSTRUCT,  *LPMEASUREITEMSTRUCT;




typedef struct tagDRAWITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    UINT        itemID;
    UINT        itemAction;
    UINT        itemState;
    HWND        hwndItem;
    HDC         hDC;
    RECT        rcItem;
    ULONG_PTR   itemData;
} DRAWITEMSTRUCT,  *PDRAWITEMSTRUCT,  *LPDRAWITEMSTRUCT;




typedef struct tagDELETEITEMSTRUCT {
    UINT       CtlType;
    UINT       CtlID;
    UINT       itemID;
    HWND       hwndItem;
    ULONG_PTR  itemData;
} DELETEITEMSTRUCT,  *PDELETEITEMSTRUCT,  *LPDELETEITEMSTRUCT;




typedef struct tagCOMPAREITEMSTRUCT {
    UINT        CtlType;
    UINT        CtlID;
    HWND        hwndItem;
    UINT        itemID1;
    ULONG_PTR   itemData1;
    UINT        itemID2;
    ULONG_PTR   itemData2;
    DWORD       dwLocaleId;
} COMPAREITEMSTRUCT,  *PCOMPAREITEMSTRUCT,  *LPCOMPAREITEMSTRUCT;

#line 3257 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
GetMessageA(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax);
__declspec(dllimport)
BOOL
__stdcall
GetMessageW(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax);




#line 3289 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"























#line 3313 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
TranslateMessage(
      const MSG *lpMsg);

__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageA(
      const MSG *lpMsg);
__declspec(dllimport)
LRESULT
__stdcall
DispatchMessageW(
      const MSG *lpMsg);




#line 3336 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

















#line 3354 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetMessageQueue(
      int cMessagesMax);

__declspec(dllimport)
BOOL
__stdcall
PeekMessageA(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax,
      UINT wRemoveMsg);
__declspec(dllimport)
BOOL
__stdcall
PeekMessageW(
      LPMSG lpMsg,
      HWND hWnd,
      UINT wMsgFilterMin,
      UINT wMsgFilterMax,
      UINT wRemoveMsg);




#line 3384 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 3386 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion












#line 3400 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 3403 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
RegisterHotKey(
      HWND hWnd,
      int id,
      UINT fsModifiers,
      UINT vk);

__declspec(dllimport)
BOOL
__stdcall
UnregisterHotKey(
      HWND hWnd,
      int id);

#line 3424 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion







#line 3433 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"















#line 3449 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 3453 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 3456 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 3459 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"








#line 3468 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 3472 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#pragma region Desktop Family





#line 3484 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
ExitWindowsEx(
      UINT uFlags,
      DWORD dwReason);

__declspec(dllimport)
BOOL
__stdcall
SwapMouseButton(
      BOOL fSwap);

__declspec(dllimport)
DWORD
__stdcall
GetMessagePos(
    void);

__declspec(dllimport)
LONG
__stdcall
GetMessageTime(
    void);

__declspec(dllimport)
LPARAM
__stdcall
GetMessageExtraInfo(
    void);


__declspec(dllimport)
DWORD
__stdcall
GetUnpredictedMessagePos(
    void);
#line 3522 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
IsWow64Message(
    void);
#line 3530 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
LPARAM
__stdcall
SetMessageExtraInfo(
      LPARAM lParam);
#line 3538 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
LRESULT
__stdcall
SendMessageA(
      HWND hWnd,
      UINT Msg,
        WPARAM wParam,
        LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageW(
      HWND hWnd,
      UINT Msg,
        WPARAM wParam,
        LPARAM lParam);




#line 3560 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"























#line 3584 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      UINT fuFlags,
      UINT uTimeout,
      PDWORD_PTR lpdwResult);
__declspec(dllimport)
LRESULT
__stdcall
SendMessageTimeoutW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      UINT fuFlags,
      UINT uTimeout,
      PDWORD_PTR lpdwResult);




#line 3614 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
SendNotifyMessageW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 3636 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      SENDASYNCPROC lpResultCallBack,
      ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
SendMessageCallbackW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      SENDASYNCPROC lpResultCallBack,
      ULONG_PTR dwData);




#line 3662 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


typedef struct {
    UINT  cbSize;
    HDESK hdesk;
    HWND  hwnd;
    LUID  luid;
} BSMINFO, *PBSMINFO;

__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExA(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      PBSMINFO pbsmInfo);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageExW(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam,
      PBSMINFO pbsmInfo);




#line 3696 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 3697 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 3699 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family



__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageA(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
long
__stdcall
BroadcastSystemMessageW(
      DWORD flags,
      LPDWORD lpInfo,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 3730 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"












#line 3743 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 3745 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion




















#line 3767 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 3771 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 3774 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#pragma region Desktop Family



typedef  PVOID           HDEVNOTIFY;
typedef  HDEVNOTIFY     *PHDEVNOTIFY;





#line 3789 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationA(
      HANDLE hRecipient,
      LPVOID NotificationFilter,
      DWORD Flags);
__declspec(dllimport)
HDEVNOTIFY
__stdcall
RegisterDeviceNotificationW(
      HANDLE hRecipient,
      LPVOID NotificationFilter,
      DWORD Flags);




#line 3809 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnregisterDeviceNotification(
      HDEVNOTIFY Handle
    );







typedef  PVOID           HPOWERNOTIFY;
typedef  HPOWERNOTIFY   *PHPOWERNOTIFY;

#line 3827 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterPowerSettingNotification(
     HANDLE hRecipient,
     LPCGUID PowerSettingGuid,
     DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterPowerSettingNotification(
     HPOWERNOTIFY Handle
    );

__declspec(dllimport)
HPOWERNOTIFY
__stdcall
RegisterSuspendResumeNotification (
     HANDLE hRecipient,
     DWORD Flags
    );

__declspec(dllimport)
BOOL
__stdcall
UnregisterSuspendResumeNotification (
     HPOWERNOTIFY Handle
    );


#line 3861 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 3862 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 3864 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
PostMessageA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostMessageW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 3892 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageA(
      DWORD idThread,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
BOOL
__stdcall
PostThreadMessageW(
      DWORD idThread,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 3914 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 3916 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion









#line 3927 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"








#line 3936 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
AttachThreadInput(
      DWORD idAttach,
      DWORD idAttachTo,
      BOOL fAttach);


__declspec(dllimport)
BOOL
__stdcall
ReplyMessage(
      LRESULT lResult);

__declspec(dllimport)
BOOL
__stdcall
WaitMessage(
    void);


#line 3963 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
DWORD
__stdcall
WaitForInputIdle(
      HANDLE hProcess,
      DWORD dwMilliseconds);

__declspec(dllimport)

LRESULT
__stdcall



#line 3980 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
DefWindowProcA(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 3993 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
DefWindowProcW(
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 4003 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
void
__stdcall
PostQuitMessage(
      int nExitCode);



__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcA(
      WNDPROC lpPrevWndFunc,
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
CallWindowProcW(
      WNDPROC lpPrevWndFunc,
      HWND hWnd,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 4036 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



























#line 4064 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
InSendMessage(
    void);

#line 4072 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
InSendMessageEx(
      LPVOID lpReserved);

#line 4086 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion









#line 4097 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
GetDoubleClickTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetDoubleClickTime(
      UINT);

__declspec(dllimport)
ATOM
__stdcall
RegisterClassA(
      const WNDCLASSA *lpWndClass);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassW(
      const WNDCLASSW *lpWndClass);




#line 4129 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnregisterClassA(
      LPCSTR lpClassName,
      HINSTANCE hInstance);
__declspec(dllimport)
BOOL
__stdcall
UnregisterClassW(
      LPCWSTR lpClassName,
      HINSTANCE hInstance);




#line 4147 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoA(
      HINSTANCE hInstance,
      LPCSTR lpClassName,
      LPWNDCLASSA lpWndClass);
 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoW(
      HINSTANCE hInstance,
      LPCWSTR lpClassName,
      LPWNDCLASSW lpWndClass);




#line 4169 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
ATOM
__stdcall
RegisterClassExA(
      const WNDCLASSEXA *);
__declspec(dllimport)
ATOM
__stdcall
RegisterClassExW(
      const WNDCLASSEXW *);




#line 4186 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExA(
      HINSTANCE hInstance,
      LPCSTR lpszClass,
      LPWNDCLASSEXA lpwcx);
 
__declspec(dllimport)
BOOL
__stdcall
GetClassInfoExW(
      HINSTANCE hInstance,
      LPCWSTR lpszClass,
      LPWNDCLASSEXW lpwcx);




#line 4208 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 4210 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 4212 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family



typedef BOOLEAN (__stdcall * PREGISTERCLASSNAMEW)(LPCWSTR);
#line 4227 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateWindowExA(
      DWORD dwExStyle,
      LPCSTR lpClassName,
      LPCSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HMENU hMenu,
      HINSTANCE hInstance,
      LPVOID lpParam);
__declspec(dllimport)
HWND
__stdcall
CreateWindowExW(
      DWORD dwExStyle,
      LPCWSTR lpClassName,
      LPCWSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HMENU hMenu,
      HINSTANCE hInstance,
      LPVOID lpParam);




#line 4265 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 4267 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion













#line 4282 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
IsWindow(
      HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
IsMenu(
      HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
IsChild(
      HWND hWndParent,
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
DestroyWindow(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowWindow(
      HWND hWnd,
      int nCmdShow);


__declspec(dllimport)
BOOL
__stdcall
AnimateWindow(
      HWND hWnd,
      DWORD dwTime,
      DWORD dwFlags);
#line 4329 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 4331 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion




#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindow(
      HWND hWnd,
      HDC hdcDst,
      POINT* pptDst,
      SIZE* psize,
      HDC hdcSrc,
      POINT* pptSrc,
      COLORREF crKey,
      BLENDFUNCTION* pblend,
      DWORD dwFlags);




typedef struct tagUPDATELAYEREDWINDOWINFO
{
    DWORD cbSize;
    HDC hdcDst;
    const POINT* pptDst;
    const SIZE* psize;
    HDC hdcSrc;
    const POINT* pptSrc;
    COLORREF crKey;
    const BLENDFUNCTION* pblend;
    DWORD dwFlags;
    const RECT* prcDirty;
} UPDATELAYEREDWINDOWINFO, *PUPDATELAYEREDWINDOWINFO;




#line 4374 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
__declspec(dllimport)
BOOL
__stdcall
UpdateLayeredWindowIndirect(
      HWND hWnd,
      const UPDATELAYEREDWINDOWINFO* pULWInfo);

#line 4382 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 4385 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetLayeredWindowAttributes(
      HWND hwnd,
      COLORREF* pcrKey,
      BYTE* pbAlpha,
      DWORD* pdwFlags);




__declspec(dllimport)
BOOL
__stdcall
PrintWindow(
      HWND hwnd,
      HDC hdcBlt,
      UINT nFlags);

#line 4412 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 4415 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetLayeredWindowAttributes(
      HWND hwnd,
      COLORREF crKey,
      BYTE bAlpha,
      DWORD dwFlags);

#line 4429 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion











#line 4442 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
ShowWindowAsync(
       HWND hWnd,
       int nCmdShow);
#line 4456 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
FlashWindow(
       HWND hWnd,
       BOOL bInvert);


typedef struct {
    UINT  cbSize;
    HWND  hwnd;
    DWORD dwFlags;
    UINT  uCount;
    DWORD dwTimeout;
} FLASHWINFO, *PFLASHWINFO;

__declspec(dllimport)
BOOL
__stdcall
FlashWindowEx(
      PFLASHWINFO pfwi);








#line 4487 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ShowOwnedPopups(
       HWND hWnd,
       BOOL fShow);

__declspec(dllimport)
BOOL
__stdcall
OpenIcon(
       HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
CloseWindow(
       HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
MoveWindow(
      HWND hWnd,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      BOOL bRepaint);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPos(
      HWND hWnd,
      HWND hWndInsertAfter,
      int X,
      int Y,
      int cx,
      int cy,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
GetWindowPlacement(
      HWND hWnd,
      WINDOWPLACEMENT *lpwndpl);

__declspec(dllimport)
BOOL
__stdcall
SetWindowPlacement(
      HWND hWnd,
      const WINDOWPLACEMENT *lpwndpl);






__declspec(dllimport)
BOOL
__stdcall
GetWindowDisplayAffinity(
      HWND hWnd,
      DWORD* pdwAffinity);

__declspec(dllimport)
BOOL
__stdcall
SetWindowDisplayAffinity(
      HWND hWnd,
      DWORD dwAffinity);

#line 4564 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 4566 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family


__declspec(dllimport)
HDWP
__stdcall
BeginDeferWindowPos(
      int nNumWindows);

__declspec(dllimport)
HDWP
__stdcall
DeferWindowPos(
      HDWP hWinPosInfo,
      HWND hWnd,
      HWND hWndInsertAfter,
      int x,
      int y,
      int cx,
      int cy,
      UINT uFlags);


__declspec(dllimport)
BOOL
__stdcall
EndDeferWindowPos(
      HDWP hWinPosInfo);

#line 4600 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 4603 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
IsWindowVisible(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsIconic(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
AnyPopup(
    void);

__declspec(dllimport)
BOOL
__stdcall
BringWindowToTop(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
IsZoomed(
      HWND hWnd);

#line 4638 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion






















#line 4662 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"














#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"























#pragma warning(disable:4103)

#pragma pack(push,2)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack2.h"
#line 4677 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Application Family





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    WORD cdit;
    short x;
    short y;
    short cx;
    short cy;
} DLGTEMPLATE;

#line 4695 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#pragma region Desktop Family


typedef DLGTEMPLATE *LPDLGTEMPLATEA;
typedef DLGTEMPLATE *LPDLGTEMPLATEW;



typedef LPDLGTEMPLATEA LPDLGTEMPLATE;
#line 4707 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 4709 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#pragma region Application Family


typedef const DLGTEMPLATE *LPCDLGTEMPLATEA;
typedef const DLGTEMPLATE *LPCDLGTEMPLATEW;



typedef LPCDLGTEMPLATEA LPCDLGTEMPLATE;
#line 4721 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 4723 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family





typedef struct {
    DWORD style;
    DWORD dwExtendedStyle;
    short x;
    short y;
    short cx;
    short cy;
    WORD id;
} DLGITEMTEMPLATE;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *PDLGITEMTEMPLATEW;



typedef PDLGITEMTEMPLATEA PDLGITEMTEMPLATE;
#line 4748 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEA;
typedef DLGITEMTEMPLATE *LPDLGITEMTEMPLATEW;



typedef LPDLGITEMTEMPLATEA LPDLGITEMTEMPLATE;
#line 4755 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 4757 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 4761 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
HWND
__stdcall
CreateDialogParamA(
      HINSTANCE hInstance,
      LPCSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogParamW(
      HINSTANCE hInstance,
      LPCWSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);




#line 4788 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamA(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEA lpTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
HWND
__stdcall
CreateDialogIndirectParamW(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEW lpTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);




#line 4812 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 4822 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 4832 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamA(
      HINSTANCE hInstance,
      LPCSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxParamW(
      HINSTANCE hInstance,
      LPCWSTR lpTemplateName,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);




#line 4856 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamA(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEA hDialogTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);
__declspec(dllimport)
INT_PTR
__stdcall
DialogBoxIndirectParamW(
      HINSTANCE hInstance,
      LPCDLGTEMPLATEW hDialogTemplate,
      HWND hWndParent,
      DLGPROC lpDialogFunc,
      LPARAM dwInitParam);




#line 4880 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 4890 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 4900 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EndDialog(
      HWND hDlg,
      INT_PTR nResult);

__declspec(dllimport)
HWND
__stdcall
GetDlgItem(
      HWND hDlg,
      int nIDDlgItem);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemInt(
      HWND hDlg,
      int nIDDlgItem,
      UINT uValue,
      BOOL bSigned);

__declspec(dllimport)
UINT
__stdcall
GetDlgItemInt(
      HWND hDlg,
      int nIDDlgItem,
      BOOL *lpTranslated,
      BOOL bSigned);

__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextA(
      HWND hDlg,
      int nIDDlgItem,
      LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetDlgItemTextW(
      HWND hDlg,
      int nIDDlgItem,
      LPCWSTR lpString);




#line 4952 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

 
__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextA(
      HWND hDlg,
      int nIDDlgItem,
      LPSTR lpString,
      int cchMax);
 
__declspec(dllimport)
UINT
__stdcall
GetDlgItemTextW(
      HWND hDlg,
      int nIDDlgItem,
      LPWSTR lpString,
      int cchMax);




#line 4976 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CheckDlgButton(
      HWND hDlg,
      int nIDButton,
      UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
CheckRadioButton(
      HWND hDlg,
      int nIDFirstButton,
      int nIDLastButton,
      int nIDCheckButton);

__declspec(dllimport)
UINT
__stdcall
IsDlgButtonChecked(
      HWND hDlg,
      int nIDButton);

__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageA(
      HWND hDlg,
      int nIDDlgItem,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
SendDlgItemMessageW(
      HWND hDlg,
      int nIDDlgItem,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 5024 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetNextDlgGroupItem(
      HWND hDlg,
      HWND hCtl,
      BOOL bPrevious);

__declspec(dllimport)
HWND
__stdcall
GetNextDlgTabItem(
      HWND hDlg,
      HWND hCtl,
      BOOL bPrevious);

__declspec(dllimport)
int
__stdcall
GetDlgCtrlID(
      HWND hWnd);

__declspec(dllimport)
long
__stdcall
GetDialogBaseUnits(void);

__declspec(dllimport)

LRESULT
__stdcall



#line 5060 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
DefDlgProcA(
      HWND hDlg,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 5073 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
DefDlgProcW(
      HWND hDlg,
      UINT Msg,
      WPARAM wParam,
      LPARAM lParam);




#line 5083 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 5085 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion








#line 5095 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 5097 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterA(
      LPMSG lpMsg,
      int nCode);
__declspec(dllimport)
BOOL
__stdcall
CallMsgFilterW(
      LPMSG lpMsg,
      int nCode);




#line 5120 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 5122 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







__declspec(dllimport)
BOOL
__stdcall
OpenClipboard(
      HWND hWndNewOwner);

__declspec(dllimport)
BOOL
__stdcall
CloseClipboard(
    void);




__declspec(dllimport)
DWORD
__stdcall
GetClipboardSequenceNumber(
    void);

#line 5151 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetClipboardOwner(
    void);

__declspec(dllimport)
HWND
__stdcall
SetClipboardViewer(
      HWND hWndNewViewer);

__declspec(dllimport)
HWND
__stdcall
GetClipboardViewer(
    void);

__declspec(dllimport)
BOOL
__stdcall
ChangeClipboardChain(
      HWND hWndRemove,
      HWND hWndNewNext);

__declspec(dllimport)
HANDLE
__stdcall
SetClipboardData(
      UINT uFormat,
      HANDLE hMem);

__declspec(dllimport)
HANDLE
__stdcall
GetClipboardData(
      UINT uFormat);

__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatA(
      LPCSTR lpszFormat);
__declspec(dllimport)
UINT
__stdcall
RegisterClipboardFormatW(
      LPCWSTR lpszFormat);




#line 5205 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
CountClipboardFormats(
    void);

__declspec(dllimport)
UINT
__stdcall
EnumClipboardFormats(
      UINT format);

__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameA(
      UINT format,
      LPSTR lpszFormatName,
      int cchMaxCount);
__declspec(dllimport)
int
__stdcall
GetClipboardFormatNameW(
      UINT format,
      LPWSTR lpszFormatName,
      int cchMaxCount);




#line 5237 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
EmptyClipboard(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsClipboardFormatAvailable(
      UINT format);

__declspec(dllimport)
int
__stdcall
GetPriorityClipboardFormat(
      UINT *paFormatPriorityList,
      int cFormats);

__declspec(dllimport)
HWND
__stdcall
GetOpenClipboardWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
AddClipboardFormatListener(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
RemoveClipboardFormatListener(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
GetUpdatedClipboardFormats(
      PUINT lpuiFormats,
      UINT cFormats,
      PUINT pcFormatsOut);
#line 5284 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 5286 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
CharToOemA(
      LPCSTR pSrc,
      LPSTR pDst);
__declspec(dllimport)
BOOL
__stdcall
CharToOemW(
      LPCWSTR pSrc,
      LPSTR pDst);




#line 5308 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

 
__declspec(dllimport)
BOOL
__stdcall
OemToCharA(
      LPCSTR pSrc,
      LPSTR pDst);
 
__declspec(dllimport)
BOOL
__stdcall
OemToCharW(
      LPCSTR pSrc,
      LPWSTR pDst);




#line 5328 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffA(
      LPCSTR lpszSrc,
      LPSTR lpszDst,
      DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
CharToOemBuffW(
      LPCWSTR lpszSrc,
      LPSTR lpszDst,
      DWORD cchDstLength);




#line 5348 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffA(
      LPCSTR lpszSrc,
      LPSTR lpszDst,
      DWORD cchDstLength);
__declspec(dllimport)
BOOL
__stdcall
OemToCharBuffW(
      LPCSTR lpszSrc,
      LPWSTR lpszDst,
      DWORD cchDstLength);




#line 5368 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharUpperA(
      LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharUpperW(
      LPWSTR lpsz);




#line 5384 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffA(
      LPSTR lpsz,
      DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharUpperBuffW(
      LPWSTR lpsz,
      DWORD cchLength);




#line 5402 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharLowerA(
      LPSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharLowerW(
      LPWSTR lpsz);




#line 5418 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffA(
      LPSTR lpsz,
      DWORD cchLength);
__declspec(dllimport)
DWORD
__stdcall
CharLowerBuffW(
      LPWSTR lpsz,
      DWORD cchLength);




#line 5436 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharNextA(
      LPCSTR lpsz);
__declspec(dllimport)
LPWSTR
__stdcall
CharNextW(
      LPCWSTR lpsz);




#line 5452 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
LPSTR
__stdcall
CharPrevA(
      LPCSTR lpszStart,
      LPCSTR lpszCurrent);
__declspec(dllimport)
LPWSTR
__stdcall
CharPrevW(
      LPCWSTR lpszStart,
      LPCWSTR lpszCurrent);




#line 5470 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
LPSTR
__stdcall
CharNextExA(
       WORD CodePage,
       LPCSTR lpCurrentChar,
       DWORD dwFlags);

__declspec(dllimport)
LPSTR
__stdcall
CharPrevExA(
       WORD CodePage,
       LPCSTR lpStart,
       LPCSTR lpCurrentChar,
       DWORD dwFlags);
#line 5489 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 5491 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion















#pragma region Desktop Family







__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaW(
      WCHAR ch);




#line 5530 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharAlphaNumericW(
      WCHAR ch);




#line 5546 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharUpperA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharUpperW(
      WCHAR ch);




#line 5562 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
IsCharLowerA(
      CHAR ch);
__declspec(dllimport)
BOOL
__stdcall
IsCharLowerW(
      WCHAR ch);




#line 5578 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 5580 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
SetFocus(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
GetActiveWindow(
    void);

__declspec(dllimport)
HWND
__stdcall
GetFocus(
    void);

__declspec(dllimport)
UINT
__stdcall
GetKBCodePage(
    void);

__declspec(dllimport)
SHORT
__stdcall
GetKeyState(
      int nVirtKey);

__declspec(dllimport)
SHORT
__stdcall
GetAsyncKeyState(
      int vKey);

__declspec(dllimport)
 
BOOL
__stdcall
GetKeyboardState(
      PBYTE lpKeyState);

__declspec(dllimport)
BOOL
__stdcall
SetKeyboardState(
      LPBYTE lpKeyState);

__declspec(dllimport)
int
__stdcall
GetKeyNameTextA(
      LONG lParam,
      LPSTR lpString,
      int cchSize);
__declspec(dllimport)
int
__stdcall
GetKeyNameTextW(
      LONG lParam,
      LPWSTR lpString,
      int cchSize);




#line 5649 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetKeyboardType(
      int nTypeFlag);

__declspec(dllimport)
int
__stdcall
ToAscii(
      UINT uVirtKey,
      UINT uScanCode,
      const BYTE *lpKeyState,
      LPWORD lpChar,
      UINT uFlags);


__declspec(dllimport)
int
__stdcall
ToAsciiEx(
      UINT uVirtKey,
      UINT uScanCode,
      const BYTE *lpKeyState,
      LPWORD lpChar,
      UINT uFlags,
      HKL dwhkl);
#line 5678 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
ToUnicode(
      UINT wVirtKey,
      UINT wScanCode,
      const BYTE *lpKeyState,
      LPWSTR pwszBuff,
      int cchBuff,
      UINT wFlags);

__declspec(dllimport)
DWORD
__stdcall
OemKeyScan(
      WORD wOemChar);

__declspec(dllimport)
SHORT
__stdcall
VkKeyScanA(
      CHAR ch);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanW(
      WCHAR ch);




#line 5711 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExA(
      CHAR ch,
      HKL dwhkl);
__declspec(dllimport)
SHORT
__stdcall
VkKeyScanExW(
      WCHAR ch,
      HKL dwhkl);




#line 5730 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 5731 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





#line 5737 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
void
__stdcall
keybd_event(
      BYTE bVk,
      BYTE bScan,
      DWORD dwFlags,
      ULONG_PTR dwExtraInfo);

#line 5748 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion













#line 5763 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 5766 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#pragma region Desktop Family


__declspec(dllimport)
void
__stdcall
mouse_event(
      DWORD dwFlags,
      DWORD dx,
      DWORD dy,
      DWORD dwData,
      ULONG_PTR dwExtraInfo);

#line 5783 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagMOUSEINPUT {
    LONG    dx;
    LONG    dy;
    DWORD   mouseData;
    DWORD   dwFlags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} MOUSEINPUT, *PMOUSEINPUT, * LPMOUSEINPUT;

typedef struct tagKEYBDINPUT {
    WORD    wVk;
    WORD    wScan;
    DWORD   dwFlags;
    DWORD   time;
    ULONG_PTR dwExtraInfo;
} KEYBDINPUT, *PKEYBDINPUT, * LPKEYBDINPUT;

typedef struct tagHARDWAREINPUT {
    DWORD   uMsg;
    WORD    wParamL;
    WORD    wParamH;
} HARDWAREINPUT, *PHARDWAREINPUT, * LPHARDWAREINPUT;





typedef struct tagINPUT {
    DWORD   type;

    union
    {
        MOUSEINPUT      mi;
        KEYBDINPUT      ki;
        HARDWAREINPUT   hi;
    };
} INPUT, *PINPUT, * LPINPUT;

__declspec(dllimport)
UINT
__stdcall
SendInput(
      UINT cInputs,                     
      LPINPUT pInputs,  
      int cbSize);                      

#line 5837 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 5840 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#pragma region Desktop Family









struct HTOUCHINPUT__{int unused;}; typedef struct HTOUCHINPUT__ *HTOUCHINPUT;

typedef struct tagTOUCHINPUT {
    LONG x;
    LONG y;
    HANDLE hSource;
    DWORD dwID;
    DWORD dwFlags;
    DWORD dwMask;
    DWORD dwTime;
    ULONG_PTR dwExtraInfo;
    DWORD cxContact;
    DWORD cyContact;
} TOUCHINPUT, *PTOUCHINPUT;
typedef TOUCHINPUT const * PCTOUCHINPUT;


#line 5871 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

























#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetTouchInputInfo(
      HTOUCHINPUT hTouchInput,               
      UINT cInputs,                          
      PTOUCHINPUT pInputs,  
      int cbSize);                           

__declspec(dllimport)
BOOL
__stdcall
CloseTouchInputHandle(
      HTOUCHINPUT hTouchInput);                   


#line 5917 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family



#line 5925 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
RegisterTouchWindow(
      HWND hwnd,
      ULONG ulFlags);

__declspec(dllimport)
BOOL
__stdcall
UnregisterTouchWindow(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
IsTouchWindow(
      HWND hwnd,
      PULONG pulFlags);

#line 5957 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 5960 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#pragma region Desktop Family


enum tagPOINTER_INPUT_TYPE {
    PT_POINTER  = 0x00000001,   
    PT_TOUCH    = 0x00000002,   
    PT_PEN      = 0x00000003,   
    PT_MOUSE    = 0x00000004,   
};
typedef DWORD POINTER_INPUT_TYPE;

typedef UINT32 POINTER_FLAGS;

#line 5977 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion



























#pragma region Desktop Family


typedef enum tagPOINTER_BUTTON_CHANGE_TYPE {
    POINTER_CHANGE_NONE,
    POINTER_CHANGE_FIRSTBUTTON_DOWN,
    POINTER_CHANGE_FIRSTBUTTON_UP,
    POINTER_CHANGE_SECONDBUTTON_DOWN,
    POINTER_CHANGE_SECONDBUTTON_UP,
    POINTER_CHANGE_THIRDBUTTON_DOWN,
    POINTER_CHANGE_THIRDBUTTON_UP,
    POINTER_CHANGE_FOURTHBUTTON_DOWN,
    POINTER_CHANGE_FOURTHBUTTON_UP,
    POINTER_CHANGE_FIFTHBUTTON_DOWN,
    POINTER_CHANGE_FIFTHBUTTON_UP,
} POINTER_BUTTON_CHANGE_TYPE;

typedef struct tagPOINTER_INFO {
    POINTER_INPUT_TYPE    pointerType;
    UINT32          pointerId;
    UINT32          frameId;
    POINTER_FLAGS   pointerFlags;
    HANDLE          sourceDevice;
    HWND            hwndTarget;
    POINT           ptPixelLocation;
    POINT           ptHimetricLocation;
    POINT           ptPixelLocationRaw;
    POINT           ptHimetricLocationRaw;
    DWORD           dwTime;
    UINT32          historyCount;
    INT32           InputData;
    DWORD           dwKeyStates;
    UINT64          PerformanceCount;
    POINTER_BUTTON_CHANGE_TYPE ButtonChangeType;
} POINTER_INFO;


typedef UINT32 TOUCH_FLAGS;


typedef UINT32 TOUCH_MASK;





typedef struct tagPOINTER_TOUCH_INFO {
    POINTER_INFO    pointerInfo;
    TOUCH_FLAGS     touchFlags;
    TOUCH_MASK      touchMask;
    RECT            rcContact;
    RECT            rcContactRaw;
    UINT32          orientation;
    UINT32          pressure;
} POINTER_TOUCH_INFO;

typedef UINT32 PEN_FLAGS;





typedef UINT32 PEN_MASK;






typedef struct tagPOINTER_PEN_INFO {
    POINTER_INFO    pointerInfo;
    PEN_FLAGS       penFlags;
    PEN_MASK        penMask;
    UINT32          pressure;
    UINT32          rotation;
    INT32           tiltX;
    INT32           tiltY;
} POINTER_PEN_INFO;

#line 6085 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion














































#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
InitializeTouchInjection(
      UINT32 maxCount,
      DWORD dwMode);

__declspec(dllimport)
BOOL
__stdcall
InjectTouchInput(
      UINT32 count,
      const POINTER_TOUCH_INFO *contacts);

__declspec(dllimport)
BOOL
__stdcall
GetPointerType(
      UINT32 pointerId,
      POINTER_INPUT_TYPE *pointerType);

__declspec(dllimport)
BOOL
__stdcall
GetPointerCursorId(
      UINT32 pointerId,
      UINT32 *cursorId);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfo(
      UINT32 pointerId,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfo(
      UINT32 pointerId,
      UINT32 *pointerCount,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      UINT32 *pointerCount,
      POINTER_INFO *pointerInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfo(
      UINT32 pointerId,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerTouchInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfo(
      UINT32 pointerId,
      UINT32 *pointerCount,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFrameTouchInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      UINT32 *pointerCount,
      POINTER_TOUCH_INFO *touchInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfo(
      UINT32 pointerId,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerPenInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfo(
      UINT32 pointerId,
      UINT32 *pointerCount,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
GetPointerFramePenInfoHistory(
      UINT32 pointerId,
      UINT32 *entriesCount,
      UINT32 *pointerCount,
      POINTER_PEN_INFO *penInfo);

__declspec(dllimport)
BOOL
__stdcall
SkipPointerFrameMessages(
      UINT32 pointerId);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerInputTarget(
      HWND hwnd,
      POINTER_INPUT_TYPE pointerType);

__declspec(dllimport)
BOOL
__stdcall
UnregisterPointerInputTarget(
      HWND hwnd,
      POINTER_INPUT_TYPE pointerType);


__declspec(dllimport)
BOOL
__stdcall
EnableMouseInPointer(
      BOOL fEnable);

__declspec(dllimport)
BOOL
__stdcall
IsMouseInPointerEnabled(
    void);





__declspec(dllimport)
BOOL
__stdcall
RegisterTouchHitTestingWindow(
      HWND hwnd,
      ULONG value);

typedef struct tagTOUCH_HIT_TESTING_PROXIMITY_EVALUATION
{
    UINT16 score;
    POINT adjustedPoint;
} TOUCH_HIT_TESTING_PROXIMITY_EVALUATION, *PTOUCH_HIT_TESTING_PROXIMITY_EVALUATION;





typedef struct tagTOUCH_HIT_TESTING_INPUT
{
    UINT32 pointerId;
    POINT point;
    RECT boundingBox;
    RECT nonOccludedBoundingBox;
    UINT32 orientation;
} TOUCH_HIT_TESTING_INPUT, *PTOUCH_HIT_TESTING_INPUT;





__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToRect(
      const RECT *controlBoundingBox,
      const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
      TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
BOOL
__stdcall
EvaluateProximityToPolygon(
    UINT32 numVertices,
      const POINT *controlPolygon,
      const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
      TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

__declspec(dllimport)
LRESULT
__stdcall
PackTouchHitTestingProximityEvaluation(
      const TOUCH_HIT_TESTING_INPUT *pHitTestingInput,
      const TOUCH_HIT_TESTING_PROXIMITY_EVALUATION *pProximityEval);

typedef enum tagFEEDBACK_TYPE {
    FEEDBACK_TOUCH_CONTACTVISUALIZATION = 1,
    FEEDBACK_PEN_BARRELVISUALIZATION    = 2,
    FEEDBACK_PEN_TAP                    = 3,
    FEEDBACK_PEN_DOUBLETAP              = 4,
    FEEDBACK_PEN_PRESSANDHOLD           = 5,
    FEEDBACK_PEN_RIGHTTAP               = 6,
    FEEDBACK_TOUCH_TAP                  = 7,
    FEEDBACK_TOUCH_DOUBLETAP            = 8,
    FEEDBACK_TOUCH_PRESSANDHOLD         = 9,
    FEEDBACK_TOUCH_RIGHTTAP             = 10,
    FEEDBACK_GESTURE_PRESSANDTAP        = 11,
    FEEDBACK_MAX                        = 0xFFFFFFFF
} FEEDBACK_TYPE;





__declspec(dllimport)
BOOL
__stdcall
GetWindowFeedbackSetting(
      HWND hwnd,
      FEEDBACK_TYPE feedback,
      DWORD dwFlags,
      UINT32* pSize,
      void* config);

__declspec(dllimport)
BOOL
__stdcall
SetWindowFeedbackSetting(
      HWND hwnd,
      FEEDBACK_TYPE feedback,
      DWORD dwFlags,
      UINT32 size,
      const void* configuration);


#line 6391 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 6394 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family



typedef struct tagLASTINPUTINFO {
    UINT cbSize;
    DWORD dwTime;
} LASTINPUTINFO, * PLASTINPUTINFO;

__declspec(dllimport)
BOOL
__stdcall
GetLastInputInfo(
      PLASTINPUTINFO plii);
#line 6410 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyA(
      UINT uCode,
      UINT uMapType);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyW(
      UINT uCode,
      UINT uMapType);




#line 6428 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExA(
      UINT uCode,
      UINT uMapType,
      HKL dwhkl);
__declspec(dllimport)
UINT
__stdcall
MapVirtualKeyExW(
      UINT uCode,
      UINT uMapType,
      HKL dwhkl);




#line 6449 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





#line 6455 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 6458 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetInputState(
    void);

__declspec(dllimport)
DWORD
__stdcall
GetQueueStatus(
      UINT flags);


__declspec(dllimport)
HWND
__stdcall
GetCapture(
    void);

__declspec(dllimport)
HWND
__stdcall
SetCapture(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ReleaseCapture(
    void);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjects(
      DWORD nCount,
      const HANDLE *pHandles,
      BOOL fWaitAll,
      DWORD dwMilliseconds,
      DWORD dwWakeMask);

__declspec(dllimport)
DWORD
__stdcall
MsgWaitForMultipleObjectsEx(
      DWORD nCount,
      const HANDLE *pHandles,
      DWORD dwMilliseconds,
      DWORD dwWakeMask,
      DWORD dwFlags);


#line 6512 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion




















#line 6534 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





#line 6540 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





















#line 6562 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


















#pragma region Desktop Family






__declspec(dllimport)
UINT_PTR
__stdcall
SetTimer(
      HWND hWnd,
      UINT_PTR nIDEvent,
      UINT uElapse,
      TIMERPROC lpTimerFunc);









__declspec(dllimport)
UINT_PTR
__stdcall
SetCoalescableTimer(
      HWND hWnd,
      UINT_PTR nIDEvent,
      UINT uElapse,
      TIMERPROC lpTimerFunc,
      ULONG uToleranceDelay);

#line 6615 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
KillTimer(
      HWND hWnd,
      UINT_PTR uIDEvent);

__declspec(dllimport)
BOOL
__stdcall
IsWindowUnicode(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
EnableWindow(
      HWND hWnd,
      BOOL bEnable);

__declspec(dllimport)
BOOL
__stdcall
IsWindowEnabled(
      HWND hWnd);

__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsA(
      HINSTANCE hInstance,
      LPCSTR lpTableName);
__declspec(dllimport)
HACCEL
__stdcall
LoadAcceleratorsW(
      HINSTANCE hInstance,
      LPCWSTR lpTableName);




#line 6659 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableA(
      LPACCEL paccel,
      int cAccel);
__declspec(dllimport)
HACCEL
__stdcall
CreateAcceleratorTableW(
      LPACCEL paccel,
      int cAccel);




#line 6677 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DestroyAcceleratorTable(
      HACCEL hAccel);

__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableA(
      HACCEL hAccelSrc,
      LPACCEL lpAccelDst,
      int cAccelEntries);
__declspec(dllimport)
int
__stdcall
CopyAcceleratorTableW(
      HACCEL hAccelSrc,
      LPACCEL lpAccelDst,
      int cAccelEntries);




#line 6703 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



__declspec(dllimport)
int
__stdcall
TranslateAcceleratorA(
      HWND hWnd,
      HACCEL hAccTable,
      LPMSG lpMsg);
__declspec(dllimport)
int
__stdcall
TranslateAcceleratorW(
      HWND hWnd,
      HACCEL hAccTable,
      LPMSG lpMsg);




#line 6725 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 6727 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 6729 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

















































































#line 6812 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 6819 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 6823 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#line 6831 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 6834 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 6838 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 6845 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 6850 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





#line 6856 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 6860 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 6862 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 6864 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 6866 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 6868 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#line 6876 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 6880 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 6884 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 6889 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 6891 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
GetSystemMetrics(
      int nIndex);


#line 6904 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 6907 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family




__declspec(dllimport)
HMENU
__stdcall
LoadMenuA(
      HINSTANCE hInstance,
      LPCSTR lpMenuName);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuW(
      HINSTANCE hInstance,
      LPCWSTR lpMenuName);




#line 6930 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectA(
      const MENUTEMPLATEA *lpMenuTemplate);
__declspec(dllimport)
HMENU
__stdcall
LoadMenuIndirectW(
      const MENUTEMPLATEW *lpMenuTemplate);




#line 6946 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HMENU
__stdcall
GetMenu(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetMenu(
      HWND hWnd,
      HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
ChangeMenuA(
      HMENU hMenu,
      UINT cmd,
      LPCSTR lpszNewItem,
      UINT cmdInsert,
      UINT flags);
__declspec(dllimport)
BOOL
__stdcall
ChangeMenuW(
      HMENU hMenu,
      UINT cmd,
      LPCWSTR lpszNewItem,
      UINT cmdInsert,
      UINT flags);




#line 6983 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
HiliteMenuItem(
      HWND hWnd,
      HMENU hMenu,
      UINT uIDHiliteItem,
      UINT uHilite);

__declspec(dllimport)
int
__stdcall
GetMenuStringA(
      HMENU hMenu,
      UINT uIDItem,
      LPSTR lpString,
      int cchMax,
      UINT flags);
__declspec(dllimport)
int
__stdcall
GetMenuStringW(
      HMENU hMenu,
      UINT uIDItem,
      LPWSTR lpString,
      int cchMax,
      UINT flags);




#line 7016 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetMenuState(
      HMENU hMenu,
      UINT uId,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DrawMenuBar(
      HWND hWnd);




#line 7035 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
HMENU
__stdcall
GetSystemMenu(
      HWND hWnd,
      BOOL bRevert);


__declspec(dllimport)
HMENU
__stdcall
CreateMenu(
    void);

__declspec(dllimport)
HMENU
__stdcall
CreatePopupMenu(
    void);

__declspec(dllimport)
BOOL
__stdcall
DestroyMenu(
      HMENU hMenu);

__declspec(dllimport)
DWORD
__stdcall
CheckMenuItem(
      HMENU hMenu,
      UINT uIDCheckItem,
      UINT uCheck);

__declspec(dllimport)
BOOL
__stdcall
EnableMenuItem(
      HMENU hMenu,
      UINT uIDEnableItem,
      UINT uEnable);

__declspec(dllimport)
HMENU
__stdcall
GetSubMenu(
      HMENU hMenu,
      int nPos);

__declspec(dllimport)
UINT
__stdcall
GetMenuItemID(
      HMENU hMenu,
      int nPos);

__declspec(dllimport)
int
__stdcall
GetMenuItemCount(
      HMENU hMenu);

__declspec(dllimport)
BOOL
__stdcall
InsertMenuA(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuW(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCWSTR lpNewItem);




#line 7122 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
AppendMenuA(
      HMENU hMenu,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
AppendMenuW(
      HMENU hMenu,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCWSTR lpNewItem);




#line 7144 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ModifyMenuA(
      HMENU hMnu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCSTR lpNewItem);
__declspec(dllimport)
BOOL
__stdcall
ModifyMenuW(
      HMENU hMnu,
      UINT uPosition,
      UINT uFlags,
      UINT_PTR uIDNewItem,
      LPCWSTR lpNewItem);




#line 7168 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall RemoveMenu(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
DeleteMenu(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemBitmaps(
      HMENU hMenu,
      UINT uPosition,
      UINT uFlags,
      HBITMAP hBitmapUnchecked,
      HBITMAP hBitmapChecked);

__declspec(dllimport)
LONG
__stdcall
GetMenuCheckMarkDimensions(
    void);

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenu(
      HMENU hMenu,
      UINT uFlags,
      int x,
      int y,
      int nReserved,
      HWND hWnd,
      const RECT *prcRect);








typedef struct tagTPMPARAMS
{
    UINT    cbSize;     
    RECT    rcExclude;  
}   TPMPARAMS;
typedef TPMPARAMS  *LPTPMPARAMS;

__declspec(dllimport)
BOOL
__stdcall
TrackPopupMenuEx(
      HMENU hMenu,
      UINT uFlags,
      int x,
      int y,
      HWND hwnd,
      LPTPMPARAMS lptpm);
#line 7237 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
CalculatePopupWindowPosition(
      const POINT *anchorPoint,
      const SIZE *windowSize,
      UINT  flags,
      RECT *excludeRect,
      RECT *popupWindowPosition);

#line 7250 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

















typedef struct tagMENUINFO
{
    DWORD   cbSize;
    DWORD   fMask;
    DWORD   dwStyle;
    UINT    cyMax;
    HBRUSH  hbrBack;
    DWORD   dwContextHelpID;
    ULONG_PTR dwMenuData;
}   MENUINFO,  *LPMENUINFO;
typedef MENUINFO const  *LPCMENUINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuInfo(
      HMENU,
      LPMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
SetMenuInfo(
      HMENU,
      LPCMENUINFO);

__declspec(dllimport)
BOOL
__stdcall
EndMenu(
        void);







typedef struct tagMENUGETOBJECTINFO
{
    DWORD dwFlags;
    UINT uPos;
    HMENU hmenu;
    PVOID riid;
    PVOID pvObj;
} MENUGETOBJECTINFO, * PMENUGETOBJECTINFO;












#line 7326 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"








#line 7335 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

















#line 7353 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


typedef struct tagMENUITEMINFOA
{
    UINT     cbSize;
    UINT     fMask;
    UINT     fType;         
    UINT     fState;        
    UINT     wID;           
    HMENU    hSubMenu;      
    HBITMAP  hbmpChecked;   
    HBITMAP  hbmpUnchecked; 
    ULONG_PTR dwItemData;   
    LPSTR    dwTypeData;    
    UINT     cch;           

    HBITMAP  hbmpItem;      
#line 7371 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
}   MENUITEMINFOA,  *LPMENUITEMINFOA;
typedef struct tagMENUITEMINFOW
{
    UINT     cbSize;
    UINT     fMask;
    UINT     fType;         
    UINT     fState;        
    UINT     wID;           
    HMENU    hSubMenu;      
    HBITMAP  hbmpChecked;   
    HBITMAP  hbmpUnchecked; 
    ULONG_PTR dwItemData;   
    LPWSTR   dwTypeData;    
    UINT     cch;           

    HBITMAP  hbmpItem;      
#line 7388 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
}   MENUITEMINFOW,  *LPMENUITEMINFOW;




typedef MENUITEMINFOA MENUITEMINFO;
typedef LPMENUITEMINFOA LPMENUITEMINFO;
#line 7396 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
typedef MENUITEMINFOA const  *LPCMENUITEMINFOA;
typedef MENUITEMINFOW const  *LPCMENUITEMINFOW;



typedef LPCMENUITEMINFOA LPCMENUITEMINFO;
#line 7403 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemA(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPCMENUITEMINFOA lpmi);
__declspec(dllimport)
BOOL
__stdcall
InsertMenuItemW(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPCMENUITEMINFOW lpmi);




#line 7426 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoA(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
GetMenuItemInfoW(
      HMENU hmenu,
      UINT item,
      BOOL fByPosition,
      LPMENUITEMINFOW lpmii);




#line 7448 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoA(
      HMENU hmenu,
      UINT item,
      BOOL fByPositon,
      LPCMENUITEMINFOA lpmii);
__declspec(dllimport)
BOOL
__stdcall
SetMenuItemInfoW(
      HMENU hmenu,
      UINT item,
      BOOL fByPositon,
      LPCMENUITEMINFOW lpmii);




#line 7470 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





__declspec(dllimport)
UINT
__stdcall
GetMenuDefaultItem(
      HMENU hMenu,
      UINT fByPos,
      UINT gmdiFlags);

__declspec(dllimport)
BOOL
__stdcall
SetMenuDefaultItem(
      HMENU hMenu,
      UINT uItem,
      UINT fByPos);

__declspec(dllimport)
BOOL
__stdcall
GetMenuItemRect(
      HWND hWnd,
      HMENU hMenu,
      UINT uItem,
      LPRECT lprcItem);

__declspec(dllimport)
int
__stdcall
MenuItemFromPoint(
      HWND hWnd,
      HMENU hMenu,
      POINT ptScreen);
#line 7508 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


















#line 7527 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"








#line 7536 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 7539 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 7540 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 7543 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 7546 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 7548 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion




#pragma region Desktop Family






typedef struct tagDROPSTRUCT
{
    HWND    hwndSource;
    HWND    hwndSink;
    DWORD   wFmt;
    ULONG_PTR dwData;
    POINT   ptDrop;
    DWORD   dwControlData;
} DROPSTRUCT, *PDROPSTRUCT, *LPDROPSTRUCT;

#line 7571 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion











#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
DragObject(
      HWND hwndParent,
      HWND hwndFrom,
      UINT fmt,
      ULONG_PTR data,
      HCURSOR hcur);

__declspec(dllimport)
BOOL
__stdcall
DragDetect(
      HWND hwnd,
      POINT pt);

#line 7604 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 7607 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawIcon(
      HDC hDC,
      int X,
      int Y,
      HICON hIcon);

#line 7621 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


































#line 7657 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 7658 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagDRAWTEXTPARAMS
{
    UINT    cbSize;
    int     iTabLength;
    int     iLeftMargin;
    int     iRightMargin;
    UINT    uiLengthDrawn;
} DRAWTEXTPARAMS,  *LPDRAWTEXTPARAMS;

#line 7672 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 7675 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
 
int
__stdcall
DrawTextA(
      HDC hdc,
     LPCSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format);
__declspec(dllimport)
 
int
__stdcall
DrawTextW(
      HDC hdc,
     LPCWSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format);




#line 7705 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

























#line 7731 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



__declspec(dllimport)
 
int
__stdcall
DrawTextExA(
      HDC hdc,
      LPSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format,
      LPDRAWTEXTPARAMS lpdtp);
__declspec(dllimport)
 
int
__stdcall
DrawTextExW(
      HDC hdc,
      LPWSTR lpchText,
      int cchText,
      LPRECT lprc,
      UINT format,
      LPDRAWTEXTPARAMS lpdtp);




#line 7761 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 7762 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 7764 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 7767 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GrayStringA(
      HDC hDC,
      HBRUSH hBrush,
      GRAYSTRINGPROC lpOutputFunc,
      LPARAM lpData,
      int nCount,
      int X,
      int Y,
      int nWidth,
      int nHeight);
__declspec(dllimport)
BOOL
__stdcall
GrayStringW(
      HDC hDC,
      HBRUSH hBrush,
      GRAYSTRINGPROC lpOutputFunc,
      LPARAM lpData,
      int nCount,
      int X,
      int Y,
      int nWidth,
      int nHeight);




#line 7802 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 7804 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


















#line 7824 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawStateA(
      HDC hdc,
      HBRUSH hbrFore,
      DRAWSTATEPROC qfnCallBack,
      LPARAM lData,
      WPARAM wData,
      int x,
      int y,
      int cx,
      int cy,
      UINT uFlags);
__declspec(dllimport)
BOOL
__stdcall
DrawStateW(
      HDC hdc,
      HBRUSH hbrFore,
      DRAWSTATEPROC qfnCallBack,
      LPARAM lData,
      WPARAM wData,
      int x,
      int y,
      int cx,
      int cy,
      UINT uFlags);




#line 7862 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 7864 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 7867 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
LONG
__stdcall
TabbedTextOutA(
      HDC hdc,
      int x,
      int y,
      LPCSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions,
      int nTabOrigin);
__declspec(dllimport)
LONG
__stdcall
TabbedTextOutW(
      HDC hdc,
      int x,
      int y,
      LPCWSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions,
      int nTabOrigin);




#line 7900 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentA(
      HDC hdc,
      LPCSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions);
__declspec(dllimport)
DWORD
__stdcall
GetTabbedTextExtentW(
      HDC hdc,
      LPCWSTR lpString,
      int chCount,
      int nTabPositions,
      const INT *lpnTabStopPositions);




#line 7924 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UpdateWindow(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetActiveWindow(
      HWND hWnd);


__declspec(dllimport)
HWND
__stdcall
GetForegroundWindow(
    void);


__declspec(dllimport)
BOOL
__stdcall
PaintDesktop(
      HDC hdc);

__declspec(dllimport)
void
__stdcall
SwitchToThisWindow(
      HWND hwnd,
      BOOL fUnknown);
#line 7958 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SetForegroundWindow(
      HWND hWnd);


__declspec(dllimport)
BOOL
__stdcall
AllowSetForegroundWindow(
      DWORD dwProcessId);



__declspec(dllimport)
BOOL
__stdcall
LockSetForegroundWindow(
      UINT uLockCode);




#line 7985 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
WindowFromDC(
      HDC hDC);

__declspec(dllimport)
HDC
__stdcall
GetDC(
      HWND hWnd);

__declspec(dllimport)
HDC
__stdcall
GetDCEx(
      HWND hWnd,
      HRGN hrgnClip,
      DWORD flags);

#line 8007 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


















#pragma region Desktop Family


__declspec(dllimport)
HDC
__stdcall
GetWindowDC(
      HWND hWnd);

__declspec(dllimport)
int
__stdcall
ReleaseDC(
      HWND hWnd,
      HDC hDC);

__declspec(dllimport)
HDC
__stdcall
BeginPaint(
      HWND hWnd,
      LPPAINTSTRUCT lpPaint);

__declspec(dllimport)
BOOL
__stdcall
EndPaint(
      HWND hWnd,
      const PAINTSTRUCT *lpPaint);

__declspec(dllimport)
BOOL
__stdcall
GetUpdateRect(
      HWND hWnd,
      LPRECT lpRect,
      BOOL bErase);

__declspec(dllimport)
int
__stdcall
GetUpdateRgn(
      HWND hWnd,
      HRGN hRgn,
      BOOL bErase);

__declspec(dllimport)
int
__stdcall
SetWindowRgn(
      HWND hWnd,
      HRGN hRgn,
      BOOL bRedraw);

#line 8081 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
GetWindowRgn(
      HWND hWnd,
      HRGN hRgn);



__declspec(dllimport)
int
__stdcall
GetWindowRgnBox(
      HWND hWnd,
      LPRECT lprc);

#line 8104 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
ExcludeUpdateRgn(
      HDC hDC,
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRect(
      HWND hWnd,
      const RECT *lpRect,
      BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRect(
      HWND hWnd,
      const RECT *lpRect);

__declspec(dllimport)
BOOL
__stdcall
InvalidateRgn(
      HWND hWnd,
      HRGN hRgn,
      BOOL bErase);

__declspec(dllimport)
BOOL
__stdcall
ValidateRgn(
      HWND hWnd,
      HRGN hRgn);


__declspec(dllimport)
BOOL
__stdcall
RedrawWindow(
      HWND hWnd,
      const RECT *lprcUpdate,
      HRGN hrgnUpdate,
      UINT flags);

#line 8153 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion






















#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
LockWindowUpdate(
      HWND hWndLock);

__declspec(dllimport)
BOOL
__stdcall
ScrollWindow(
      HWND hWnd,
      int XAmount,
      int YAmount,
      const RECT *lpRect,
      const RECT *lpClipRect);

__declspec(dllimport)
BOOL
__stdcall
ScrollDC(
      HDC hDC,
      int dx,
      int dy,
      const RECT *lprcScroll,
      const RECT *lprcClip,
      HRGN hrgnUpdate,
      LPRECT lprcUpdate);

__declspec(dllimport)
int
__stdcall
ScrollWindowEx(
      HWND hWnd,
      int dx,
      int dy,
      const RECT *prcScroll,
      const RECT *prcClip,
      HRGN hrgnUpdate,
      LPRECT prcUpdate,
      UINT flags);

#line 8225 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion






#line 8233 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family




__declspec(dllimport)
int
__stdcall
SetScrollPos(
      HWND hWnd,
      int nBar,
      int nPos,
      BOOL bRedraw);

__declspec(dllimport)
int
__stdcall
GetScrollPos(
      HWND hWnd,
      int nBar);

__declspec(dllimport)
BOOL
__stdcall
SetScrollRange(
      HWND hWnd,
      int nBar,
      int nMinPos,
      int nMaxPos,
      BOOL bRedraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollRange(
      HWND hWnd,
      int nBar,
      LPINT lpMinPos,
      LPINT lpMaxPos);

__declspec(dllimport)
BOOL
__stdcall
ShowScrollBar(
      HWND hWnd,
      int wBar,
      BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
EnableScrollBar(
      HWND hWnd,
      UINT wSBflags,
      UINT wArrows);


















#line 8308 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetPropA(
      HWND hWnd,
      LPCSTR lpString,
      HANDLE hData);
__declspec(dllimport)
BOOL
__stdcall
SetPropW(
      HWND hWnd,
      LPCWSTR lpString,
      HANDLE hData);




#line 8328 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
GetPropA(
      HWND hWnd,
      LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
GetPropW(
      HWND hWnd,
      LPCWSTR lpString);




#line 8346 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
RemovePropA(
      HWND hWnd,
      LPCSTR lpString);
__declspec(dllimport)
HANDLE
__stdcall
RemovePropW(
      HWND hWnd,
      LPCWSTR lpString);




#line 8364 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsExA(
      HWND hWnd,
      PROPENUMPROCEXA lpEnumFunc,
      LPARAM lParam);
__declspec(dllimport)
int
__stdcall
EnumPropsExW(
      HWND hWnd,
      PROPENUMPROCEXW lpEnumFunc,
      LPARAM lParam);




#line 8384 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
EnumPropsA(
      HWND hWnd,
      PROPENUMPROCA lpEnumFunc);
__declspec(dllimport)
int
__stdcall
EnumPropsW(
      HWND hWnd,
      PROPENUMPROCW lpEnumFunc);




#line 8402 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetWindowTextA(
      HWND hWnd,
      LPCSTR lpString);
__declspec(dllimport)
BOOL
__stdcall
SetWindowTextW(
      HWND hWnd,
      LPCWSTR lpString);




#line 8420 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

 
__declspec(dllimport)
int
__stdcall
GetWindowTextA(
      HWND hWnd,
      LPSTR lpString,
      int nMaxCount);
 
__declspec(dllimport)
int
__stdcall
GetWindowTextW(
      HWND hWnd,
      LPWSTR lpString,
      int nMaxCount);




#line 8442 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
GetWindowTextLengthA(
      HWND hWnd);
__declspec(dllimport)
int
__stdcall
GetWindowTextLengthW(
      HWND hWnd);




#line 8458 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetClientRect(
      HWND hWnd,
      LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
GetWindowRect(
      HWND hWnd,
      LPRECT lpRect);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRect(
      LPRECT lpRect,
      DWORD dwStyle,
      BOOL bMenu);

__declspec(dllimport)
BOOL
__stdcall
AdjustWindowRectEx(
      LPRECT lpRect,
      DWORD dwStyle,
      BOOL bMenu,
      DWORD dwExStyle);


#line 8492 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion





#pragma region Desktop Family


typedef struct tagHELPINFO      
{
    UINT    cbSize;             
    int     iContextType;       
    int     iCtrlId;            
    HANDLE  hItemHandle;        
    DWORD_PTR dwContextId;      
    POINT   MousePos;           
}  HELPINFO,  *LPHELPINFO;

__declspec(dllimport)
BOOL
__stdcall
SetWindowContextHelpId(
      HWND,
      DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetWindowContextHelpId(
      HWND);

__declspec(dllimport)
BOOL
__stdcall
SetMenuContextHelpId(
      HMENU,
      DWORD);

__declspec(dllimport)
DWORD
__stdcall
GetMenuContextHelpId(
      HMENU);

#line 8538 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 8541 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"















#line 8557 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"











#line 8569 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 8579 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 8586 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"










#line 8597 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 8604 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 8606 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#pragma region Desktop Family


__declspec(dllimport)
int
__stdcall
MessageBoxA(
      HWND hWnd,
      LPCSTR lpText,
      LPCSTR lpCaption,
      UINT uType);
__declspec(dllimport)
int
__stdcall
MessageBoxW(
      HWND hWnd,
      LPCWSTR lpText,
      LPCWSTR lpCaption,
      UINT uType);




#line 8637 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"























#line 8661 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
MessageBoxExA(
      HWND hWnd,
      LPCSTR lpText,
      LPCSTR lpCaption,
      UINT uType,
      WORD wLanguageId);
__declspec(dllimport)
int
__stdcall
MessageBoxExW(
      HWND hWnd,
      LPCWSTR lpText,
      LPCWSTR lpCaption,
      UINT uType,
      WORD wLanguageId);




#line 8685 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



typedef void (__stdcall *MSGBOXCALLBACK)(LPHELPINFO lpHelpInfo);

typedef struct tagMSGBOXPARAMSA
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCSTR      lpszText;
    LPCSTR      lpszCaption;
    DWORD       dwStyle;
    LPCSTR      lpszIcon;
    DWORD_PTR   dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD       dwLanguageId;
} MSGBOXPARAMSA, *PMSGBOXPARAMSA, *LPMSGBOXPARAMSA;
typedef struct tagMSGBOXPARAMSW
{
    UINT        cbSize;
    HWND        hwndOwner;
    HINSTANCE   hInstance;
    LPCWSTR     lpszText;
    LPCWSTR     lpszCaption;
    DWORD       dwStyle;
    LPCWSTR     lpszIcon;
    DWORD_PTR   dwContextHelpId;
    MSGBOXCALLBACK      lpfnMsgBoxCallback;
    DWORD       dwLanguageId;
} MSGBOXPARAMSW, *PMSGBOXPARAMSW, *LPMSGBOXPARAMSW;





typedef MSGBOXPARAMSA MSGBOXPARAMS;
typedef PMSGBOXPARAMSA PMSGBOXPARAMS;
typedef LPMSGBOXPARAMSA LPMSGBOXPARAMS;
#line 8725 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
MessageBoxIndirectA(
      const MSGBOXPARAMSA * lpmbp);
__declspec(dllimport)
int
__stdcall
MessageBoxIndirectW(
      const MSGBOXPARAMSW * lpmbp);




#line 8741 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 8742 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 8745 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
MessageBeep(
      UINT uType);

#line 8758 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 8761 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family



__declspec(dllimport)
int
__stdcall
ShowCursor(
      BOOL bShow);

__declspec(dllimport)
BOOL
__stdcall
SetCursorPos(
      int X,
      int Y);


__declspec(dllimport)
BOOL
__stdcall
SetPhysicalCursorPos(
      int X,
      int Y);
#line 8787 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
SetCursor(
      HCURSOR hCursor);

__declspec(dllimport)
BOOL
__stdcall
GetCursorPos(
      LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
GetPhysicalCursorPos(
      LPPOINT lpPoint);
#line 8807 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
ClipCursor(
      const RECT *lpRect);


__declspec(dllimport)
BOOL
__stdcall
GetClipCursor(
      LPRECT lpRect);

__declspec(dllimport)
HCURSOR
__stdcall
GetCursor(
    void);

__declspec(dllimport)
BOOL
__stdcall
CreateCaret(
      HWND hWnd,
      HBITMAP hBitmap,
      int nWidth,
      int nHeight);

__declspec(dllimport)
UINT
__stdcall
GetCaretBlinkTime(
    void);

__declspec(dllimport)
BOOL
__stdcall
SetCaretBlinkTime(
      UINT uMSeconds);

__declspec(dllimport)
BOOL
__stdcall
DestroyCaret(
    void);

__declspec(dllimport)
BOOL
__stdcall
HideCaret(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
ShowCaret(
      HWND hWnd);

__declspec(dllimport)
BOOL
__stdcall
SetCaretPos(
      int X,
      int Y);

__declspec(dllimport)
BOOL
__stdcall
GetCaretPos(
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ClientToScreen(
      HWND hWnd,
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
ScreenToClient(
      HWND hWnd,
      LPPOINT lpPoint);


__declspec(dllimport)
BOOL
__stdcall
LogicalToPhysicalPoint(
      HWND hWnd,
      LPPOINT lpPoint);

__declspec(dllimport)
BOOL
__stdcall
PhysicalToLogicalPoint(
      HWND hWnd,
      LPPOINT lpPoint);

#line 8909 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
MapWindowPoints(
      HWND hWndFrom,
      HWND hWndTo,
      LPPOINT lpPoints,
      UINT cPoints);

__declspec(dllimport)
HWND
__stdcall
WindowFromPoint(
      POINT Point);


__declspec(dllimport)
HWND
__stdcall
WindowFromPhysicalPoint(
      POINT Point);
#line 8932 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPoint(
      HWND hWndParent,
      POINT Point);

#line 8941 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


__declspec(dllimport)
HWND
__stdcall
ChildWindowFromPointEx(
      HWND hwnd,
      POINT pt,
      UINT flags);

#line 8961 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 8964 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"










































#line 9007 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"








#line 9016 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 9017 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"








#line 9026 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#pragma region Desktop Family


__declspec(dllimport)
DWORD
__stdcall
GetSysColor(
      int nIndex);


__declspec(dllimport)
HBRUSH
__stdcall
GetSysColorBrush(
      int nIndex);


#line 9046 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
SetSysColors(
      int cElements,
      const INT * lpaElements,
      const COLORREF * lpaRgbValues);

#line 9056 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 9059 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DrawFocusRect(
      HDC hDC,
      const RECT * lprc);

__declspec(dllimport)
int
__stdcall
FillRect(
      HDC hDC,
      const RECT *lprc,
      HBRUSH hbr);

__declspec(dllimport)
int
__stdcall
FrameRect(
      HDC hDC,
      const RECT *lprc,
      HBRUSH hbr);

__declspec(dllimport)
BOOL
__stdcall
InvertRect(
      HDC hDC,
      const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
SetRect(
      LPRECT lprc,
      int xLeft,
      int yTop,
      int xRight,
      int yBottom);

__declspec(dllimport)
BOOL
__stdcall
SetRectEmpty(
      LPRECT lprc);

__declspec(dllimport)
BOOL
__stdcall
CopyRect(
      LPRECT lprcDst,
      const RECT *lprcSrc);

__declspec(dllimport)
BOOL
__stdcall
InflateRect(
      LPRECT lprc,
      int dx,
      int dy);

__declspec(dllimport)
BOOL
__stdcall
IntersectRect(
      LPRECT lprcDst,
      const RECT *lprcSrc1,
      const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
UnionRect(
      LPRECT lprcDst,
      const RECT *lprcSrc1,
      const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
SubtractRect(
      LPRECT lprcDst,
      const RECT *lprcSrc1,
      const RECT *lprcSrc2);

__declspec(dllimport)
BOOL
__stdcall
OffsetRect(
      LPRECT lprc,
      int dx,
      int dy);

__declspec(dllimport)
BOOL
__stdcall
IsRectEmpty(
      const RECT *lprc);

__declspec(dllimport)
BOOL
__stdcall
EqualRect(
      const RECT *lprc1,
      const RECT *lprc2);

__declspec(dllimport)
BOOL
__stdcall
PtInRect(
      const RECT *lprc,
      POINT pt);



__declspec(dllimport)
WORD
__stdcall
GetWindowWord(
      HWND hWnd,
      int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetWindowWord(
      HWND hWnd,
      int nIndex,
      WORD wNewWord);

__declspec(dllimport)
LONG
__stdcall
GetWindowLongA(
      HWND hWnd,
      int nIndex);
__declspec(dllimport)
LONG
__stdcall
GetWindowLongW(
      HWND hWnd,
      int nIndex);




#line 9210 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
SetWindowLongA(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);
__declspec(dllimport)
LONG
__stdcall
SetWindowLongW(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);




#line 9230 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

















































#line 9280 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#line 9288 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 9290 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
WORD
__stdcall
GetClassWord(
      HWND hWnd,
      int nIndex);

__declspec(dllimport)
WORD
__stdcall
SetClassWord(
      HWND hWnd,
      int nIndex,
      WORD wNewWord);

__declspec(dllimport)
DWORD
__stdcall
GetClassLongA(
      HWND hWnd,
      int nIndex);
__declspec(dllimport)
DWORD
__stdcall
GetClassLongW(
      HWND hWnd,
      int nIndex);




#line 9323 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
DWORD
__stdcall
SetClassLongA(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);
__declspec(dllimport)
DWORD
__stdcall
SetClassLongW(
      HWND hWnd,
      int nIndex,
      LONG dwNewLong);




#line 9343 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

















































#line 9393 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#line 9401 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 9403 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 9405 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
GetProcessDefaultLayout(
      DWORD *pdwDefaultLayout);

__declspec(dllimport)
BOOL
__stdcall
SetProcessDefaultLayout(
      DWORD dwDefaultLayout);
#line 9419 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetDesktopWindow(
    void);


__declspec(dllimport)
HWND
__stdcall
GetParent(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
SetParent(
      HWND hWndChild,
      HWND hWndNewParent);

__declspec(dllimport)
BOOL
__stdcall
EnumChildWindows(
      HWND hWndParent,
      WNDENUMPROC lpEnumFunc,
      LPARAM lParam);


__declspec(dllimport)
HWND
__stdcall
FindWindowA(
      LPCSTR lpClassName,
      LPCSTR lpWindowName);
__declspec(dllimport)
HWND
__stdcall
FindWindowW(
      LPCWSTR lpClassName,
      LPCWSTR lpWindowName);




#line 9466 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
HWND
__stdcall
FindWindowExA(
      HWND hWndParent,
      HWND hWndChildAfter,
      LPCSTR lpszClass,
      LPCSTR lpszWindow);
__declspec(dllimport)
HWND
__stdcall
FindWindowExW(
      HWND hWndParent,
      HWND hWndChildAfter,
      LPCWSTR lpszClass,
      LPCWSTR lpszWindow);




#line 9489 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetShellWindow(
    void);

#line 9497 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
RegisterShellHookWindow(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
DeregisterShellHookWindow(
      HWND hwnd);

__declspec(dllimport)
BOOL
__stdcall
EnumWindows(
      WNDENUMPROC lpEnumFunc,
      LPARAM lParam);

__declspec(dllimport)
BOOL
__stdcall
EnumThreadWindows(
      DWORD dwThreadId,
      WNDENUMPROC lpfn,
      LPARAM lParam);




__declspec(dllimport)
int
__stdcall
GetClassNameA(
      HWND hWnd,
      LPSTR lpClassName,
      int nMaxCount
    );
__declspec(dllimport)
int
__stdcall
GetClassNameW(
      HWND hWnd,
      LPWSTR lpClassName,
      int nMaxCount
    );




#line 9550 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





















#line 9572 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



__declspec(dllimport)
HWND
__stdcall
GetTopWindow(
      HWND hWnd);





__declspec(dllimport)
DWORD
__stdcall
GetWindowThreadProcessId(
      HWND hWnd,
      LPDWORD lpdwProcessId);


__declspec(dllimport)
BOOL
__stdcall
IsGUIThread(
      BOOL bConvert);

#line 9600 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





__declspec(dllimport)
HWND
__stdcall
GetLastActivePopup(
      HWND hWnd);












#line 9623 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 9626 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HWND
__stdcall
GetWindow(
      HWND hWnd,
      UINT uCmd);






__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookA(
      int nFilterType,
      HOOKPROC pfnFilterProc);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookW(
      int nFilterType,
      HOOKPROC pfnFilterProc);




#line 9656 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





















#line 9678 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHook(
      int nCode,
      HOOKPROC pfnFilterProc);

__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExA(
      int idHook,
      HOOKPROC lpfn,
      HINSTANCE hmod,
      DWORD dwThreadId);
__declspec(dllimport)
HHOOK
__stdcall
SetWindowsHookExW(
      int idHook,
      HOOKPROC lpfn,
      HINSTANCE hmod,
      DWORD dwThreadId);




#line 9707 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
UnhookWindowsHookEx(
      HHOOK hhk);

__declspec(dllimport)
LRESULT
__stdcall
CallNextHookEx(
      HHOOK hhk,
      int nCode,
      WPARAM wParam,
      LPARAM lParam);










#line 9733 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 9734 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 9736 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion








































#line 9778 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 9783 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 9788 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






















#line 9811 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
CheckMenuRadioItem(
      HMENU hmenu,
      UINT first,
      UINT last,
      UINT check,
      UINT flags);
#line 9828 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




typedef struct {
    WORD versionNumber;
    WORD offset;
} MENUITEMTEMPLATEHEADER, *PMENUITEMTEMPLATEHEADER;

typedef struct {        
    WORD mtOption;
    WORD mtID;
    WCHAR mtString[1];
} MENUITEMTEMPLATE, *PMENUITEMTEMPLATE;


#line 9845 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 9848 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



























#line 9876 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 9880 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 9890 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





#pragma region Desktop Family


__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapA(
      HINSTANCE hInstance,
      LPCSTR lpBitmapName);
__declspec(dllimport)
HBITMAP
__stdcall
LoadBitmapW(
      HINSTANCE hInstance,
      LPCWSTR lpBitmapName);




#line 9915 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorA(
      HINSTANCE hInstance,
      LPCSTR lpCursorName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorW(
      HINSTANCE hInstance,
      LPCWSTR lpCursorName);




#line 9933 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileA(
      LPCSTR lpFileName);
__declspec(dllimport)
HCURSOR
__stdcall
LoadCursorFromFileW(
      LPCWSTR lpFileName);




#line 9949 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HCURSOR
__stdcall
CreateCursor(
      HINSTANCE hInst,
      int xHotSpot,
      int yHotSpot,
      int nWidth,
      int nHeight,
      const void *pvANDPlane,
      const void *pvXORPlane);

__declspec(dllimport)
BOOL
__stdcall
DestroyCursor(
      HCURSOR hCursor);









#line 9977 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 9979 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion



















#line 10000 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 10004 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetSystemCursor(
      HCURSOR hcur,
      DWORD id);

typedef struct _ICONINFO {
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
} ICONINFO;
typedef ICONINFO *PICONINFO;

__declspec(dllimport)
HICON
__stdcall
LoadIconA(
      HINSTANCE hInstance,
      LPCSTR lpIconName);
__declspec(dllimport)
HICON
__stdcall
LoadIconW(
      HINSTANCE hInstance,
      LPCWSTR lpIconName);




#line 10041 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsA(
      LPCSTR szFileName,
      int nIconIndex,
      int cxIcon,
      int cyIcon,
      HICON *phicon,
      UINT *piconid,
      UINT nIcons,
      UINT flags);
__declspec(dllimport)
UINT
__stdcall
PrivateExtractIconsW(
      LPCWSTR szFileName,
      int nIconIndex,
      int cxIcon,
      int cyIcon,
      HICON *phicon,
      UINT *piconid,
      UINT nIcons,
      UINT flags);




#line 10072 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIcon(
      HINSTANCE hInstance,
      int nWidth,
      int nHeight,
      BYTE cPlanes,
      BYTE cBitsPixel,
      const BYTE *lpbANDbits,
      const BYTE *lpbXORbits);

__declspec(dllimport)
BOOL
__stdcall
DestroyIcon(
      HICON hIcon);

__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectory(
      PBYTE presbits,
      BOOL fIcon);


__declspec(dllimport)
int
__stdcall
LookupIconIdFromDirectoryEx(
      PBYTE presbits,
      BOOL fIcon,
      int cxDesired,
      int cyDesired,
      UINT Flags);
#line 10109 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HICON
__stdcall
CreateIconFromResource(
      PBYTE presbits,
      DWORD dwResSize,
      BOOL fIcon,
      DWORD dwVer);


__declspec(dllimport)
HICON
__stdcall
CreateIconFromResourceEx(
      PBYTE presbits,
      DWORD dwResSize,
      BOOL fIcon,
      DWORD dwVer,
      int cxDesired,
      int cyDesired,
      UINT Flags);


typedef struct tagCURSORSHAPE
{
    int     xHotSpot;
    int     yHotSpot;
    int     cx;
    int     cy;
    int     cbWidth;
    BYTE    Planes;
    BYTE    BitsPixel;
} CURSORSHAPE,  *LPCURSORSHAPE;
#line 10144 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 10146 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion





















#pragma region Desktop Family


__declspec(dllimport)
HANDLE
__stdcall
LoadImageA(
      HINSTANCE hInst,
      LPCSTR name,
      UINT type,
      int cx,
      int cy,
      UINT fuLoad);
__declspec(dllimport)
HANDLE
__stdcall
LoadImageW(
      HINSTANCE hInst,
      LPCWSTR name,
      UINT type,
      int cx,
      int cy,
      UINT fuLoad);




#line 10196 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
HANDLE
__stdcall
CopyImage(
      HANDLE h,
      UINT type,
      int cx,
      int cy,
      UINT flags);








#line 10215 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport) BOOL __stdcall DrawIconEx(
      HDC hdc,
      int xLeft,
      int yTop,
      HICON hIcon,
      int cxWidth,
      int cyWidth,
      UINT istepIfAniCur,
      HBRUSH hbrFlickerFreeDraw,
      UINT diFlags);

#line 10228 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 10231 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
HICON
__stdcall
CreateIconIndirect(
      PICONINFO piconinfo);

__declspec(dllimport)
HICON
__stdcall
CopyIcon(
      HICON hIcon);

__declspec(dllimport)
BOOL
__stdcall
GetIconInfo(
      HICON hIcon,
      PICONINFO piconinfo);


typedef struct _ICONINFOEXA {
    DWORD   cbSize;
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD    wResID;
    CHAR    szModName[260];
    CHAR    szResName[260];
} ICONINFOEXA, *PICONINFOEXA;
typedef struct _ICONINFOEXW {
    DWORD   cbSize;
    BOOL    fIcon;
    DWORD   xHotspot;
    DWORD   yHotspot;
    HBITMAP hbmMask;
    HBITMAP hbmColor;
    WORD    wResID;
    WCHAR   szModName[260];
    WCHAR   szResName[260];
} ICONINFOEXW, *PICONINFOEXW;




typedef ICONINFOEXA ICONINFOEX;
typedef PICONINFOEXA PICONINFOEX;
#line 10284 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExA(
      HICON hicon,
      PICONINFOEXA piconinfo);
__declspec(dllimport)
BOOL
__stdcall
GetIconInfoExW(
      HICON hicon,
      PICONINFOEXW piconinfo);




#line 10302 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 10303 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 10308 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 10310 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


















































































































#line 10426 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 10429 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 10430 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





#line 10436 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 10439 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
















































#line 10488 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 10493 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 10498 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 10499 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





























#line 10529 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 10532 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
















#line 10549 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 10556 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 10566 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"













































#line 10612 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 10617 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 10620 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









































#line 10662 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
















#line 10679 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"













#line 10693 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 10696 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#line 10704 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

























#line 10730 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 10733 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"












#line 10746 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
















#line 10763 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 10765 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

























#pragma region Desktop Family








__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageA(
      HWND hDlg,
      LPMSG lpMsg);
__declspec(dllimport)
BOOL
__stdcall
IsDialogMessageW(
      HWND hDlg,
      LPMSG lpMsg);




#line 10816 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 10818 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
MapDialogRect(
      HWND hDlg,
      LPRECT lpRect);

__declspec(dllimport)
int
__stdcall
DlgDirListA(
      HWND hDlg,
      LPSTR lpPathSpec,
      int nIDListBox,
      int nIDStaticPath,
      UINT uFileType);
__declspec(dllimport)
int
__stdcall
DlgDirListW(
      HWND hDlg,
      LPWSTR lpPathSpec,
      int nIDListBox,
      int nIDStaticPath,
      UINT uFileType);




#line 10849 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 10851 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion















#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExA(
      HWND hwndDlg,
      LPSTR lpString,
      int chCount,
      int idListBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectExW(
      HWND hwndDlg,
      LPWSTR lpString,
      int chCount,
      int idListBox);




#line 10891 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxA(
      HWND hDlg,
      LPSTR lpPathSpec,
      int nIDComboBox,
      int nIDStaticPath,
      UINT uFiletype);
__declspec(dllimport)
int
__stdcall
DlgDirListComboBoxW(
      HWND hDlg,
      LPWSTR lpPathSpec,
      int nIDComboBox,
      int nIDStaticPath,
      UINT uFiletype);




#line 10915 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExA(
      HWND hwndDlg,
      LPSTR lpString,
      int cchOut,
      int idComboBox);
__declspec(dllimport)
BOOL
__stdcall
DlgDirSelectComboBoxExW(
      HWND hwndDlg,
      LPWSTR lpString,
      int cchOut,
      int idComboBox);




#line 10937 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 10939 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

























#line 10966 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 10970 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#line 10978 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


































                                  




























































#line 11074 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 11077 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 11082 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 11092 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 11094 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"























#line 11118 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





#line 11124 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"












































#line 11169 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 11171 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"











































#line 11215 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 11216 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 11220 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#line 11230 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 11231 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




















#line 11252 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 11255 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"














#line 11270 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 11274 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"









#pragma region Desktop Family


typedef struct tagSCROLLINFO
{
    UINT    cbSize;
    UINT    fMask;
    int     nMin;
    int     nMax;
    UINT    nPage;
    int     nPos;
    int     nTrackPos;
}   SCROLLINFO,  *LPSCROLLINFO;
typedef SCROLLINFO const  *LPCSCROLLINFO;

__declspec(dllimport)
int
__stdcall
SetScrollInfo(
      HWND hwnd,
      int nBar,
      LPCSCROLLINFO lpsi,
      BOOL redraw);

__declspec(dllimport)
BOOL
__stdcall
GetScrollInfo(
      HWND hwnd,
      int nBar,
      LPSCROLLINFO lpsi);


#line 11317 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion
#line 11319 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 11321 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 11322 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
















#line 11339 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagMDICREATESTRUCTA {
    LPCSTR   szClass;
    LPCSTR   szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTA, *LPMDICREATESTRUCTA;
typedef struct tagMDICREATESTRUCTW {
    LPCWSTR  szClass;
    LPCWSTR  szTitle;
    HANDLE hOwner;
    int x;
    int y;
    int cx;
    int cy;
    DWORD style;
    LPARAM lParam;        
} MDICREATESTRUCTW, *LPMDICREATESTRUCTW;




typedef MDICREATESTRUCTA MDICREATESTRUCT;
typedef LPMDICREATESTRUCTA LPMDICREATESTRUCT;
#line 11372 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

typedef struct tagCLIENTCREATESTRUCT {
    HANDLE hWindowMenu;
    UINT idFirstChild;
} CLIENTCREATESTRUCT, *LPCLIENTCREATESTRUCT;

__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcA(
      HWND hWnd,
      HWND hWndMDIClient,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)
LRESULT
__stdcall
DefFrameProcW(
      HWND hWnd,
      HWND hWndMDIClient,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);




#line 11401 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)

LRESULT
__stdcall



#line 11410 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
DefMDIChildProcA(
      HWND hWnd,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);
__declspec(dllimport)

LRESULT
__stdcall



#line 11423 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
DefMDIChildProcW(
      HWND hWnd,
      UINT uMsg,
      WPARAM wParam,
      LPARAM lParam);




#line 11433 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
TranslateMDISysAccel(
      HWND hWndClient,
      LPMSG lpMsg);

#line 11444 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
ArrangeIconicWindows(
      HWND hWnd);

__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowA(
      LPCSTR lpClassName,
      LPCSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HINSTANCE hInstance,
      LPARAM lParam);
__declspec(dllimport)
HWND
__stdcall
CreateMDIWindowW(
      LPCWSTR lpClassName,
      LPCWSTR lpWindowName,
      DWORD dwStyle,
      int X,
      int Y,
      int nWidth,
      int nHeight,
      HWND hWndParent,
      HINSTANCE hInstance,
      LPARAM lParam);




#line 11484 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
WORD
__stdcall
TileWindows(
      HWND hwndParent,
      UINT wHow,
      const RECT * lpRect,
      UINT cKids,
      const HWND  * lpKids);

__declspec(dllimport)
WORD
__stdcall CascadeWindows(
      HWND hwndParent,
      UINT wHow,
      const RECT * lpRect,
      UINT cKids,
      const HWND  * lpKids);

#line 11506 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 11508 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 11511 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 11513 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#pragma region Desktop Family




typedef DWORD HELPPOLY;
typedef struct tagMULTIKEYHELPA {

    DWORD  mkSize;


#line 11528 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
    CHAR   mkKeylist;
    CHAR   szKeyphrase[1];
} MULTIKEYHELPA, *PMULTIKEYHELPA, *LPMULTIKEYHELPA;
typedef struct tagMULTIKEYHELPW {

    DWORD  mkSize;


#line 11537 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
    WCHAR  mkKeylist;
    WCHAR  szKeyphrase[1];
} MULTIKEYHELPW, *PMULTIKEYHELPW, *LPMULTIKEYHELPW;





typedef MULTIKEYHELPA MULTIKEYHELP;
typedef PMULTIKEYHELPA PMULTIKEYHELP;
typedef LPMULTIKEYHELPA LPMULTIKEYHELP;
#line 11549 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

typedef struct tagHELPWININFOA {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    CHAR   rgchMember[2];
} HELPWININFOA, *PHELPWININFOA, *LPHELPWININFOA;
typedef struct tagHELPWININFOW {
    int  wStructSize;
    int  x;
    int  y;
    int  dx;
    int  dy;
    int  wMax;
    WCHAR  rgchMember[2];
} HELPWININFOW, *PHELPWININFOW, *LPHELPWININFOW;





typedef HELPWININFOA HELPWININFO;
typedef PHELPWININFOA PHELPWININFO;
typedef LPHELPWININFOA LPHELPWININFO;
#line 11577 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





































#line 11615 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
WinHelpA(
      HWND hWndMain,
      LPCSTR lpszHelp,
      UINT uCommand,
      ULONG_PTR dwData);
__declspec(dllimport)
BOOL
__stdcall
WinHelpW(
      HWND hWndMain,
      LPCWSTR lpszHelp,
      UINT uCommand,
      ULONG_PTR dwData);




#line 11639 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 11641 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 11643 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion





#line 11650 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 11654 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 11658 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family



__declspec(dllimport)
DWORD
__stdcall
GetGuiResources(
      HANDLE hProcess,
      DWORD uiFlags);
#line 11670 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 11673 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


#pragma region Desktop Family



#line 11681 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion




















































































#line 11767 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"















#line 11783 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





#line 11789 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"















#line 11805 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 11809 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#line 11817 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#line 11825 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




























#line 11854 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#pragma region Desktop Family


typedef struct tagTouchPredictionParameters
{
    UINT cbSize;
    UINT dwLatency;       
    UINT dwSampleTime;    
    UINT bUseHWTimeStamp; 
} TOUCHPREDICTIONPARAMETERS, *PTOUCHPREDICTIONPARAMETERS;










#line 11879 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion
















#line 11897 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"












































#line 11942 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"













#line 11956 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"








#line 11965 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


































#line 12000 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 12007 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



















#line 12027 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 12029 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"













#pragma region Desktop Family


typedef struct tagNONCLIENTMETRICSA
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTA lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTA lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTA lfMenuFont;
    LOGFONTA lfStatusFont;
    LOGFONTA lfMessageFont;

    int     iPaddedBorderWidth;
#line 12065 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
}   NONCLIENTMETRICSA, *PNONCLIENTMETRICSA, * LPNONCLIENTMETRICSA;
typedef struct tagNONCLIENTMETRICSW
{
    UINT    cbSize;
    int     iBorderWidth;
    int     iScrollWidth;
    int     iScrollHeight;
    int     iCaptionWidth;
    int     iCaptionHeight;
    LOGFONTW lfCaptionFont;
    int     iSmCaptionWidth;
    int     iSmCaptionHeight;
    LOGFONTW lfSmCaptionFont;
    int     iMenuWidth;
    int     iMenuHeight;
    LOGFONTW lfMenuFont;
    LOGFONTW lfStatusFont;
    LOGFONTW lfMessageFont;

    int     iPaddedBorderWidth;
#line 12086 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
}   NONCLIENTMETRICSW, *PNONCLIENTMETRICSW, * LPNONCLIENTMETRICSW;





typedef NONCLIENTMETRICSA NONCLIENTMETRICS;
typedef PNONCLIENTMETRICSA PNONCLIENTMETRICS;
typedef LPNONCLIENTMETRICSA LPNONCLIENTMETRICS;
#line 12096 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 12098 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 12101 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 12102 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"















#pragma region Desktop Family


typedef struct tagMINIMIZEDMETRICS
{
    UINT    cbSize;
    int     iWidth;
    int     iHorzGap;
    int     iVertGap;
    int     iArrange;
}   MINIMIZEDMETRICS, *PMINIMIZEDMETRICS, *LPMINIMIZEDMETRICS;



typedef struct tagICONMETRICSA
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTA lfFont;
}   ICONMETRICSA, *PICONMETRICSA, *LPICONMETRICSA;
typedef struct tagICONMETRICSW
{
    UINT    cbSize;
    int     iHorzSpacing;
    int     iVertSpacing;
    int     iTitleWrap;
    LOGFONTW lfFont;
}   ICONMETRICSW, *PICONMETRICSW, *LPICONMETRICSW;





typedef ICONMETRICSA ICONMETRICS;
typedef PICONMETRICSA PICONMETRICS;
typedef LPICONMETRICSA LPICONMETRICS;
#line 12156 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 12157 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 12158 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

typedef struct tagANIMATIONINFO
{
    UINT    cbSize;
    int     iMinAnimate;
}   ANIMATIONINFO, *LPANIMATIONINFO;

typedef struct tagSERIALKEYSA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR     lpszActivePort;
    LPSTR     lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSA, *LPSERIALKEYSA;
typedef struct tagSERIALKEYSW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR    lpszActivePort;
    LPWSTR    lpszPort;
    UINT    iBaudRate;
    UINT    iPortState;
    UINT    iActive;
}   SERIALKEYSW, *LPSERIALKEYSW;




typedef SERIALKEYSA SERIALKEYS;
typedef LPSERIALKEYSA LPSERIALKEYS;
#line 12192 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







typedef struct tagHIGHCONTRASTA
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPSTR   lpszDefaultScheme;
}   HIGHCONTRASTA, *LPHIGHCONTRASTA;
typedef struct tagHIGHCONTRASTW
{
    UINT    cbSize;
    DWORD   dwFlags;
    LPWSTR  lpszDefaultScheme;
}   HIGHCONTRASTW, *LPHIGHCONTRASTW;




typedef HIGHCONTRASTA HIGHCONTRAST;
typedef LPHIGHCONTRASTA LPHIGHCONTRAST;
#line 12218 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 12220 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion






















#line 12244 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\tvout.h"











#pragma once
#line 14 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\tvout.h"





#pragma region Desktop Family


typedef struct _VIDEOPARAMETERS {
    GUID  Guid;                         
    ULONG dwOffset;                     
    ULONG dwCommand;                    
    ULONG dwFlags;                      
    ULONG dwMode;                       
    ULONG dwTVStandard;                 
    ULONG dwAvailableModes;             
    ULONG dwAvailableTVStandard;        
    ULONG dwFlickerFilter;              
    ULONG dwOverScanX;                  
    ULONG dwOverScanY;                  
    ULONG dwMaxUnscaledX;               
    ULONG dwMaxUnscaledY;               
    ULONG dwPositionX;                  
    ULONG dwPositionY;                  
    ULONG dwBrightness;                 
    ULONG dwContrast;                   
    ULONG dwCPType;                     
    ULONG dwCPCommand;                  
    ULONG dwCPStandard;                 
    ULONG dwCPKey;
    ULONG bCP_APSTriggerBits;           
    UCHAR bOEMCopyProtection[256];      
} VIDEOPARAMETERS, *PVIDEOPARAMETERS, *LPVIDEOPARAMETERS;


                                        












































#line 95 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\tvout.h"
#pragma endregion

#line 98 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\tvout.h"
#line 12249 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"











#line 12261 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family





__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsA(
      DEVMODEA* lpDevMode,
      DWORD dwFlags);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsW(
      DEVMODEW* lpDevMode,
      DWORD dwFlags);




#line 12285 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExA(
      LPCSTR lpszDeviceName,
      DEVMODEA* lpDevMode,
      HWND hwnd,
      DWORD dwflags,
      LPVOID lParam);
__declspec(dllimport)
LONG
__stdcall
ChangeDisplaySettingsExW(
      LPCWSTR lpszDeviceName,
      DEVMODEW* lpDevMode,
      HWND hwnd,
      DWORD dwflags,
      LPVOID lParam);




#line 12309 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsA(
      LPCSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEA* lpDevMode);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsW(
      LPCWSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEW* lpDevMode);




#line 12333 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExA(
      LPCSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEA* lpDevMode,
      DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplaySettingsExW(
      LPCWSTR lpszDeviceName,
      DWORD iModeNum,
      DEVMODEW* lpDevMode,
      DWORD dwFlags);




#line 12357 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesA(
      LPCSTR lpDevice,
      DWORD iDevNum,
      PDISPLAY_DEVICEA lpDisplayDevice,
      DWORD dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumDisplayDevicesW(
      LPCWSTR lpDevice,
      DWORD iDevNum,
      PDISPLAY_DEVICEW lpDisplayDevice,
      DWORD dwFlags);




#line 12383 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 12388 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



__declspec(dllimport)
LONG
__stdcall
GetDisplayConfigBufferSizes(
      UINT32 flags,
      UINT32* numPathArrayElements,
      UINT32* numModeInfoArrayElements);

__declspec(dllimport)
LONG
__stdcall
SetDisplayConfig(
      UINT32 numPathArrayElements,
      DISPLAYCONFIG_PATH_INFO* pathArray,
      UINT32 numModeInfoArrayElements,
      DISPLAYCONFIG_MODE_INFO* modeInfoArray,
      UINT32 flags);

__declspec(dllimport)
  LONG
__stdcall
QueryDisplayConfig(
      UINT32 flags,
      UINT32* numPathArrayElements,
      DISPLAYCONFIG_PATH_INFO* pathArray,
      UINT32* numModeInfoArrayElements,
      DISPLAYCONFIG_MODE_INFO* modeInfoArray,
    
    
        DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigGetDeviceInfo(
      DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);

__declspec(dllimport)
LONG
__stdcall
DisplayConfigSetDeviceInfo(
      DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);

#line 12435 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 12437 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 12438 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


__declspec(dllimport)
BOOL
__stdcall
SystemParametersInfoA(
      UINT uiAction,
      UINT uiParam,
      PVOID pvParam,
      UINT fWinIni);
__declspec(dllimport)
BOOL
__stdcall
SystemParametersInfoW(
      UINT uiAction,
      UINT uiParam,
      PVOID pvParam,
      UINT fWinIni);




#line 12461 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 12464 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 12467 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family





typedef struct tagFILTERKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iWaitMSec;            
    DWORD iDelayMSec;           
    DWORD iRepeatMSec;          
    DWORD iBounceMSec;          
} FILTERKEYS, *LPFILTERKEYS;

#line 12485 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion












#pragma region Desktop Family


typedef struct tagSTICKYKEYS
{
    UINT  cbSize;
    DWORD dwFlags;
} STICKYKEYS, *LPSTICKYKEYS;

#line 12508 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion






























#line 12540 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagMOUSEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iMaxSpeed;
    DWORD iTimeToMaxSpeed;
    DWORD iCtrlSpeed;
    DWORD dwReserved1;
    DWORD dwReserved2;
} MOUSEKEYS, *LPMOUSEKEYS;

#line 12556 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


















#line 12576 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


typedef struct tagACCESSTIMEOUT
{
    UINT  cbSize;
    DWORD dwFlags;
    DWORD iTimeOutMSec;
} ACCESSTIMEOUT, *LPACCESSTIMEOUT;

#line 12588 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion
























#pragma region Desktop Family


typedef struct tagSOUNDSENTRYA
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPSTR   lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYA, *LPSOUNDSENTRYA;
typedef struct tagSOUNDSENTRYW
{
    UINT cbSize;
    DWORD dwFlags;
    DWORD iFSTextEffect;
    DWORD iFSTextEffectMSec;
    DWORD iFSTextEffectColorBits;
    DWORD iFSGrafEffect;
    DWORD iFSGrafEffectMSec;
    DWORD iFSGrafEffectColor;
    DWORD iWindowsEffect;
    DWORD iWindowsEffectMSec;
    LPWSTR  lpszWindowsEffectDLL;
    DWORD iWindowsEffectOrdinal;
} SOUNDSENTRYW, *LPSOUNDSENTRYW;




typedef SOUNDSENTRYA SOUNDSENTRY;
typedef LPSOUNDSENTRYA LPSOUNDSENTRY;
#line 12653 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 12655 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
SoundSentry(void);
#line 12673 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

typedef struct tagTOGGLEKEYS
{
    UINT cbSize;
    DWORD dwFlags;
} TOGGLEKEYS, *LPTOGGLEKEYS;

#line 12681 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion











#pragma region Desktop Family



typedef struct tagAUDIODESCRIPTION {
    UINT cbSize;   
    BOOL Enabled;  
    LCID Locale;   
} AUDIODESCRIPTION, *LPAUDIODESCRIPTION;
#line 12703 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






__declspec(dllimport)
void
__stdcall
SetDebugErrorLevel(
      DWORD dwLevel);

#line 12716 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion









#pragma region Desktop Family


__declspec(dllimport)
void
__stdcall
SetLastErrorEx(
      DWORD dwErrCode,
      DWORD dwType);

__declspec(dllimport)
int
__stdcall
InternalGetWindowText(
      HWND hWnd,
      LPWSTR pString,
      int cchMaxCount);










#line 12754 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
CancelShutdown(
    void);

#line 12762 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion












#pragma region Desktop Family


__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromPoint(
      POINT pt,
      DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromRect(
      LPCRECT lprc,
      DWORD dwFlags);

__declspec(dllimport)
HMONITOR
__stdcall
MonitorFromWindow(
      HWND hwnd,
      DWORD dwFlags);

#line 12800 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


typedef struct tagMONITORINFO
{
    DWORD   cbSize;
    RECT    rcMonitor;
    RECT    rcWork;
    DWORD   dwFlags;
} MONITORINFO, *LPMONITORINFO;


typedef struct tagMONITORINFOEXA : public tagMONITORINFO
{
    CHAR        szDevice[32];
} MONITORINFOEXA, *LPMONITORINFOEXA;
typedef struct tagMONITORINFOEXW : public tagMONITORINFO
{
    WCHAR       szDevice[32];
} MONITORINFOEXW, *LPMONITORINFOEXW;




typedef MONITORINFOEXA MONITORINFOEX;
typedef LPMONITORINFOEXA LPMONITORINFOEX;
#line 12835 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


















#line 12854 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoA(
      HMONITOR hMonitor,
      LPMONITORINFO lpmi);
__declspec(dllimport)
BOOL
__stdcall
GetMonitorInfoW(
      HMONITOR hMonitor,
      LPMONITORINFO lpmi);




#line 12872 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

typedef BOOL (__stdcall* MONITORENUMPROC)(HMONITOR, HDC, LPRECT, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDisplayMonitors(
      HDC hdc,
      LPCRECT lprcClip,
      MONITORENUMPROC lpfnEnum,
      LPARAM dwData);

#line 12885 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion



#pragma region Desktop Family






__declspec(dllimport)
void
__stdcall
NotifyWinEvent(
      DWORD event,
      HWND  hwnd,
      LONG  idObject,
      LONG  idChild);

typedef void (__stdcall* WINEVENTPROC)(
    HWINEVENTHOOK hWinEventHook,
    DWORD         event,
    HWND          hwnd,
    LONG          idObject,
    LONG          idChild,
    DWORD         idEventThread,
    DWORD         dwmsEventTime);

__declspec(dllimport)
HWINEVENTHOOK
__stdcall
SetWinEventHook(
      DWORD eventMin,
      DWORD eventMax,
      HMODULE hmodWinEventProc,
      WINEVENTPROC pfnWinEventProc,
      DWORD idProcess,
      DWORD idThread,
      DWORD dwFlags);


__declspec(dllimport)
BOOL
__stdcall
IsWinEventHookInstalled(
      DWORD event);
#line 12933 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 12935 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion









#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
UnhookWinEvent(
      HWINEVENTHOOK hWinEventHook);

#line 12955 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion















































































































































































































#line 13164 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
















#line 13181 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"















#line 13197 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"













#line 13211 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"















#line 13227 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 13229 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 13236 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 13240 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






































































































































































































#line 13439 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#line 13443 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"








































































#line 13516 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






#line 13523 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"






































#pragma region Desktop Family


typedef struct tagGUITHREADINFO
{
    DWORD   cbSize;
    DWORD   flags;
    HWND    hwndActive;
    HWND    hwndFocus;
    HWND    hwndCapture;
    HWND    hwndMenuOwner;
    HWND    hwndMoveSize;
    HWND    hwndCaret;
    RECT    rcCaret;
} GUITHREADINFO, *PGUITHREADINFO,  * LPGUITHREADINFO;

#line 13578 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion









#line 13589 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 13591 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 13592 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
GetGUIThreadInfo(
      DWORD idThread,
      PGUITHREADINFO pgui);

__declspec(dllimport)
BOOL
__stdcall
BlockInput(
    BOOL fBlockIt);





__declspec(dllimport)
BOOL
__stdcall
SetProcessDPIAware(
    void);

__declspec(dllimport)
BOOL
__stdcall
IsProcessDPIAware(
    void);
#line 13625 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameA(
      HWND hwnd,
      LPSTR pszFileName,
      UINT cchFileNameMax);
__declspec(dllimport)
UINT
__stdcall
GetWindowModuleFileNameW(
      HWND hwnd,
      LPWSTR pszFileName,
      UINT cchFileNameMax);




#line 13645 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 13647 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


































#line 13683 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#pragma region Desktop Family





typedef struct tagCURSORINFO
{
    DWORD   cbSize;
    DWORD   flags;
    HCURSOR hCursor;
    POINT   ptScreenPos;
} CURSORINFO, *PCURSORINFO, *LPCURSORINFO;




#line 13705 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetCursorInfo(
      PCURSORINFO pci);




typedef struct tagWINDOWINFO
{
    DWORD cbSize;
    RECT rcWindow;
    RECT rcClient;
    DWORD dwStyle;
    DWORD dwExStyle;
    DWORD dwWindowStatus;
    UINT cxWindowBorders;
    UINT cyWindowBorders;
    ATOM atomWindowType;
    WORD wCreatorVersion;
} WINDOWINFO, *PWINDOWINFO, *LPWINDOWINFO;



__declspec(dllimport)
BOOL
__stdcall
GetWindowInfo(
      HWND hwnd,
      PWINDOWINFO pwi);




typedef struct tagTITLEBARINFO
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
} TITLEBARINFO, *PTITLEBARINFO, *LPTITLEBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetTitleBarInfo(
      HWND hwnd,
      PTITLEBARINFO pti);


typedef struct tagTITLEBARINFOEX
{
    DWORD cbSize;
    RECT rcTitleBar;
    DWORD rgstate[5 + 1];
    RECT rgrect[5 + 1];
} TITLEBARINFOEX, *PTITLEBARINFOEX, *LPTITLEBARINFOEX;
#line 13764 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




typedef struct tagMENUBARINFO
{
    DWORD cbSize;
    RECT rcBar;          
    HMENU hMenu;         
    HWND hwndMenu;       
    BOOL fBarFocused:1;  
    BOOL fFocused:1;     
} MENUBARINFO, *PMENUBARINFO, *LPMENUBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetMenuBarInfo(
      HWND hwnd,
      LONG idObject,
      LONG idItem,
      PMENUBARINFO pmbi);




typedef struct tagSCROLLBARINFO
{
    DWORD cbSize;
    RECT rcScrollBar;
    int dxyLineButton;
    int xyThumbTop;
    int xyThumbBottom;
    int reserved;
    DWORD rgstate[5 + 1];
} SCROLLBARINFO, *PSCROLLBARINFO, *LPSCROLLBARINFO;

__declspec(dllimport)
BOOL
__stdcall
GetScrollBarInfo(
      HWND hwnd,
      LONG idObject,
      PSCROLLBARINFO psbi);




typedef struct tagCOMBOBOXINFO
{
    DWORD cbSize;
    RECT rcItem;
    RECT rcButton;
    DWORD stateButton;
    HWND hwndCombo;
    HWND hwndItem;
    HWND hwndList;
} COMBOBOXINFO, *PCOMBOBOXINFO, *LPCOMBOBOXINFO;

__declspec(dllimport)
BOOL
__stdcall
GetComboBoxInfo(
      HWND hwndCombo,
      PCOMBOBOXINFO pcbi);

#line 13831 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family


__declspec(dllimport)
HWND
__stdcall
GetAncestor(
      HWND hwnd,
      UINT gaFlags);








__declspec(dllimport)
HWND
__stdcall
RealChildWindowFromPoint(
      HWND hwndParent,
      POINT ptParentClientCoords);






__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassA(
      HWND hwnd,
      LPSTR ptszClassName,
      UINT cchClassNameMax);




__declspec(dllimport)
UINT
__stdcall
RealGetWindowClassW(
      HWND hwnd,
      LPWSTR ptszClassName,
      UINT cchClassNameMax);




#line 13892 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




typedef struct tagALTTABINFO
{
    DWORD cbSize;
    int cItems;
    int cColumns;
    int cRows;
    int iColFocus;
    int iRowFocus;
    int cxItem;
    int cyItem;
    POINT ptStart;
} ALTTABINFO, *PALTTABINFO, *LPALTTABINFO;

__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoA(
      HWND hwnd,
      int iItem,
      PALTTABINFO pati,
      LPSTR pszItemText,
      UINT cchItemText);
__declspec(dllimport)
BOOL
__stdcall
GetAltTabInfoW(
      HWND hwnd,
      int iItem,
      PALTTABINFO pati,
      LPWSTR pszItemText,
      UINT cchItemText);




#line 13932 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





__declspec(dllimport)
DWORD
__stdcall
GetListBoxInfo(
      HWND hwnd);

#line 13944 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 13947 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 13948 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family




__declspec(dllimport)
BOOL
__stdcall
LockWorkStation(
    void);
#line 13960 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



__declspec(dllimport)
BOOL
__stdcall
UserHandleGrantAccess(
      HANDLE hUserHandle,
      HANDLE hJob,
      BOOL   bGrant);

#line 13972 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 13974 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion







#pragma region Desktop Family


struct HRAWINPUT__{int unused;}; typedef struct HRAWINPUT__ *HRAWINPUT;

#line 13988 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion























#pragma region Desktop Family





typedef struct tagRAWINPUTHEADER {
    DWORD dwType;
    DWORD dwSize;
    HANDLE hDevice;
    WPARAM wParam;
} RAWINPUTHEADER, *PRAWINPUTHEADER, *LPRAWINPUTHEADER;

#line 14026 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family





typedef struct tagRAWMOUSE {
    


    USHORT usFlags;

    


    union {
        ULONG ulButtons;
        struct  {
            USHORT  usButtonFlags;
            USHORT  usButtonData;
        };
    };


    


    ULONG ulRawButtons;

    


    LONG lLastX;

    


    LONG lLastY;

    


    ULONG ulExtraInformation;

} RAWMOUSE, *PRAWMOUSE, *LPRAWMOUSE;

#line 14082 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion







































#line 14123 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family





typedef struct tagRAWKEYBOARD {
    


    USHORT MakeCode;

    



    USHORT Flags;

    USHORT Reserved;

    


    USHORT VKey;
    UINT   Message;

    


    ULONG ExtraInformation;


} RAWKEYBOARD, *PRAWKEYBOARD, *LPRAWKEYBOARD;

#line 14159 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

















#pragma region Desktop Family





typedef struct tagRAWHID {
    DWORD dwSizeHid;    
    DWORD dwCount;      
    BYTE bRawData[1];
} RAWHID, *PRAWHID, *LPRAWHID;

#line 14190 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion





#pragma region Desktop Family


typedef struct tagRAWINPUT {
    RAWINPUTHEADER header;
    union {
        RAWMOUSE    mouse;
        RAWKEYBOARD keyboard;
        RAWHID      hid;
    } data;
} RAWINPUT, *PRAWINPUT, *LPRAWINPUT;

#line 14209 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion





#line 14216 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"










#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
GetRawInputData(
      HRAWINPUT hRawInput,
      UINT uiCommand,
      LPVOID pData,
      PUINT pcbSize,
      UINT cbSizeHeader);

#line 14240 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family


typedef struct tagRID_DEVICE_INFO_MOUSE {
    DWORD dwId;
    DWORD dwNumberOfButtons;
    DWORD dwSampleRate;
    BOOL  fHasHorizontalWheel;
} RID_DEVICE_INFO_MOUSE, *PRID_DEVICE_INFO_MOUSE;

typedef struct tagRID_DEVICE_INFO_KEYBOARD {
    DWORD dwType;
    DWORD dwSubType;
    DWORD dwKeyboardMode;
    DWORD dwNumberOfFunctionKeys;
    DWORD dwNumberOfIndicators;
    DWORD dwNumberOfKeysTotal;
} RID_DEVICE_INFO_KEYBOARD, *PRID_DEVICE_INFO_KEYBOARD;

typedef struct tagRID_DEVICE_INFO_HID {
    DWORD dwVendorId;
    DWORD dwProductId;
    DWORD dwVersionNumber;

    


    USHORT usUsagePage;
    USHORT usUsage;
} RID_DEVICE_INFO_HID, *PRID_DEVICE_INFO_HID;

typedef struct tagRID_DEVICE_INFO {
    DWORD cbSize;
    DWORD dwType;
    union {
        RID_DEVICE_INFO_MOUSE mouse;
        RID_DEVICE_INFO_KEYBOARD keyboard;
        RID_DEVICE_INFO_HID hid;
    };
} RID_DEVICE_INFO, *PRID_DEVICE_INFO, *LPRID_DEVICE_INFO;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoA(
      HANDLE hDevice,
      UINT uiCommand,
      LPVOID pData,
      PUINT pcbSize);
__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceInfoW(
      HANDLE hDevice,
      UINT uiCommand,
      LPVOID pData,
      PUINT pcbSize);




#line 14311 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





__declspec(dllimport)
UINT
__stdcall
GetRawInputBuffer(
      PRAWINPUT pData,
      PUINT pcbSize,
      UINT cbSizeHeader);




typedef struct tagRAWINPUTDEVICE {
    USHORT usUsagePage; 
    USHORT usUsage;     
    DWORD dwFlags;
    HWND hwndTarget;    
} RAWINPUTDEVICE, *PRAWINPUTDEVICE, *LPRAWINPUTDEVICE;

typedef const RAWINPUTDEVICE* PCRAWINPUTDEVICE;

#line 14337 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion












#line 14351 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"










#line 14362 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





#line 14368 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
RegisterRawInputDevices(
      PCRAWINPUTDEVICE pRawInputDevices,
      UINT uiNumDevices,
      UINT cbSize);

__declspec(dllimport)
UINT
__stdcall
GetRegisteredRawInputDevices(
      PRAWINPUTDEVICE pRawInputDevices,
      PUINT puiNumDevices,
      UINT cbSize);


typedef struct tagRAWINPUTDEVICELIST {
    HANDLE hDevice;
    DWORD dwType;
} RAWINPUTDEVICELIST, *PRAWINPUTDEVICELIST;

__declspec(dllimport)
UINT
__stdcall
GetRawInputDeviceList(
      PRAWINPUTDEVICELIST pRawInputDeviceList,
      PUINT puiNumDevices,
      UINT cbSize);

__declspec(dllimport)
LRESULT
__stdcall
DefRawInputProc(
      PRAWINPUT* paRawInput,
      INT nInput,
      UINT cbSizeHeader);

#line 14411 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 14414 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"





















#pragma region Desktop Family


typedef enum tagPOINTER_DEVICE_TYPE {
    POINTER_DEVICE_TYPE_INTEGRATED_PEN = 0x00000001,
    POINTER_DEVICE_TYPE_EXTERNAL_PEN   = 0x00000002,
    POINTER_DEVICE_TYPE_TOUCH          = 0x00000003,
    POINTER_DEVICE_TYPE_MAX            = 0xFFFFFFFF
} POINTER_DEVICE_TYPE;

typedef struct tagPOINTER_DEVICE_INFO {
    DWORD displayOrientation;
    HANDLE device;
    POINTER_DEVICE_TYPE pointerDeviceType;
    HMONITOR monitor;
    ULONG startingCursorId;
    USHORT maxActiveContacts;
    WCHAR productString[520];
} POINTER_DEVICE_INFO;

typedef struct tagPOINTER_DEVICE_PROPERTY {
    INT32 logicalMin;
    INT32 logicalMax;
    INT32 physicalMin;
    INT32 physicalMax;
    UINT32 unit;
    UINT32 unitExponent;
    USHORT usagePageId;
    USHORT usageId;
} POINTER_DEVICE_PROPERTY;

typedef enum tagPOINTER_DEVICE_CURSOR_TYPE {
    POINTER_DEVICE_CURSOR_TYPE_UNKNOWN   = 0x00000000,
    POINTER_DEVICE_CURSOR_TYPE_TIP       = 0x00000001,
    POINTER_DEVICE_CURSOR_TYPE_ERASER    = 0x00000002,
    POINTER_DEVICE_CURSOR_TYPE_MAX       = 0xFFFFFFFF
} POINTER_DEVICE_CURSOR_TYPE;

typedef struct tagPOINTER_DEVICE_CURSOR_INFO {
    UINT32 cursorId;
    POINTER_DEVICE_CURSOR_TYPE cursor;
} POINTER_DEVICE_CURSOR_INFO;

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevices(
      UINT32* deviceCount,
      POINTER_DEVICE_INFO *pointerDevices);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDevice(
      HANDLE device,
      POINTER_DEVICE_INFO *pointerDevice);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceProperties(
      HANDLE device,
      UINT32* propertyCount,
      POINTER_DEVICE_PROPERTY *pointerProperties);

__declspec(dllimport)
BOOL
__stdcall
RegisterPointerDeviceNotifications(
      HWND window,
      BOOL notifyRange);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceRects(
      HANDLE device,
      RECT* pointerDeviceRect,
      RECT* displayRect);

__declspec(dllimport)
BOOL
__stdcall
GetPointerDeviceCursors(
      HANDLE device,
      UINT32* cursorCount,
      POINTER_DEVICE_CURSOR_INFO *deviceCursors);

__declspec(dllimport)
BOOL
__stdcall
GetRawPointerDeviceData(
      UINT32 pointerId,
      UINT32 historyCount,
      UINT32 propertiesCount,
      POINTER_DEVICE_PROPERTY* pProperties,
      LONG* pValues);


#line 14535 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 14538 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"











#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilter(
      UINT message,
      DWORD dwFlag);

#line 14560 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 14563 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"











#pragma region Desktop Family


typedef struct tagCHANGEFILTERSTRUCT {
    DWORD cbSize;
    DWORD ExtStatus;
} CHANGEFILTERSTRUCT, *PCHANGEFILTERSTRUCT;

#line 14583 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion








#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
ChangeWindowMessageFilterEx(
      HWND hwnd,                                         
      UINT message,                                      
      DWORD action,                                      
      PCHANGEFILTERSTRUCT pChangeFilterStruct);   

#line 14605 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 14608 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


#line 14611 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#pragma region Desktop Family





struct HGESTUREINFO__{int unused;}; typedef struct HGESTUREINFO__ *HGESTUREINFO;

#line 14627 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion




















#pragma region Desktop Family










typedef struct tagGESTUREINFO {
    UINT cbSize;                    
    DWORD dwFlags;                  
    DWORD dwID;                     
    HWND hwndTarget;                
    POINTS ptsLocation;             
    DWORD dwInstanceID;             
    DWORD dwSequenceID;             
    ULONGLONG ullArguments;         
    UINT cbExtraArgs;               
} GESTUREINFO, *PGESTUREINFO;
typedef GESTUREINFO const * PCGESTUREINFO;









typedef struct tagGESTURENOTIFYSTRUCT {
    UINT cbSize;                    
    DWORD dwFlags;                  
    HWND hwndTarget;                
    POINTS ptsLocation;             
    DWORD dwInstanceID;             
} GESTURENOTIFYSTRUCT, *PGESTURENOTIFYSTRUCT;













__declspec(dllimport)
BOOL
__stdcall
GetGestureInfo(
      HGESTUREINFO hGestureInfo,
      PGESTUREINFO pGestureInfo);







__declspec(dllimport)
BOOL
__stdcall
GetGestureExtraArgs(
      HGESTUREINFO hGestureInfo,
      UINT cbExtraArgs,
      PBYTE pExtraArgs);











__declspec(dllimport)
BOOL
__stdcall
CloseGestureInfoHandle(
      HGESTUREINFO hGestureInfo);









typedef struct tagGESTURECONFIG {
    DWORD dwID;                     
    DWORD dwWant;                   
    DWORD dwBlock;                  
} GESTURECONFIG, *PGESTURECONFIG;

#line 14752 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion









































                                                        

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetGestureConfig(
      HWND hwnd,                                     
      DWORD dwReserved,                              
      UINT cIDs,                                     
      PGESTURECONFIG pGestureConfig,    
                                                        
      UINT cbSize);                                  



                                                        

__declspec(dllimport)
BOOL
__stdcall
GetGestureConfig(
      HWND hwnd,                                     
      DWORD dwReserved,                              
      DWORD dwFlags,                                 
      PUINT pcIDs,                                   
                                                        
      PGESTURECONFIG pGestureConfig,
                                                        
      UINT cbSize);                                  

#line 14828 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion


#line 14832 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"














#line 14847 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonCreate(
      HWND hWnd,
      LPCWSTR pwszReason);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonQuery(
      HWND hWnd,
      LPWSTR pwszBuff,
      DWORD *pcchBuff);

__declspec(dllimport)
BOOL
__stdcall
ShutdownBlockReasonDestroy(
      HWND hWnd);

#line 14876 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion




#pragma region Desktop Family





typedef enum tagINPUT_MESSAGE_DEVICE_TYPE  {
     IMDT_UNAVAILABLE = 0x00000000,      
     IMDT_KEYBOARD    = 0x00000001,      
     IMDT_MOUSE       = 0x00000002,      
     IMDT_TOUCH       = 0x00000004,      
     IMDT_PEN         = 0x00000008,      
 } INPUT_MESSAGE_DEVICE_TYPE;

typedef enum tagINPUT_MESSAGE_ORIGIN_ID {
     IMO_UNAVAILABLE = 0x00000000,  
     IMO_HARDWARE    = 0x00000001,  
     IMO_INJECTED    = 0x00000002,  
     IMO_SYSTEM      = 0x00000004,  
} INPUT_MESSAGE_ORIGIN_ID;




 typedef struct tagINPUT_MESSAGE_SOURCE {
     INPUT_MESSAGE_DEVICE_TYPE deviceType;
     INPUT_MESSAGE_ORIGIN_ID   originId;
 } INPUT_MESSAGE_SOURCE;





__declspec(dllimport)
BOOL
__stdcall
GetCurrentInputMessageSource(
      INPUT_MESSAGE_SOURCE *inputMessageSource);

__declspec(dllimport)
BOOL
__stdcall
GetCIMSSM(
      INPUT_MESSAGE_SOURCE *inputMessageSource);

#line 14927 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 14930 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#pragma region Application Family





typedef enum tagAR_STATE {
    AR_ENABLED        = 0x0,
    AR_DISABLED       = 0x1,
    AR_SUPPRESSED     = 0x2,
    AR_REMOTESESSION  = 0x4,
    AR_MULTIMON       = 0x8,
    AR_NOSENSOR       = 0x10,
    AR_NOT_SUPPORTED  = 0x20,
    AR_DOCKED         = 0x40,
    AR_LAPTOP         = 0x80
} AR_STATE, *PAR_STATE;

#line 14952 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion





extern "C++" { inline AR_STATE operator | (AR_STATE a, AR_STATE b) { return AR_STATE(((int)a) | ((int)b)); } inline AR_STATE &operator |= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((int &)a) |= ((int)b)); } inline AR_STATE operator & (AR_STATE a, AR_STATE b) { return AR_STATE(((int)a) & ((int)b)); } inline AR_STATE &operator &= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((int &)a) &= ((int)b)); } inline AR_STATE operator ~ (AR_STATE a) { return AR_STATE(~((int)a)); } inline AR_STATE operator ^ (AR_STATE a, AR_STATE b) { return AR_STATE(((int)a) ^ ((int)b)); } inline AR_STATE &operator ^= (AR_STATE &a, AR_STATE b) { return (AR_STATE &)(((int &)a) ^= ((int)b)); } };
#line 14960 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#pragma region Desktop Family






typedef enum ORIENTATION_PREFERENCE {
    ORIENTATION_PREFERENCE_NONE              = 0x0,
    ORIENTATION_PREFERENCE_LANDSCAPE         = 0x1,
    ORIENTATION_PREFERENCE_PORTRAIT          = 0x2,
    ORIENTATION_PREFERENCE_LANDSCAPE_FLIPPED = 0x4,
    ORIENTATION_PREFERENCE_PORTRAIT_FLIPPED  = 0x8
} ORIENTATION_PREFERENCE;





extern "C++" { inline ORIENTATION_PREFERENCE operator | (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((int)a) | ((int)b)); } inline ORIENTATION_PREFERENCE &operator |= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((int &)a) |= ((int)b)); } inline ORIENTATION_PREFERENCE operator & (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((int)a) & ((int)b)); } inline ORIENTATION_PREFERENCE &operator &= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((int &)a) &= ((int)b)); } inline ORIENTATION_PREFERENCE operator ~ (ORIENTATION_PREFERENCE a) { return ORIENTATION_PREFERENCE(~((int)a)); } inline ORIENTATION_PREFERENCE operator ^ (ORIENTATION_PREFERENCE a, ORIENTATION_PREFERENCE b) { return ORIENTATION_PREFERENCE(((int)a) ^ ((int)b)); } inline ORIENTATION_PREFERENCE &operator ^= (ORIENTATION_PREFERENCE &a, ORIENTATION_PREFERENCE b) { return (ORIENTATION_PREFERENCE &)(((int &)a) ^= ((int)b)); } };
#line 14982 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

__declspec(dllimport)
BOOL
__stdcall
GetAutoRotationState(
      PAR_STATE pState);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferences(
      ORIENTATION_PREFERENCE *pOrientation);

__declspec(dllimport)
BOOL
__stdcall
GetDisplayAutoRotationPreferencesByProcessId(
      DWORD dwProcessId,
      ORIENTATION_PREFERENCE *pOrientation,
      BOOL *fRotateScreen);

__declspec(dllimport)
BOOL
__stdcall
SetDisplayAutoRotationPreferences(
      ORIENTATION_PREFERENCE orientation);

#line 15010 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 15013 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"



#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
IsImmersiveProcess(
      HANDLE hProcess);

__declspec(dllimport)
BOOL
__stdcall
SetProcessRestrictionExemption(
      BOOL fEnableExemption);

#line 15033 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#pragma endregion

#line 15036 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"







#line 15044 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"
#line 15045 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"


}
#line 15049 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"

#line 15051 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winuser.h"




#line 168 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"























extern "C" {
#line 26 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\datetimeapi.h"
 











#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\datetimeapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\datetimeapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\datetimeapi.h"













#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\datetimeapi.h"


extern "C" {
#line 39 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\datetimeapi.h"






#pragma region Desktop Family




__declspec(dllimport)
int
__stdcall
GetDateFormatA(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME * lpDate,
      LPCSTR lpFormat,
      LPSTR lpDateStr,
      int cchDate
    );


__declspec(dllimport)
int
__stdcall
GetDateFormatW(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME * lpDate,
      LPCWSTR lpFormat,
      LPWSTR lpDateStr,
      int cchDate
    );





#line 80 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\datetimeapi.h"



__declspec(dllimport)
int
__stdcall
GetTimeFormatA(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME * lpTime,
      LPCSTR lpFormat,
      LPSTR lpTimeStr,
      int cchTime
    );


__declspec(dllimport)
int
__stdcall
GetTimeFormatW(
      LCID Locale,
      DWORD dwFlags,
      const SYSTEMTIME * lpTime,
      LPCWSTR lpFormat,
      LPWSTR lpTimeStr,
      int cchTime
    );





#line 113 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\datetimeapi.h"

#line 115 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\datetimeapi.h"
#pragma endregion








#pragma region Application Family



__declspec(dllimport)
int
__stdcall
GetTimeFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      const SYSTEMTIME * lpTime,
      LPCWSTR lpFormat,
      LPWSTR lpTimeStr,
      int cchTime
    );


__declspec(dllimport)
int
__stdcall
GetDateFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      const SYSTEMTIME * lpDate,
      LPCWSTR lpFormat,
      LPWSTR lpDateStr,
      int cchDate,
      LPCWSTR lpCalendar
    );


#line 156 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\datetimeapi.h"
#pragma endregion

#line 159 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\datetimeapi.h"







}
#line 168 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\datetimeapi.h"


#line 171 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\datetimeapi.h"




#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"




#pragma region Application Family










#line 49 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
































































#line 114 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



#line 118 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


























































































#line 209 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"








#line 218 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


















#line 237 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


































#line 272 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



#line 276 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"











































#line 320 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"






































































































































































#line 487 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"




#line 492 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"













#line 506 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



#line 510 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"













#line 524 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"





















































































































#line 642 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"










#line 653 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"




















#line 674 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



                                                   
                                                   
                                                   
                                                   









#line 691 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


#line 694 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"





















#line 716 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



#line 720 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


























#line 747 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



#line 751 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
























































#line 808 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"









#line 818 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"




#line 823 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


#line 826 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"




























































































#line 919 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"












typedef DWORD LGRPID;




typedef DWORD LCTYPE;




typedef DWORD CALTYPE;





typedef DWORD CALID;






typedef struct _cpinfo {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
} CPINFO, *LPCPINFO;

typedef struct _cpinfoexA {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    CHAR    CodePageName[260];         
} CPINFOEXA, *LPCPINFOEXA;
typedef struct _cpinfoexW {
    UINT    MaxCharSize;                    
    BYTE    DefaultChar[2];   
    BYTE    LeadByte[12];        
    WCHAR   UnicodeDefaultChar;             
    UINT    CodePage;                       
    WCHAR   CodePageName[260];         
} CPINFOEXW, *LPCPINFOEXW;




typedef CPINFOEXA CPINFOEX;
typedef LPCPINFOEXA LPCPINFOEX;
#line 983 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"






typedef struct _numberfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTA, *LPNUMBERFMTA;
typedef struct _numberfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
} NUMBERFMTW, *LPNUMBERFMTW;




typedef NUMBERFMTA NUMBERFMT;
typedef LPNUMBERFMTA LPNUMBERFMT;
#line 1012 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"






typedef struct _currencyfmtA {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPSTR   lpDecimalSep;              
    LPSTR   lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPSTR   lpCurrencySymbol;          
} CURRENCYFMTA, *LPCURRENCYFMTA;
typedef struct _currencyfmtW {
    UINT    NumDigits;                 
    UINT    LeadingZero;               
    UINT    Grouping;                  
    LPWSTR  lpDecimalSep;              
    LPWSTR  lpThousandSep;             
    UINT    NegativeOrder;             
    UINT    PositiveOrder;             
    LPWSTR  lpCurrencySymbol;          
} CURRENCYFMTW, *LPCURRENCYFMTW;




typedef CURRENCYFMTA CURRENCYFMT;
typedef LPCURRENCYFMTA LPCURRENCYFMT;
#line 1045 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"





enum SYSNLS_FUNCTION{
    COMPARE_STRING    =  0x0001,
};
typedef DWORD NLS_FUNCTION;














typedef struct _nlsversioninfo{
    DWORD dwNLSVersionInfoSize;     
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;         
    DWORD dwEffectiveId;            
    GUID  guidCustomVersion;        
} NLSVERSIONINFO, *LPNLSVERSIONINFO;













#line 1089 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"




typedef struct _nlsversioninfoex{
    DWORD dwNLSVersionInfoSize;     
    DWORD dwNLSVersion;
    DWORD dwDefinedVersion;         
    DWORD dwEffectiveId;            
    GUID  guidCustomVersion;        
} NLSVERSIONINFOEX, *LPNLSVERSIONINFOEX;





typedef LONG    GEOID;
typedef DWORD   GEOTYPE;
typedef DWORD   GEOCLASS;







enum SYSGEOTYPE {
    GEO_NATION      =       0x0001,
    GEO_LATITUDE    =       0x0002,
    GEO_LONGITUDE   =       0x0003,
    GEO_ISO2        =       0x0004,
    GEO_ISO3        =       0x0005,
    GEO_RFC1766     =       0x0006,
    GEO_LCID        =       0x0007,
    GEO_FRIENDLYNAME=       0x0008,
    GEO_OFFICIALNAME=       0x0009,
    GEO_TIMEZONES   =       0x000A,
    GEO_OFFICIALLANGUAGES = 0x000B,
    GEO_ISO_UN_NUMBER =     0x000C,
    GEO_PARENT      =       0x000D
};





enum SYSGEOCLASS {
    GEOCLASS_NATION  = 16,
    GEOCLASS_REGION  = 14,
    GEOCLASS_ALL = 0
};






typedef enum _NORM_FORM {
    NormalizationOther  = 0,       
    NormalizationC      = 0x1,     
    NormalizationD      = 0x2,     
    NormalizationKC     = 0x5,     
                                   
    NormalizationKD     = 0x6      
                                   
} NORM_FORM;













#line 1169 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"







typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCA)(LGRPID, LPSTR, LPSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCA)(LGRPID, LCID, LPSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCA)(LPSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXA)(LPSTR, CALID);
typedef BOOL (__stdcall* LOCALE_ENUMPROCA)(LPSTR);
typedef BOOL (__stdcall* LOCALE_ENUMPROCW)(LPWSTR);

typedef BOOL (__stdcall* LANGUAGEGROUP_ENUMPROCW)(LGRPID, LPWSTR, LPWSTR, DWORD, LONG_PTR);
typedef BOOL (__stdcall* LANGGROUPLOCALE_ENUMPROCW)(LGRPID, LCID, LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* UILANGUAGE_ENUMPROCW)(LPWSTR, LONG_PTR);
typedef BOOL (__stdcall* CODEPAGE_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* TIMEFMT_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCW)(LPWSTR);
typedef BOOL (__stdcall* CALINFO_ENUMPROCEXW)(LPWSTR, CALID);
typedef BOOL (__stdcall* GEO_ENUMPROC)(GEOID);


























#line 1225 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



























#line 1253 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"






typedef struct _FILEMUIINFO {
    DWORD       dwSize;                 
    DWORD       dwVersion;              
    DWORD       dwFileType;             
    BYTE        pChecksum[16];          
    BYTE        pServiceChecksum[16];   
    DWORD       dwLanguageNameOffset;   
    DWORD       dwTypeIDMainSize;       
    DWORD       dwTypeIDMainOffset;     
    DWORD       dwTypeNameMainOffset;   
    DWORD       dwTypeIDMUISize;        
    DWORD       dwTypeIDMUIOffset;      
    DWORD       dwTypeNameMUIOffset;    
    BYTE        abBuffer[8];             
} FILEMUIINFO, *PFILEMUIINFO;


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\stringapiset.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\stringapiset.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\stringapiset.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\stringapiset.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\stringapiset.h"









#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\stringapiset.h"


extern "C" {
#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\stringapiset.h"




#pragma region Application Family



__declspec(dllimport)
int
__stdcall
CompareStringEx(
      LPCWSTR lpLocaleName,
      DWORD dwCmpFlags,
      LPCWCH lpString1,
      int cchCount1,
      LPCWCH lpString2,
      int cchCount2,
      LPNLSVERSIONINFO lpVersionInformation,
      LPVOID lpReserved,
      LPARAM lParam
    );


__declspec(dllimport)
int
__stdcall
CompareStringOrdinal(
      LPCWCH lpString1,
      int cchCount1,
      LPCWCH lpString2,
      int cchCount2,
      BOOL bIgnoreCase
    );


#line 72 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\stringapiset.h"
#pragma endregion

#line 75 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\stringapiset.h"

#pragma region Desktop Family



__declspec(dllimport)
int
__stdcall
CompareStringW(
      LCID Locale,
      DWORD dwCmpFlags,
      PCNZWCH lpString1,
      int cchCount1,
      PCNZWCH lpString2,
      int cchCount2
    );





__declspec(dllimport)
int
__stdcall
FoldStringW(
      DWORD dwMapFlags,
      LPCWCH lpSrcStr,
      int cchSrc,
      LPWSTR lpDestStr,
      int cchDest
    );





#line 112 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\stringapiset.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExW(
      LCID Locale,
      DWORD dwInfoType,
      LPCWCH lpSrcStr,
      int cchSrc,
      LPWORD lpCharType
    );





__declspec(dllimport)
BOOL
__stdcall
GetStringTypeW(
      DWORD dwInfoType,
      LPCWCH lpSrcStr,
      int cchSrc,
      LPWORD lpCharType
    );







__declspec(dllimport)
 
         
int
__stdcall
MultiByteToWideChar(
      UINT CodePage,
      DWORD dwFlags,
      LPCCH lpMultiByteStr,
      int cbMultiByte,
      LPWSTR lpWideCharStr,
      int cchWideChar
    );


__declspec(dllimport)
 
         
int
__stdcall
WideCharToMultiByte(
      UINT CodePage,
      DWORD dwFlags,
      LPCWCH lpWideCharStr,
      int cchWideChar,
      LPSTR lpMultiByteStr,
      int cbMultiByte,
      LPCCH lpDefaultChar,
      LPBOOL lpUsedDefaultChar
    );


#line 182 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\stringapiset.h"
#pragma endregion


}
#line 187 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\stringapiset.h"


#line 190 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\stringapiset.h"
#line 1277 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#line 1278 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
































































__declspec(dllimport)
BOOL
__stdcall
IsValidCodePage(
      UINT  CodePage);

#line 1349 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
UINT
__stdcall
GetACP(void);

__declspec(dllimport)
UINT
__stdcall
GetOEMCP(void);

#line 1365 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
BOOL
__stdcall
GetCPInfo(
      UINT       CodePage,
      LPCPINFO  lpCPInfo);

__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExA(
      UINT          CodePage,
      DWORD         dwFlags,
      LPCPINFOEXA  lpCPInfoEx);
__declspec(dllimport)
BOOL
__stdcall
GetCPInfoExW(
      UINT          CodePage,
      DWORD         dwFlags,
      LPCPINFOEXW  lpCPInfoEx);




#line 1396 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

#line 1398 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family







__declspec(dllimport)
int
__stdcall
CompareStringA(
      LCID     Locale,
      DWORD    dwCmpFlags,
      PCNZCH lpString1,
      int      cchCount1,
      PCNZCH  lpString2,
      int      cchCount2);



#line 1422 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



























#line 1450 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"




__declspec(dllimport)
int
__stdcall
FindNLSString(
                         LCID Locale,
                         DWORD dwFindNLSStringFlags,
       LPCWSTR lpStringSource,
                         int cchSource,
        LPCWSTR lpStringValue,
                         int cchValue,
                    LPINT pcchFound);

#line 1467 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


__declspec(dllimport)
int
__stdcall
LCMapStringW(
      LCID     Locale,
      DWORD    dwMapFlags,
      LPCWSTR  lpSrcStr,
      int      cchSrc,
      LPWSTR  lpDestStr,
      int      cchDest);




__declspec(dllimport)
int
__stdcall
LCMapStringA(
      LCID     Locale,
      DWORD    dwMapFlags,
      LPCSTR  lpSrcStr,
      int      cchSrc,
      LPSTR  lpDestStr,
      int      cchDest);


#line 1496 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



__declspec(dllimport)
int
__stdcall
GetLocaleInfoW(
      LCID     Locale,
      LCTYPE   LCType,
      LPWSTR lpLCData,
      int      cchData);
    




__declspec(dllimport)
int 
__stdcall 
GetLocaleInfoA(
      LCID Locale,
      LCTYPE LCType,
      LPSTR lpLCData,
      int cchData
    );



#line 1525 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoA(
      LCID     Locale,
      LCTYPE   LCType,
      LPCSTR  lpLCData);
__declspec(dllimport)
BOOL
__stdcall
SetLocaleInfoW(
      LCID     Locale,
      LCTYPE   LCType,
      LPCWSTR  lpLCData);




#line 1545 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"




__declspec(dllimport)
int
__stdcall
GetCalendarInfoA(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPSTR   lpCalData,
      int      cchData,
      LPDWORD  lpValue);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoW(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPWSTR   lpCalData,
      int      cchData,
      LPDWORD  lpValue);




#line 1575 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoA(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPCSTR  lpCalData);
__declspec(dllimport)
BOOL
__stdcall
SetCalendarInfoW(
      LCID     Locale,
      CALID    Calendar,
      CALTYPE  CalType,
      LPCWSTR  lpCalData);




#line 1597 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#line 1598 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"










        
__declspec(dllimport)                                
BOOL                                      
__stdcall                                    
LoadStringByReference(                    
            DWORD   Flags,             
            PCWSTR  Language,      
            PCWSTR  SourceString,      
        PWSTR   Buffer,     
            ULONG  cchBuffer,                      
        PCWSTR  Directory,                     
       PULONG  pcchBufferOut                  
    );                                                
#line 1622 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


__declspec(dllimport)         
BOOL               
__stdcall             
IsDBCSLeadByte(    
      BYTE  TestChar 
    );

__declspec(dllimport)
BOOL
__stdcall
IsDBCSLeadByteEx(
      UINT  CodePage,
      BYTE  TestChar
    );

#line 1640 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#pragma endregion

#pragma region Application Family



__declspec(dllimport)
int
__stdcall
LCIDToLocaleName(
      LCID     Locale,
      LPWSTR  lpName,
      int      cchName,
      DWORD    dwFlags);

__declspec(dllimport)
LCID
__stdcall
LocaleNameToLCID(
      LPCWSTR lpName,
      DWORD dwFlags);

#line 1663 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

#line 1665 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family




__declspec(dllimport)
int
__stdcall
GetDurationFormat(
      LCID             Locale,
      DWORD            dwFlags,
      const SYSTEMTIME *lpDuration,
      ULONGLONG ullDuration,
      LPCWSTR          lpFormat,
      LPWSTR          lpDurationStr,
      int              cchDuration);
#line 1684 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


__declspec(dllimport)
int
__stdcall
GetNumberFormatA(
      LCID             Locale,
      DWORD            dwFlags,
      LPCSTR          lpValue,
      const NUMBERFMTA *lpFormat,
      LPSTR          lpNumberStr,
      int              cchNumber);

__declspec(dllimport)
int
__stdcall
GetNumberFormatW(
      LCID             Locale,
      DWORD            dwFlags,
      LPCWSTR          lpValue,
      const NUMBERFMTW *lpFormat,
      LPWSTR          lpNumberStr,
      int              cchNumber);




#line 1712 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


__declspec(dllimport)
int
__stdcall
GetCurrencyFormatA(
      LCID               Locale,
      DWORD              dwFlags,
      LPCSTR            lpValue,
      const CURRENCYFMTA *lpFormat,
      LPSTR            lpCurrencyStr,
      int                cchCurrency);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatW(
      LCID               Locale,
      DWORD              dwFlags,
      LPCWSTR            lpValue,
      const CURRENCYFMTW *lpFormat,
      LPWSTR            lpCurrencyStr,
      int                cchCurrency);




#line 1740 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoA(
      CALINFO_ENUMPROCA lpCalInfoEnumProc,
      LCID              Locale,
      CALID             Calendar,
      CALTYPE           CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoW(
      CALINFO_ENUMPROCW lpCalInfoEnumProc,
      LCID              Locale,
      CALID             Calendar,
      CALTYPE           CalType);




#line 1764 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExA(
      CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,
      LCID                Locale,
      CALID               Calendar,
      CALTYPE             CalType);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExW(
      CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,
      LCID                Locale,
      CALID               Calendar,
      CALTYPE             CalType);




#line 1789 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#line 1790 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsA(
      TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsW(
      TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);




#line 1812 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsA(
      DATEFMT_ENUMPROCA lpDateFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsW(
      DATEFMT_ENUMPROCW lpDateFmtEnumProc,
      LCID              Locale,
      DWORD             dwFlags);




#line 1834 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExA(
      DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,
      LCID                Locale,
      DWORD               dwFlags);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExW(
      DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,
      LCID                Locale,
      DWORD               dwFlags);




#line 1857 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#line 1858 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
IsValidLanguageGroup(
      LGRPID  LanguageGroup,
      DWORD   dwFlags);
#line 1867 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
GetNLSVersion(
         NLS_FUNCTION     Function,
         LCID             Locale,
      LPNLSVERSIONINFO lpVersionInformation);

__declspec(dllimport)
BOOL
__stdcall
IsNLSDefinedString(
      NLS_FUNCTION     Function,
      DWORD            dwFlags,
      LPNLSVERSIONINFO lpVersionInformation,
      LPCWSTR          lpString,
      INT              cchStr);


__declspec(dllimport)
BOOL
__stdcall
IsValidLocale(
      LCID   Locale,
      DWORD  dwFlags);

#line 1896 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
int
__stdcall
GetGeoInfoA(
      GEOID       Location,
      GEOTYPE     GeoType,
      LPSTR     lpGeoData,
      int         cchData,
      LANGID      LangId);
__declspec(dllimport)
int
__stdcall
GetGeoInfoW(
      GEOID       Location,
      GEOTYPE     GeoType,
      LPWSTR     lpGeoData,
      int         cchData,
      LANGID      LangId);




#line 1924 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumSystemGeoID(
      GEOCLASS        GeoClass,
      GEOID           ParentGeoId,
      GEO_ENUMPROC    lpGeoEnumProc);

__declspec(dllimport)
GEOID
__stdcall
GetUserGeoID(
      GEOCLASS    GeoClass);

#line 1940 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
BOOL
__stdcall
SetUserGeoID(
      GEOID       GeoId);

__declspec(dllimport)
LCID
__stdcall
ConvertDefaultLocale(
      LCID   Locale);

__declspec(dllimport)
LCID
__stdcall
GetThreadLocale(void);

__declspec(dllimport)
BOOL
__stdcall
SetThreadLocale(
      LCID  Locale
    );


__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultUILanguage(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultUILanguage(void);
#line 1980 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

__declspec(dllimport)
LANGID
__stdcall
GetSystemDefaultLangID(void);

__declspec(dllimport)
LANGID
__stdcall
GetUserDefaultLangID(void);

__declspec(dllimport)
LCID
__stdcall
GetSystemDefaultLCID(void);

__declspec(dllimport)
LCID
__stdcall
GetUserDefaultLCID(void);


__declspec(dllimport)
LANGID
__stdcall
SetThreadUILanguage(  LANGID LangId);




__declspec(dllimport)
LANGID
__stdcall
GetThreadUILanguage(void);

__declspec(dllimport)
BOOL
__stdcall
GetProcessPreferredUILanguages(
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetProcessPreferredUILanguages(
             DWORD dwFlags,
         PCZZWSTR pwszLanguagesBuffer,
        PULONG pulNumLanguages
);

__declspec(dllimport)
BOOL
__stdcall
GetUserPreferredUILanguages (
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetSystemPreferredUILanguages (
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
GetThreadPreferredUILanguages(
      DWORD dwFlags,
      PULONG pulNumLanguages,
      PZZWSTR pwszLanguagesBuffer,
      PULONG pcchLanguagesBuffer
);


__declspec(dllimport)
BOOL
__stdcall
SetThreadPreferredUILanguages(
             DWORD dwFlags,
         PCZZWSTR pwszLanguagesBuffer,
        PULONG pulNumLanguages
);

__declspec(dllimport)
 
BOOL
__stdcall
GetFileMUIInfo(
                        DWORD           dwFlags,
                     PCWSTR          pcwszFilePath,
      PFILEMUIINFO    pFileMUIInfo,
                  DWORD*          pcbFileMUIInfo);

__declspec(dllimport)
BOOL
__stdcall
GetFileMUIPath(
      DWORD      dwFlags,
      PCWSTR     pcwszFilePath ,
        PWSTR pwszLanguage,
      PULONG  pcchLanguage,
      PWSTR pwszFileMUIPath,
              PULONG pcchFileMUIPath,
              PULONGLONG pululEnumerator
);


__declspec(dllimport)
BOOL
__stdcall
GetUILanguageInfo(
      DWORD dwFlags,
      PCZZWSTR pwmszLanguage,
      PZZWSTR pwszFallbackLanguages,
      PDWORD pcchFallbackLanguages,
      PDWORD pAttributes
);


__declspec(dllimport)
BOOL
__stdcall
NotifyUILanguageChange(
             DWORD dwFlags,
             PCWSTR pcwstrNewLanguage,
         PCWSTR pcwstrPreviousLanguage,
             DWORD dwReserved,
        PDWORD pdwStatusRtrn
);

#line 2125 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"





__declspec(dllimport)
BOOL
__stdcall
GetStringTypeExA(
                      LCID       Locale,
                      DWORD      dwInfoType,
       LPCSTR   lpSrcStr,
                      int        cchSrc,
      LPWORD     lpCharType);


#line 2142 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"












__declspec(dllimport)
BOOL
__stdcall
GetStringTypeA(
      LCID     Locale,
      DWORD    dwInfoType,
      LPCSTR   lpSrcStr,
      int      cchSrc,
      LPWORD  lpCharType);

__declspec(dllimport)
int
__stdcall
FoldStringA(
      DWORD    dwMapFlags,
      LPCSTR  lpSrcStr,
      int      cchSrc,
      LPSTR  lpDestStr,
      int      cchDest);


#line 2176 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesA(
      LOCALE_ENUMPROCA lpLocaleEnumProc,
      DWORD            dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesW(
      LOCALE_ENUMPROCW lpLocaleEnumProc,
      DWORD            dwFlags);




#line 2196 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsA(
      LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,
      DWORD                   dwFlags,
      LONG_PTR                lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemLanguageGroupsW(
      LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,
      DWORD                   dwFlags,
      LONG_PTR                lParam);




#line 2217 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesA(
      LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,
      LGRPID                    LanguageGroup,
      DWORD                     dwFlags,
      LONG_PTR                  lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumLanguageGroupLocalesW(
      LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,
      LGRPID                    LanguageGroup,
      DWORD                     dwFlags,
      LONG_PTR                  lParam);




#line 2239 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesA(
      UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,
      DWORD                dwFlags,
      LONG_PTR             lParam);
__declspec(dllimport)
BOOL
__stdcall
EnumUILanguagesW(
      UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,
      DWORD                dwFlags,
      LONG_PTR             lParam);




#line 2259 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#line 2260 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

#line 2262 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesA(
      CODEPAGE_ENUMPROCA lpCodePageEnumProc,
      DWORD              dwFlags);
__declspec(dllimport)
BOOL
__stdcall
EnumSystemCodePagesW(
      CODEPAGE_ENUMPROCW lpCodePageEnumProc,
      DWORD              dwFlags);




#line 2284 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"






__declspec(dllimport)
int
__stdcall NormalizeString(                            NORM_FORM NormForm,
                               LPCWSTR   lpSrcString,
                                                   int       cwSrcLength,
                          LPWSTR    lpDstString,
                                                   int       cwDstLength );

__declspec(dllimport)
BOOL
__stdcall IsNormalizedString(                     NORM_FORM NormForm,
                              LPCWSTR   lpString,
                                               int       cwLength );




__declspec(dllimport)
int
__stdcall IdnToAscii(                            DWORD    dwFlags,
                    	 LPCWSTR  lpUnicodeCharStr,
                                           	 int      cchUnicodeChar,
                    LPWSTR   lpASCIICharStr,
                                           	 int      cchASCIIChar);

__declspec(dllimport)
int
__stdcall IdnToNameprepUnicode(                             	DWORD   dwFlags,
                                  	LPCWSTR lpUnicodeCharStr,
                                                         	int     cchUnicodeChar,
                                LPWSTR  lpNameprepCharStr,
                                                         	int     cchNameprepChar);

__declspec(dllimport)
int
__stdcall IdnToUnicode(                          	 DWORD   dwFlags,
                         	 LPCWSTR lpASCIICharStr,
                                              	 int     cchASCIIChar,
                      LPWSTR  lpUnicodeCharStr,
                                              	 int     cchUnicodeChar);

__declspec(dllimport)
BOOL
__stdcall VerifyScripts(
         DWORD   dwFlags,            
         LPCWSTR lpLocaleScripts,    
         int     cchLocaleScripts,   
         LPCWSTR lpTestScripts,      
         int     cchTestScripts);    

__declspec(dllimport)
int
__stdcall GetStringScripts(
                                  DWORD   dwFlags,        
                                  LPCWSTR lpString,       
                                  int     cchString,      
          LPWSTR  lpScripts,      
                                  int     cchScripts);    

#line 2350 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

#line 2352 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#pragma endregion



#pragma region Application Family










__declspec(dllimport)
int
__stdcall
GetLocaleInfoEx(
      LPCWSTR lpLocaleName,
      LCTYPE LCType,
      LPWSTR lpLCData,
      int cchData
);

__declspec(dllimport)
int
__stdcall
GetCalendarInfoEx(
      LPCWSTR lpLocaleName,
      CALID Calendar,
      LPCWSTR lpReserved,
      CALTYPE CalType,
      LPWSTR lpCalData,
      int cchData,
      LPDWORD lpValue
);

__declspec(dllimport)
int
__stdcall
GetDurationFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      const SYSTEMTIME *lpDuration,
      ULONGLONG ullDuration,
      LPCWSTR lpFormat,
      LPWSTR lpDurationStr,
      int cchDuration
);

__declspec(dllimport)
int
__stdcall
GetNumberFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPCWSTR lpValue,
      const NUMBERFMTW *lpFormat,
      LPWSTR lpNumberStr,
      int cchNumber
);

__declspec(dllimport)
int
__stdcall
GetCurrencyFormatEx(
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPCWSTR lpValue,
      const CURRENCYFMTW *lpFormat,
      LPWSTR lpCurrencyStr,
      int cchCurrency
);

__declspec(dllimport)
int
__stdcall
GetUserDefaultLocaleName(
      LPWSTR lpLocaleName,
      int cchLocaleName
);

__declspec(dllimport)
int
__stdcall
GetSystemDefaultLocaleName(
      LPWSTR lpLocaleName,
      int cchLocaleName
);

__declspec(dllimport)
BOOL
__stdcall
GetNLSVersionEx(
     	    NLS_FUNCTION function,
         LPCWSTR lpLocaleName,
     	    LPNLSVERSIONINFOEX lpVersionInformation
);


__declspec(dllimport)
DWORD
__stdcall
IsValidNLSVersion(
             NLS_FUNCTION function,
         LPCWSTR lpLocaleName,
             LPNLSVERSIONINFOEX lpVersionInformation
);
#line 2462 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

__declspec(dllimport)
int
__stdcall
FindNLSStringEx(
      LPCWSTR lpLocaleName,
      DWORD dwFindNLSStringFlags,
      LPCWSTR lpStringSource,
      int cchSource,
      LPCWSTR lpStringValue,
      int cchValue,
      LPINT pcchFound,
      LPNLSVERSIONINFO lpVersionInformation,
      LPVOID lpReserved,
      LPARAM sortHandle
);





#line 2484 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"


__declspec(dllimport)
int
__stdcall
LCMapStringEx(
      LPCWSTR lpLocaleName,
      DWORD dwMapFlags,
      LPCWSTR lpSrcStr,
      int cchSrc,
      LPWSTR lpDestStr,
      int cchDest,
      LPNLSVERSIONINFO lpVersionInformation,
      LPVOID lpReserved,
      LPARAM sortHandle
);

__declspec(dllimport)
BOOL
__stdcall
IsValidLocaleName(
      LPCWSTR lpLocaleName
);

typedef BOOL (__stdcall* CALINFO_ENUMPROCEXEX)(LPWSTR, CALID, LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumCalendarInfoExEx(
      CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,
      LPCWSTR lpLocaleName,
      CALID Calendar,
      LPCWSTR lpReserved,
      CALTYPE CalType,
      LPARAM lParam
);

typedef BOOL (__stdcall* DATEFMT_ENUMPROCEXEX)(LPWSTR, CALID, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumDateFormatsExEx(
      DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPARAM lParam
);

typedef BOOL (__stdcall* TIMEFMT_ENUMPROCEX)(LPWSTR, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumTimeFormatsEx(
      TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,
      LPCWSTR lpLocaleName,
      DWORD dwFlags,
      LPARAM lParam
);

typedef BOOL (__stdcall* LOCALE_ENUMPROCEX)(LPWSTR, DWORD, LPARAM);

__declspec(dllimport)
BOOL
__stdcall
EnumSystemLocalesEx(
      LOCALE_ENUMPROCEX lpLocaleEnumProcEx,
      DWORD dwFlags,
      LPARAM lParam,
      LPVOID lpReserved
);

#line 2559 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#pragma endregion

#line 2562 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



#pragma region Application Family


__declspec(dllimport)
int
__stdcall
ResolveLocaleName(
                             LPCWSTR lpNameToResolve,
      LPWSTR  lpLocaleName,
                                 int     cchLocaleName
);

#line 2578 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#pragma endregion

#line 2581 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

#pragma region Desktop Family


    
#line 2587 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"
#pragma endregion

#line 2590 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"



}
#line 2595 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

#line 2597 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnls.h"

#line 170 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 171 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"


























#pragma once


extern "C" {
#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"



#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

#pragma region Application Family


typedef struct _COORD {
    SHORT X;
    SHORT Y;
} COORD, *PCOORD;

#line 46 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"
#pragma endregion

#pragma region Desktop Family


typedef struct _SMALL_RECT {
    SHORT Left;
    SHORT Top;
    SHORT Right;
    SHORT Bottom;
} SMALL_RECT, *PSMALL_RECT;

#line 59 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"
#pragma endregion

#pragma region Application Family


typedef struct _KEY_EVENT_RECORD {
    BOOL bKeyDown;
    WORD wRepeatCount;
    WORD wVirtualKeyCode;
    WORD wVirtualScanCode;
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } uChar;
    DWORD dwControlKeyState;
} KEY_EVENT_RECORD, *PKEY_EVENT_RECORD;






















typedef struct _MOUSE_EVENT_RECORD {
    COORD dwMousePosition;
    DWORD dwButtonState;
    DWORD dwControlKeyState;
    DWORD dwEventFlags;
} MOUSE_EVENT_RECORD, *PMOUSE_EVENT_RECORD;




















#line 124 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

typedef struct _WINDOW_BUFFER_SIZE_RECORD {
    COORD dwSize;
} WINDOW_BUFFER_SIZE_RECORD, *PWINDOW_BUFFER_SIZE_RECORD;

typedef struct _MENU_EVENT_RECORD {
    UINT dwCommandId;
} MENU_EVENT_RECORD, *PMENU_EVENT_RECORD;

typedef struct _FOCUS_EVENT_RECORD {
    BOOL bSetFocus;
} FOCUS_EVENT_RECORD, *PFOCUS_EVENT_RECORD;

typedef struct _INPUT_RECORD {
    WORD EventType;
    union {
        KEY_EVENT_RECORD KeyEvent;
        MOUSE_EVENT_RECORD MouseEvent;
        WINDOW_BUFFER_SIZE_RECORD WindowBufferSizeEvent;
        MENU_EVENT_RECORD MenuEvent;
        FOCUS_EVENT_RECORD FocusEvent;
    } Event;
} INPUT_RECORD, *PINPUT_RECORD;

#line 149 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"
#pragma endregion











#pragma region Desktop Family


typedef struct _CHAR_INFO {
    union {
        WCHAR UnicodeChar;
        CHAR   AsciiChar;
    } Char;
    WORD Attributes;
} CHAR_INFO, *PCHAR_INFO;

#line 173 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"
#pragma endregion























#pragma region Desktop Family


typedef struct _CONSOLE_SCREEN_BUFFER_INFO {
    COORD dwSize;
    COORD dwCursorPosition;
    WORD  wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
} CONSOLE_SCREEN_BUFFER_INFO, *PCONSOLE_SCREEN_BUFFER_INFO;

typedef struct _CONSOLE_SCREEN_BUFFER_INFOEX {
    ULONG cbSize;
    COORD dwSize;
    COORD dwCursorPosition;
    WORD wAttributes;
    SMALL_RECT srWindow;
    COORD dwMaximumWindowSize;
    WORD wPopupAttributes;
    BOOL bFullscreenSupported;
    COLORREF ColorTable[16];
} CONSOLE_SCREEN_BUFFER_INFOEX, *PCONSOLE_SCREEN_BUFFER_INFOEX;

typedef struct _CONSOLE_CURSOR_INFO {
    DWORD  dwSize;
    BOOL   bVisible;
} CONSOLE_CURSOR_INFO, *PCONSOLE_CURSOR_INFO;

typedef struct _CONSOLE_FONT_INFO {
    DWORD  nFont;
    COORD  dwFontSize;
} CONSOLE_FONT_INFO, *PCONSOLE_FONT_INFO;


typedef struct _CONSOLE_FONT_INFOEX {
    ULONG cbSize;
    DWORD nFont;
    COORD dwFontSize;
    UINT FontFamily;
    UINT FontWeight;
    WCHAR FaceName[32];
} CONSOLE_FONT_INFOEX, *PCONSOLE_FONT_INFOEX;
#line 240 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"



typedef struct _CONSOLE_HISTORY_INFO {
    UINT cbSize;
    UINT HistoryBufferSize;
    UINT NumberOfHistoryBuffers;
    DWORD dwFlags;
} CONSOLE_HISTORY_INFO, *PCONSOLE_HISTORY_INFO;

#line 251 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"
#pragma endregion



#pragma region Desktop Family


typedef struct _CONSOLE_SELECTION_INFO {
    DWORD dwFlags;
    COORD dwSelectionAnchor;
    SMALL_RECT srSelection;
} CONSOLE_SELECTION_INFO, *PCONSOLE_SELECTION_INFO;

#line 265 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"
#pragma endregion










#line 277 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

#pragma region Application Family






typedef
BOOL
(__stdcall *PHANDLER_ROUTINE)(
      DWORD CtrlType
    );

#line 292 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"
#pragma endregion






























#pragma region Desktop Family






__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputW(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsRead
    );




__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputA(
      HANDLE hConsoleInput,
      const INPUT_RECORD *lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleInputW(
      HANDLE hConsoleInput,
      const INPUT_RECORD *lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsWritten
    );




#line 366 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputA(
      HANDLE hConsoleOutput,
      PCHAR_INFO lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpReadRegion
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputW(
      HANDLE hConsoleOutput,
      PCHAR_INFO lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpReadRegion
    );




#line 392 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputA(
      HANDLE hConsoleOutput,
      const CHAR_INFO *lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpWriteRegion
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputW(
      HANDLE hConsoleOutput,
      const CHAR_INFO *lpBuffer,
      COORD dwBufferSize,
      COORD dwBufferCoord,
      PSMALL_RECT lpWriteRegion
    );




#line 418 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterA(
      HANDLE hConsoleOutput,
      LPSTR lpCharacter,
      DWORD nLength,
      COORD dwReadCoord,
      LPDWORD lpNumberOfCharsRead
    );
__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputCharacterW(
      HANDLE hConsoleOutput,
      LPWSTR lpCharacter,
      DWORD nLength,
      COORD dwReadCoord,
      LPDWORD lpNumberOfCharsRead
    );




#line 444 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
ReadConsoleOutputAttribute(
      HANDLE hConsoleOutput,
      LPWORD lpAttribute,
      DWORD nLength,
      COORD dwReadCoord,
      LPDWORD lpNumberOfAttrsRead
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterA(
      HANDLE hConsoleOutput,
      LPCSTR lpCharacter,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputCharacterW(
      HANDLE hConsoleOutput,
      LPCWSTR lpCharacter,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );




#line 481 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleOutputAttribute(
      HANDLE hConsoleOutput,
      const WORD *lpAttribute,
      DWORD nLength,
      COORD dwWriteCoord,
      LPDWORD lpNumberOfAttrsWritten
    );

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterA(
      HANDLE hConsoleOutput,
      CHAR  cCharacter,
      DWORD  nLength,
      COORD  dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );
__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputCharacterW(
      HANDLE hConsoleOutput,
      WCHAR  cCharacter,
      DWORD  nLength,
      COORD  dwWriteCoord,
      LPDWORD lpNumberOfCharsWritten
    );




#line 518 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
FillConsoleOutputAttribute(
      HANDLE hConsoleOutput,
      WORD   wAttribute,
      DWORD  nLength,
      COORD  dwWriteCoord,
      LPDWORD lpNumberOfAttrsWritten
    );




__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfo(
      HANDLE hConsoleOutput,
      PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleScreenBufferInfoEx(
      HANDLE hConsoleOutput,
      PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferInfoEx(
      HANDLE hConsoleOutput,
      PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);

__declspec(dllimport)
COORD
__stdcall
GetLargestConsoleWindowSize(
      HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleCursorInfo(
      HANDLE hConsoleOutput,
      PCONSOLE_CURSOR_INFO lpConsoleCursorInfo
    );



__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFont(
      HANDLE hConsoleOutput,
      BOOL bMaximumWindow,
      PCONSOLE_FONT_INFO lpConsoleCurrentFont
    );


__declspec(dllimport)
BOOL
__stdcall
GetCurrentConsoleFontEx(
      HANDLE hConsoleOutput,
      BOOL bMaximumWindow,
      PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);

__declspec(dllimport)
BOOL
__stdcall
SetCurrentConsoleFontEx(
      HANDLE hConsoleOutput,
      BOOL bMaximumWindow,
      PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);
#line 598 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
GetConsoleHistoryInfo(
      PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
BOOL
__stdcall
SetConsoleHistoryInfo(
      PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);

__declspec(dllimport)
COORD
__stdcall
GetConsoleFontSize(
      HANDLE hConsoleOutput,
      DWORD nFont
    );

__declspec(dllimport)
BOOL
__stdcall
GetConsoleSelectionInfo(
      PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo
    );

#line 627 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleMouseButtons(
      LPDWORD lpNumberOfMouseButtons
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleActiveScreenBuffer(
      HANDLE hConsoleOutput
    );

__declspec(dllimport)
BOOL
__stdcall
FlushConsoleInputBuffer(
      HANDLE hConsoleInput
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleScreenBufferSize(
      HANDLE hConsoleOutput,
      COORD dwSize
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorPosition(
      HANDLE hConsoleOutput,
      COORD dwCursorPosition
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCursorInfo(
      HANDLE hConsoleOutput,
      const CONSOLE_CURSOR_INFO *lpConsoleCursorInfo
    );

__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferA(
      HANDLE hConsoleOutput,
      const SMALL_RECT *lpScrollRectangle,
      const SMALL_RECT *lpClipRectangle,
      COORD dwDestinationOrigin,
      const CHAR_INFO *lpFill
    );
__declspec(dllimport)
BOOL
__stdcall
ScrollConsoleScreenBufferW(
      HANDLE hConsoleOutput,
      const SMALL_RECT *lpScrollRectangle,
      const SMALL_RECT *lpClipRectangle,
      COORD dwDestinationOrigin,
      const CHAR_INFO *lpFill
    );




#line 698 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleWindowInfo(
      HANDLE hConsoleOutput,
      BOOL bAbsolute,
      const SMALL_RECT *lpConsoleWindow
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTextAttribute(
      HANDLE hConsoleOutput,
      WORD wAttributes
    );

__declspec(dllimport)
BOOL
__stdcall
GenerateConsoleCtrlEvent(
      DWORD dwCtrlEvent,
      DWORD dwProcessGroupId);

__declspec(dllimport)
BOOL
__stdcall
FreeConsole(
    void);


__declspec(dllimport)
BOOL
__stdcall
AttachConsole(
      DWORD dwProcessId);



#line 739 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleA(
      LPSTR lpConsoleTitle,
      DWORD nSize
    );
__declspec(dllimport)
DWORD
__stdcall
GetConsoleTitleW(
      LPWSTR lpConsoleTitle,
      DWORD nSize
    );




#line 759 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"


__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleA(
      LPSTR lpConsoleTitle,
      DWORD nSize);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleOriginalTitleW(
      LPWSTR lpConsoleTitle,
      DWORD nSize);




#line 778 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"
#line 779 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleA(
      LPCSTR lpConsoleTitle
    );
__declspec(dllimport)
BOOL
__stdcall
SetConsoleTitleW(
      LPCWSTR lpConsoleTitle
    );




#line 797 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

#line 799 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"
#pragma endregion

#pragma region Application Family


typedef struct _CONSOLE_READCONSOLE_CONTROL {
    ULONG nLength;
    ULONG nInitialChars;
    ULONG dwCtrlWakeupMask;
    ULONG dwControlKeyState;
} CONSOLE_READCONSOLE_CONTROL, *PCONSOLE_READCONSOLE_CONTROL;

#line 812 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"
#pragma endregion




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\consoleapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\consoleapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\consoleapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\consoleapi.h"












#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\consoleapi.h"


extern "C" {
#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\consoleapi.h"

#pragma region Desktop Family



__declspec(dllimport)
BOOL
__stdcall
AllocConsole(
    void
    );


__declspec(dllimport)
UINT
__stdcall
GetConsoleCP(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetConsoleMode(
      HANDLE hConsoleHandle,
      LPDWORD lpMode
    );


__declspec(dllimport)
UINT
__stdcall
GetConsoleOutputCP(
    void
    );


__declspec(dllimport)
BOOL
__stdcall
GetNumberOfConsoleInputEvents(
      HANDLE hConsoleInput,
      LPDWORD lpNumberOfEvents
    );


__declspec(dllimport)
BOOL
__stdcall
PeekConsoleInputA(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
      LPDWORD lpNumberOfEventsRead
    );




#line 97 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\consoleapi.h"

__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleA(
      HANDLE hConsoleInput,
      LPVOID lpBuffer,
      DWORD nNumberOfCharsToRead,
        LPDWORD lpNumberOfCharsRead,
      PCONSOLE_READCONSOLE_CONTROL pInputControl
    );

__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleW(
      HANDLE hConsoleInput,
      LPVOID lpBuffer,
      DWORD nNumberOfCharsToRead,
        LPDWORD lpNumberOfCharsRead,
      PCONSOLE_READCONSOLE_CONTROL pInputControl
    );





#line 127 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\consoleapi.h"

__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleInputA(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
        LPDWORD lpNumberOfEventsRead
    );

__declspec(dllimport)
 
BOOL
__stdcall
ReadConsoleInputW(
      HANDLE hConsoleInput,
      PINPUT_RECORD lpBuffer,
      DWORD nLength,
        LPDWORD lpNumberOfEventsRead
    );





#line 155 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\consoleapi.h"

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCtrlHandler(
      PHANDLER_ROUTINE HandlerRoutine,
      BOOL Add
    );


__declspec(dllimport)
BOOL
__stdcall
SetConsoleMode(
      HANDLE hConsoleHandle,
      DWORD dwMode
    );


__declspec(dllimport)
BOOL
__stdcall
WriteConsoleA(
      HANDLE hConsoleOutput,
      const void * lpBuffer,
      DWORD nNumberOfCharsToWrite,
      LPDWORD lpNumberOfCharsWritten,
      LPVOID lpReserved
    );

__declspec(dllimport)
BOOL
__stdcall
WriteConsoleW(
      HANDLE hConsoleOutput,
      const void * lpBuffer,
      DWORD nNumberOfCharsToWrite,
      LPDWORD lpNumberOfCharsWritten,
      LPVOID lpReserved
    );





#line 201 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\consoleapi.h"

#line 203 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\consoleapi.h"
#pragma endregion


}
#line 208 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\consoleapi.h"

#line 210 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\consoleapi.h"
#line 818 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"
#line 819 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

#pragma region Desktop Family


__declspec(dllimport)
HANDLE
__stdcall
CreateConsoleScreenBuffer(
      DWORD dwDesiredAccess,
      DWORD dwShareMode,
      const SECURITY_ATTRIBUTES *lpSecurityAttributes,
      DWORD dwFlags,
      LPVOID lpScreenBufferData
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleCP(
      UINT wCodePageID
    );

__declspec(dllimport)
BOOL
__stdcall
SetConsoleOutputCP(
      UINT wCodePageID
    );






__declspec(dllimport)
BOOL
__stdcall
GetConsoleDisplayMode(
      LPDWORD lpModeFlags);




BOOL
__stdcall
SetConsoleDisplayMode(
      HANDLE hConsoleOutput,
      DWORD dwFlags,
      PCOORD lpNewScreenBufferDimensions);

__declspec(dllimport)
HWND
__stdcall
GetConsoleWindow(
    void
    );

#line 877 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"



__declspec(dllimport)
DWORD
__stdcall
GetConsoleProcessList(
      LPDWORD lpdwProcessList,
      DWORD dwProcessCount);





__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasA(
      LPSTR Source,
      LPSTR Target,
      LPSTR ExeName);
__declspec(dllimport)
BOOL
__stdcall
AddConsoleAliasW(
      LPWSTR Source,
      LPWSTR Target,
      LPWSTR ExeName);




#line 910 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasA(
      LPSTR Source,
      LPSTR TargetBuffer,
      DWORD TargetBufferLength,
      LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasW(
      LPWSTR Source,
      LPWSTR TargetBuffer,
      DWORD TargetBufferLength,
      LPWSTR ExeName);




#line 932 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthA(
      LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesLengthW(
      LPWSTR ExeName);




#line 948 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthA(
    void);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesLengthW(
    void);




#line 964 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesA(
      LPSTR AliasBuffer,
      DWORD AliasBufferLength,
      LPSTR ExeName);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasesW(
      LPWSTR AliasBuffer,
      DWORD AliasBufferLength,
      LPWSTR ExeName);




#line 984 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesA(
      LPSTR ExeNameBuffer,
      DWORD ExeNameBufferLength);
__declspec(dllimport)
DWORD
__stdcall
GetConsoleAliasExesW(
      LPWSTR ExeNameBuffer,
      DWORD ExeNameBufferLength);




#line 1002 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

#line 1004 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

#line 1006 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"
#pragma endregion



}
#line 1012 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

#line 1014 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincon.h"

#line 173 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"


















#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\verrsrc.h"












#pragma region Application Family












#line 27 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\verrsrc.h"




























































#line 88 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\verrsrc.h"
#pragma endregion

#pragma region Desktop Family










































extern "C" {
#line 135 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\verrsrc.h"
    











typedef struct tagVS_FIXEDFILEINFO
{
    DWORD   dwSignature;            
    DWORD   dwStrucVersion;         
    DWORD   dwFileVersionMS;        
    DWORD   dwFileVersionLS;        
    DWORD   dwProductVersionMS;     
    DWORD   dwProductVersionLS;     
    DWORD   dwFileFlagsMask;        
    DWORD   dwFileFlags;            
    DWORD   dwFileOS;               
    DWORD   dwFileType;             
    DWORD   dwFileSubtype;          
    DWORD   dwFileDateMS;           
    DWORD   dwFileDateLS;           
} VS_FIXEDFILEINFO;


}
#line 167 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\verrsrc.h"

#line 169 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\verrsrc.h"

#line 171 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\verrsrc.h"
#pragma endregion

#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"



extern "C" {
#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"

#pragma region Desktop Family







DWORD
__stdcall
VerFindFileA(
                                  DWORD uFlags,
                                  LPCSTR szFileName,
                              LPCSTR szWinDir,
                                  LPCSTR szAppDir,
            LPSTR szCurDir,
                               PUINT puCurDirLen,
           LPSTR szDestDir,
                               PUINT puDestDirLen
        );
DWORD
__stdcall
VerFindFileW(
                                  DWORD uFlags,
                                  LPCWSTR szFileName,
                              LPCWSTR szWinDir,
                                  LPCWSTR szAppDir,
            LPWSTR szCurDir,
                               PUINT puCurDirLen,
           LPWSTR szDestDir,
                               PUINT puDestDirLen
        );




#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"

DWORD
__stdcall
VerInstallFileA(
                                  DWORD uFlags,
                                  LPCSTR szSrcFileName,
                                  LPCSTR szDestFileName,
                                  LPCSTR szSrcDir,
                                  LPCSTR szDestDir,
                                  LPCSTR szCurDir,
           LPSTR szTmpFile,
                               PUINT puTmpFileLen
        );
DWORD
__stdcall
VerInstallFileW(
                                  DWORD uFlags,
                                  LPCWSTR szSrcFileName,
                                  LPCWSTR szDestFileName,
                                  LPCWSTR szSrcDir,
                                  LPCWSTR szDestDir,
                                  LPCWSTR szCurDir,
           LPWSTR szTmpFile,
                               PUINT puTmpFileLen
        );




#line 93 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"


DWORD
__stdcall
GetFileVersionInfoSizeA(
                 LPCSTR lptstrFilename, 
          LPDWORD lpdwHandle       
        );

DWORD
__stdcall
GetFileVersionInfoSizeW(
                 LPCWSTR lptstrFilename, 
          LPDWORD lpdwHandle       
        );




#line 113 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"


BOOL
__stdcall
GetFileVersionInfoA(
                         LPCSTR lptstrFilename, 
                   DWORD dwHandle,          
                         DWORD dwLen,             
          LPVOID lpData            
        );

BOOL
__stdcall
GetFileVersionInfoW(
                         LPCWSTR lptstrFilename, 
                   DWORD dwHandle,          
                         DWORD dwLen,             
          LPVOID lpData            
        );




#line 137 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"

DWORD __stdcall GetFileVersionInfoSizeExA(  DWORD dwFlags,   LPCSTR lpwstrFilename,   LPDWORD lpdwHandle);
DWORD __stdcall GetFileVersionInfoSizeExW(  DWORD dwFlags,   LPCWSTR lpwstrFilename,   LPDWORD lpdwHandle);




#line 145 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"

BOOL __stdcall GetFileVersionInfoExA(  DWORD dwFlags,
                                      LPCSTR lpwstrFilename,
                                      DWORD dwHandle,
                                      DWORD dwLen,
                                      LPVOID lpData);
BOOL __stdcall GetFileVersionInfoExW(  DWORD dwFlags,
                                      LPCWSTR lpwstrFilename,
                                      DWORD dwHandle,
                                      DWORD dwLen,
                                      LPVOID lpData);




#line 161 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"


DWORD
__stdcall
VerLanguageNameA(
                           DWORD wLang,
          LPSTR szLang,
                           DWORD cchLang
        );
DWORD
__stdcall
VerLanguageNameW(
                           DWORD wLang,
          LPWSTR szLang,
                           DWORD cchLang
        );




#line 182 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"

BOOL
__stdcall
VerQueryValueA(
          LPCVOID pBlock,
          LPCSTR lpSubBlock,
         LPVOID * lplpBuffer,
          PUINT puLen
        );
BOOL
__stdcall
VerQueryValueW(
          LPCVOID pBlock,
          LPCWSTR lpSubBlock,
         LPVOID * lplpBuffer,
          PUINT puLen
        );




#line 204 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"


#line 207 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"

#line 209 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"
#pragma endregion


}
#line 214 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"


#line 217 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winver.h"

#line 174 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 175 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"
 




















#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 23 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 24 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"











#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"








extern "C" {
#line 46 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

#pragma region Desktop Family









































typedef ACCESS_MASK REGSAM;





























struct val_context {
    int valuelen;       
    LPVOID value_context;   
    LPVOID val_buff_ptr;    
};

typedef struct val_context  *PVALCONTEXT;

typedef struct pvalueA {           
    LPSTR   pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEA,  *PPVALUEA;
typedef struct pvalueW {           
    LPWSTR  pv_valuename;          
    int pv_valuelen;
    LPVOID pv_value_context;
    DWORD pv_type;
}PVALUEW,  *PPVALUEW;




typedef PVALUEA PVALUE;
typedef PPVALUEA PPVALUE;
#line 146 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

typedef
DWORD __cdecl
QUERYHANDLER (LPVOID keycontext, PVALCONTEXT val_list, DWORD num_vals,
          LPVOID outputbuffer, DWORD  *total_outlen, DWORD input_blen);

typedef QUERYHANDLER  *PQUERYHANDLER;

typedef struct provider_info {
    PQUERYHANDLER pi_R0_1val;
    PQUERYHANDLER pi_R0_allvals;
    PQUERYHANDLER pi_R3_1val;
    PQUERYHANDLER pi_R3_allvals;
    DWORD pi_flags;    
    LPVOID pi_key_context;
}REG_PROVIDER;

typedef struct provider_info  *PPROVIDER;

typedef struct value_entA {
    LPSTR   ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTA,  *PVALENTA;
typedef struct value_entW {
    LPWSTR  ve_valuename;
    DWORD ve_valuelen;
    DWORD_PTR ve_valueptr;
    DWORD ve_type;
}VALENTW,  *PVALENTW;




typedef VALENTA VALENT;
typedef PVALENTA PVALENT;
#line 184 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

#line 186 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"


#line 189 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"












typedef   LONG LSTATUS;

__declspec(dllimport)
LSTATUS
__stdcall
RegCloseKey(
      HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOverridePredefKey (
      HKEY hKey,
      HKEY hNewHKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenUserClassesRoot(
      HANDLE hToken,
      DWORD dwOptions,
      REGSAM samDesired,
      PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenCurrentUser(
      REGSAM samDesired,
      PHKEY phkResult
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCache(
    void
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDisablePredefinedCacheEx(
    void
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryA (
      LPCSTR lpMachineName,
      HKEY hKey,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryW (
      LPCWSTR lpMachineName,
      HKEY hKey,
      PHKEY phkResult
    );




#line 275 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExA (
      LPCSTR lpMachineName,
      HKEY hKey,
      ULONG Flags,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegConnectRegistryExW (
      LPCWSTR lpMachineName,
      HKEY hKey,
      ULONG Flags,
      PHKEY phkResult
    );




#line 299 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyA (
      HKEY hKey,
      LPCSTR lpSubKey,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      PHKEY phkResult
    );




#line 321 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExA(
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD Reserved,
      LPSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyExW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD Reserved,
      LPWSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition
    );





#line 357 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedA (
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD Reserved,
      LPSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegCreateKeyTransactedW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD Reserved,
      LPWSTR lpClass,
      DWORD dwOptions,
      REGSAM samDesired,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      PHKEY phkResult,
      LPDWORD lpdwDisposition,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );




#line 395 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyA (
      HKEY hKey,
      LPCSTR lpSubKey
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey
    );




#line 415 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExA(
      HKEY hKey,
      LPCSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyExW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved
    );





#line 441 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedA (
      HKEY hKey,
      LPCSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved,
             HANDLE hTransaction,
      PVOID  pExtendedParameter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyTransactedW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      REGSAM samDesired,
      DWORD Reserved,
             HANDLE hTransaction,
      PVOID  pExtendedParameter
    );




#line 469 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LONG
__stdcall
RegDisableReflectionKey (
      HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegEnableReflectionKey (
      HKEY hBase
    );

__declspec(dllimport)
LONG
__stdcall
RegQueryReflectionKey (
      HKEY hBase,
      BOOL *bIsReflectionDisabled
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueA(
      HKEY hKey,
      LPCSTR lpValueName
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteValueW(
      HKEY hKey,
      LPCWSTR lpValueName
    );





#line 513 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyA (
      HKEY hKey,
      DWORD dwIndex,
      LPSTR lpName,
      DWORD cchName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyW (
      HKEY hKey,
      DWORD dwIndex,
      LPWSTR lpName,
      DWORD cchName
    );




#line 537 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExA(
      HKEY hKey,
      DWORD dwIndex,
      LPSTR lpName,
      LPDWORD lpcchName,
      LPDWORD lpReserved,
      LPSTR lpClass,
      LPDWORD lpcchClass,
      PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumKeyExW(
      HKEY hKey,
      DWORD dwIndex,
      LPWSTR lpName,
      LPDWORD lpcchName,
      LPDWORD lpReserved,
      LPWSTR lpClass,
      LPDWORD lpcchClass,
      PFILETIME lpftLastWriteTime
    );





#line 571 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueA(
      HKEY hKey,
      DWORD dwIndex,
      LPSTR lpValueName,
      LPDWORD lpcchValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
      LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegEnumValueW(
      HKEY hKey,
      DWORD dwIndex,
      LPWSTR lpValueName,
      LPDWORD lpcchValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
      LPDWORD lpcbData
    );





#line 605 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegFlushKey(
      HKEY hKey
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegGetKeySecurity(
      HKEY hKey,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor,
      LPDWORD lpcbSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyA(
      HKEY hKey,
      LPCSTR lpSubKey,
      LPCSTR lpFile
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadKeyW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      LPCWSTR lpFile
    );





#line 648 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegNotifyChangeKeyValue(
      HKEY hKey,
      BOOL bWatchSubtree,
      DWORD dwNotifyFilter,
      HANDLE hEvent,
      BOOL fAsynchronous
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyA (
      HKEY hKey,
      LPCSTR lpSubKey,
      PHKEY phkResult
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      PHKEY phkResult
    );




#line 682 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExA(
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyExW(
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult
    );





#line 710 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedA (
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegOpenKeyTransactedW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD ulOptions,
      REGSAM samDesired,
      PHKEY phkResult,
             HANDLE hTransaction,
      PVOID  pExtendedParemeter
    );




#line 740 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyA(
      HKEY hKey,
      LPSTR lpClass,
      LPDWORD lpcchClass,
      LPDWORD lpReserved,
      LPDWORD lpcSubKeys,
      LPDWORD lpcbMaxSubKeyLen,
      LPDWORD lpcbMaxClassLen,
      LPDWORD lpcValues,
      LPDWORD lpcbMaxValueNameLen,
      LPDWORD lpcbMaxValueLen,
      LPDWORD lpcbSecurityDescriptor,
      PFILETIME lpftLastWriteTime
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryInfoKeyW(
      HKEY hKey,
      LPWSTR lpClass,
      LPDWORD lpcchClass,
      LPDWORD lpReserved,
      LPDWORD lpcSubKeys,
      LPDWORD lpcbMaxSubKeyLen,
      LPDWORD lpcbMaxClassLen,
      LPDWORD lpcValues,
      LPDWORD lpcbMaxValueNameLen,
      LPDWORD lpcbMaxValueLen,
      LPDWORD lpcbSecurityDescriptor,
      PFILETIME lpftLastWriteTime
    );





#line 782 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueA (
      HKEY hKey,
      LPCSTR lpSubKey,
       LPSTR lpData,
      PLONG lpcbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueW (
      HKEY hKey,
      LPCWSTR lpSubKey,
       LPWSTR lpData,
      PLONG lpcbData
    );




#line 806 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"




__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesA (
      HKEY hKey,
      PVALENTA val_list,
      DWORD num_vals,
       LPSTR lpValueBuf,
      LPDWORD ldwTotsize
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegQueryMultipleValuesW (
      HKEY hKey,
      PVALENTW val_list,
      DWORD num_vals,
       LPWSTR lpValueBuf,
      LPDWORD ldwTotsize
    );




#line 835 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"
#line 836 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExA(
      HKEY hKey,
      LPCSTR lpValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
    
              LPDWORD lpcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegQueryValueExW(
      HKEY hKey,
      LPCWSTR lpValueName,
      LPDWORD lpReserved,
      LPDWORD lpType,
       LPBYTE lpData,
    
              LPDWORD lpcbData
    );





#line 868 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyA (
      HKEY hKey,
      LPCSTR lpSubKey,
      LPCSTR lpNewFile,
      LPCSTR lpOldFile
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegReplaceKeyW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      LPCWSTR lpNewFile,
      LPCWSTR lpOldFile
    );




#line 892 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyA(
      HKEY hKey,
      LPCSTR lpFile,
      DWORD dwFlags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegRestoreKeyW(
      HKEY hKey,
      LPCWSTR lpFile,
      DWORD dwFlags
    );





#line 916 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"




__declspec(dllimport)
LSTATUS
__stdcall
RegRenameKey(
      HKEY hKey,
      LPCWSTR lpSubKeyName,
      LPCWSTR lpNewKeyName
    );

#line 930 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyA (
      HKEY hKey,
      LPCSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyW (
      HKEY hKey,
      LPCWSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes
    );




#line 952 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeySecurity(
      HKEY hKey,
      SECURITY_INFORMATION SecurityInformation,
      PSECURITY_DESCRIPTOR pSecurityDescriptor
    );


__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueA (
      HKEY hKey,
      LPCSTR lpSubKey,
      DWORD dwType,
      LPCSTR lpData,
      DWORD cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueW (
      HKEY hKey,
      LPCWSTR lpSubKey,
      DWORD dwType,
      LPCWSTR lpData,
      DWORD cbData
    );




#line 988 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExA(
      HKEY hKey,
      LPCSTR lpValueName,
      DWORD Reserved,
      DWORD dwType,
      const BYTE * lpData,
      DWORD cbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSetValueExW(
      HKEY hKey,
      LPCWSTR lpValueName,
      DWORD Reserved,
      DWORD dwType,
      const BYTE * lpData,
      DWORD cbData
    );





#line 1018 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyA(
      HKEY hKey,
      LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegUnLoadKeyW(
      HKEY hKey,
      LPCWSTR lpSubKey
    );





#line 1040 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"







__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueA (
           HKEY     hKey,
       LPCSTR lpSubKey,
       LPCSTR lpValueName
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteKeyValueW (
           HKEY     hKey,
       LPCWSTR lpSubKey,
       LPCWSTR lpValueName
    );




#line 1068 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueA (
             HKEY     hKey,
         LPCSTR  lpSubKey,
         LPCSTR  lpValueName,
             DWORD    dwType,
      LPCVOID  lpData,
             DWORD    cbData
    );
__declspec(dllimport)
LSTATUS
__stdcall
RegSetKeyValueW (
             HKEY     hKey,
         LPCWSTR  lpSubKey,
         LPCWSTR  lpValueName,
             DWORD    dwType,
      LPCVOID  lpData,
             DWORD    cbData
    );




#line 1096 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeA(
      HKEY hKey,
      LPCSTR lpSubKey
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegDeleteTreeW(
      HKEY hKey,
      LPCWSTR lpSubKey
    );





#line 1118 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeA (
             HKEY     hKeySrc,
         LPCSTR  lpSubKey,
             HKEY     hKeyDest
    );


#line 1130 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"




__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueA(
      HKEY hkey,
      LPCSTR lpSubKey,
      LPCSTR lpValue,
      DWORD dwFlags,
      LPDWORD pdwType,
    
#line 1148 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"
	
#line 1150 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"
      PVOID pvData,
      LPDWORD pcbData
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegGetValueW(
      HKEY hkey,
      LPCWSTR lpSubKey,
      LPCWSTR lpValue,
      DWORD dwFlags,
      LPDWORD pdwType,
    
#line 1168 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"
	
#line 1170 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"
      PVOID pvData,
      LPDWORD pcbData
    );





#line 1179 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

#line 1181 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"




__declspec(dllimport)
LSTATUS
__stdcall
RegCopyTreeW(
      HKEY hKeySrc,
      LPCWSTR lpSubKey,
      HKEY hKeyDest
    );




#line 1198 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringA(
      HKEY hKey,
      LPCSTR pszValue,
      LPSTR pszOutBuf,
      DWORD cbOutBuf,
      LPDWORD pcbData,
      DWORD Flags,
      LPCSTR pszDirectory
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadMUIStringW(
      HKEY hKey,
      LPCWSTR pszValue,
      LPWSTR pszOutBuf,
      DWORD cbOutBuf,
      LPDWORD pcbData,
      DWORD Flags,
      LPCWSTR pszDirectory
    );





#line 1230 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyA(
      LPCSTR lpFile,
      PHKEY phkResult,
      REGSAM samDesired,
      DWORD dwOptions,
      DWORD Reserved
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegLoadAppKeyW(
      LPCWSTR lpFile,
      PHKEY phkResult,
      REGSAM samDesired,
      DWORD dwOptions,
      DWORD Reserved
    );





#line 1258 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

#line 1260 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"





 
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownA(
      LPSTR lpMachineName,
      LPSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown
    );
 
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownW(
      LPWSTR lpMachineName,
      LPWSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown
    );




#line 1292 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"


__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownA(
      LPSTR lpMachineName
    );
__declspec(dllimport)
BOOL
__stdcall
AbortSystemShutdownW(
      LPWSTR lpMachineName
    );




#line 1311 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"





#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\reason.h"
















#pragma once

#pragma region Desktop Family






































































































#line 123 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\reason.h"
#pragma endregion

#line 126 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\reason.h"
#line 1317 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"


















 

#line 1338 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExA(
      LPSTR lpMachineName,
      LPSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown,
      DWORD dwReason
    );
 

#line 1352 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"
__declspec(dllimport)
BOOL
__stdcall
InitiateSystemShutdownExW(
      LPWSTR lpMachineName,
      LPWSTR lpMessage,
      DWORD dwTimeout,
      BOOL bForceAppsClosed,
      BOOL bRebootAfterShutdown,
      DWORD dwReason
    );




#line 1368 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

















__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownA(
      LPSTR lpMachineName,
      LPSTR lpMessage,
          DWORD dwGracePeriod,
          DWORD dwShutdownFlags,
          DWORD dwReason
    );
__declspec(dllimport)
DWORD
__stdcall
InitiateShutdownW(
      LPWSTR lpMachineName,
      LPWSTR lpMessage,
          DWORD dwGracePeriod,
          DWORD dwShutdownFlags,
          DWORD dwReason
    );




#line 1410 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"

__declspec(dllimport)
DWORD
__stdcall
CheckForHiberboot(
      PBOOLEAN pHiberboot,
      BOOLEAN bClearFlag
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExA(
      HKEY hKey,
      LPCSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD Flags
    );

__declspec(dllimport)
LSTATUS
__stdcall
RegSaveKeyExW(
      HKEY hKey,
      LPCWSTR lpFile,
      const LPSECURITY_ATTRIBUTES lpSecurityAttributes,
      DWORD Flags
    );





#line 1444 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"


#line 1447 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"
#pragma endregion


}
#line 1452 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"


#line 1455 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winreg.h"


#line 177 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 178 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"




























#pragma once


extern "C" {
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

#pragma region Desktop Family







#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wnnc.h"



























#pragma region Desktop Family



















































































#line 113 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wnnc.h"
#pragma endregion

#line 116 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wnnc.h"



#line 44 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"











#line 56 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"






#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"









#line 73 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"













#line 87 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"



#line 91 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

typedef struct  _NETRESOURCEA {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPSTR    lpLocalName;
    LPSTR    lpRemoteName;
    LPSTR    lpComment ;
    LPSTR    lpProvider;
}NETRESOURCEA, *LPNETRESOURCEA;
typedef struct  _NETRESOURCEW {
    DWORD    dwScope;
    DWORD    dwType;
    DWORD    dwDisplayType;
    DWORD    dwUsage;
    LPWSTR   lpLocalName;
    LPWSTR   lpRemoteName;
    LPWSTR   lpComment ;
    LPWSTR   lpProvider;
}NETRESOURCEW, *LPNETRESOURCEW;




typedef NETRESOURCEA NETRESOURCE;
typedef LPNETRESOURCEA LPNETRESOURCE;
#line 119 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"





















#line 141 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"



#line 145 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"


#line 148 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetAddConnectionA(
          LPCSTR   lpRemoteName,
      LPCSTR   lpPassword,
      LPCSTR   lpLocalName
    );
 
DWORD __stdcall
WNetAddConnectionW(
          LPCWSTR   lpRemoteName,
      LPCWSTR   lpPassword,
      LPCWSTR   lpLocalName
    );




#line 168 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetAddConnection2A(
          LPNETRESOURCEA lpNetResource,
      LPCSTR       lpPassword,
      LPCSTR       lpUserName,
          DWORD          dwFlags
    );
 
DWORD __stdcall
WNetAddConnection2W(
          LPNETRESOURCEW lpNetResource,
      LPCWSTR       lpPassword,
      LPCWSTR       lpUserName,
          DWORD          dwFlags
    );




#line 190 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetAddConnection3A(
      HWND           hwndOwner,
          LPNETRESOURCEA lpNetResource,
      LPCSTR       lpPassword,
      LPCSTR       lpUserName,
          DWORD          dwFlags
    );
 
DWORD __stdcall
WNetAddConnection3W(
      HWND           hwndOwner,
          LPNETRESOURCEW lpNetResource,
      LPCWSTR       lpPassword,
      LPCWSTR       lpUserName,
          DWORD          dwFlags
    );




#line 214 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetCancelConnectionA(
      LPCSTR lpName,
      BOOL     fForce
    );
 
DWORD __stdcall
WNetCancelConnectionW(
      LPCWSTR lpName,
      BOOL     fForce
    );




#line 232 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetCancelConnection2A(
      LPCSTR lpName,
      DWORD    dwFlags,
      BOOL     fForce
    );
 
DWORD __stdcall
WNetCancelConnection2W(
      LPCWSTR lpName,
      DWORD    dwFlags,
      BOOL     fForce
    );




#line 252 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetGetConnectionA(
      LPCSTR lpLocalName,
      LPSTR  lpRemoteName,
      LPDWORD lpnLength
    );
 
DWORD __stdcall
WNetGetConnectionW(
      LPCWSTR lpLocalName,
      LPWSTR  lpRemoteName,
      LPDWORD lpnLength
    );




#line 272 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"



 
DWORD __stdcall
WNetRestoreSingleConnectionW(
      HWND    hwndParent,
          LPCWSTR lpDevice,
          BOOL    fUseUI
    );









#line 292 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"



 
DWORD __stdcall
WNetUseConnectionA(
      HWND            hwndOwner,
          LPNETRESOURCEA  lpNetResource,
      LPCSTR        lpPassword,
      LPCSTR        lpUserId,
          DWORD           dwFlags,
      LPSTR lpAccessName,
      LPDWORD lpBufferSize,
      LPDWORD   lpResult
    );
 
DWORD __stdcall
WNetUseConnectionW(
      HWND            hwndOwner,
          LPNETRESOURCEW  lpNetResource,
      LPCWSTR        lpPassword,
      LPCWSTR        lpUserId,
          DWORD           dwFlags,
      LPWSTR lpAccessName,
      LPDWORD lpBufferSize,
      LPDWORD   lpResult
    );




#line 324 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"
#line 325 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"





 
DWORD __stdcall
WNetConnectionDialog(
      HWND  hwnd,
      DWORD dwType
    );

 
DWORD __stdcall
WNetDisconnectDialog(
      HWND hwnd,
      DWORD dwType
    );


typedef struct _CONNECTDLGSTRUCTA{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEA lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTA,  *LPCONNECTDLGSTRUCTA;
typedef struct _CONNECTDLGSTRUCTW{
    DWORD cbStructure;       
    HWND hwndOwner;          
    LPNETRESOURCEW lpConnRes;
    DWORD dwFlags;           
    DWORD dwDevNum;          
} CONNECTDLGSTRUCTW,  *LPCONNECTDLGSTRUCTW;




typedef CONNECTDLGSTRUCTA CONNECTDLGSTRUCT;
typedef LPCONNECTDLGSTRUCTA LPCONNECTDLGSTRUCT;
#line 366 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"














 
DWORD __stdcall
WNetConnectionDialog1A(
      LPCONNECTDLGSTRUCTA lpConnDlgStruct
    );
 
DWORD __stdcall
WNetConnectionDialog1W(
      LPCONNECTDLGSTRUCTW lpConnDlgStruct
    );




#line 395 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

typedef struct _DISCDLGSTRUCTA{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPSTR           lpLocalName;      
    LPSTR           lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTA,  *LPDISCDLGSTRUCTA;
typedef struct _DISCDLGSTRUCTW{
    DWORD           cbStructure;      
    HWND            hwndOwner;        
    LPWSTR          lpLocalName;      
    LPWSTR          lpRemoteName;     
    DWORD           dwFlags;          
} DISCDLGSTRUCTW,  *LPDISCDLGSTRUCTW;




typedef DISCDLGSTRUCTA DISCDLGSTRUCT;
typedef LPDISCDLGSTRUCTA LPDISCDLGSTRUCT;
#line 417 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"




 
DWORD __stdcall
WNetDisconnectDialog1A(
      LPDISCDLGSTRUCTA lpConnDlgStruct
    );
 
DWORD __stdcall
WNetDisconnectDialog1W(
      LPDISCDLGSTRUCTW lpConnDlgStruct
    );




#line 436 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"
#line 437 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"





 
DWORD __stdcall
WNetOpenEnumA(
       DWORD          dwScope,
       DWORD          dwType,
       DWORD          dwUsage,
      LPNETRESOURCEA lpNetResource,
      LPHANDLE       lphEnum
    );
 
DWORD __stdcall
WNetOpenEnumW(
       DWORD          dwScope,
       DWORD          dwType,
       DWORD          dwUsage,
      LPNETRESOURCEW lpNetResource,
      LPHANDLE       lphEnum
    );




#line 465 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetEnumResourceA(
         HANDLE  hEnum,
      LPDWORD lpcCount,
      LPVOID  lpBuffer,
      LPDWORD lpBufferSize
    );
 
DWORD __stdcall
WNetEnumResourceW(
         HANDLE  hEnum,
      LPDWORD lpcCount,
      LPVOID  lpBuffer,
      LPDWORD lpBufferSize
    );




#line 487 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetCloseEnum(
      HANDLE   hEnum
    );


 
DWORD __stdcall
WNetGetResourceParentA(
      LPNETRESOURCEA lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer
    );
 
DWORD __stdcall
WNetGetResourceParentW(
      LPNETRESOURCEW lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer
    );




#line 514 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetGetResourceInformationA(
      LPNETRESOURCEA  lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer,
     LPSTR *lplpSystem
    );
 
DWORD __stdcall
WNetGetResourceInformationW(
      LPNETRESOURCEW  lpNetResource,
      LPVOID lpBuffer,
      LPDWORD lpcbBuffer,
     LPWSTR *lplpSystem
    );




#line 536 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"
#line 537 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"








typedef struct  _UNIVERSAL_NAME_INFOA {
    LPSTR    lpUniversalName;
}UNIVERSAL_NAME_INFOA, *LPUNIVERSAL_NAME_INFOA;
typedef struct  _UNIVERSAL_NAME_INFOW {
    LPWSTR   lpUniversalName;
}UNIVERSAL_NAME_INFOW, *LPUNIVERSAL_NAME_INFOW;




typedef UNIVERSAL_NAME_INFOA UNIVERSAL_NAME_INFO;
typedef LPUNIVERSAL_NAME_INFOA LPUNIVERSAL_NAME_INFO;
#line 558 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

typedef struct  _REMOTE_NAME_INFOA {
    LPSTR    lpUniversalName;
    LPSTR    lpConnectionName;
    LPSTR    lpRemainingPath;
}REMOTE_NAME_INFOA, *LPREMOTE_NAME_INFOA;
typedef struct  _REMOTE_NAME_INFOW {
    LPWSTR   lpUniversalName;
    LPWSTR   lpConnectionName;
    LPWSTR   lpRemainingPath;
}REMOTE_NAME_INFOW, *LPREMOTE_NAME_INFOW;




typedef REMOTE_NAME_INFOA REMOTE_NAME_INFO;
typedef LPREMOTE_NAME_INFOA LPREMOTE_NAME_INFO;
#line 576 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

 
DWORD __stdcall
WNetGetUniversalNameA(
      LPCSTR lpLocalPath,
      DWORD    dwInfoLevel,
      LPVOID lpBuffer,
      LPDWORD lpBufferSize
    );
 
DWORD __stdcall
WNetGetUniversalNameW(
      LPCWSTR lpLocalPath,
      DWORD    dwInfoLevel,
      LPVOID lpBuffer,
      LPDWORD lpBufferSize
    );




#line 598 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"




 
DWORD __stdcall
WNetGetUserA(
      LPCSTR  lpName,
      LPSTR lpUserName,
       LPDWORD lpnLength
    );



 
DWORD __stdcall
WNetGetUserW(
      LPCWSTR  lpName,
      LPWSTR lpUserName,
       LPDWORD lpnLength
    );




#line 624 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"












#line 637 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"



 
DWORD __stdcall
WNetGetProviderNameA(
         DWORD   dwNetType,
      LPSTR lpProviderName,
      LPDWORD lpBufferSize
    );
 
DWORD __stdcall
WNetGetProviderNameW(
         DWORD   dwNetType,
      LPWSTR lpProviderName,
      LPDWORD lpBufferSize
    );




#line 659 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

typedef struct _NETINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwProviderVersion;
    DWORD dwStatus;
    DWORD dwCharacteristics;
    ULONG_PTR dwHandle;
    WORD  wNetType;
    DWORD dwPrinters;
    DWORD dwDrives;
} NETINFOSTRUCT,  *LPNETINFOSTRUCT;





 
DWORD __stdcall
WNetGetNetworkInformationA(
       LPCSTR        lpProvider,
      LPNETINFOSTRUCT lpNetInfoStruct
    );
 
DWORD __stdcall
WNetGetNetworkInformationW(
       LPCWSTR        lpProvider,
      LPNETINFOSTRUCT lpNetInfoStruct
    );




#line 692 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

#line 694 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"





 
DWORD __stdcall
WNetGetLastErrorA(
      LPDWORD    lpError,
      LPSTR lpErrorBuf,
      DWORD      nErrorBufSize,
      LPSTR  lpNameBuf,
      DWORD      nNameBufSize
    );
 
DWORD __stdcall
WNetGetLastErrorW(
      LPDWORD    lpError,
      LPWSTR lpErrorBuf,
      DWORD      nErrorBufSize,
      LPWSTR  lpNameBuf,
      DWORD      nNameBufSize
    );




#line 722 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"





























#line 752 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"




















#line 773 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"












#line 786 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"






typedef struct _NETCONNECTINFOSTRUCT{
    DWORD cbStructure;
    DWORD dwFlags;
    DWORD dwSpeed;
    DWORD dwDelay;
    DWORD dwOptDataSize;
} NETCONNECTINFOSTRUCT,  *LPNETCONNECTINFOSTRUCT;






 
DWORD __stdcall
MultinetGetConnectionPerformanceA(
       LPNETRESOURCEA lpNetResource,
      LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );
 
DWORD __stdcall
MultinetGetConnectionPerformanceW(
       LPNETRESOURCEW lpNetResource,
      LPNETCONNECTINFOSTRUCT lpNetConnectInfoStruct
    );




#line 822 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"
#line 823 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"


#line 826 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"
#pragma endregion


}
#line 831 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"

#line 833 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winnetwk.h"


#line 180 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 181 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\cderr.h"














#pragma once
#line 17 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\cderr.h"













































#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\cderr.h"
#line 184 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dde.h"











#pragma once
#line 14 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dde.h"








extern "C" {
#line 24 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dde.h"

#pragma region Desktop Family





























typedef struct {

        unsigned short bAppReturnCode:8,
                 reserved:6,
                 fBusy:1,
		 fAck:1;


#line 64 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dde.h"
} DDEACK;









typedef struct {

        unsigned short reserved:14,
                 fDeferUpd:1,
		 fAckReq:1;


#line 82 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dde.h"
	short     cfFormat;
} DDEADVISE;











typedef struct {

	unsigned short unused:12,
                 fResponse:1,
                 fRelease:1,
                 reserved:1,
                 fAckReq:1;


#line 105 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dde.h"
	short	 cfFormat;
	BYTE	 Value[1];
} DDEDATA;











typedef struct {

	unsigned short unused:13,  
                             
		 fRelease:1,
		 fReserved:2;


#line 128 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dde.h"
	short    cfFormat;
	BYTE	 Value[1];  
                            

} DDEPOKE;











typedef struct {

        unsigned short unused:13,
                 fRelease:1,
                 fDeferUpd:1,
		 fAckReq:1;


#line 153 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dde.h"
	short	 cfFormat;
} DDELN;

typedef struct {

	unsigned short unused:12,
                 fAck:1,
                 fRelease:1,
                 fReserved:1,
                 fAckReq:1;


#line 166 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dde.h"
	short	 cfFormat;
	BYTE	 rgb[1];
} DDEUP;






BOOL
__stdcall
DdeSetQualityOfService(
    HWND hwndClient,
    const SECURITY_QUALITY_OF_SERVICE *pqosNew,
    PSECURITY_QUALITY_OF_SERVICE pqosPrev);

BOOL
__stdcall
ImpersonateDdeClientWindow(
    HWND hWndClient,
    HWND hWndServer);




LPARAM __stdcall PackDDElParam(UINT msg, UINT_PTR uiLo, UINT_PTR uiHi);
BOOL   __stdcall UnpackDDElParam(UINT msg, LPARAM lParam, PUINT_PTR puiLo, PUINT_PTR puiHi);
BOOL   __stdcall FreeDDElParam(UINT msg, LPARAM lParam);
LPARAM __stdcall ReuseDDElParam(LPARAM lParam, UINT msgIn, UINT msgOut, UINT_PTR uiLo, UINT_PTR uiHi);

#line 197 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dde.h"
#pragma endregion


}
#line 202 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dde.h"

#line 204 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dde.h"
#line 185 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ddeml.h"

















extern "C" {
#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ddeml.h"

#pragma region Desktop Family




struct HCONVLIST__{int unused;}; typedef struct HCONVLIST__ *HCONVLIST;
struct HCONV__{int unused;}; typedef struct HCONV__ *HCONV;
struct HSZ__{int unused;}; typedef struct HSZ__ *HSZ;
struct HDDEDATA__{int unused;}; typedef struct HDDEDATA__ *HDDEDATA;




typedef struct tagHSZPAIR {
    HSZ hszSvc;
    HSZ hszTopic;
} HSZPAIR,  *PHSZPAIR;




typedef struct tagCONVCONTEXT {
    UINT        cb;             
    UINT        wFlags;         
    UINT        wCountryID;     
    int         iCodePage;      
    DWORD       dwLangID;       
    DWORD       dwSecurity;     
    SECURITY_QUALITY_OF_SERVICE qos;  
} CONVCONTEXT,  *PCONVCONTEXT;




typedef struct tagCONVINFO {
    DWORD   cb;            
    DWORD_PTR hUser;       
    HCONV   hConvPartner;  
    HSZ     hszSvcPartner; 
    HSZ     hszServiceReq; 
    HSZ     hszTopic;      
    HSZ     hszItem;       
    UINT    wFmt;          
    UINT    wType;         
    UINT    wStatus;       
    UINT    wConvst;       
    UINT    wLastError;    
    HCONVLIST hConvList;   
    CONVCONTEXT ConvCtxt;  
    HWND    hwnd;          
    HWND    hwndPartner;   
} CONVINFO,  *PCONVINFO;
































































#line 138 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ddeml.h"




























































#line 199 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ddeml.h"




typedef HDDEDATA __stdcall FNCALLBACK(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);
typedef HDDEDATA (__stdcall *PFNCALLBACK)(UINT wType, UINT wFmt, HCONV hConv,
        HSZ hsz1, HSZ hsz2, HDDEDATA hData, ULONG_PTR dwData1, ULONG_PTR dwData2);





UINT
__stdcall
DdeInitializeA(
      LPDWORD pidInst,
      PFNCALLBACK pfnCallback,
      DWORD afCmd,
      DWORD ulRes);
UINT
__stdcall
DdeInitializeW(
      LPDWORD pidInst,
      PFNCALLBACK pfnCallback,
      DWORD afCmd,
      DWORD ulRes);




#line 231 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ddeml.h"
































BOOL
__stdcall
DdeUninitialize(
      DWORD idInst);




HCONVLIST
__stdcall
DdeConnectList(
      DWORD idInst,
      HSZ hszService,
      HSZ hszTopic,
      HCONVLIST hConvList,
      PCONVCONTEXT pCC);

HCONV
__stdcall
DdeQueryNextServer(
      HCONVLIST hConvList,
      HCONV hConvPrev);
BOOL
__stdcall
DdeDisconnectList(
      HCONVLIST hConvList);




HCONV
__stdcall
DdeConnect(
      DWORD idInst,
      HSZ hszService,
      HSZ hszTopic,
      PCONVCONTEXT pCC);

BOOL
__stdcall
DdeDisconnect(
      HCONV hConv);

HCONV
__stdcall
DdeReconnect(
      HCONV hConv);

UINT
__stdcall
DdeQueryConvInfo(
      HCONV hConv,
      DWORD idTransaction,
      PCONVINFO pConvInfo);

BOOL
__stdcall
DdeSetUserHandle(
      HCONV hConv,
      DWORD id,
      DWORD_PTR hUser);

BOOL
__stdcall
DdeAbandonTransaction(
      DWORD idInst,
      HCONV hConv,
      DWORD idTransaction);





BOOL
__stdcall
DdePostAdvise(
      DWORD idInst,
      HSZ hszTopic,
      HSZ hszItem);

BOOL
__stdcall
DdeEnableCallback(
      DWORD idInst,
      HCONV hConv,
      UINT wCmd);

BOOL
__stdcall
DdeImpersonateClient(
      HCONV hConv);







HDDEDATA
__stdcall
DdeNameService(
      DWORD idInst,
      HSZ hsz1,
      HSZ hsz2,
      UINT afCmd);









HDDEDATA
__stdcall
DdeClientTransaction(
      LPBYTE pData,
      DWORD cbData,
      HCONV hConv,
      HSZ hszItem,
      UINT wFmt,
      UINT wType,
      DWORD dwTimeout,
      LPDWORD pdwResult);






HDDEDATA
__stdcall
DdeCreateDataHandle(
      DWORD idInst,
      LPBYTE pSrc,
      DWORD cb,
      DWORD cbOff,
      HSZ hszItem,
      UINT wFmt,
      UINT afCmd);

HDDEDATA
__stdcall
DdeAddData(
      HDDEDATA hData,
      LPBYTE pSrc,
      DWORD cb,
      DWORD cbOff);

DWORD
__stdcall
DdeGetData(
      HDDEDATA hData,
      LPBYTE pDst,
      DWORD cbMax,
      DWORD cbOff);

LPBYTE
__stdcall
DdeAccessData(
      HDDEDATA hData,
      LPDWORD pcbDataSize);

BOOL
__stdcall
DdeUnaccessData(
      HDDEDATA hData);

BOOL
__stdcall
DdeFreeDataHandle(
      HDDEDATA hData);




UINT
__stdcall
DdeGetLastError(
      DWORD idInst);



























HSZ
__stdcall
DdeCreateStringHandleA(
      DWORD idInst,
      LPCSTR psz,
      int iCodePage);
HSZ
__stdcall
DdeCreateStringHandleW(
      DWORD idInst,
      LPCWSTR psz,
      int iCodePage);




#line 488 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ddeml.h"

DWORD
__stdcall
DdeQueryStringA(
      DWORD idInst,
      HSZ hsz,
      LPSTR psz,
      DWORD cchMax,
      int iCodePage);
DWORD
__stdcall
DdeQueryStringW(
      DWORD idInst,
      HSZ hsz,
      LPWSTR psz,
      DWORD cchMax,
      int iCodePage);




#line 510 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ddeml.h"

BOOL
__stdcall
DdeFreeStringHandle(
      DWORD idInst,
      HSZ hsz);

BOOL
__stdcall
DdeKeepStringHandle(
      DWORD idInst,
      HSZ hsz);

int
__stdcall
DdeCmpStringHandles(
      HSZ hsz1,
      HSZ hsz2);






typedef struct tagDDEML_MSG_HOOK_DATA {    
    UINT_PTR uiLo;  
    UINT_PTR uiHi;
    DWORD cbData;   
    DWORD Data[8];  
} DDEML_MSG_HOOK_DATA, *PDDEML_MSG_HOOK_DATA;


typedef struct tagMONMSGSTRUCT {
    UINT    cb;
    HWND    hwndTo;
    DWORD   dwTime;
    HANDLE  hTask;
    UINT    wMsg;
    WPARAM  wParam;
    LPARAM  lParam;
    DDEML_MSG_HOOK_DATA dmhd;       
} MONMSGSTRUCT, *PMONMSGSTRUCT;

typedef struct tagMONCBSTRUCT {
    UINT   cb;
    DWORD  dwTime;
    HANDLE hTask;
    DWORD  dwRet;
    UINT   wType;
    UINT   wFmt;
    HCONV  hConv;
    HSZ    hsz1;
    HSZ    hsz2;
    HDDEDATA hData;
    ULONG_PTR dwData1;
    ULONG_PTR dwData2;
    CONVCONTEXT cc;                 
    DWORD  cbData;                  
    DWORD  Data[8];                 
} MONCBSTRUCT, *PMONCBSTRUCT;

typedef struct tagMONHSZSTRUCTA {
    UINT   cb;
    BOOL   fsAction;    
    DWORD  dwTime;
    HSZ    hsz;
    HANDLE hTask;
    CHAR    str[1];
} MONHSZSTRUCTA, *PMONHSZSTRUCTA;
typedef struct tagMONHSZSTRUCTW {
    UINT   cb;
    BOOL   fsAction;    
    DWORD  dwTime;
    HSZ    hsz;
    HANDLE hTask;
    WCHAR   str[1];
} MONHSZSTRUCTW, *PMONHSZSTRUCTW;




typedef MONHSZSTRUCTA MONHSZSTRUCT;
typedef PMONHSZSTRUCTA PMONHSZSTRUCT;
#line 594 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ddeml.h"






typedef struct tagMONERRSTRUCT {
    UINT    cb;
    UINT    wLastError;
    DWORD   dwTime;
    HANDLE  hTask;
} MONERRSTRUCT, *PMONERRSTRUCT;

typedef struct tagMONLINKSTRUCT {
    UINT    cb;
    DWORD   dwTime;
    HANDLE  hTask;
    BOOL    fEstablished;
    BOOL    fNoData;
    HSZ     hszSvc;
    HSZ     hszTopic;
    HSZ     hszItem;
    UINT    wFmt;
    BOOL    fServer;
    HCONV   hConvServer;
    HCONV   hConvClient;
} MONLINKSTRUCT, *PMONLINKSTRUCT;

typedef struct tagMONCONVSTRUCT {
    UINT    cb;
    BOOL    fConnect;
    DWORD   dwTime;
    HANDLE  hTask;
    HSZ     hszSvc;
    HSZ     hszTopic;
    HCONV   hConvClient;        
    HCONV   hConvServer;        
} MONCONVSTRUCT, *PMONCONVSTRUCT;


















#line 651 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ddeml.h"

#line 653 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ddeml.h"
#pragma endregion


}
#line 658 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ddeml.h"

#line 660 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ddeml.h"


#line 186 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dlgs.h"
















#pragma once





#pragma region Desktop Family






























































































































































































































#line 247 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dlgs.h"




#line 252 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dlgs.h"





#line 258 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dlgs.h"




typedef struct tagCRGB
{
    BYTE    bRed;
    BYTE    bGreen;
    BYTE    bBlue;
    BYTE    bExtra;
} CRGB;           


#line 272 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dlgs.h"
#pragma endregion


#line 276 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dlgs.h"
#line 187 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\lzexpand.h"

























extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\lzexpand.h"

#pragma region Desktop Family




















 
 
INT
__stdcall
LZStart(
    void
    );

void
__stdcall
LZDone(
    void
    );


 
 
LONG
__stdcall
CopyLZFile(
      INT hfSource,
      INT hfDest
    );

 
 
LONG
__stdcall
LZCopy(
      INT hfSource,
      INT hfDest
    );

 
 
INT
__stdcall
LZInit(
      INT hfSource
    );

 
 
INT
__stdcall
GetExpandedNameA(
      LPSTR lpszSource,
      LPSTR lpszBuffer
    );
 
 
INT
__stdcall
GetExpandedNameW(
      LPWSTR lpszSource,
      LPWSTR lpszBuffer
    );




#line 112 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\lzexpand.h"

 
 
INT
__stdcall
LZOpenFileA(
      LPSTR lpFileName,
      LPOFSTRUCT lpReOpenBuf,
      WORD wStyle
    );
 
 
INT
__stdcall
LZOpenFileW(
      LPWSTR lpFileName,
      LPOFSTRUCT lpReOpenBuf,
      WORD wStyle
    );




#line 136 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\lzexpand.h"

 
 
LONG
__stdcall
LZSeek(
      INT hFile,
      LONG lOffset,
      INT iOrigin
    );

 
 
INT
__stdcall
LZRead(
      INT hFile,
      CHAR* lpBuffer,
      INT cbRead
    );

void
__stdcall
LZClose(
      INT hFile
    );

#line 164 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\lzexpand.h"
#pragma endregion


}
#line 169 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\lzexpand.h"


#line 172 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\lzexpand.h"
#line 189 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"

































#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"

















#pragma warning(disable:4201) 


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"




#line 27 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"


extern "C" {            
#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"

#pragma region Desktop Family







#line 41 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"




#line 46 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"









































#line 88 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"






typedef UINT        MMVERSION;  


#line 98 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"
typedef   UINT        MMRESULT;   
                                


typedef UINT    *LPUINT;




typedef struct mmtime_tag
{
    UINT            wType;      
    union
    {
        DWORD       ms;         
        DWORD       sample;     
        DWORD       cb;         
        DWORD       ticks;      

        
        struct
        {
            BYTE    hour;       
            BYTE    min;        
            BYTE    sec;        
            BYTE    frame;      
            BYTE    fps;        
            BYTE    dummy;      

            BYTE    pad[2];
#line 129 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"
        } smpte;

        
        struct
        {
            DWORD songptrpos;   
        } midi;
    } u;
} MMTIME, *PMMTIME,  *NPMMTIME,  *LPMMTIME;

























































 
 
 
 
#line 200 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"











 
#line 213 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"



#line 217 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"












































                                                   
                                                   












struct HDRVR__{int unused;}; typedef struct HDRVR__ *HDRVR;
#line 277 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"



















#line 297 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"
typedef void (__stdcall DRVCALLBACK)(HDRVR hdrvr, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);

typedef DRVCALLBACK  *LPDRVCALLBACK;

typedef DRVCALLBACK     *PDRVCALLBACK;
#line 303 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"

#line 305 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"
#pragma endregion						


}           		
#line 310 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 313 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"




#line 318 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"

#line 320 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"




#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 38 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"




#line 43 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"


extern "C" {            
#line 47 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"

#pragma region Desktop Family












#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"



































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"









#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"


extern "C" {
#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"

#pragma region Desktop Family











typedef DWORD   MCIERROR;       
#line 51 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"



typedef UINT    MCIDEVICEID;    
#line 56 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"


typedef UINT (__stdcall *YIELDPROC)(MCIDEVICEID mciId, DWORD dwYieldData);




__declspec(dllimport)
MCIERROR
__stdcall
mciSendCommandA(
      MCIDEVICEID mciId,
      UINT uMsg,
      DWORD_PTR dwParam1,
      DWORD_PTR dwParam2
    );

__declspec(dllimport)
MCIERROR
__stdcall
mciSendCommandW(
      MCIDEVICEID mciId,
      UINT uMsg,
      DWORD_PTR dwParam1,
      DWORD_PTR dwParam2
    );





#line 88 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"
__declspec(dllimport)
MCIERROR
__stdcall
mciSendStringA(
      LPCSTR lpstrCommand,
      LPSTR lpstrReturnString,
      UINT uReturnLength,
      HWND hwndCallback
    );

__declspec(dllimport)
MCIERROR
__stdcall
mciSendStringW(
      LPCWSTR lpstrCommand,
      LPWSTR lpstrReturnString,
      UINT uReturnLength,
      HWND hwndCallback
    );





#line 113 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"
__declspec(dllimport)
MCIDEVICEID
__stdcall
mciGetDeviceIDA(
      LPCSTR pszDevice
    );

__declspec(dllimport)
MCIDEVICEID
__stdcall
mciGetDeviceIDW(
      LPCWSTR pszDevice
    );





#line 132 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"
__declspec(dllimport)
MCIDEVICEID
__stdcall
mciGetDeviceIDFromElementIDA(
      DWORD dwElementID,
      LPCSTR lpstrType
    );

__declspec(dllimport)
MCIDEVICEID
__stdcall
mciGetDeviceIDFromElementIDW(
      DWORD dwElementID,
      LPCWSTR lpstrType
    );





#line 153 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"
__declspec(dllimport)
BOOL
__stdcall
mciGetErrorStringA(
      MCIERROR mcierr,
      LPSTR pszText,
      UINT cchText
    );

__declspec(dllimport)
BOOL
__stdcall
mciGetErrorStringW(
      MCIERROR mcierr,
      LPWSTR pszText,
      UINT cchText
    );





#line 176 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"






#line 183 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"

__declspec(dllimport)
BOOL
__stdcall
mciSetYieldProc(
      MCIDEVICEID mciId,
      YIELDPROC fpYieldProc,
      DWORD dwYieldData
    );




__declspec(dllimport)
HTASK
__stdcall
mciGetCreatorTask(
      MCIDEVICEID mciId
    );

__declspec(dllimport)
YIELDPROC
__stdcall
mciGetYieldProc(
      MCIDEVICEID mciId,
      LPDWORD pdwYieldData
    );

#line 212 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"










#line 223 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"





































































































































































































































































































typedef struct tagMCI_GENERIC_PARMS {
    DWORD_PTR   dwCallback;
} MCI_GENERIC_PARMS, *PMCI_GENERIC_PARMS,  *LPMCI_GENERIC_PARMS;





typedef struct tagMCI_OPEN_PARMSA {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR     lpstrDeviceType;
    LPCSTR     lpstrElementName;
    LPCSTR     lpstrAlias;
} MCI_OPEN_PARMSA, *PMCI_OPEN_PARMSA, *LPMCI_OPEN_PARMSA;
typedef struct tagMCI_OPEN_PARMSW {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR    lpstrDeviceType;
    LPCWSTR    lpstrElementName;
    LPCWSTR    lpstrAlias;
} MCI_OPEN_PARMSW, *PMCI_OPEN_PARMSW, *LPMCI_OPEN_PARMSW;





typedef MCI_OPEN_PARMSA MCI_OPEN_PARMS;
typedef PMCI_OPEN_PARMSA PMCI_OPEN_PARMS;
typedef LPMCI_OPEN_PARMSA LPMCI_OPEN_PARMS;
#line 547 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"










#line 558 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"



typedef struct tagMCI_PLAY_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrom;
    DWORD       dwTo;
} MCI_PLAY_PARMS, *PMCI_PLAY_PARMS,  *LPMCI_PLAY_PARMS;



typedef struct tagMCI_SEEK_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwTo;
} MCI_SEEK_PARMS, *PMCI_SEEK_PARMS,  *LPMCI_SEEK_PARMS;



typedef struct tagMCI_STATUS_PARMS {
    DWORD_PTR   dwCallback;
    DWORD_PTR   dwReturn;
    DWORD       dwItem;
    DWORD       dwTrack;
} MCI_STATUS_PARMS, *PMCI_STATUS_PARMS,  * LPMCI_STATUS_PARMS;





typedef struct tagMCI_INFO_PARMSA {
    DWORD_PTR dwCallback;
    LPSTR     lpstrReturn;
    DWORD     dwRetSize;
} MCI_INFO_PARMSA, * LPMCI_INFO_PARMSA;
typedef struct tagMCI_INFO_PARMSW {
    DWORD_PTR dwCallback;
    LPWSTR    lpstrReturn;
    DWORD     dwRetSize;
} MCI_INFO_PARMSW, * LPMCI_INFO_PARMSW;




typedef MCI_INFO_PARMSA MCI_INFO_PARMS;
typedef LPMCI_INFO_PARMSA LPMCI_INFO_PARMS;
#line 604 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"







#line 612 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"



typedef struct tagMCI_GETDEVCAPS_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwReturn;
    DWORD       dwItem;
} MCI_GETDEVCAPS_PARMS, *PMCI_GETDEVCAPS_PARMS,  * LPMCI_GETDEVCAPS_PARMS;





typedef struct tagMCI_SYSINFO_PARMSA {
    DWORD_PTR   dwCallback;
    LPSTR       lpstrReturn;
    DWORD       dwRetSize;
    DWORD       dwNumber;
    UINT        wDeviceType;
} MCI_SYSINFO_PARMSA, *PMCI_SYSINFO_PARMSA, * LPMCI_SYSINFO_PARMSA;
typedef struct tagMCI_SYSINFO_PARMSW {
    DWORD_PTR   dwCallback;
    LPWSTR      lpstrReturn;
    DWORD       dwRetSize;
    DWORD       dwNumber;
    UINT        wDeviceType;
} MCI_SYSINFO_PARMSW, *PMCI_SYSINFO_PARMSW, * LPMCI_SYSINFO_PARMSW;





typedef MCI_SYSINFO_PARMSA MCI_SYSINFO_PARMS;
typedef PMCI_SYSINFO_PARMSA PMCI_SYSINFO_PARMS;
typedef LPMCI_SYSINFO_PARMSA LPMCI_SYSINFO_PARMS;
#line 648 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"









#line 658 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"



typedef struct tagMCI_SET_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwTimeFormat;
    DWORD       dwAudio;
} MCI_SET_PARMS, *PMCI_SET_PARMS,  *LPMCI_SET_PARMS;



typedef struct tagMCI_BREAK_PARMS {
    DWORD_PTR   dwCallback;

    int         nVirtKey;
    HWND        hwndBreak;





#line 680 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"
} MCI_BREAK_PARMS, *PMCI_BREAK_PARMS,  * LPMCI_BREAK_PARMS;






typedef struct tagMCI_SAVE_PARMSA {
    DWORD_PTR    dwCallback;
    LPCSTR       lpfilename;
} MCI_SAVE_PARMSA, *PMCI_SAVE_PARMSA, * LPMCI_SAVE_PARMSA;
typedef struct tagMCI_SAVE_PARMSW {
    DWORD_PTR    dwCallback;
    LPCWSTR      lpfilename;
} MCI_SAVE_PARMSW, *PMCI_SAVE_PARMSW, * LPMCI_SAVE_PARMSW;





typedef MCI_SAVE_PARMSA MCI_SAVE_PARMS;
typedef PMCI_SAVE_PARMSA PMCI_SAVE_PARMS;
typedef LPMCI_SAVE_PARMSA LPMCI_SAVE_PARMS;
#line 704 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"






#line 711 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"





typedef struct tagMCI_LOAD_PARMSA {
    DWORD_PTR    dwCallback;
    LPCSTR       lpfilename;
} MCI_LOAD_PARMSA, *PMCI_LOAD_PARMSA, * LPMCI_LOAD_PARMSA;
typedef struct tagMCI_LOAD_PARMSW {
    DWORD_PTR    dwCallback;
    LPCWSTR      lpfilename;
} MCI_LOAD_PARMSW, *PMCI_LOAD_PARMSW, * LPMCI_LOAD_PARMSW;





typedef MCI_LOAD_PARMSA MCI_LOAD_PARMS;
typedef PMCI_LOAD_PARMSA PMCI_LOAD_PARMS;
typedef LPMCI_LOAD_PARMSA LPMCI_LOAD_PARMS;
#line 733 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"






#line 740 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"



typedef struct tagMCI_RECORD_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrom;
    DWORD       dwTo;
} MCI_RECORD_PARMS,  *LPMCI_RECORD_PARMS;























































typedef struct tagMCI_VD_PLAY_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrom;
    DWORD       dwTo;
    DWORD       dwSpeed;
} MCI_VD_PLAY_PARMS, *PMCI_VD_PLAY_PARMS,  *LPMCI_VD_PLAY_PARMS;



typedef struct tagMCI_VD_STEP_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrames;
} MCI_VD_STEP_PARMS, *PMCI_VD_STEP_PARMS,  *LPMCI_VD_STEP_PARMS;





typedef struct tagMCI_VD_ESCAPE_PARMSA {
    DWORD_PTR   dwCallback;
    LPCSTR      lpstrCommand;
} MCI_VD_ESCAPE_PARMSA, *PMCI_VD_ESCAPE_PARMSA, *LPMCI_VD_ESCAPE_PARMSA;
typedef struct tagMCI_VD_ESCAPE_PARMSW {
    DWORD_PTR   dwCallback;
    LPCWSTR     lpstrCommand;
} MCI_VD_ESCAPE_PARMSW, *PMCI_VD_ESCAPE_PARMSW, *LPMCI_VD_ESCAPE_PARMSW;





typedef MCI_VD_ESCAPE_PARMSA MCI_VD_ESCAPE_PARMS;
typedef PMCI_VD_ESCAPE_PARMSA PMCI_VD_ESCAPE_PARMS;
typedef LPMCI_VD_ESCAPE_PARMSA LPMCI_VD_ESCAPE_PARMS;
#line 838 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"






#line 845 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"




















































typedef struct tagMCI_WAVE_OPEN_PARMSA {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR     lpstrDeviceType;
    LPCSTR     lpstrElementName;
    LPCSTR     lpstrAlias;
    DWORD   dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSA, *PMCI_WAVE_OPEN_PARMSA, *LPMCI_WAVE_OPEN_PARMSA;
typedef struct tagMCI_WAVE_OPEN_PARMSW {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR    lpstrDeviceType;
    LPCWSTR    lpstrElementName;
    LPCWSTR    lpstrAlias;
    DWORD   dwBufferSeconds;
} MCI_WAVE_OPEN_PARMSW, *PMCI_WAVE_OPEN_PARMSW, *LPMCI_WAVE_OPEN_PARMSW;





typedef MCI_WAVE_OPEN_PARMSA MCI_WAVE_OPEN_PARMS;
typedef PMCI_WAVE_OPEN_PARMSA PMCI_WAVE_OPEN_PARMS;
typedef LPMCI_WAVE_OPEN_PARMSA LPMCI_WAVE_OPEN_PARMS;
#line 922 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"











#line 934 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"



typedef struct tagMCI_WAVE_DELETE_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrom;
    DWORD       dwTo;
} MCI_WAVE_DELETE_PARMS, *PMCI_WAVE_DELETE_PARMS,  *LPMCI_WAVE_DELETE_PARMS;



typedef struct tagMCI_WAVE_SET_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwTimeFormat;
    DWORD       dwAudio;

    UINT    wInput;
    UINT    wOutput;





#line 958 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"
    WORD    wFormatTag;
    WORD    wReserved2;
    WORD    nChannels;
    WORD    wReserved3;
    DWORD   nSamplesPerSec;
    DWORD   nAvgBytesPerSec;
    WORD    nBlockAlign;
    WORD    wReserved4;
    WORD    wBitsPerSample;
    WORD    wReserved5;
} MCI_WAVE_SET_PARMS, *PMCI_WAVE_SET_PARMS,  * LPMCI_WAVE_SET_PARMS;








































typedef struct tagMCI_SEQ_SET_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwTimeFormat;
    DWORD       dwAudio;
    DWORD       dwTempo;
    DWORD       dwPort;
    DWORD       dwSlave;
    DWORD       dwMaster;
    DWORD       dwOffset;
} MCI_SEQ_SET_PARMS, *PMCI_SEQ_SET_PARMS,  * LPMCI_SEQ_SET_PARMS;






































































typedef struct tagMCI_ANIM_OPEN_PARMSA {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR      lpstrDeviceType;
    LPCSTR      lpstrElementName;
    LPCSTR      lpstrAlias;
    DWORD   dwStyle;
    HWND    hWndParent;
} MCI_ANIM_OPEN_PARMSA, *PMCI_ANIM_OPEN_PARMSA, *LPMCI_ANIM_OPEN_PARMSA;
typedef struct tagMCI_ANIM_OPEN_PARMSW {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR     lpstrDeviceType;
    LPCWSTR     lpstrElementName;
    LPCWSTR     lpstrAlias;
    DWORD   dwStyle;
    HWND    hWndParent;
} MCI_ANIM_OPEN_PARMSW, *PMCI_ANIM_OPEN_PARMSW, *LPMCI_ANIM_OPEN_PARMSW;





typedef MCI_ANIM_OPEN_PARMSA MCI_ANIM_OPEN_PARMS;
typedef PMCI_ANIM_OPEN_PARMSA PMCI_ANIM_OPEN_PARMS;
typedef LPMCI_ANIM_OPEN_PARMSA LPMCI_ANIM_OPEN_PARMS;
#line 1116 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"













#line 1130 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"



typedef struct tagMCI_ANIM_PLAY_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrom;
    DWORD       dwTo;
    DWORD       dwSpeed;
} MCI_ANIM_PLAY_PARMS, *PMCI_ANIM_PLAY_PARMS,  *LPMCI_ANIM_PLAY_PARMS;



typedef struct tagMCI_ANIM_STEP_PARMS {
    DWORD_PTR   dwCallback;
    DWORD       dwFrames;
} MCI_ANIM_STEP_PARMS, *PMCI_ANIM_STEP_PARMS,  *LPMCI_ANIM_STEP_PARMS;





typedef struct tagMCI_ANIM_WINDOW_PARMSA {
    DWORD_PTR   dwCallback;
    HWND        hWnd;
    UINT        nCmdShow;
    LPCSTR     lpstrText;
} MCI_ANIM_WINDOW_PARMSA, *PMCI_ANIM_WINDOW_PARMSA, * LPMCI_ANIM_WINDOW_PARMSA;
typedef struct tagMCI_ANIM_WINDOW_PARMSW {
    DWORD_PTR   dwCallback;
    HWND        hWnd;
    UINT        nCmdShow;
    LPCWSTR    lpstrText;
} MCI_ANIM_WINDOW_PARMSW, *PMCI_ANIM_WINDOW_PARMSW, * LPMCI_ANIM_WINDOW_PARMSW;





typedef MCI_ANIM_WINDOW_PARMSA MCI_ANIM_WINDOW_PARMS;
typedef PMCI_ANIM_WINDOW_PARMSA PMCI_ANIM_WINDOW_PARMS;
typedef LPMCI_ANIM_WINDOW_PARMSA LPMCI_ANIM_WINDOW_PARMS;
#line 1172 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"










#line 1183 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"



typedef struct tagMCI_ANIM_RECT_PARMS {
    DWORD_PTR   dwCallback;




    RECT    rc;
#line 1194 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"
} MCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS * PMCI_ANIM_RECT_PARMS;
typedef MCI_ANIM_RECT_PARMS  * LPMCI_ANIM_RECT_PARMS;



typedef struct tagMCI_ANIM_UPDATE_PARMS {
    DWORD_PTR   dwCallback;
    RECT        rc;
    HDC         hDC;
} MCI_ANIM_UPDATE_PARMS, *PMCI_ANIM_UPDATE_PARMS,  * LPMCI_ANIM_UPDATE_PARMS;















































typedef struct tagMCI_OVLY_OPEN_PARMSA {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCSTR      lpstrDeviceType;
    LPCSTR      lpstrElementName;
    LPCSTR      lpstrAlias;
    DWORD   dwStyle;
    HWND    hWndParent;
} MCI_OVLY_OPEN_PARMSA, *PMCI_OVLY_OPEN_PARMSA, *LPMCI_OVLY_OPEN_PARMSA;
typedef struct tagMCI_OVLY_OPEN_PARMSW {
    DWORD_PTR   dwCallback;
    MCIDEVICEID wDeviceID;
    LPCWSTR     lpstrDeviceType;
    LPCWSTR     lpstrElementName;
    LPCWSTR     lpstrAlias;
    DWORD   dwStyle;
    HWND    hWndParent;
} MCI_OVLY_OPEN_PARMSW, *PMCI_OVLY_OPEN_PARMSW, *LPMCI_OVLY_OPEN_PARMSW;





typedef MCI_OVLY_OPEN_PARMSA MCI_OVLY_OPEN_PARMS;
typedef PMCI_OVLY_OPEN_PARMSA PMCI_OVLY_OPEN_PARMS;
typedef LPMCI_OVLY_OPEN_PARMSA LPMCI_OVLY_OPEN_PARMS;
#line 1279 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"













#line 1293 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"





typedef struct tagMCI_OVLY_WINDOW_PARMSA {
    DWORD_PTR   dwCallback;
    HWND        hWnd;
    UINT        nCmdShow;
    LPCSTR      lpstrText;
} MCI_OVLY_WINDOW_PARMSA, *PMCI_OVLY_WINDOW_PARMSA, * LPMCI_OVLY_WINDOW_PARMSA;
typedef struct tagMCI_OVLY_WINDOW_PARMSW {
    DWORD_PTR   dwCallback;
    HWND        hWnd;
    UINT        nCmdShow;
    LPCWSTR     lpstrText;
} MCI_OVLY_WINDOW_PARMSW, *PMCI_OVLY_WINDOW_PARMSW, * LPMCI_OVLY_WINDOW_PARMSW;





typedef MCI_OVLY_WINDOW_PARMSA MCI_OVLY_WINDOW_PARMS;
typedef PMCI_OVLY_WINDOW_PARMSA PMCI_OVLY_WINDOW_PARMS;
typedef LPMCI_OVLY_WINDOW_PARMSA LPMCI_OVLY_WINDOW_PARMS;
#line 1319 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"









#line 1329 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"



typedef struct tagMCI_OVLY_RECT_PARMS {
    DWORD_PTR   dwCallback;




    RECT    rc;
#line 1340 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"
} MCI_OVLY_RECT_PARMS, *PMCI_OVLY_RECT_PARMS,  * LPMCI_OVLY_RECT_PARMS;





typedef struct tagMCI_OVLY_SAVE_PARMSA {
    DWORD_PTR   dwCallback;
    LPCSTR      lpfilename;
    RECT        rc;
} MCI_OVLY_SAVE_PARMSA, *PMCI_OVLY_SAVE_PARMSA, * LPMCI_OVLY_SAVE_PARMSA;
typedef struct tagMCI_OVLY_SAVE_PARMSW {
    DWORD_PTR   dwCallback;
    LPCWSTR     lpfilename;
    RECT        rc;
} MCI_OVLY_SAVE_PARMSW, *PMCI_OVLY_SAVE_PARMSW, * LPMCI_OVLY_SAVE_PARMSW;





typedef MCI_OVLY_SAVE_PARMSA MCI_OVLY_SAVE_PARMS;
typedef PMCI_OVLY_SAVE_PARMSA PMCI_OVLY_SAVE_PARMS;
typedef LPMCI_OVLY_SAVE_PARMSA LPMCI_OVLY_SAVE_PARMS;
#line 1365 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"






#line 1372 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"





typedef struct tagMCI_OVLY_LOAD_PARMSA {
    DWORD_PTR   dwCallback;
    LPCSTR      lpfilename;
    RECT    rc;
} MCI_OVLY_LOAD_PARMSA, *PMCI_OVLY_LOAD_PARMSA, * LPMCI_OVLY_LOAD_PARMSA;
typedef struct tagMCI_OVLY_LOAD_PARMSW {
    DWORD_PTR   dwCallback;
    LPCWSTR     lpfilename;
    RECT    rc;
} MCI_OVLY_LOAD_PARMSW, *PMCI_OVLY_LOAD_PARMSW, * LPMCI_OVLY_LOAD_PARMSW;





typedef MCI_OVLY_LOAD_PARMSA MCI_OVLY_LOAD_PARMS;
typedef PMCI_OVLY_LOAD_PARMSA PMCI_OVLY_LOAD_PARMS;
typedef LPMCI_OVLY_LOAD_PARMSA LPMCI_OVLY_LOAD_PARMS;
#line 1396 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"






#line 1403 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"




DWORD_PTR
__stdcall
mciGetDriverData(
    MCIDEVICEID wDeviceID
    );

UINT
__stdcall
mciLoadCommandResource(
    HANDLE hInstance,
    LPCWSTR lpResName,
    UINT wType
    );

BOOL
__stdcall
mciSetDriverData(
    MCIDEVICEID wDeviceID,
    DWORD_PTR dwData
    );

UINT
__stdcall
mciDriverYield(
    MCIDEVICEID wDeviceID
    );

BOOL
__stdcall
mciDriverNotify(
    HANDLE hwndCallback,
    MCIDEVICEID wDeviceID,
    UINT uStatus
    );

BOOL
__stdcall
mciFreeCommandResource(
    UINT wTable
    );


#line 1450 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"
#pragma endregion


}
#line 1455 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"

#line 1457 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mciapi.h"



#line 62 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"

#line 64 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"



































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"









#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"


extern "C" {
#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"

#pragma region Desktop Family













typedef struct DRVCONFIGINFOEX {
    DWORD   dwDCISize;
    LPCWSTR  lpszDCISectionName;
    LPCWSTR  lpszDCIAliasName;
    DWORD    dnDevNode;
} DRVCONFIGINFOEX, *PDRVCONFIGINFOEX,  *NPDRVCONFIGINFOEX,  *LPDRVCONFIGINFOEX;








#line 66 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"
























typedef struct tagDRVCONFIGINFO {
    DWORD   dwDCISize;
    LPCWSTR  lpszDCISectionName;
    LPCWSTR  lpszDCIAliasName;
} DRVCONFIGINFO, *PDRVCONFIGINFO,  *NPDRVCONFIGINFO,  *LPDRVCONFIGINFO;






#line 102 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"









typedef LRESULT (__stdcall* DRIVERPROC)(DWORD_PTR, HDRVR, UINT, LPARAM, LPARAM);

__declspec(dllimport)
LRESULT
__stdcall
CloseDriver(
      HDRVR hDriver,
      LPARAM lParam1,
      LPARAM lParam2
    );

__declspec(dllimport)
HDRVR
__stdcall
OpenDriver(
      LPCWSTR szDriverName,
      LPCWSTR szSectionName,
      LPARAM lParam2
    );

__declspec(dllimport)
LRESULT
__stdcall
SendDriverMessage(
      HDRVR hDriver,
      UINT message,
      LPARAM lParam1,
      LPARAM lParam2
    );

__declspec(dllimport)
HMODULE
__stdcall
DrvGetModuleHandle(
      HDRVR hDriver
    );

__declspec(dllimport)
HMODULE
__stdcall
GetDriverModuleHandle(
      HDRVR hDriver
    );

__declspec(dllimport)
LRESULT
__stdcall
DefDriverProc(
      DWORD_PTR dwDriverIdentifier,
      HDRVR hdrvr,
      UINT uMsg,
      LPARAM lParam1,
      LPARAM lParam2
    );








#line 174 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"
#line 175 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"
#line 176 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"








#line 185 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"









BOOL
__stdcall
DriverCallback(
    DWORD_PTR dwCallback,
    DWORD dwFlags,
    HDRVR hDevice,
    DWORD dwMsg,
    DWORD_PTR dwUser,
    DWORD_PTR dwParam1,
    DWORD_PTR dwParam2
    );















typedef DWORD (__stdcall *DRIVERMSGPROC)(DWORD, DWORD, DWORD_PTR, DWORD_PTR, DWORD_PTR);

UINT
__stdcall
mmDrvInstall(
    HDRVR hDriver,
    LPCWSTR wszDrvEntry,
    DRIVERMSGPROC drvMessage,
    UINT wFlags
    );



#line 234 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"
































typedef DWORD           FOURCC;         
typedef char  *    HPSTR;          
struct HMMIO__{int unused;}; typedef struct HMMIO__ *HMMIO;                  
typedef LRESULT (__stdcall MMIOPROC)(LPSTR lpmmioinfo, UINT uMsg,
            LPARAM lParam1, LPARAM lParam2);
typedef MMIOPROC  *LPMMIOPROC;



typedef struct _MMIOINFO
{
        
        DWORD           dwFlags;        
        FOURCC          fccIOProc;      
        LPMMIOPROC      pIOProc;        
        UINT            wErrorRet;      
        HTASK           htask;          

        
        LONG            cchBuffer;      
        HPSTR           pchBuffer;      
        HPSTR           pchNext;        
        HPSTR           pchEndRead;     
        HPSTR           pchEndWrite;    
        LONG            lBufOffset;     

        
        LONG            lDiskOffset;    
        DWORD           adwInfo[3];     

        
        DWORD           dwReserved1;    
        DWORD           dwReserved2;    
        HMMIO           hmmio;          
} MMIOINFO, *PMMIOINFO,  *NPMMIOINFO,  *LPMMIOINFO;
typedef const MMIOINFO  *LPCMMIOINFO;


typedef struct _MMCKINFO
{
        FOURCC          ckid;           
        DWORD           cksize;         
        FOURCC          fccType;        
        DWORD           dwDataOffset;   
        DWORD           dwFlags;        
} MMCKINFO, *PMMCKINFO,  *NPMMCKINFO,  *LPMMCKINFO;
typedef const MMCKINFO *LPCMMCKINFO;























































#line 369 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"
















#line 386 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"










__declspec(dllimport)
FOURCC
__stdcall
mmioStringToFOURCCA(
    LPCSTR sz,
      UINT uFlags
    );

__declspec(dllimport)
FOURCC
__stdcall
mmioStringToFOURCCW(
    LPCWSTR sz,
      UINT uFlags
    );





#line 417 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"
__declspec(dllimport)
LPMMIOPROC
__stdcall
mmioInstallIOProcA(
      FOURCC fccIOProc,
      LPMMIOPROC pIOProc,
      DWORD dwFlags
    );

__declspec(dllimport)
LPMMIOPROC
__stdcall
mmioInstallIOProcW(
      FOURCC fccIOProc,
      LPMMIOPROC pIOProc,
      DWORD dwFlags
    );





#line 440 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"
__declspec(dllimport)
HMMIO
__stdcall
mmioOpenA(
      LPSTR pszFileName,
      LPMMIOINFO pmmioinfo,
      DWORD fdwOpen
    );

__declspec(dllimport)
HMMIO
__stdcall
mmioOpenW(
      LPWSTR pszFileName,
      LPMMIOINFO pmmioinfo,
      DWORD fdwOpen
    );





#line 463 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
mmioRenameA(
      LPCSTR pszFileName,
      LPCSTR pszNewFileName,
      LPCMMIOINFO pmmioinfo,
      DWORD fdwRename
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioRenameW(
      LPCWSTR pszFileName,
      LPCWSTR pszNewFileName,
      LPCMMIOINFO pmmioinfo,
      DWORD fdwRename
    );





#line 488 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"








#line 497 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"

__declspec(dllimport)
MMRESULT
__stdcall
mmioClose(
      HMMIO hmmio,
      UINT fuClose
    );

__declspec(dllimport)
LONG
__stdcall
mmioRead(
      HMMIO hmmio,
      HPSTR pch,
      LONG cch
    );

__declspec(dllimport)
LONG
__stdcall
mmioWrite(
      HMMIO hmmio,
      const char  * pch,
      LONG cch
    );

__declspec(dllimport)
LONG
__stdcall
mmioSeek(
      HMMIO hmmio,
      LONG lOffset,
      int iOrigin
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioGetInfo(
      HMMIO hmmio,
      LPMMIOINFO pmmioinfo,
      UINT fuInfo
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioSetInfo(
      HMMIO hmmio,
      LPCMMIOINFO pmmioinfo,
      UINT fuInfo
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioSetBuffer(
      HMMIO hmmio,
      LPSTR pchBuffer,
      LONG cchBuffer,
      UINT fuBuffer
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioFlush(
      HMMIO hmmio,
      UINT fuFlush
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioAdvance(
      HMMIO hmmio,
      LPMMIOINFO pmmioinfo,
      UINT fuAdvance
    );

__declspec(dllimport)
LRESULT
__stdcall
mmioSendMessage(
      HMMIO hmmio,
      UINT uMsg,
      LPARAM lParam1,
      LPARAM lParam2
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioDescend(
      HMMIO hmmio,
      LPMMCKINFO pmmcki,
      const MMCKINFO  * pmmckiParent,
      UINT fuDescend
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioAscend(
      HMMIO hmmio,
      LPMMCKINFO pmmcki,
      UINT fuAscend
    );

__declspec(dllimport)
MMRESULT
__stdcall
mmioCreateChunk(
      HMMIO hmmio,
      LPMMCKINFO pmmcki,
      UINT fuCreate
    );


#line 618 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"

#line 620 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"
#pragma endregion


}
#line 625 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"

#line 627 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi.h"


#line 67 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi2.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi2.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi2.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi2.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"



































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi2.h"









#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi2.h"


extern "C" {
#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi2.h"

#pragma region Desktop Family



typedef void (__stdcall TIMECALLBACK)(UINT uTimerID, UINT uMsg, DWORD_PTR dwUser, DWORD_PTR dw1, DWORD_PTR dw2);
typedef TIMECALLBACK  *LPTIMECALLBACK;









#line 53 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi2.h"




                                        
                                        
#line 60 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi2.h"


__declspec(dllimport)
MMRESULT
__stdcall
timeSetEvent(
      UINT uDelay,
      UINT uResolution,
      LPTIMECALLBACK fptc,
      DWORD_PTR dwUser,
      UINT fuEvent
    );

__declspec(dllimport)
MMRESULT
__stdcall
timeKillEvent(
      UINT uTimerID
    );


#line 82 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi2.h"
#pragma endregion


}
#line 87 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi2.h"

#line 89 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmiscapi2.h"


#line 68 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"



































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"











#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"


extern "C" {
#line 38 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"

#pragma region Desktop Family












__declspec(dllimport)
BOOL
__stdcall
sndPlaySoundA(
      LPCSTR pszSound,
      UINT fuSound
    );

__declspec(dllimport)
BOOL
__stdcall
sndPlaySoundW(
      LPCWSTR pszSound,
      UINT fuSound
    );





#line 73 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"



#line 77 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"




















#line 98 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"



















__declspec(dllimport)
BOOL
__stdcall
PlaySoundA(
      LPCSTR pszSound,
      HMODULE hmod,
      DWORD fdwSound
    );

__declspec(dllimport)
BOOL
__stdcall
PlaySoundW(
      LPCWSTR pszSound,
      HMODULE hmod,
      DWORD fdwSound
    );





#line 140 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"



#line 144 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"

#line 146 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"

#line 148 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"
#pragma endregion


}
#line 153 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"

#line 155 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\playsoundapi.h"


#line 72 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"



































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"









#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"


extern "C" {
#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

#pragma region Desktop Family


















struct HWAVE__{int unused;}; typedef struct HWAVE__ *HWAVE;
struct HWAVEIN__{int unused;}; typedef struct HWAVEIN__ *HWAVEIN;
struct HWAVEOUT__{int unused;}; typedef struct HWAVEOUT__ *HWAVEOUT;
typedef HWAVEIN  *LPHWAVEIN;
typedef HWAVEOUT  *LPHWAVEOUT;
typedef DRVCALLBACK WAVECALLBACK;
typedef WAVECALLBACK  *LPWAVECALLBACK;





















#line 85 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



typedef struct wavehdr_tag {
    LPSTR       lpData;                 
    DWORD       dwBufferLength;         
    DWORD       dwBytesRecorded;        
    DWORD_PTR   dwUser;                 
    DWORD       dwFlags;                
    DWORD       dwLoops;                
    struct wavehdr_tag  *lpNext;     
    DWORD_PTR   reserved;               
} WAVEHDR, *PWAVEHDR,  *NPWAVEHDR,  *LPWAVEHDR;












typedef struct tagWAVEOUTCAPSA {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    CHAR    szPname[32];  
    DWORD   dwFormats;             
    WORD    wChannels;             
    WORD    wReserved1;            
    DWORD   dwSupport;             
} WAVEOUTCAPSA, *PWAVEOUTCAPSA, *NPWAVEOUTCAPSA, *LPWAVEOUTCAPSA;
typedef struct tagWAVEOUTCAPSW {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    WCHAR   szPname[32];  
    DWORD   dwFormats;             
    WORD    wChannels;             
    WORD    wReserved1;            
    DWORD   dwSupport;             
} WAVEOUTCAPSW, *PWAVEOUTCAPSW, *NPWAVEOUTCAPSW, *LPWAVEOUTCAPSW;






typedef WAVEOUTCAPSA WAVEOUTCAPS;
typedef PWAVEOUTCAPSA PWAVEOUTCAPS;
typedef NPWAVEOUTCAPSA NPWAVEOUTCAPS;
typedef LPWAVEOUTCAPSA LPWAVEOUTCAPS;
#line 141 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
typedef struct tagWAVEOUTCAPS2A {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    CHAR    szPname[32];  
    DWORD   dwFormats;             
    WORD    wChannels;             
    WORD    wReserved1;            
    DWORD   dwSupport;             
    GUID    ManufacturerGuid;      
    GUID    ProductGuid;           
    GUID    NameGuid;              
} WAVEOUTCAPS2A, *PWAVEOUTCAPS2A, *NPWAVEOUTCAPS2A, *LPWAVEOUTCAPS2A;
typedef struct tagWAVEOUTCAPS2W {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    WCHAR   szPname[32];  
    DWORD   dwFormats;             
    WORD    wChannels;             
    WORD    wReserved1;            
    DWORD   dwSupport;             
    GUID    ManufacturerGuid;      
    GUID    ProductGuid;           
    GUID    NameGuid;              
} WAVEOUTCAPS2W, *PWAVEOUTCAPS2W, *NPWAVEOUTCAPS2W, *LPWAVEOUTCAPS2W;






typedef WAVEOUTCAPS2A WAVEOUTCAPS2;
typedef PWAVEOUTCAPS2A PWAVEOUTCAPS2;
typedef NPWAVEOUTCAPS2A NPWAVEOUTCAPS2;
typedef LPWAVEOUTCAPS2A LPWAVEOUTCAPS2;
#line 178 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"











#line 190 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"













typedef struct tagWAVEINCAPSA {
    WORD    wMid;                    
    WORD    wPid;                    
    MMVERSION vDriverVersion;        
    CHAR    szPname[32];    
    DWORD   dwFormats;               
    WORD    wChannels;               
    WORD    wReserved1;              
} WAVEINCAPSA, *PWAVEINCAPSA, *NPWAVEINCAPSA, *LPWAVEINCAPSA;
typedef struct tagWAVEINCAPSW {
    WORD    wMid;                    
    WORD    wPid;                    
    MMVERSION vDriverVersion;        
    WCHAR   szPname[32];    
    DWORD   dwFormats;               
    WORD    wChannels;               
    WORD    wReserved1;              
} WAVEINCAPSW, *PWAVEINCAPSW, *NPWAVEINCAPSW, *LPWAVEINCAPSW;






typedef WAVEINCAPSA WAVEINCAPS;
typedef PWAVEINCAPSA PWAVEINCAPS;
typedef NPWAVEINCAPSA NPWAVEINCAPS;
typedef LPWAVEINCAPSA LPWAVEINCAPS;
#line 232 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
typedef struct tagWAVEINCAPS2A {
    WORD    wMid;                    
    WORD    wPid;                    
    MMVERSION vDriverVersion;        
    CHAR    szPname[32];    
    DWORD   dwFormats;               
    WORD    wChannels;               
    WORD    wReserved1;              
    GUID    ManufacturerGuid;        
    GUID    ProductGuid;             
    GUID    NameGuid;                
} WAVEINCAPS2A, *PWAVEINCAPS2A, *NPWAVEINCAPS2A, *LPWAVEINCAPS2A;
typedef struct tagWAVEINCAPS2W {
    WORD    wMid;                    
    WORD    wPid;                    
    MMVERSION vDriverVersion;        
    WCHAR   szPname[32];    
    DWORD   dwFormats;               
    WORD    wChannels;               
    WORD    wReserved1;              
    GUID    ManufacturerGuid;        
    GUID    ProductGuid;             
    GUID    NameGuid;                
} WAVEINCAPS2W, *PWAVEINCAPS2W, *NPWAVEINCAPS2W, *LPWAVEINCAPS2W;






typedef WAVEINCAPS2A WAVEINCAPS2;
typedef PWAVEINCAPS2A PWAVEINCAPS2;
typedef NPWAVEINCAPS2A NPWAVEINCAPS2;
typedef LPWAVEINCAPS2A LPWAVEINCAPS2;
#line 267 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"










#line 278 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

































typedef struct waveformat_tag {
    WORD    wFormatTag;        
    WORD    nChannels;         
    DWORD   nSamplesPerSec;    
    DWORD   nAvgBytesPerSec;   
    WORD    nBlockAlign;       
} WAVEFORMAT, *PWAVEFORMAT,  *NPWAVEFORMAT,  *LPWAVEFORMAT;






typedef struct pcmwaveformat_tag {
    WAVEFORMAT  wf;
    WORD        wBitsPerSample;
} PCMWAVEFORMAT, *PPCMWAVEFORMAT,  *NPPCMWAVEFORMAT,  *LPPCMWAVEFORMAT;
#line 329 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"








typedef struct tWAVEFORMATEX
{
    WORD        wFormatTag;         
    WORD        nChannels;          
    DWORD       nSamplesPerSec;     
    DWORD       nAvgBytesPerSec;    
    WORD        nBlockAlign;        
    WORD        wBitsPerSample;     
    WORD        cbSize;             
                                    
} WAVEFORMATEX, *PWAVEFORMATEX,  *NPWAVEFORMATEX,  *LPWAVEFORMATEX;

#line 350 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
typedef const WAVEFORMATEX  *LPCWAVEFORMATEX;


__declspec(dllimport)
UINT
__stdcall
waveOutGetNumDevs(
    void
    );




__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetDevCapsA(
      UINT_PTR uDeviceID,
      LPWAVEOUTCAPSA pwoc,
      UINT cbwoc
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetDevCapsW(
      UINT_PTR uDeviceID,
      LPWAVEOUTCAPSW pwoc,
      UINT cbwoc
    );





#line 386 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



#line 390 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetVolume(
      HWAVEOUT hwo,
      LPDWORD pdwVolume
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutSetVolume(
      HWAVEOUT hwo,
      DWORD dwVolume
    );




#line 413 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetErrorTextA(
      MMRESULT mmrError,
      LPSTR pszText,
      UINT cchText
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetErrorTextW(
      MMRESULT mmrError,
      LPWSTR pszText,
      UINT cchText
    );





#line 439 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



#line 443 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

__declspec(dllimport)
MMRESULT
__stdcall
waveOutOpen(
      LPHWAVEOUT phwo,
      UINT uDeviceID,
      LPCWAVEFORMATEX pwfx,
      DWORD_PTR dwCallback,
      DWORD_PTR dwInstance,
      DWORD fdwOpen
    );


__declspec(dllimport)
MMRESULT
__stdcall
waveOutClose(
      HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutPrepareHeader(
      HWAVEOUT hwo,
      LPWAVEHDR pwh,
      UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutUnprepareHeader(
      HWAVEOUT hwo,
      LPWAVEHDR pwh,
      UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutWrite(
      HWAVEOUT hwo,
      LPWAVEHDR pwh,
      UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutPause(
      HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutRestart(
      HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutReset(
      HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutBreakLoop(
      HWAVEOUT hwo
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetPosition(
      HWAVEOUT hwo,
      LPMMTIME pmmt,
      UINT cbmmt
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetPitch(
      HWAVEOUT hwo,
      LPDWORD pdwPitch
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutSetPitch(
      HWAVEOUT hwo,
      DWORD dwPitch
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetPlaybackRate(
      HWAVEOUT hwo,
      LPDWORD pdwRate
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutSetPlaybackRate(
      HWAVEOUT hwo,
      DWORD dwRate
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveOutGetID(
      HWAVEOUT hwo,
      LPUINT puDeviceID
    );





__declspec(dllimport)
MMRESULT
__stdcall
waveOutMessage(
      HWAVEOUT hwo,
      UINT uMsg,
      DWORD_PTR dw1,
      DWORD_PTR dw2
    );



#line 585 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
#line 586 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

__declspec(dllimport)
UINT
__stdcall
waveInGetNumDevs(
    void
    );




__declspec(dllimport)
MMRESULT
__stdcall
waveInGetDevCapsA(
      UINT_PTR uDeviceID,
      LPWAVEINCAPSA pwic,
      UINT cbwic
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInGetDevCapsW(
      UINT_PTR uDeviceID,
      LPWAVEINCAPSW pwic,
      UINT cbwic
    );





#line 620 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



#line 624 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



__declspec(dllimport)
MMRESULT
__stdcall
waveInGetErrorTextA(
      MMRESULT mmrError,
      LPSTR pszText,
      UINT cchText
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInGetErrorTextW(
      MMRESULT mmrError,
      LPWSTR pszText,
      UINT cchText
    );





#line 650 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



#line 654 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

__declspec(dllimport)
MMRESULT
__stdcall
waveInOpen(
      LPHWAVEIN phwi,
      UINT uDeviceID,
      LPCWAVEFORMATEX pwfx,
      DWORD_PTR dwCallback,
      DWORD_PTR dwInstance,
      DWORD fdwOpen
    );


__declspec(dllimport)
MMRESULT
__stdcall
waveInClose(
      HWAVEIN hwi
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInPrepareHeader(
      HWAVEIN hwi,
      LPWAVEHDR pwh,
      UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInUnprepareHeader(
      HWAVEIN hwi,
      LPWAVEHDR pwh,
      UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInAddBuffer(
      HWAVEIN hwi,
      LPWAVEHDR pwh,
      UINT cbwh
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInStart(
      HWAVEIN hwi
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInStop(
      HWAVEIN hwi
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInReset(
      HWAVEIN hwi
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInGetPosition(
      HWAVEIN hwi,
      LPMMTIME pmmt,
      UINT cbmmt
    );

__declspec(dllimport)
MMRESULT
__stdcall
waveInGetID(
      HWAVEIN hwi,
      LPUINT puDeviceID
    );





__declspec(dllimport)
MMRESULT
__stdcall
waveInMessage(
      HWAVEIN hwi,
      UINT uMsg,
      DWORD_PTR dw1,
      DWORD_PTR dw2
    );



#line 757 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
#line 758 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

#line 760 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"




















struct HMIDI__{int unused;}; typedef struct HMIDI__ *HMIDI;
struct HMIDIIN__{int unused;}; typedef struct HMIDIIN__ *HMIDIIN;
struct HMIDIOUT__{int unused;}; typedef struct HMIDIOUT__ *HMIDIOUT;
struct HMIDISTRM__{int unused;}; typedef struct HMIDISTRM__ *HMIDISTRM;
typedef HMIDI  *LPHMIDI;
typedef HMIDIIN  *LPHMIDIIN;
typedef HMIDIOUT  *LPHMIDIOUT;
typedef HMIDISTRM  *LPHMIDISTRM;
typedef DRVCALLBACK MIDICALLBACK;
typedef MIDICALLBACK  *LPMIDICALLBACK;

typedef WORD PATCHARRAY[128];
typedef WORD  *LPPATCHARRAY;
typedef WORD KEYARRAY[128];
typedef WORD  *LPKEYARRAY;
















#line 812 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"









#line 822 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"











typedef struct tagMIDIOUTCAPSA {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    CHAR    szPname[32];  
    WORD    wTechnology;           
    WORD    wVoices;               
    WORD    wNotes;                
    WORD    wChannelMask;          
    DWORD   dwSupport;             
} MIDIOUTCAPSA, *PMIDIOUTCAPSA, *NPMIDIOUTCAPSA, *LPMIDIOUTCAPSA;
typedef struct tagMIDIOUTCAPSW {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    WCHAR   szPname[32];  
    WORD    wTechnology;           
    WORD    wVoices;               
    WORD    wNotes;                
    WORD    wChannelMask;          
    DWORD   dwSupport;             
} MIDIOUTCAPSW, *PMIDIOUTCAPSW, *NPMIDIOUTCAPSW, *LPMIDIOUTCAPSW;






typedef MIDIOUTCAPSA MIDIOUTCAPS;
typedef PMIDIOUTCAPSA PMIDIOUTCAPS;
typedef NPMIDIOUTCAPSA NPMIDIOUTCAPS;
typedef LPMIDIOUTCAPSA LPMIDIOUTCAPS;
#line 866 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
typedef struct tagMIDIOUTCAPS2A {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    CHAR    szPname[32];  
    WORD    wTechnology;           
    WORD    wVoices;               
    WORD    wNotes;                
    WORD    wChannelMask;          
    DWORD   dwSupport;             
    GUID    ManufacturerGuid;      
    GUID    ProductGuid;           
    GUID    NameGuid;              
} MIDIOUTCAPS2A, *PMIDIOUTCAPS2A, *NPMIDIOUTCAPS2A, *LPMIDIOUTCAPS2A;
typedef struct tagMIDIOUTCAPS2W {
    WORD    wMid;                  
    WORD    wPid;                  
    MMVERSION vDriverVersion;      
    WCHAR   szPname[32];  
    WORD    wTechnology;           
    WORD    wVoices;               
    WORD    wNotes;                
    WORD    wChannelMask;          
    DWORD   dwSupport;             
    GUID    ManufacturerGuid;      
    GUID    ProductGuid;           
    GUID    NameGuid;              
} MIDIOUTCAPS2W, *PMIDIOUTCAPS2W, *NPMIDIOUTCAPS2W, *LPMIDIOUTCAPS2W;






typedef MIDIOUTCAPS2A MIDIOUTCAPS2;
typedef PMIDIOUTCAPS2A PMIDIOUTCAPS2;
typedef NPMIDIOUTCAPS2A NPMIDIOUTCAPS2;
typedef LPMIDIOUTCAPS2A LPMIDIOUTCAPS2;
#line 905 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"













#line 919 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

















#line 937 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"




typedef struct tagMIDIINCAPSA {
    WORD        wMid;                   
    WORD        wPid;                   
    MMVERSION   vDriverVersion;         
    CHAR        szPname[32];   


    DWORD   dwSupport;             
#line 950 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
} MIDIINCAPSA, *PMIDIINCAPSA, *NPMIDIINCAPSA, *LPMIDIINCAPSA;
typedef struct tagMIDIINCAPSW {
    WORD        wMid;                   
    WORD        wPid;                   
    MMVERSION   vDriverVersion;         
    WCHAR       szPname[32];   


    DWORD   dwSupport;             
#line 960 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
} MIDIINCAPSW, *PMIDIINCAPSW, *NPMIDIINCAPSW, *LPMIDIINCAPSW;






typedef MIDIINCAPSA MIDIINCAPS;
typedef PMIDIINCAPSA PMIDIINCAPS;
typedef NPMIDIINCAPSA NPMIDIINCAPS;
typedef LPMIDIINCAPSA LPMIDIINCAPS;
#line 972 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
typedef struct tagMIDIINCAPS2A {
    WORD        wMid;                   
    WORD        wPid;                   
    MMVERSION   vDriverVersion;         
    CHAR        szPname[32];   


    DWORD       dwSupport;              
#line 981 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
    GUID        ManufacturerGuid;       
    GUID        ProductGuid;            
    GUID        NameGuid;               
} MIDIINCAPS2A, *PMIDIINCAPS2A, *NPMIDIINCAPS2A, *LPMIDIINCAPS2A;
typedef struct tagMIDIINCAPS2W {
    WORD        wMid;                   
    WORD        wPid;                   
    MMVERSION   vDriverVersion;         
    WCHAR       szPname[32];   


    DWORD       dwSupport;              
#line 994 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
    GUID        ManufacturerGuid;       
    GUID        ProductGuid;            
    GUID        NameGuid;               
} MIDIINCAPS2W, *PMIDIINCAPS2W, *NPMIDIINCAPS2W, *LPMIDIINCAPS2W;






typedef MIDIINCAPS2A MIDIINCAPS2;
typedef PMIDIINCAPS2A PMIDIINCAPS2;
typedef NPMIDIINCAPS2A NPMIDIINCAPS2;
typedef LPMIDIINCAPS2A LPMIDIINCAPS2;
#line 1009 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"












#line 1022 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"


typedef struct midihdr_tag {
    LPSTR       lpData;               
    DWORD       dwBufferLength;       
    DWORD       dwBytesRecorded;      
    DWORD_PTR   dwUser;               
    DWORD       dwFlags;              
    struct midihdr_tag  *lpNext;   
    DWORD_PTR   reserved;             


    DWORD       dwOffset;             
    DWORD_PTR   dwReserved[8];        
#line 1037 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
} MIDIHDR, *PMIDIHDR,  *NPMIDIHDR,  *LPMIDIHDR;



typedef struct midievent_tag
{
    DWORD       dwDeltaTime;          
    DWORD       dwStreamID;           
    DWORD       dwEvent;              
    DWORD       dwParms[1];           
} MIDIEVENT;

typedef struct midistrmbuffver_tag
{
    DWORD       dwVersion;                  
    DWORD       dwMid;                      
    DWORD       dwOEMVersion;               
} MIDISTRMBUFFVER;
#line 1056 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"




















































typedef struct midiproptimediv_tag
{
    DWORD       cbStruct;
    DWORD       dwTimeDiv;
} MIDIPROPTIMEDIV,  *LPMIDIPROPTIMEDIV;

typedef struct midiproptempo_tag
{
    DWORD       cbStruct;
    DWORD       dwTempo;
} MIDIPROPTEMPO,  *LPMIDIPROPTEMPO;

#line 1121 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"


__declspec(dllimport)
UINT
__stdcall
midiOutGetNumDevs(
    void
    );



__declspec(dllimport)
MMRESULT
__stdcall
midiStreamOpen(
      LPHMIDISTRM phms,
      LPUINT puDeviceID,
      DWORD cMidi,
      DWORD_PTR dwCallback,
      DWORD_PTR dwInstance,
      DWORD fdwOpen
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamClose(
      HMIDISTRM hms
    );


__declspec(dllimport)
MMRESULT
__stdcall
midiStreamProperty(
      HMIDISTRM hms,
      LPBYTE lppropdata,
      DWORD dwProperty
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamPosition(
      HMIDISTRM hms,
      LPMMTIME lpmmt,
      UINT cbmmt
    );


__declspec(dllimport)
MMRESULT
__stdcall
midiStreamOut(
      HMIDISTRM hms,
      LPMIDIHDR pmh,
      UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamPause(
      HMIDISTRM hms
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamRestart(
      HMIDISTRM hms
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiStreamStop(
      HMIDISTRM hms
    );



__declspec(dllimport)
MMRESULT
__stdcall
midiConnect(
      HMIDI hmi,
      HMIDIOUT hmo,
      LPVOID pReserved
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiDisconnect(
      HMIDI hmi,
      HMIDIOUT hmo,
      LPVOID pReserved
    );

#line 1222 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
#line 1223 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetDevCapsA(
      UINT_PTR uDeviceID,
      LPMIDIOUTCAPSA pmoc,
      UINT cbmoc
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetDevCapsW(
      UINT_PTR uDeviceID,
      LPMIDIOUTCAPSW pmoc,
      UINT cbmoc
    );





#line 1249 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



#line 1253 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetVolume(
      HMIDIOUT hmo,
      LPDWORD pdwVolume
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutSetVolume(
      HMIDIOUT hmo,
      DWORD dwVolume
    );




#line 1276 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetErrorTextA(
      MMRESULT mmrError,
      LPSTR pszText,
      UINT cchText
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetErrorTextW(
      MMRESULT mmrError,
      LPWSTR pszText,
      UINT cchText
    );





#line 1302 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



#line 1306 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

__declspec(dllimport)
MMRESULT
__stdcall
midiOutOpen(
      LPHMIDIOUT phmo,
      UINT uDeviceID,
      DWORD_PTR dwCallback,
      DWORD_PTR dwInstance,
      DWORD fdwOpen
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutClose(
      HMIDIOUT hmo
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutPrepareHeader(
      HMIDIOUT hmo,
      LPMIDIHDR pmh,
      UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutUnprepareHeader(
      HMIDIOUT hmo,
      LPMIDIHDR pmh,
      UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutShortMsg(
      HMIDIOUT hmo,
      DWORD dwMsg
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutLongMsg(
      HMIDIOUT hmo,
      LPMIDIHDR pmh,
      UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutReset(
      HMIDIOUT hmo
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutCachePatches(
      HMIDIOUT hmo,
      UINT uBank,
      LPWORD pwpa,
      UINT fuCache
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutCacheDrumPatches(
      HMIDIOUT hmo,
      UINT uPatch,
      LPWORD pwkya,
      UINT fuCache
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiOutGetID(
      HMIDIOUT hmo,
      LPUINT puDeviceID
    );





__declspec(dllimport)
MMRESULT
__stdcall
midiOutMessage(
      HMIDIOUT hmo,
      UINT uMsg,
      DWORD_PTR dw1,
      DWORD_PTR dw2
    );



#line 1412 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
#line 1413 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

__declspec(dllimport)
UINT
__stdcall
midiInGetNumDevs(
    void
    );




__declspec(dllimport)
MMRESULT
__stdcall
midiInGetDevCapsA(
      UINT_PTR uDeviceID,
      LPMIDIINCAPSA pmic,
      UINT cbmic
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInGetDevCapsW(
      UINT_PTR uDeviceID,
      LPMIDIINCAPSW pmic,
      UINT cbmic
    );





#line 1447 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
midiInGetErrorTextA(
      MMRESULT mmrError,
      LPSTR pszText,
      UINT cchText
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInGetErrorTextW(
      MMRESULT mmrError,
      LPWSTR pszText,
      UINT cchText
    );





#line 1470 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"




#line 1475 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

__declspec(dllimport)
MMRESULT
__stdcall
midiInOpen(
      LPHMIDIIN phmi,
      UINT uDeviceID,
      DWORD_PTR dwCallback,
      DWORD_PTR dwInstance,
      DWORD fdwOpen
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInClose(
      HMIDIIN hmi
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInPrepareHeader(
      HMIDIIN hmi,
      LPMIDIHDR pmh,
      UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInUnprepareHeader(
      HMIDIIN hmi,
      LPMIDIHDR pmh,
      UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInAddBuffer(
      HMIDIIN hmi,
      LPMIDIHDR pmh,
      UINT cbmh
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInStart(
      HMIDIIN hmi
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInStop(
      HMIDIIN hmi
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInReset(
      HMIDIIN hmi
    );

__declspec(dllimport)
MMRESULT
__stdcall
midiInGetID(
      HMIDIIN hmi,
      LPUINT puDeviceID
    );





__declspec(dllimport)
MMRESULT
__stdcall
midiInMessage(
      HMIDIIN hmi,
      UINT uMsg,
      DWORD_PTR dw1,
      DWORD_PTR dw2
    );



#line 1567 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
#line 1568 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"


#line 1571 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"















typedef struct tagAUXCAPSA {
    WORD        wMid;                
    WORD        wPid;                
    MMVERSION   vDriverVersion;      
    CHAR        szPname[32];
    WORD        wTechnology;         
    WORD        wReserved1;          
    DWORD       dwSupport;           
} AUXCAPSA, *PAUXCAPSA, *NPAUXCAPSA, *LPAUXCAPSA;
typedef struct tagAUXCAPSW {
    WORD        wMid;                
    WORD        wPid;                
    MMVERSION   vDriverVersion;      
    WCHAR       szPname[32];
    WORD        wTechnology;         
    WORD        wReserved1;          
    DWORD       dwSupport;           
} AUXCAPSW, *PAUXCAPSW, *NPAUXCAPSW, *LPAUXCAPSW;






typedef AUXCAPSA AUXCAPS;
typedef PAUXCAPSA PAUXCAPS;
typedef NPAUXCAPSA NPAUXCAPS;
typedef LPAUXCAPSA LPAUXCAPS;
#line 1615 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
typedef struct tagAUXCAPS2A {
    WORD        wMid;                
    WORD        wPid;                
    MMVERSION   vDriverVersion;      
    CHAR        szPname[32];
    WORD        wTechnology;         
    WORD        wReserved1;          
    DWORD       dwSupport;           
    GUID        ManufacturerGuid;    
    GUID        ProductGuid;         
    GUID        NameGuid;            
} AUXCAPS2A, *PAUXCAPS2A, *NPAUXCAPS2A, *LPAUXCAPS2A;
typedef struct tagAUXCAPS2W {
    WORD        wMid;                
    WORD        wPid;                
    MMVERSION   vDriverVersion;      
    WCHAR       szPname[32];
    WORD        wTechnology;         
    WORD        wReserved1;          
    DWORD       dwSupport;           
    GUID        ManufacturerGuid;    
    GUID        ProductGuid;         
    GUID        NameGuid;            
} AUXCAPS2W, *PAUXCAPS2W, *NPAUXCAPS2W, *LPAUXCAPS2W;






typedef AUXCAPS2A AUXCAPS2;
typedef PAUXCAPS2A PAUXCAPS2;
typedef NPAUXCAPS2A NPAUXCAPS2;
typedef LPAUXCAPS2A LPAUXCAPS2;
#line 1650 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"










#line 1661 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"










__declspec(dllimport)
UINT
__stdcall
auxGetNumDevs(
    void
    );



__declspec(dllimport)
MMRESULT
__stdcall
auxGetDevCapsA(
      UINT_PTR uDeviceID,
      LPAUXCAPSA pac,
      UINT cbac
    );

__declspec(dllimport)
MMRESULT
__stdcall
auxGetDevCapsW(
      UINT_PTR uDeviceID,
      LPAUXCAPSW pac,
      UINT cbac
    );





#line 1703 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



#line 1707 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
auxSetVolume(
      UINT uDeviceID,
      DWORD dwVolume
    );

__declspec(dllimport)
MMRESULT
__stdcall
auxGetVolume(
      UINT uDeviceID,
      LPDWORD pdwVolume
    );





__declspec(dllimport)
MMRESULT
__stdcall
auxOutMessage(
      UINT uDeviceID,
      UINT uMsg,
      DWORD_PTR dw1,
      DWORD_PTR dw2
    );



#line 1740 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
#line 1741 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

#line 1743 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"








struct HMIXEROBJ__{int unused;}; typedef struct HMIXEROBJ__ *HMIXEROBJ;
typedef HMIXEROBJ  *LPHMIXEROBJ;

struct HMIXER__{int unused;}; typedef struct HMIXER__ *HMIXER;
typedef HMIXER      *LPHMIXER;



























__declspec(dllimport)
UINT
__stdcall
mixerGetNumDevs(
    void
    );




typedef struct tagMIXERCAPSA {
    WORD            wMid;                   
    WORD            wPid;                   
    MMVERSION       vDriverVersion;         
    CHAR            szPname[32];   
    DWORD           fdwSupport;             
    DWORD           cDestinations;          
} MIXERCAPSA, *PMIXERCAPSA, *LPMIXERCAPSA;
typedef struct tagMIXERCAPSW {
    WORD            wMid;                   
    WORD            wPid;                   
    MMVERSION       vDriverVersion;         
    WCHAR           szPname[32];   
    DWORD           fdwSupport;             
    DWORD           cDestinations;          
} MIXERCAPSW, *PMIXERCAPSW, *LPMIXERCAPSW;





typedef MIXERCAPSA MIXERCAPS;
typedef PMIXERCAPSA PMIXERCAPS;
typedef LPMIXERCAPSA LPMIXERCAPS;
#line 1818 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
typedef struct tagMIXERCAPS2A {
    WORD            wMid;                   
    WORD            wPid;                   
    MMVERSION       vDriverVersion;         
    CHAR            szPname[32];   
    DWORD           fdwSupport;             
    DWORD           cDestinations;          
    GUID            ManufacturerGuid;       
    GUID            ProductGuid;            
    GUID            NameGuid;               
} MIXERCAPS2A, *PMIXERCAPS2A, *LPMIXERCAPS2A;
typedef struct tagMIXERCAPS2W {
    WORD            wMid;                   
    WORD            wPid;                   
    MMVERSION       vDriverVersion;         
    WCHAR           szPname[32];   
    DWORD           fdwSupport;             
    DWORD           cDestinations;          
    GUID            ManufacturerGuid;       
    GUID            ProductGuid;            
    GUID            NameGuid;               
} MIXERCAPS2W, *PMIXERCAPS2W, *LPMIXERCAPS2W;





typedef MIXERCAPS2A MIXERCAPS2;
typedef PMIXERCAPS2A PMIXERCAPS2;
typedef LPMIXERCAPS2A LPMIXERCAPS2;
#line 1849 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"










#line 1860 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"




__declspec(dllimport)
MMRESULT
__stdcall
mixerGetDevCapsA(
      UINT_PTR uMxId,
      LPMIXERCAPSA pmxcaps,
      UINT cbmxcaps
    );

__declspec(dllimport)
MMRESULT
__stdcall
mixerGetDevCapsW(
      UINT_PTR uMxId,
      LPMIXERCAPSW pmxcaps,
      UINT cbmxcaps
    );





#line 1887 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



#line 1891 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

__declspec(dllimport)
MMRESULT
__stdcall
mixerOpen(
      LPHMIXER phmx,
      UINT uMxId,
      DWORD_PTR dwCallback,
      DWORD_PTR dwInstance,
      DWORD fdwOpen
    );


__declspec(dllimport)
MMRESULT
__stdcall
mixerClose(
      HMIXER hmx
    );


__declspec(dllimport)
DWORD
__stdcall
mixerMessage(
      HMIXER hmx,
      UINT uMsg,
      DWORD_PTR dwParam1,
      DWORD_PTR dwParam2
    );




typedef struct tagMIXERLINEA {
    DWORD       cbStruct;               
    DWORD       dwDestination;          
    DWORD       dwSource;               
    DWORD       dwLineID;               
    DWORD       fdwLine;                
    DWORD_PTR   dwUser;                 
    DWORD       dwComponentType;        
    DWORD       cChannels;              
    DWORD       cConnections;           
    DWORD       cControls;              
    CHAR        szShortName[16];
    CHAR        szName[64];
    struct {
        DWORD       dwType;                 
        DWORD       dwDeviceID;             
        WORD        wMid;                   
        WORD        wPid;                   
        MMVERSION   vDriverVersion;         
        CHAR        szPname[32];   
    } Target;
} MIXERLINEA, *PMIXERLINEA, *LPMIXERLINEA;
typedef struct tagMIXERLINEW {
    DWORD       cbStruct;               
    DWORD       dwDestination;          
    DWORD       dwSource;               
    DWORD       dwLineID;               
    DWORD       fdwLine;                
    DWORD_PTR   dwUser;                 
    DWORD       dwComponentType;        
    DWORD       cChannels;              
    DWORD       cConnections;           
    DWORD       cControls;              
    WCHAR       szShortName[16];
    WCHAR       szName[64];
    struct {
        DWORD       dwType;                 
        DWORD       dwDeviceID;             
        WORD        wMid;                   
        WORD        wPid;                   
        MMVERSION   vDriverVersion;         
        WCHAR       szPname[32];   
    } Target;
} MIXERLINEW, *PMIXERLINEW, *LPMIXERLINEW;





typedef MIXERLINEA MIXERLINE;
typedef PMIXERLINEA PMIXERLINE;
typedef LPMIXERLINEA LPMIXERLINE;
#line 1978 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
























#line 2003 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
























































__declspec(dllimport)
MMRESULT
__stdcall
mixerGetLineInfoA(
      HMIXEROBJ hmxobj,
      LPMIXERLINEA pmxl,
      DWORD fdwInfo
    );

__declspec(dllimport)
MMRESULT
__stdcall
mixerGetLineInfoW(
      HMIXEROBJ hmxobj,
      LPMIXERLINEW pmxl,
      DWORD fdwInfo
    );





#line 2082 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



#line 2086 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"









__declspec(dllimport)
MMRESULT
__stdcall
mixerGetID(
      HMIXEROBJ hmxobj,
      UINT  * puMxId,
      DWORD fdwId
    );









typedef struct tagMIXERCONTROLA {
    DWORD           cbStruct;           
    DWORD           dwControlID;        
    DWORD           dwControlType;      
    DWORD           fdwControl;         
    DWORD           cMultipleItems;     
    CHAR            szShortName[16];
    CHAR            szName[64];
    union {
        struct {
            LONG    lMinimum;           
            LONG    lMaximum;           
        } ;
        struct {
            DWORD   dwMinimum;          
            DWORD   dwMaximum;          
        } ;
        DWORD       dwReserved[6];
    } Bounds;
    union {
        DWORD       cSteps;             
        DWORD       cbCustomData;       
        DWORD       dwReserved[6];      
    } Metrics;
} MIXERCONTROLA, *PMIXERCONTROLA, *LPMIXERCONTROLA;
typedef struct tagMIXERCONTROLW {
    DWORD           cbStruct;           
    DWORD           dwControlID;        
    DWORD           dwControlType;      
    DWORD           fdwControl;         
    DWORD           cMultipleItems;     
    WCHAR           szShortName[16];
    WCHAR           szName[64];
    union {
        struct {
            LONG    lMinimum;           
            LONG    lMaximum;           
        } ;
        struct {
            DWORD   dwMinimum;          
            DWORD   dwMaximum;          
        } ;
        DWORD       dwReserved[6];
    } Bounds;
    union {
        DWORD       cSteps;             
        DWORD       cbCustomData;       
        DWORD       dwReserved[6];      
    } Metrics;
} MIXERCONTROLW, *PMIXERCONTROLW, *LPMIXERCONTROLW;





typedef MIXERCONTROLA MIXERCONTROL;
typedef PMIXERCONTROLA PMIXERCONTROL;
typedef LPMIXERCONTROLA LPMIXERCONTROL;
#line 2171 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



























#line 2199 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

























































































typedef struct tagMIXERLINECONTROLSA {
    DWORD           cbStruct;       
    DWORD           dwLineID;       
    union {
        DWORD       dwControlID;    
        DWORD       dwControlType;  
    } ;
    DWORD           cControls;      
    DWORD           cbmxctrl;       
    LPMIXERCONTROLA pamxctrl;       
} MIXERLINECONTROLSA, *PMIXERLINECONTROLSA, *LPMIXERLINECONTROLSA;
typedef struct tagMIXERLINECONTROLSW {
    DWORD           cbStruct;       
    DWORD           dwLineID;       
    union {
        DWORD       dwControlID;    
        DWORD       dwControlType;  
    } ;
    DWORD           cControls;      
    DWORD           cbmxctrl;       
    LPMIXERCONTROLW pamxctrl;       
} MIXERLINECONTROLSW, *PMIXERLINECONTROLSW, *LPMIXERLINECONTROLSW;





typedef MIXERLINECONTROLSA MIXERLINECONTROLS;
typedef PMIXERLINECONTROLSA PMIXERLINECONTROLS;
typedef LPMIXERLINECONTROLSA LPMIXERLINECONTROLS;
#line 2319 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"













#line 2333 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"







__declspec(dllimport)
MMRESULT
__stdcall
mixerGetLineControlsA(
      HMIXEROBJ hmxobj,
      LPMIXERLINECONTROLSA pmxlc,
      DWORD fdwControls
    );

__declspec(dllimport)
MMRESULT
__stdcall
mixerGetLineControlsW(
      HMIXEROBJ hmxobj,
      LPMIXERLINECONTROLSW pmxlc,
      DWORD fdwControls
    );





#line 2363 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



#line 2367 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"








typedef struct tMIXERCONTROLDETAILS {
    DWORD           cbStruct;       
    DWORD           dwControlID;    
    DWORD           cChannels;      
    union {
        HWND        hwndOwner;      
        DWORD       cMultipleItems; 
    } ;
    DWORD           cbDetails;      
    LPVOID          paDetails;      
} MIXERCONTROLDETAILS, *PMIXERCONTROLDETAILS,  *LPMIXERCONTROLDETAILS;








typedef struct tagMIXERCONTROLDETAILS_LISTTEXTA {
    DWORD           dwParam1;
    DWORD           dwParam2;
    CHAR            szName[64];
} MIXERCONTROLDETAILS_LISTTEXTA, *PMIXERCONTROLDETAILS_LISTTEXTA, *LPMIXERCONTROLDETAILS_LISTTEXTA;
typedef struct tagMIXERCONTROLDETAILS_LISTTEXTW {
    DWORD           dwParam1;
    DWORD           dwParam2;
    WCHAR           szName[64];
} MIXERCONTROLDETAILS_LISTTEXTW, *PMIXERCONTROLDETAILS_LISTTEXTW, *LPMIXERCONTROLDETAILS_LISTTEXTW;





typedef MIXERCONTROLDETAILS_LISTTEXTA MIXERCONTROLDETAILS_LISTTEXT;
typedef PMIXERCONTROLDETAILS_LISTTEXTA PMIXERCONTROLDETAILS_LISTTEXT;
typedef LPMIXERCONTROLDETAILS_LISTTEXTA LPMIXERCONTROLDETAILS_LISTTEXT;
#line 2413 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"







#line 2421 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"





typedef struct tMIXERCONTROLDETAILS_BOOLEAN {
    LONG            fValue;
}       MIXERCONTROLDETAILS_BOOLEAN,
      *PMIXERCONTROLDETAILS_BOOLEAN,
  *LPMIXERCONTROLDETAILS_BOOLEAN;

typedef struct tMIXERCONTROLDETAILS_SIGNED {
    LONG            lValue;
}       MIXERCONTROLDETAILS_SIGNED,
      *PMIXERCONTROLDETAILS_SIGNED,
  *LPMIXERCONTROLDETAILS_SIGNED;


typedef struct tMIXERCONTROLDETAILS_UNSIGNED {
    DWORD           dwValue;
}       MIXERCONTROLDETAILS_UNSIGNED,
      *PMIXERCONTROLDETAILS_UNSIGNED,
  *LPMIXERCONTROLDETAILS_UNSIGNED;




__declspec(dllimport)
MMRESULT
__stdcall
mixerGetControlDetailsA(
      HMIXEROBJ hmxobj,
      LPMIXERCONTROLDETAILS pmxcd,
      DWORD fdwDetails
    );

__declspec(dllimport)
MMRESULT
__stdcall
mixerGetControlDetailsW(
      HMIXEROBJ hmxobj,
      LPMIXERCONTROLDETAILS pmxcd,
      DWORD fdwDetails
    );





#line 2471 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



#line 2475 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"






__declspec(dllimport)
MMRESULT
__stdcall
mixerSetControlDetails(
      HMIXEROBJ hmxobj,
      LPMIXERCONTROLDETAILS pmxcd,
      DWORD fdwDetails
    );







#line 2497 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

#line 2499 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"
#pragma endregion


}
#line 2504 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"

#line 2506 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmeapi.h"



#line 74 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"








#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timeapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timeapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timeapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timeapi.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"



































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timeapi.h"











#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timeapi.h"


extern "C" {
#line 38 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timeapi.h"

#pragma region Desktop Family

















typedef struct timecaps_tag {
    UINT    wPeriodMin;     
    UINT    wPeriodMax;     
} TIMECAPS, *PTIMECAPS,  *NPTIMECAPS,  *LPTIMECAPS;


__declspec(dllimport)
MMRESULT
__stdcall
timeGetSystemTime(
      LPMMTIME pmmt,
      UINT cbmmt
    );

__declspec(dllimport)
DWORD
__stdcall
timeGetTime(
    void
    );

__declspec(dllimport)
MMRESULT
__stdcall
timeGetDevCaps(
      LPTIMECAPS ptc,
      UINT cbtc
    );

__declspec(dllimport)
MMRESULT
__stdcall
timeBeginPeriod(
      UINT uPeriod
    );

__declspec(dllimport)
MMRESULT
__stdcall
timeEndPeriod(
      UINT uPeriod
    );


#line 102 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timeapi.h"

#line 104 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timeapi.h"
#pragma endregion


}
#line 109 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timeapi.h"

#line 111 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\timeapi.h"


#line 83 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"



#line 87 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"





#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"
 









#pragma once
#line 13 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 19 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsyscom.h"



































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"









#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"


extern "C" {
#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"

#pragma region Desktop Family














































































































typedef struct tagJOYCAPSA {
    WORD    wMid;                
    WORD    wPid;                
    CHAR    szPname[32];
    UINT    wXmin;               
    UINT    wXmax;               
    UINT    wYmin;               
    UINT    wYmax;               
    UINT    wZmin;               
    UINT    wZmax;               
    UINT    wNumButtons;         
    UINT    wPeriodMin;          
    UINT    wPeriodMax;          


    UINT    wRmin;               
    UINT    wRmax;               
    UINT    wUmin;               
    UINT    wUmax;               
    UINT    wVmin;               
    UINT    wVmax;               
    UINT    wCaps;               
    UINT    wMaxAxes;            
    UINT    wNumAxes;            
    UINT    wMaxButtons;         
    CHAR    szRegKey[32];
    CHAR    szOEMVxD[260]; 
#line 176 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"
} JOYCAPSA, *PJOYCAPSA, *NPJOYCAPSA, *LPJOYCAPSA;
typedef struct tagJOYCAPSW {
    WORD    wMid;                
    WORD    wPid;                
    WCHAR   szPname[32];
    UINT    wXmin;               
    UINT    wXmax;               
    UINT    wYmin;               
    UINT    wYmax;               
    UINT    wZmin;               
    UINT    wZmax;               
    UINT    wNumButtons;         
    UINT    wPeriodMin;          
    UINT    wPeriodMax;          


    UINT    wRmin;               
    UINT    wRmax;               
    UINT    wUmin;               
    UINT    wUmax;               
    UINT    wVmin;               
    UINT    wVmax;               
    UINT    wCaps;               
    UINT    wMaxAxes;            
    UINT    wNumAxes;            
    UINT    wMaxButtons;         
    WCHAR   szRegKey[32];
    WCHAR   szOEMVxD[260]; 
#line 205 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"
} JOYCAPSW, *PJOYCAPSW, *NPJOYCAPSW, *LPJOYCAPSW;






typedef JOYCAPSA JOYCAPS;
typedef PJOYCAPSA PJOYCAPS;
typedef NPJOYCAPSA NPJOYCAPS;
typedef LPJOYCAPSA LPJOYCAPS;
#line 217 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"
typedef struct tagJOYCAPS2A {
    WORD    wMid;                
    WORD    wPid;                
    CHAR    szPname[32];
    UINT    wXmin;               
    UINT    wXmax;               
    UINT    wYmin;               
    UINT    wYmax;               
    UINT    wZmin;               
    UINT    wZmax;               
    UINT    wNumButtons;         
    UINT    wPeriodMin;          
    UINT    wPeriodMax;          
    UINT    wRmin;               
    UINT    wRmax;               
    UINT    wUmin;               
    UINT    wUmax;               
    UINT    wVmin;               
    UINT    wVmax;               
    UINT    wCaps;               
    UINT    wMaxAxes;            
    UINT    wNumAxes;            
    UINT    wMaxButtons;         
    CHAR    szRegKey[32];
    CHAR    szOEMVxD[260]; 
    GUID    ManufacturerGuid;    
    GUID    ProductGuid;         
    GUID    NameGuid;            
} JOYCAPS2A, *PJOYCAPS2A, *NPJOYCAPS2A, *LPJOYCAPS2A;
typedef struct tagJOYCAPS2W {
    WORD    wMid;                
    WORD    wPid;                
    WCHAR   szPname[32];
    UINT    wXmin;               
    UINT    wXmax;               
    UINT    wYmin;               
    UINT    wYmax;               
    UINT    wZmin;               
    UINT    wZmax;               
    UINT    wNumButtons;         
    UINT    wPeriodMin;          
    UINT    wPeriodMax;          
    UINT    wRmin;               
    UINT    wRmax;               
    UINT    wUmin;               
    UINT    wUmax;               
    UINT    wVmin;               
    UINT    wVmax;               
    UINT    wCaps;               
    UINT    wMaxAxes;            
    UINT    wNumAxes;            
    UINT    wMaxButtons;         
    WCHAR   szRegKey[32];
    WCHAR   szOEMVxD[260]; 
    GUID    ManufacturerGuid;    
    GUID    ProductGuid;         
    GUID    NameGuid;            
} JOYCAPS2W, *PJOYCAPS2W, *NPJOYCAPS2W, *LPJOYCAPS2W;






typedef JOYCAPS2A JOYCAPS2;
typedef PJOYCAPS2A PJOYCAPS2;
typedef NPJOYCAPS2A NPJOYCAPS2;
typedef LPJOYCAPS2A LPJOYCAPS2;
#line 286 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"































#line 318 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"



typedef struct joyinfo_tag {
    UINT wXpos;                 
    UINT wYpos;                 
    UINT wZpos;                 
    UINT wButtons;              
} JOYINFO, *PJOYINFO,  *NPJOYINFO,  *LPJOYINFO;



typedef struct joyinfoex_tag {
    DWORD dwSize;                
    DWORD dwFlags;               
    DWORD dwXpos;                
    DWORD dwYpos;                
    DWORD dwZpos;                
    DWORD dwRpos;                
    DWORD dwUpos;                
    DWORD dwVpos;                
    DWORD dwButtons;             
    DWORD dwButtonNumber;        
    DWORD dwPOV;                 
    DWORD dwReserved1;           
    DWORD dwReserved2;           
} JOYINFOEX, *PJOYINFOEX,  *NPJOYINFOEX,  *LPJOYINFOEX;
#line 346 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"





__declspec(dllimport)
MMRESULT
__stdcall
joyGetPosEx(
      UINT uJoyID,
      LPJOYINFOEX pji
    );

#line 360 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"

__declspec(dllimport)
UINT
__stdcall
joyGetNumDevs(
    void
    );



__declspec(dllimport)
MMRESULT
__stdcall
joyGetDevCapsA(
      UINT_PTR uJoyID,
      LPJOYCAPSA pjc,
      UINT cbjc
    );

__declspec(dllimport)
MMRESULT
__stdcall
joyGetDevCapsW(
      UINT_PTR uJoyID,
      LPJOYCAPSW pjc,
      UINT cbjc
    );





#line 393 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"



#line 397 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"
__declspec(dllimport)
MMRESULT
__stdcall
joyGetPos(
      UINT uJoyID,
      LPJOYINFO pji
    );

__declspec(dllimport)
MMRESULT
__stdcall
joyGetThreshold(
      UINT uJoyID,
      LPUINT puThreshold
    );

__declspec(dllimport)
MMRESULT
__stdcall
joyReleaseCapture(
      UINT uJoyID
    );

__declspec(dllimport)
MMRESULT
__stdcall
joySetCapture(
      HWND hwnd,
      UINT uJoyID,
      UINT uPeriod,
      BOOL fChanged
    );

__declspec(dllimport)
MMRESULT
__stdcall
joySetThreshold(
      UINT uJoyID,
      UINT uThreshold
    );




__declspec(dllimport)
MMRESULT
__stdcall
joyConfigChanged(
      DWORD dwFlags
    );

#line 449 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"

#line 451 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"

#line 453 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"
#pragma endregion


}
#line 458 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"

#line 460 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\joystickapi.h"


#line 93 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"










    

    
#line 107 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"




























#line 136 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"
#pragma endregion


}                       
#line 141 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 144 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"




#line 149 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"

#line 151 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mmsystem.h"




#line 190 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\nb30.h"



















#pragma once
#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\nb30.h"




extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\nb30.h"

#pragma region Desktop Family















typedef struct _NCB {
    UCHAR   ncb_command;            
    UCHAR   ncb_retcode;            
    UCHAR   ncb_lsn;                
    UCHAR   ncb_num;                
    PUCHAR  ncb_buffer;             
    WORD    ncb_length;             
    UCHAR   ncb_callname[16]; 
    UCHAR   ncb_name[16];     
    UCHAR   ncb_rto;                
    UCHAR   ncb_sto;                
    void (__stdcall *ncb_post)( struct _NCB * ); 
    UCHAR   ncb_lana_num;           
    UCHAR   ncb_cmd_cplt;           



    UCHAR   ncb_reserve[10];        
#line 64 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\nb30.h"
    HANDLE  ncb_event;              
                                    
                                    
                                    
} NCB, *PNCB;






typedef struct _ADAPTER_STATUS {
    UCHAR   adapter_address[6];
    UCHAR   rev_major;
    UCHAR   reserved0;
    UCHAR   adapter_type;
    UCHAR   rev_minor;
    WORD    duration;
    WORD    frmr_recv;
    WORD    frmr_xmit;

    WORD    iframe_recv_err;

    WORD    xmit_aborts;
    DWORD   xmit_success;
    DWORD   recv_success;

    WORD    iframe_xmit_err;

    WORD    recv_buff_unavail;
    WORD    t1_timeouts;
    WORD    ti_timeouts;
    DWORD   reserved1;
    WORD    free_ncbs;
    WORD    max_cfg_ncbs;
    WORD    max_ncbs;
    WORD    xmit_buf_unavail;
    WORD    max_dgram_size;
    WORD    pending_sess;
    WORD    max_cfg_sess;
    WORD    max_sess;
    WORD    max_sess_pkt_size;
    WORD    name_count;
} ADAPTER_STATUS, *PADAPTER_STATUS;

typedef struct _NAME_BUFFER {
    UCHAR   name[16];
    UCHAR   name_num;
    UCHAR   name_flags;
} NAME_BUFFER, *PNAME_BUFFER;





















typedef struct _SESSION_HEADER {
    UCHAR   sess_name;
    UCHAR   num_sess;
    UCHAR   rcv_dg_outstanding;
    UCHAR   rcv_any_outstanding;
} SESSION_HEADER, *PSESSION_HEADER;

typedef struct _SESSION_BUFFER {
    UCHAR   lsn;
    UCHAR   state;
    UCHAR   local_name[16];
    UCHAR   remote_name[16];
    UCHAR   rcvs_outstanding;
    UCHAR   sends_outstanding;
} SESSION_BUFFER, *PSESSION_BUFFER;

















typedef struct _LANA_ENUM {
    UCHAR   length;         
    UCHAR   lana[254+1];
} LANA_ENUM, *PLANA_ENUM;






typedef struct _FIND_NAME_HEADER {
    WORD    node_count;
    UCHAR   reserved;
    UCHAR   unique_group;
} FIND_NAME_HEADER, *PFIND_NAME_HEADER;

typedef struct _FIND_NAME_BUFFER {
    UCHAR   length;
    UCHAR   access_control;
    UCHAR   frame_control;
    UCHAR   destination_addr[6];
    UCHAR   source_addr[6];
    UCHAR   routing_info[18];
} FIND_NAME_BUFFER, *PFIND_NAME_BUFFER;






typedef struct _ACTION_HEADER {
    ULONG   transport_id;
    USHORT  action_code;
    USHORT  reserved;
} ACTION_HEADER, *PACTION_HEADER;




















































                                















































UCHAR
__stdcall
Netbios(
    PNCB pncb
    );










#line 318 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\nb30.h"
#pragma endregion


}
#line 323 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\nb30.h"

#line 325 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\nb30.h"
#line 191 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"





















#line 23 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"





#pragma once
#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"


extern "C" {
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"














#line 49 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"





#line 55 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"



#line 59 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"

#line 61 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"

#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"

#line 65 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"



#line 69 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"





#line 75 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"

typedef void * I_RPC_HANDLE;




typedef   long RPC_STATUS;


#line 85 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"



#line 89 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"











#line 101 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"










#line 112 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"





#line 118 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"





#line 124 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"


































#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"




















#pragma once
#line 23 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


extern "C" {
#line 27 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

#pragma region Application Family




























typedef   unsigned char  * RPC_CSTR;




#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
typedef   unsigned short  * RPC_WSTR;
typedef   const unsigned short * RPC_CWSTR;
#line 66 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

typedef I_RPC_HANDLE RPC_BINDING_HANDLE;
typedef RPC_BINDING_HANDLE handle_t;








typedef GUID UUID;


#line 81 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#line 82 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

#line 84 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#pragma endregion

#pragma region Desktop Family


typedef struct _RPC_BINDING_VECTOR
{
    unsigned long Count;
      RPC_BINDING_HANDLE BindingH[1];
} RPC_BINDING_VECTOR;


#line 97 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

typedef struct _UUID_VECTOR
{
  unsigned long Count;
    UUID *Uuid[1];
} UUID_VECTOR;


#line 106 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

#line 108 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#pragma endregion

#pragma region Application Family


typedef void  * RPC_IF_HANDLE;

#line 116 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#pragma endregion

#pragma region Desktop Family




typedef struct _RPC_IF_ID
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_IF_ID;
#line 130 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"














































#line 177 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"








#line 186 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"




#line 191 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"








#line 200 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"








typedef struct _RPC_PROTSEQ_VECTORA
{
    unsigned int Count;
    unsigned char  * Protseq[1];
} RPC_PROTSEQ_VECTORA;

typedef struct _RPC_PROTSEQ_VECTORW
{
    unsigned int Count;
    unsigned short  * Protseq[1];
} RPC_PROTSEQ_VECTORW;





#line 225 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"









#line 235 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
typedef struct _RPC_POLICY {
    unsigned int Length ;
    unsigned long EndpointFlags ;
    unsigned long NICFlags ;
    } RPC_POLICY,   *PRPC_POLICY ;

typedef void __stdcall
RPC_OBJECT_INQ_FN (
      UUID  * ObjectUuid,
      UUID  * TypeUuid,
      RPC_STATUS  * Status
    );

  
typedef RPC_STATUS __stdcall
RPC_IF_CALLBACK_FN (
      RPC_IF_HANDLE  InterfaceUuid,
      void *Context
    ) ;

typedef void __stdcall
RPC_SECURITY_CALLBACK_FN (
      void *Context
    ) ;

#line 261 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#pragma endregion

#pragma region Application Family




#line 269 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#pragma endregion

#pragma region Desktop Family


typedef struct
{
    unsigned int Count;
    unsigned long Stats[1];
} RPC_STATS_VECTOR;






typedef struct
{
  unsigned long Count;
  RPC_IF_ID  * IfId[1];
} RPC_IF_ID_VECTOR;


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingCopy (
      RPC_BINDING_HANDLE SourceBinding,
      RPC_BINDING_HANDLE  * DestinationBinding
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingFree (
      RPC_BINDING_HANDLE  * Binding
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingSetOption ( 
      RPC_BINDING_HANDLE hBinding,
      unsigned long      option,
      ULONG_PTR          optionValue 
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqOption (
       RPC_BINDING_HANDLE hBinding,
       unsigned long      option,
      ULONG_PTR         *pOptionValue 
    );







__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingFromStringBindingA (    
      RPC_CSTR StringBinding,
      RPC_BINDING_HANDLE  * Binding
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingFromStringBindingW (
      RPC_WSTR StringBinding,        
      RPC_BINDING_HANDLE  * Binding
    );





#line 360 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"











#line 372 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

#line 374 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsGetContextBinding (
      void *ContextHandle,
      RPC_BINDING_HANDLE  * Binding
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqObject (
      RPC_BINDING_HANDLE Binding,
      UUID  * ObjectUuid
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingReset (
      RPC_BINDING_HANDLE Binding
    );





__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingSetObject (
      RPC_BINDING_HANDLE Binding,
      UUID  * ObjectUuid
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtInqDefaultProtectLevel (
       unsigned long AuthnSvc,
      unsigned long  *AuthnLevel
    );





__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingToStringBindingA (
      RPC_BINDING_HANDLE Binding,
     RPC_CSTR  * StringBinding
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingToStringBindingW (
      RPC_BINDING_HANDLE Binding,
     RPC_WSTR  * StringBinding
    );





#line 453 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"











#line 465 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingVectorFree (
      RPC_BINDING_VECTOR  *  * BindingVector
    );







__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcStringBindingComposeA (
      RPC_CSTR ObjUuid,
      RPC_CSTR ProtSeq,    
      RPC_CSTR NetworkAddr,
      RPC_CSTR Endpoint,
      RPC_CSTR Options,
     RPC_CSTR  * StringBinding
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcStringBindingComposeW (
      RPC_WSTR ObjUuid,
      RPC_WSTR ProtSeq,    
      RPC_WSTR NetworkAddr,
      RPC_WSTR Endpoint,
      RPC_WSTR Options,
     RPC_WSTR  * StringBinding
    );





#line 511 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"















#line 527 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"





__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcStringBindingParseA (
      RPC_CSTR StringBinding,    
     RPC_CSTR  * ObjUuid,
     RPC_CSTR  * Protseq,
     RPC_CSTR  * NetworkAddr,
     RPC_CSTR  * Endpoint,
     RPC_CSTR  * NetworkOptions
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcStringBindingParseW (
      RPC_WSTR StringBinding,    
     RPC_WSTR  * ObjUuid,
     RPC_WSTR  * Protseq,
     RPC_WSTR  * NetworkAddr,
     RPC_WSTR  * Endpoint,
     RPC_WSTR  * NetworkOptions
    );





#line 563 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"















#line 579 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

#line 581 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeA (
      RPC_CSTR  * String    
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcStringFreeW (
      RPC_WSTR  * String
    );





#line 605 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"










#line 616 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcIfInqId (
      RPC_IF_HANDLE RpcIfHandle,
      RPC_IF_ID  * RpcIfId
    );





__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidA (
      RPC_CSTR Protseq     
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcNetworkIsProtseqValidW (
      RPC_WSTR Protseq
    );





#line 652 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"










#line 663 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtInqComTimeout (
      RPC_BINDING_HANDLE Binding,
      unsigned int  * Timeout
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtSetComTimeout (
      RPC_BINDING_HANDLE Binding,
      unsigned int Timeout
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtSetCancelTimeout(
      long Timeout
    );






__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcNetworkInqProtseqsA (
     RPC_PROTSEQ_VECTORA  *  * ProtseqVector    
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcNetworkInqProtseqsW (
     RPC_PROTSEQ_VECTORW  *  * ProtseqVector    
    );





#line 719 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"










#line 730 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcObjectInqType (
      UUID  * ObjUuid,
       UUID  * TypeUuid
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcObjectSetInqFn (
      RPC_OBJECT_INQ_FN  * InquiryFn
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcObjectSetType (
      UUID  * ObjUuid,
       UUID  * TypeUuid
    );





__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeA (
      RPC_PROTSEQ_VECTORA  *  * ProtseqVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcProtseqVectorFreeW (
      RPC_PROTSEQ_VECTORW  *  * ProtseqVector
    );





#line 783 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"










#line 794 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerInqBindings (
     RPC_BINDING_VECTOR  *  * BindingVector
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerInqIf (
      RPC_IF_HANDLE IfSpec,
      UUID  * MgrTypeUuid,
     void  *  * MgrEpv
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerListen (
      unsigned int MinimumCallThreads,
      unsigned int MaxCalls,
      unsigned int DontWait
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerRegisterIf (
      RPC_IF_HANDLE IfSpec,
      UUID  * MgrTypeUuid,
      void  * MgrEpv
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerRegisterIfEx (
      RPC_IF_HANDLE IfSpec,
      UUID  * MgrTypeUuid,
      void  * MgrEpv,
      unsigned int Flags,
      unsigned int MaxCalls,
      RPC_IF_CALLBACK_FN  *IfCallback
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf2 (
      RPC_IF_HANDLE IfSpec,
      UUID * MgrTypeUuid,
      void * MgrEpv,
      unsigned int Flags,
      unsigned int MaxCalls,
      unsigned int MaxRpcSize,
      RPC_IF_CALLBACK_FN *IfCallbackFn
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerRegisterIf3 (
      RPC_IF_HANDLE IfSpec,
      UUID  * MgrTypeUuid,
      void  * MgrEpv,
      unsigned int Flags,
      unsigned int MaxCalls,
      unsigned int MaxRpcSize,
      RPC_IF_CALLBACK_FN  *IfCallback,
      void  * SecurityDescriptor
    );
#line 881 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUnregisterIf (
      RPC_IF_HANDLE IfSpec,
      UUID  * MgrTypeUuid,
      unsigned int WaitForCallsToComplete
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerUnregisterIfEx (
      RPC_IF_HANDLE IfSpec,
      UUID  * MgrTypeUuid,
      int RundownContextHandles
    );
#line 904 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseAllProtseqs (
      unsigned int MaxCalls,
      void  * SecurityDescriptor
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsEx (
      unsigned int MaxCalls,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIf (
      unsigned int MaxCalls,
      RPC_IF_HANDLE IfSpec,
      void  * SecurityDescriptor
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseAllProtseqsIfEx (
      unsigned int MaxCalls,
      RPC_IF_HANDLE IfSpec,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );






__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqA (
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      void  * SecurityDescriptor
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqExA (
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqW (
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      void  * SecurityDescriptor
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqExW (
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );







#line 1003 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"






















#line 1026 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"





__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqEpA (
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      RPC_CSTR Endpoint,
      void  * SecurityDescriptor
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqEpExA (
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      RPC_CSTR Endpoint,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqEpW (
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      RPC_WSTR Endpoint,
      void  * SecurityDescriptor
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqEpExW (
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      RPC_WSTR Endpoint,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );







#line 1084 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
























#line 1109 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"





__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqIfA (
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      RPC_IF_HANDLE IfSpec,
      void  * SecurityDescriptor
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqIfExA (
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      RPC_IF_HANDLE IfSpec,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqIfW (
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      RPC_IF_HANDLE IfSpec,
      void  * SecurityDescriptor
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerUseProtseqIfExW (
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      RPC_IF_HANDLE IfSpec,
      void  * SecurityDescriptor,
      PRPC_POLICY Policy
    );







#line 1167 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
























#line 1192 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

__declspec(dllimport)
void
__stdcall
RpcServerYield (
    void
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
RpcMgmtStatsVectorFree (
      RPC_STATS_VECTOR ** StatsVector
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtInqStats (
      RPC_BINDING_HANDLE Binding,
     RPC_STATS_VECTOR ** Statistics
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtIsServerListening (
      RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtStopServerListening (
      RPC_BINDING_HANDLE Binding
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtWaitServerListen (
    void
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtSetServerStackSize (
      unsigned long ThreadStackSize
    );


__declspec(dllimport)
void
__stdcall
RpcSsDontSerializeContext (
    void
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtEnableIdleCleanup (
    void
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtInqIfIds (
      RPC_BINDING_HANDLE Binding,
     RPC_IF_ID_VECTOR  *  * IfIdVector
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcIfIdVectorFree (
      RPC_IF_ID_VECTOR  *  * IfIdVector
    );



__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameA (
      RPC_BINDING_HANDLE Binding,
      unsigned long AuthnSvc,
     RPC_CSTR  * ServerPrincName
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtInqServerPrincNameW (
      RPC_BINDING_HANDLE Binding,
      unsigned long AuthnSvc,
     RPC_WSTR  * ServerPrincName
    );





#line 1314 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"












#line 1327 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"



__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameA (
      unsigned long AuthnSvc,
     RPC_CSTR  * PrincName
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerInqDefaultPrincNameW (
      unsigned long AuthnSvc,
     RPC_WSTR  * PrincName
    );





#line 1353 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"











#line 1365 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcEpResolveBinding (
      RPC_BINDING_HANDLE Binding,
      RPC_IF_HANDLE IfSpec
    );





__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameA (
      RPC_BINDING_HANDLE Binding,
      unsigned long EntryNameSyntax,
     RPC_CSTR  * EntryName
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcNsBindingInqEntryNameW (
      RPC_BINDING_HANDLE Binding,
      unsigned long EntryNameSyntax,
     RPC_WSTR  * EntryName
    );





#line 1405 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"












#line 1418 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

#line 1420 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#pragma endregion

#pragma region Application Family


typedef void  * RPC_AUTH_IDENTITY_HANDLE;
typedef void  * RPC_AUTHZ_HANDLE;


























#line 1454 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"



#line 1458 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"





















#line 1480 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


#line 1483 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
















typedef struct _RPC_SECURITY_QOS {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
} RPC_SECURITY_QOS, *PRPC_SECURITY_QOS;







typedef struct _SEC_WINNT_AUTH_IDENTITY_W {
    unsigned short  *User;
  unsigned long UserLength;
    unsigned short  *Domain;
  unsigned long DomainLength;
    unsigned short  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_W, *PSEC_WINNT_AUTH_IDENTITY_W;



#line 1525 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

typedef struct _SEC_WINNT_AUTH_IDENTITY_A {
    unsigned char  *User;
  unsigned long UserLength;
    unsigned char  *Domain;
  unsigned long DomainLength;
    unsigned char  *Password;
  unsigned long PasswordLength;
  unsigned long Flags;
} SEC_WINNT_AUTH_IDENTITY_A, *PSEC_WINNT_AUTH_IDENTITY_A;









#line 1545 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"










#line 1556 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"









#line 1566 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"





#line 1572 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


#line 1575 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned short  *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char  *ServerCertificateSubject;
} RPC_HTTP_TRANSPORT_CREDENTIALS_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_A;



typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W
{
    SEC_WINNT_AUTH_IDENTITY_W *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
      unsigned long *AuthnSchemes;
    unsigned short  *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_W *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
      unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A
{
    SEC_WINNT_AUTH_IDENTITY_A *TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
    unsigned long *AuthnSchemes;
    unsigned char  *ServerCertificateSubject;
    SEC_WINNT_AUTH_IDENTITY_A *ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
    unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V2_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V2_A;

#line 1626 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"



typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
      unsigned long *AuthnSchemes;
    unsigned short  *ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
      unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_W, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_W;

typedef struct _RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A
{
    RPC_AUTH_IDENTITY_HANDLE TransportCredentials;
    unsigned long Flags;
    unsigned long AuthenticationTarget;
    unsigned long NumberOfAuthnSchemes;
      unsigned long *AuthnSchemes;
    unsigned char  *ServerCertificateSubject;
    RPC_AUTH_IDENTITY_HANDLE ProxyCredentials;
    unsigned long NumberOfProxyAuthnSchemes;
      unsigned long *ProxyAuthnSchemes;
} RPC_HTTP_TRANSPORT_CREDENTIALS_V3_A, *PRPC_HTTP_TRANSPORT_CREDENTIALS_V3_A;

#line 1656 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

typedef struct _RPC_SECURITY_QOS_V2_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_W, *PRPC_SECURITY_QOS_V2_W;

typedef struct _RPC_SECURITY_QOS_V2_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
} RPC_SECURITY_QOS_V2_A, *PRPC_SECURITY_QOS_V2_A;




typedef struct _RPC_SECURITY_QOS_V3_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_W, *PRPC_SECURITY_QOS_V3_W;

typedef struct _RPC_SECURITY_QOS_V3_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
} RPC_SECURITY_QOS_V3_A, *PRPC_SECURITY_QOS_V3_A;
#line 1710 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"





typedef struct _RPC_SECURITY_QOS_V4_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_W, *PRPC_SECURITY_QOS_V4_W;

typedef struct _RPC_SECURITY_QOS_V4_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
} RPC_SECURITY_QOS_V4_A, *PRPC_SECURITY_QOS_V4_A;

#line 1744 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"




typedef struct _RPC_SECURITY_QOS_V5_W {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_W *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
  void *ServerSecurityDescriptor;
} RPC_SECURITY_QOS_V5_W, *PRPC_SECURITY_QOS_V5_W;

typedef struct _RPC_SECURITY_QOS_V5_A {
  unsigned long Version;
  unsigned long Capabilities;
  unsigned long IdentityTracking;
  unsigned long ImpersonationType;
  unsigned long AdditionalSecurityInfoType;
  union 
      {
      RPC_HTTP_TRANSPORT_CREDENTIALS_A *HttpCredentials;
      } u;
  void *Sid;
  unsigned int EffectiveOnly;
  void *ServerSecurityDescriptor;
} RPC_SECURITY_QOS_V5_A, *PRPC_SECURITY_QOS_V5_A;

#line 1779 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

#line 1781 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#line 1782 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

#line 1784 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#pragma endregion



#pragma region Desktop Family
























































#line 1846 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"





#line 1852 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"





#line 1858 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"





#line 1864 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"





#line 1870 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


#line 1873 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"














typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_W {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned short *NetworkAddress;
    unsigned short *StringEndpoint;
    union
    {
        unsigned short *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_W, *PRPC_BINDING_HANDLE_TEMPLATE_V1_W;

typedef struct _RPC_BINDING_HANDLE_TEMPLATE_V1_A {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ProtocolSequence;
    unsigned char *NetworkAddress;
    unsigned char *StringEndpoint;
    union
    {
        unsigned char *Reserved;
    } u1;
    UUID ObjectUuid;
} RPC_BINDING_HANDLE_TEMPLATE_V1_A, *PRPC_BINDING_HANDLE_TEMPLATE_V1_A;

typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_W {
    unsigned long Version;
    unsigned short *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_W *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_W, *PRPC_BINDING_HANDLE_SECURITY_V1_W;



typedef struct _RPC_BINDING_HANDLE_SECURITY_V1_A {
    unsigned long Version;
    unsigned char *ServerPrincName;
    unsigned long AuthnLevel;
    unsigned long AuthnSvc;
    SEC_WINNT_AUTH_IDENTITY_A *AuthIdentity;
    RPC_SECURITY_QOS *SecurityQos;
} RPC_BINDING_HANDLE_SECURITY_V1_A, *PRPC_BINDING_HANDLE_SECURITY_V1_A;

#line 1934 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

typedef struct _RPC_BINDING_HANDLE_OPTIONS_V1 {
    unsigned long Version;
    unsigned long Flags;
    unsigned long ComTimeout;
    unsigned long CallTimeout;
} RPC_BINDING_HANDLE_OPTIONS_V1, *PRPC_BINDING_HANDLE_OPTIONS_V1;





















#line 1963 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCreateA (
      RPC_BINDING_HANDLE_TEMPLATE_V1_A * Template,
      RPC_BINDING_HANDLE_SECURITY_V1_A * Security,
      RPC_BINDING_HANDLE_OPTIONS_V1 * Options,
      RPC_BINDING_HANDLE * Binding
    );

#line 1977 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingCreateW (
      RPC_BINDING_HANDLE_TEMPLATE_V1_W * Template,
      RPC_BINDING_HANDLE_SECURITY_V1_W * Security,
      RPC_BINDING_HANDLE_OPTIONS_V1 * Options,
      RPC_BINDING_HANDLE * Binding
    );





#line 1993 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

__declspec(dllimport)
RPC_STATUS 
__stdcall 
RpcBindingGetTrainingContextHandle (
      RPC_BINDING_HANDLE Binding,
     void ** ContextHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall 
RpcServerInqBindingHandle (
      RPC_BINDING_HANDLE * Binding
    );
#line 2009 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

#line 2011 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#pragma endregion



#pragma region Application Family


typedef enum _RPC_HTTP_REDIRECTOR_STAGE
{
    RPCHTTP_RS_REDIRECT = 1,
    RPCHTTP_RS_ACCESS_1,
    RPCHTTP_RS_SESSION,
    RPCHTTP_RS_ACCESS_2,
    RPCHTTP_RS_INTERFACE
} RPC_HTTP_REDIRECTOR_STAGE;

#line 2028 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#pragma endregion

#line 2031 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

#pragma region Desktop Family



typedef RPC_STATUS
(__stdcall * RPC_NEW_HTTP_PROXY_CHANNEL) (
      RPC_HTTP_REDIRECTOR_STAGE RedirectorStage,
      RPC_WSTR ServerName,
      RPC_WSTR ServerPort,
      RPC_WSTR RemoteUser,
      RPC_WSTR AuthType,
      void  * ResourceUuid,
      void  * SessionId,
      void  * Interface,
      void  * Reserved,
      unsigned long Flags,
     RPC_WSTR  * NewServerName,
     RPC_WSTR  * NewServerPort
    );
    









#line 2062 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

typedef void
(__stdcall * RPC_HTTP_PROXY_FREE_STRING) (
      RPC_WSTR String
    );

#line 2069 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#pragma endregion

#line 2072 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

#pragma region Application Family







#line 2082 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#pragma endregion

#pragma region Desktop Family


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcImpersonateClient (
      RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcImpersonateClient2 (
      RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcRevertToSelfEx (
      RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcRevertToSelf (
    void
    );



__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqAuthClientA (
      RPC_BINDING_HANDLE ClientBinding,
      RPC_AUTHZ_HANDLE  * Privs,
     RPC_CSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      unsigned long  * AuthzSvc
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqAuthClientW (
      RPC_BINDING_HANDLE ClientBinding,
      RPC_AUTHZ_HANDLE  * Privs,
     RPC_WSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      unsigned long  * AuthzSvc
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExA (
      RPC_BINDING_HANDLE ClientBinding,
      RPC_AUTHZ_HANDLE  * Privs,
     RPC_CSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      unsigned long  * AuthzSvc,
       unsigned long             Flags
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcBindingInqAuthClientExW (
      RPC_BINDING_HANDLE ClientBinding,
      RPC_AUTHZ_HANDLE  * Privs,
     RPC_WSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      unsigned long  * AuthzSvc,
       unsigned long             Flags
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoA (
      RPC_BINDING_HANDLE Binding,
     RPC_CSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity,
      unsigned long  * AuthzSvc
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoW (
      RPC_BINDING_HANDLE Binding,
     RPC_WSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity,
      unsigned long  * AuthzSvc
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoA (
      RPC_BINDING_HANDLE Binding,
      RPC_CSTR ServerPrincName,
      unsigned long AuthnLevel,
      unsigned long AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
      unsigned long AuthzSvc
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExA (
      RPC_BINDING_HANDLE Binding,
      RPC_CSTR ServerPrincName,
      unsigned long AuthnLevel,
      unsigned long AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
      unsigned long AuthzSvc,
      RPC_SECURITY_QOS * SecurityQos
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoW (
      RPC_BINDING_HANDLE Binding,
      RPC_WSTR ServerPrincName,
      unsigned long AuthnLevel,
      unsigned long AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
      unsigned long AuthzSvc
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingSetAuthInfoExW (
      RPC_BINDING_HANDLE Binding,
      RPC_WSTR ServerPrincName,
      unsigned long AuthnLevel,
      unsigned long AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE AuthIdentity,
      unsigned long AuthzSvc,
      RPC_SECURITY_QOS * SecurityQOS
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExA (
      RPC_BINDING_HANDLE Binding,
     RPC_CSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity,
      unsigned long  * AuthzSvc,
       unsigned long RpcQosVersion,
      RPC_SECURITY_QOS *SecurityQOS
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingInqAuthInfoExW (
      RPC_BINDING_HANDLE Binding,
     RPC_WSTR  * ServerPrincName,
      unsigned long  * AuthnLevel,
      unsigned long  * AuthnSvc,
      RPC_AUTH_IDENTITY_HANDLE  * AuthIdentity,
      unsigned long  * AuthzSvc,
      unsigned long RpcQosVersion,
      RPC_SECURITY_QOS * SecurityQOS
    );

typedef void
(__stdcall * RPC_AUTH_KEY_RETRIEVAL_FN) (
      void  * Arg,
      RPC_WSTR ServerPrincName,
      unsigned long KeyVer,
     void  *  * Key,
      RPC_STATUS  * Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall 
RpcServerCompleteSecurityCallback(
      RPC_BINDING_HANDLE BindingHandle,
      RPC_STATUS Status
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoA (
      RPC_CSTR ServerPrincName,
      unsigned long AuthnSvc,
      RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
      void  * Arg
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerRegisterAuthInfoW (
      RPC_WSTR ServerPrincName,
      unsigned long AuthnSvc,
      RPC_AUTH_KEY_RETRIEVAL_FN GetKeyFn,
      void  * Arg
    );

















#line 2338 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"







































































#line 2410 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"



typedef struct {
    unsigned char  * UserName;
    unsigned char  * ComputerName;
    unsigned short Privilege;
    unsigned long AuthFlags;
} RPC_CLIENT_INFORMATION1,  * PRPC_CLIENT_INFORMATION1;
#line 2420 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#line 2421 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcBindingServerFromClient (
      RPC_BINDING_HANDLE ClientBinding,
      RPC_BINDING_HANDLE  * ServerBinding
    );

__declspec(dllimport)
__declspec(noreturn)
void
__stdcall
RpcRaiseException (
      RPC_STATUS exception
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcTestCancel(
    void
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcServerTestCancel (
      RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcCancelThread(
      void * Thread
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcCancelThreadEx(
      void * Thread,
      long Timeout
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
UuidCreate (
      UUID  * Uuid
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
UuidCreateSequential (
      UUID  * Uuid
    );




__declspec(dllimport)
 
RPC_STATUS
__stdcall
UuidToStringA (
      const UUID  * Uuid,
     RPC_CSTR  * StringUuid
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
UuidFromStringA (
      RPC_CSTR StringUuid,
      UUID  * Uuid
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
UuidToStringW (
      const UUID  * Uuid,
     RPC_WSTR  * StringUuid
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
UuidFromStringW (
      RPC_WSTR StringUuid,
      UUID  * Uuid
    );







#line 2537 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"





















#line 2559 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

__declspec(dllimport)
signed int
__stdcall
UuidCompare (
      UUID  * Uuid1,
      UUID  * Uuid2,
      RPC_STATUS  * Status
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
UuidCreateNil (
      UUID  * NilUuid
    );

__declspec(dllimport)
int
__stdcall
UuidEqual (
      UUID  * Uuid1,
      UUID  * Uuid2,
      RPC_STATUS  * Status
    );

__declspec(dllimport)
unsigned short
__stdcall
UuidHash (
      UUID  * Uuid,
      RPC_STATUS  * Status
    );

__declspec(dllimport)
int
__stdcall
UuidIsNil (
      UUID  * Uuid,
      RPC_STATUS  * Status
    );



__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceA (
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR * BindingVector,
      UUID_VECTOR * UuidVector,
      RPC_CSTR Annotation
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcEpRegisterNoReplaceW (
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR * BindingVector,
      UUID_VECTOR * UuidVector,
      RPC_WSTR Annotation
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcEpRegisterA (
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR * BindingVector,
      UUID_VECTOR * UuidVector,
      RPC_CSTR Annotation
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcEpRegisterW (
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR * BindingVector,
      UUID_VECTOR * UuidVector,
      RPC_WSTR Annotation
    );







#line 2655 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"























#line 2679 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcEpUnregister(
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR * BindingVector,
      UUID_VECTOR * UuidVector
    );





__declspec(dllimport)
 
RPC_STATUS
__stdcall
DceErrorInqTextA (
      RPC_STATUS RpcStatus,
      RPC_CSTR ErrorText
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
DceErrorInqTextW (
      RPC_STATUS RpcStatus,
      RPC_WSTR ErrorText
    );





#line 2718 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"











#line 2730 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

typedef I_RPC_HANDLE * RPC_EP_INQ_HANDLE;












__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtEpEltInqBegin (
       RPC_BINDING_HANDLE EpBinding,
      unsigned long InquiryType,
      RPC_IF_ID  * IfId,
      unsigned long VersOption,
      UUID  * ObjectUuid,
      RPC_EP_INQ_HANDLE  * InquiryContext
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtEpEltInqDone (
      RPC_EP_INQ_HANDLE  * InquiryContext
    );



__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextA (
      RPC_EP_INQ_HANDLE InquiryContext,
      RPC_IF_ID  * IfId,
      RPC_BINDING_HANDLE  * Binding,
      UUID  * ObjectUuid,
     RPC_CSTR  * Annotation
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtEpEltInqNextW (
      RPC_EP_INQ_HANDLE InquiryContext,
      RPC_IF_ID  * IfId,
      RPC_BINDING_HANDLE  * Binding,
      UUID  * ObjectUuid,
     RPC_WSTR  * Annotation
    );





#line 2796 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"













#line 2810 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtEpUnregister (
      RPC_BINDING_HANDLE EpBinding,
      RPC_IF_ID  * IfId,
      RPC_BINDING_HANDLE Binding,
      UUID  * ObjectUuid
    );

typedef int
(__stdcall * RPC_MGMT_AUTHORIZATION_FN) (
      RPC_BINDING_HANDLE ClientBinding,
      unsigned long RequestedMgmtOperation,
      RPC_STATUS  * Status
    );







__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcMgmtSetAuthorizationFn (
      RPC_MGMT_AUTHORIZATION_FN AuthorizationFn
    );


__declspec(dllimport)
int
__stdcall
RpcExceptionFilter (
      unsigned long ExceptionCode
    );
#line 2851 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"














#line 2866 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"



#line 2870 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"



typedef void *RPC_INTERFACE_GROUP, **PRPC_INTERFACE_GROUP;


typedef struct 
{
    unsigned long Version;
    RPC_WSTR ProtSeq;
    RPC_WSTR Endpoint;
    void * SecurityDescriptor;
    unsigned long Backlog;
} RPC_ENDPOINT_TEMPLATEW, *PRPC_ENDPOINT_TEMPLATEW;

typedef struct 
{
    unsigned long Version;
    RPC_CSTR ProtSeq;
    RPC_CSTR Endpoint;
    void * SecurityDescriptor;
    unsigned long Backlog;
} RPC_ENDPOINT_TEMPLATEA, *PRPC_ENDPOINT_TEMPLATEA;







#line 2901 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"










#line 2912 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


typedef struct 
{
    unsigned long Version;
    RPC_IF_HANDLE IfSpec;
    UUID * MgrTypeUuid;
    void * MgrEpv;
    unsigned int Flags;
    unsigned int MaxCalls;
    unsigned int MaxRpcSize;
    RPC_IF_CALLBACK_FN *IfCallback;
    UUID_VECTOR *UuidVector;
    RPC_CSTR Annotation;
    void * SecurityDescriptor;
} RPC_INTERFACE_TEMPLATEA, *PRPC_INTERFACE_TEMPLATEA;

typedef struct 
{
    unsigned long Version;
    RPC_IF_HANDLE IfSpec;
    UUID * MgrTypeUuid;
    void * MgrEpv;
    unsigned int Flags;
    unsigned int MaxCalls;
    unsigned int MaxRpcSize;
    RPC_IF_CALLBACK_FN *IfCallback;
    UUID_VECTOR *UuidVector;
    RPC_WSTR Annotation;
    void * SecurityDescriptor;
} RPC_INTERFACE_TEMPLATEW, *PRPC_INTERFACE_TEMPLATEW;







#line 2951 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


















#line 2970 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"



typedef void __stdcall
RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN (
      RPC_INTERFACE_GROUP IfGroup,
      void* IdleCallbackContext,
      unsigned long IsGroupIdle
    );




__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupCreateW (
      RPC_INTERFACE_TEMPLATEW *Interfaces,
      unsigned long NumIfs,
      RPC_ENDPOINT_TEMPLATEW *Endpoints,
      unsigned long NumEndpoints,
      unsigned long IdlePeriod,
      RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn,
      void* IdleCallbackContext,
      PRPC_INTERFACE_GROUP IfGroup
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupCreateA (
      RPC_INTERFACE_TEMPLATEA *Interfaces,
      unsigned long NumIfs,
      RPC_ENDPOINT_TEMPLATEA *Endpoints,
      unsigned long NumEndpoints,
      unsigned long IdlePeriod,
      RPC_INTERFACE_GROUP_IDLE_CALLBACK_FN IdleCallbackFn,
      void* IdleCallbackContext,
      PRPC_INTERFACE_GROUP IfGroup
    );





#line 3018 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


















#line 3037 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupClose (
      RPC_INTERFACE_GROUP IfGroup
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupActivate (
      RPC_INTERFACE_GROUP IfGroup
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupDeactivate (
      RPC_INTERFACE_GROUP IfGroup,
      unsigned long ForceDeactivation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInterfaceGroupInqBindings (
      RPC_INTERFACE_GROUP IfGroup,
     RPC_BINDING_VECTOR  *  * BindingVector
    );

#line 3069 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


#line 3072 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"
#pragma endregion

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"






















#pragma once
#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"


extern "C" {
#line 29 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"

#pragma region Application Family


typedef struct _RPC_VERSION {
    unsigned short MajorVersion;
    unsigned short MinorVersion;
} RPC_VERSION;

typedef struct _RPC_SYNTAX_IDENTIFIER {
    GUID SyntaxGUID;
    RPC_VERSION SyntaxVersion;
} RPC_SYNTAX_IDENTIFIER,  * PRPC_SYNTAX_IDENTIFIER;

typedef struct _RPC_MESSAGE
{
    RPC_BINDING_HANDLE Handle;
    unsigned long DataRepresentation;
    void  * Buffer;
    unsigned int BufferLength;
    unsigned int ProcNum;
    PRPC_SYNTAX_IDENTIFIER TransferSyntax;
    void  * RpcInterfaceInformation;
    void  * ReservedForRuntime;
    void  * ManagerEpv;
    void  * ImportContext;
    unsigned long RpcFlags;
} RPC_MESSAGE,  * PRPC_MESSAGE;

#line 59 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"
#pragma endregion

#pragma region Desktop Family


typedef RPC_STATUS
__stdcall RPC_FORWARD_FUNCTION(
                        UUID              * InterfaceId,
                        RPC_VERSION       * InterfaceVersion,
                        UUID              * ObjectId,
                        unsigned char          * Rpcpro,
                        void  *  * ppDestEndpoint);

enum RPC_ADDRESS_CHANGE_TYPE
{
    PROTOCOL_NOT_LOADED = 1,
    PROTOCOL_LOADED,
    PROTOCOL_ADDRESS_CHANGE
};

typedef void
__stdcall RPC_ADDRESS_CHANGE_FN(
                         void * arg
                        );

#line 85 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"
#pragma endregion

#pragma region Application Family













#line 102 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"












#line 115 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"


















#line 134 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"











#line 146 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"




typedef
void
(__stdcall  * RPC_DISPATCH_FUNCTION) (
      PRPC_MESSAGE Message
    );
    
typedef struct {
    unsigned int DispatchTableCount;
    RPC_DISPATCH_FUNCTION  * DispatchTable;
    LONG_PTR                          Reserved;
} RPC_DISPATCH_TABLE,  * PRPC_DISPATCH_TABLE;

typedef struct _RPC_PROTSEQ_ENDPOINT
{
    unsigned char  * RpcProtocolSequence;
    unsigned char  * Endpoint;
} RPC_PROTSEQ_ENDPOINT,  * PRPC_PROTSEQ_ENDPOINT;








typedef struct _RPC_SERVER_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER InterfaceId;
    RPC_SYNTAX_IDENTIFIER TransferSyntax;
    PRPC_DISPATCH_TABLE DispatchTable;
    unsigned int RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT RpcProtseqEndpoint;
    void  *DefaultManagerEpv;
    void const  *InterpreterInfo;
    unsigned int Flags ;
} RPC_SERVER_INTERFACE,  * PRPC_SERVER_INTERFACE;

typedef struct _RPC_CLIENT_INTERFACE
{
    unsigned int Length;
    RPC_SYNTAX_IDENTIFIER   InterfaceId;
    RPC_SYNTAX_IDENTIFIER   TransferSyntax;
    PRPC_DISPATCH_TABLE     DispatchTable;
    unsigned int            RpcProtseqEndpointCount;
    PRPC_PROTSEQ_ENDPOINT   RpcProtseqEndpoint;
    ULONG_PTR               Reserved;
    void const  *  InterpreterInfo;
    unsigned int Flags ;
} RPC_CLIENT_INTERFACE,  * PRPC_CLIENT_INTERFACE;

#line 202 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNegotiateTransferSyntax (
      RPC_MESSAGE  * Message
    );
#line 215 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcGetBuffer (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetBufferWithObject (
      RPC_MESSAGE  * Message,
     UUID * ObjectUuid
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcSendReceive (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcFreeBuffer (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcSend (
      PRPC_MESSAGE Message
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcReceive (
      PRPC_MESSAGE Message,
     unsigned int Size
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcFreePipeBuffer (
      RPC_MESSAGE  * Message
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcReallocPipeBuffer (
      PRPC_MESSAGE Message,
     unsigned int NewSize
    );

typedef void * I_RPC_MUTEX;

__declspec(dllimport)
void
__stdcall
I_RpcRequestMutex (
      I_RPC_MUTEX * Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcClearMutex (
     I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void
__stdcall
I_RpcDeleteMutex (
     I_RPC_MUTEX Mutex
    );

__declspec(dllimport)
void  *
__stdcall
I_RpcAllocate (
     unsigned int Size
    );

__declspec(dllimport)
void
__stdcall
I_RpcFree (
     void  * Object
    );

__declspec(dllimport)
void
__stdcall
I_RpcPauseExecution (
     unsigned long Milliseconds
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetExtendedError (
    void
    );

typedef
void
(__stdcall  * PRPC_RUNDOWN) (
    void  * AssociationContext
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcMonitorAssociation (
     RPC_BINDING_HANDLE Handle,
     PRPC_RUNDOWN RundownRoutine,
     void * Context
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcStopMonitorAssociation (
     RPC_BINDING_HANDLE Handle
    );

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
I_RpcGetCurrentCallHandle(
    void
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcGetAssociationContext (
     RPC_BINDING_HANDLE BindingHandle,
     void  *  * AssociationContext
    );

__declspec(dllimport)
void *
__stdcall
I_RpcGetServerContextList (
     RPC_BINDING_HANDLE BindingHandle
    );

__declspec(dllimport)
void
__stdcall
I_RpcSetServerContextList (
     RPC_BINDING_HANDLE BindingHandle,
     void * ServerContextList
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceExported (
     unsigned long EntryNameSyntax,
     unsigned short *EntryName,
     RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsInterfaceUnexported (
     unsigned long EntryNameSyntax,
     unsigned short *EntryName,
     RPC_SERVER_INTERFACE * RpcInterfaceInformation
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingToStaticStringBindingW (
     RPC_BINDING_HANDLE Binding,
     unsigned short **StringBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContext (
     RPC_BINDING_HANDLE Binding,
     void **SecurityContextHandle
    );


typedef struct _RPC_SEC_CONTEXT_KEY_INFO
{
    unsigned long EncryptAlgorithm;
    unsigned long KeySize;
    unsigned long SignatureAlgorithm;
}
RPC_SEC_CONTEXT_KEY_INFO, *PRPC_SEC_CONTEXT_KEY_INFO;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqSecurityContextKeyInfo (
      RPC_BINDING_HANDLE Binding,
      void *KeyInfo
    );

#line 440 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqWireIdForSnego (
      RPC_BINDING_HANDLE Binding,
      unsigned char * WireId
    );


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqMarshalledTargetInfo (
      RPC_BINDING_HANDLE Binding,
      unsigned long * MarshalledTargetInfoSize,
     RPC_CSTR * MarshalledTargetInfo
    );
#line 459 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqLocalClientPID (
     RPC_BINDING_HANDLE Binding,
     unsigned long *Pid
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingHandleToAsyncHandle (
     RPC_BINDING_HANDLE Binding,
     void **AsyncHandle
    );
#line 477 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"



__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameW (
      RPC_BINDING_HANDLE Binding,
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcNsBindingSetEntryNameA (
      RPC_BINDING_HANDLE Binding,
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2A (
      RPC_CSTR NetworkAddress,
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      RPC_CSTR Endpoint,
      void  * SecurityDescriptor,
      void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseqEp2W (
      RPC_WSTR NetworkAddress,
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      RPC_WSTR Endpoint,
      void  * SecurityDescriptor,
      void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2W (
      RPC_WSTR NetworkAddress,
      RPC_WSTR Protseq,
      unsigned int MaxCalls,
      void  * SecurityDescriptor,
      void * Policy
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerUseProtseq2A (
      RPC_CSTR NetworkAddress,
      RPC_CSTR Protseq,
      unsigned int MaxCalls,
      void  * SecurityDescriptor,
      void * Policy
    );










#line 556 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"


































#line 591 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerStartService (
      RPC_WSTR Protseq,
      RPC_WSTR Endpoint,
      RPC_IF_HANDLE IfSpec
    );



__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointW (
      RPC_BINDING_HANDLE Binding,
     RPC_WSTR  *DynamicEndpoint
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcBindingInqDynamicEndpointA (
      RPC_BINDING_HANDLE Binding,
     RPC_CSTR  *DynamicEndpoint
    );





#line 626 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"












#line 639 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerCheckClientRestriction (
     RPC_BINDING_HANDLE Context
    );
#line 648 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"






__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcBindingInqTransportType (
     RPC_BINDING_HANDLE Binding,
     unsigned int  * Type
    );

typedef struct _RPC_TRANSFER_SYNTAX
{
    UUID Uuid;
    unsigned short VersMajor;
    unsigned short VersMinor;
} RPC_TRANSFER_SYNTAX;

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcIfInqTransferSyntaxes (
     RPC_IF_HANDLE RpcIfHandle,
     RPC_TRANSFER_SYNTAX  * TransferSyntaxes,
     unsigned int TransferSyntaxSize,
     unsigned int  * TransferSyntaxCount
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_UuidCreate (
     UUID  * Uuid
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcBindingCopy (
     RPC_BINDING_HANDLE SourceBinding,
     RPC_BINDING_HANDLE  * DestinationBinding
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsClientLocal (
      RPC_BINDING_HANDLE BindingHandle,
     unsigned int  * ClientLocalFlag
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqConnId (
     RPC_BINDING_HANDLE Binding,
     void **ConnId,
     int *pfFirstCall
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingCreateNP (
      RPC_WSTR ServerName,
      RPC_WSTR ServiceName,
      RPC_WSTR NetworkOptions,
      RPC_BINDING_HANDLE *Binding
    );

__declspec(dllimport)
void
__stdcall
I_RpcSsDontSerializeContext (
    void
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcLaunchDatagramReceiveThread(
    void  * pAddress
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcServerRegisterForwardFunction (
     RPC_FORWARD_FUNCTION  * pForwardFunction
    );

RPC_ADDRESS_CHANGE_FN * __stdcall
I_RpcServerInqAddressChangeFn(
    void
    );

RPC_STATUS __stdcall
I_RpcServerSetAddressChangeFn(
     RPC_ADDRESS_CHANGE_FN * pAddressChangeFn
    );








__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqLocalConnAddress (
     RPC_BINDING_HANDLE Binding,
      void *Buffer,
      unsigned long *BufferSize,
     unsigned long *AddressFormat
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqRemoteConnAddress (
     RPC_BINDING_HANDLE Binding,
      void *Buffer,
      unsigned long *BufferSize,
     unsigned long *AddressFormat
    );

__declspec(dllimport)
void
__stdcall
I_RpcSessionStrictContextHandle (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcTurnOnEEInfoPropagation (
    void
    );
#line 799 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcConnectionInqSockBuffSize(
   unsigned long  * RecvBuffSize,
   unsigned long  * SendBuffSize
  );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcConnectionSetSockBuffSize(
    unsigned long RecvBuffSize,
    unsigned long SendBuffSize
   );

typedef
void
(*RPCLT_PDU_FILTER_FUNC) (
     void *Buffer,
     unsigned int BufferLength,
     int fDatagram
    );

typedef
void
(__cdecl *RPC_SETFILTER_FUNC) (
     RPCLT_PDU_FILTER_FUNC pfnFilter
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcServerStartListening(
    void * hWnd
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcServerStopListening(
    void
    );

typedef RPC_STATUS (*RPC_BLOCKING_FN) (
     void * hWnd,
     void * Context,
      void * hSyncEvent
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcBindingSetAsync(
     RPC_BINDING_HANDLE Binding,
     RPC_BLOCKING_FN BlockingFn,
     unsigned long ServerTid
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcSetThreadParams(
     int fClientFree,
      void *Context,
      void * hWndClient
    );

__declspec(dllimport)
unsigned int
__stdcall
I_RpcWindowProc(
     void * hWnd,
     unsigned int Message,
     unsigned int wParam,
     unsigned long lParam
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointA (
      RPC_CSTR Protseq,
      RPC_CSTR Endpoint
    );

__declspec(dllimport)
 
RPC_STATUS
__stdcall
I_RpcServerUnregisterEndpointW (
      RPC_WSTR Protseq,
      RPC_WSTR Endpoint
    );





#line 908 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"
#line 909 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcServerInqTransportType(
     unsigned int  * Type
    );

__declspec(dllimport)
long
__stdcall
I_RpcMapWin32Status (
     RPC_STATUS Status
    );







typedef struct _RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR
{
    unsigned long BufferSize;   
      char *Buffer;               
} RPC_C_OPT_COOKIE_AUTH_DESCRIPTOR;

typedef struct _RDR_CALLOUT_STATE
{
    
    RPC_STATUS LastError;
    void *LastEEInfo;

    RPC_HTTP_REDIRECTOR_STAGE LastCalledStage;

    
    unsigned short *ServerName;   
    unsigned short *ServerPort;   
    unsigned short *RemoteUser;   
    unsigned short *AuthType;     
    unsigned char ResourceTypePresent;
    unsigned char SessionIdPresent;
    unsigned char InterfacePresent;
    UUID ResourceType;
    UUID SessionId;
    RPC_SYNTAX_IDENTIFIER Interface;
    void *CertContext;            
                                  
                                  
} RDR_CALLOUT_STATE;
#line 960 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"


typedef RPC_STATUS
(__stdcall *I_RpcProxyIsValidMachineFn)
        (
          RPC_WSTR Machine,
          RPC_WSTR DotMachine,
          unsigned long PortNumber        
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientAddressFn)
        (
         void *Context,
         char *Buffer,
         unsigned long *BufferLength
        );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetConnectionTimeoutFn)
        (
         unsigned long *ConnectionTimeout
        );


typedef RPC_STATUS
(__stdcall *I_RpcPerformCalloutFn) 
    (
     void *Context,
     RDR_CALLOUT_STATE *CallOutState,
     RPC_HTTP_REDIRECTOR_STAGE Stage
    );

typedef void
(__stdcall *I_RpcFreeCalloutStateFn)
    (
     RDR_CALLOUT_STATE *CallOutState
    );

typedef RPC_STATUS
(__stdcall *I_RpcProxyGetClientSessionAndResourceUUID)
        (
          void *Context,
          int *SessionIdPresent,
          UUID *SessionId,
          int *ResourceIdPresent,
          UUID *ResourceId
        );

#line 1010 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"


typedef RPC_STATUS
(__stdcall *I_RpcProxyFilterIfFn) 
    (
      void *Context,
      UUID *IfUuid,
      unsigned short IfMajorVersion,
      int *fAllow
    );

typedef enum RpcProxyPerfCounters
{
    RpcCurrentUniqueUser = 1,    
    RpcBackEndConnectionAttempts, 
    RpcBackEndConnectionFailed, 
    RpcRequestsPerSecond, 
    RpcIncomingConnections, 
    RpcIncomingBandwidth, 
    RpcOutgoingBandwidth, 
    RpcAttemptedLbsDecisions, 
    RpcFailedLbsDecisions, 
    RpcAttemptedLbsMessages, 
    RpcFailedLbsMessages, 
    RpcLastCounter 
} RpcPerfCounters;

typedef void
(__stdcall *I_RpcProxyUpdatePerfCounterFn)
    (
      RpcPerfCounters Counter,
      int ModifyTrend,
      unsigned long Size
    );

 typedef void
(__stdcall *I_RpcProxyUpdatePerfCounterBackendServerFn)
    (
      unsigned short* MachineName,
      int IsConnectEvent
    );

#line 1053 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"





typedef struct tagI_RpcProxyCallbackInterface
{
    I_RpcProxyIsValidMachineFn IsValidMachineFn;
    I_RpcProxyGetClientAddressFn GetClientAddressFn;
    I_RpcProxyGetConnectionTimeoutFn GetConnectionTimeoutFn;
    I_RpcPerformCalloutFn PerformCalloutFn;
    I_RpcFreeCalloutStateFn FreeCalloutStateFn;
    I_RpcProxyGetClientSessionAndResourceUUID GetClientSessionAndResourceUUIDFn;

    I_RpcProxyFilterIfFn ProxyFilterIfFn;
    I_RpcProxyUpdatePerfCounterFn RpcProxyUpdatePerfCounterFn;
    I_RpcProxyUpdatePerfCounterBackendServerFn RpcProxyUpdatePerfCounterBackendServerFn;
#line 1071 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"
} I_RpcProxyCallbackInterface;

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcProxyNewConnection (
     unsigned long ConnectionType,
     unsigned short *ServerAddress,
     unsigned short *ServerPort,
     unsigned short *MinConnTimeout,
     void *ConnectionParameter,
      RDR_CALLOUT_STATE *CallOutState, 
     I_RpcProxyCallbackInterface *ProxyCallbackInterface
    );
    



















#line 1106 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"
        
#line 1108 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReplyToClientWithStatus (
     void *ConnectionParameter,
     RPC_STATUS RpcStatus
    );

__declspec(dllimport)
void
__stdcall
I_RpcRecordCalloutFailure (
     RPC_STATUS RpcStatus,
     RDR_CALLOUT_STATE *CallOutState,
     unsigned short *DllName
    );
#line 1127 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcMgmtEnableDedicatedThreadPool (
    );
#line 1135 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcGetDefaultSD(
      void  ** ppSecurityDescriptor
    );
#line 1144 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcOpenClientProcess(
      RPC_BINDING_HANDLE Binding,
      unsigned long DesiredAccess,
     void** ClientProcess
    );
#line 1155 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"


__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingIsServerLocal(
      RPC_BINDING_HANDLE Binding,
      unsigned int * ServerLocalFlag
    );

RPC_STATUS __stdcall
I_RpcBindingSetPrivateOption (
      RPC_BINDING_HANDLE hBinding,
      unsigned long      option,
      ULONG_PTR          optionValue
    );



#line 1175 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"

#line 1177 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"
#pragma endregion


}
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"

#line 1184 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdcep.h"
#line 3075 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"


}
#line 3079 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

#line 3081 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcdce.h"

#line 159 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsi.h"





















#pragma once
#line 24 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsi.h"

#pragma region Desktop Family


typedef void  * RPC_NS_HANDLE;















__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR  *BindingVec,
      UUID_VECTOR  *ObjectUuidVec
    );


__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID_VECTOR  *ObjectUuidVec
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingExportW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      RPC_BINDING_VECTOR  *BindingVec,
      UUID_VECTOR  *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingUnexportW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID_VECTOR  *ObjectUuidVec
    );

#line 82 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsi.h"



RPC_STATUS __stdcall
RpcNsBindingExportPnPA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID_VECTOR *ObjectVector
    );



RPC_STATUS __stdcall
RpcNsBindingExportPnPW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID_VECTOR *ObjectVector
    );

RPC_STATUS __stdcall
RpcNsBindingUnexportPnPW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID_VECTOR *ObjectVector
    );

#line 120 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsi.h"



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID  *ObjUuid,
      unsigned long BindingMaxCount,
      RPC_NS_HANDLE  *LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupBeginW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID  *ObjUuid,
      unsigned long BindingMaxCount,
      RPC_NS_HANDLE  *LookupContext
    );
#line 145 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupNext(
      RPC_NS_HANDLE LookupContext,
     RPC_BINDING_VECTOR  *  * BindingVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingLookupDone(
      RPC_NS_HANDLE  * LookupContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteA(
      unsigned long GroupNameSyntax,
      RPC_CSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddA(
      unsigned long GroupNameSyntax,
      RPC_CSTR GroupName,
      unsigned long MemberNameSyntax,
      RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveA(
      unsigned long GroupNameSyntax,
      RPC_CSTR GroupName,
      unsigned long MemberNameSyntax,
      RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginA(
      unsigned long GroupNameSyntax,
      RPC_CSTR GroupName,
      unsigned long MemberNameSyntax,
      RPC_NS_HANDLE  *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextA(
      RPC_NS_HANDLE InquiryContext,
     RPC_CSTR  *MemberName
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupDeleteW(
      unsigned long GroupNameSyntax,
      RPC_WSTR GroupName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrAddW(
      unsigned long GroupNameSyntax,
      RPC_WSTR GroupName,
      unsigned long MemberNameSyntax,
      RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrRemoveW(
      unsigned long GroupNameSyntax,
      RPC_WSTR GroupName,
      unsigned long MemberNameSyntax,
      RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqBeginW(
      unsigned long GroupNameSyntax,
      RPC_WSTR GroupName,
      unsigned long MemberNameSyntax,
      RPC_NS_HANDLE  *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqNextW(
      RPC_NS_HANDLE InquiryContext,
     RPC_WSTR  *MemberName
    );

#line 234 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsGroupMbrInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteA(
      unsigned long ProfileNameSyntax,
      RPC_CSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddA(
      unsigned long ProfileNameSyntax,
      RPC_CSTR ProfileName,
      RPC_IF_ID  *IfId,
      unsigned long MemberNameSyntax,
      RPC_CSTR MemberName,
      unsigned long Priority,
      RPC_CSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveA(
      unsigned long ProfileNameSyntax,
      RPC_CSTR ProfileName,
      RPC_IF_ID  *IfId,
      unsigned long MemberNameSyntax,
      RPC_CSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginA(
      unsigned long ProfileNameSyntax,
      RPC_CSTR ProfileName,
      unsigned long InquiryType,
      RPC_IF_ID  *IfId,
      unsigned long VersOption,
      unsigned long MemberNameSyntax,
      RPC_CSTR MemberName,
      RPC_NS_HANDLE  *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextA(
      RPC_NS_HANDLE InquiryContext,
      RPC_IF_ID  *IfId,
      RPC_CSTR  *MemberName,
      unsigned long  *Priority,
      RPC_CSTR  *Annotation
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileDeleteW(
      unsigned long ProfileNameSyntax,
      RPC_WSTR ProfileName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltAddW(
      unsigned long ProfileNameSyntax,
      RPC_WSTR ProfileName,
      RPC_IF_ID  *IfId,
      unsigned long MemberNameSyntax,
      RPC_WSTR MemberName,
      unsigned long Priority,
      RPC_WSTR Annotation
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltRemoveW(
      unsigned long ProfileNameSyntax,
      RPC_WSTR ProfileName,
      RPC_IF_ID  *IfId,
      unsigned long MemberNameSyntax,
      RPC_WSTR MemberName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqBeginW(
      unsigned long ProfileNameSyntax,
      RPC_WSTR ProfileName,
      unsigned long InquiryType,
      RPC_IF_ID  *IfId,
      unsigned long VersOption,
      unsigned long MemberNameSyntax,
      RPC_WSTR MemberName,
      RPC_NS_HANDLE  *InquiryContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqNextW(
      RPC_NS_HANDLE InquiryContext,
      RPC_IF_ID  *IfId,
      RPC_WSTR  *MemberName,
      unsigned long  *Priority,
      RPC_WSTR  *Annotation
    );

#line 339 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsProfileEltInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_NS_HANDLE  *InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqBeginW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_NS_HANDLE  *InquiryContext
    );

#line 364 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqNext(
      RPC_NS_HANDLE InquiryContext,
     UUID  * ObjUuid
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryObjectInqDone(
      RPC_NS_HANDLE  * InquiryContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_CSTR  *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_ID  *IfId,
      unsigned long VersOption,
      UUID_VECTOR  *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_ID_VECTOR  *  *IfIdVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtHandleSetExpAge(
     RPC_NS_HANDLE NsHandle,
     unsigned long ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtInqExpAge(
     unsigned long  * ExpirationAge
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtSetExpAge(
     unsigned long ExpirationAge
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsEntryExpandNameW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_WSTR  *ExpandedName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtBindingUnexportW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_ID  *IfId,
      unsigned long VersOption,
      UUID_VECTOR  *ObjectUuidVec
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryCreateW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryDeleteW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsMgmtEntryInqIfIdsW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_ID_VECTOR  *  *IfIdVec
    );

#line 467 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsi.h"



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginA(
      unsigned long EntryNameSyntax,
      RPC_CSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID  *ObjUuid,
      RPC_NS_HANDLE  *ImportContext
    );



__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportBeginW(
      unsigned long EntryNameSyntax,
      RPC_WSTR EntryName,
      RPC_IF_HANDLE IfSpec,
      UUID  *ObjUuid,
      RPC_NS_HANDLE  *ImportContext
    );

#line 491 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsi.h"

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportNext(
     RPC_NS_HANDLE ImportContext,
     RPC_BINDING_HANDLE   * Binding
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingImportDone(
      RPC_NS_HANDLE  * ImportContext
    );

__declspec(dllimport) RPC_STATUS __stdcall
RpcNsBindingSelect(
      RPC_BINDING_VECTOR  * BindingVec,
     RPC_BINDING_HANDLE   * Binding
    );


















































#line 559 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsi.h"

#line 561 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsi.h"
#pragma endregion

#line 564 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsi.h"
#line 161 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"
#line 162 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcnterr.h"

















#pragma once
#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcnterr.h"




#pragma region Desktop Family


















#line 44 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcnterr.h"






















































































































































































































































































































































































































































































































#line 547 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcnterr.h"

#line 549 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcnterr.h"
#pragma endregion

#line 552 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcnterr.h"
#line 163 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"



#line 167 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"




































#line 204 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"










#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"





















#pragma once
#line 24 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"



#line 28 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"


extern "C" {
#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"

#pragma region Desktop Family






#line 41 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"







#line 49 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"




typedef
enum _RPC_NOTIFICATION_TYPES
{
    RpcNotificationTypeNone,
    RpcNotificationTypeEvent,

    RpcNotificationTypeApc,
    RpcNotificationTypeIoc,
    RpcNotificationTypeHwnd,
#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"
    RpcNotificationTypeCallback
} RPC_NOTIFICATION_TYPES;


typedef
enum _RPC_ASYNC_EVENT {
    RpcCallComplete,
    RpcSendComplete,
    RpcReceiveComplete,
    RpcClientDisconnect,
    RpcClientCancel
    } RPC_ASYNC_EVENT;
    









#line 86 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"

struct _RPC_ASYNC_STATE;

typedef void __stdcall
RPCNOTIFICATION_ROUTINE (
                  struct _RPC_ASYNC_STATE *pAsync,
                  void *Context,
                  RPC_ASYNC_EVENT Event);
typedef RPCNOTIFICATION_ROUTINE *PFN_RPCNOTIFICATION_ROUTINE;

typedef union _RPC_ASYNC_NOTIFICATION_INFO {

    
    
    
    struct {
        PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
        HANDLE hThread;
        } APC;




    
    
    
    struct {
        HANDLE hIOPort;
        DWORD dwNumberOfBytesTransferred;
        DWORD_PTR dwCompletionKey;
        LPOVERLAPPED lpOverlapped;
        } IOC;

#line 120 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"

    
    
    
    struct {
        HWND hWnd;
        UINT Msg;
        } HWND;

#line 130 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"
#line 131 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"


    
    
    
    
    HANDLE hEvent;
    




#line 144 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"

    
    
    
    
    
    PFN_RPCNOTIFICATION_ROUTINE NotificationRoutine;
} RPC_ASYNC_NOTIFICATION_INFO, *PRPC_ASYNC_NOTIFICATION_INFO;

typedef struct _RPC_ASYNC_STATE {
    unsigned int    Size; 
    unsigned long   Signature;
    long   Lock;
    unsigned long   Flags;
    void           *StubInfo;
    void           *UserInfo;
    void           *RuntimeInfo;
    RPC_ASYNC_EVENT Event;

    RPC_NOTIFICATION_TYPES NotificationType;
    RPC_ASYNC_NOTIFICATION_INFO u;

    LONG_PTR Reserved[4];
    } RPC_ASYNC_STATE, *PRPC_ASYNC_STATE;







__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcAsyncInitializeHandle (
      PRPC_ASYNC_STATE pAsync,
      unsigned int     Size
    );


__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcAsyncRegisterInfo (
      PRPC_ASYNC_STATE pAsync
    ) ;
#line 193 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcAsyncGetCallStatus (
      PRPC_ASYNC_STATE pAsync
    ) ;

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcAsyncCompleteCall (
      PRPC_ASYNC_STATE pAsync,
      void *Reply
    ) ;

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcAsyncAbortCall (
      PRPC_ASYNC_STATE pAsync,
      unsigned long ExceptionCode
    ) ;

__declspec(dllimport)
 
RPC_STATUS
__stdcall
RpcAsyncCancelCall (
      PRPC_ASYNC_STATE pAsync,
      BOOL fAbort
    ) ;






typedef enum tagExtendedErrorParamTypes
{
    eeptAnsiString = 1,
    eeptUnicodeString,
    eeptLongVal,
    eeptShortVal,
    eeptPointerVal,
    eeptNone,
    eeptBinary
} ExtendedErrorParamTypes;




typedef struct tagBinaryParam
{
    void *Buffer;
    short Size;
} BinaryParam;

typedef struct tagRPC_EE_INFO_PARAM
{
    ExtendedErrorParamTypes ParameterType;
    union
        {
        LPSTR AnsiString;
        LPWSTR UnicodeString;
        long LVal;
        short SVal;
        ULONGLONG PVal;
        BinaryParam BVal;
        } u;
} RPC_EE_INFO_PARAM;








#line 276 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"

typedef struct tagRPC_EXTENDED_ERROR_INFO
{
    ULONG Version;
    LPWSTR ComputerName;
    ULONG ProcessID;
    union
        {

        SYSTEMTIME SystemTime;
        FILETIME FileTime;


#line 290 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"
        } u;
    ULONG GeneratingComponent;
    ULONG Status;
    USHORT DetectionLocation;
    USHORT Flags;
    int NumberOfParameters;
    RPC_EE_INFO_PARAM Parameters[4];
} RPC_EXTENDED_ERROR_INFO;

typedef struct tagRPC_ERROR_ENUM_HANDLE
{
    ULONG Signature;
    void *CurrentPos;
    void *Head;
} RPC_ERROR_ENUM_HANDLE;

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorStartEnumeration (
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorGetNextRecord (
      RPC_ERROR_ENUM_HANDLE *EnumHandle, 
      BOOL CopyStrings, 
      RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorEndEnumeration (
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorResetEnumeration (
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorGetNumberOfRecords (
      RPC_ERROR_ENUM_HANDLE *EnumHandle, 
      int *Records
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorSaveErrorInfo (
      RPC_ERROR_ENUM_HANDLE *EnumHandle, 
     PVOID *ErrorBlob, 
      size_t *BlobSize
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorLoadErrorInfo (
      PVOID ErrorBlob, 
      size_t BlobSize, 
      RPC_ERROR_ENUM_HANDLE *EnumHandle
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcErrorAddRecord (
      RPC_EXTENDED_ERROR_INFO *ErrorInfo
    );

__declspec(dllimport)
void 
__stdcall
RpcErrorClearInformation (
    void
    );

#line 377 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"



__declspec(dllimport)
RPC_STATUS
__stdcall
RpcAsyncCleanupThread (
      DWORD dwTimeout
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcGetAuthorizationContextForClient (
      RPC_BINDING_HANDLE ClientBinding,
      BOOL ImpersonateOnReturn,
      PVOID Reserved1,
      PLARGE_INTEGER pExpirationTime,
      LUID Reserved2,
      DWORD Reserved3,
      PVOID Reserved4,
      PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall
RpcFreeAuthorizationContext (
      PVOID *pAuthzClientContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockExclusive (
      RPC_BINDING_HANDLE ServerBindingHandle,
      PVOID UserContext
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSsContextLockShared (
      RPC_BINDING_HANDLE ServerBindingHandle,
      PVOID UserContext
    );


typedef enum tagRpcLocalAddressFormat
{
    rlafInvalid = 0,
    rlafIPv4,
    rlafIPv6
} RpcLocalAddressFormat;

typedef struct _RPC_CALL_LOCAL_ADDRESS_V1
{
    unsigned int Version;
    void *Buffer;
    unsigned long BufferSize;
    RpcLocalAddressFormat AddressFormat;
} RPC_CALL_LOCAL_ADDRESS_V1, *PRPC_CALL_LOCAL_ADDRESS_V1;



#line 443 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"







#line 451 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"




#line 456 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"





#line 462 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"

typedef struct tagRPC_CALL_ATTRIBUTES_V1_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_W;

typedef struct tagRPC_CALL_ATTRIBUTES_V1_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
} RPC_CALL_ATTRIBUTES_V1_A;






typedef enum tagRpcCallType
{
    rctInvalid = 0,
    rctNormal,
    rctTraining,
    rctGuaranteed
} RpcCallType;

typedef enum tagRpcCallClientLocality
{
    rcclInvalid = 0,
    rcclLocal,
    rcclRemote,
    rcclClientUnknownLocality
} RpcCallClientLocality;


typedef struct tagRPC_CALL_ATTRIBUTES_V2_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID; 
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;	
    unsigned short OpNum;
    UUID InterfaceUuid;        
} RPC_CALL_ATTRIBUTES_V2_W;
    
typedef struct tagRPC_CALL_ATTRIBUTES_V2_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID; 
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;	
    unsigned short OpNum;
    UUID InterfaceUuid;    
} RPC_CALL_ATTRIBUTES_V2_A;
#line 555 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"


typedef struct tagRPC_CALL_ATTRIBUTES_V3_W
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned short *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned short *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    RpcCallClientLocality IsClientLocal;
    HANDLE ClientPID; 
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;	
    unsigned short OpNum;
    UUID InterfaceUuid;
    unsigned long          ClientIdentifierBufferLength;
    unsigned char          *ClientIdentifier;
} RPC_CALL_ATTRIBUTES_V3_W;
    
typedef struct tagRPC_CALL_ATTRIBUTES_V3_A
{
    unsigned int Version;
    unsigned long Flags;
    unsigned long ServerPrincipalNameBufferLength;
    unsigned char *ServerPrincipalName;
    unsigned long ClientPrincipalNameBufferLength;
    unsigned char *ClientPrincipalName;
    unsigned long AuthenticationLevel;
    unsigned long AuthenticationService;
    BOOL NullSession;
    BOOL KernelModeCaller;
    unsigned long ProtocolSequence;
    unsigned long IsClientLocal;
    HANDLE ClientPID; 
    unsigned long CallStatus;
    RpcCallType CallType;
    RPC_CALL_LOCAL_ADDRESS_V1 *CallLocalAddress;	
    unsigned short OpNum;
    UUID InterfaceUuid;    
    unsigned long          ClientIdentifierBufferLength;
    unsigned char          *ClientIdentifier;
} RPC_CALL_ATTRIBUTES_V3_A;

#line 606 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesW (
      RPC_BINDING_HANDLE ClientBinding,
      void *RpcCallAttributes
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcServerInqCallAttributesA (
      RPC_BINDING_HANDLE ClientBinding,
      void *RpcCallAttributes
    );














#line 637 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"


#line 640 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"

#line 642 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"


typedef RPC_CALL_ATTRIBUTES_V3_A RPC_CALL_ATTRIBUTES;




#line 650 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"



typedef enum _RPC_NOTIFICATIONS
{
    RpcNotificationCallNone = 0,
    RpcNotificationClientDisconnect = 1,
    RpcNotificationCallCancel = 2      
} RPC_NOTIFICATIONS;



__declspec(dllimport)
RPC_STATUS 
__stdcall 
RpcServerSubscribeForNotification (
      RPC_BINDING_HANDLE Binding,
      RPC_NOTIFICATIONS Notification,
      RPC_NOTIFICATION_TYPES NotificationType,
      RPC_ASYNC_NOTIFICATION_INFO *NotificationInfo
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall 
RpcServerUnsubscribeForNotification (
      RPC_BINDING_HANDLE Binding,
      RPC_NOTIFICATIONS Notification,
      unsigned long *NotificationsQueued
    );

#line 682 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"
#line 683 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"
 

__declspec(dllimport)
RPC_STATUS 
__stdcall 
RpcBindingBind (
      PRPC_ASYNC_STATE pAsync,
      RPC_BINDING_HANDLE Binding,
      RPC_IF_HANDLE IfSpec    
    );

__declspec(dllimport)
RPC_STATUS 
__stdcall 
RpcBindingUnbind (
      RPC_BINDING_HANDLE Binding
    );

#line 702 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"
#line 703 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"



 
RPC_STATUS __stdcall
I_RpcAsyncSetHandle (
       PRPC_MESSAGE Message,
       PRPC_ASYNC_STATE pAsync
    );

 
RPC_STATUS __stdcall
I_RpcAsyncAbortCall (
      PRPC_ASYNC_STATE pAsync,
      unsigned long ExceptionCode
    ) ;


int 
__stdcall
I_RpcExceptionFilter (
      unsigned long ExceptionCode
    );
#line 727 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"



__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcBindingInqClientTokenAttributes (
      RPC_BINDING_HANDLE Binding,
      LUID * TokenId,
      LUID * AuthenticationId,
      LUID * ModifiedId
    );
    
#line 741 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"

#line 743 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"
#pragma endregion


}
#line 748 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"



#line 752 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"

#line 754 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcasync.h"

#line 215 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"

#line 217 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"



#line 221 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"


}
#line 225 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"

#line 227 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpc.h"

#line 192 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 193 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"























#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
#line 26 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"








#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"








#line 45 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
#line 46 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 50 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
#line 51 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


extern "C" {            
#line 55 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


#pragma region Desktop Family




struct HDROP__{int unused;}; typedef struct HDROP__ *HDROP;

 
extern "C" __declspec(dllimport) UINT __stdcall DragQueryFileA(  HDROP hDrop,   UINT iFile,   LPSTR lpszFile,   UINT cch);
 
extern "C" __declspec(dllimport) UINT __stdcall DragQueryFileW(  HDROP hDrop,   UINT iFile,   LPWSTR lpszFile,   UINT cch);




#line 73 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
extern "C" __declspec(dllimport) BOOL __stdcall DragQueryPoint(  HDROP hDrop,   POINT *ppt);
extern "C" __declspec(dllimport) void __stdcall DragFinish(  HDROP hDrop);
extern "C" __declspec(dllimport) void __stdcall DragAcceptFiles(  HWND hWnd,   BOOL fAccept);

extern "C" __declspec(dllimport) HINSTANCE __stdcall ShellExecuteA(  HWND hwnd,   LPCSTR lpOperation,   LPCSTR lpFile,   LPCSTR lpParameters,
      LPCSTR lpDirectory,   INT nShowCmd);
extern "C" __declspec(dllimport) HINSTANCE __stdcall ShellExecuteW(  HWND hwnd,   LPCWSTR lpOperation,   LPCWSTR lpFile,   LPCWSTR lpParameters,
      LPCWSTR lpDirectory,   INT nShowCmd);




#line 86 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
  
extern "C" __declspec(dllimport) HINSTANCE __stdcall FindExecutableA(  LPCSTR lpFile,   LPCSTR lpDirectory,   LPSTR lpResult);
  
extern "C" __declspec(dllimport) HINSTANCE __stdcall FindExecutableW(  LPCWSTR lpFile,   LPCWSTR lpDirectory,   LPWSTR lpResult);




#line 95 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
extern "C" __declspec(dllimport) LPWSTR * __stdcall  CommandLineToArgvW(  LPCWSTR lpCmdLine,   int* pNumArgs);

extern "C" __declspec(dllimport) INT __stdcall ShellAboutA(  HWND hWnd,   LPCSTR szApp,   LPCSTR szOtherStuff,   HICON hIcon);
extern "C" __declspec(dllimport) INT __stdcall ShellAboutW(  HWND hWnd,   LPCWSTR szApp,   LPCWSTR szOtherStuff,   HICON hIcon);




#line 104 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
extern "C" __declspec(dllimport) HICON __stdcall DuplicateIcon(  HINSTANCE hInst,   HICON hIcon);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconA(  HINSTANCE hInst,   LPSTR pszIconPath,   WORD *piIcon);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconW(  HINSTANCE hInst,   LPWSTR pszIconPath,   WORD *piIcon);




#line 112 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconExA(  HINSTANCE hInst,   LPSTR pszIconPath,   WORD *piIconIndex,   WORD *piIconId);
extern "C" __declspec(dllimport) HICON __stdcall ExtractAssociatedIconExW(  HINSTANCE hInst,   LPWSTR pszIconPath,   WORD *piIconIndex,   WORD *piIconId);




#line 119 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
extern "C" __declspec(dllimport) HICON __stdcall ExtractIconA(  HINSTANCE hInst,   LPCSTR pszExeFileName, UINT nIconIndex);
extern "C" __declspec(dllimport) HICON __stdcall ExtractIconW(  HINSTANCE hInst,   LPCWSTR pszExeFileName, UINT nIconIndex);




#line 126 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



typedef struct _DRAGINFOA {
    UINT uSize;                 
    POINT pt;
    BOOL fNC;
    PZZSTR lpFileList;
    DWORD grfKeyState;
} DRAGINFOA, *LPDRAGINFOA;
typedef struct _DRAGINFOW {
    UINT uSize;                 
    POINT pt;
    BOOL fNC;
    PZZWSTR lpFileList;
    DWORD grfKeyState;
} DRAGINFOW, *LPDRAGINFOW;




typedef DRAGINFOA DRAGINFO;
typedef LPDRAGINFOA LPDRAGINFO;
#line 150 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"














                                        
                                        



#line 170 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



#line 174 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

















typedef struct _AppBarData
{
    DWORD cbSize;
    HWND hWnd;
    UINT uCallbackMessage;
    UINT uEdge;
    RECT rc;
    LPARAM lParam; 
} APPBARDATA, *PAPPBARDATA;


extern "C" __declspec(dllimport) UINT_PTR __stdcall SHAppBarMessage(  DWORD dwMessage,   PAPPBARDATA pData);





extern "C" __declspec(dllimport) DWORD __stdcall   DoEnvironmentSubstA(  LPSTR pszSrc, UINT cchSrc);
extern "C" __declspec(dllimport) DWORD __stdcall   DoEnvironmentSubstW(  LPWSTR pszSrc, UINT cchSrc);




#line 215 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


extern "C" __declspec(dllimport) UINT __stdcall ExtractIconExA(  LPCSTR lpszFile, int nIconIndex,   HICON *phiconLarge,   HICON *phiconSmall, UINT nIcons);
extern "C" __declspec(dllimport) UINT __stdcall ExtractIconExW(  LPCWSTR lpszFile, int nIconIndex,   HICON *phiconLarge,   HICON *phiconSmall, UINT nIcons);




#line 224 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
















                                           











#line 253 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


typedef WORD FILEOP_FLAGS;




                                
                                
                                
                                




typedef WORD PRINTEROP_FLAGS;








typedef struct _SHFILEOPSTRUCTA
{
    HWND            hwnd;
    UINT            wFunc;
    PCZZSTR         pFrom;
    PCZZSTR         pTo;
    FILEOP_FLAGS    fFlags;
    BOOL            fAnyOperationsAborted;
    LPVOID          hNameMappings;
    PCSTR           lpszProgressTitle; 
} SHFILEOPSTRUCTA, *LPSHFILEOPSTRUCTA;
typedef struct _SHFILEOPSTRUCTW
{
    HWND            hwnd;
    UINT            wFunc;
    PCZZWSTR        pFrom;
    PCZZWSTR        pTo;
    FILEOP_FLAGS    fFlags;
    BOOL            fAnyOperationsAborted;
    LPVOID          hNameMappings;
    PCWSTR          lpszProgressTitle; 
} SHFILEOPSTRUCTW, *LPSHFILEOPSTRUCTW;




typedef SHFILEOPSTRUCTA SHFILEOPSTRUCT;
typedef LPSHFILEOPSTRUCTA LPSHFILEOPSTRUCT;
#line 306 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

extern "C" __declspec(dllimport) int __stdcall SHFileOperationA(  LPSHFILEOPSTRUCTA lpFileOp);
extern "C" __declspec(dllimport) int __stdcall SHFileOperationW(  LPSHFILEOPSTRUCTW lpFileOp);




#line 314 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
extern "C" __declspec(dllimport) void __stdcall SHFreeNameMappings(  HANDLE hNameMappings);

typedef struct _SHNAMEMAPPINGA
{
    LPSTR   pszOldPath;
    LPSTR   pszNewPath;
    int   cchOldPath;
    int   cchNewPath;
} SHNAMEMAPPINGA, *LPSHNAMEMAPPINGA;
typedef struct _SHNAMEMAPPINGW
{
    LPWSTR  pszOldPath;
    LPWSTR  pszNewPath;
    int   cchOldPath;
    int   cchNewPath;
} SHNAMEMAPPINGW, *LPSHNAMEMAPPINGW;




typedef SHNAMEMAPPINGA SHNAMEMAPPING;
typedef LPSHNAMEMAPPINGA LPSHNAMEMAPPING;
#line 337 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



















#line 357 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



















#line 377 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"












#line 390 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


#line 393 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



#line 397 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


#line 400 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"







#line 408 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"






















#pragma warning(push)
#pragma warning(disable:4201) 
#pragma once
#line 434 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

typedef struct _SHELLEXECUTEINFOA
{
    DWORD cbSize;               
    ULONG fMask;                
    HWND hwnd;                  
    LPCSTR   lpVerb;            
    LPCSTR   lpFile;            
    LPCSTR   lpParameters;      
    LPCSTR   lpDirectory;       
    int nShow;                  
    HINSTANCE hInstApp;         
    void *lpIDList;             
    LPCSTR   lpClass;           
    HKEY hkeyClass;             
    DWORD dwHotKey;             
    union                       
    {                           
        HANDLE hIcon;           

        HANDLE hMonitor;        
#line 456 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
    } ;           
    HANDLE hProcess;            
} SHELLEXECUTEINFOA, *LPSHELLEXECUTEINFOA;
typedef struct _SHELLEXECUTEINFOW
{
    DWORD cbSize;               
    ULONG fMask;                
    HWND hwnd;                  
    LPCWSTR  lpVerb;            
    LPCWSTR  lpFile;            
    LPCWSTR  lpParameters;      
    LPCWSTR  lpDirectory;       
    int nShow;                  
    HINSTANCE hInstApp;         
    void *lpIDList;             
    LPCWSTR  lpClass;           
    HKEY hkeyClass;             
    DWORD dwHotKey;             
    union                       
    {                           
        HANDLE hIcon;           

        HANDLE hMonitor;        
#line 480 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
    } ;           
    HANDLE hProcess;            
} SHELLEXECUTEINFOW, *LPSHELLEXECUTEINFOW;




typedef SHELLEXECUTEINFOA SHELLEXECUTEINFO;
typedef LPSHELLEXECUTEINFOA LPSHELLEXECUTEINFO;
#line 490 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

extern "C" __declspec(dllimport) BOOL __stdcall ShellExecuteExA(  SHELLEXECUTEINFOA *pExecInfo);
extern "C" __declspec(dllimport) BOOL __stdcall ShellExecuteExW(  SHELLEXECUTEINFOW *pExecInfo);




#line 498 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



typedef struct _SHCREATEPROCESSINFOW
{
    DWORD cbSize;
    ULONG fMask;
    HWND hwnd;
    LPCWSTR  pszFile;
    LPCWSTR  pszParameters;
    LPCWSTR  pszCurrentDirectory;
    HANDLE hUserToken;
    LPSECURITY_ATTRIBUTES lpProcessAttributes;
    LPSECURITY_ATTRIBUTES lpThreadAttributes;
    BOOL bInheritHandles;
    DWORD dwCreationFlags;
    LPSTARTUPINFOW lpStartupInfo;
    LPPROCESS_INFORMATION lpProcessInformation;
} SHCREATEPROCESSINFOW, *PSHCREATEPROCESSINFOW;

extern "C" __declspec(dllimport) BOOL __stdcall SHCreateProcessAsUserW(  PSHCREATEPROCESSINFOW pscpi);
#line 520 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



extern "C" __declspec(dllimport) HRESULT __stdcall SHEvaluateSystemCommandTemplate(  PCWSTR pszCmdTemplate,  PWSTR *ppszApplication,  PWSTR *ppszCommandLine,  PWSTR *ppszParameters);















































































































































































































































































































































typedef enum ASSOCCLASS
{                               
    ASSOCCLASS_SHELL_KEY = 0,   
    ASSOCCLASS_PROGID_KEY,      
    ASSOCCLASS_PROGID_STR,      
    ASSOCCLASS_CLSID_KEY,       
    ASSOCCLASS_CLSID_STR,       
    ASSOCCLASS_APP_KEY,         
    ASSOCCLASS_APP_STR,         
    ASSOCCLASS_SYSTEM_STR,      
    ASSOCCLASS_FOLDER,          
    ASSOCCLASS_STAR,            

    ASSOCCLASS_FIXED_PROGID_STR,
    ASSOCCLASS_PROTOCOL_STR,    
#line 875 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
} ASSOCCLASS;

typedef struct ASSOCIATIONELEMENT
{
    ASSOCCLASS ac;              
    HKEY hkClass;               
    PCWSTR pszClass;            
} ASSOCIATIONELEMENT;



extern "C" __declspec(dllimport) HRESULT __stdcall AssocCreateForClasses(  const ASSOCIATIONELEMENT *rgClasses, ULONG cClasses,   const IID & riid,  void **ppv);

































#line 921 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"











typedef struct _SHQUERYRBINFO {
    DWORD   cbSize;

    __int64 i64Size;
    __int64 i64NumItems;



#line 941 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
} SHQUERYRBINFO, *LPSHQUERYRBINFO;









extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinA(  LPCSTR pszRootPath,   LPSHQUERYRBINFO pSHQueryRBInfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryRecycleBinW(  LPCWSTR pszRootPath,   LPSHQUERYRBINFO pSHQueryRBInfo);




#line 958 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
extern "C" __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinA(  HWND hwnd,   LPCSTR pszRootPath, DWORD dwFlags);
extern "C" __declspec(dllimport) HRESULT __stdcall SHEmptyRecycleBinW(  HWND hwnd,   LPCWSTR pszRootPath, DWORD dwFlags);




#line 965 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



#line 969 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"







typedef enum
{
    QUNS_NOT_PRESENT               = 1,    
    QUNS_BUSY                      = 2,    
    QUNS_RUNNING_D3D_FULL_SCREEN   = 3,    
    QUNS_PRESENTATION_MODE         = 4,    
    QUNS_ACCEPTS_NOTIFICATIONS     = 5,    

    QUNS_QUIET_TIME                = 6,    
#line 986 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

    QUNS_APP                       = 7,    
#line 989 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
} QUERY_USER_NOTIFICATION_STATE;

extern "C" __declspec(dllimport) HRESULT __stdcall SHQueryUserNotificationState(  QUERY_USER_NOTIFICATION_STATE *pquns);
#line 993 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



extern "C" __declspec(dllimport) HRESULT __stdcall SHGetPropertyStoreForWindow(  HWND hwnd,   const IID & riid,  void** ppv);
#line 998 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


typedef struct _NOTIFYICONDATAA {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;


#line 1010 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

    CHAR   szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    CHAR   szInfo[256];
    union {
        UINT  uTimeout;
        UINT  uVersion;  
    } ;
    CHAR   szInfoTitle[64];
    DWORD dwInfoFlags;
#line 1022 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

    GUID guidItem;
#line 1025 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

    HICON hBalloonIcon;
#line 1028 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
} NOTIFYICONDATAA, *PNOTIFYICONDATAA;
typedef struct _NOTIFYICONDATAW {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    UINT uFlags;
    UINT uCallbackMessage;
    HICON hIcon;


#line 1039 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

    WCHAR  szTip[128];
    DWORD dwState;
    DWORD dwStateMask;
    WCHAR  szInfo[256];
    union {
        UINT  uTimeout;
        UINT  uVersion;  
    } ;
    WCHAR  szInfoTitle[64];
    DWORD dwInfoFlags;
#line 1051 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

    GUID guidItem;
#line 1054 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

    HICON hBalloonIcon;
#line 1057 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
} NOTIFYICONDATAW, *PNOTIFYICONDATAW;




typedef NOTIFYICONDATAA NOTIFYICONDATA;
typedef PNOTIFYICONDATAA PNOTIFYICONDATA;
#line 1065 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"








#line 1074 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"







#line 1082 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"







#line 1090 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"













#line 1104 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

#line 1106 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"














#line 1121 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"








#line 1130 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



#line 1134 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"















#line 1150 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"





#line 1156 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



#line 1160 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



typedef struct _NOTIFYICONIDENTIFIER {
    DWORD cbSize;
    HWND hWnd;
    UINT uID;
    GUID guidItem;
} NOTIFYICONIDENTIFIER, *PNOTIFYICONIDENTIFIER;


extern "C" __declspec(dllimport) BOOL __stdcall Shell_NotifyIconA(DWORD dwMessage,   PNOTIFYICONDATAA lpData);
extern "C" __declspec(dllimport) BOOL __stdcall Shell_NotifyIconW(DWORD dwMessage,   PNOTIFYICONDATAW lpData);




#line 1178 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


extern "C" __declspec(dllimport) HRESULT __stdcall Shell_NotifyIconGetRect(  const NOTIFYICONIDENTIFIER* identifier,   RECT* iconLocation);
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



























typedef struct _SHFILEINFOA
{
        HICON       hIcon;                      
        int         iIcon;                      
        DWORD       dwAttributes;               
        CHAR        szDisplayName[260];    
        CHAR        szTypeName[80];             
} SHFILEINFOA;
typedef struct _SHFILEINFOW
{
        HICON       hIcon;                      
        int         iIcon;                      
        DWORD       dwAttributes;               
        WCHAR       szDisplayName[260];    
        WCHAR       szTypeName[80];             
} SHFILEINFOW;



typedef SHFILEINFOA SHFILEINFO;
#line 1230 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



#line 1234 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"












#line 1247 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"









                                                

extern "C" __declspec(dllimport) DWORD_PTR __stdcall SHGetFileInfoA(  LPCSTR pszPath, DWORD dwFileAttributes,   SHFILEINFOA *psfi,
    UINT cbFileInfo, UINT uFlags);
extern "C" __declspec(dllimport) DWORD_PTR __stdcall SHGetFileInfoW(  LPCWSTR pszPath, DWORD dwFileAttributes,   SHFILEINFOW *psfi,
    UINT cbFileInfo, UINT uFlags);




#line 1267 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


typedef struct _SHSTOCKICONINFO
{
    DWORD cbSize;
    HICON hIcon;
    int   iSysImageIndex;
    int   iIcon;
    WCHAR szPath[260];
} SHSTOCKICONINFO;













typedef enum SHSTOCKICONID
{
    SIID_DOCNOASSOC = 0,          
    SIID_DOCASSOC = 1,            
    SIID_APPLICATION = 2,         
    SIID_FOLDER = 3,              
    SIID_FOLDEROPEN = 4,          
    SIID_DRIVE525 = 5,            
    SIID_DRIVE35 = 6,             
    SIID_DRIVEREMOVE = 7,         
    SIID_DRIVEFIXED = 8,          
    SIID_DRIVENET = 9,            
    SIID_DRIVENETDISABLED = 10,   
    SIID_DRIVECD = 11,            
    SIID_DRIVERAM = 12,           
    SIID_WORLD = 13,              
    SIID_SERVER = 15,             
    SIID_PRINTER = 16,            
    SIID_MYNETWORK = 17,          
    SIID_FIND = 22,               
    SIID_HELP = 23,               
    SIID_SHARE = 28,              
    SIID_LINK = 29,               
    SIID_SLOWFILE = 30,           
    SIID_RECYCLER = 31,           
    SIID_RECYCLERFULL = 32,       
    SIID_MEDIACDAUDIO = 40,       
    SIID_LOCK = 47,               
    SIID_AUTOLIST = 49,           
    SIID_PRINTERNET = 50,         
    SIID_SERVERSHARE = 51,        
    SIID_PRINTERFAX = 52,         
    SIID_PRINTERFAXNET = 53,      
    SIID_PRINTERFILE = 54,        
    SIID_STACK = 55,              
    SIID_MEDIASVCD = 56,          
    SIID_STUFFEDFOLDER = 57,      
    SIID_DRIVEUNKNOWN = 58,       
    SIID_DRIVEDVD = 59,           
    SIID_MEDIADVD = 60,           
    SIID_MEDIADVDRAM = 61,        
    SIID_MEDIADVDRW = 62,         
    SIID_MEDIADVDR = 63,          
    SIID_MEDIADVDROM = 64,        
    SIID_MEDIACDAUDIOPLUS = 65,   
    SIID_MEDIACDRW = 66,          
    SIID_MEDIACDR = 67,           
    SIID_MEDIACDBURN = 68,        
    SIID_MEDIABLANKCD = 69,       
    SIID_MEDIACDROM = 70,         
    SIID_AUDIOFILES = 71,         
    SIID_IMAGEFILES = 72,         
    SIID_VIDEOFILES = 73,         
    SIID_MIXEDFILES = 74,         
    SIID_FOLDERBACK = 75,         
    SIID_FOLDERFRONT = 76,        
    SIID_SHIELD = 77,             
    SIID_WARNING = 78,            
    SIID_INFO = 79,               
    SIID_ERROR = 80,              
    SIID_KEY = 81,                
    SIID_SOFTWARE = 82,           
    SIID_RENAME = 83,             
    SIID_DELETE = 84,             
    SIID_MEDIAAUDIODVD = 85,      
    SIID_MEDIAMOVIEDVD = 86,      
    SIID_MEDIAENHANCEDCD = 87,    
    SIID_MEDIAENHANCEDDVD = 88,   
    SIID_MEDIAHDDVD = 89,         
    SIID_MEDIABLURAY = 90,        
    SIID_MEDIAVCD = 91,           
    SIID_MEDIADVDPLUSR = 92,      
    SIID_MEDIADVDPLUSRW = 93,     
    SIID_DESKTOPPC = 94,          
    SIID_MOBILEPC = 95,           
    SIID_USERS = 96,              
    SIID_MEDIASMARTMEDIA = 97,    
    SIID_MEDIACOMPACTFLASH = 98,  
    SIID_DEVICECELLPHONE = 99,    
    SIID_DEVICECAMERA = 100,      
    SIID_DEVICEVIDEOCAMERA = 101, 
    SIID_DEVICEAUDIOPLAYER = 102, 
    SIID_NETWORKCONNECT = 103,    
    SIID_INTERNET = 104,          
    SIID_ZIPFILE = 105,           
    SIID_SETTINGS = 106,          
    
    
    SIID_DRIVEHDDVD = 132,        
    SIID_DRIVEBD = 133,           
    SIID_MEDIAHDDVDROM = 134,     
    SIID_MEDIAHDDVDR = 135,       
    SIID_MEDIAHDDVDRAM = 136,     
    SIID_MEDIABDROM = 137,        
    SIID_MEDIABDR = 138,          
    SIID_MEDIABDRE = 139,         
    SIID_CLUSTEREDDRIVE = 140,    
    
    SIID_MAX_ICONS = 175,
} SHSTOCKICONID;



extern "C" __declspec(dllimport) HRESULT __stdcall SHGetStockIconInfo(SHSTOCKICONID siid, UINT uFlags,   SHSTOCKICONINFO *psii);

#line 1396 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"





extern "C" __declspec(dllimport) BOOL __stdcall SHGetDiskFreeSpaceExA(  LPCSTR pszDirectoryName,   ULARGE_INTEGER* pulFreeBytesAvailableToCaller,
      ULARGE_INTEGER* pulTotalNumberOfBytes,   ULARGE_INTEGER* pulTotalNumberOfFreeBytes);
extern "C" __declspec(dllimport) BOOL __stdcall SHGetDiskFreeSpaceExW(  LPCWSTR pszDirectoryName,   ULARGE_INTEGER* pulFreeBytesAvailableToCaller,
      ULARGE_INTEGER* pulTotalNumberOfBytes,   ULARGE_INTEGER* pulTotalNumberOfFreeBytes);




#line 1410 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
 
extern "C" __declspec(dllimport) BOOL __stdcall SHGetNewLinkInfoA(  LPCSTR pszLinkTo,   LPCSTR pszDir,   LPSTR pszName,   BOOL *pfMustCopy,   UINT uFlags);
 
extern "C" __declspec(dllimport) BOOL __stdcall SHGetNewLinkInfoW(  LPCWSTR pszLinkTo,   LPCWSTR pszDir,   LPWSTR pszName,   BOOL *pfMustCopy,   UINT uFlags);




#line 1419 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"







#line 1427 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


#line 1430 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
#line 1431 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
 













extern "C" __declspec(dllimport) BOOL __stdcall SHInvokePrinterCommandA(  HWND hwnd, UINT uAction,   LPCSTR lpBuf1,   LPCSTR lpBuf2, BOOL fModal);
extern "C" __declspec(dllimport) BOOL __stdcall SHInvokePrinterCommandW(  HWND hwnd, UINT uAction,   LPCWSTR lpBuf1,   LPCWSTR lpBuf2, BOOL fModal);




#line 1452 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
#line 1453 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


typedef struct _OPEN_PRINTER_PROPS_INFOA
{
    DWORD       dwSize;
    LPSTR       pszSheetName;
    UINT        uSheetIndex;
    DWORD       dwFlags;
    BOOL        bModal;
} OPEN_PRINTER_PROPS_INFOA, *POPEN_PRINTER_PROPS_INFOA;
typedef struct _OPEN_PRINTER_PROPS_INFOW
{
    DWORD       dwSize;
    LPWSTR      pszSheetName;
    UINT        uSheetIndex;
    DWORD       dwFlags;
    BOOL        bModal;
} OPEN_PRINTER_PROPS_INFOW, *POPEN_PRINTER_PROPS_INFOW;




typedef OPEN_PRINTER_PROPS_INFOA OPEN_PRINTER_PROPS_INFO;
typedef POPEN_PRINTER_PROPS_INFOA POPEN_PRINTER_PROPS_INFO;
#line 1478 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

#line 1480 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


#line 1483 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"















extern "C" __declspec(dllimport) HRESULT __stdcall SHLoadNonloadedIconOverlayIdentifiers(void);




















extern "C" __declspec(dllimport) HRESULT __stdcall SHIsFileAvailableOffline(  PCWSTR pwszPath,   DWORD *pdwStatus);




                                            
                                            

#line 1528 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"




extern "C" __declspec(dllimport) HRESULT __stdcall SHSetLocalizedName(  PCWSTR pszPath,   PCWSTR pszResModule, int idsRes);
#line 1534 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



extern "C" __declspec(dllimport) HRESULT __stdcall SHRemoveLocalizedName(  PCWSTR pszPath);

extern "C" __declspec(dllimport) HRESULT __stdcall SHGetLocalizedName(  PCWSTR pszPath,   PWSTR pszResModule, UINT cch,   int *pidsRes);
#line 1541 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

























#line 1567 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

extern "C" __declspec(dllimport) int __cdecl ShellMessageBoxA(
      HINSTANCE hAppInst,
      HWND hWnd,
      LPCSTR lpcText,
      LPCSTR lpcTitle,
      UINT fuStyle, ...);
extern "C" __declspec(dllimport) int __cdecl ShellMessageBoxW(
      HINSTANCE hAppInst,
      HWND hWnd,
      LPCWSTR lpcText,
      LPCWSTR lpcTitle,
      UINT fuStyle, ...);




#line 1585 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


extern "C" __declspec(dllimport) BOOL __stdcall IsLFNDriveA(  LPCSTR pszPath);
extern "C" __declspec(dllimport) BOOL __stdcall IsLFNDriveW(  LPCWSTR pszPath);




#line 1594 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
#line 1595 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"




extern "C" HRESULT __stdcall SHEnumerateUnreadMailAccountsA(  HKEY hKeyUser, DWORD dwIndex,   LPSTR pszMailAddress, int cchMailAddress);
extern "C" HRESULT __stdcall SHEnumerateUnreadMailAccountsW(  HKEY hKeyUser, DWORD dwIndex,   LPWSTR pszMailAddress, int cchMailAddress);




#line 1606 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
extern "C" HRESULT __stdcall SHGetUnreadMailCountA(  HKEY hKeyUser,   LPCSTR pszMailAddress,   DWORD *pdwCount,   FILETIME *pFileTime,   LPSTR pszShellExecuteCommand, int cchShellExecuteCommand);
extern "C" HRESULT __stdcall SHGetUnreadMailCountW(  HKEY hKeyUser,   LPCWSTR pszMailAddress,   DWORD *pdwCount,   FILETIME *pFileTime,   LPWSTR pszShellExecuteCommand, int cchShellExecuteCommand);




#line 1613 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
extern "C" HRESULT __stdcall SHSetUnreadMailCountA(  LPCSTR pszMailAddress, DWORD dwCount,   LPCSTR pszShellExecuteCommand);
extern "C" HRESULT __stdcall SHSetUnreadMailCountW(  LPCWSTR pszMailAddress, DWORD dwCount,   LPCWSTR pszShellExecuteCommand);




#line 1620 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

#line 1622 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


extern "C" BOOL __stdcall   SHTestTokenMembership(  HANDLE hToken, ULONG ulRID);
#line 1626 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"




extern "C" __declspec(dllimport) HRESULT __stdcall SHGetImageList(  int iImageList,   const IID & riid,  void **ppvObj);
#line 1632 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"











#line 1644 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
#line 1645 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



typedef HRESULT (__stdcall *PFNCANSHAREFOLDERW)(  PCWSTR pszPath);
typedef HRESULT (__stdcall *PFNSHOWSHAREFOLDERUIW)(  HWND hwndParent,   PCWSTR pszPath);

#line 1652 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


#line 1655 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
#pragma endregion


}
#line 1660 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 1663 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
#line 1664 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


#pragma warning(pop)
#line 1668 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"

#pragma region Desktop Family








extern "C" __declspec(dllimport) BOOL __stdcall InitNetworkAddressControl(void);












typedef struct tagNC_ADDRESS
{
   struct NET_ADDRESS_INFO_ *pAddrInfo; 
   USHORT  PortNumber;
   BYTE    PrefixLength;
} NC_ADDRESS, *PNC_ADDRESS;

















#line 1715 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"




extern "C" HRESULT __stdcall SHGetDriveMedia(  PCWSTR pszDrive,   DWORD *pdwMediaContent);
#line 1721 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



#line 1725 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"


#line 1728 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"
#pragma endregion

#line 1731 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\shellapi.h"



#line 194 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winperf.h"






































#pragma once
#line 41 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winperf.h"

#pragma region Desktop Family


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"
#line 46 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winperf.h"

















typedef struct _PERF_DATA_BLOCK {
    WCHAR           Signature[4];       
    DWORD           LittleEndian;       
    DWORD           Version;            
                                        
    DWORD           Revision;           
                                        
    DWORD           TotalByteLength;    
    DWORD           HeaderLength;       
    DWORD           NumObjectTypes;     
                                        
    LONG            DefaultObject;      
                                        
                                        
                                        
                                        
    SYSTEMTIME      SystemTime;         
                                        
    LARGE_INTEGER   PerfTime;           
                                        
    LARGE_INTEGER   PerfFreq;           
                                        
    LARGE_INTEGER   PerfTime100nSec;    
                                        
    DWORD           SystemNameLength;   
    DWORD           SystemNameOffset;   
                                        
                                        
} PERF_DATA_BLOCK, *PPERF_DATA_BLOCK;









typedef struct _PERF_OBJECT_TYPE {
    DWORD           TotalByteLength;    
                                        
                                        
                                        
                                        
                                        
                                        
                                        
    DWORD           DefinitionLength;   
                                        
                                        
                                        
                                        
                                        
                                        
                                        
    DWORD           HeaderLength;       
                                        
                                        
                                        
    DWORD           ObjectNameTitleIndex;
                                        



    LPWSTR          ObjectNameTitle;    
                                        
                                        
#line 131 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winperf.h"
    DWORD           ObjectHelpTitleIndex;
                                        



    LPWSTR          ObjectHelpTitle;    
                                        
                                        
#line 140 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winperf.h"
    DWORD           DetailLevel;        
                                        
                                        
                                        
    DWORD           NumCounters;        
                                        
                                        
    LONG            DefaultCounter;     
                                        
                                        
                                        
    LONG            NumInstances;       
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
                                        
    DWORD           CodePage;           
                                        
                                        
    LARGE_INTEGER   PerfTime;           
                                        
    LARGE_INTEGER   PerfFreq;           
                                        
} PERF_OBJECT_TYPE, *PPERF_OBJECT_TYPE;


























                                            
























































































































































































































































































                                        




































































typedef struct _PERF_COUNTER_DEFINITION {
    DWORD           ByteLength;         
    DWORD           CounterNameTitleIndex;
                                        
                                        



    LPWSTR          CounterNameTitle;   
                                        
                                        
#line 559 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winperf.h"
    DWORD           CounterHelpTitleIndex;
                                        
                                        



    LPWSTR          CounterHelpTitle;   
                                        
                                        
#line 569 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winperf.h"
    LONG            DefaultScale;       
                                        
                                        
    DWORD           DetailLevel;        
                                        
    DWORD           CounterType;        
    DWORD           CounterSize;        
    DWORD           CounterOffset;      
                                        
                                        
} PERF_COUNTER_DEFINITION, *PPERF_COUNTER_DEFINITION;














typedef struct _PERF_INSTANCE_DEFINITION {
    DWORD           ByteLength;         
                                        
    DWORD           ParentObjectTitleIndex;
                                        
                                        
                                        
                                        
                                        
    DWORD           ParentObjectInstance;
                                        
                                        
                                        
    LONG            UniqueID;           
                                        
                                        
    DWORD           NameOffset;         
                                        
                                        
    DWORD           NameLength;         
                                        
                                        
                                        
                                        
                                        
} PERF_INSTANCE_DEFINITION, *PPERF_INSTANCE_DEFINITION;













typedef struct _PERF_COUNTER_BLOCK {
    DWORD           ByteLength;         
                                        
} PERF_COUNTER_BLOCK, *PPERF_COUNTER_BLOCK;
















typedef DWORD (__stdcall PM_OPEN_PROC) (  LPWSTR);
typedef DWORD (__stdcall PM_COLLECT_PROC) (  LPWSTR lpValueName, 
                                           
                                            
                                            
                                                  LPVOID *lppData, 
                                            LPDWORD lpcbTotalBytes, 
                                            LPDWORD lpNumObjectTypes);
typedef DWORD (__stdcall PM_CLOSE_PROC) (void);
typedef DWORD (__stdcall PM_QUERY_PROC) (LPDWORD, LPVOID *, LPDWORD, LPDWORD);


















#line 682 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winperf.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 684 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winperf.h"

#line 686 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winperf.h"
#pragma endregion

#line 689 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winperf.h"

#line 196 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"



















#pragma once
#line 22 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"

#pragma region Desktop Family












typedef unsigned char   u_char;
typedef unsigned short  u_short;
typedef unsigned int    u_int;
typedef unsigned long   u_long;






typedef UINT_PTR        SOCKET;











#line 59 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"

typedef struct fd_set {
        u_int   fd_count;               
        SOCKET  fd_array[64];   
} fd_set;


extern "C" {
#line 68 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"

extern int __stdcall  __WSAFDIsSet(SOCKET, fd_set  *);


}
#line 74 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"





























struct timeval {
        long    tv_sec;         
        long    tv_usec;        
};



























                                        
























struct  hostent {
        char     * h_name;           
        char     *  * h_aliases;  
        short   h_addrtype;             
        short   h_length;               
        char     *  * h_addr_list; 

};





struct  netent {
        char     * n_name;           
        char     *  * n_aliases;  
        short   n_addrtype;             
        u_long  n_net;                  
};

struct  servent {
        char     * s_name;           
        char     *  * s_aliases;  




        short   s_port;                 
        char     * s_proto;          
#line 189 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"
};

struct  protoent {
        char     * p_name;           
        char     *  * p_aliases;  
        short   p_proto;                
};





























































                                        














#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\inaddr.h"















#pragma once





typedef struct in_addr {
        union {
                struct { UCHAR s_b1,s_b2,s_b3,s_b4; } S_un_b;
                struct { USHORT s_w1,s_w2; } S_un_w;
                ULONG S_addr;
        } S_un;






} IN_ADDR, *PIN_ADDR,  *LPIN_ADDR;

#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\inaddr.h"
#line 273 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"































struct sockaddr_in {
        short   sin_family;
        u_short sin_port;
        struct  in_addr sin_addr;
        char    sin_zero[8];
};




typedef struct WSAData {
        WORD                    wVersion;
        WORD                    wHighVersion;







        char                    szDescription[256+1];
        char                    szSystemStatus[128+1];
        unsigned short          iMaxSockets;
        unsigned short          iMaxUdpDg;
        char  *              lpVendorInfo;
#line 330 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"
} WSADATA;

typedef WSADATA  *LPWSADATA;






















struct ip_mreq {
        struct in_addr  imr_multiaddr;  
        struct in_addr  imr_interface;  
};






















































































































struct sockaddr {
        u_short sa_family;              
        char    sa_data[14];            
};





struct sockproto {
        u_short sp_family;              
        u_short sp_protocol;            
};

































struct  linger {
        u_short l_onoff;                
        u_short l_linger;               
};







































































































































































































#line 727 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"




extern "C" {
#line 733 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"

SOCKET __stdcall  accept (
                            SOCKET s,
                            struct sockaddr  *addr,
                            int  *addrlen);

int __stdcall  bind (
                       SOCKET s,
                       const struct sockaddr  *addr,
                       int namelen);

int __stdcall  closesocket (  SOCKET s);

int __stdcall  connect (
                          SOCKET s,
                          const struct sockaddr  *name,
                          int namelen);

int __stdcall  ioctlsocket (
                              SOCKET s,
                              long cmd,
                              u_long  *argp);

int __stdcall  getpeername (
                              SOCKET s,
                              struct sockaddr  *name,
                              int  * namelen);

int __stdcall  getsockname (
                              SOCKET s,
                              struct sockaddr  *name,
                              int  * namelen);

int __stdcall  getsockopt (
                             SOCKET s,
                             int level,
                             int optname,
                             char  * optval,
                             int  *optlen);

u_long __stdcall  htonl (   u_long hostlong);

u_short __stdcall  htons (  u_short hostshort);

unsigned long __stdcall  inet_addr (  const char  * cp);

char  * __stdcall  inet_ntoa (  struct in_addr in);

int __stdcall  listen (
                         SOCKET s,
                         int backlog);

u_long __stdcall  ntohl (  u_long netlong);

u_short __stdcall  ntohs (  u_short netshort);

int __stdcall  recv (
                       SOCKET s,
                        char  * buf,
                       int len,
                       int flags);

int __stdcall  recvfrom (
                           SOCKET s,
                            char  * buf,
                           int len,
                           int flags,
                           struct sockaddr  * from,
                           int  * fromlen);

int __stdcall  select (
                          int nfds,
                          fd_set  *readfds,
                          fd_set  *writefds,
                          fd_set  *exceptfds,
                           const struct timeval  *timeout);

int __stdcall  send (
                       SOCKET s,
                       const char  * buf,
                       int len,
                       int flags);

int __stdcall  sendto (
                         SOCKET s,
                         const char  * buf,
                         int len,
                         int flags,
                         const struct sockaddr  *to,
                         int tolen);

int __stdcall  setsockopt (
                             SOCKET s,
                             int level,
                             int optname,
                             const char  * optval,
                             int optlen);

int __stdcall  shutdown (
                           SOCKET s,
                           int how);

SOCKET __stdcall  socket (
                            int af,
                            int type,
                            int protocol);



struct hostent  * __stdcall  gethostbyaddr(
                                                const char  * addr,
                                                int len,
                                                int type);

struct hostent  * __stdcall  gethostbyname(  const char  * name);

int __stdcall  gethostname (
                              char  * name,
                              int namelen);

struct servent  * __stdcall  getservbyport(
                                                int port,
                                                const char  * proto);

struct servent  * __stdcall  getservbyname(
                                                const char  * name,
                                                const char  * proto);

struct protoent  * __stdcall  getprotobynumber(  int proto);

struct protoent  * __stdcall  getprotobyname(  const char  * name);



int __stdcall  WSAStartup(
                            WORD wVersionRequired,
                            LPWSADATA lpWSAData);

int __stdcall  WSACleanup(void);

void __stdcall  WSASetLastError(  int iError);

int __stdcall  WSAGetLastError(void);

BOOL __stdcall  WSAIsBlocking(void);

int __stdcall  WSAUnhookBlockingHook(void);

FARPROC __stdcall  WSASetBlockingHook(  FARPROC lpBlockFunc);

int __stdcall  WSACancelBlockingCall(void);

HANDLE __stdcall  WSAAsyncGetServByName(
                                          HWND hWnd,
                                          u_int wMsg,
                                          const char  * name,
                                          const char  * proto,
                                          char  * buf,
                                          int buflen);

HANDLE __stdcall  WSAAsyncGetServByPort(
                                          HWND hWnd,
                                          u_int wMsg,
                                          int port,
                                          const char  * proto,
                                          char  * buf,
                                          int buflen);

HANDLE __stdcall  WSAAsyncGetProtoByName(
                                           HWND hWnd,
                                           u_int wMsg,
                                           const char  * name,
                                           char  * buf,
                                           int buflen);

HANDLE __stdcall  WSAAsyncGetProtoByNumber(
                                             HWND hWnd,
                                             u_int wMsg,
                                             int number,
                                             char  * buf,
                                             int buflen);

HANDLE __stdcall  WSAAsyncGetHostByName(
                                          HWND hWnd,
                                          u_int wMsg,
                                          const char  * name,
                                          char  * buf,
                                          int buflen);

HANDLE __stdcall  WSAAsyncGetHostByAddr(
                                          HWND hWnd,
                                          u_int wMsg,
                                          const char  * addr,
                                          int len,
                                          int type,
                                          char  * buf,
                                          int buflen);

int __stdcall  WSACancelAsyncRequest(  HANDLE hAsyncTaskHandle);

int __stdcall  WSAAsyncSelect(
                                SOCKET s,
                                HWND hWnd,
                                u_int wMsg,
                                long lEvent);

int __stdcall  WSARecvEx (
                            SOCKET s,
                             char  * buf,
                            int len,
                            int  *flags);

typedef struct _TRANSMIT_FILE_BUFFERS {
    PVOID Head;
    DWORD HeadLength;
    PVOID Tail;
    DWORD TailLength;
} TRANSMIT_FILE_BUFFERS, *PTRANSMIT_FILE_BUFFERS, *LPTRANSMIT_FILE_BUFFERS;





BOOL
__stdcall 
TransmitFile (
      SOCKET hSocket,
      HANDLE hFile,
      DWORD nNumberOfBytesToWrite,
      DWORD nNumberOfBytesPerSend,
      LPOVERLAPPED lpOverlapped,
      LPTRANSMIT_FILE_BUFFERS lpTransmitBuffers,
      DWORD dwReserved
    );

BOOL
__stdcall 
AcceptEx (
      SOCKET sListenSocket,
      SOCKET sAcceptSocket,
      PVOID lpOutputBuffer,
#line 975 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"
      DWORD dwReceiveDataLength,
      DWORD dwLocalAddressLength,
      DWORD dwRemoteAddressLength,
      LPDWORD lpdwBytesReceived,
      LPOVERLAPPED lpOverlapped
    );

void
__stdcall 
GetAcceptExSockaddrs (
      PVOID lpOutputBuffer,
      DWORD dwReceiveDataLength,
      DWORD dwLocalAddressLength,
      DWORD dwRemoteAddressLength,
     struct sockaddr **LocalSockaddr,
      LPINT LocalSockaddrLength,
     struct sockaddr **RemoteSockaddr,
      LPINT RemoteSockaddrLength
    );


}
#line 998 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"


typedef struct sockaddr SOCKADDR;
typedef struct sockaddr *PSOCKADDR;
typedef struct sockaddr  *LPSOCKADDR;

typedef struct sockaddr_in SOCKADDR_IN;
typedef struct sockaddr_in *PSOCKADDR_IN;
typedef struct sockaddr_in  *LPSOCKADDR_IN;

typedef struct linger LINGER;
typedef struct linger *PLINGER;
typedef struct linger  *LPLINGER;

typedef struct fd_set FD_SET;
typedef struct fd_set *PFD_SET;
typedef struct fd_set  *LPFD_SET;

typedef struct hostent HOSTENT;
typedef struct hostent *PHOSTENT;
typedef struct hostent  *LPHOSTENT;

typedef struct servent SERVENT;
typedef struct servent *PSERVENT;
typedef struct servent  *LPSERVENT;

typedef struct protoent PROTOENT;
typedef struct protoent *PPROTOENT;
typedef struct protoent  *LPPROTOENT;

typedef struct timeval TIMEVAL;
typedef struct timeval *PTIMEVAL;
typedef struct timeval  *LPTIMEVAL;











































#line 1075 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"

#line 1077 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"
#pragma endregion

#line 1080 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsock.h"


#line 197 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 198 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"




















#pragma warning(push)
#line 23 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma warning(disable:4201)    
#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


#pragma once
#line 29 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"




extern "C" {
#line 38 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

#pragma region Desktop Family














































#line 87 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#line 88 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"









#line 98 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"






#line 105 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#line 106 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"















































#line 154 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


















#line 173 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


























#line 200 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"















#line 216 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"




#line 221 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"













#line 235 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







typedef unsigned int ALG_ID;
#line 244 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"













#line 258 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

































#line 292 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"




#line 297 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"




#line 302 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"















#line 318 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"





typedef ULONG_PTR HCRYPTPROV;
typedef ULONG_PTR HCRYPTKEY;
typedef ULONG_PTR HCRYPTHASH;
#line 327 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"












#line 340 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"























#line 364 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


#line 367 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"













                                            
                                            




#line 387 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"






#line 394 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 402 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

























#line 428 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"














































#line 475 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"








#line 484 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


























#line 511 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

















































#line 561 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"





#line 567 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


#line 570 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"










































#line 613 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"





















#line 635 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"











#line 647 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"










#line 658 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 666 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 674 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 682 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 690 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 698 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 706 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 714 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 722 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 730 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"












#line 743 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#line 744 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"














#line 759 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"











































































#line 835 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"





typedef struct _CMS_KEY_INFO {
    DWORD       dwVersion;                      
    ALG_ID  Algid;                              
    BYTE    *pbOID;                             
    DWORD   cbOID;                              
} CMS_KEY_INFO, *PCMS_KEY_INFO;


typedef struct _HMAC_Info {
    ALG_ID  HashAlgid;
    BYTE    *pbInnerString;
    DWORD   cbInnerString;
    BYTE    *pbOuterString;
    DWORD   cbOuterString;
} HMAC_INFO, *PHMAC_INFO;


typedef struct _SCHANNEL_ALG {
    DWORD   dwUse;
    ALG_ID  Algid;
    DWORD   cBits;
    DWORD   dwFlags;
    DWORD   dwReserved;
} SCHANNEL_ALG, *PSCHANNEL_ALG;








typedef struct _PROV_ENUMALGS {
    ALG_ID    aiAlgid;
    DWORD     dwBitLen;
    DWORD     dwNameLen;
    CHAR      szName[20];
} PROV_ENUMALGS;


typedef struct _PROV_ENUMALGS_EX {
    ALG_ID    aiAlgid;
    DWORD     dwDefaultLen;
    DWORD     dwMinLen;
    DWORD     dwMaxLen;
    DWORD     dwProtocols;
    DWORD     dwNameLen;
    CHAR      szName[20];
    DWORD     dwLongNameLen;
    CHAR      szLongName[40];
} PROV_ENUMALGS_EX;


typedef struct _PUBLICKEYSTRUC {
        BYTE    bType;
        BYTE    bVersion;
        WORD    reserved;
        ALG_ID  aiKeyAlg;
} BLOBHEADER, PUBLICKEYSTRUC;

typedef struct _RSAPUBKEY {
        DWORD   magic;                  
        DWORD   bitlen;                 
        DWORD   pubexp;                 
                                        
} RSAPUBKEY;

typedef struct _PUBKEY {
        DWORD   magic;
        DWORD   bitlen;                 
} DHPUBKEY, DSSPUBKEY, KEAPUBKEY, TEKPUBKEY;

typedef struct _DSSSEED {
        DWORD   counter;
        BYTE    seed[20];
} DSSSEED;

typedef struct _PUBKEYVER3 {
        DWORD   magic;
        DWORD   bitlenP;                
        DWORD   bitlenQ;                
        DWORD   bitlenJ;                
        DSSSEED DSSSeed;
} DHPUBKEY_VER3, DSSPUBKEY_VER3;

typedef struct _PRIVKEYVER3 {
        DWORD   magic;
        DWORD   bitlenP;                
        DWORD   bitlenQ;                
        DWORD   bitlenJ;                
        DWORD   bitlenX;                
        DSSSEED DSSSeed;
} DHPRIVKEY_VER3, DSSPRIVKEY_VER3;

typedef struct _KEY_TYPE_SUBTYPE {
        DWORD   dwKeySpec;
        GUID    Type;
        GUID    Subtype;
} KEY_TYPE_SUBTYPE, *PKEY_TYPE_SUBTYPE;

typedef struct _CERT_FORTEZZA_DATA_PROP {
    unsigned char   SerialNumber[8];
    int             CertIndex;
    unsigned char   CertLabel[36];
} CERT_FORTEZZA_DATA_PROP;


typedef struct _CRYPT_RC4_KEY_STATE {
    unsigned char Key[16];
    unsigned char SBox[256];
    unsigned char i;
    unsigned char j;
} CRYPT_RC4_KEY_STATE, *PCRYPT_RC4_KEY_STATE;

typedef struct _CRYPT_DES_KEY_STATE {
    unsigned char Key[8];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_DES_KEY_STATE, *PCRYPT_DES_KEY_STATE;

typedef struct _CRYPT_3DES_KEY_STATE {
    unsigned char Key[24];
    unsigned char IV[8];
    unsigned char Feedback[8];
} CRYPT_3DES_KEY_STATE, *PCRYPT_3DES_KEY_STATE;
#line 966 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


typedef struct _CRYPT_AES_128_KEY_STATE {
    unsigned char Key[16];
    unsigned char IV[16];
    unsigned char EncryptionState[11][16];      
    unsigned char DecryptionState[11][16];
    unsigned char Feedback[16];
} CRYPT_AES_128_KEY_STATE, *PCRYPT_AES_128_KEY_STATE;

typedef struct _CRYPT_AES_256_KEY_STATE {
    unsigned char Key[32];
    unsigned char IV[16];
    unsigned char EncryptionState[15][16];      
    unsigned char DecryptionState[15][16];
    unsigned char Feedback[16];
} CRYPT_AES_256_KEY_STATE, *PCRYPT_AES_256_KEY_STATE;
#line 984 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

#line 986 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Application Family








typedef struct _CRYPTOAPI_BLOB {
                            DWORD   cbData;
       BYTE    *pbData;
} CRYPT_INTEGER_BLOB, *PCRYPT_INTEGER_BLOB,
CRYPT_UINT_BLOB, *PCRYPT_UINT_BLOB,
CRYPT_OBJID_BLOB, *PCRYPT_OBJID_BLOB,
CERT_NAME_BLOB, *PCERT_NAME_BLOB,
CERT_RDN_VALUE_BLOB, *PCERT_RDN_VALUE_BLOB,
CERT_BLOB, *PCERT_BLOB,
CRL_BLOB, *PCRL_BLOB,
DATA_BLOB, *PDATA_BLOB,
CRYPT_DATA_BLOB, *PCRYPT_DATA_BLOB,
CRYPT_HASH_BLOB, *PCRYPT_HASH_BLOB,
CRYPT_DIGEST_BLOB, *PCRYPT_DIGEST_BLOB,
CRYPT_DER_BLOB, *PCRYPT_DER_BLOB,
CRYPT_ATTR_BLOB, *PCRYPT_ATTR_BLOB;
#line 1014 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


#line 1017 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Desktop Family



typedef struct _CMS_DH_KEY_INFO {
    DWORD               dwVersion;                      
    ALG_ID          Algid;                              
    LPSTR           pszContentEncObjId; 
    CRYPT_DATA_BLOB PubInfo;            
    void            *pReserved;         
} CMS_DH_KEY_INFO, *PCMS_DH_KEY_INFO;


__declspec(dllimport)
BOOL
__stdcall
CryptAcquireContextA(
            HCRYPTPROV  *phProv,
         LPCSTR    szContainer,
         LPCSTR    szProvider,
             DWORD       dwProvType,
             DWORD       dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptAcquireContextW(
            HCRYPTPROV  *phProv,
         LPCWSTR    szContainer,
         LPCWSTR    szProvider,
             DWORD       dwProvType,
             DWORD       dwFlags
    );




#line 1057 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#line 1058 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"






















#line 1081 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"






















#line 1104 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 1112 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"



__declspec(dllimport)
BOOL
__stdcall
CryptReleaseContext(
         HCRYPTPROV  hProv,
         DWORD       dwFlags
    );
#line 1123 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"









#line 1133 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CryptGenKey(
         HCRYPTPROV  hProv,
         ALG_ID      Algid,
         DWORD       dwFlags,
        HCRYPTKEY   *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDeriveKey(
         HCRYPTPROV  hProv,
         ALG_ID      Algid,
         HCRYPTHASH  hBaseData,
         DWORD       dwFlags,
        HCRYPTKEY   *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDestroyKey(
         HCRYPTKEY   hKey
    );


__declspec(dllimport)
BOOL
__stdcall
CryptSetKeyParam(
         HCRYPTKEY   hKey,
         DWORD       dwParam,
         const BYTE  *pbData,
         DWORD       dwFlags
    );
#line 1173 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"











#line 1185 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CryptGetKeyParam(
                                                 HCRYPTKEY   hKey,
                                                 DWORD   dwParam,
      BYTE    *pbData,
                                              DWORD   *pdwDataLen,
                                                 DWORD   dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
CryptSetHashParam(
         HCRYPTHASH  hHash,
         DWORD       dwParam,
         const BYTE  *pbData,
         DWORD       dwFlags
    );
#line 1208 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"











#line 1220 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CryptGetHashParam(
                                             HCRYPTHASH  hHash,
                                             DWORD   dwParam,
      BYTE    *pbData,
                                          DWORD   *pdwDataLen,
                                             DWORD   dwFlags
    );


__declspec(dllimport)
BOOL
__stdcall
CryptSetProvParam(
         HCRYPTPROV  hProv,
         DWORD       dwParam,
         const BYTE  *pbData,
         DWORD       dwFlags
    );
#line 1243 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"











#line 1255 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CryptGetProvParam(
                                                 HCRYPTPROV  hProv,
                                                 DWORD   dwParam,
      BYTE    *pbData,
                                              DWORD   *pdwDataLen,
                                                 DWORD   dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGenRandom(
                         HCRYPTPROV  hProv,
                         DWORD   dwLen,
        BYTE    *pbBuffer
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetUserKey(
         HCRYPTPROV  hProv,
         DWORD       dwKeySpec,
        HCRYPTKEY   *phUserKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptExportKey(
                                                 HCRYPTKEY   hKey,
                                                 HCRYPTKEY   hExpKey,
                                                 DWORD   dwBlobType,
                                                 DWORD   dwFlags,
      BYTE    *pbData,
                                              DWORD   *pdwDataLen
    );

__declspec(dllimport)
BOOL
__stdcall
CryptImportKey(
                         HCRYPTPROV  hProv,
       const BYTE  *pbData,
                         DWORD       dwDataLen,
                         HCRYPTKEY   hPubKey,
                         DWORD       dwFlags,
                        HCRYPTKEY   *phKey
    );

__declspec(dllimport)
  BOOL
__stdcall
CryptEncrypt(
                                                 HCRYPTKEY   hKey,
                                                 HCRYPTHASH  hHash,
                                                 BOOL    Final,
                                                 DWORD   dwFlags,
       BYTE    *pbData,
                                              DWORD   *pdwDataLen,
                                                 DWORD   dwBufLen
    );

__declspec(dllimport)
  BOOL
__stdcall
CryptDecrypt(
                                                 HCRYPTKEY   hKey,
                                                 HCRYPTHASH  hHash,
                                                 BOOL        Final,
                                                 DWORD       dwFlags,
        BYTE        *pbData,
                                              DWORD       *pdwDataLen
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCreateHash(
         HCRYPTPROV  hProv,
         ALG_ID      Algid,
         HCRYPTKEY   hKey,
         DWORD       dwFlags,
        HCRYPTHASH  *phHash
    );

__declspec(dllimport)
BOOL
__stdcall
CryptHashData(
                         HCRYPTHASH  hHash,
       const BYTE  *pbData,
                         DWORD   dwDataLen,
                         DWORD   dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptHashSessionKey(
         HCRYPTHASH  hHash,
         HCRYPTKEY   hKey,
         DWORD   dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDestroyHash(
         HCRYPTHASH  hHash
    );


__declspec(dllimport)
BOOL
__stdcall
CryptSignHashA(
                                               HCRYPTHASH  hHash,
                                               DWORD       dwKeySpec,
                                           LPCSTR    szDescription,
                                               DWORD       dwFlags,
      BYTE        *pbSignature,
                                            DWORD       *pdwSigLen
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSignHashW(
                                               HCRYPTHASH  hHash,
                                               DWORD       dwKeySpec,
                                           LPCWSTR    szDescription,
                                               DWORD       dwFlags,
      BYTE        *pbSignature,
                                            DWORD       *pdwSigLen
    );




#line 1399 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#line 1400 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
























#line 1425 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
























#line 1450 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 1458 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


__declspec(dllimport)
BOOL
__stdcall
CryptVerifySignatureA(
                         HCRYPTHASH  hHash,
        const BYTE  *pbSignature,
                         DWORD       dwSigLen,
                         HCRYPTKEY   hPubKey,
                     LPCSTR    szDescription,
                         DWORD       dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptVerifySignatureW(
                         HCRYPTHASH  hHash,
        const BYTE  *pbSignature,
                         DWORD       dwSigLen,
                         HCRYPTKEY   hPubKey,
                     LPCWSTR    szDescription,
                         DWORD       dwFlags
    );




#line 1487 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#line 1488 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
























#line 1513 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
























#line 1538 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 1546 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderA(
         LPCSTR    pszProvName,
         DWORD       dwProvType
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderW(
         LPCWSTR    pszProvName,
         DWORD       dwProvType
    );




#line 1567 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#line 1568 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"





















#line 1590 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderExA(
             LPCSTR pszProvName,
             DWORD dwProvType,
       DWORD *pdwReserved,
             DWORD dwFlags
    );
__declspec(dllimport)
BOOL
__stdcall
CryptSetProviderExW(
             LPCWSTR pszProvName,
             DWORD dwProvType,
       DWORD *pdwReserved,
             DWORD dwFlags
    );




#line 1615 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#line 1616 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

























#line 1642 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


__declspec(dllimport)
  BOOL
__stdcall
CryptGetDefaultProviderA(
                                                 DWORD   dwProvType,
                                           DWORD   *pdwReserved,
                                                 DWORD   dwFlags,
        LPSTR pszProvName,
                                              DWORD   *pcbProvName
    );
__declspec(dllimport)
  BOOL
__stdcall
CryptGetDefaultProviderW(
                                                 DWORD   dwProvType,
                                           DWORD   *pdwReserved,
                                                 DWORD   dwFlags,
        LPWSTR pszProvName,
                                              DWORD   *pcbProvName
    );




#line 1669 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#line 1670 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"



























#line 1698 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


__declspec(dllimport)
  BOOL
__stdcall
CryptEnumProviderTypesA(
                                                 DWORD   dwIndex,
                                           DWORD   *pdwReserved,
                                                 DWORD   dwFlags,
                                                DWORD   *pdwProvType,
        LPSTR szTypeName,
                                              DWORD   *pcbTypeName
    );
__declspec(dllimport)
  BOOL
__stdcall
CryptEnumProviderTypesW(
                                                 DWORD   dwIndex,
                                           DWORD   *pdwReserved,
                                                 DWORD   dwFlags,
                                                DWORD   *pdwProvType,
        LPWSTR szTypeName,
                                              DWORD   *pcbTypeName
    );




#line 1727 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#line 1728 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
























#line 1753 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
























#line 1778 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 1786 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


__declspec(dllimport)
  BOOL
__stdcall
CryptEnumProvidersA(
                                                     DWORD   dwIndex,
                                               DWORD   *pdwReserved,
                                                     DWORD   dwFlags,
                                                    DWORD   *pdwProvType,
        LPSTR szProvName,
                                                  DWORD   *pcbProvName
    );
__declspec(dllimport)
  BOOL
__stdcall
CryptEnumProvidersW(
                                                     DWORD   dwIndex,
                                               DWORD   *pdwReserved,
                                                     DWORD   dwFlags,
                                                    DWORD   *pdwProvType,
        LPWSTR szProvName,
                                                  DWORD   *pcbProvName
    );




#line 1815 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#line 1816 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
























#line 1841 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
























#line 1866 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







#line 1874 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CryptContextAddRef(
             HCRYPTPROV  hProv,
       DWORD       *pdwReserved,
             DWORD       dwFlags
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDuplicateKey(
             HCRYPTKEY   hKey,
       DWORD   *pdwReserved,
             DWORD   dwFlags,
            HCRYPTKEY   *phKey
    );

__declspec(dllimport)
BOOL
__stdcall
CryptDuplicateHash(
             HCRYPTHASH  hHash,
       DWORD       *pdwReserved,
             DWORD       dwFlags,
            HCRYPTHASH  *phHash
    );








BOOL
__cdecl
GetEncSChannel(
     BYTE **pData,
      DWORD *dwDecSize
    );
#line 1918 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

#line 1920 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion



#pragma region Desktop Family







#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\bcrypt.h"

















extern "C" {
#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\bcrypt.h"

#pragma region Desktop Family







typedef   LONG NTSTATUS;
typedef NTSTATUS *PNTSTATUS;
#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\bcrypt.h"



#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\bcrypt.h"


















































































































typedef struct __BCRYPT_KEY_LENGTHS_STRUCT
{
    ULONG   dwMinLength;
    ULONG   dwMaxLength;
    ULONG   dwIncrement;
} BCRYPT_KEY_LENGTHS_STRUCT;

typedef BCRYPT_KEY_LENGTHS_STRUCT BCRYPT_AUTH_TAG_LENGTHS_STRUCT;

typedef struct _BCRYPT_OID
{
    ULONG   cbOID;
    PUCHAR  pbOID;
} BCRYPT_OID;

typedef struct _BCRYPT_OID_LIST
{
    ULONG       dwOIDCount;
    BCRYPT_OID  *pOIDs;
} BCRYPT_OID_LIST;

typedef struct _BCRYPT_PKCS1_PADDING_INFO
{
    LPCWSTR pszAlgId;
} BCRYPT_PKCS1_PADDING_INFO;

typedef struct _BCRYPT_PSS_PADDING_INFO
{
    LPCWSTR pszAlgId;
    ULONG   cbSalt;
} BCRYPT_PSS_PADDING_INFO;

typedef struct _BCRYPT_OAEP_PADDING_INFO
{
    LPCWSTR pszAlgId;
    PUCHAR   pbLabel;
    ULONG   cbLabel;
} BCRYPT_OAEP_PADDING_INFO;






typedef struct _BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO
{
    ULONG       cbSize;
    ULONG       dwInfoVersion;
    PUCHAR      pbNonce;
    ULONG       cbNonce;
    PUCHAR      pbAuthData;
    ULONG       cbAuthData;
    PUCHAR      pbTag;
    ULONG       cbTag;
    PUCHAR      pbMacContext;
    ULONG       cbMacContext;
    ULONG       cbAAD;
    ULONGLONG   cbData;
    ULONG       dwFlags;
} BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO, *PBCRYPT_AUTHENTICATED_CIPHER_MODE_INFO;













































































#line 288 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\bcrypt.h"
#pragma endregion

#pragma region Application Family


typedef struct _BCryptBuffer {
    ULONG   cbBuffer;             
    ULONG   BufferType;           
    PVOID   pvBuffer;             
} BCryptBuffer, * PBCryptBuffer;

typedef struct _BCryptBufferDesc {
    ULONG   ulVersion;            
    ULONG   cBuffers;             
    PBCryptBuffer pBuffers;       
} BCryptBufferDesc, * PBCryptBufferDesc;

#line 306 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\bcrypt.h"
#pragma endregion

#pragma region Desktop Family






typedef PVOID BCRYPT_HANDLE;
typedef PVOID BCRYPT_ALG_HANDLE;
typedef PVOID BCRYPT_KEY_HANDLE;
typedef PVOID BCRYPT_HASH_HANDLE;
typedef PVOID BCRYPT_SECRET_HANDLE;








typedef struct _BCRYPT_KEY_BLOB
{
    ULONG   Magic;
} BCRYPT_KEY_BLOB;


















typedef struct _BCRYPT_RSAKEY_BLOB
{
    ULONG   Magic;
    ULONG   BitLength;
    ULONG   cbPublicExp;
    ULONG   cbModulus;
    ULONG   cbPrime1;
    ULONG   cbPrime2;
} BCRYPT_RSAKEY_BLOB;







































typedef struct _BCRYPT_ECCKEY_BLOB
{
    ULONG   dwMagic;
    ULONG   cbKey;
} BCRYPT_ECCKEY_BLOB, *PBCRYPT_ECCKEY_BLOB;












typedef struct _BCRYPT_DH_KEY_BLOB
{
    ULONG   dwMagic;
    ULONG   cbKey;
} BCRYPT_DH_KEY_BLOB, *PBCRYPT_DH_KEY_BLOB;






typedef   struct _BCRYPT_DH_PARAMETER_HEADER
{
    ULONG           cbLength;
    ULONG           dwMagic;
    ULONG           cbKeyLength;
} BCRYPT_DH_PARAMETER_HEADER;

















typedef struct _BCRYPT_DSA_KEY_BLOB
{
    ULONG   dwMagic;
    ULONG   cbKey;
    UCHAR   Count[4];
    UCHAR   Seed[20];
    UCHAR   q[20];
} BCRYPT_DSA_KEY_BLOB, *PBCRYPT_DSA_KEY_BLOB;

typedef enum
{
    DSA_HASH_ALGORITHM_SHA1,
    DSA_HASH_ALGORITHM_SHA256,
    DSA_HASH_ALGORITHM_SHA512
}HASHALGORITHM_ENUM;

typedef enum
{
    DSA_FIPS186_2,
    DSA_FIPS186_3
} DSAFIPSVERSION_ENUM;

typedef struct _BCRYPT_DSA_KEY_BLOB_V2
{
    ULONG                                   dwMagic;
    ULONG                                   cbKey;
    HASHALGORITHM_ENUM          hashAlgorithm;
    DSAFIPSVERSION_ENUM         standardVersion;
    ULONG                                   cbSeedLength;
    ULONG                                   cbGroupSize;
    UCHAR                                   Count[4];
} BCRYPT_DSA_KEY_BLOB_V2, *PBCRYPT_DSA_KEY_BLOB_V2;

typedef struct _BCRYPT_KEY_DATA_BLOB_HEADER
{
    ULONG   dwMagic;
    ULONG   dwVersion;
    ULONG   cbKeyData;
} BCRYPT_KEY_DATA_BLOB_HEADER, *PBCRYPT_KEY_DATA_BLOB_HEADER;












typedef struct _BCRYPT_DSA_PARAMETER_HEADER
{
    ULONG           cbLength;
    ULONG           dwMagic;
    ULONG           cbKeyLength;
    UCHAR           Count[4];
    UCHAR           Seed[20];
    UCHAR           q[20];
} BCRYPT_DSA_PARAMETER_HEADER;

typedef struct _BCRYPT_DSA_PARAMETER_HEADER_V2
{
    ULONG                                   cbLength;
    ULONG                                   dwMagic;
    ULONG                                   cbKeyLength;
    HASHALGORITHM_ENUM          hashAlgorithm;
    DSAFIPSVERSION_ENUM         standardVersion;
    ULONG                                   cbSeedLength;
    ULONG                                   cbGroupSize;
    UCHAR                                   Count[4];
} BCRYPT_DSA_PARAMETER_HEADER_V2;











































































 
NTSTATUS
__stdcall
BCryptOpenAlgorithmProvider(
            BCRYPT_ALG_HANDLE   *phAlgorithm,
             LPCWSTR pszAlgId,
         LPCWSTR pszImplementation,
             ULONG   dwFlags);















typedef struct _BCRYPT_ALGORITHM_IDENTIFIER
{
    LPWSTR  pszName;
    ULONG   dwClass;
    ULONG   dwFlags;

} BCRYPT_ALGORITHM_IDENTIFIER;


 
NTSTATUS
__stdcall
BCryptEnumAlgorithms(
         ULONG   dwAlgOperations,
        ULONG   *pAlgCount,
        BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList,
         ULONG   dwFlags);

typedef struct _BCRYPT_PROVIDER_NAME
{
    LPWSTR  pszProviderName;
} BCRYPT_PROVIDER_NAME;

 
NTSTATUS
__stdcall
BCryptEnumProviders(
         LPCWSTR pszAlgId,
        ULONG   *pImplCount,
        BCRYPT_PROVIDER_NAME    **ppImplList,
         ULONG   dwFlags);






 
NTSTATUS
__stdcall
BCryptGetProperty(
                                             BCRYPT_HANDLE   hObject,
                                             LPCWSTR pszProperty,
      PUCHAR   pbOutput,
                                             ULONG   cbOutput,
                                            ULONG   *pcbResult,
                                             ULONG   dwFlags);


 
NTSTATUS
__stdcall
BCryptSetProperty(
                      BCRYPT_HANDLE   hObject,
                         LPCWSTR pszProperty,
         PUCHAR   pbInput,
                         ULONG   cbInput,
                         ULONG   dwFlags);


NTSTATUS
__stdcall
BCryptCloseAlgorithmProvider(
      BCRYPT_ALG_HANDLE   hAlgorithm,
         ULONG   dwFlags);


void
__stdcall
BCryptFreeBuffer(
      PVOID   pvBuffer);





 
NTSTATUS
__stdcall
BCryptGenerateSymmetricKey(
                                  BCRYPT_ALG_HANDLE   hAlgorithm,
                                    BCRYPT_KEY_HANDLE   *phKey,
       PUCHAR   pbKeyObject,
                                     ULONG   cbKeyObject,
                    PUCHAR   pbSecret,
                                     ULONG   cbSecret,
                                     ULONG   dwFlags);


 
NTSTATUS
__stdcall
BCryptGenerateKeyPair(
      BCRYPT_ALG_HANDLE   hAlgorithm,
        BCRYPT_KEY_HANDLE   *phKey,
         ULONG   dwLength,
         ULONG   dwFlags);


 
NTSTATUS
__stdcall
BCryptEncrypt(
                                          BCRYPT_KEY_HANDLE hKey,
                         PUCHAR   pbInput,
                                             ULONG   cbInput,
                                         void    *pPaddingInfo,
                         PUCHAR   pbIV,
                                             ULONG   cbIV,
      PUCHAR   pbOutput,
                                             ULONG   cbOutput,
                                            ULONG   *pcbResult,
                                             ULONG   dwFlags);


 
NTSTATUS
__stdcall
BCryptDecrypt(
                                          BCRYPT_KEY_HANDLE   hKey,
                         PUCHAR   pbInput,
                                             ULONG   cbInput,
                                         void    *pPaddingInfo,
                         PUCHAR   pbIV,
                                             ULONG   cbIV,
      PUCHAR   pbOutput,
                                             ULONG   cbOutput,
                                            ULONG   *pcbResult,
                                             ULONG   dwFlags);


 
NTSTATUS
__stdcall
BCryptExportKey(
                                             BCRYPT_KEY_HANDLE   hKey,
                                         BCRYPT_KEY_HANDLE   hExportKey,
                                             LPCWSTR pszBlobType,
      PUCHAR   pbOutput,
                                             ULONG   cbOutput,
                                            ULONG   *pcbResult,
                                             ULONG   dwFlags);


 
NTSTATUS
__stdcall
BCryptImportKey(
                                     BCRYPT_ALG_HANDLE hAlgorithm,
                                 BCRYPT_KEY_HANDLE hImportKey,
                                     LPCWSTR pszBlobType,
                                    BCRYPT_KEY_HANDLE *phKey,
       PUCHAR   pbKeyObject,
                                     ULONG   cbKeyObject,
                     PUCHAR   pbInput,
                                     ULONG   cbInput,
                                     ULONG   dwFlags);



 
NTSTATUS
__stdcall
BCryptImportKeyPair(
                                 BCRYPT_ALG_HANDLE hAlgorithm,
                             BCRYPT_KEY_HANDLE hImportKey,
                                 LPCWSTR pszBlobType,
                                BCRYPT_KEY_HANDLE *phKey,
                 PUCHAR   pbInput,
                                 ULONG   cbInput,
                                 ULONG   dwFlags);


 
NTSTATUS
__stdcall
BCryptDuplicateKey(
                                     BCRYPT_KEY_HANDLE   hKey,
                                    BCRYPT_KEY_HANDLE   *phNewKey,
       PUCHAR   pbKeyObject,
                                     ULONG   cbKeyObject,
                                     ULONG   dwFlags);


 
NTSTATUS
__stdcall
BCryptFinalizeKeyPair(
      BCRYPT_KEY_HANDLE   hKey,
         ULONG   dwFlags);


NTSTATUS
__stdcall
BCryptDestroyKey(
      BCRYPT_KEY_HANDLE   hKey);


NTSTATUS
__stdcall
BCryptDestroySecret(
      BCRYPT_SECRET_HANDLE   hSecret);


 
NTSTATUS
__stdcall
BCryptSignHash(
                                             BCRYPT_KEY_HANDLE   hKey,
                                         void    *pPaddingInfo,
                             PUCHAR   pbInput,
                                             ULONG   cbInput,
      PUCHAR   pbOutput,
                                             ULONG   cbOutput,
                                            ULONG   *pcbResult,
                                             ULONG   dwFlags);


 
NTSTATUS
__stdcall
BCryptVerifySignature(
                             BCRYPT_KEY_HANDLE   hKey,
                         void    *pPaddingInfo,
              PUCHAR   pbHash,
                             ULONG   cbHash,
         PUCHAR   pbSignature,
                             ULONG   cbSignature,
                             ULONG   dwFlags);


 
NTSTATUS
__stdcall
BCryptSecretAgreement(
         BCRYPT_KEY_HANDLE       hPrivKey,
         BCRYPT_KEY_HANDLE       hPubKey,
        BCRYPT_SECRET_HANDLE    *phAgreedSecret,
         ULONG                   dwFlags);


 
NTSTATUS
__stdcall
BCryptDeriveKey(
             BCRYPT_SECRET_HANDLE hSharedSecret,
             LPCWSTR              pwszKDF,
         BCryptBufferDesc     *pParameterList,
      PUCHAR pbDerivedKey,
             ULONG                cbDerivedKey,
            ULONG                *pcbResult,
             ULONG                dwFlags);


 
NTSTATUS
__stdcall
BCryptKeyDerivation(
             BCRYPT_KEY_HANDLE hKey,
         BCryptBufferDesc     *pParameterList,
      PUCHAR pbDerivedKey,
             ULONG                cbDerivedKey,
            ULONG                *pcbResult,
             ULONG                dwFlags);





 
NTSTATUS
__stdcall
BCryptCreateHash(
                                  BCRYPT_ALG_HANDLE   hAlgorithm,
                                    BCRYPT_HASH_HANDLE  *phHash,
      PUCHAR   pbHashObject,
                                     ULONG   cbHashObject,
                PUCHAR   pbSecret,   
                                     ULONG   cbSecret,   
                                     ULONG   dwFlags);


 
NTSTATUS
__stdcall
BCryptHashData(
                      BCRYPT_HASH_HANDLE  hHash,
         PUCHAR   pbInput,
                         ULONG   cbInput,
                         ULONG   dwFlags);


 
NTSTATUS
__stdcall
BCryptFinishHash(
                          BCRYPT_HASH_HANDLE hHash,
      PUCHAR   pbOutput,
                             ULONG   cbOutput,
                             ULONG   dwFlags);


 
NTSTATUS
__stdcall
BCryptDuplicateHash(
                                     BCRYPT_HASH_HANDLE  hHash,
                                    BCRYPT_HASH_HANDLE  *phNewHash,
      PUCHAR   pbHashObject,
                                     ULONG   cbHashObject,
                                     ULONG   dwFlags);


NTSTATUS
__stdcall
BCryptDestroyHash(
      BCRYPT_HASH_HANDLE  hHash);










 
NTSTATUS
__stdcall
BCryptGenRandom(
                             BCRYPT_ALG_HANDLE   hAlgorithm,
        PUCHAR  pbBuffer,
                                 ULONG   cbBuffer,
                                 ULONG   dwFlags);





 
NTSTATUS
__stdcall
BCryptDeriveKeyCapi(
                                 BCRYPT_HASH_HANDLE  hHash,
                             BCRYPT_ALG_HANDLE   hTargetAlg,
         PUCHAR              pbDerivedKey,
                                 ULONG               cbDerivedKey,
                                 ULONG               dwFlags);


 
NTSTATUS
__stdcall
BCryptDeriveKeyPBKDF2(
                                 BCRYPT_ALG_HANDLE   hPrf,
        PUCHAR              pbPassword,
                                 ULONG               cbPassword,
            PUCHAR              pbSalt,
                                 ULONG               cbSalt,
                                 ULONGLONG           cIterations,
         PUCHAR              pbDerivedKey,
                                 ULONG               cbDerivedKey,
                                 ULONG               dwFlags);





typedef struct _BCRYPT_INTERFACE_VERSION
{
    USHORT MajorVersion;
    USHORT MinorVersion;

} BCRYPT_INTERFACE_VERSION, *PBCRYPT_INTERFACE_VERSION;















































































typedef struct _CRYPT_INTERFACE_REG
{
    ULONG dwInterface;
    ULONG dwFlags;

    ULONG cFunctions;
    PWSTR *rgpszFunctions;
}
CRYPT_INTERFACE_REG, *PCRYPT_INTERFACE_REG;

typedef struct _CRYPT_IMAGE_REG
{
    PWSTR pszImage;

    ULONG cInterfaces;
    PCRYPT_INTERFACE_REG *rgpInterfaces;
}
CRYPT_IMAGE_REG, *PCRYPT_IMAGE_REG;

typedef struct _CRYPT_PROVIDER_REG
{
    ULONG cAliases;
    PWSTR *rgpszAliases;

    PCRYPT_IMAGE_REG pUM;
    PCRYPT_IMAGE_REG pKM;
}
CRYPT_PROVIDER_REG, *PCRYPT_PROVIDER_REG;

typedef struct _CRYPT_PROVIDERS
{
    ULONG cProviders;
    PWSTR *rgpszProviders;
}
CRYPT_PROVIDERS, *PCRYPT_PROVIDERS;





typedef struct _CRYPT_CONTEXT_CONFIG
{
    ULONG dwFlags;
    ULONG dwReserved;
}
CRYPT_CONTEXT_CONFIG, *PCRYPT_CONTEXT_CONFIG;

typedef struct _CRYPT_CONTEXT_FUNCTION_CONFIG
{
    ULONG dwFlags;
    ULONG dwReserved;
}
CRYPT_CONTEXT_FUNCTION_CONFIG, *PCRYPT_CONTEXT_FUNCTION_CONFIG;

typedef struct _CRYPT_CONTEXTS
{
    ULONG cContexts;
    PWSTR *rgpszContexts;
}
CRYPT_CONTEXTS, *PCRYPT_CONTEXTS;

typedef struct _CRYPT_CONTEXT_FUNCTIONS
{
    ULONG cFunctions;
    PWSTR *rgpszFunctions;
}
CRYPT_CONTEXT_FUNCTIONS, *PCRYPT_CONTEXT_FUNCTIONS;

typedef struct _CRYPT_CONTEXT_FUNCTION_PROVIDERS
{
    ULONG cProviders;
    PWSTR *rgpszProviders;
}
CRYPT_CONTEXT_FUNCTION_PROVIDERS, *PCRYPT_CONTEXT_FUNCTION_PROVIDERS;





typedef struct _CRYPT_PROPERTY_REF
{
    PWSTR pszProperty;

    ULONG cbValue;
    PUCHAR pbValue;
}
CRYPT_PROPERTY_REF, *PCRYPT_PROPERTY_REF;

typedef struct _CRYPT_IMAGE_REF
{
    PWSTR pszImage;
    ULONG dwFlags;
}
CRYPT_IMAGE_REF, *PCRYPT_IMAGE_REF;

typedef struct _CRYPT_PROVIDER_REF
{
    ULONG dwInterface;
    PWSTR pszFunction;
    PWSTR pszProvider;

    ULONG cProperties;
    PCRYPT_PROPERTY_REF *rgpProperties;

    PCRYPT_IMAGE_REF pUM;
    PCRYPT_IMAGE_REF pKM;
}
CRYPT_PROVIDER_REF, *PCRYPT_PROVIDER_REF;

typedef struct _CRYPT_PROVIDER_REFS
{
    ULONG cProviders;
    PCRYPT_PROVIDER_REF *rgpProviders;
}
CRYPT_PROVIDER_REFS, *PCRYPT_PROVIDER_REFS;








 
NTSTATUS
__stdcall
BCryptQueryProviderRegistration(
      LPCWSTR pszProvider,
      ULONG dwMode,
      ULONG dwInterface,
      ULONG* pcbBuffer,
     
        
        
    PCRYPT_PROVIDER_REG *ppBuffer);

 
NTSTATUS
__stdcall
BCryptEnumRegisteredProviders(
      ULONG* pcbBuffer,
     
        
        
    PCRYPT_PROVIDERS *ppBuffer);




 
NTSTATUS
__stdcall
BCryptCreateContext(
      ULONG dwTable,
      LPCWSTR pszContext,
      PCRYPT_CONTEXT_CONFIG pConfig); 

 
NTSTATUS
__stdcall
BCryptDeleteContext(
      ULONG dwTable,
      LPCWSTR pszContext);

 
NTSTATUS
__stdcall
BCryptEnumContexts(
      ULONG dwTable,
      ULONG* pcbBuffer,
     
        
        
    PCRYPT_CONTEXTS *ppBuffer);

 
NTSTATUS
__stdcall
BCryptConfigureContext(
      ULONG dwTable,
      LPCWSTR pszContext,
      PCRYPT_CONTEXT_CONFIG pConfig);

 
NTSTATUS
__stdcall
BCryptQueryContextConfiguration(
      ULONG dwTable,
      LPCWSTR pszContext,
      ULONG* pcbBuffer,
     
        
        
    PCRYPT_CONTEXT_CONFIG *ppBuffer);

 
NTSTATUS
__stdcall
BCryptAddContextFunction(
      ULONG dwTable,
      LPCWSTR pszContext,
      ULONG dwInterface,
      LPCWSTR pszFunction,
      ULONG dwPosition);

 
NTSTATUS
__stdcall
BCryptRemoveContextFunction(
      ULONG dwTable,
      LPCWSTR pszContext,
      ULONG dwInterface,
      LPCWSTR pszFunction);

 
NTSTATUS
__stdcall
BCryptEnumContextFunctions(
      ULONG dwTable,
      LPCWSTR pszContext,
      ULONG dwInterface,
      ULONG* pcbBuffer,
     
        
        
    PCRYPT_CONTEXT_FUNCTIONS *ppBuffer);

 
NTSTATUS
__stdcall
BCryptConfigureContextFunction(
      ULONG dwTable,
      LPCWSTR pszContext,
      ULONG dwInterface,
      LPCWSTR pszFunction,
      PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig);

 
NTSTATUS
__stdcall
BCryptQueryContextFunctionConfiguration(
      ULONG dwTable,
      LPCWSTR pszContext,
      ULONG dwInterface,
      LPCWSTR pszFunction,
      ULONG* pcbBuffer,
     
        
        
    PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer);


 
NTSTATUS
__stdcall
BCryptEnumContextFunctionProviders(
      ULONG dwTable,
      LPCWSTR pszContext,
      ULONG dwInterface,
      LPCWSTR pszFunction,
      ULONG* pcbBuffer,
     
        
        
    PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer);

 
NTSTATUS
__stdcall
BCryptSetContextFunctionProperty(
      ULONG dwTable,
      LPCWSTR pszContext,
      ULONG dwInterface,
      LPCWSTR pszFunction,
      LPCWSTR pszProperty,
      ULONG cbValue,
      PUCHAR pbValue);

 
NTSTATUS
__stdcall
BCryptQueryContextFunctionProperty(
      ULONG dwTable,
      LPCWSTR pszContext,
      ULONG dwInterface,
      LPCWSTR pszFunction,
      LPCWSTR pszProperty,
      ULONG* pcbValue,
     
        
        
    PUCHAR *ppbValue);

#line 1367 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\bcrypt.h"













 
NTSTATUS
__stdcall
BCryptRegisterConfigChangeNotify(
      HANDLE *phEvent);
#line 1386 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\bcrypt.h"








NTSTATUS
__stdcall
BCryptUnregisterConfigChangeNotify(
      HANDLE hEvent);
#line 1399 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\bcrypt.h"




 
NTSTATUS __stdcall
BCryptResolveProviders(
      LPCWSTR pszContext,
      ULONG dwInterface,
      LPCWSTR pszFunction,
      LPCWSTR pszProvider,
      ULONG dwMode,
      ULONG dwFlags,
      ULONG* pcbBuffer,
     
        
        
    PCRYPT_PROVIDER_REFS *ppBuffer);




NTSTATUS
__stdcall
BCryptGetFipsAlgorithmMode(
      BOOLEAN *pfEnabled
    );


#line 1429 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\bcrypt.h"
#pragma endregion


}
#line 1434 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\bcrypt.h"

#line 1436 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\bcrypt.h"



#line 1933 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

#line 1935 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Application Family


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"

















extern "C" {
#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"






typedef LONG SECURITY_STATUS;

#line 29 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\bcrypt.h"






























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"

























typedef LPVOID (__stdcall *PFN_NCRYPT_ALLOC)(
      SIZE_T cbSize
    );

typedef void (__stdcall *PFN_NCRYPT_FREE)(
      LPVOID pv
    );

typedef struct NCRYPT_ALLOC_PARA {
    DWORD                   cbSize;     
    PFN_NCRYPT_ALLOC        pfnAlloc;           
    PFN_NCRYPT_FREE         pfnFree;
} NCRYPT_ALLOC_PARA;












































#line 114 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"













#line 128 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"






#line 135 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"
















#line 152 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"






























typedef BCryptBuffer     NCryptBuffer;
typedef BCryptBuffer*    PNCryptBuffer;
typedef BCryptBufferDesc NCryptBufferDesc;
typedef BCryptBufferDesc* PNCryptBufferDesc;





typedef ULONG_PTR NCRYPT_HANDLE;
typedef ULONG_PTR NCRYPT_PROV_HANDLE;
typedef ULONG_PTR NCRYPT_KEY_HANDLE;
typedef ULONG_PTR NCRYPT_HASH_HANDLE;
typedef ULONG_PTR NCRYPT_SECRET_HANDLE;











#line 208 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"



typedef   
struct _NCRYPT_CIPHER_PADDING_INFO
{
    
    ULONG       cbSize;

    
    DWORD       dwFlags;

    
    
    
    
     
    PUCHAR      pbIV;
    ULONG       cbIV;

    
    
    
    
    
    
    
    
    
    
     
    PUCHAR      pbOtherInfo;            
    ULONG       cbOtherInfo;

} NCRYPT_CIPHER_PADDING_INFO, *PNCRYPT_CIPHER_PADDING_INFO;








#line 252 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"













#pragma region Desktop Family





 
SECURITY_STATUS
__stdcall
NCryptOpenStorageProvider(
        NCRYPT_PROV_HANDLE *phProvider,
      LPCWSTR pszProviderName,
         DWORD   dwFlags);












#line 291 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"



typedef struct _NCryptAlgorithmName
{
    LPWSTR  pszName;
    DWORD   dwClass;            
    DWORD   dwAlgOperations;    
    DWORD   dwFlags;
} NCryptAlgorithmName;


 
SECURITY_STATUS
__stdcall
NCryptEnumAlgorithms(
         NCRYPT_PROV_HANDLE hProvider,
         DWORD   dwAlgOperations,
        DWORD * pdwAlgCount,
     NCryptAlgorithmName **ppAlgList,
         DWORD   dwFlags);



 
SECURITY_STATUS
__stdcall
NCryptIsAlgSupported(
         NCRYPT_PROV_HANDLE hProvider,
         LPCWSTR pszAlgId,
         DWORD   dwFlags);






typedef struct NCryptKeyName
{
    LPWSTR  pszName;
    LPWSTR  pszAlgid;
    DWORD   dwLegacyKeySpec;
    DWORD   dwFlags;
} NCryptKeyName;

 
SECURITY_STATUS
__stdcall
NCryptEnumKeys(
         NCRYPT_PROV_HANDLE hProvider,
      LPCWSTR pszScope,
     NCryptKeyName **ppKeyName,
      PVOID * ppEnumState,
         DWORD   dwFlags);



typedef struct NCryptProviderName
{
    LPWSTR  pszName;
    LPWSTR  pszComment;
} NCryptProviderName;

 
SECURITY_STATUS
__stdcall
NCryptEnumStorageProviders(
        DWORD * pdwProviderCount,
     NCryptProviderName **ppProviderList,
         DWORD   dwFlags);



SECURITY_STATUS
__stdcall
NCryptFreeBuffer(
      PVOID   pvInput);







 
SECURITY_STATUS
__stdcall
NCryptOpenKey(
         NCRYPT_PROV_HANDLE hProvider,
        NCRYPT_KEY_HANDLE *phKey,
         LPCWSTR pszKeyName,
      DWORD  dwLegacyKeySpec,
         DWORD   dwFlags);







 
SECURITY_STATUS
__stdcall
NCryptCreatePersistedKey(
         NCRYPT_PROV_HANDLE hProvider,
        NCRYPT_KEY_HANDLE *phKey,
         LPCWSTR pszAlgId,
      LPCWSTR pszKeyName,
         DWORD   dwLegacyKeySpec,
         DWORD   dwFlags);













#line 415 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"


































































#line 482 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"






#line 489 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"






























typedef struct __NCRYPT_UI_POLICY
{
    DWORD   dwVersion;
    DWORD   dwFlags;
    LPCWSTR pszCreationTitle;
    LPCWSTR pszFriendlyName;
    LPCWSTR pszDescription;
} NCRYPT_UI_POLICY;



typedef struct __NCRYPT_SUPPORTED_LENGTHS
{
    DWORD   dwMinLength;
    DWORD   dwMaxLength;
    DWORD   dwIncrement;
    DWORD   dwDefaultLength;
} NCRYPT_SUPPORTED_LENGTHS;




 
 
SECURITY_STATUS
__stdcall
NCryptGetProperty(
         NCRYPT_HANDLE hObject,
         LPCWSTR pszProperty,
      PBYTE pbOutput,
         DWORD   cbOutput,
        DWORD * pcbResult,
         DWORD   dwFlags);







 
SECURITY_STATUS
__stdcall
NCryptSetProperty(
         NCRYPT_HANDLE hObject,
         LPCWSTR pszProperty,
      PBYTE pbInput,
         DWORD   cbInput,
         DWORD   dwFlags);





 
SECURITY_STATUS
__stdcall
NCryptFinalizeKey(
         NCRYPT_KEY_HANDLE hKey,
         DWORD   dwFlags);



 
SECURITY_STATUS
__stdcall
NCryptEncrypt(
         NCRYPT_KEY_HANDLE hKey,
      PBYTE pbInput,
         DWORD   cbInput,
         void *pPaddingInfo,
      PBYTE pbOutput,
         DWORD   cbOutput,
        DWORD * pcbResult,
         DWORD   dwFlags);



 
SECURITY_STATUS
__stdcall
NCryptDecrypt(
         NCRYPT_KEY_HANDLE hKey,
      PBYTE pbInput,
         DWORD   cbInput,
         void *pPaddingInfo,
      PBYTE pbOutput,
         DWORD   cbOutput,
        DWORD * pcbResult,
         DWORD   dwFlags);





typedef struct _NCRYPT_KEY_BLOB_HEADER 
{  
    ULONG   cbSize;             
    ULONG   dwMagic;  
    ULONG   cbAlgName;          
    ULONG   cbKeyData;
} NCRYPT_KEY_BLOB_HEADER, *PNCRYPT_KEY_BLOB_HEADER;







#line 629 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"










 
SECURITY_STATUS
__stdcall
NCryptImportKey(
         NCRYPT_PROV_HANDLE hProvider,
      NCRYPT_KEY_HANDLE hImportKey,
         LPCWSTR pszBlobType,
      NCryptBufferDesc *pParameterList,
        NCRYPT_KEY_HANDLE *phKey,
      PBYTE pbData,
         DWORD   cbData,
         DWORD   dwFlags);



 
SECURITY_STATUS
__stdcall
NCryptExportKey(
         NCRYPT_KEY_HANDLE hKey,
      NCRYPT_KEY_HANDLE hExportKey,
         LPCWSTR pszBlobType,
      NCryptBufferDesc *pParameterList,
      PBYTE pbOutput,
         DWORD   cbOutput,
        DWORD * pcbResult,
         DWORD   dwFlags);



 
SECURITY_STATUS
__stdcall
NCryptSignHash(
         NCRYPT_KEY_HANDLE hKey,
         void *pPaddingInfo,
      PBYTE pbHashValue,
         DWORD   cbHashValue,
      PBYTE pbSignature,
         DWORD   cbSignature,
        DWORD * pcbResult,
         DWORD   dwFlags);



 
SECURITY_STATUS
__stdcall
NCryptVerifySignature(
         NCRYPT_KEY_HANDLE hKey,
         void *pPaddingInfo,
      PBYTE pbHashValue,
         DWORD   cbHashValue,
      PBYTE pbSignature,
         DWORD   cbSignature,
         DWORD   dwFlags);



SECURITY_STATUS
__stdcall
NCryptDeleteKey(
         NCRYPT_KEY_HANDLE hKey,
         DWORD   dwFlags);



SECURITY_STATUS
__stdcall
NCryptFreeObject(
         NCRYPT_HANDLE hObject);



BOOL
__stdcall
NCryptIsKeyHandle(
         NCRYPT_KEY_HANDLE hKey);

 
SECURITY_STATUS
__stdcall
NCryptTranslateHandle(
      NCRYPT_PROV_HANDLE *phProvider,
        NCRYPT_KEY_HANDLE *phKey,
         HCRYPTPROV hLegacyProv,
      HCRYPTKEY hLegacyKey,
      DWORD  dwLegacyKeySpec,
         DWORD   dwFlags);








 
SECURITY_STATUS
__stdcall
NCryptNotifyChangeKey(
         NCRYPT_PROV_HANDLE hProvider,
      HANDLE *phEvent,
         DWORD   dwFlags);



 
SECURITY_STATUS
__stdcall
NCryptSecretAgreement(
         NCRYPT_KEY_HANDLE hPrivKey,
         NCRYPT_KEY_HANDLE hPubKey,
        NCRYPT_SECRET_HANDLE *phAgreedSecret,
         DWORD   dwFlags);



 
SECURITY_STATUS
__stdcall
NCryptDeriveKey(
             NCRYPT_SECRET_HANDLE hSharedSecret,
             LPCWSTR              pwszKDF,
         NCryptBufferDesc     *pParameterList,
      PBYTE pbDerivedKey,
             DWORD                cbDerivedKey,
            DWORD                *pcbResult,
             ULONG                dwFlags);





 
SECURITY_STATUS
__stdcall
NCryptKeyDerivation(
             NCRYPT_KEY_HANDLE   hKey,
         NCryptBufferDesc    *pParameterList,
      PUCHAR pbDerivedKey,
             DWORD               cbDerivedKey,
            DWORD               *pcbResult,
             ULONG               dwFlags);

#line 785 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"







#line 793 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"
#pragma endregion


}       
#line 798 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"

#line 800 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ncrypt.h"


#line 1941 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

#line 1943 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Desktop Family





typedef ULONG_PTR HCRYPTPROV_OR_NCRYPT_KEY_HANDLE;



typedef ULONG_PTR HCRYPTPROV_LEGACY;

#line 1958 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Application Family







typedef struct _CRYPT_BIT_BLOB {
    DWORD   cbData;
    BYTE    *pbData;
    DWORD   cUnusedBits;
} CRYPT_BIT_BLOB, *PCRYPT_BIT_BLOB;







typedef struct _CRYPT_ALGORITHM_IDENTIFIER {
    LPSTR               pszObjId;
    CRYPT_OBJID_BLOB    Parameters;
} CRYPT_ALGORITHM_IDENTIFIER, *PCRYPT_ALGORITHM_IDENTIFIER;


#line 1987 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Desktop Family










































































































































































































































typedef struct _CRYPT_OBJID_TABLE {
    DWORD   dwAlgId;
    LPCSTR  pszObjId;
} CRYPT_OBJID_TABLE, *PCRYPT_OBJID_TABLE;





typedef struct _CRYPT_HASH_INFO {
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    CRYPT_HASH_BLOB             Hash;
} CRYPT_HASH_INFO, *PCRYPT_HASH_INFO;

#line 2239 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Application Family








typedef struct _CERT_EXTENSION {
    LPSTR               pszObjId;
    BOOL                fCritical;
    CRYPT_OBJID_BLOB    Value;
} CERT_EXTENSION, *PCERT_EXTENSION;
typedef const CERT_EXTENSION* PCCERT_EXTENSION;


#line 2259 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Desktop Family








typedef struct _CRYPT_ATTRIBUTE_TYPE_VALUE {
    LPSTR               pszObjId;
    CRYPT_OBJID_BLOB    Value;
} CRYPT_ATTRIBUTE_TYPE_VALUE, *PCRYPT_ATTRIBUTE_TYPE_VALUE;








typedef struct _CRYPT_ATTRIBUTE {
    LPSTR               pszObjId;
    DWORD               cValue;
    PCRYPT_ATTR_BLOB    rgValue;
} CRYPT_ATTRIBUTE, *PCRYPT_ATTRIBUTE;

typedef struct _CRYPT_ATTRIBUTES {
    DWORD                cAttr;
    PCRYPT_ATTRIBUTE     rgAttr;
} CRYPT_ATTRIBUTES, *PCRYPT_ATTRIBUTES;








typedef struct _CERT_RDN_ATTR {
    LPSTR                   pszObjId;
    DWORD                   dwValueType;
    CERT_RDN_VALUE_BLOB     Value;
} CERT_RDN_ATTR, *PCERT_RDN_ATTR;























































































































































































typedef struct _CERT_RDN {
    DWORD           cRDNAttr;
    PCERT_RDN_ATTR  rgRDNAttr;
} CERT_RDN, *PCERT_RDN;





typedef struct _CERT_NAME_INFO {
    DWORD       cRDN;
    PCERT_RDN   rgRDN;
} CERT_NAME_INFO, *PCERT_NAME_INFO;







typedef struct _CERT_NAME_VALUE {
    DWORD               dwValueType;
    CERT_RDN_VALUE_BLOB Value;
} CERT_NAME_VALUE, *PCERT_NAME_VALUE;

#line 2514 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Application Family









typedef struct _CERT_PUBLIC_KEY_INFO {
    CRYPT_ALGORITHM_IDENTIFIER    Algorithm;
    CRYPT_BIT_BLOB                PublicKey;
} CERT_PUBLIC_KEY_INFO, *PCERT_PUBLIC_KEY_INFO;


#line 2533 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Desktop Family









typedef struct _CRYPT_ECC_PRIVATE_KEY_INFO{
    DWORD                       dwVersion;  
    CRYPT_DER_BLOB              PrivateKey; 
    LPSTR                       szCurveOid; 
    CRYPT_BIT_BLOB              PublicKey;  
}  CRYPT_ECC_PRIVATE_KEY_INFO, *PCRYPT_ECC_PRIVATE_KEY_INFO;






typedef struct _CRYPT_PRIVATE_KEY_INFO{
    DWORD                       Version;
    CRYPT_ALGORITHM_IDENTIFIER  Algorithm;
    CRYPT_DER_BLOB              PrivateKey;
    PCRYPT_ATTRIBUTES           pAttributes;
}  CRYPT_PRIVATE_KEY_INFO, *PCRYPT_PRIVATE_KEY_INFO;





typedef struct _CRYPT_ENCRYPTED_PRIVATE_KEY_INFO{
    CRYPT_ALGORITHM_IDENTIFIER  EncryptionAlgorithm;
    CRYPT_DATA_BLOB             EncryptedPrivateKey;
} CRYPT_ENCRYPTED_PRIVATE_KEY_INFO, *PCRYPT_ENCRYPTED_PRIVATE_KEY_INFO;

















typedef BOOL (__stdcall *PCRYPT_DECRYPT_PRIVATE_KEY_FUNC)(
      CRYPT_ALGORITHM_IDENTIFIER Algorithm,
      CRYPT_DATA_BLOB EncryptedPrivateKey,
      BYTE* pbClearTextKey,
      DWORD* pcbClearTextKey,
      LPVOID pVoidDecryptFunc);

















typedef BOOL (__stdcall *PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC)(
      CRYPT_ALGORITHM_IDENTIFIER* pAlgorithm,
      CRYPT_DATA_BLOB* pClearTextPrivateKey,
      BYTE* pbEncryptedKey,
      DWORD* pcbEncryptedKey,
      LPVOID pVoidEncryptFunc);













typedef BOOL (__stdcall *PCRYPT_RESOLVE_HCRYPTPROV_FUNC)(
                                                       CRYPT_PRIVATE_KEY_INFO      *pPrivateKeyInfo,
                                                       HCRYPTPROV                  *phCryptProv,
                                                       LPVOID                      pVoidResolveFunc);










typedef struct _CRYPT_PKCS8_IMPORT_PARAMS{
    CRYPT_DIGEST_BLOB               PrivateKey;             
    PCRYPT_RESOLVE_HCRYPTPROV_FUNC  pResolvehCryptProvFunc; 
    LPVOID                          pVoidResolveFunc;       
    PCRYPT_DECRYPT_PRIVATE_KEY_FUNC pDecryptPrivateKeyFunc;
    LPVOID                          pVoidDecryptFunc;
} CRYPT_PKCS8_IMPORT_PARAMS, *PCRYPT_PKCS8_IMPORT_PARAMS, CRYPT_PRIVATE_KEY_BLOB_AND_PARAMS, *PCRYPT_PRIVATE_KEY_BLOB_AND_PARAMS;









typedef struct _CRYPT_PKCS8_EXPORT_PARAMS{
    HCRYPTPROV                      hCryptProv;
    DWORD                           dwKeySpec;
    LPSTR                           pszPrivateKeyObjId;

    PCRYPT_ENCRYPT_PRIVATE_KEY_FUNC pEncryptPrivateKeyFunc;
    LPVOID                          pVoidEncryptFunc;
} CRYPT_PKCS8_EXPORT_PARAMS, *PCRYPT_PKCS8_EXPORT_PARAMS;

#line 2671 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Application Family









typedef struct _CERT_INFO {
    DWORD                       dwVersion;
    CRYPT_INTEGER_BLOB          SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER  SignatureAlgorithm;
    CERT_NAME_BLOB              Issuer;
    FILETIME                    NotBefore;
    FILETIME                    NotAfter;
    CERT_NAME_BLOB              Subject;
    CERT_PUBLIC_KEY_INFO        SubjectPublicKeyInfo;
    CRYPT_BIT_BLOB              IssuerUniqueId;
    CRYPT_BIT_BLOB              SubjectUniqueId;
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;
} CERT_INFO, *PCERT_INFO;


#line 2700 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Desktop Family





























typedef struct _CRL_ENTRY {
    CRYPT_INTEGER_BLOB  SerialNumber;
    FILETIME            RevocationDate;
    DWORD               cExtension;
    PCERT_EXTENSION     rgExtension;
} CRL_ENTRY, *PCRL_ENTRY;







typedef struct _CRL_INFO {
    DWORD                       dwVersion;
    CRYPT_ALGORITHM_IDENTIFIER  SignatureAlgorithm;
    CERT_NAME_BLOB              Issuer;
    FILETIME                    ThisUpdate;
    FILETIME                    NextUpdate;
    DWORD                       cCRLEntry;
    PCRL_ENTRY                  rgCRLEntry;
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;
} CRL_INFO, *PCRL_INFO;













typedef struct _CERT_OR_CRL_BLOB {
    DWORD                   dwChoice;
    DWORD                   cbEncoded;
     
    BYTE                    *pbEncoded;
} CERT_OR_CRL_BLOB, * PCERT_OR_CRL_BLOB;

typedef struct _CERT_OR_CRL_BUNDLE {
    DWORD                   cItem;
     
    PCERT_OR_CRL_BLOB       rgItem;
} CERT_OR_CRL_BUNDLE, *PCERT_OR_CRL_BUNDLE;







typedef struct _CERT_REQUEST_INFO {
    DWORD                   dwVersion;
    CERT_NAME_BLOB          Subject;
    CERT_PUBLIC_KEY_INFO    SubjectPublicKeyInfo;
    DWORD                   cAttribute;
    PCRYPT_ATTRIBUTE        rgAttribute;
} CERT_REQUEST_INFO, *PCERT_REQUEST_INFO;









typedef struct _CERT_KEYGEN_REQUEST_INFO {
    DWORD                   dwVersion;
    CERT_PUBLIC_KEY_INFO    SubjectPublicKeyInfo;
    LPWSTR                  pwszChallengeString;        
} CERT_KEYGEN_REQUEST_INFO, *PCERT_KEYGEN_REQUEST_INFO;











typedef struct _CERT_SIGNED_CONTENT_INFO {
    CRYPT_DER_BLOB              ToBeSigned;
    CRYPT_ALGORITHM_IDENTIFIER  SignatureAlgorithm;
    CRYPT_BIT_BLOB              Signature;
} CERT_SIGNED_CONTENT_INFO, *PCERT_SIGNED_CONTENT_INFO;









typedef struct _CTL_USAGE {
    DWORD               cUsageIdentifier;
    LPSTR               *rgpszUsageIdentifier;      
} CTL_USAGE, *PCTL_USAGE,
CERT_ENHKEY_USAGE, *PCERT_ENHKEY_USAGE;
typedef const CTL_USAGE* PCCTL_USAGE;
typedef const CERT_ENHKEY_USAGE* PCCERT_ENHKEY_USAGE;





typedef struct _CTL_ENTRY {
    CRYPT_DATA_BLOB     SubjectIdentifier;          
    DWORD               cAttribute;
    PCRYPT_ATTRIBUTE    rgAttribute;                
} CTL_ENTRY, *PCTL_ENTRY;




typedef struct _CTL_INFO {
    DWORD                       dwVersion;
    CTL_USAGE                   SubjectUsage;
    CRYPT_DATA_BLOB             ListIdentifier;     
    CRYPT_INTEGER_BLOB          SequenceNumber;     
    FILETIME                    ThisUpdate;
    FILETIME                    NextUpdate;         
    CRYPT_ALGORITHM_IDENTIFIER  SubjectAlgorithm;
    DWORD                       cCTLEntry;
    PCTL_ENTRY                  rgCTLEntry;         
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;        
} CTL_INFO, *PCTL_INFO;














typedef struct _CRYPT_TIME_STAMP_REQUEST_INFO {
    LPSTR                   pszTimeStampAlgorithm;   
    LPSTR                   pszContentType;          
    CRYPT_OBJID_BLOB        Content;
    DWORD                   cAttribute;
    PCRYPT_ATTRIBUTE        rgAttribute;
} CRYPT_TIME_STAMP_REQUEST_INFO, *PCRYPT_TIME_STAMP_REQUEST_INFO;




typedef struct _CRYPT_ENROLLMENT_NAME_VALUE_PAIR {
    LPWSTR      pwszName;
    LPWSTR      pwszValue;
} CRYPT_ENROLLMENT_NAME_VALUE_PAIR, * PCRYPT_ENROLLMENT_NAME_VALUE_PAIR;




typedef struct _CRYPT_CSP_PROVIDER {
    DWORD           dwKeySpec;
    LPWSTR          pwszProviderName;
    CRYPT_BIT_BLOB  Signature;
} CRYPT_CSP_PROVIDER, * PCRYPT_CSP_PROVIDER;












































__declspec(dllimport)
BOOL
__stdcall
CryptFormatObject(
      DWORD dwCertEncodingType,
      DWORD dwFormatType,
      DWORD dwFormatStrType,
      void *pFormatStruct,
      LPCSTR lpszStructType,
      const BYTE *pbEncoded,
      DWORD cbEncoded,
     void *pbFormat,
      DWORD *pcbFormat
    );





































































typedef LPVOID (__stdcall *PFN_CRYPT_ALLOC)(
      size_t cbSize
    );

typedef void (__stdcall *PFN_CRYPT_FREE)(
      LPVOID pv
    );


typedef struct _CRYPT_ENCODE_PARA {
    DWORD                   cbSize;
    PFN_CRYPT_ALLOC         pfnAlloc;           
    PFN_CRYPT_FREE          pfnFree;            
} CRYPT_ENCODE_PARA, *PCRYPT_ENCODE_PARA;


__declspec(dllimport)
BOOL
__stdcall
CryptEncodeObjectEx(
      DWORD dwCertEncodingType,
      LPCSTR lpszStructType,
      const void *pvStructInfo,
      DWORD dwFlags,
      PCRYPT_ENCODE_PARA pEncodePara,
      void *pvEncoded,
      DWORD *pcbEncoded
    );

__declspec(dllimport)
BOOL
__stdcall
CryptEncodeObject(
      DWORD dwCertEncodingType,
      LPCSTR lpszStructType,
      const void *pvStructInfo,
      BYTE *pbEncoded,
      DWORD *pcbEncoded
    );













































































typedef struct _CRYPT_DECODE_PARA {
    DWORD                   cbSize;
    PFN_CRYPT_ALLOC         pfnAlloc;           
    PFN_CRYPT_FREE          pfnFree;            
} CRYPT_DECODE_PARA, *PCRYPT_DECODE_PARA;

__declspec(dllimport)
BOOL
__stdcall
CryptDecodeObjectEx(
      DWORD dwCertEncodingType,
      LPCSTR lpszStructType,
      const BYTE *pbEncoded,
      DWORD cbEncoded,
      DWORD dwFlags,
      PCRYPT_DECODE_PARA pDecodePara,
      void *pvStructInfo,
      DWORD *pcbStructInfo
    );


__declspec(dllimport)
BOOL
__stdcall
CryptDecodeObject(
      DWORD dwCertEncodingType,
      LPCSTR lpszStructType,
      const BYTE *pbEncoded,
      DWORD cbEncoded,
      DWORD dwFlags,
      void *pvStructInfo,
      DWORD *pcbStructInfo
    );







































































































































































































































































































































































#line 3542 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"




#line 3547 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"




#line 3552 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"




#line 3557 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"





















#line 3579 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


































































































































#line 3710 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"



#line 3714 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"














































#line 3761 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"





#line 3767 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"




#line 3772 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"



#line 3776 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"



#line 3780 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"














































































































typedef struct _CERT_EXTENSIONS {
    DWORD           cExtension;
    PCERT_EXTENSION rgExtension;
} CERT_EXTENSIONS, *PCERT_EXTENSIONS;



































































































































































typedef struct _CERT_AUTHORITY_KEY_ID_INFO {
    CRYPT_DATA_BLOB     KeyId;
    CERT_NAME_BLOB      CertIssuer;
    CRYPT_INTEGER_BLOB  CertSerialNumber;
} CERT_AUTHORITY_KEY_ID_INFO, *PCERT_AUTHORITY_KEY_ID_INFO;







typedef struct _CERT_PRIVATE_KEY_VALIDITY {
    FILETIME            NotBefore;
    FILETIME            NotAfter;
} CERT_PRIVATE_KEY_VALIDITY, *PCERT_PRIVATE_KEY_VALIDITY;

typedef struct _CERT_KEY_ATTRIBUTES_INFO {
    CRYPT_DATA_BLOB             KeyId;
    CRYPT_BIT_BLOB              IntendedKeyUsage;
    PCERT_PRIVATE_KEY_VALIDITY  pPrivateKeyUsagePeriod;     
} CERT_KEY_ATTRIBUTES_INFO, *PCERT_KEY_ATTRIBUTES_INFO;






















typedef struct _CERT_POLICY_ID {
    DWORD                   cCertPolicyElementId;
    LPSTR                   *rgpszCertPolicyElementId;  
} CERT_POLICY_ID, *PCERT_POLICY_ID;

typedef struct _CERT_KEY_USAGE_RESTRICTION_INFO {
    DWORD                   cCertPolicyId;
    PCERT_POLICY_ID         rgCertPolicyId;
    CRYPT_BIT_BLOB          RestrictedKeyUsage;
} CERT_KEY_USAGE_RESTRICTION_INFO, *PCERT_KEY_USAGE_RESTRICTION_INFO;














typedef struct _CERT_OTHER_NAME {
    LPSTR               pszObjId;
    CRYPT_OBJID_BLOB    Value;
} CERT_OTHER_NAME, *PCERT_OTHER_NAME;

typedef struct _CERT_ALT_NAME_ENTRY {
    DWORD   dwAltNameChoice;
    union {                                             
        PCERT_OTHER_NAME            pOtherName;         
        LPWSTR                      pwszRfc822Name;     
        LPWSTR                      pwszDNSName;        
        
        CERT_NAME_BLOB              DirectoryName;      
        
        LPWSTR                      pwszURL;            
        CRYPT_DATA_BLOB             IPAddress;          
        LPSTR                       pszRegisteredID;    
    } ;                                   
} CERT_ALT_NAME_ENTRY, *PCERT_ALT_NAME_ENTRY;















typedef struct _CERT_ALT_NAME_INFO {
    DWORD                   cAltEntry;
    PCERT_ALT_NAME_ENTRY    rgAltEntry;
} CERT_ALT_NAME_INFO, *PCERT_ALT_NAME_INFO;































typedef struct _CERT_BASIC_CONSTRAINTS_INFO {
    CRYPT_BIT_BLOB          SubjectType;
    BOOL                    fPathLenConstraint;
    DWORD                   dwPathLenConstraint;
    DWORD                   cSubtreesConstraint;
    CERT_NAME_BLOB          *rgSubtreesConstraint;
} CERT_BASIC_CONSTRAINTS_INFO, *PCERT_BASIC_CONSTRAINTS_INFO;










typedef struct _CERT_BASIC_CONSTRAINTS2_INFO {
    BOOL                    fCA;
    BOOL                    fPathLenConstraint;
    DWORD                   dwPathLenConstraint;
} CERT_BASIC_CONSTRAINTS2_INFO, *PCERT_BASIC_CONSTRAINTS2_INFO;




















typedef struct _CERT_POLICY_QUALIFIER_INFO {
    LPSTR                       pszPolicyQualifierId;   
    CRYPT_OBJID_BLOB            Qualifier;              
} CERT_POLICY_QUALIFIER_INFO, *PCERT_POLICY_QUALIFIER_INFO;

typedef struct _CERT_POLICY_INFO {
    LPSTR                       pszPolicyIdentifier;    
    DWORD                       cPolicyQualifier;       
    CERT_POLICY_QUALIFIER_INFO  *rgPolicyQualifier;
} CERT_POLICY_INFO, *PCERT_POLICY_INFO;

typedef struct _CERT_POLICIES_INFO {
    DWORD                       cPolicyInfo;
    CERT_POLICY_INFO            *rgPolicyInfo;
} CERT_POLICIES_INFO, *PCERT_POLICIES_INFO;









typedef struct _CERT_POLICY_QUALIFIER_NOTICE_REFERENCE {
    LPSTR   pszOrganization;
    DWORD   cNoticeNumbers;
    int     *rgNoticeNumbers;
} CERT_POLICY_QUALIFIER_NOTICE_REFERENCE, *PCERT_POLICY_QUALIFIER_NOTICE_REFERENCE;

typedef struct _CERT_POLICY_QUALIFIER_USER_NOTICE {
    CERT_POLICY_QUALIFIER_NOTICE_REFERENCE  *pNoticeReference;  
    LPWSTR                                  pszDisplayText;     
} CERT_POLICY_QUALIFIER_USER_NOTICE, *PCERT_POLICY_QUALIFIER_USER_NOTICE;







typedef struct _CPS_URLS {
    LPWSTR                      pszURL;
    CRYPT_ALGORITHM_IDENTIFIER  *pAlgorithm; 
    CRYPT_DATA_BLOB             *pDigest;    
} CPS_URLS, *PCPS_URLS;

typedef struct _CERT_POLICY95_QUALIFIER1 {
    LPWSTR      pszPracticesReference;      
    LPSTR       pszNoticeIdentifier;        
    LPSTR       pszNSINoticeIdentifier;     
    DWORD       cCPSURLs;
    CPS_URLS    *rgCPSURLs;                 
} CERT_POLICY95_QUALIFIER1, *PCERT_POLICY95_QUALIFIER1;















typedef struct _CERT_POLICY_MAPPING {
    LPSTR                       pszIssuerDomainPolicy;      
    LPSTR                       pszSubjectDomainPolicy;     
} CERT_POLICY_MAPPING, *PCERT_POLICY_MAPPING;

typedef struct _CERT_POLICY_MAPPINGS_INFO {
    DWORD                       cPolicyMapping;
    PCERT_POLICY_MAPPING        rgPolicyMapping;
} CERT_POLICY_MAPPINGS_INFO, *PCERT_POLICY_MAPPINGS_INFO;







typedef struct _CERT_POLICY_CONSTRAINTS_INFO {
    BOOL                        fRequireExplicitPolicy;
    DWORD                       dwRequireExplicitPolicySkipCerts;

    BOOL                        fInhibitPolicyMapping;
    DWORD                       dwInhibitPolicyMappingSkipCerts;
} CERT_POLICY_CONSTRAINTS_INFO, *PCERT_POLICY_CONSTRAINTS_INFO;






































































typedef struct _CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY {
    LPSTR               pszObjId;
    DWORD               cValue;
    PCRYPT_DER_BLOB     rgValue;
} CRYPT_CONTENT_INFO_SEQUENCE_OF_ANY, *PCRYPT_CONTENT_INFO_SEQUENCE_OF_ANY;









typedef struct _CRYPT_CONTENT_INFO {
    LPSTR               pszObjId;
    CRYPT_DER_BLOB      Content;
} CRYPT_CONTENT_INFO, *PCRYPT_CONTENT_INFO;






















































typedef struct _CRYPT_SEQUENCE_OF_ANY {
    DWORD               cValue;
    PCRYPT_DER_BLOB     rgValue;
} CRYPT_SEQUENCE_OF_ANY, *PCRYPT_SEQUENCE_OF_ANY;













typedef struct _CERT_AUTHORITY_KEY_ID2_INFO {
    CRYPT_DATA_BLOB     KeyId;
    CERT_ALT_NAME_INFO  AuthorityCertIssuer;    
                                                
    CRYPT_INTEGER_BLOB  AuthorityCertSerialNumber;
} CERT_AUTHORITY_KEY_ID2_INFO, *PCERT_AUTHORITY_KEY_ID2_INFO;






























typedef struct _CERT_ACCESS_DESCRIPTION {
    LPSTR               pszAccessMethod;        
    CERT_ALT_NAME_ENTRY AccessLocation;
} CERT_ACCESS_DESCRIPTION, *PCERT_ACCESS_DESCRIPTION;


typedef struct _CERT_AUTHORITY_INFO_ACCESS {
    DWORD                       cAccDescr;
    PCERT_ACCESS_DESCRIPTION    rgAccDescr;
} CERT_AUTHORITY_INFO_ACCESS, *PCERT_AUTHORITY_INFO_ACCESS,
  CERT_SUBJECT_INFO_ACCESS, *PCERT_SUBJECT_INFO_ACCESS;



















































typedef struct _CRL_DIST_POINT_NAME {
    DWORD   dwDistPointNameChoice;
    union {
        CERT_ALT_NAME_INFO      FullName;       
        
    } ;
} CRL_DIST_POINT_NAME, *PCRL_DIST_POINT_NAME;





typedef struct _CRL_DIST_POINT {
    CRL_DIST_POINT_NAME     DistPointName;      
    CRYPT_BIT_BLOB          ReasonFlags;        
    CERT_ALT_NAME_INFO      CRLIssuer;          
} CRL_DIST_POINT, *PCRL_DIST_POINT;









typedef struct _CRL_DIST_POINTS_INFO {
    DWORD                   cDistPoint;
    PCRL_DIST_POINT         rgDistPoint;
} CRL_DIST_POINTS_INFO, *PCRL_DIST_POINTS_INFO;



























typedef struct _CROSS_CERT_DIST_POINTS_INFO {
    
    DWORD                   dwSyncDeltaTime;

    DWORD                   cDistPoint;
    PCERT_ALT_NAME_INFO     rgDistPoint;
} CROSS_CERT_DIST_POINTS_INFO, *PCROSS_CERT_DIST_POINTS_INFO;





















typedef struct _CERT_PAIR {
   CERT_BLOB    Forward;        
   CERT_BLOB    Reverse;        
} CERT_PAIR, *PCERT_PAIR;





























typedef struct _CRL_ISSUING_DIST_POINT {
    CRL_DIST_POINT_NAME     DistPointName;              
    BOOL                    fOnlyContainsUserCerts;
    BOOL                    fOnlyContainsCACerts;
    CRYPT_BIT_BLOB          OnlySomeReasonFlags;        
    BOOL                    fIndirectCRL;
} CRL_ISSUING_DIST_POINT, *PCRL_ISSUING_DIST_POINT;
























typedef struct _CERT_GENERAL_SUBTREE {
    CERT_ALT_NAME_ENTRY     Base;
    DWORD                   dwMinimum;
    BOOL                    fMaximum;
    DWORD                   dwMaximum;
} CERT_GENERAL_SUBTREE, *PCERT_GENERAL_SUBTREE;

typedef struct _CERT_NAME_CONSTRAINTS_INFO {
    DWORD                   cPermittedSubtree;
    PCERT_GENERAL_SUBTREE   rgPermittedSubtree;
    DWORD                   cExcludedSubtree;
    PCERT_GENERAL_SUBTREE   rgExcludedSubtree;
} CERT_NAME_CONSTRAINTS_INFO, *PCERT_NAME_CONSTRAINTS_INFO;
























































































typedef struct _CERT_DSS_PARAMETERS {
    CRYPT_UINT_BLOB     p;
    CRYPT_UINT_BLOB     q;
    CRYPT_UINT_BLOB     g;
} CERT_DSS_PARAMETERS, *PCERT_DSS_PARAMETERS;


























typedef struct _CERT_DH_PARAMETERS {
    CRYPT_UINT_BLOB     p;
    CRYPT_UINT_BLOB     g;
} CERT_DH_PARAMETERS, *PCERT_DH_PARAMETERS;









typedef struct _CERT_ECC_SIGNATURE {
    CRYPT_UINT_BLOB     r;
    CRYPT_UINT_BLOB     s;
} CERT_ECC_SIGNATURE, *PCERT_ECC_SIGNATURE;








typedef struct _CERT_X942_DH_VALIDATION_PARAMS {
    CRYPT_BIT_BLOB      seed;
    DWORD               pgenCounter;
} CERT_X942_DH_VALIDATION_PARAMS, *PCERT_X942_DH_VALIDATION_PARAMS;

typedef struct _CERT_X942_DH_PARAMETERS {
    CRYPT_UINT_BLOB     p;          
    CRYPT_UINT_BLOB     g;          
    CRYPT_UINT_BLOB     q;          
    CRYPT_UINT_BLOB     j;          
    PCERT_X942_DH_VALIDATION_PARAMS pValidationParams;  
} CERT_X942_DH_PARAMETERS, *PCERT_X942_DH_PARAMETERS;











typedef struct _CRYPT_X942_OTHER_INFO {
    LPSTR               pszContentEncryptionObjId;
    BYTE                rgbCounter[4];
    BYTE                rgbKeyLength[4];
    CRYPT_DATA_BLOB     PubInfo;    
} CRYPT_X942_OTHER_INFO, *PCRYPT_X942_OTHER_INFO;










typedef struct _CRYPT_ECC_CMS_SHARED_INFO {
    CRYPT_ALGORITHM_IDENTIFIER  Algorithm;
    CRYPT_DATA_BLOB             EntityUInfo;    
    BYTE                        rgbSuppPubInfo[4];
} CRYPT_ECC_CMS_SHARED_INFO, *PCRYPT_ECC_CMS_SHARED_INFO;








typedef struct _CRYPT_RC2_CBC_PARAMETERS {
    DWORD               dwVersion;
    BOOL                fIV;            
    BYTE                rgbIV[8];
} CRYPT_RC2_CBC_PARAMETERS, *PCRYPT_RC2_CBC_PARAMETERS;



















typedef struct _CRYPT_SMIME_CAPABILITY {
    LPSTR               pszObjId;
    CRYPT_OBJID_BLOB    Parameters;
} CRYPT_SMIME_CAPABILITY, *PCRYPT_SMIME_CAPABILITY;

typedef struct _CRYPT_SMIME_CAPABILITIES {
    DWORD                   cCapability;
    PCRYPT_SMIME_CAPABILITY rgCapability;
} CRYPT_SMIME_CAPABILITIES, *PCRYPT_SMIME_CAPABILITIES;
















typedef struct _CERT_QC_STATEMENT {
    LPSTR               pszStatementId;     
    CRYPT_OBJID_BLOB    StatementInfo;      
} CERT_QC_STATEMENT, *PCERT_QC_STATEMENT;

typedef struct _CERT_QC_STATEMENTS_EXT_INFO {
    DWORD                   cStatement;
    PCERT_QC_STATEMENT      rgStatement;
} CERT_QC_STATEMENTS_EXT_INFO, *PCERT_QC_STATEMENTS_EXT_INFO;











































typedef struct _CRYPT_MASK_GEN_ALGORITHM {
    LPSTR                       pszObjId;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
} CRYPT_MASK_GEN_ALGORITHM, *PCRYPT_MASK_GEN_ALGORITHM;

typedef struct _CRYPT_RSA_SSA_PSS_PARAMETERS {
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM    MaskGenAlgorithm;
    DWORD                       dwSaltLength;
    DWORD                       dwTrailerField;
} CRYPT_RSA_SSA_PSS_PARAMETERS, *PCRYPT_RSA_SSA_PSS_PARAMETERS;
























typedef struct _CRYPT_PSOURCE_ALGORITHM {
    LPSTR                       pszObjId;
    CRYPT_DATA_BLOB             EncodingParameters;
} CRYPT_PSOURCE_ALGORITHM, *PCRYPT_PSOURCE_ALGORITHM;

typedef struct _CRYPT_RSAES_OAEP_PARAMETERS {
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    CRYPT_MASK_GEN_ALGORITHM    MaskGenAlgorithm;
    CRYPT_PSOURCE_ALGORITHM     PSourceAlgorithm;
} CRYPT_RSAES_OAEP_PARAMETERS, *PCRYPT_RSAES_OAEP_PARAMETERS;













































































































































































































































































typedef struct _CMC_TAGGED_ATTRIBUTE {
    DWORD               dwBodyPartID;
    CRYPT_ATTRIBUTE     Attribute;
} CMC_TAGGED_ATTRIBUTE, *PCMC_TAGGED_ATTRIBUTE;

typedef struct _CMC_TAGGED_CERT_REQUEST {
    DWORD               dwBodyPartID;
    CRYPT_DER_BLOB      SignedCertRequest;
} CMC_TAGGED_CERT_REQUEST, *PCMC_TAGGED_CERT_REQUEST;

typedef struct _CMC_TAGGED_REQUEST {
    DWORD               dwTaggedRequestChoice;
    union {
        
        PCMC_TAGGED_CERT_REQUEST   pTaggedCertRequest;
    } ;
} CMC_TAGGED_REQUEST, *PCMC_TAGGED_REQUEST;



typedef struct _CMC_TAGGED_CONTENT_INFO {
    DWORD               dwBodyPartID;
    CRYPT_DER_BLOB      EncodedContentInfo;
} CMC_TAGGED_CONTENT_INFO, *PCMC_TAGGED_CONTENT_INFO;

typedef struct _CMC_TAGGED_OTHER_MSG {
    DWORD               dwBodyPartID;
    LPSTR               pszObjId;
    CRYPT_OBJID_BLOB    Value;
} CMC_TAGGED_OTHER_MSG, *PCMC_TAGGED_OTHER_MSG;



typedef struct _CMC_DATA_INFO {
    DWORD                       cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE       rgTaggedAttribute;
    DWORD                       cTaggedRequest;
    PCMC_TAGGED_REQUEST         rgTaggedRequest;
    DWORD                       cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO    rgTaggedContentInfo;
    DWORD                       cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG       rgTaggedOtherMsg;
} CMC_DATA_INFO, *PCMC_DATA_INFO;



typedef struct _CMC_RESPONSE_INFO {
    DWORD                       cTaggedAttribute;
    PCMC_TAGGED_ATTRIBUTE       rgTaggedAttribute;
    DWORD                       cTaggedContentInfo;
    PCMC_TAGGED_CONTENT_INFO    rgTaggedContentInfo;
    DWORD                       cTaggedOtherMsg;
    PCMC_TAGGED_OTHER_MSG       rgTaggedOtherMsg;
} CMC_RESPONSE_INFO, *PCMC_RESPONSE_INFO;









typedef struct _CMC_PEND_INFO {
    CRYPT_DATA_BLOB             PendToken;
    FILETIME                    PendTime;
} CMC_PEND_INFO, *PCMC_PEND_INFO;

typedef struct _CMC_STATUS_INFO {
    DWORD                       dwStatus;
    DWORD                       cBodyList;
    DWORD                       *rgdwBodyList;
    LPWSTR                      pwszStatusString;   
    DWORD                       dwOtherInfoChoice;
    union  {
        
        
        
        DWORD                       dwFailInfo;
        
        PCMC_PEND_INFO              pPendInfo;
    } ;
} CMC_STATUS_INFO, *PCMC_STATUS_INFO;













































































typedef struct _CMC_ADD_EXTENSIONS_INFO {
    DWORD                       dwCmcDataReference;
    DWORD                       cCertReference;
    DWORD                       *rgdwCertReference;
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;
} CMC_ADD_EXTENSIONS_INFO, *PCMC_ADD_EXTENSIONS_INFO;










typedef struct _CMC_ADD_ATTRIBUTES_INFO {
    DWORD                       dwCmcDataReference;
    DWORD                       cCertReference;
    DWORD                       *rgdwCertReference;
    DWORD                       cAttribute;
    PCRYPT_ATTRIBUTE            rgAttribute;
} CMC_ADD_ATTRIBUTES_INFO, *PCMC_ADD_ATTRIBUTES_INFO;









typedef struct _CERT_TEMPLATE_EXT {
    LPSTR               pszObjId;
    DWORD               dwMajorVersion;
    BOOL                fMinorVersion;      
    DWORD               dwMinorVersion;
} CERT_TEMPLATE_EXT, *PCERT_TEMPLATE_EXT;










typedef struct _CERT_HASHED_URL {
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    CRYPT_HASH_BLOB             Hash;
    LPWSTR                      pwszUrl;    
                                            
} CERT_HASHED_URL, *PCERT_HASHED_URL;

typedef struct _CERT_LOGOTYPE_DETAILS {
    LPWSTR                      pwszMimeType;   
    DWORD                       cHashedUrl;
    PCERT_HASHED_URL            rgHashedUrl;
} CERT_LOGOTYPE_DETAILS, *PCERT_LOGOTYPE_DETAILS;

typedef struct _CERT_LOGOTYPE_REFERENCE {
    DWORD                       cHashedUrl;
    PCERT_HASHED_URL            rgHashedUrl;
} CERT_LOGOTYPE_REFERENCE, *PCERT_LOGOTYPE_REFERENCE;

typedef struct _CERT_LOGOTYPE_IMAGE_INFO {
    
    
    DWORD                       dwLogotypeImageInfoChoice;

    DWORD                       dwFileSize;     
    DWORD                       dwXSize;        
    DWORD                       dwYSize;        

    DWORD                       dwLogotypeImageResolutionChoice;
    union {
        
        

        
        DWORD                       dwNumBits;      

        
        DWORD                       dwTableSize;    
    } ;
    LPWSTR                      pwszLanguage;   
                                                
} CERT_LOGOTYPE_IMAGE_INFO, *PCERT_LOGOTYPE_IMAGE_INFO;








typedef struct _CERT_LOGOTYPE_IMAGE {
    CERT_LOGOTYPE_DETAILS       LogotypeDetails;

    PCERT_LOGOTYPE_IMAGE_INFO   pLogotypeImageInfo; 
} CERT_LOGOTYPE_IMAGE, *PCERT_LOGOTYPE_IMAGE;


typedef struct _CERT_LOGOTYPE_AUDIO_INFO {
    DWORD                       dwFileSize;     
    DWORD                       dwPlayTime;     
    DWORD                       dwChannels;     
    DWORD                       dwSampleRate;   
                                                
    LPWSTR                      pwszLanguage;   
                                                
} CERT_LOGOTYPE_AUDIO_INFO, *PCERT_LOGOTYPE_AUDIO_INFO;

typedef struct _CERT_LOGOTYPE_AUDIO {
    CERT_LOGOTYPE_DETAILS       LogotypeDetails;

    PCERT_LOGOTYPE_AUDIO_INFO   pLogotypeAudioInfo; 
} CERT_LOGOTYPE_AUDIO, *PCERT_LOGOTYPE_AUDIO;


typedef struct _CERT_LOGOTYPE_DATA {
    DWORD                       cLogotypeImage;
    PCERT_LOGOTYPE_IMAGE        rgLogotypeImage;

    DWORD                       cLogotypeAudio;
    PCERT_LOGOTYPE_AUDIO        rgLogotypeAudio;
} CERT_LOGOTYPE_DATA, *PCERT_LOGOTYPE_DATA;


typedef struct _CERT_LOGOTYPE_INFO {
    DWORD                       dwLogotypeInfoChoice;
    union {
        
        PCERT_LOGOTYPE_DATA         pLogotypeDirectInfo;

        
        PCERT_LOGOTYPE_REFERENCE    pLogotypeIndirectInfo;
    } ;
} CERT_LOGOTYPE_INFO, *PCERT_LOGOTYPE_INFO;




typedef struct _CERT_OTHER_LOGOTYPE_INFO {
    LPSTR                       pszObjId;
    CERT_LOGOTYPE_INFO          LogotypeInfo;
} CERT_OTHER_LOGOTYPE_INFO, *PCERT_OTHER_LOGOTYPE_INFO;




typedef struct _CERT_LOGOTYPE_EXT_INFO {
    DWORD                       cCommunityLogo;
    PCERT_LOGOTYPE_INFO         rgCommunityLogo;
    PCERT_LOGOTYPE_INFO         pIssuerLogo;        
    PCERT_LOGOTYPE_INFO         pSubjectLogo;       
    DWORD                       cOtherLogo;
    PCERT_OTHER_LOGOTYPE_INFO   rgOtherLogo;
} CERT_LOGOTYPE_EXT_INFO, *PCERT_LOGOTYPE_EXT_INFO;











typedef struct _CERT_BIOMETRIC_DATA {
    DWORD                       dwTypeOfBiometricDataChoice;
    union {
        
        DWORD                       dwPredefined;

        
        LPSTR                       pszObjId;
    } ;

    CERT_HASHED_URL             HashedUrl;      
} CERT_BIOMETRIC_DATA, *PCERT_BIOMETRIC_DATA;








typedef struct _CERT_BIOMETRIC_EXT_INFO {
    DWORD                       cBiometricData;
    PCERT_BIOMETRIC_DATA        rgBiometricData;
} CERT_BIOMETRIC_EXT_INFO, *PCERT_BIOMETRIC_EXT_INFO;
















typedef struct _OCSP_SIGNATURE_INFO {
    CRYPT_ALGORITHM_IDENTIFIER  SignatureAlgorithm;
    CRYPT_BIT_BLOB              Signature;
    DWORD                       cCertEncoded;
    PCERT_BLOB                  rgCertEncoded;
} OCSP_SIGNATURE_INFO, *POCSP_SIGNATURE_INFO;

typedef struct _OCSP_SIGNED_REQUEST_INFO {
    CRYPT_DER_BLOB              ToBeSigned;             
    POCSP_SIGNATURE_INFO        pOptionalSignatureInfo; 
} OCSP_SIGNED_REQUEST_INFO, *POCSP_SIGNED_REQUEST_INFO;







typedef struct _OCSP_CERT_ID {
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;  
    CRYPT_HASH_BLOB             IssuerNameHash; 
    CRYPT_HASH_BLOB             IssuerKeyHash;  
    CRYPT_INTEGER_BLOB          SerialNumber;
} OCSP_CERT_ID, *POCSP_CERT_ID;

typedef struct _OCSP_REQUEST_ENTRY {
    OCSP_CERT_ID                CertId;
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;
} OCSP_REQUEST_ENTRY, *POCSP_REQUEST_ENTRY;

typedef struct _OCSP_REQUEST_INFO {
    DWORD                       dwVersion;
    PCERT_ALT_NAME_ENTRY        pRequestorName;     
    DWORD                       cRequestEntry;
    POCSP_REQUEST_ENTRY         rgRequestEntry;
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;
} OCSP_REQUEST_INFO, *POCSP_REQUEST_INFO;








typedef struct _OCSP_RESPONSE_INFO {
    DWORD                       dwStatus;
    LPSTR                       pszObjId;   
    CRYPT_OBJID_BLOB            Value;      
} OCSP_RESPONSE_INFO, *POCSP_RESPONSE_INFO;


















typedef struct _OCSP_BASIC_SIGNED_RESPONSE_INFO {
    CRYPT_DER_BLOB              ToBeSigned;     
    OCSP_SIGNATURE_INFO         SignatureInfo;
} OCSP_BASIC_SIGNED_RESPONSE_INFO, *POCSP_BASIC_SIGNED_RESPONSE_INFO;







typedef struct _OCSP_BASIC_REVOKED_INFO {
    FILETIME                    RevocationDate;

    
    DWORD                       dwCrlReasonCode;
} OCSP_BASIC_REVOKED_INFO, *POCSP_BASIC_REVOKED_INFO;

typedef struct _OCSP_BASIC_RESPONSE_ENTRY {
    OCSP_CERT_ID                CertId;
    DWORD                       dwCertStatus;
    union {
        
        
        

        
        POCSP_BASIC_REVOKED_INFO    pRevokedInfo;

    } ;
    FILETIME                    ThisUpdate;
    FILETIME                    NextUpdate; 
                                            
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;
} OCSP_BASIC_RESPONSE_ENTRY, *POCSP_BASIC_RESPONSE_ENTRY;






typedef struct _OCSP_BASIC_RESPONSE_INFO {
    DWORD                       dwVersion;
    DWORD                       dwResponderIdChoice;
    union {
        
        CERT_NAME_BLOB              ByNameResponderId;
        
        CRYPT_HASH_BLOB              ByKeyResponderId;
    } ;
    FILETIME                    ProducedAt;
    DWORD                       cResponseEntry;
    POCSP_BASIC_RESPONSE_ENTRY  rgResponseEntry;
    DWORD                       cExtension;
    PCERT_EXTENSION             rgExtension;
} OCSP_BASIC_RESPONSE_INFO, *POCSP_BASIC_RESPONSE_INFO;











typedef void *HCRYPTOIDFUNCSET;
typedef void *HCRYPTOIDFUNCADDR;











































































typedef struct _CRYPT_OID_FUNC_ENTRY {
    LPCSTR  pszOID;
    void    *pvFuncAddr;
} CRYPT_OID_FUNC_ENTRY, *PCRYPT_OID_FUNC_ENTRY;




















__declspec(dllimport)
BOOL
__stdcall
CryptInstallOIDFunctionAddress(
      HMODULE hModule,         
      DWORD dwEncodingType,
      LPCSTR pszFuncName,
      DWORD cFuncEntry,
      const CRYPT_OID_FUNC_ENTRY rgFuncEntry[],
      DWORD dwFlags
    );







__declspec(dllimport)
HCRYPTOIDFUNCSET
__stdcall
CryptInitOIDFunctionSet(
      LPCSTR pszFuncName,
      DWORD dwFlags
    );



















__declspec(dllimport)
 
BOOL
__stdcall
CryptGetOIDFunctionAddress(
      HCRYPTOIDFUNCSET hFuncSet,
      DWORD dwEncodingType,
      LPCSTR pszOID,
      DWORD dwFlags,
     void **ppvFuncAddr,
      HCRYPTOIDFUNCADDR *phFuncAddr
    );












__declspec(dllimport)
 
BOOL
__stdcall
CryptGetDefaultOIDDllList(
      HCRYPTOIDFUNCSET hFuncSet,
      DWORD dwEncodingType,
         WCHAR *pwszDllList,
      DWORD *pcchDllList
    );
























__declspec(dllimport)
 
BOOL
__stdcall
CryptGetDefaultOIDFunctionAddress(
      HCRYPTOIDFUNCSET hFuncSet,
      DWORD dwEncodingType,
      LPCWSTR pwszDll,
      DWORD dwFlags,
     void **ppvFuncAddr,
      HCRYPTOIDFUNCADDR *phFuncAddr
    );













__declspec(dllimport)
BOOL
__stdcall
CryptFreeOIDFunctionAddress(
      HCRYPTOIDFUNCADDR hFuncAddr,
      DWORD dwFlags
    );















__declspec(dllimport)
BOOL
__stdcall
CryptRegisterOIDFunction(
      DWORD dwEncodingType,
      LPCSTR pszFuncName,
      LPCSTR pszOID,
      LPCWSTR pwszDll,
      LPCSTR pszOverrideFuncName
    );





__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterOIDFunction(
      DWORD dwEncodingType,
      LPCSTR pszFuncName,
      LPCSTR pszOID
    );
















__declspec(dllimport)
BOOL
__stdcall
CryptRegisterDefaultOIDFunction(
      DWORD dwEncodingType,
      LPCSTR pszFuncName,
      DWORD dwIndex,
      LPCWSTR pwszDll
    );








__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterDefaultOIDFunction(
      DWORD dwEncodingType,
      LPCSTR pszFuncName,
      LPCWSTR pwszDll
    );









__declspec(dllimport)
BOOL
__stdcall
CryptSetOIDFunctionValue(
      DWORD dwEncodingType,
      LPCSTR pszFuncName,
      LPCSTR pszOID,
      LPCWSTR pwszValueName,
      DWORD dwValueType,
      const BYTE *pbValueData,
      DWORD cbValueData
    );









__declspec(dllimport)
BOOL
__stdcall
CryptGetOIDFunctionValue(
      DWORD dwEncodingType,
      LPCSTR pszFuncName,
      LPCSTR pszOID,
      LPCWSTR pwszValueName,
      DWORD *pdwValueType,
      BYTE *pbValueData,
      DWORD *pcbValueData
    );

typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_FUNC)(
      DWORD dwEncodingType,
      LPCSTR pszFuncName,
      LPCSTR pszOID,
      DWORD cValue,
      const DWORD rgdwValueType[],
      LPCWSTR const rgpwszValueName[],
      const BYTE * const rgpbValueData[],
      const DWORD rgcbValueData[],
      void *pvArg
    );














__declspec(dllimport)
BOOL
__stdcall
CryptEnumOIDFunction(
      DWORD dwEncodingType,
      LPCSTR pszFuncName,
      LPCSTR pszOID,
      DWORD dwFlags,
      void *pvArg,
     PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc
    );




































typedef struct _CRYPT_OID_INFO {
    DWORD           cbSize;
    LPCSTR          pszOID;
    LPCWSTR         pwszName;
    DWORD           dwGroupId;
    union {
        DWORD       dwValue;
        ALG_ID      Algid;
        DWORD       dwLength;
    } ;
    CRYPT_DATA_BLOB ExtraInfo;



























} CRYPT_OID_INFO, *PCRYPT_OID_INFO;
typedef const CRYPT_OID_INFO CCRYPT_OID_INFO, *PCCRYPT_OID_INFO;




























































































__declspec(dllimport)
PCCRYPT_OID_INFO
__stdcall
CryptFindOIDInfo(
      DWORD dwKeyType,
      void *pvKey,
      DWORD dwGroupId
    );






























































__declspec(dllimport)
BOOL
__stdcall
CryptRegisterOIDInfo(
      PCCRYPT_OID_INFO pInfo,
      DWORD dwFlags
    );







__declspec(dllimport)
BOOL
__stdcall
CryptUnregisterOIDInfo(
      PCCRYPT_OID_INFO pInfo
    );


typedef BOOL (__stdcall *PFN_CRYPT_ENUM_OID_INFO)(
      PCCRYPT_OID_INFO pInfo,
      void *pvArg
    );











__declspec(dllimport)
BOOL
__stdcall
CryptEnumOIDInfo(
      DWORD dwGroupId,
      DWORD dwFlags,
      void *pvArg,
     PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo
    );
























__declspec(dllimport)
LPCWSTR
__stdcall
CryptFindLocalizedName(
      LPCWSTR pwszCryptName
    );








typedef struct _CERT_STRONG_SIGN_SERIALIZED_INFO {
    DWORD                   dwFlags;
    LPWSTR                  pwszCNGSignHashAlgids;
    LPWSTR                  pwszCNGPubKeyMinBitLengths; 
} CERT_STRONG_SIGN_SERIALIZED_INFO, *PCERT_STRONG_SIGN_SERIALIZED_INFO;























typedef struct _CERT_STRONG_SIGN_PARA {
    DWORD                   cbSize;

    DWORD                   dwInfoChoice;
    union  {
        void                                *pvInfo;

        
        PCERT_STRONG_SIGN_SERIALIZED_INFO   pSerializedInfo;

        
        LPSTR                               pszOID;
        
    } ;
} CERT_STRONG_SIGN_PARA, *PCERT_STRONG_SIGN_PARA;

typedef const CERT_STRONG_SIGN_PARA *PCCERT_STRONG_SIGN_PARA;








































































typedef void *HCRYPTMSG;




































typedef struct _CERT_ISSUER_SERIAL_NUMBER {
    CERT_NAME_BLOB      Issuer;
    CRYPT_INTEGER_BLOB  SerialNumber;
} CERT_ISSUER_SERIAL_NUMBER, *PCERT_ISSUER_SERIAL_NUMBER;




typedef struct _CERT_ID {
    DWORD   dwIdChoice;
    union {
        
        CERT_ISSUER_SERIAL_NUMBER   IssuerSerialNumber;
        
        CRYPT_HASH_BLOB             KeyId;
        
        CRYPT_HASH_BLOB             HashId;
    } ;
} CERT_ID, *PCERT_ID;






















































typedef struct _CMSG_SIGNER_ENCODE_INFO {
    DWORD                       cbSize;
    PCERT_INFO                  pCertInfo;

    
    union {
        HCRYPTPROV                  hCryptProv;
        NCRYPT_KEY_HANDLE           hNCryptKey;
    } ;

    
    DWORD                       dwKeySpec;

    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    void                        *pvHashAuxInfo;
    DWORD                       cAuthAttr;
    PCRYPT_ATTRIBUTE            rgAuthAttr;
    DWORD                       cUnauthAttr;
    PCRYPT_ATTRIBUTE            rgUnauthAttr;








} CMSG_SIGNER_ENCODE_INFO, *PCMSG_SIGNER_ENCODE_INFO;

typedef struct _CMSG_SIGNED_ENCODE_INFO {
    DWORD                       cbSize;
    DWORD                       cSigners;
    PCMSG_SIGNER_ENCODE_INFO    rgSigners;
    DWORD                       cCertEncoded;
    PCERT_BLOB                  rgCertEncoded;
    DWORD                       cCrlEncoded;
    PCRL_BLOB                   rgCrlEncoded;





} CMSG_SIGNED_ENCODE_INFO, *PCMSG_SIGNED_ENCODE_INFO;












































typedef struct _CMSG_RECIPIENT_ENCODE_INFO CMSG_RECIPIENT_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCODE_INFO;

typedef struct _CMSG_ENVELOPED_ENCODE_INFO {
    DWORD                       cbSize;
    HCRYPTPROV_LEGACY           hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
    void                        *pvEncryptionAuxInfo;
    DWORD                       cRecipients;

    
    
    
    PCERT_INFO                  *rgpRecipients;














} CMSG_ENVELOPED_ENCODE_INFO, *PCMSG_ENVELOPED_ENCODE_INFO;
























typedef struct _CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO {
    DWORD                       cbSize;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    void                        *pvKeyEncryptionAuxInfo;
    HCRYPTPROV_LEGACY           hCryptProv;
    CRYPT_BIT_BLOB              RecipientPublicKey;
    CERT_ID                     RecipientId;
} CMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO;









































typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO {
    DWORD                       cbSize;
    CRYPT_BIT_BLOB              RecipientPublicKey;
    CERT_ID                     RecipientId;

    
    
    FILETIME                    Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO,
    *PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO;

typedef struct _CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO {
    DWORD                       cbSize;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    void                        *pvKeyEncryptionAuxInfo;
    CRYPT_ALGORITHM_IDENTIFIER  KeyWrapAlgorithm;
    void                        *pvKeyWrapAuxInfo;

    
    
    
    
    

    HCRYPTPROV_LEGACY           hCryptProv;
    DWORD                       dwKeySpec;

    DWORD                       dwKeyChoice;
    union {
        
        
        
        PCRYPT_ALGORITHM_IDENTIFIER pEphemeralAlgorithm;

        
        
        
        PCERT_ID                    pSenderId;
    } ;
    CRYPT_DATA_BLOB             UserKeyingMaterial;     

    DWORD                                       cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_ENCODE_INFO   *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO, *PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO;























typedef struct _CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO {
    DWORD                       cbSize;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    void                        *pvKeyEncryptionAuxInfo;
    HCRYPTPROV                  hCryptProv;
    DWORD                       dwKeyChoice;
    union {
        
        HCRYPTKEY                   hKeyEncryptionKey;
        
        void                        *pvKeyEncryptionKey;
    } ;
    CRYPT_DATA_BLOB             KeyId;

    
    FILETIME                    Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO, *PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO;








struct _CMSG_RECIPIENT_ENCODE_INFO {
    DWORD   dwRecipientChoice;
    union {
        
        PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO   pKeyTrans;
        
        PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO   pKeyAgree;
        
        PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO   pMailList;
    } ;
};





















typedef struct _CMSG_RC2_AUX_INFO {
    DWORD                       cbSize;
    DWORD                       dwBitLen;
} CMSG_RC2_AUX_INFO, *PCMSG_RC2_AUX_INFO;














typedef struct _CMSG_SP3_COMPATIBLE_AUX_INFO {
    DWORD                       cbSize;
    DWORD                       dwFlags;
} CMSG_SP3_COMPATIBLE_AUX_INFO, *PCMSG_SP3_COMPATIBLE_AUX_INFO;


















typedef struct _CMSG_RC4_AUX_INFO {
    DWORD                       cbSize;
    DWORD                       dwBitLen;
} CMSG_RC4_AUX_INFO, *PCMSG_RC4_AUX_INFO;










typedef struct _CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO {
    DWORD                       cbSize;
    CMSG_SIGNED_ENCODE_INFO     SignedInfo;
    CMSG_ENVELOPED_ENCODE_INFO  EnvelopedInfo;
} CMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO, *PCMSG_SIGNED_AND_ENVELOPED_ENCODE_INFO;

















typedef struct _CMSG_HASHED_ENCODE_INFO {
    DWORD                       cbSize;
    HCRYPTPROV_LEGACY           hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    void                        *pvHashAuxInfo;
} CMSG_HASHED_ENCODE_INFO, *PCMSG_HASHED_ENCODE_INFO;











typedef struct _CMSG_ENCRYPTED_ENCODE_INFO {
    DWORD                       cbSize;
    CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
    void                        *pvEncryptionAuxInfo;
} CMSG_ENCRYPTED_ENCODE_INFO, *PCMSG_ENCRYPTED_ENCODE_INFO;
















typedef BOOL (__stdcall *PFN_CMSG_STREAM_OUTPUT)(
      const void *pvArg,
      BYTE *pbData,
      DWORD cbData,
      BOOL fFinal
    );



typedef struct _CMSG_STREAM_INFO {
    DWORD                   cbContent;
    PFN_CMSG_STREAM_OUTPUT  pfnStreamOutput;
    void                    *pvArg;
} CMSG_STREAM_INFO, *PCMSG_STREAM_INFO;


































__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgOpenToEncode(
      DWORD dwMsgEncodingType,
      DWORD dwFlags,
      DWORD dwMsgType,
      void const *pvMsgEncodeInfo,
      LPSTR pszInnerContentObjID,
      PCMSG_STREAM_INFO pStreamInfo
    );









__declspec(dllimport)
DWORD
__stdcall
CryptMsgCalculateEncodedLength(
      DWORD dwMsgEncodingType,
      DWORD dwFlags,
      DWORD dwMsgType,
      void const *pvMsgEncodeInfo,
      LPSTR pszInnerContentObjID,
      DWORD cbData
    );













__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgOpenToDecode(
      DWORD dwMsgEncodingType,
      DWORD dwFlags,
      DWORD dwMsgType,
      HCRYPTPROV_LEGACY hCryptProv,
      PCERT_INFO pRecipientInfo,
      PCMSG_STREAM_INFO pStreamInfo
    );




__declspec(dllimport)
HCRYPTMSG
__stdcall
CryptMsgDuplicate(
      HCRYPTMSG hCryptMsg
    );






__declspec(dllimport)
BOOL
__stdcall
CryptMsgClose(
      HCRYPTMSG hCryptMsg
    );










__declspec(dllimport)
BOOL
__stdcall
CryptMsgUpdate(
      HCRYPTMSG hCryptMsg,
      const BYTE *pbData,
      DWORD cbData,
      BOOL fFinal
    );

























__declspec(dllimport)
BOOL
__stdcall
CryptMsgGetParam(
      HCRYPTMSG hCryptMsg,
      DWORD dwParamType,
      DWORD dwIndex,
      void *pvData,
      DWORD *pcbData
    );





























































































































typedef struct _CMSG_SIGNER_INFO {
    DWORD                       dwVersion;
    CERT_NAME_BLOB              Issuer;
    CRYPT_INTEGER_BLOB          SerialNumber;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;

    
    CRYPT_ALGORITHM_IDENTIFIER  HashEncryptionAlgorithm;

    CRYPT_DATA_BLOB             EncryptedHash;
    CRYPT_ATTRIBUTES            AuthAttrs;
    CRYPT_ATTRIBUTES            UnauthAttrs;
} CMSG_SIGNER_INFO, *PCMSG_SIGNER_INFO;






















typedef struct _CMSG_CMS_SIGNER_INFO {
    DWORD                       dwVersion;
    CERT_ID                     SignerId;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;

    
    CRYPT_ALGORITHM_IDENTIFIER  HashEncryptionAlgorithm;

    CRYPT_DATA_BLOB             EncryptedHash;
    CRYPT_ATTRIBUTES            AuthAttrs;
    CRYPT_ATTRIBUTES            UnauthAttrs;
} CMSG_CMS_SIGNER_INFO, *PCMSG_CMS_SIGNER_INFO;





















typedef CRYPT_ATTRIBUTES CMSG_ATTR;
typedef CRYPT_ATTRIBUTES *PCMSG_ATTR;















































































































































































































































typedef struct _CMSG_KEY_TRANS_RECIPIENT_INFO {
    DWORD                       dwVersion;

    
    CERT_ID                     RecipientId;

    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB             EncryptedKey;
} CMSG_KEY_TRANS_RECIPIENT_INFO, *PCMSG_KEY_TRANS_RECIPIENT_INFO;

typedef struct _CMSG_RECIPIENT_ENCRYPTED_KEY_INFO {
    
    CERT_ID                     RecipientId;

    CRYPT_DATA_BLOB             EncryptedKey;

    
    FILETIME                    Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_RECIPIENT_ENCRYPTED_KEY_INFO, *PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO;

typedef struct _CMSG_KEY_AGREE_RECIPIENT_INFO {
    DWORD                       dwVersion;
    DWORD                       dwOriginatorChoice;
    union {
        
        CERT_ID                     OriginatorCertId;
        
        CERT_PUBLIC_KEY_INFO        OriginatorPublicKeyInfo;
    } ;
    CRYPT_DATA_BLOB             UserKeyingMaterial;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;

    DWORD                                cRecipientEncryptedKeys;
    PCMSG_RECIPIENT_ENCRYPTED_KEY_INFO   *rgpRecipientEncryptedKeys;
} CMSG_KEY_AGREE_RECIPIENT_INFO, *PCMSG_KEY_AGREE_RECIPIENT_INFO;





typedef struct _CMSG_MAIL_LIST_RECIPIENT_INFO {
    DWORD                       dwVersion;
    CRYPT_DATA_BLOB             KeyId;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB             EncryptedKey;

    
    FILETIME                    Date;
    PCRYPT_ATTRIBUTE_TYPE_VALUE pOtherAttr;
} CMSG_MAIL_LIST_RECIPIENT_INFO, *PCMSG_MAIL_LIST_RECIPIENT_INFO;

typedef struct _CMSG_CMS_RECIPIENT_INFO {
    DWORD   dwRecipientChoice;
    union {
        
        PCMSG_KEY_TRANS_RECIPIENT_INFO   pKeyTrans;
        
        PCMSG_KEY_AGREE_RECIPIENT_INFO   pKeyAgree;
        
        PCMSG_MAIL_LIST_RECIPIENT_INFO   pMailList;
    } ;
} CMSG_CMS_RECIPIENT_INFO, *PCMSG_CMS_RECIPIENT_INFO;
































__declspec(dllimport)
BOOL
__stdcall
CryptMsgControl(
      HCRYPTMSG hCryptMsg,
      DWORD dwFlags,
      DWORD dwCtrlType,
      void const *pvCtrlPara
    );






































































typedef struct _CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA {
    DWORD               cbSize;
    HCRYPTPROV_LEGACY   hCryptProv;
    DWORD               dwSignerIndex;
    DWORD               dwSignerType;
    void                *pvSigner;
} CMSG_CTRL_VERIFY_SIGNATURE_EX_PARA, *PCMSG_CTRL_VERIFY_SIGNATURE_EX_PARA;



    

    

    

    




































typedef struct _CMSG_CTRL_DECRYPT_PARA {
    DWORD       cbSize;

    
    union {
        HCRYPTPROV                  hCryptProv;
        NCRYPT_KEY_HANDLE           hNCryptKey;
    } ;

    
    DWORD       dwKeySpec;

    DWORD       dwRecipientIndex;
} CMSG_CTRL_DECRYPT_PARA, *PCMSG_CTRL_DECRYPT_PARA;


























typedef struct _CMSG_CTRL_KEY_TRANS_DECRYPT_PARA {
    DWORD                           cbSize;
    
    union {
        HCRYPTPROV                  hCryptProv;
        NCRYPT_KEY_HANDLE           hNCryptKey;
    } ;

    
    DWORD                           dwKeySpec;

    PCMSG_KEY_TRANS_RECIPIENT_INFO  pKeyTrans;
    DWORD                           dwRecipientIndex;
} CMSG_CTRL_KEY_TRANS_DECRYPT_PARA, *PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA;






























typedef struct _CMSG_CTRL_KEY_AGREE_DECRYPT_PARA {
    DWORD                           cbSize;

    
    union {
        HCRYPTPROV                  hCryptProv;
        NCRYPT_KEY_HANDLE           hNCryptKey;
    } ;

    
    DWORD                           dwKeySpec;

    PCMSG_KEY_AGREE_RECIPIENT_INFO  pKeyAgree;
    DWORD                           dwRecipientIndex;
    DWORD                           dwRecipientEncryptedKeyIndex;
    CRYPT_BIT_BLOB                  OriginatorPublicKey;
} CMSG_CTRL_KEY_AGREE_DECRYPT_PARA, *PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA;



























typedef struct _CMSG_CTRL_MAIL_LIST_DECRYPT_PARA {
    DWORD                           cbSize;
    HCRYPTPROV                      hCryptProv;
    PCMSG_MAIL_LIST_RECIPIENT_INFO  pMailList;
    DWORD                           dwRecipientIndex;
    DWORD                           dwKeyChoice;
    union {
        
        HCRYPTKEY                       hKeyEncryptionKey;
        
        void                            *pvKeyEncryptionKey;
    } ;
} CMSG_CTRL_MAIL_LIST_DECRYPT_PARA, *PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA;

















































typedef struct _CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA {
    DWORD               cbSize;
    DWORD               dwSignerIndex;
    CRYPT_DATA_BLOB     blob;
} CMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_ADD_SIGNER_UNAUTH_ATTR_PARA;











typedef struct _CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA {
    DWORD               cbSize;
    DWORD               dwSignerIndex;
    DWORD               dwUnauthAttrIndex;
} CMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA, *PCMSG_CTRL_DEL_SIGNER_UNAUTH_ATTR_PARA;


































































BOOL
__stdcall
CryptMsgVerifyCountersignatureEncoded(
      HCRYPTPROV_LEGACY hCryptProv,
      DWORD dwEncodingType,
      PBYTE pbSignerInfo,
      DWORD cbSignerInfo,
      PBYTE pbSignerInfoCountersignature,
      DWORD cbSignerInfoCountersignature,
      PCERT_INFO pciCountersigner
    );












BOOL
__stdcall
CryptMsgVerifyCountersignatureEncodedEx(
      HCRYPTPROV_LEGACY hCryptProv,
      DWORD dwEncodingType,
      PBYTE pbSignerInfo,
      DWORD cbSignerInfo,
      PBYTE pbSignerInfoCountersignature,
      DWORD cbSignerInfoCountersignature,
      DWORD dwSignerType,
      void *pvSigner,
      DWORD dwFlags,
      void *pvExtra
    );












BOOL
__stdcall
CryptMsgCountersign(
      HCRYPTMSG hCryptMsg,
      DWORD dwIndex,
      DWORD cCountersigners,
      PCMSG_SIGNER_ENCODE_INFO rgCountersigners
    );







BOOL
__stdcall
CryptMsgCountersignEncoded(
      DWORD dwEncodingType,
      PBYTE pbSignerInfo,
      DWORD cbSignerInfo,
      DWORD cCountersigners,
      PCMSG_SIGNER_ENCODE_INFO rgCountersigners,
      PBYTE pbCountersignature,
      PDWORD pcbCountersignature
    );








typedef void * (__stdcall *PFN_CMSG_ALLOC) (
      size_t cb
    );

typedef void (__stdcall *PFN_CMSG_FREE)(
      void *pv
    );














typedef   BOOL (__stdcall *PFN_CMSG_GEN_ENCRYPT_KEY) (
      HCRYPTPROV *phCryptProv,
      PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
      PVOID pvEncryptAuxInfo,
      PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
     PFN_CMSG_ALLOC pfnAlloc,
      HCRYPTKEY *phEncryptKey,
     PBYTE *ppbEncryptParameters,
      PDWORD pcbEncryptParameters
    );


typedef BOOL (__stdcall *PFN_CMSG_EXPORT_ENCRYPT_KEY) (
      HCRYPTPROV hCryptProv,
      HCRYPTKEY hEncryptKey,
      PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
      PBYTE pbData,
      PDWORD pcbData
    );


typedef BOOL (__stdcall *PFN_CMSG_IMPORT_ENCRYPT_KEY) (
      HCRYPTPROV hCryptProv,
      DWORD dwKeySpec,
      PCRYPT_ALGORITHM_IDENTIFIER paiEncrypt,
      PCRYPT_ALGORITHM_IDENTIFIER paiPubKey,
      PBYTE pbEncodedKey,
      DWORD cbEncodedKey,
      HCRYPTKEY *phEncryptKey
    );
























typedef struct _CMSG_CONTENT_ENCRYPT_INFO {
    DWORD                       cbSize;
    HCRYPTPROV_LEGACY           hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
    void                        *pvEncryptionAuxInfo;
    DWORD                       cRecipients;
    PCMSG_RECIPIENT_ENCODE_INFO rgCmsRecipients;
    PFN_CMSG_ALLOC              pfnAlloc;
    PFN_CMSG_FREE               pfnFree;
    DWORD                       dwEncryptFlags;
    union {
        
        HCRYPTKEY                   hContentEncryptKey;
        
        BCRYPT_KEY_HANDLE           hCNGContentEncryptKey;
    } ;
    DWORD                       dwFlags;

    BOOL                        fCNG;
    
    BYTE                        *pbCNGContentEncryptKeyObject;
    BYTE                        *pbContentEncryptKey;
    DWORD                       cbContentEncryptKey;
} CMSG_CONTENT_ENCRYPT_INFO, *PCMSG_CONTENT_ENCRYPT_INFO;
































































typedef BOOL (__stdcall *PFN_CMSG_GEN_CONTENT_ENCRYPT_KEY) (
      PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
      DWORD dwFlags,
      void *pvReserved
    );












typedef struct _CMSG_KEY_TRANS_ENCRYPT_INFO {
    DWORD                       cbSize;
    DWORD                       dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB             EncryptedKey;
    DWORD                       dwFlags;
} CMSG_KEY_TRANS_ENCRYPT_INFO, *PCMSG_KEY_TRANS_ENCRYPT_INFO;


































typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_TRANS) (
      PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
      PCMSG_KEY_TRANS_RECIPIENT_ENCODE_INFO pKeyTransEncodeInfo,
      PCMSG_KEY_TRANS_ENCRYPT_INFO pKeyTransEncryptInfo,
      DWORD dwFlags,
      void *pvReserved
    );













typedef struct _CMSG_KEY_AGREE_KEY_ENCRYPT_INFO {
    DWORD                       cbSize;
    CRYPT_DATA_BLOB             EncryptedKey;
} CMSG_KEY_AGREE_KEY_ENCRYPT_INFO, *PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO;







typedef struct _CMSG_KEY_AGREE_ENCRYPT_INFO {
    DWORD                       cbSize;
    DWORD                       dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB             UserKeyingMaterial;
    DWORD                       dwOriginatorChoice;
    union {
        
        CERT_ID                     OriginatorCertId;
        
        CERT_PUBLIC_KEY_INFO        OriginatorPublicKeyInfo;
    } ;
    DWORD                       cKeyAgreeKeyEncryptInfo;
    PCMSG_KEY_AGREE_KEY_ENCRYPT_INFO *rgpKeyAgreeKeyEncryptInfo;
    DWORD                       dwFlags;
} CMSG_KEY_AGREE_ENCRYPT_INFO, *PCMSG_KEY_AGREE_ENCRYPT_INFO;




























































typedef BOOL (__stdcall *PFN_CMSG_EXPORT_KEY_AGREE) (
      PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
      PCMSG_KEY_AGREE_RECIPIENT_ENCODE_INFO pKeyAgreeEncodeInfo,
      PCMSG_KEY_AGREE_ENCRYPT_INFO pKeyAgreeEncryptInfo,
      DWORD dwFlags,
      void *pvReserved
    );












typedef struct _CMSG_MAIL_LIST_ENCRYPT_INFO {
    DWORD                       cbSize;
    DWORD                       dwRecipientIndex;
    CRYPT_ALGORITHM_IDENTIFIER  KeyEncryptionAlgorithm;
    CRYPT_DATA_BLOB             EncryptedKey;
    DWORD                       dwFlags;
} CMSG_MAIL_LIST_ENCRYPT_INFO, *PCMSG_MAIL_LIST_ENCRYPT_INFO;



































typedef BOOL (__stdcall *PFN_CMSG_EXPORT_MAIL_LIST) (
      PCMSG_CONTENT_ENCRYPT_INFO pContentEncryptInfo,
      PCMSG_MAIL_LIST_RECIPIENT_ENCODE_INFO pMailListEncodeInfo,
      PCMSG_MAIL_LIST_ENCRYPT_INFO pMailListEncryptInfo,
      DWORD dwFlags,
      void *pvReserved
    );






















typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_TRANS) (
      PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
      PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
      DWORD dwFlags,
      void *pvReserved,
      HCRYPTKEY *phContentEncryptKey
    );



typedef BOOL (__stdcall *PFN_CMSG_IMPORT_KEY_AGREE) (
      PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
      PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
      DWORD dwFlags,
      void *pvReserved,
      HCRYPTKEY *phContentEncryptKey
    );



typedef BOOL (__stdcall *PFN_CMSG_IMPORT_MAIL_LIST) (
      PCRYPT_ALGORITHM_IDENTIFIER pContentEncryptionAlgorithm,
      PCMSG_CTRL_MAIL_LIST_DECRYPT_PARA pMailListDecryptPara,
      DWORD dwFlags,
      void *pvReserved,
      HCRYPTKEY *phContentEncryptKey
    );











typedef struct _CMSG_CNG_CONTENT_DECRYPT_INFO {
    DWORD                       cbSize;
    CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
    PFN_CMSG_ALLOC              pfnAlloc;
    PFN_CMSG_FREE               pfnFree;

    
    
    
    NCRYPT_KEY_HANDLE           hNCryptKey;

    BYTE                        *pbContentEncryptKey;
    DWORD                       cbContentEncryptKey;

    BCRYPT_KEY_HANDLE           hCNGContentEncryptKey;
    BYTE                        *pbCNGContentEncryptKeyObject;
} CMSG_CNG_CONTENT_DECRYPT_INFO, *PCMSG_CNG_CONTENT_DECRYPT_INFO;



















typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_TRANS) (
      PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
      PCMSG_CTRL_KEY_TRANS_DECRYPT_PARA pKeyTransDecryptPara,
      DWORD dwFlags,
      void *pvReserved
    );



















typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_KEY_AGREE) (
      PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
      PCMSG_CTRL_KEY_AGREE_DECRYPT_PARA pKeyAgreeDecryptPara,
      DWORD dwFlags,
      void *pvReserved
    );



















typedef BOOL (__stdcall *PFN_CMSG_CNG_IMPORT_CONTENT_ENCRYPT_KEY) (
      PCMSG_CNG_CONTENT_DECRYPT_INFO pCNGContentDecryptInfo,
      DWORD dwFlags,
      void *pvReserved
    );











































































#line 9062 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Application Family


typedef void *HCERTSTORE;











typedef struct _CERT_CONTEXT {
    DWORD                   dwCertEncodingType;
    BYTE                    *pbCertEncoded;
    DWORD                   cbCertEncoded;
    PCERT_INFO              pCertInfo;
    HCERTSTORE              hCertStore;
} CERT_CONTEXT, *PCERT_CONTEXT;
typedef const CERT_CONTEXT *PCCERT_CONTEXT;


#line 9090 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#pragma region Desktop Family











typedef struct _CRL_CONTEXT {
    DWORD                   dwCertEncodingType;
    BYTE                    *pbCrlEncoded;
    DWORD                   cbCrlEncoded;
    PCRL_INFO               pCrlInfo;
    HCERTSTORE              hCertStore;
} CRL_CONTEXT, *PCRL_CONTEXT;
typedef const CRL_CONTEXT *PCCRL_CONTEXT;











typedef struct _CTL_CONTEXT {
    DWORD                   dwMsgAndCertEncodingType;
    BYTE                    *pbCtlEncoded;
    DWORD                   cbCtlEncoded;
    PCTL_INFO               pCtlInfo;
    HCERTSTORE              hCertStore;
    HCRYPTMSG               hCryptMsg;
    BYTE                    *pbCtlContent;
    DWORD                   cbCtlContent;
} CTL_CONTEXT, *PCTL_CONTEXT;
typedef const CTL_CONTEXT *PCCTL_CONTEXT;

























































































































































































































typedef struct _CRYPT_KEY_PROV_PARAM {
    DWORD           dwParam;
    BYTE            *pbData;
    DWORD           cbData;
    DWORD           dwFlags;
} CRYPT_KEY_PROV_PARAM, *PCRYPT_KEY_PROV_PARAM;

typedef struct _CRYPT_KEY_PROV_INFO {
    LPWSTR                  pwszContainerName;
    LPWSTR                  pwszProvName;
    DWORD                   dwProvType;
    DWORD                   dwFlags;
    DWORD                   cProvParam;
    PCRYPT_KEY_PROV_PARAM   rgProvParam;
    DWORD                   dwKeySpec;
} CRYPT_KEY_PROV_INFO, *PCRYPT_KEY_PROV_INFO;
























typedef struct _CERT_KEY_CONTEXT {
    DWORD           cbSize;           
    union {
        HCRYPTPROV          hCryptProv;

        
        NCRYPT_KEY_HANDLE   hNCryptKey;
    } ;
    DWORD           dwKeySpec;
} CERT_KEY_CONTEXT, *PCERT_KEY_CONTEXT;







typedef struct _ROOT_INFO_LUID {
    DWORD LowPart;
    LONG HighPart;
} ROOT_INFO_LUID, *PROOT_INFO_LUID;

typedef struct _CRYPT_SMART_CARD_ROOT_INFO {
    BYTE                rgbCardID [16];
    ROOT_INFO_LUID      luid;
} CRYPT_SMART_CARD_ROOT_INFO, *PCRYPT_SMART_CARD_ROOT_INFO;




































































































typedef struct _CERT_SYSTEM_STORE_RELOCATE_PARA {
    union {
        HKEY                hKeyBase;
        void                *pvBase;
    } ;
    union {
        void                *pvSystemStore;
        LPCSTR              pszSystemStore;
        LPCWSTR             pwszSystemStore;
    } ;
} CERT_SYSTEM_STORE_RELOCATE_PARA, *PCERT_SYSTEM_STORE_RELOCATE_PARA;




























































































































































































































































































































































typedef struct _CERT_REGISTRY_STORE_CLIENT_GPT_PARA {
    HKEY                hKeyBase;
    LPWSTR              pwszRegPath;
} CERT_REGISTRY_STORE_CLIENT_GPT_PARA, *PCERT_REGISTRY_STORE_CLIENT_GPT_PARA;









typedef struct _CERT_REGISTRY_STORE_ROAMING_PARA {
    HKEY                hKey;
    LPWSTR              pwszStoreDirectory;
} CERT_REGISTRY_STORE_ROAMING_PARA, *PCERT_REGISTRY_STORE_ROAMING_PARA;














































































typedef struct _CERT_LDAP_STORE_OPENED_PARA {
    void        *pvLdapSessionHandle;   
                                        
    LPCWSTR     pwszLdapUrl;
} CERT_LDAP_STORE_OPENED_PARA, *PCERT_LDAP_STORE_OPENED_PARA;











































































































































































































































































































































































__declspec(dllimport)
 
HCERTSTORE
__stdcall
CertOpenStore(
      LPCSTR lpszStoreProvider,
      DWORD dwEncodingType,
      HCRYPTPROV_LEGACY hCryptProv,
      DWORD dwFlags,
      const void *pvPara
    );







typedef void *HCERTSTOREPROV;










typedef struct _CERT_STORE_PROV_INFO {
    DWORD               cbSize;
    DWORD               cStoreProvFunc;
    void                **rgpvStoreProvFunc;
    HCERTSTOREPROV      hStoreProv;
    DWORD               dwStoreProvFlags;
    HCRYPTOIDFUNCADDR   hStoreProvFuncAddr2;
} CERT_STORE_PROV_INFO, *PCERT_STORE_PROV_INFO;








typedef BOOL (__stdcall *PFN_CERT_DLL_OPEN_STORE_PROV_FUNC)(
      LPCSTR lpszStoreProvider,
      DWORD dwEncodingType,
      HCRYPTPROV_LEGACY hCryptProv,
      DWORD dwFlags,
      const void *pvPara,
      HCERTSTORE hCertStore,
      PCERT_STORE_PROV_INFO pStoreProvInfo
    );





























































typedef void (__stdcall *PFN_CERT_STORE_PROV_CLOSE)(
      HCERTSTOREPROV hStoreProv,
      DWORD dwFlags
    );






typedef   BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CERT)(
      HCERTSTOREPROV hStoreProv,
      PCCERT_CONTEXT pStoreCertContext,
      DWORD dwFlags,
     PCCERT_CONTEXT *ppProvCertContext
    );










typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CERT)(
      HCERTSTOREPROV hStoreProv,
      PCCERT_CONTEXT pCertContext,
      DWORD dwFlags
    );





typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CERT)(
      HCERTSTOREPROV hStoreProv,
      PCCERT_CONTEXT pCertContext,
      DWORD dwFlags
    );









typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CERT_PROPERTY)(
      HCERTSTOREPROV hStoreProv,
      PCCERT_CONTEXT pCertContext,
      DWORD dwPropId,
      DWORD dwFlags,
      const void *pvData
    );






typedef   BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CRL)(
      HCERTSTOREPROV hStoreProv,
      PCCRL_CONTEXT pStoreCrlContext,
      DWORD dwFlags,
     PCCRL_CONTEXT *ppProvCrlContext
    );








typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CRL)(
      HCERTSTOREPROV hStoreProv,
      PCCRL_CONTEXT pCrlContext,
      DWORD dwFlags
    );




typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CRL)(
      HCERTSTOREPROV hStoreProv,
      PCCRL_CONTEXT pCrlContext,
      DWORD dwFlags
    );









typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CRL_PROPERTY)(
      HCERTSTOREPROV hStoreProv,
      PCCRL_CONTEXT pCrlContext,
      DWORD dwPropId,
      DWORD dwFlags,
      const void *pvData
    );






typedef   BOOL (__stdcall *PFN_CERT_STORE_PROV_READ_CTL)(
      HCERTSTOREPROV hStoreProv,
      PCCTL_CONTEXT pStoreCtlContext,
      DWORD dwFlags,
     PCCTL_CONTEXT *ppProvCtlContext
    );








typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_WRITE_CTL)(
      HCERTSTOREPROV hStoreProv,
      PCCTL_CONTEXT pCtlContext,
      DWORD dwFlags
    );




typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_DELETE_CTL)(
      HCERTSTOREPROV hStoreProv,
      PCCTL_CONTEXT pCtlContext,
      DWORD dwFlags
                                                     );









typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_SET_CTL_PROPERTY)(
      HCERTSTOREPROV hStoreProv,
      PCCTL_CONTEXT pCtlContext,
      DWORD dwPropId,
      DWORD dwFlags,
      const void *pvData
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_CONTROL)(
      HCERTSTOREPROV hStoreProv,
      DWORD dwFlags,
      DWORD dwCtrlType,
      void const *pvCtrlPara
    );

typedef struct _CERT_STORE_PROV_FIND_INFO {
    DWORD               cbSize;
    DWORD               dwMsgAndCertEncodingType;
    DWORD               dwFindFlags;
    DWORD               dwFindType;
    const void          *pvFindPara;
} CERT_STORE_PROV_FIND_INFO, *PCERT_STORE_PROV_FIND_INFO;
typedef const CERT_STORE_PROV_FIND_INFO CCERT_STORE_PROV_FIND_INFO,
*PCCERT_STORE_PROV_FIND_INFO;

typedef   BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CERT)(
      HCERTSTOREPROV hStoreProv,
      PCCERT_STORE_PROV_FIND_INFO pFindInfo,
      PCCERT_CONTEXT pPrevCertContext,
      DWORD dwFlags,
      void **ppvStoreProvFindInfo,
     PCCERT_CONTEXT *ppProvCertContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CERT)(
      HCERTSTOREPROV hStoreProv,
      PCCERT_CONTEXT pCertContext,
      void *pvStoreProvFindInfo,
      DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CERT_PROPERTY)(
      HCERTSTOREPROV hStoreProv,
      PCCERT_CONTEXT pCertContext,
      DWORD dwPropId,
      DWORD dwFlags,
      void *pvData,
      DWORD *pcbData
    );


typedef   BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CRL)(
      HCERTSTOREPROV hStoreProv,
      PCCERT_STORE_PROV_FIND_INFO pFindInfo,
      PCCRL_CONTEXT pPrevCrlContext,
      DWORD dwFlags,
      void **ppvStoreProvFindInfo,
     PCCRL_CONTEXT *ppProvCrlContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CRL)(
      HCERTSTOREPROV hStoreProv,
      PCCRL_CONTEXT pCrlContext,
      void *pvStoreProvFindInfo,
      DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CRL_PROPERTY)(
      HCERTSTOREPROV hStoreProv,
      PCCRL_CONTEXT pCrlContext,
      DWORD dwPropId,
      DWORD dwFlags,
      void *pvData,
      DWORD *pcbData
    );

typedef   BOOL (__stdcall *PFN_CERT_STORE_PROV_FIND_CTL)(
      HCERTSTOREPROV hStoreProv,
      PCCERT_STORE_PROV_FIND_INFO pFindInfo,
      PCCTL_CONTEXT pPrevCtlContext,
      DWORD dwFlags,
      void **ppvStoreProvFindInfo,
     PCCTL_CONTEXT *ppProvCtlContext
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_FREE_FIND_CTL)(
      HCERTSTOREPROV hStoreProv,
      PCCTL_CONTEXT pCtlContext,
      void *pvStoreProvFindInfo,
      DWORD dwFlags
    );

typedef BOOL (__stdcall *PFN_CERT_STORE_PROV_GET_CTL_PROPERTY)(
      HCERTSTOREPROV hStoreProv,
      PCCTL_CONTEXT pCtlContext,
      DWORD dwPropId,
      DWORD dwFlags,
      void *pvData,
      DWORD *pcbData
    );





__declspec(dllimport)
HCERTSTORE
__stdcall
CertDuplicateStore(
      HCERTSTORE hCertStore
    );































































__declspec(dllimport)
BOOL
__stdcall
CertSaveStore(
      HCERTSTORE hCertStore,
      DWORD dwEncodingType,
      DWORD dwSaveAs,
      DWORD dwSaveTo,
      void *pvSaveToPara,
      DWORD dwFlags
    );































__declspec(dllimport)
BOOL
__stdcall
CertCloseStore(
      HCERTSTORE hCertStore,
      DWORD dwFlags
    );













__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertGetSubjectCertificateFromStore(
      HCERTSTORE hCertStore,
      DWORD dwCertEncodingType,
      PCERT_INFO pCertId           
                                      
    );

















__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertEnumCertificatesInStore(
      HCERTSTORE hCertStore,
      PCCERT_CONTEXT pPrevCertContext
    );

























__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertFindCertificateInStore(
      HCERTSTORE hCertStore,
      DWORD dwCertEncodingType,
      DWORD dwFindFlags,
      DWORD dwFindType,
      const void *pvFindPara,
      PCCERT_CONTEXT pPrevCertContext
    );































































































































































































































































































































































__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertGetIssuerCertificateFromStore(
      HCERTSTORE hCertStore,
      PCCERT_CONTEXT pSubjectContext,
      PCCERT_CONTEXT pPrevIssuerContext,
      DWORD *pdwFlags
    );











__declspec(dllimport)
BOOL
__stdcall
CertVerifySubjectCertificateContext(
      PCCERT_CONTEXT pSubject,
      PCCERT_CONTEXT pIssuer,
      DWORD *pdwFlags
    );




__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertDuplicateCertificateContext(
      PCCERT_CONTEXT pCertContext
    );















__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertCreateCertificateContext(
      DWORD dwCertEncodingType,
      const BYTE *pbCertEncoded,
      DWORD cbCertEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCertificateContext(
      PCCERT_CONTEXT pCertContext
    );














































































































































__declspec(dllimport)
BOOL
__stdcall
CertSetCertificateContextProperty(
      PCCERT_CONTEXT pCertContext,
      DWORD dwPropId,
      DWORD dwFlags,
      const void *pvData
    );




































































__declspec(dllimport)
BOOL
__stdcall
CertGetCertificateContextProperty(
      PCCERT_CONTEXT pCertContext,
      DWORD dwPropId,
      void *pvData,
      DWORD *pcbData
    );















__declspec(dllimport)
DWORD
__stdcall
CertEnumCertificateContextProperties(
      PCCERT_CONTEXT pCertContext,
      DWORD dwPropId
    );


















__declspec(dllimport)
 
BOOL
__stdcall
CertCreateCTLEntryFromCertificateContextProperties(
      PCCERT_CONTEXT pCertContext,
      DWORD cOptAttr,
      PCRYPT_ATTRIBUTE rgOptAttr,
      DWORD dwFlags,
      void *pvReserved,
      PCTL_ENTRY pCtlEntry,
      DWORD *pcbCtlEntry
    );
















__declspec(dllimport)
BOOL
__stdcall
CertSetCertificateContextPropertiesFromCTLEntry(
      PCCERT_CONTEXT pCertContext,
      PCTL_ENTRY pCtlEntry,
      DWORD dwFlags
    );





















































__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertGetCRLFromStore(
      HCERTSTORE hCertStore,
      PCCERT_CONTEXT pIssuerContext,
      PCCRL_CONTEXT pPrevCrlContext,
      DWORD *pdwFlags
    );

















__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertEnumCRLsInStore(
      HCERTSTORE hCertStore,
      PCCRL_CONTEXT pPrevCrlContext
    );
























__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertFindCRLInStore(
      HCERTSTORE hCertStore,
      DWORD dwCertEncodingType,
      DWORD dwFindFlags,
      DWORD dwFindType,
      const void *pvFindPara,
      PCCRL_CONTEXT pPrevCrlContext
    );











































































typedef struct _CRL_FIND_ISSUED_FOR_PARA {
    PCCERT_CONTEXT              pSubjectCert;
    PCCERT_CONTEXT              pIssuerCert;
} CRL_FIND_ISSUED_FOR_PARA, *PCRL_FIND_ISSUED_FOR_PARA;















__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertDuplicateCRLContext(
      PCCRL_CONTEXT pCrlContext
    );















__declspec(dllimport)
PCCRL_CONTEXT
__stdcall
CertCreateCRLContext(
      DWORD dwCertEncodingType,
      const BYTE *pbCrlEncoded,
      DWORD cbCrlEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCRLContext(
      PCCRL_CONTEXT pCrlContext
    );






__declspec(dllimport)
BOOL
__stdcall
CertSetCRLContextProperty(
      PCCRL_CONTEXT pCrlContext,
      DWORD dwPropId,
      DWORD dwFlags,
      const void *pvData
    );









__declspec(dllimport)
BOOL
__stdcall
CertGetCRLContextProperty(
      PCCRL_CONTEXT pCrlContext,
      DWORD dwPropId,
      void *pvData,
      DWORD *pcbData
    );











__declspec(dllimport)
DWORD
__stdcall
CertEnumCRLContextProperties(
      PCCRL_CONTEXT pCrlContext,
      DWORD dwPropId
    );














__declspec(dllimport)
BOOL
__stdcall
CertFindCertificateInCRL(
      PCCERT_CONTEXT pCert,
      PCCRL_CONTEXT pCrlContext,
      DWORD dwFlags,
      void *pvReserved,
     PCRL_ENTRY *ppCrlEntry
    );













__declspec(dllimport)
BOOL
__stdcall
CertIsValidCRLForCertificate(
      PCCERT_CONTEXT pCert,
      PCCRL_CONTEXT pCrl,
      DWORD dwFlags,
      void *pvReserved
    );



























































__declspec(dllimport)
 
BOOL
__stdcall
CertAddEncodedCertificateToStore(
      HCERTSTORE hCertStore,
      DWORD dwCertEncodingType,
      const BYTE *pbCertEncoded,
      DWORD cbCertEncoded,
      DWORD dwAddDisposition,
     PCCERT_CONTEXT *ppCertContext
    );


























































__declspec(dllimport)
 
BOOL
__stdcall
CertAddCertificateContextToStore(
      HCERTSTORE hCertStore,
      PCCERT_CONTEXT pCertContext,
      DWORD dwAddDisposition,
     PCCERT_CONTEXT *ppStoreContext
    );













































__declspec(dllimport)
 
BOOL
__stdcall
CertAddSerializedElementToStore(
      HCERTSTORE hCertStore,
      const BYTE *pbElement,
      DWORD cbElement,
      DWORD dwAddDisposition,
      DWORD dwFlags,
      DWORD dwContextTypeFlags,
      DWORD *pdwContextType,
     const void **ppvContext
    );
















__declspec(dllimport)
BOOL
__stdcall
CertDeleteCertificateFromStore(
      PCCERT_CONTEXT pCertContext
    );

















__declspec(dllimport)
 
BOOL
__stdcall
CertAddEncodedCRLToStore(
      HCERTSTORE hCertStore,
      DWORD dwCertEncodingType,
      const BYTE *pbCrlEncoded,
      DWORD cbCrlEncoded,
      DWORD dwAddDisposition,
     PCCRL_CONTEXT *ppCrlContext
    );





















__declspec(dllimport)
 
BOOL
__stdcall
CertAddCRLContextToStore(
      HCERTSTORE hCertStore,
      PCCRL_CONTEXT pCrlContext,
      DWORD dwAddDisposition,
     PCCRL_CONTEXT *ppStoreContext
    );













__declspec(dllimport)
BOOL
__stdcall
CertDeleteCRLFromStore(
      PCCRL_CONTEXT pCrlContext
    );





__declspec(dllimport)
BOOL
__stdcall
CertSerializeCertificateStoreElement(
      PCCERT_CONTEXT pCertContext,
      DWORD dwFlags,
      BYTE *pbElement,
      DWORD *pcbElement
    );





__declspec(dllimport)
BOOL
__stdcall
CertSerializeCRLStoreElement(
      PCCRL_CONTEXT pCrlContext,
      DWORD dwFlags,
      BYTE *pbElement,
      DWORD *pcbElement
    );










__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertDuplicateCTLContext(
      PCCTL_CONTEXT pCtlContext
    );















__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertCreateCTLContext(
      DWORD dwMsgAndCertEncodingType,
      const BYTE *pbCtlEncoded,
      DWORD cbCtlEncoded
    );







__declspec(dllimport)
BOOL
__stdcall
CertFreeCTLContext(
      PCCTL_CONTEXT pCtlContext
    );






__declspec(dllimport)
BOOL
__stdcall
CertSetCTLContextProperty(
      PCCTL_CONTEXT pCtlContext,
      DWORD dwPropId,
      DWORD dwFlags,
      const void *pvData
    );









__declspec(dllimport)
BOOL
__stdcall
CertGetCTLContextProperty(
      PCCTL_CONTEXT pCtlContext,
      DWORD dwPropId,
      void *pvData,
      DWORD *pcbData
    );




__declspec(dllimport)
DWORD
__stdcall
CertEnumCTLContextProperties(
      PCCTL_CONTEXT pCtlContext,
      DWORD dwPropId
    );

















__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertEnumCTLsInStore(
      HCERTSTORE hCertStore,
      PCCTL_CONTEXT pPrevCtlContext
    );



















__declspec(dllimport)
PCTL_ENTRY
__stdcall
CertFindSubjectInCTL(
      DWORD dwEncodingType,
      DWORD dwSubjectType,
      void *pvSubject,
      PCCTL_CONTEXT pCtlContext,
      DWORD dwFlags
    );







typedef struct _CTL_ANY_SUBJECT_INFO {
    CRYPT_ALGORITHM_IDENTIFIER  SubjectAlgorithm;
    CRYPT_DATA_BLOB             SubjectIdentifier;
} CTL_ANY_SUBJECT_INFO, *PCTL_ANY_SUBJECT_INFO;
























__declspec(dllimport)
PCCTL_CONTEXT
__stdcall
CertFindCTLInStore(
      HCERTSTORE hCertStore,
      DWORD dwMsgAndCertEncodingType,
      DWORD dwFindFlags,
      DWORD dwFindType,
      const void *pvFindPara,
      PCCTL_CONTEXT pPrevCtlContext
    );








typedef struct _CTL_FIND_USAGE_PARA {
    DWORD               cbSize;
    CTL_USAGE           SubjectUsage;   
    CRYPT_DATA_BLOB     ListIdentifier; 
    PCERT_INFO          pSigner;        
} CTL_FIND_USAGE_PARA, *PCTL_FIND_USAGE_PARA;







typedef struct _CTL_FIND_SUBJECT_PARA {
    DWORD                   cbSize;
    PCTL_FIND_USAGE_PARA    pUsagePara; 
    DWORD                   dwSubjectType;
    void                    *pvSubject;
} CTL_FIND_SUBJECT_PARA, *PCTL_FIND_SUBJECT_PARA;




































































__declspec(dllimport)
 
BOOL
__stdcall
CertAddEncodedCTLToStore(
      HCERTSTORE hCertStore,
      DWORD dwMsgAndCertEncodingType,
      const BYTE *pbCtlEncoded,
      DWORD cbCtlEncoded,
      DWORD dwAddDisposition,
     PCCTL_CONTEXT *ppCtlContext
    );





















__declspec(dllimport)
 
BOOL
__stdcall
CertAddCTLContextToStore(
      HCERTSTORE hCertStore,
      PCCTL_CONTEXT pCtlContext,
      DWORD dwAddDisposition,
     PCCTL_CONTEXT *ppStoreContext
    );




__declspec(dllimport)
BOOL
__stdcall
CertSerializeCTLStoreElement(
      PCCTL_CONTEXT pCtlContext,
      DWORD dwFlags,
      BYTE *pbElement,
      DWORD *pcbElement
    );













__declspec(dllimport)
BOOL
__stdcall
CertDeleteCTLFromStore(
      PCCTL_CONTEXT pCtlContext
    );


__declspec(dllimport)
 
BOOL
__stdcall
CertAddCertificateLinkToStore(
      HCERTSTORE hCertStore,
      PCCERT_CONTEXT pCertContext,
      DWORD dwAddDisposition,
     PCCERT_CONTEXT *ppStoreContext
    );

__declspec(dllimport)
 
BOOL
__stdcall
CertAddCRLLinkToStore(
      HCERTSTORE hCertStore,
      PCCRL_CONTEXT pCrlContext,
      DWORD dwAddDisposition,
     PCCRL_CONTEXT *ppStoreContext
    );

__declspec(dllimport)
 
BOOL
__stdcall
CertAddCTLLinkToStore(
      HCERTSTORE hCertStore,
      PCCTL_CONTEXT pCtlContext,
      DWORD dwAddDisposition,
     PCCTL_CONTEXT *ppStoreContext
    );

__declspec(dllimport)
BOOL
__stdcall
CertAddStoreToCollection(
      HCERTSTORE hCollectionStore,
      HCERTSTORE hSiblingStore,
      DWORD dwUpdateFlags,
      DWORD dwPriority
    );

__declspec(dllimport)
void
__stdcall
CertRemoveStoreFromCollection(
      HCERTSTORE hCollectionStore,
      HCERTSTORE hSiblingStore
    );


__declspec(dllimport)
BOOL
__stdcall
CertControlStore(
      HCERTSTORE hCertStore,
      DWORD dwFlags,
      DWORD dwCtrlType,
      void const *pvCtrlPara
    );































































































































__declspec(dllimport)
BOOL
__stdcall
CertSetStoreProperty(
      HCERTSTORE hCertStore,
      DWORD dwPropId,
      DWORD dwFlags,
      const void *pvData
    );














__declspec(dllimport)
 
BOOL
__stdcall
CertGetStoreProperty(
      HCERTSTORE hCertStore,
      DWORD dwPropId,
      void *pvData,
      DWORD *pcbData
    );













typedef BOOL (__stdcall *PFN_CERT_CREATE_CONTEXT_SORT_FUNC)(
      DWORD cbTotalEncoded,
      DWORD cbRemainEncoded,
      DWORD cEntry,
      void *pvSort
    );

typedef struct _CERT_CREATE_CONTEXT_PARA {
    DWORD                               cbSize;
    PFN_CRYPT_FREE                      pfnFree;    
    void                                *pvFree;    

    
    
    PFN_CERT_CREATE_CONTEXT_SORT_FUNC   pfnSort;    
    void                                *pvSort;    
} CERT_CREATE_CONTEXT_PARA, *PCERT_CREATE_CONTEXT_PARA;


































__declspec(dllimport)
const void *
__stdcall
CertCreateContext(
      DWORD dwContextType,
      DWORD dwEncodingType,
      const BYTE *pbEncoded,
      DWORD cbEncoded,
      DWORD dwFlags,
      PCERT_CREATE_CONTEXT_PARA pCreatePara
    );

















































typedef struct _CERT_SYSTEM_STORE_INFO {
    DWORD   cbSize;
} CERT_SYSTEM_STORE_INFO, *PCERT_SYSTEM_STORE_INFO;











































typedef struct _CERT_PHYSICAL_STORE_INFO {
    DWORD               cbSize;
    LPSTR               pszOpenStoreProvider;   
    DWORD               dwOpenEncodingType;     
    DWORD               dwOpenFlags;            
    CRYPT_DATA_BLOB     OpenParameters;         
    DWORD               dwFlags;                
    DWORD               dwPriority;             
} CERT_PHYSICAL_STORE_INFO, *PCERT_PHYSICAL_STORE_INFO;





































__declspec(dllimport)
BOOL
__stdcall
CertRegisterSystemStore(
      const void *pvSystemStore,
      DWORD dwFlags,
      PCERT_SYSTEM_STORE_INFO pStoreInfo,
      void *pvReserved
    );

















__declspec(dllimport)
BOOL
__stdcall
CertRegisterPhysicalStore(
      const void *pvSystemStore,
      DWORD dwFlags,
      LPCWSTR pwszStoreName,
      PCERT_PHYSICAL_STORE_INFO pStoreInfo,
      void *pvReserved
    );
















__declspec(dllimport)
BOOL
__stdcall
CertUnregisterSystemStore(
      const void *pvSystemStore,
      DWORD dwFlags
    );
















__declspec(dllimport)
BOOL
__stdcall
CertUnregisterPhysicalStore(
      const void *pvSystemStore,
      DWORD dwFlags,
      LPCWSTR pwszStoreName
    );


















typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE_LOCATION)(
      LPCWSTR pwszStoreLocation,
      DWORD dwFlags,
      void *pvReserved,
      void *pvArg
    );

typedef BOOL (__stdcall *PFN_CERT_ENUM_SYSTEM_STORE)(
      const void *pvSystemStore,
      DWORD dwFlags,
      PCERT_SYSTEM_STORE_INFO pStoreInfo,
      void *pvReserved,
      void *pvArg
    );

typedef BOOL (__stdcall *PFN_CERT_ENUM_PHYSICAL_STORE)(
      const void *pvSystemStore,
      DWORD dwFlags,
      LPCWSTR pwszStoreName,
      PCERT_PHYSICAL_STORE_INFO pStoreInfo,
      void *pvReserved,
      void *pvArg
    );




















__declspec(dllimport)
BOOL
__stdcall
CertEnumSystemStoreLocation(
      DWORD dwFlags,
      void *pvArg,
     PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum
    );
































__declspec(dllimport)
BOOL
__stdcall
CertEnumSystemStore(
      DWORD dwFlags,
      void *pvSystemStoreLocationPara,
      void *pvArg,
     PFN_CERT_ENUM_SYSTEM_STORE pfnEnum
    );

















__declspec(dllimport)
BOOL
__stdcall
CertEnumPhysicalStore(
      const void *pvSystemStore,
      DWORD dwFlags,
      void *pvArg,
     PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum
    );






















































__declspec(dllimport)
BOOL
__stdcall
CertGetEnhancedKeyUsage(
      PCCERT_CONTEXT pCertContext,
      DWORD dwFlags,
      PCERT_ENHKEY_USAGE pUsage,
      DWORD *pcbUsage
    );




__declspec(dllimport)
BOOL
__stdcall
CertSetEnhancedKeyUsage(
      PCCERT_CONTEXT pCertContext,
      PCERT_ENHKEY_USAGE pUsage
    );




__declspec(dllimport)
BOOL
__stdcall
CertAddEnhancedKeyUsageIdentifier(
      PCCERT_CONTEXT pCertContext,
      LPCSTR pszUsageIdentifier
    );






__declspec(dllimport)
BOOL
__stdcall
CertRemoveEnhancedKeyUsageIdentifier(
      PCCERT_CONTEXT pCertContext,
      LPCSTR pszUsageIdentifier
    );









__declspec(dllimport)
 
BOOL
__stdcall
CertGetValidUsages(
      DWORD cCerts,
      PCCERT_CONTEXT *rghCerts,
      int *cNumOIDs,
      LPSTR *rghOIDs,
      DWORD *pcbOIDs);





























__declspec(dllimport)
 
BOOL
__stdcall
CryptMsgGetAndVerifySigner(
      HCRYPTMSG hCryptMsg,
      DWORD cSignerStore,
      HCERTSTORE *rghSignerStore,
      DWORD dwFlags,
     PCCERT_CONTEXT *ppSigner,
      DWORD *pdwSignerIndex
    );















__declspec(dllimport)
BOOL
__stdcall
CryptMsgSignCTL(
      DWORD dwMsgEncodingType,
      BYTE *pbCtlContent,
      DWORD cbCtlContent,
      PCMSG_SIGNED_ENCODE_INFO pSignInfo,
      DWORD dwFlags,
      BYTE *pbEncoded,
      DWORD *pcbEncoded
    );

















__declspec(dllimport)
BOOL
__stdcall
CryptMsgEncodeAndSignCTL(
      DWORD dwMsgEncodingType,
      PCTL_INFO pCtlInfo,
      PCMSG_SIGNED_ENCODE_INFO pSignInfo,
      DWORD dwFlags,
      BYTE *pbEncoded,
      DWORD *pcbEncoded
    );
















__declspec(dllimport)
BOOL
__stdcall
CertFindSubjectInSortedCTL(
      PCRYPT_DATA_BLOB pSubjectIdentifier,
      PCCTL_CONTEXT pCtlContext,
      DWORD dwFlags,
      void *pvReserved,
      PCRYPT_DER_BLOB pEncodedAttributes
    );














__declspec(dllimport)
BOOL
__stdcall
CertEnumSubjectInSortedCTL(
      PCCTL_CONTEXT pCtlContext,
      void **ppvNextSubject,
      PCRYPT_DER_BLOB pSubjectIdentifier,
      PCRYPT_DER_BLOB pEncodedAttributes
    );






typedef struct _CTL_VERIFY_USAGE_PARA {
    DWORD                   cbSize;
    CRYPT_DATA_BLOB         ListIdentifier;     
    DWORD                   cCtlStore;
    HCERTSTORE              *rghCtlStore;       
    DWORD                   cSignerStore;
    HCERTSTORE              *rghSignerStore;    
} CTL_VERIFY_USAGE_PARA, *PCTL_VERIFY_USAGE_PARA;

typedef struct _CTL_VERIFY_USAGE_STATUS {
    DWORD                   cbSize;
    DWORD                   dwError;
    DWORD                   dwFlags;
    PCCTL_CONTEXT           *ppCtl;             
    DWORD                   dwCtlEntryIndex;
    PCCERT_CONTEXT          *ppSigner;          
    DWORD                   dwSignerIndex;
} CTL_VERIFY_USAGE_STATUS, *PCTL_VERIFY_USAGE_STATUS;

























































__declspec(dllimport)
BOOL
__stdcall
CertVerifyCTLUsage(
      DWORD dwEncodingType,
      DWORD dwSubjectType,
      void *pvSubject,
      PCTL_USAGE pSubjectUsage,
      DWORD dwFlags,
      PCTL_VERIFY_USAGE_PARA pVerifyUsagePara,
      PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus
    );










typedef struct _CERT_REVOCATION_CRL_INFO {
    DWORD                   cbSize;
    PCCRL_CONTEXT           pBaseCrlContext;
    PCCRL_CONTEXT           pDeltaCrlContext;

    
    
    PCRL_ENTRY              pCrlEntry;
    BOOL                    fDeltaCrlEntry; 
} CERT_REVOCATION_CRL_INFO, *PCERT_REVOCATION_CRL_INFO;










typedef struct _CERT_REVOCATION_CHAIN_PARA
    CERT_REVOCATION_CHAIN_PARA,
    *PCERT_REVOCATION_CHAIN_PARA;


















typedef struct _CERT_REVOCATION_PARA {
    DWORD                       cbSize;
    PCCERT_CONTEXT              pIssuerCert;
    DWORD                       cCertStore;
    HCERTSTORE                  *rgCertStore;
    HCERTSTORE                  hCrlStore;
    LPFILETIME                  pftTimeToUse;




































} CERT_REVOCATION_PARA, *PCERT_REVOCATION_PARA;

















typedef struct _CERT_REVOCATION_STATUS {
    DWORD                   cbSize;
    DWORD                   dwIndex;
    DWORD                   dwError;
    DWORD                   dwReason;

    

    
    
    
    
    
    
    BOOL                    fHasFreshnessTime;
    DWORD                   dwFreshnessTime;    
} CERT_REVOCATION_STATUS, *PCERT_REVOCATION_STATUS;














































































__declspec(dllimport)
BOOL
__stdcall
CertVerifyRevocation(
      DWORD dwEncodingType,
      DWORD dwRevType,
      DWORD cContext,
      PVOID rgpvContext[],
      DWORD dwFlags,
      PCERT_REVOCATION_PARA pRevPara,
      PCERT_REVOCATION_STATUS pRevStatus
    );


































































BOOL
__stdcall
CertCompareIntegerBlob(
      PCRYPT_INTEGER_BLOB pInt1,
      PCRYPT_INTEGER_BLOB pInt2
    );









__declspec(dllimport)
BOOL
__stdcall
CertCompareCertificate(
      DWORD dwCertEncodingType,
      PCERT_INFO pCertId1,
      PCERT_INFO pCertId2
    );






__declspec(dllimport)
BOOL
__stdcall
CertCompareCertificateName(
      DWORD dwCertEncodingType,
      PCERT_NAME_BLOB pCertName1,
      PCERT_NAME_BLOB pCertName2
    );



















__declspec(dllimport)
BOOL
__stdcall
CertIsRDNAttrsInCertificateName(
      DWORD dwCertEncodingType,
      DWORD dwFlags,
      PCERT_NAME_BLOB pCertName,
      PCERT_RDN pRDN
    );









__declspec(dllimport)
BOOL
__stdcall
CertComparePublicKeyInfo(
      DWORD dwCertEncodingType,
      PCERT_PUBLIC_KEY_INFO pPublicKey1,
      PCERT_PUBLIC_KEY_INFO pPublicKey2
    );






__declspec(dllimport)
DWORD
__stdcall
CertGetPublicKeyLength(
      DWORD dwCertEncodingType,
      PCERT_PUBLIC_KEY_INFO pPublicKey
    );










__declspec(dllimport)
 
BOOL
__stdcall
CryptVerifyCertificateSignature(
      HCRYPTPROV_LEGACY hCryptProv,
      DWORD dwCertEncodingType,
      const BYTE *pbEncoded,
      DWORD cbEncoded,
      PCERT_PUBLIC_KEY_INFO pPublicKey
    );


























__declspec(dllimport)
 
BOOL
__stdcall
CryptVerifyCertificateSignatureEx(
      HCRYPTPROV_LEGACY hCryptProv,
      DWORD dwCertEncodingType,
      DWORD dwSubjectType,
      void *pvSubject,
      DWORD dwIssuerType,
      void *pvIssuer,
      DWORD dwFlags,
      void *pvExtra
    );



    

    

    

    



    

    

    

    










































typedef struct _CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO {
    
    CRYPT_DATA_BLOB CertSignHashCNGAlgPropData;

    
    CRYPT_DATA_BLOB CertIssuerPubKeyBitLengthPropData;
} CRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO,
    *PCRYPT_VERIFY_CERT_SIGN_STRONG_PROPERTIES_INFO;


















__declspec(dllimport)
BOOL
__stdcall
CertIsStrongHashToSign(
      PCCERT_STRONG_SIGN_PARA pStrongSignPara,
      LPCWSTR pwszCNGHashAlgid,
      PCCERT_CONTEXT pSigningCert
    );










__declspec(dllimport)
BOOL
__stdcall
CryptHashToBeSigned(
      HCRYPTPROV_LEGACY hCryptProv,
      DWORD dwCertEncodingType,
      const BYTE *pbEncoded,
      DWORD cbEncoded,
      BYTE *pbComputedHash,
      DWORD *pcbComputedHash
    );










__declspec(dllimport)
BOOL
__stdcall
CryptHashCertificate(
      HCRYPTPROV_LEGACY hCryptProv,
      ALG_ID Algid,
      DWORD dwFlags,
      const BYTE *pbEncoded,
      DWORD cbEncoded,
      BYTE *pbComputedHash,
      DWORD *pcbComputedHash
    );






__declspec(dllimport)
 
BOOL
__stdcall
CryptHashCertificate2(
      LPCWSTR pwszCNGHashAlgid,
      DWORD dwFlags,
      void *pvReserved,
      const BYTE *pbEncoded,
      DWORD cbEncoded,
      BYTE *pbComputedHash,
      DWORD *pcbComputedHash
    );

#line 14299 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"












__declspec(dllimport)
BOOL
__stdcall
CryptSignCertificate(
      HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
      DWORD dwKeySpec,       
      DWORD dwCertEncodingType,
      const BYTE *pbEncodedToBeSigned,
      DWORD cbEncodedToBeSigned,
      PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
      const void *pvHashAuxInfo,
      BYTE *pbSignature,
      DWORD *pcbSignature
    );













__declspec(dllimport)
BOOL
__stdcall
CryptSignAndEncodeCertificate(
      HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
      DWORD dwKeySpec,       
      DWORD dwCertEncodingType,
      LPCSTR lpszStructType,       
      const void *pvStructInfo,
      PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
      const void *pvHashAuxInfo,
      BYTE *pbEncoded,
      DWORD *pcbEncoded
    );






















typedef BOOL (__stdcall *PFN_CRYPT_EXTRACT_ENCODED_SIGNATURE_PARAMETERS_FUNC)(
      DWORD dwCertEncodingType,
      PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
     void **ppvDecodedSignPara, 
     LPWSTR *ppwszCNGHashAlgid      
    );




typedef BOOL (__stdcall *PFN_CRYPT_SIGN_AND_ENCODE_HASH_FUNC)(
      NCRYPT_KEY_HANDLE hKey,
      DWORD dwCertEncodingType,
      PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
      void *pvDecodedSignPara,
      LPCWSTR pwszCNGPubKeyAlgid,    
      LPCWSTR pwszCNGHashAlgid,
      BYTE *pbComputedHash,
      DWORD cbComputedHash,
      BYTE *pbSignature,
      DWORD *pcbSignature
    );





typedef BOOL (__stdcall *PFN_CRYPT_VERIFY_ENCODED_SIGNATURE_FUNC)(
      DWORD dwCertEncodingType,
      PCERT_PUBLIC_KEY_INFO pPubKeyInfo,
      PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
      void *pvDecodedSignPara,
      LPCWSTR pwszCNGPubKeyAlgid,    
      LPCWSTR pwszCNGHashAlgid,
      BYTE *pbComputedHash,
      DWORD cbComputedHash,
      BYTE *pbSignature,
      DWORD cbSignature
    );










__declspec(dllimport)
LONG
__stdcall
CertVerifyTimeValidity(
      LPFILETIME pTimeToVerify,
      PCERT_INFO pCertInfo
    );










__declspec(dllimport)
LONG
__stdcall
CertVerifyCRLTimeValidity(
      LPFILETIME pTimeToVerify,
      PCRL_INFO pCrlInfo
    );







__declspec(dllimport)
BOOL
__stdcall
CertVerifyValidityNesting(
      PCERT_INFO pSubjectInfo,
      PCERT_INFO pIssuerInfo
    );






__declspec(dllimport)
BOOL
__stdcall
CertVerifyCRLRevocation(
      DWORD dwCertEncodingType,
      PCERT_INFO pCertId,          
                                      
      DWORD cCrlInfo,
      PCRL_INFO rgpCrlInfo[]
    );






__declspec(dllimport)
LPCSTR
__stdcall
CertAlgIdToOID(
      DWORD dwAlgId
    );






__declspec(dllimport)
DWORD
__stdcall
CertOIDToAlgId(
      LPCSTR pszObjId
    );






__declspec(dllimport)
PCERT_EXTENSION
__stdcall
CertFindExtension(
      LPCSTR pszObjId,
      DWORD cExtensions,
      CERT_EXTENSION rgExtensions[]
    );






__declspec(dllimport)
PCRYPT_ATTRIBUTE
__stdcall
CertFindAttribute(
      LPCSTR pszObjId,
      DWORD cAttr,
      CRYPT_ATTRIBUTE rgAttr[]
    );







__declspec(dllimport)
PCERT_RDN_ATTR
__stdcall
CertFindRDNAttr(
      LPCSTR pszObjId,
      PCERT_NAME_INFO pName
    );









__declspec(dllimport)
BOOL
__stdcall
CertGetIntendedKeyUsage(
      DWORD dwCertEncodingType,
      PCERT_INFO pCertInfo,
      BYTE *pbKeyUsage,
      DWORD cbKeyUsage
    );

typedef void *HCRYPTDEFAULTCONTEXT;




























__declspec(dllimport)
BOOL
__stdcall
CryptInstallDefaultContext(
      HCRYPTPROV hCryptProv,
      DWORD dwDefaultType,
      const void *pvDefaultPara,
      DWORD dwFlags,
      void *pvReserved,
      HCRYPTDEFAULTCONTEXT *phDefaultContext
    );






























typedef struct _CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA {
    DWORD               cOID;
    LPSTR               *rgpszOID;
} CRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA, *PCRYPT_DEFAULT_CONTEXT_MULTI_OID_PARA;










__declspec(dllimport)
BOOL
__stdcall
CryptUninstallDefaultContext(
      HCRYPTDEFAULTCONTEXT hDefaultContext,
      DWORD dwFlags,
      void *pvReserved
    );








__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfo(
      HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
      DWORD dwKeySpec,       
      DWORD dwCertEncodingType,
      PCERT_PUBLIC_KEY_INFO pInfo,
      DWORD *pcbInfo
    );





















__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfoEx(
      HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
      DWORD dwKeySpec,       
      DWORD dwCertEncodingType,
      LPSTR pszPublicKeyObjId,
      DWORD dwFlags,
      void *pvAuxInfo,
      PCERT_PUBLIC_KEY_INFO pInfo,
      DWORD *pcbInfo
    );










typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_EX2_FUNC) (
      NCRYPT_KEY_HANDLE hNCryptKey,
      DWORD dwCertEncodingType,
      LPSTR pszPublicKeyObjId,
      DWORD dwFlags,
      void *pvAuxInfo,
      PCERT_PUBLIC_KEY_INFO pInfo,
      DWORD *pcbInfo
    );























__declspec(dllimport)
BOOL
__stdcall
CryptExportPublicKeyInfoFromBCryptKeyHandle(
      BCRYPT_KEY_HANDLE hBCryptKey,
      DWORD dwCertEncodingType,
      LPSTR pszPublicKeyObjId,
      DWORD dwFlags,
      void *pvAuxInfo,
      PCERT_PUBLIC_KEY_INFO pInfo,
      DWORD *pcbInfo
    );







typedef BOOL (__stdcall *PFN_CRYPT_EXPORT_PUBLIC_KEY_INFO_FROM_BCRYPT_HANDLE_FUNC) (
      BCRYPT_KEY_HANDLE hBCryptKey,
      DWORD dwCertEncodingType,
      LPSTR pszPublicKeyObjId,
      DWORD dwFlags,
      void *pvAuxInfo,
      PCERT_PUBLIC_KEY_INFO pInfo,
      DWORD *pcbInfo
    );

#line 14778 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"








__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfo(
      HCRYPTPROV hCryptProv,
      DWORD dwCertEncodingType,
      PCERT_PUBLIC_KEY_INFO pInfo,
      HCRYPTKEY *phKey
    );

















__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfoEx(
      HCRYPTPROV hCryptProv,
      DWORD dwCertEncodingType,
      PCERT_PUBLIC_KEY_INFO pInfo,
      ALG_ID aiKeyAlg,
      DWORD dwFlags,
      void *pvAuxInfo,
      HCRYPTKEY *phKey
    );


















__declspec(dllimport)
BOOL
__stdcall
CryptImportPublicKeyInfoEx2(
      DWORD dwCertEncodingType,
      PCERT_PUBLIC_KEY_INFO pInfo,
      DWORD dwFlags,
      void *pvAuxInfo,
      BCRYPT_KEY_HANDLE *phKey
    );






typedef BOOL (__stdcall *PFN_IMPORT_PUBLIC_KEY_INFO_EX2_FUNC) (
      DWORD dwCertEncodingType,
      PCERT_PUBLIC_KEY_INFO pInfo,
      DWORD dwFlags,
      void *pvAuxInfo,
      BCRYPT_KEY_HANDLE *phKey
    );

#line 14867 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"














































































__declspec(dllimport)
BOOL
__stdcall
CryptAcquireCertificatePrivateKey(
      PCCERT_CONTEXT pCert,
      DWORD dwFlags,
      void *pvParameters,
      HCRYPTPROV_OR_NCRYPT_KEY_HANDLE *phCryptProvOrNCryptKey,
      DWORD *pdwKeySpec,
      BOOL *pfCallerFreeProvOrNCryptKey
    );






































__declspec(dllimport)
BOOL
__stdcall
CryptFindCertificateKeyProvInfo(
      PCCERT_CONTEXT pCert,
      DWORD dwFlags,
      void *pvReserved
    );




















typedef BOOL (__stdcall *PFN_IMPORT_PRIV_KEY_FUNC) (
      HCRYPTPROV hCryptProv,                     
      CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo,   
      DWORD dwFlags,                             
      void* pvAuxInfo                        
    );





















__declspec(dllimport)
BOOL
__stdcall
CryptImportPKCS8(
      CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams,    
      DWORD dwFlags,                                     
      HCRYPTPROV *phCryptProv,                      
      void* pvAuxInfo                                
    );




typedef BOOL (__stdcall *PFN_EXPORT_PRIV_KEY_FUNC) (
      HCRYPTPROV hCryptProv,         
      DWORD dwKeySpec,               
      LPSTR pszPrivateKeyObjId,      
      DWORD dwFlags,                 
      void* pvAuxInfo,           
      CRYPT_PRIVATE_KEY_INFO* pPrivateKeyInfo,  
      DWORD* pcbPrivateKeyInfo    
    );









__declspec(dllimport)
BOOL
__stdcall
CryptExportPKCS8(
      HCRYPTPROV hCryptProv,                                     
      DWORD dwKeySpec,                                           
      LPSTR pszPrivateKeyObjId,                                  
      DWORD dwFlags,                                             
      void* pvAuxInfo,                                       
      BYTE* pbPrivateKeyBlob,   
      DWORD *pcbPrivateKeyBlob                                
    );























__declspec(dllimport)
BOOL
__stdcall
CryptExportPKCS8Ex(
      CRYPT_PKCS8_EXPORT_PARAMS* psExportParams,                 
      DWORD dwFlags,                                             
      void* pvAuxInfo,                                       
      BYTE* pbPrivateKeyBlob,   
      DWORD* pcbPrivateKeyBlob                                
    );






__declspec(dllimport)
BOOL
__stdcall
CryptHashPublicKeyInfo(
      HCRYPTPROV_LEGACY hCryptProv,
      ALG_ID Algid,
      DWORD dwFlags,
      DWORD dwCertEncodingType,
      PCERT_PUBLIC_KEY_INFO pInfo,
      BYTE *pbComputedHash,
      DWORD *pcbComputedHash
    );












__declspec(dllimport)
DWORD
__stdcall
CertRDNValueToStrA(
      DWORD dwValueType,
      PCERT_RDN_VALUE_BLOB pValue,
      LPSTR psz,
      DWORD csz
    );











__declspec(dllimport)
DWORD
__stdcall
CertRDNValueToStrW(
      DWORD dwValueType,
      PCERT_RDN_VALUE_BLOB pValue,
      LPWSTR psz,
      DWORD csz
    );




#line 15189 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

































































































__declspec(dllimport)
DWORD
__stdcall
CertNameToStrA(
      DWORD dwCertEncodingType,
      PCERT_NAME_BLOB pName,
      DWORD dwStrType,
      LPSTR psz,
      DWORD csz
    );


__declspec(dllimport)
DWORD
__stdcall
CertNameToStrW(
      DWORD dwCertEncodingType,
      PCERT_NAME_BLOB pName,
      DWORD dwStrType,
      LPWSTR psz,
      DWORD csz
    );




#line 15313 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"












































































































































__declspec(dllimport)
BOOL
__stdcall
CertStrToNameA(
      DWORD dwCertEncodingType,
      LPCSTR pszX500,
      DWORD dwStrType,
      void *pvReserved,
      BYTE *pbEncoded,
      DWORD *pcbEncoded,
     LPCSTR *ppszError
    );


__declspec(dllimport)
BOOL
__stdcall
CertStrToNameW(
      DWORD dwCertEncodingType,
      LPCWSTR pszX500,
      DWORD dwStrType,
      void *pvReserved,
      BYTE *pbEncoded,
      DWORD *pcbEncoded,
     LPCWSTR *ppszError
    );




#line 15484 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"






























































































__declspec(dllimport)
DWORD
__stdcall
CertGetNameStringA(
      PCCERT_CONTEXT pCertContext,
      DWORD dwType,
      DWORD dwFlags,
      void *pvTypePara,
      LPSTR pszNameString,
      DWORD cchNameString
    );


__declspec(dllimport)
DWORD
__stdcall
CertGetNameStringW(
      PCCERT_CONTEXT pCertContext,
      DWORD dwType,
      DWORD dwFlags,
      void *pvTypePara,
      LPWSTR pszNameString,
      DWORD cchNameString
    );




#line 15607 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"















































































typedef PCCERT_CONTEXT (__stdcall *PFN_CRYPT_GET_SIGNER_CERTIFICATE)(
      void *pvGetArg,
      DWORD dwCertEncodingType,
      PCERT_INFO pSignerId,    
                                
      HCERTSTORE hMsgCertStore
    );




















































typedef struct _CRYPT_SIGN_MESSAGE_PARA {
    DWORD                       cbSize;
    DWORD                       dwMsgEncodingType;
    PCCERT_CONTEXT              pSigningCert;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    void                        *pvHashAuxInfo;
    DWORD                       cMsgCert;
    PCCERT_CONTEXT              *rgpMsgCert;
    DWORD                       cMsgCrl;
    PCCRL_CONTEXT               *rgpMsgCrl;
    DWORD                       cAuthAttr;
    PCRYPT_ATTRIBUTE            rgAuthAttr;
    DWORD                       cUnauthAttr;
    PCRYPT_ATTRIBUTE            rgUnauthAttr;
    DWORD                       dwFlags;
    DWORD                       dwInnerContentType;






} CRYPT_SIGN_MESSAGE_PARA, *PCRYPT_SIGN_MESSAGE_PARA;





























typedef struct _CRYPT_VERIFY_MESSAGE_PARA {
    DWORD                               cbSize;
    DWORD                               dwMsgAndCertEncodingType;
    HCRYPTPROV_LEGACY                   hCryptProv;
    PFN_CRYPT_GET_SIGNER_CERTIFICATE    pfnGetSignerCertificate;
    void                                *pvGetArg;













} CRYPT_VERIFY_MESSAGE_PARA, *PCRYPT_VERIFY_MESSAGE_PARA;








































typedef struct _CRYPT_ENCRYPT_MESSAGE_PARA {
    DWORD                       cbSize;
    DWORD                       dwMsgEncodingType;
    HCRYPTPROV_LEGACY           hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER  ContentEncryptionAlgorithm;
    void                        *pvEncryptionAuxInfo;
    DWORD                       dwFlags;
    DWORD                       dwInnerContentType;
} CRYPT_ENCRYPT_MESSAGE_PARA, *PCRYPT_ENCRYPT_MESSAGE_PARA;

























typedef struct _CRYPT_DECRYPT_MESSAGE_PARA {
    DWORD                   cbSize;
    DWORD                   dwMsgAndCertEncodingType;
    DWORD                   cCertStore;
    HCERTSTORE              *rghCertStore;









} CRYPT_DECRYPT_MESSAGE_PARA, *PCRYPT_DECRYPT_MESSAGE_PARA;












typedef struct _CRYPT_HASH_MESSAGE_PARA {
    DWORD                       cbSize;
    DWORD                       dwMsgEncodingType;
    HCRYPTPROV_LEGACY           hCryptProv;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    void                        *pvHashAuxInfo;
} CRYPT_HASH_MESSAGE_PARA, *PCRYPT_HASH_MESSAGE_PARA;













typedef struct _CRYPT_KEY_SIGN_MESSAGE_PARA {
    DWORD                       cbSize;
    DWORD                       dwMsgAndCertEncodingType;

    
    union {
        HCRYPTPROV                  hCryptProv;
        NCRYPT_KEY_HANDLE           hNCryptKey;
    } ;

    
    DWORD                       dwKeySpec;

    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    void                        *pvHashAuxInfo;
    
    CRYPT_ALGORITHM_IDENTIFIER  PubKeyAlgorithm;
} CRYPT_KEY_SIGN_MESSAGE_PARA, *PCRYPT_KEY_SIGN_MESSAGE_PARA;












typedef struct _CRYPT_KEY_VERIFY_MESSAGE_PARA {
    DWORD                   cbSize;
    DWORD                   dwMsgEncodingType;
    HCRYPTPROV_LEGACY       hCryptProv;
} CRYPT_KEY_VERIFY_MESSAGE_PARA, *PCRYPT_KEY_VERIFY_MESSAGE_PARA;








__declspec(dllimport)
BOOL
__stdcall
CryptSignMessage(
      PCRYPT_SIGN_MESSAGE_PARA pSignPara,
      BOOL fDetachedSignature,
      DWORD cToBeSigned,
      const BYTE *rgpbToBeSigned[],
      DWORD rgcbToBeSigned[],
      BYTE *pbSignedBlob,
      DWORD *pcbSignedBlob
    );





































__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageSignature(
      PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
      DWORD dwSignerIndex,
      const BYTE *pbSignedBlob,
      DWORD cbSignedBlob,
      BYTE *pbDecoded,
      DWORD *pcbDecoded,
     PCCERT_CONTEXT *ppSignerCert
    );





__declspec(dllimport)
LONG
__stdcall
CryptGetMessageSignerCount(
      DWORD dwMsgEncodingType,
      const BYTE *pbSignedBlob,
      DWORD cbSignedBlob
    );





__declspec(dllimport)
HCERTSTORE
__stdcall
CryptGetMessageCertificates(
      DWORD dwMsgAndCertEncodingType,
      HCRYPTPROV_LEGACY hCryptProv,           
      DWORD dwFlags,                   
      const BYTE *pbSignedBlob,
      DWORD cbSignedBlob
    );






__declspec(dllimport)
BOOL
__stdcall
CryptVerifyDetachedMessageSignature(
      PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
      DWORD dwSignerIndex,
      const BYTE *pbDetachedSignBlob,
      DWORD cbDetachedSignBlob,
      DWORD cToBeSigned,
      const BYTE *rgpbToBeSigned[],
      DWORD rgcbToBeSigned[],
     PCCERT_CONTEXT *ppSignerCert
    );




__declspec(dllimport)
BOOL
__stdcall
CryptEncryptMessage(
      PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
      DWORD cRecipientCert,
      PCCERT_CONTEXT rgpRecipientCert[],
      const BYTE *pbToBeEncrypted,
      DWORD cbToBeEncrypted,
      BYTE *pbEncryptedBlob,
      DWORD *pcbEncryptedBlob
    );















__declspec(dllimport)
BOOL
__stdcall
CryptDecryptMessage(
      PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
      const BYTE *pbEncryptedBlob,
      DWORD cbEncryptedBlob,
      BYTE *pbDecrypted,
      DWORD *pcbDecrypted,
     PCCERT_CONTEXT *ppXchgCert
    );








__declspec(dllimport)
BOOL
__stdcall
CryptSignAndEncryptMessage(
      PCRYPT_SIGN_MESSAGE_PARA pSignPara,
      PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,
      DWORD cRecipientCert,
      PCCERT_CONTEXT rgpRecipientCert[],
      const BYTE *pbToBeSignedAndEncrypted,
      DWORD cbToBeSignedAndEncrypted,
      BYTE *pbSignedAndEncryptedBlob,
      DWORD *pcbSignedAndEncryptedBlob
    );




























__declspec(dllimport)
BOOL
__stdcall
CryptDecryptAndVerifyMessageSignature(
      PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
      PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
      DWORD dwSignerIndex,
      const BYTE *pbEncryptedBlob,
      DWORD cbEncryptedBlob,
      BYTE *pbDecrypted,
      DWORD *pcbDecrypted,
     PCCERT_CONTEXT *ppXchgCert,
     PCCERT_CONTEXT *ppSignerCert
    );

































__declspec(dllimport)
BOOL
__stdcall
CryptDecodeMessage(
      DWORD dwMsgTypeFlags,
      PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,
      PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,
      DWORD dwSignerIndex,
      const BYTE *pbEncodedBlob,
      DWORD cbEncodedBlob,
      DWORD dwPrevInnerContentType,
      DWORD *pdwMsgType,
      DWORD *pdwInnerContentType,
      BYTE *pbDecoded,
      DWORD *pcbDecoded,
     PCCERT_CONTEXT *ppXchgCert,
     PCCERT_CONTEXT *ppSignerCert
    );











__declspec(dllimport)
BOOL
__stdcall
CryptHashMessage(
      PCRYPT_HASH_MESSAGE_PARA pHashPara,
      BOOL fDetachedHash,
      DWORD cToBeHashed,
      const BYTE *rgpbToBeHashed[],
      DWORD rgcbToBeHashed[],
      BYTE *pbHashedBlob,
      DWORD *pcbHashedBlob,
      BYTE *pbComputedHash,
      DWORD *pcbComputedHash
    );







__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageHash(
      PCRYPT_HASH_MESSAGE_PARA pHashPara,
      BYTE *pbHashedBlob,
      DWORD cbHashedBlob,
      BYTE *pbToBeHashed,
      DWORD *pcbToBeHashed,
      BYTE *pbComputedHash,
      DWORD *pcbComputedHash
    );









__declspec(dllimport)
BOOL
__stdcall
CryptVerifyDetachedMessageHash(
      PCRYPT_HASH_MESSAGE_PARA pHashPara,
      BYTE *pbDetachedHashBlob,
      DWORD cbDetachedHashBlob,
      DWORD cToBeHashed,
      const BYTE *rgpbToBeHashed[],
      DWORD rgcbToBeHashed[],
      BYTE *pbComputedHash,
      DWORD *pcbComputedHash
    );







__declspec(dllimport)
BOOL
__stdcall
CryptSignMessageWithKey(
      PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara,
      const BYTE *pbToBeSigned,
      DWORD cbToBeSigned,
      BYTE *pbSignedBlob,
      DWORD *pcbSignedBlob
    );














__declspec(dllimport)
BOOL
__stdcall
CryptVerifyMessageSignatureWithKey(
      PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara,
      PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,
      const BYTE *pbSignedBlob,
      DWORD cbSignedBlob,
      BYTE *pbDecoded,
      DWORD *pcbDecoded
    );




























__declspec(dllimport)
HCERTSTORE
__stdcall
CertOpenSystemStoreA(
      HCRYPTPROV_LEGACY      hProv,
      LPCSTR            szSubsystemProtocol
    );
__declspec(dllimport)
HCERTSTORE
__stdcall
CertOpenSystemStoreW(
      HCRYPTPROV_LEGACY      hProv,
      LPCWSTR            szSubsystemProtocol
    );




#line 16400 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

__declspec(dllimport)
BOOL
__stdcall
CertAddEncodedCertificateToSystemStoreA(
      LPCSTR            szCertStoreName,
      const BYTE *    pbCertEncoded,
      DWORD           cbCertEncoded
    );
__declspec(dllimport)
BOOL
__stdcall
CertAddEncodedCertificateToSystemStoreW(
      LPCWSTR            szCertStoreName,
      const BYTE *    pbCertEncoded,
      DWORD           cbCertEncoded
    );




#line 16422 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"













typedef struct _CERT_CHAIN {
    DWORD                   cCerts;     
    PCERT_BLOB              certs;      
                                        
    CRYPT_KEY_PROV_INFO     keyLocatorInfo; 
} CERT_CHAIN, *PCERT_CHAIN;



HRESULT
__stdcall
FindCertsByIssuer(
      PCERT_CHAIN pCertChains,
      DWORD *pcbCertChains,
      DWORD *pcCertChains,        
      BYTE* pbEncodedIssuerName,   
      DWORD cbEncodedIssuerName,   
      LPCWSTR pwszPurpose,     
      DWORD dwKeySpec              
                                      
    );



































































































































__declspec(dllimport)
BOOL
__stdcall
CryptQueryObject(
      DWORD                    dwObjectType,
      const void               *pvObject,
      DWORD                    dwExpectedContentTypeFlags,
      DWORD                    dwExpectedFormatTypeFlags,
      DWORD                    dwFlags,
      DWORD               *pdwMsgAndCertEncodingType,
      DWORD               *pdwContentType,
      DWORD               *pdwFormatType,
      HCERTSTORE          *phCertStore,
      HCRYPTMSG           *phMsg,
     const void **ppvContext
    );







































































































































































__declspec(dllimport)
LPVOID
__stdcall
CryptMemAlloc (
      ULONG cbSize
    );

__declspec(dllimport)
LPVOID
__stdcall
CryptMemRealloc (
      LPVOID pv,
      ULONG cbSize
    );

__declspec(dllimport)
void
__stdcall
CryptMemFree (
      LPVOID pv
    );











typedef HANDLE HCRYPTASYNC, *PHCRYPTASYNC;

typedef void (__stdcall *PFN_CRYPT_ASYNC_PARAM_FREE_FUNC) (
      LPSTR pszParamOid,
      LPVOID pvParam
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCreateAsyncHandle (
      DWORD dwFlags,
      PHCRYPTASYNC phAsync
    );

__declspec(dllimport)
BOOL
__stdcall
CryptSetAsyncParam (
      HCRYPTASYNC hAsync,
      LPSTR pszParamOid,
      LPVOID pvParam,
     PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree
    );

__declspec(dllimport)
BOOL
__stdcall
CryptGetAsyncParam (
      HCRYPTASYNC hAsync,
      LPSTR pszParamOid,
     LPVOID* ppvParam,
       PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* ppfnFree
    );

__declspec(dllimport)
BOOL
__stdcall
CryptCloseAsyncHandle (
      HCRYPTASYNC hAsync
    );















typedef struct _CRYPT_BLOB_ARRAY {
    DWORD            cBlob;
    PCRYPT_DATA_BLOB rgBlob;
} CRYPT_BLOB_ARRAY, *PCRYPT_BLOB_ARRAY;

typedef struct _CRYPT_CREDENTIALS {
    DWORD  cbSize;
    LPCSTR pszCredentialsOid;
    LPVOID pvCredentials;
} CRYPT_CREDENTIALS, *PCRYPT_CREDENTIALS;








#line 16877 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

typedef struct _CRYPT_PASSWORD_CREDENTIALSA {
    DWORD   cbSize;
    LPSTR   pszUsername;
    LPSTR   pszPassword;
} CRYPT_PASSWORD_CREDENTIALSA, *PCRYPT_PASSWORD_CREDENTIALSA;
typedef struct _CRYPT_PASSWORD_CREDENTIALSW {
    DWORD   cbSize;
    LPWSTR  pszUsername;
    LPWSTR  pszPassword;
} CRYPT_PASSWORD_CREDENTIALSW, *PCRYPT_PASSWORD_CREDENTIALSW;




typedef CRYPT_PASSWORD_CREDENTIALSA CRYPT_PASSWORD_CREDENTIALS;
typedef PCRYPT_PASSWORD_CREDENTIALSA PCRYPT_PASSWORD_CREDENTIALS;
#line 16895 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"












typedef void (__stdcall *PFN_FREE_ENCODED_OBJECT_FUNC) (
      LPCSTR pszObjectOid,
      PCRYPT_BLOB_ARRAY pObject,
      LPVOID pvFreeContext
    );




























































































































































































typedef struct _CRYPTNET_URL_CACHE_PRE_FETCH_INFO {
    DWORD           cbSize;
    DWORD           dwObjectType;

    
    
    
    
    
    
    DWORD           dwError;
    DWORD           dwReserved;

    FILETIME        ThisUpdateTime;
    FILETIME        NextUpdateTime;
    FILETIME        PublishTime;    
} CRYPTNET_URL_CACHE_PRE_FETCH_INFO, *PCRYPTNET_URL_CACHE_PRE_FETCH_INFO;














typedef struct _CRYPTNET_URL_CACHE_FLUSH_INFO {
    DWORD           cbSize;
    
    
    
    
    DWORD           dwExemptSeconds;

    
    
    
    FILETIME        ExpireTime;
} CRYPTNET_URL_CACHE_FLUSH_INFO, *PCRYPTNET_URL_CACHE_FLUSH_INFO;








typedef struct _CRYPTNET_URL_CACHE_RESPONSE_INFO {
    DWORD           cbSize;
    WORD            wResponseType;
    WORD            wResponseFlags;

    
    FILETIME        LastModifiedTime;
    DWORD           dwMaxAge;
    LPCWSTR         pwszETag;
    DWORD           dwProxyId;
} CRYPTNET_URL_CACHE_RESPONSE_INFO, *PCRYPTNET_URL_CACHE_RESPONSE_INFO;
















typedef struct _CRYPT_RETRIEVE_AUX_INFO {
    DWORD                               cbSize;
    FILETIME                            *pLastSyncTime;

    
    DWORD                               dwMaxUrlRetrievalByteCount;

    
    
    
    
    PCRYPTNET_URL_CACHE_PRE_FETCH_INFO  pPreFetchInfo;

    
    
    
    
    PCRYPTNET_URL_CACHE_FLUSH_INFO      pFlushInfo;

    
    
    
    
    PCRYPTNET_URL_CACHE_RESPONSE_INFO   *ppResponseInfo;

    
    
    LPWSTR                              pwszCacheFileNamePrefix;

    
    
    
    
    LPFILETIME                          pftCacheResync;

    
    
    
    
    BOOL                                fProxyCacheRetrieval;

    
    
    
    
    
    
    
    
    DWORD                               dwHttpStatusCode;
} CRYPT_RETRIEVE_AUX_INFO, *PCRYPT_RETRIEVE_AUX_INFO;


__declspec(dllimport)
 
BOOL
__stdcall
CryptRetrieveObjectByUrlA (
      LPCSTR pszUrl,
      LPCSTR pszObjectOid,
      DWORD dwRetrievalFlags,
      DWORD dwTimeout,                     
     LPVOID* ppvObject,
      HCRYPTASYNC hAsyncRetrieve,
      PCRYPT_CREDENTIALS pCredentials,
      LPVOID pvVerify,
      PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
    );
__declspec(dllimport)
 
BOOL
__stdcall
CryptRetrieveObjectByUrlW (
      LPCWSTR pszUrl,
      LPCSTR pszObjectOid,
      DWORD dwRetrievalFlags,
      DWORD dwTimeout,                     
     LPVOID* ppvObject,
      HCRYPTASYNC hAsyncRetrieve,
      PCRYPT_CREDENTIALS pCredentials,
      LPVOID pvVerify,
      PCRYPT_RETRIEVE_AUX_INFO pAuxInfo
    );




#line 17267 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"













typedef BOOL (__stdcall *PFN_CRYPT_CANCEL_RETRIEVAL)(
      DWORD dwFlags,
      void  *pvArg
    );









__declspec(dllimport)
BOOL
__stdcall
CryptInstallCancelRetrieval(
     PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel,
      const void *pvArg,
      DWORD dwFlags,
      void *pvReserved
);


__declspec(dllimport)
BOOL
__stdcall
CryptUninstallCancelRetrieval(
          DWORD dwFlags,
          void *pvReserved
        );


__declspec(dllimport)
BOOL
__stdcall
CryptCancelAsyncRetrieval (
      HCRYPTASYNC hAsyncRetrieval
    );












typedef void (__stdcall *PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC) (
      LPVOID pvCompletion,
      DWORD dwCompletionCode,
      LPCSTR pszUrl,
      LPSTR pszObjectOid,
      LPVOID pvObject
    );

typedef struct _CRYPT_ASYNC_RETRIEVAL_COMPLETION {
     PFN_CRYPT_ASYNC_RETRIEVAL_COMPLETION_FUNC pfnCompletion;
      LPVOID pvCompletion;
} CRYPT_ASYNC_RETRIEVAL_COMPLETION, *PCRYPT_ASYNC_RETRIEVAL_COMPLETION;








typedef BOOL (__stdcall *PFN_CANCEL_ASYNC_RETRIEVAL_FUNC) (
      HCRYPTASYNC hAsyncRetrieve
    );










typedef struct _CRYPT_URL_ARRAY {
    DWORD   cUrl;
    LPWSTR* rgwszUrl;
} CRYPT_URL_ARRAY, *PCRYPT_URL_ARRAY;

typedef struct _CRYPT_URL_INFO {
    DWORD   cbSize;

    
    DWORD   dwSyncDeltaTime;

    
    
    
    DWORD   cGroup;
    DWORD   *rgcGroupEntry;
} CRYPT_URL_INFO, *PCRYPT_URL_INFO;

__declspec(dllimport)
BOOL
__stdcall
CryptGetObjectUrl (
      LPCSTR pszUrlOid,
      LPVOID pvPara,
      DWORD dwFlags,
      PCRYPT_URL_ARRAY pUrlArray,
      DWORD* pcbUrlArray,
      PCRYPT_URL_INFO pUrlInfo,
      DWORD* pcbUrlInfo,
      LPVOID pvReserved
    );



























































































































typedef struct _CERT_CRL_CONTEXT_PAIR {
    PCCERT_CONTEXT          pCertContext;
    PCCRL_CONTEXT           pCrlContext;
} CERT_CRL_CONTEXT_PAIR, *PCERT_CRL_CONTEXT_PAIR;
typedef const CERT_CRL_CONTEXT_PAIR *PCCERT_CRL_CONTEXT_PAIR;













typedef struct _CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO {
    DWORD                       cbSize;

    
    
    int                         iDeltaCrlIndicator;

    
    
    LPFILETIME                  pftCacheResync;

    
    LPFILETIME                  pLastSyncTime;

    
    
    
    LPFILETIME                  pMaxAgeTime;

    
    
    PCERT_REVOCATION_CHAIN_PARA pChainPara;

    
    
    PCRYPT_INTEGER_BLOB pDeltaCrlIndicator;

} CRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO,
    *PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO;

__declspec(dllimport)
 
BOOL
__stdcall
CryptGetTimeValidObject (
      LPCSTR pszTimeValidOid,
      LPVOID pvPara,
      PCCERT_CONTEXT pIssuer,
      LPFILETIME pftValidFor,
      DWORD dwFlags,
      DWORD dwTimeout,                         
     LPVOID* ppvObject,
      PCRYPT_CREDENTIALS pCredentials,
      PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO pExtraInfo
    );




































__declspec(dllimport)
BOOL
__stdcall
CryptFlushTimeValidObject (
       LPCSTR pszFlushTimeValidOid,
       LPVOID pvPara,
       PCCERT_CONTEXT pIssuer,
       DWORD dwFlags,
       LPVOID pvReserved
     );







































































__declspec(dllimport)
PCCERT_CONTEXT
__stdcall
CertCreateSelfSignCertificate(
       HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,
           PCERT_NAME_BLOB             pSubjectIssuerBlob,
           DWORD                       dwFlags,
       PCRYPT_KEY_PROV_INFO        pKeyProvInfo,
       PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,
       PSYSTEMTIME                 pStartTime,
       PSYSTEMTIME                 pEndTime,
       PCERT_EXTENSIONS            pExtensions
    );

































__declspec(dllimport)
BOOL
__stdcall
CryptGetKeyIdentifierProperty(
      const CRYPT_HASH_BLOB *pKeyIdentifier,
      DWORD dwPropId,
      DWORD dwFlags,
      LPCWSTR pwszComputerName,
      void *pvReserved,
      void *pvData,
      DWORD *pcbData
    );





























__declspec(dllimport)
BOOL
__stdcall
CryptSetKeyIdentifierProperty(
      const CRYPT_HASH_BLOB *pKeyIdentifier,
      DWORD dwPropId,
      DWORD dwFlags,
      LPCWSTR pwszComputerName,
      void *pvReserved,
      const void *pvData
    );
















typedef BOOL (__stdcall *PFN_CRYPT_ENUM_KEYID_PROP)(
      const CRYPT_HASH_BLOB *pKeyIdentifier,
      DWORD dwFlags,
      void *pvReserved,
      void *pvArg,
      DWORD cProp,
      DWORD *rgdwPropId,
      void **rgpvData,
      DWORD *rgcbData
    );















__declspec(dllimport)
BOOL
__stdcall
CryptEnumKeyIdentifierProperties(
      const CRYPT_HASH_BLOB *pKeyIdentifier,
      DWORD dwPropId,
      DWORD dwFlags,
      LPCWSTR pwszComputerName,
      void *pvReserved,
      void *pvArg,
     PFN_CRYPT_ENUM_KEYID_PROP pfnEnum
    );












__declspec(dllimport)
BOOL
__stdcall
CryptCreateKeyIdentifierFromCSP(
      DWORD dwCertEncodingType,
      LPCSTR pszPubKeyOID,
      const PUBLICKEYSTRUC *pPubKeyStruc,
      DWORD cbPubKeyStruc,
      DWORD dwFlags,
      void *pvReserved,
      BYTE *pbHash,
      DWORD *pcbHash
    );


















































































































































































































































































































































































































































































typedef HANDLE HCERTCHAINENGINE;

















































































typedef struct _CERT_CHAIN_ENGINE_CONFIG {

    DWORD       cbSize;
    HCERTSTORE  hRestrictedRoot;
    HCERTSTORE  hRestrictedTrust;
    HCERTSTORE  hRestrictedOther;
    DWORD       cAdditionalStore;
    HCERTSTORE* rghAdditionalStore;
    DWORD       dwFlags;
    DWORD       dwUrlRetrievalTimeout;      
    DWORD       MaximumCachedCertificates;
    DWORD       CycleDetectionModulus;


    HCERTSTORE  hExclusiveRoot;
    HCERTSTORE  hExclusiveTrustedPeople;
#line 18439 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


    DWORD       dwExclusiveFlags;
#line 18443 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

} CERT_CHAIN_ENGINE_CONFIG, *PCERT_CHAIN_ENGINE_CONFIG;









#line 18455 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

__declspec(dllimport)
 
BOOL
__stdcall
CertCreateCertificateChainEngine (
      PCERT_CHAIN_ENGINE_CONFIG pConfig,
      HCERTCHAINENGINE* phChainEngine
    );





__declspec(dllimport)
void
__stdcall
CertFreeCertificateChainEngine (
      HCERTCHAINENGINE hChainEngine
    );






__declspec(dllimport)
BOOL
__stdcall
CertResyncCertificateChainEngine (
      HCERTCHAINENGINE hChainEngine
    );















typedef struct _CERT_TRUST_STATUS {

    DWORD dwErrorStatus;
    DWORD dwInfoStatus;

} CERT_TRUST_STATUS, *PCERT_TRUST_STATUS;






































































#line 18579 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"























typedef struct _CERT_REVOCATION_INFO {

    DWORD                       cbSize;
    DWORD                       dwRevocationResult;
    LPCSTR                      pszRevocationOid;
    LPVOID                      pvOidSpecificInfo;

    
    
    BOOL                        fHasFreshnessTime;
    DWORD                       dwFreshnessTime;    

    
    PCERT_REVOCATION_CRL_INFO   pCrlInfo;

} CERT_REVOCATION_INFO, *PCERT_REVOCATION_INFO;





typedef struct _CERT_TRUST_LIST_INFO {

    DWORD         cbSize;
    PCTL_ENTRY    pCtlEntry;
    PCCTL_CONTEXT pCtlContext;

} CERT_TRUST_LIST_INFO, *PCERT_TRUST_LIST_INFO;





typedef struct _CERT_CHAIN_ELEMENT {

    DWORD                 cbSize;
    PCCERT_CONTEXT        pCertContext;
    CERT_TRUST_STATUS     TrustStatus;
    PCERT_REVOCATION_INFO pRevocationInfo;

    PCERT_ENHKEY_USAGE    pIssuanceUsage;       
    PCERT_ENHKEY_USAGE    pApplicationUsage;    

    LPCWSTR               pwszExtendedErrorInfo;    
} CERT_CHAIN_ELEMENT, *PCERT_CHAIN_ELEMENT;
typedef const CERT_CHAIN_ELEMENT* PCCERT_CHAIN_ELEMENT;










typedef struct _CERT_SIMPLE_CHAIN {

    DWORD                 cbSize;
    CERT_TRUST_STATUS     TrustStatus;
    DWORD                 cElement;
    PCERT_CHAIN_ELEMENT*  rgpElement;
    PCERT_TRUST_LIST_INFO pTrustListInfo;

    
    
    
    
    
    
    BOOL                   fHasRevocationFreshnessTime;
    DWORD                  dwRevocationFreshnessTime;    

} CERT_SIMPLE_CHAIN, *PCERT_SIMPLE_CHAIN;
typedef const CERT_SIMPLE_CHAIN* PCCERT_SIMPLE_CHAIN;











typedef struct _CERT_CHAIN_CONTEXT CERT_CHAIN_CONTEXT, *PCERT_CHAIN_CONTEXT;
typedef const CERT_CHAIN_CONTEXT *PCCERT_CHAIN_CONTEXT;

struct _CERT_CHAIN_CONTEXT {
    DWORD                   cbSize;
    CERT_TRUST_STATUS       TrustStatus;
    DWORD                   cChain;
    PCERT_SIMPLE_CHAIN*     rgpChain;

    
    
    DWORD                   cLowerQualityChainContext;
    PCCERT_CHAIN_CONTEXT*   rgpLowerQualityChainContext;

    
    
    
    
    
    
    BOOL                    fHasRevocationFreshnessTime;
    DWORD                   dwRevocationFreshnessTime;    

    
    DWORD                   dwCreateFlags;

    
    GUID                    ChainId;
};












typedef struct _CERT_USAGE_MATCH {

    DWORD             dwType;
    CERT_ENHKEY_USAGE Usage;

} CERT_USAGE_MATCH, *PCERT_USAGE_MATCH;

typedef struct _CTL_USAGE_MATCH {

    DWORD     dwType;
    CTL_USAGE Usage;

} CTL_USAGE_MATCH, *PCTL_USAGE_MATCH;

typedef struct _CERT_CHAIN_PARA {

    DWORD            cbSize;
    CERT_USAGE_MATCH RequestedUsage;
































} CERT_CHAIN_PARA, *PCERT_CHAIN_PARA;






































































































__declspec(dllimport)
 
BOOL
__stdcall
CertGetCertificateChain (
      HCERTCHAINENGINE hChainEngine,
      PCCERT_CONTEXT pCertContext,
      LPFILETIME pTime,
      HCERTSTORE hAdditionalStore,
      PCERT_CHAIN_PARA pChainPara,
      DWORD dwFlags,
      LPVOID pvReserved,
      PCCERT_CHAIN_CONTEXT* ppChainContext
    );





__declspec(dllimport)
void
__stdcall
CertFreeCertificateChain (
      PCCERT_CHAIN_CONTEXT pChainContext
    );





__declspec(dllimport)
PCCERT_CHAIN_CONTEXT
__stdcall
CertDuplicateCertificateChain (
      PCCERT_CHAIN_CONTEXT pChainContext
    );







struct _CERT_REVOCATION_CHAIN_PARA {
    DWORD                       cbSize;
    HCERTCHAINENGINE            hChainEngine;
    HCERTSTORE                  hAdditionalStore;
    DWORD                       dwChainFlags;
    DWORD                       dwUrlRetrievalTimeout;     
    LPFILETIME                  pftCurrentTime;
    LPFILETIME                  pftCacheResync;

    
    
    DWORD                       cbMaxUrlRetrievalByteCount;
};



















typedef struct _CRL_REVOCATION_INFO {

    PCRL_ENTRY           pCrlEntry;
    PCCRL_CONTEXT        pCrlContext;
    PCCERT_CHAIN_CONTEXT pCrlIssuerChain;

} CRL_REVOCATION_INFO, *PCRL_REVOCATION_INFO;






















__declspec(dllimport)
PCCERT_CHAIN_CONTEXT
__stdcall
CertFindChainInStore(
      HCERTSTORE hCertStore,
      DWORD dwCertEncodingType,
      DWORD dwFindFlags,
      DWORD dwFindType,
      const void *pvFindPara,
      PCCERT_CHAIN_CONTEXT pPrevChainContext
    );
















































typedef BOOL (__stdcall *PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK)(
      PCCERT_CONTEXT pCert,
      void *pvFindArg
    );

typedef struct _CERT_CHAIN_FIND_BY_ISSUER_PARA {
    DWORD                                   cbSize;

    
    LPCSTR                                  pszUsageIdentifier;

    
    DWORD                                   dwKeySpec;

    
    
    
    
    
    DWORD                                   dwAcquirePrivateKeyFlags;

    
    
    DWORD                                   cIssuer;
    CERT_NAME_BLOB                          *rgIssuer;

    
    
    
    PFN_CERT_CHAIN_FIND_BY_ISSUER_CALLBACK pfnFindCallback;
    void                                    *pvFindArg;





















} CERT_CHAIN_FIND_ISSUER_PARA, *PCERT_CHAIN_FIND_ISSUER_PARA,
    CERT_CHAIN_FIND_BY_ISSUER_PARA, *PCERT_CHAIN_FIND_BY_ISSUER_PARA;






































typedef struct _CERT_CHAIN_POLICY_PARA {
    DWORD                   cbSize;
    DWORD                   dwFlags;
    void                    *pvExtraPolicyPara;     
} CERT_CHAIN_POLICY_PARA, *PCERT_CHAIN_POLICY_PARA;






typedef struct _CERT_CHAIN_POLICY_STATUS {
    DWORD                   cbSize;
    DWORD                   dwError;
    LONG                    lChainIndex;
    LONG                    lElementIndex;
    void                    *pvExtraPolicyStatus;   
} CERT_CHAIN_POLICY_STATUS, *PCERT_CHAIN_POLICY_STATUS;




























































__declspec(dllimport)
BOOL
__stdcall
CertVerifyCertificateChainPolicy(
      LPCSTR pszPolicyOID,
      PCCERT_CHAIN_CONTEXT pChainContext,
      PCERT_CHAIN_POLICY_PARA pPolicyPara,
      PCERT_CHAIN_POLICY_STATUS pPolicyStatus
    );








































typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD               cbSize;
    DWORD               dwRegPolicySettings;
    PCMSG_SIGNER_INFO   pSignerInfo;                
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_PARA;

typedef struct _AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD               cbSize;
    BOOL                fCommercial;        
} AUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS,
    *PAUTHENTICODE_EXTRA_CERT_CHAIN_POLICY_STATUS;













typedef struct _AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD               cbSize;
    DWORD               dwRegPolicySettings;
    BOOL                fCommercial;
} AUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PAUTHENTICODE_TS_EXTRA_CERT_CHAIN_POLICY_PARA;












typedef struct _HTTPSPolicyCallbackData
{
    union {
        DWORD           cbStruct;       
        DWORD           cbSize;         
    } ;

    DWORD           dwAuthType;



    DWORD           fdwChecks;

    WCHAR           *pwszServerName; 

} HTTPSPolicyCallbackData, *PHTTPSPolicyCallbackData,
    SSL_EXTRA_CERT_CHAIN_POLICY_PARA, *PSSL_EXTRA_CERT_CHAIN_POLICY_PARA;




































































































typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_PARA {
    DWORD               cbSize;
    DWORD               dwRootProgramQualifierFlags;
} EV_EXTRA_CERT_CHAIN_POLICY_PARA,
    *PEV_EXTRA_CERT_CHAIN_POLICY_PARA;

typedef struct _EV_EXTRA_CERT_CHAIN_POLICY_STATUS {
    DWORD   cbSize;
    DWORD   dwQualifiers;
    DWORD   dwIssuanceUsageIndex;
} EV_EXTRA_CERT_CHAIN_POLICY_STATUS, *PEV_EXTRA_CERT_CHAIN_POLICY_STATUS;












__declspec(dllimport)
BOOL
__stdcall
CryptStringToBinaryA(
      LPCSTR pszString,
      DWORD cchString,
      DWORD dwFlags,
      BYTE *pbBinary,
      DWORD  *pcbBinary,
      DWORD *pdwSkip,
      DWORD *pdwFlags
    );









__declspec(dllimport)
BOOL
__stdcall
CryptStringToBinaryW(
      LPCWSTR pszString,
      DWORD cchString,
      DWORD dwFlags,
      BYTE *pbBinary,
      DWORD  *pcbBinary,
      DWORD *pdwSkip,
      DWORD *pdwFlags
    );




#line 19485 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"







 
__declspec(dllimport)
BOOL
__stdcall
CryptBinaryToStringA(
      const BYTE *pbBinary,
      DWORD cbBinary,
      DWORD dwFlags,
      LPSTR pszString,
      DWORD *pcchString
    );






 
__declspec(dllimport)
BOOL
__stdcall
CryptBinaryToStringW(
      const BYTE *pbBinary,
      DWORD cbBinary,
      DWORD dwFlags,
      LPWSTR pszString,
      DWORD *pcchString
    );




#line 19525 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"















































































typedef struct _CRYPT_PKCS12_PBE_PARAMS
{
    int                 iIterations;        
    ULONG               cbSalt;             
}
CRYPT_PKCS12_PBE_PARAMS;



























__declspec(dllimport)
HCERTSTORE
__stdcall
PFXImportCertStore(
      CRYPT_DATA_BLOB* pPFX,
      LPCWSTR szPassword,
      DWORD   dwFlags);



























__declspec(dllimport)
BOOL
__stdcall
PFXIsPFXBlob(
      CRYPT_DATA_BLOB* pPFX);













__declspec(dllimport)
BOOL
__stdcall
PFXVerifyPassword(
      CRYPT_DATA_BLOB* pPFX,
      LPCWSTR szPassword,
      DWORD dwFlags);









































__declspec(dllimport)
BOOL
__stdcall
PFXExportCertStoreEx(
      HCERTSTORE hStore,
      CRYPT_DATA_BLOB* pPFX,
      LPCWSTR szPassword,
      void* pvPara,
      DWORD dwFlags);




















__declspec(dllimport)
BOOL
__stdcall
PFXExportCertStore(
      HCERTSTORE hStore,
      CRYPT_DATA_BLOB* pPFX,
      LPCWSTR szPassword,
      DWORD dwFlags);















typedef void *HCERT_SERVER_OCSP_RESPONSE;



























__declspec(dllimport)
HCERT_SERVER_OCSP_RESPONSE
__stdcall
CertOpenServerOcspResponse(
      PCCERT_CHAIN_CONTEXT pChainContext,
      DWORD dwFlags,
      LPVOID pvReserved
    );










__declspec(dllimport)
void
__stdcall
CertAddRefServerOcspResponse(
      HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse
    );







__declspec(dllimport)
void
__stdcall
CertCloseServerOcspResponse(
      HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,
      DWORD dwFlags
    );





typedef struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT
    CERT_SERVER_OCSP_RESPONSE_CONTEXT,
    *PCERT_SERVER_OCSP_RESPONSE_CONTEXT;
typedef const CERT_SERVER_OCSP_RESPONSE_CONTEXT
    *PCCERT_SERVER_OCSP_RESPONSE_CONTEXT;

struct _CERT_SERVER_OCSP_RESPONSE_CONTEXT {
    DWORD       cbSize;
    BYTE        *pbEncodedOcspResponse;
    DWORD       cbEncodedOcspResponse;
};













__declspec(dllimport)
PCCERT_SERVER_OCSP_RESPONSE_CONTEXT
__stdcall
CertGetServerOcspResponseContext(
      HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,
      DWORD dwFlags,
      LPVOID pvReserved
    );






__declspec(dllimport)
void
__stdcall
CertAddRefServerOcspResponseContext(
      PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
    );





__declspec(dllimport)
void
__stdcall
CertFreeServerOcspResponseContext(
      PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext
    );

#line 19917 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

















































__declspec(dllimport)
 
BOOL
__stdcall
CertRetrieveLogoOrBiometricInfo(
      PCCERT_CONTEXT pCertContext,
      LPCSTR lpszLogoOrBiometricType,
      DWORD dwRetrievalFlags,
      DWORD dwTimeout,                             
      DWORD dwFlags,
      void *pvReserved,
     BYTE **ppbData,      
      DWORD *pcbData,
     LPWSTR *ppwszMimeType         
    );






















typedef struct _CERT_SELECT_CHAIN_PARA
{
    HCERTCHAINENGINE    hChainEngine;
    PFILETIME           pTime;
    HCERTSTORE          hAdditionalStore;
    PCERT_CHAIN_PARA    pChainPara;
    DWORD               dwFlags;
}
CERT_SELECT_CHAIN_PARA, *PCERT_SELECT_CHAIN_PARA;
typedef const CERT_SELECT_CHAIN_PARA*    PCCERT_SELECT_CHAIN_PARA;



typedef struct _CERT_SELECT_CRITERIA
{
    DWORD                           dwType;
    DWORD                           cPara;
      void**    ppPara;
}
CERT_SELECT_CRITERIA, *PCERT_SELECT_CRITERIA;
typedef const CERT_SELECT_CRITERIA*     PCCERT_SELECT_CRITERIA;




































__declspec(dllimport)
 
BOOL
__stdcall
CertSelectCertificateChains(
      LPCGUID pSelectionContext,
      DWORD dwFlags,
      PCCERT_SELECT_CHAIN_PARA pChainParameters,
      DWORD cCriteria,
      PCCERT_SELECT_CRITERIA rgpCriteria,
      HCERTSTORE hStore,
      PDWORD pcSelection,
     PCCERT_CHAIN_CONTEXT** pprgpSelection
    );






__declspec(dllimport)
void
__stdcall
CertFreeCertificateChainList(
      PCCERT_CHAIN_CONTEXT* prgpSelection
    );

#line 20088 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"













typedef struct _CRYPT_TIMESTAMP_REQUEST
{
    DWORD                       dwVersion;              
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    CRYPT_DER_BLOB              HashedMessage;
    LPSTR                       pszTSAPolicyId;         
    CRYPT_INTEGER_BLOB          Nonce;                  
    BOOL                        fCertReq;               
    DWORD                       cExtension;
     
    PCERT_EXTENSION             rgExtension;            
} CRYPT_TIMESTAMP_REQUEST, *PCRYPT_TIMESTAMP_REQUEST;





typedef struct _CRYPT_TIMESTAMP_RESPONSE
{
    DWORD                       dwStatus;
    DWORD                       cFreeText;              
     
    LPWSTR*                     rgFreeText;
    CRYPT_BIT_BLOB              FailureInfo;            
    CRYPT_DER_BLOB              ContentInfo;            
} CRYPT_TIMESTAMP_RESPONSE, *PCRYPT_TIMESTAMP_RESPONSE;





















typedef struct _CRYPT_TIMESTAMP_ACCURACY
{
    DWORD                       dwSeconds;                  
    DWORD                       dwMillis;                   
    DWORD                       dwMicros;                   
} CRYPT_TIMESTAMP_ACCURACY, *PCRYPT_TIMESTAMP_ACCURACY;





typedef struct _CRYPT_TIMESTAMP_INFO
{
    DWORD                       dwVersion;                  
    LPSTR                       pszTSAPolicyId;
    CRYPT_ALGORITHM_IDENTIFIER  HashAlgorithm;
    CRYPT_DER_BLOB              HashedMessage;
    CRYPT_INTEGER_BLOB          SerialNumber;
    FILETIME                    ftTime;
    PCRYPT_TIMESTAMP_ACCURACY   pvAccuracy;                 
    BOOL                        fOrdering;                  
    CRYPT_DER_BLOB              Nonce;                      
    CRYPT_DER_BLOB              Tsa;                        
    DWORD                       cExtension;
     
    PCERT_EXTENSION             rgExtension;                
} CRYPT_TIMESTAMP_INFO, *PCRYPT_TIMESTAMP_INFO;





typedef struct _CRYPT_TIMESTAMP_CONTEXT
{
    DWORD                       cbEncoded;
     
    BYTE                        *pbEncoded;
    PCRYPT_TIMESTAMP_INFO       pTimeStamp;
} CRYPT_TIMESTAMP_CONTEXT, *PCRYPT_TIMESTAMP_CONTEXT;




















typedef struct _CRYPT_TIMESTAMP_PARA
{
    LPCSTR                      pszTSAPolicyId;             
    BOOL                        fRequestCerts;              
    CRYPT_INTEGER_BLOB          Nonce;                      
    DWORD                       cExtension;
     
    PCERT_EXTENSION             rgExtension;                
} CRYPT_TIMESTAMP_PARA, *PCRYPT_TIMESTAMP_PARA;













































BOOL
__stdcall
CryptRetrieveTimeStamp(
                             LPCWSTR     wszUrl,
                                DWORD       dwRetrievalFlags,
                                DWORD       dwTimeout,
                             LPCSTR      pszHashId,
                         const CRYPT_TIMESTAMP_PARA *pPara,
     
                                const BYTE  *pbData,
                                DWORD       cbData,
                     PCRYPT_TIMESTAMP_CONTEXT *ppTsContext,
                 PCCERT_CONTEXT *ppTsSigner,
                        HCERTSTORE  *phStore
    );















































 
BOOL
__stdcall
CryptVerifyTimeStampSignature (
     
                                const BYTE  *pbTSContentInfo,
                                DWORD       cbTSContentInfo,
     
                                const BYTE  *pbData,
                                DWORD 	    cbData,
                         HCERTSTORE  hAdditionalStore,
                     PCRYPT_TIMESTAMP_CONTEXT   *ppTsContext,
                 PCCERT_CONTEXT *ppTsSigner,
                        HCERTSTORE  *phStore
    );

#line 20340 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"





















































 
typedef BOOL (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH)(
      LPVOID pContext,
      PCERT_NAME_BLOB *rgIdentifierOrNameList,
      DWORD dwIdentifierOrNameListCount); 






























 
typedef BOOL (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET)(
      LPVOID pPluginContext,
      PCRYPT_DATA_BLOB pIdentifier,
      DWORD dwNameType,
      PCERT_NAME_BLOB pNameBlob,
     PBYTE *ppbContent,
      DWORD *pcbContent,
     PCWSTR *ppwszPassword,
     PCRYPT_DATA_BLOB *ppIdentifier);

















typedef void (__stdcall * PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE)(
      DWORD dwReason,
      LPVOID pPluginContext);














typedef void (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD)(
      LPVOID pPluginContext,
      PCWSTR pwszPassword
);













typedef void (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE)(
      LPVOID pPluginContext,
       PBYTE pbData
);

















typedef void (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER)(
      LPVOID pPluginContext,
      PCRYPT_DATA_BLOB pIdentifier);


typedef struct _CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE
{
      DWORD cbSize;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_GET pfnGet;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_RELEASE pfnRelease;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_PASSWORD pfnFreePassword;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE pfnFree;
    PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FREE_IDENTIFIER pfnFreeIdentifier;
} CRYPT_OBJECT_LOCATOR_PROVIDER_TABLE, *PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE;




























 
typedef BOOL (__stdcall *PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_INITIALIZE)(
      PFN_CRYPT_OBJECT_LOCATOR_PROVIDER_FLUSH pfnFlush,
      LPVOID pContext,
      DWORD *pdwExpectedObjectCount,
     PCRYPT_OBJECT_LOCATOR_PROVIDER_TABLE *ppFuncTable,
     void **ppPluginContext);


#line 20562 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

#line 20564 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#line 20567 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"


}       
#line 20571 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"





#pragma warning(pop)


#line 20580 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

#line 20582 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#line 20583 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

#pragma region Desktop Family










#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dpapi.h"















#pragma once
#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dpapi.h"





#line 24 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dpapi.h"









#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dpapi.h"


extern "C" {
#line 38 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dpapi.h"

#pragma region Desktop Family













































typedef struct  _CRYPTPROTECT_PROMPTSTRUCT
{
    DWORD cbSize;
    DWORD dwPromptFlags;
    HWND  hwndApp;
    LPCWSTR szPrompt;
} CRYPTPROTECT_PROMPTSTRUCT, *PCRYPTPROTECT_PROMPTSTRUCT;











































































BOOL
__stdcall
CryptProtectData(
                 DATA_BLOB*      pDataIn,
             LPCWSTR         szDataDescr,
             DATA_BLOB*      pOptionalEntropy,
           PVOID           pvReserved,
             CRYPTPROTECT_PROMPTSTRUCT*  pPromptStruct,
                 DWORD           dwFlags,
                DATA_BLOB*      pDataOut            
    );


BOOL
__stdcall
CryptUnprotectData(
                 DATA_BLOB*      pDataIn,             
     LPWSTR*     ppszDataDescr,       
             DATA_BLOB*      pOptionalEntropy,
           PVOID           pvReserved,
             CRYPTPROTECT_PROMPTSTRUCT*  pPromptStruct,
                 DWORD           dwFlags,
                DATA_BLOB*      pDataOut
    );


BOOL
__stdcall
CryptProtectDataNoUI(
                 DATA_BLOB*      pDataIn,
             LPCWSTR         szDataDescr,
             DATA_BLOB*      pOptionalEntropy,
           PVOID           pvReserved,
             CRYPTPROTECT_PROMPTSTRUCT*  pPromptStruct,
                 DWORD           dwFlags,
     
                    const BYTE      *pbOptionalPassword,
                    DWORD           cbOptionalPassword,
                DATA_BLOB*      pDataOut            
    );

BOOL
__stdcall
CryptUnprotectDataNoUI(
                 DATA_BLOB*      pDataIn,             
     LPWSTR*     ppszDataDescr,       
             DATA_BLOB*      pOptionalEntropy,
           PVOID           pvReserved,
             CRYPTPROTECT_PROMPTSTRUCT*  pPromptStruct,
                 DWORD           dwFlags,
     
                    const BYTE      *pbOptionalPassword,
                    DWORD           cbOptionalPassword,
                DATA_BLOB*      pDataOut
    );
#line 223 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dpapi.h"




BOOL
__stdcall
CryptUpdateProtectedState(
             PSID            pOldSid,
             LPCWSTR         pwszOldPassword,
                 DWORD           dwFlags,
            DWORD           *pdwSuccessCount,
            DWORD           *pdwFailureCount);

#line 237 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dpapi.h"



































BOOL
__stdcall
CryptProtectMemory(
              LPVOID          pDataIn,             
                 DWORD           cbDataIn,            
                 DWORD           dwFlags
    );


BOOL
__stdcall
CryptUnprotectMemory(
              LPVOID          pDataIn,             
                 DWORD           cbDataIn,            
                 DWORD           dwFlags
    );

#line 290 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dpapi.h"
#pragma endregion


} 
#line 295 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dpapi.h"

#line 297 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\dpapi.h"
#line 20596 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

#line 20598 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

#line 20600 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"
#pragma endregion

#line 20603 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\wincrypt.h"

#line 200 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"




















#pragma once
#line 23 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"



extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"

#pragma region Desktop Family




















#line 51 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"






typedef struct _CERTIFICATE_BLOB {

    DWORD   dwCertEncodingType;





    DWORD   cbData;




    PBYTE    pbData;

} EFS_CERTIFICATE_BLOB, *PEFS_CERTIFICATE_BLOB;





typedef struct _EFS_HASH_BLOB {




    DWORD   cbData;




    PBYTE    pbData;

} EFS_HASH_BLOB, *PEFS_HASH_BLOB;









typedef struct _EFS_RPC_BLOB {




    DWORD   cbData;




    PBYTE    pbData;

} EFS_RPC_BLOB, *PEFS_RPC_BLOB;

#line 115 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"




typedef struct _EFS_PIN_BLOB {
    



    DWORD   cbPadding; 




    DWORD   cbData;




    PBYTE    pbData;

} EFS_PIN_BLOB, *PEFS_PIN_BLOB;

#line 139 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"





typedef struct _EFS_KEY_INFO {

    DWORD   dwVersion;
    ULONG   Entropy;
    ALG_ID  Algorithm;
    ULONG   KeyLength;
    
} EFS_KEY_INFO, *PEFS_KEY_INFO;

#line 154 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"




typedef struct _EFS_COMPATIBILITY_INFO {

    DWORD EfsVersion;
    
} EFS_COMPATIBILITY_INFO, *PEFS_COMPATIBILITY_INFO;

#line 165 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"





typedef struct _EFS_DECRYPTION_STATUS_INFO { 

    DWORD   dwDecryptionError;
    DWORD   dwHashOffset;
    DWORD   cbHash;

} EFS_DECRYPTION_STATUS_INFO, *PEFS_DECRYPTION_STATUS_INFO;

typedef struct _EFS_ENCRYPTION_STATUS_INFO { 

    BOOL    bHasCurrentKey;
    DWORD   dwEncryptionError;

} EFS_ENCRYPTION_STATUS_INFO, *PEFS_ENCRYPTION_STATUS_INFO;

#line 186 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"





typedef struct _ENCRYPTION_CERTIFICATE {
    DWORD cbTotalLength;
    SID * pUserSid;
    PEFS_CERTIFICATE_BLOB pCertBlob;
} ENCRYPTION_CERTIFICATE, *PENCRYPTION_CERTIFICATE;




typedef struct _ENCRYPTION_CERTIFICATE_HASH {
    DWORD cbTotalLength;
    SID * pUserSid;
    PEFS_HASH_BLOB  pHash;




    LPWSTR lpDisplayInformation;

} ENCRYPTION_CERTIFICATE_HASH, *PENCRYPTION_CERTIFICATE_HASH;

typedef struct _ENCRYPTION_CERTIFICATE_HASH_LIST {



    DWORD nCert_Hash;



     PENCRYPTION_CERTIFICATE_HASH * pUsers;
} ENCRYPTION_CERTIFICATE_HASH_LIST, *PENCRYPTION_CERTIFICATE_HASH_LIST;



typedef struct _ENCRYPTION_CERTIFICATE_LIST {    



    DWORD nUsers;



     PENCRYPTION_CERTIFICATE * pUsers;
} ENCRYPTION_CERTIFICATE_LIST, *PENCRYPTION_CERTIFICATE_LIST;









typedef struct _ENCRYPTED_FILE_METADATA_SIGNATURE { 

	DWORD								dwEfsAccessType;	
	PENCRYPTION_CERTIFICATE_HASH_LIST	pCertificatesAdded;
    PENCRYPTION_CERTIFICATE				pEncryptionCertificate;
    PEFS_RPC_BLOB						pEfsStreamSignature;

} ENCRYPTED_FILE_METADATA_SIGNATURE, *PENCRYPTED_FILE_METADATA_SIGNATURE;

#line 254 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"










__declspec(dllimport)
DWORD
__stdcall
QueryUsersOnEncryptedFile(
                 LPCWSTR                                 lpFileName,
         PENCRYPTION_CERTIFICATE_HASH_LIST      *pUsers
    );


__declspec(dllimport)
DWORD
__stdcall
QueryRecoveryAgentsOnEncryptedFile(
                 LPCWSTR                                 lpFileName,
         PENCRYPTION_CERTIFICATE_HASH_LIST      *pRecoveryAgents
    );


__declspec(dllimport)
DWORD
__stdcall
RemoveUsersFromEncryptedFile(
         LPCWSTR                             lpFileName,
         PENCRYPTION_CERTIFICATE_HASH_LIST   pHashes
    );

__declspec(dllimport)
DWORD
__stdcall
AddUsersToEncryptedFile(
         LPCWSTR                         lpFileName,
         PENCRYPTION_CERTIFICATE_LIST    pEncryptionCertificates
    );







__declspec(dllimport)
DWORD
__stdcall
SetUserFileEncryptionKey(
         PENCRYPTION_CERTIFICATE     pEncryptionCertificate
    );










#line 321 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"




__declspec(dllimport)
DWORD
__stdcall
SetUserFileEncryptionKeyEx(
             PENCRYPTION_CERTIFICATE     pEncryptionCertificate,
                    DWORD                       dwCapabilities, 
                    DWORD                       dwFlags,
           LPVOID                      pvReserved
    );

#line 336 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"

__declspec(dllimport)
void
__stdcall
FreeEncryptionCertificateHashList(
         PENCRYPTION_CERTIFICATE_HASH_LIST       pUsers
    );

__declspec(dllimport)
BOOL
__stdcall
EncryptionDisable(
      LPCWSTR DirPath,
         BOOL        Disable
    );







__declspec(dllimport)
DWORD
__stdcall
DuplicateEncryptionInfoFile(
             LPCWSTR SrcFileName,
             LPCWSTR DstFileName, 
                DWORD                           dwCreationDistribution, 
                DWORD                           dwAttributes, 
         const LPSECURITY_ATTRIBUTES     lpSecurityAttributes
     );

















#line 386 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"




__declspec(deprecated)
__declspec(dllimport)
DWORD
__stdcall
GetEncryptedFileMetadata(
                                     LPCWSTR     lpFileName,
                                    PDWORD      pcbMetadata, 
        PBYTE      *ppbMetadata
    );

__declspec(deprecated)
__declspec(dllimport)
DWORD
__stdcall
SetEncryptedFileMetadata(
             LPCWSTR                             lpFileName,
         PBYTE                               pbOldMetadata,
             PBYTE                               pbNewMetadata,
             PENCRYPTION_CERTIFICATE_HASH        pOwnerHash,
                DWORD                               dwOperation,
         PENCRYPTION_CERTIFICATE_HASH_LIST   pCertificatesAdded
    ); 
    
__declspec(deprecated)
__declspec(dllimport)
void
__stdcall
FreeEncryptedFileMetadata(
         PBYTE   pbMetadata
    ); 

#line 422 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"


#line 425 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"
#pragma endregion


}       
#line 430 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"

#line 432 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"

#line 434 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winefs.h"
#line 201 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"


























#pragma once
#line 29 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"





 


#pragma warning( disable: 4049 )  





#line 16 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"




#line 21 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"


#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"




















#line 22 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"






#pragma once
#line 30 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"


    

#line 35 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#line 36 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"
#line 40 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsip.h"





















#pragma once
#line 24 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsip.h"


extern "C" {
#line 28 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsip.h"

#pragma region Desktop Family


typedef struct
{
   RPC_NS_HANDLE        LookupContext;
   RPC_BINDING_HANDLE   ProposedHandle;
   RPC_BINDING_VECTOR * Bindings;

} RPC_IMPORT_CONTEXT_P, * PRPC_IMPORT_CONTEXT_P;




__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsGetBuffer(
     PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcNsSendReceive(
     PRPC_MESSAGE Message,
     RPC_BINDING_HANDLE  * Handle
    );

__declspec(dllimport)

void
__stdcall
I_RpcNsRaiseException(
     PRPC_MESSAGE Message,
     RPC_STATUS Status
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_RpcReBindBuffer(
     PRPC_MESSAGE Message
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsServerBindSearch(
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
I_NsClientBindSearch(
    void
    );

__declspec(dllimport)
void
__stdcall
I_NsClientBindDone(
    void
    );

#line 96 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsip.h"
#pragma endregion


}
#line 101 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsip.h"

#line 103 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\rpcnsip.h"
#line 43 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#line 44 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcsal.h"







































































































































#pragma once





#line 143 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcsal.h"


    

#line 148 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcsal.h"
#line 149 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcsal.h"



extern "C" {
#line 154 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcsal.h"















































































































































































#line 330 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcsal.h"






































































































































































#line 497 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcsal.h"


}
#line 501 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\rpcsal.h"


#line 46 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"


extern "C" {
#line 50 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"

#pragma region Application Family





























































#line 114 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"


#line 117 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"










#line 128 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"





#line 134 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"





#line 140 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"





#line 146 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"





#line 152 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"





#line 158 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"






typedef unsigned char byte;
typedef byte cs_byte;
typedef unsigned char boolean;










#line 178 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"

#line 180 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"




















#line 201 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#line 202 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"







 
   
void  * __stdcall MIDL_user_allocate(size_t size);
void        __stdcall MIDL_user_free(     void  * );


   
void * __stdcall I_RpcDefaultAllocate(
         handle_t bh, size_t size, void * (* RealAlloc)(size_t) );

void __stdcall I_RpcDefaultFree(
         handle_t bh, void *, void (*RealFree)(void *) );













#line 235 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"











typedef void  * NDR_CCONTEXT;

typedef struct
    {
    void  * pad[2];
    void  * userContext;
    }  * NDR_SCONTEXT;





typedef void (__stdcall  * NDR_RUNDOWN)(void  * context);

typedef void (__stdcall  * NDR_NOTIFY_ROUTINE)(void);

typedef void (__stdcall  * NDR_NOTIFY2_ROUTINE)(boolean flag);

typedef struct _SCONTEXT_QUEUE {
    unsigned long   NumberOfObjects;
    NDR_SCONTEXT  * ArrayOfObjects;
    } SCONTEXT_QUEUE,  * PSCONTEXT_QUEUE;

__declspec(dllimport)
RPC_BINDING_HANDLE
__stdcall
NDRCContextBinding (
      NDR_CCONTEXT     CContext
    );

__declspec(dllimport)
void
__stdcall
NDRCContextMarshall (
       NDR_CCONTEXT    CContext,
      void  *pBuff
    );

__declspec(dllimport)
void
__stdcall
NDRCContextUnmarshall (
      NDR_CCONTEXT        *   pCContext,
       RPC_BINDING_HANDLE      hBinding,
       void                *   pBuff,
       unsigned long           DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRCContextUnmarshall2 (
      NDR_CCONTEXT        *   pCContext,
       RPC_BINDING_HANDLE      hBinding,
       void                *   pBuff,
       unsigned long           DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall (
       NDR_SCONTEXT    CContext,
      void          * pBuff,
       NDR_RUNDOWN     userRunDownIn
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall (
       void          * pBuff,
       unsigned long   DataRepresentation
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshallEx (
       RPC_BINDING_HANDLE  BindingHandle,
       NDR_SCONTEXT        CContext,
      void              * pBuff,
       NDR_RUNDOWN         userRunDownIn
    );

__declspec(dllimport)
void
__stdcall
NDRSContextMarshall2 (
       RPC_BINDING_HANDLE  BindingHandle,
       NDR_SCONTEXT        CContext,
      void              * pBuff,
       NDR_RUNDOWN         userRunDownIn,
       void              * CtxGuard,
      unsigned long        Flags
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshallEx (
       RPC_BINDING_HANDLE  BindingHandle,
       void              * pBuff,
       unsigned long       DataRepresentation
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NDRSContextUnmarshall2(
       RPC_BINDING_HANDLE  BindingHandle,
       void              * pBuff,
       unsigned long       DataRepresentation,
       void              * CtxGuard,
      unsigned long        Flags
    );

__declspec(dllimport)
void
__stdcall
RpcSsDestroyClientContext (
      void  *  * ContextHandle
    );
































































#line 434 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"





typedef unsigned long error_status_t;


















































































struct _MIDL_STUB_MESSAGE;
struct _MIDL_STUB_DESC;
struct _FULL_PTR_XLAT_TABLES;

typedef unsigned char  *    RPC_BUFPTR;
typedef unsigned long       RPC_LENGTH;


typedef void (__stdcall  * EXPR_EVAL)( struct _MIDL_STUB_MESSAGE  * );

typedef const unsigned char  * PFORMAT_STRING;




typedef struct
    {
    long              Dimension;

    
    unsigned long  *  BufferConformanceMark;
    unsigned long  *  BufferVarianceMark;

    
    unsigned long  *  MaxCountArray;
    unsigned long  *  OffsetArray;
    unsigned long  *  ActualCountArray;
    } ARRAY_INFO,  *PARRAY_INFO;


typedef struct _NDR_ASYNC_MESSAGE *   PNDR_ASYNC_MESSAGE;
typedef struct _NDR_CORRELATION_INFO *PNDR_CORRELATION_INFO;





typedef const unsigned char  * PFORMAT_STRING;
typedef struct _MIDL_SYNTAX_INFO MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

struct NDR_ALLOC_ALL_NODES_CONTEXT;
struct NDR_POINTER_QUEUE_STATE;
struct _NDR_PROC_CONTEXT;

typedef struct _MIDL_STUB_MESSAGE
    {
    
    PRPC_MESSAGE            RpcMsg;

    
    unsigned char       *   Buffer;

    



    unsigned char       *   BufferStart;
    unsigned char       *   BufferEnd;

    






    unsigned char       *   BufferMark;

    
    unsigned long           BufferLength;

    
    unsigned long           MemorySize;

    
    unsigned char       *   Memory;

    
    unsigned char           IsClient;
    unsigned char           Pad;
    unsigned short          uFlags2;

    
    int                     ReuseBuffer;

    
    struct NDR_ALLOC_ALL_NODES_CONTEXT *pAllocAllNodesContext;
    struct NDR_POINTER_QUEUE_STATE     *pPointerQueueState;

    



    
    int                     IgnoreEmbeddedPointers;

    



    unsigned char       *   PointerBufferMark;

    


    unsigned char           CorrDespIncrement;

    unsigned char           uFlags;
    unsigned short          UniquePtrCount;

    



    ULONG_PTR               MaxCount;

    



    unsigned long           Offset;

    



    unsigned long           ActualCount;

    
    void  *             ( __stdcall * pfnAllocate)( size_t );
    void                    ( __stdcall * pfnFree)(void  *);

    





    unsigned char       *   StackTop;

    



    unsigned char       *   pPresentedType;
    unsigned char       *   pTransmitType;

    







    handle_t                SavedHandle;

    


    const struct _MIDL_STUB_DESC  * StubDesc;

    


    struct _FULL_PTR_XLAT_TABLES  * FullPtrXlatTables;
    unsigned long                   FullPtrRefId;

    unsigned long                   PointerLength;

    int                             fInDontFree       :1;
    int                             fDontCallFreeInst :1;
    int                             fInOnlyParam      :1;
    int                             fHasReturn        :1;
    int                             fHasExtensions    :1;
    int                             fHasNewCorrDesc   :1;
    int                             fIsIn             :1;
    int                             fIsOut            :1;
    int                             fIsOicf           :1;
    int                             fBufferValid      :1;
    int                             fHasMemoryValidateCallback: 1;
    int                             fInFree             :1;
    int                             fNeedMCCP         :1;
    int                             fUnused           :3;
    int                             fUnused2          :16;


    unsigned long                   dwDestContext;
    void  *                         pvDestContext;

    NDR_SCONTEXT *                  SavedContextHandles;

    long                            ParamNumber;

    struct IRpcChannelBuffer    *   pRpcChannelBuffer;

    PARRAY_INFO                     pArrayInfo;
    unsigned long           *       SizePtrCountArray;
    unsigned long           *       SizePtrOffsetArray;
    unsigned long           *       SizePtrLengthArray;

    


    void                    *       pArgQueue;

    unsigned long                   dwStubPhase;

    void                    *       LowStackMark;

    


    PNDR_ASYNC_MESSAGE              pAsyncMsg;
    PNDR_CORRELATION_INFO           pCorrInfo;
    unsigned char *                 pCorrMemory;

    void *                          pMemoryList;

    





    




    INT_PTR                         pCSInfo;

    unsigned char *                 ConformanceMark;
    unsigned char *                 VarianceMark;



#line 760 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
    INT_PTR                         Unused;
#line 762 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"

    struct _NDR_PROC_CONTEXT *      pContext;

    









    void *                             ContextHandleHash;
    void *                             pUserMarshalList;
    INT_PTR                         Reserved51_3;
    INT_PTR                         Reserved51_4;
    INT_PTR                         Reserved51_5;


    


#line 786 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
    } MIDL_STUB_MESSAGE,  *PMIDL_STUB_MESSAGE;


typedef  struct _MIDL_STUB_MESSAGE MIDL_STUB_MESSAGE,   *PMIDL_STUB_MESSAGE;




typedef void  *
        ( __stdcall * GENERIC_BINDING_ROUTINE)
        (void  *);
typedef void
        ( __stdcall * GENERIC_UNBIND_ROUTINE)
        (void  *, unsigned char  *);

typedef struct _GENERIC_BINDING_ROUTINE_PAIR
    {
    GENERIC_BINDING_ROUTINE     pfnBind;
    GENERIC_UNBIND_ROUTINE      pfnUnbind;
    } GENERIC_BINDING_ROUTINE_PAIR,  *PGENERIC_BINDING_ROUTINE_PAIR;

typedef struct __GENERIC_BINDING_INFO
    {
    void  *            pObj;
    unsigned int                Size;
    GENERIC_BINDING_ROUTINE     pfnBind;
    GENERIC_UNBIND_ROUTINE      pfnUnbind;
    } GENERIC_BINDING_INFO,  *PGENERIC_BINDING_INFO;









#line 824 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"

typedef void ( __stdcall * XMIT_HELPER_ROUTINE)
    ( PMIDL_STUB_MESSAGE );

typedef struct _XMIT_ROUTINE_QUINTUPLE
    {
    XMIT_HELPER_ROUTINE     pfnTranslateToXmit;
    XMIT_HELPER_ROUTINE     pfnTranslateFromXmit;
    XMIT_HELPER_ROUTINE     pfnFreeXmit;
    XMIT_HELPER_ROUTINE     pfnFreeInst;
    } XMIT_ROUTINE_QUINTUPLE,  *PXMIT_ROUTINE_QUINTUPLE;

typedef unsigned long
( __stdcall * USER_MARSHAL_SIZING_ROUTINE)
    (unsigned long  *,
     unsigned long,
     void  * );

typedef unsigned char  *
( __stdcall * USER_MARSHAL_MARSHALLING_ROUTINE)
    (unsigned long  *,
     unsigned char  * ,
     void  * );

typedef unsigned char  *
( __stdcall * USER_MARSHAL_UNMARSHALLING_ROUTINE)
    (unsigned long  *,
     unsigned char  *,
     void  * );

typedef void ( __stdcall * USER_MARSHAL_FREEING_ROUTINE)
    (unsigned long  *,
     void  * );

typedef struct _USER_MARSHAL_ROUTINE_QUADRUPLE
    {
    USER_MARSHAL_SIZING_ROUTINE          pfnBufferSize;
    USER_MARSHAL_MARSHALLING_ROUTINE     pfnMarshall;
    USER_MARSHAL_UNMARSHALLING_ROUTINE   pfnUnmarshall;
    USER_MARSHAL_FREEING_ROUTINE         pfnFree;
    } USER_MARSHAL_ROUTINE_QUADRUPLE;



typedef enum _USER_MARSHAL_CB_TYPE
{
    USER_MARSHAL_CB_BUFFER_SIZE,
    USER_MARSHAL_CB_MARSHALL,
    USER_MARSHAL_CB_UNMARSHALL,
    USER_MARSHAL_CB_FREE
} USER_MARSHAL_CB_TYPE;

typedef struct _USER_MARSHAL_CB
{
    unsigned long           Flags;
    PMIDL_STUB_MESSAGE      pStubMsg;
    PFORMAT_STRING          pReserve;
    unsigned long           Signature;
    USER_MARSHAL_CB_TYPE    CBType;
    PFORMAT_STRING          pFormat;
    PFORMAT_STRING          pTypeFormat;
} USER_MARSHAL_CB;









typedef struct _MALLOC_FREE_STRUCT
    {
    void  *     ( __stdcall * pfnAllocate)(size_t);
    void        ( __stdcall * pfnFree)(void  *);
    } MALLOC_FREE_STRUCT;

typedef struct _COMM_FAULT_OFFSETS
    {
    short       CommOffset;
    short       FaultOffset;
    } COMM_FAULT_OFFSETS;





typedef enum _IDL_CS_CONVERT
    {
    IDL_CS_NO_CONVERT,
    IDL_CS_IN_PLACE_CONVERT,
    IDL_CS_NEW_BUFFER_CONVERT
    } IDL_CS_CONVERT;

typedef void
( __stdcall * CS_TYPE_NET_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     unsigned long          ulLocalBufferSize,
     IDL_CS_CONVERT     *   conversionType,
     unsigned long      *   pulNetworkBufferSize,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TYPE_LOCAL_SIZE_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     unsigned long          ulNetworkBufferSize,
     IDL_CS_CONVERT     *   conversionType,
     unsigned long      *   pulLocalBufferSize,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TYPE_TO_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     void               *   pLocalData,
     unsigned long          ulLocalDataLength,
     byte               *   pNetworkData,
     unsigned long      *   pulNetworkDataLength,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TYPE_FROM_NETCS_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     unsigned long          ulNetworkCodeSet,
     byte               *   pNetworkData,
     unsigned long          ulNetworkDataLength,
     unsigned long          ulLocalBufferSize,
     void               *   pLocalData,
     unsigned long      *   pulLocalDataLength,
     error_status_t     *   pStatus);

typedef void
( __stdcall * CS_TAG_GETTING_ROUTINE)
    (RPC_BINDING_HANDLE     hBinding,
     int                    fServerSide,
     unsigned long      *   pulSendingTag,
     unsigned long      *   pulDesiredReceivingTag,
     unsigned long      *   pulReceivingTag,
     error_status_t     *   pStatus);

void __stdcall
RpcCsGetTags(
     RPC_BINDING_HANDLE     hBinding,
     int                    fServerSide,
     unsigned long      *   pulSendingTag,
     unsigned long      *   pulDesiredReceivingTag,
     unsigned long      *   pulReceivingTag,
     error_status_t     *   pStatus);

typedef struct _NDR_CS_SIZE_CONVERT_ROUTINES
    {
    CS_TYPE_NET_SIZE_ROUTINE    pfnNetSize;
    CS_TYPE_TO_NETCS_ROUTINE    pfnToNetCs;
    CS_TYPE_LOCAL_SIZE_ROUTINE  pfnLocalSize;
    CS_TYPE_FROM_NETCS_ROUTINE  pfnFromNetCs;
    } NDR_CS_SIZE_CONVERT_ROUTINES;

typedef struct _NDR_CS_ROUTINES
    {
    NDR_CS_SIZE_CONVERT_ROUTINES   *pSizeConvertRoutines;
    CS_TAG_GETTING_ROUTINE         *pTagGettingRoutines;
    } NDR_CS_ROUTINES;

typedef struct _NDR_EXPR_DESC
{
    const unsigned short * pOffset;
    PFORMAT_STRING  pFormatExpr;
} NDR_EXPR_DESC;




typedef struct _MIDL_STUB_DESC
    {
    void  *    RpcInterfaceInformation;

    void  *    ( __stdcall * pfnAllocate)(size_t);
    void       ( __stdcall * pfnFree)(void  *);

    union
        {
        handle_t  *             pAutoHandle;
        handle_t  *             pPrimitiveHandle;
        PGENERIC_BINDING_INFO   pGenericBindingInfo;
        } IMPLICIT_HANDLE_INFO;

    const NDR_RUNDOWN  *                    apfnNdrRundownRoutines;
    const GENERIC_BINDING_ROUTINE_PAIR  *   aGenericBindingRoutinePairs;
    const EXPR_EVAL  *                      apfnExprEval;
    const XMIT_ROUTINE_QUINTUPLE  *         aXmitQuintuple;

    const unsigned char  *                  pFormatTypes;

    int                                     fCheckBounds;

    
    unsigned long                           Version;

    MALLOC_FREE_STRUCT  *                   pMallocFreeStruct;

    long                                    MIDLVersion;

    const COMM_FAULT_OFFSETS  *    CommFaultOffsets;

    
    const USER_MARSHAL_ROUTINE_QUADRUPLE  * aUserMarshalQuadruple;

    
    const NDR_NOTIFY_ROUTINE  *             NotifyRoutineTable;

    



    ULONG_PTR                               mFlags;

    
    const NDR_CS_ROUTINES *                 CsRoutineTables;

    void *                                  ProxyServerInfo;
    const NDR_EXPR_DESC *               pExprInfo;

    

    } MIDL_STUB_DESC;


typedef const MIDL_STUB_DESC  * PMIDL_STUB_DESC;

typedef void  * PMIDL_XMIT_TYPE;







#pragma warning(push)
#line 1065 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#pragma warning( disable:4200 )
#line 1067 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
typedef struct _MIDL_FORMAT_STRING
    {
    short               Pad;
    unsigned char       Format[];
    } MIDL_FORMAT_STRING;


#pragma warning(pop)


#line 1078 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#line 1079 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#line 1080 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"




typedef void ( __stdcall * STUB_THUNK)( PMIDL_STUB_MESSAGE );


typedef long ( __stdcall * SERVER_ROUTINE)();


#line 1091 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"




typedef struct  _MIDL_SERVER_INFO_
    {
    PMIDL_STUB_DESC                     pStubDesc;
    const SERVER_ROUTINE     *          DispatchTable;
    PFORMAT_STRING                      ProcString;
    const unsigned short *              FmtStringOffset;
    const STUB_THUNK *                  ThunkTable;
    PRPC_SYNTAX_IDENTIFIER              pTransferSyntax;
    ULONG_PTR                           nCount;
    PMIDL_SYNTAX_INFO                   pSyntaxInfo;
    } MIDL_SERVER_INFO, *PMIDL_SERVER_INFO;






typedef struct _MIDL_STUBLESS_PROXY_INFO
    {
    PMIDL_STUB_DESC                     pStubDesc;
    PFORMAT_STRING                      ProcFormatString;
    const unsigned short            *   FormatStringOffset;
    PRPC_SYNTAX_IDENTIFIER              pTransferSyntax;
    ULONG_PTR                           nCount;
    PMIDL_SYNTAX_INFO                   pSyntaxInfo;
    } MIDL_STUBLESS_PROXY_INFO;

typedef MIDL_STUBLESS_PROXY_INFO  * PMIDL_STUBLESS_PROXY_INFO;




typedef struct _MIDL_SYNTAX_INFO
{
RPC_SYNTAX_IDENTIFIER               TransferSyntax;
RPC_DISPATCH_TABLE *                DispatchTable;
PFORMAT_STRING                      ProcString;
const unsigned short *              FmtStringOffset;
PFORMAT_STRING                      TypeString;
const void           *              aUserMarshalQuadruple;
ULONG_PTR                           pReserved1;
ULONG_PTR                           pReserved2;
} MIDL_SYNTAX_INFO, *PMIDL_SYNTAX_INFO;

typedef unsigned short * PARAM_OFFSETTABLE, *PPARAM_OFFSETTABLE;




typedef union _CLIENT_CALL_RETURN
    {
    void  *         Pointer;
    LONG_PTR        Simple;
    } CLIENT_CALL_RETURN;


typedef enum
        {
        XLAT_SERVER = 1,
        XLAT_CLIENT
        } XLAT_SIDE;

typedef struct _FULL_PTR_XLAT_TABLES
{
    void * RefIdToPointer;
    void * PointerToRefId;
    unsigned long           NextRefId;   
    XLAT_SIDE               XlatSide;
} FULL_PTR_XLAT_TABLES, *PFULL_PTR_XLAT_TABLES;





RPC_STATUS __stdcall
NdrClientGetSupportedSyntaxes(
      RPC_CLIENT_INTERFACE * pInf,
      unsigned long       * pCount,
      MIDL_SYNTAX_INFO   ** pArr );


RPC_STATUS __stdcall
NdrServerGetSupportedSyntaxes(
      RPC_SERVER_INTERFACE * pInf,
      unsigned long       * pCount,
      MIDL_SYNTAX_INFO   ** pArr,
      unsigned long       * pPreferSyntaxIndex);




#pragma warning(push)
    
#pragma warning(disable:28740)

__declspec(dllimport)
void
__stdcall
NdrSimpleTypeMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    unsigned char           FormatChar
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrPointerMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrCsArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrCsTagMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrSimpleStructMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStructMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingStructMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexStructMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrFixedArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrVaryingArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexArrayMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonConformantStringMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStringMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonEncapsulatedUnionMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrByteCountPointerMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrXmitOrRepAsMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrUserMarshalMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrInterfacePointerMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    NDR_CCONTEXT            ContextHandle,
    int                     fCheck
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    NDR_SCONTEXT            ContextHandle,
    NDR_RUNDOWN             RundownRoutine
    );

__declspec(dllimport)
void
__stdcall
NdrServerContextNewMarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    NDR_SCONTEXT            ContextHandle,
    NDR_RUNDOWN             RundownRoutine,
    PFORMAT_STRING          pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrSimpleTypeUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    unsigned char           FormatChar
    );

__declspec(dllimport)
unsigned char * 
__stdcall
NdrCsArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char **        ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char * 
__stdcall
NdrCsTagUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char **        ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char * 
__stdcall
NdrRangeUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char **        ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationInitialize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    void  *                 pMemory,
    unsigned long           CacheSize,
    unsigned long           flags
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationPass(
    PMIDL_STUB_MESSAGE      pStubMsg
    );

__declspec(dllimport)
void
__stdcall
NdrCorrelationFree(
    PMIDL_STUB_MESSAGE      pStubMsg
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrPointerUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrSimpleStructUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStructUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingStructUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexStructUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrFixedArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrVaryingArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrComplexArrayUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrConformantStringUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNonEncapsulatedUnionUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrByteCountPointerUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrXmitOrRepAsUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrUserMarshalUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
unsigned char  *
__stdcall
NdrInterfacePointerUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *  *     ppMemory,
    PFORMAT_STRING          pFormat,
    unsigned char           fMustAlloc
    );



__declspec(dllimport)
void
__stdcall
NdrClientContextUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg,
    NDR_CCONTEXT        *   pContextHandle,
    RPC_BINDING_HANDLE      BindHandle
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextUnmarshall(
    PMIDL_STUB_MESSAGE      pStubMsg
    );



__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrContextHandleInitialize(
       PMIDL_STUB_MESSAGE            pStubMsg,
      PFORMAT_STRING      pFormat
    );

__declspec(dllimport)
NDR_SCONTEXT
__stdcall
NdrServerContextNewUnmarshall(
       PMIDL_STUB_MESSAGE            pStubMsg,
      PFORMAT_STRING       pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsTagBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrConformantStringBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonConformantStringBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerBufferSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrContextHandleSize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );





__declspec(dllimport)
unsigned long
__stdcall
NdrPointerMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrContextHandleMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );




__declspec(dllimport)
unsigned long
__stdcall
NdrCsArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrCsTagMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrSimpleStructMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStructMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingStructMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexStructMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrFixedArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrConformantVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrVaryingArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrComplexArrayMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrConformantStringMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonConformantStringMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
unsigned long
__stdcall
NdrNonEncapsulatedUnionMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrXmitOrRepAsMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrUserMarshalMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
unsigned long
__stdcall
NdrInterfacePointerMemorySize(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrPointerFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrCsArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrSimpleStructFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantStructFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingStructFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexStructFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrFixedArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrConformantVaryingArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrVaryingArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrComplexArrayFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );

__declspec(dllimport)
void
__stdcall
NdrNonEncapsulatedUnionFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrByteCountPointerFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrXmitOrRepAsFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrUserMarshalFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );



__declspec(dllimport)
void
__stdcall
NdrInterfacePointerFree(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pMemory,
    PFORMAT_STRING          pFormat
    );





__declspec(dllimport)
void
__stdcall
NdrConvert2(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat,
    long                    NumberParams
    );

__declspec(dllimport)
void
__stdcall
NdrConvert(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat
    );














__declspec(dllimport)
unsigned char  *
__stdcall
NdrUserMarshalSimpleTypeConvert(
    unsigned long *         pFlags,
    unsigned char *         pBuffer,
    unsigned char           FormatChar
    );





__declspec(dllimport)
void
__stdcall
NdrClientInitializeNew(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor,
    unsigned int            ProcNum
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrServerInitializeNew(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializePartial(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor,
    unsigned long           RequestedBufferSize
    );

__declspec(dllimport)
void
__stdcall
NdrClientInitialize(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor,
    unsigned int            ProcNum
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrServerInitialize(
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrServerInitializeUnmarshall (
    PMIDL_STUB_MESSAGE      pStubMsg,
    PMIDL_STUB_DESC         pStubDescriptor,
    PRPC_MESSAGE            pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerInitializeMarshall (
    PRPC_MESSAGE            pRpcMsg,
    PMIDL_STUB_MESSAGE      pStubMsg
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrGetBuffer(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned long           BufferLength,
    RPC_BINDING_HANDLE      Handle
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNsGetBuffer(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned long           BufferLength,
    RPC_BINDING_HANDLE      Handle
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrSendReceive(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char *         pBufferEnd
    );

__declspec(dllimport)
unsigned char  *
__stdcall
NdrNsSendReceive(
    PMIDL_STUB_MESSAGE      pStubMsg,
    unsigned char  *        pBufferEnd,
    RPC_BINDING_HANDLE  *   pAutoHandle
    );

__declspec(dllimport)
void
__stdcall
NdrFreeBuffer(
    PMIDL_STUB_MESSAGE      pStubMsg
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
NdrGetDcomProtocolVersion(
    PMIDL_STUB_MESSAGE      pStubMsg,
    RPC_VERSION *           pVersion );

#pragma warning(pop)







CLIENT_CALL_RETURN __cdecl
NdrClientCall2(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );









#line 2472 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"

CLIENT_CALL_RETURN __cdecl
NdrClientCall(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );

CLIENT_CALL_RETURN __cdecl
NdrAsyncClientCall(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );

#line 2488 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#pragma endregion

#pragma region Desktop Family


CLIENT_CALL_RETURN __cdecl
NdrDcomAsyncClientCall(
    PMIDL_STUB_DESC         pStubDescriptor,
    PFORMAT_STRING          pFormat,
    ...
    );

#line 2501 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#pragma endregion

#pragma region Application Family



typedef enum {
    STUB_UNMARSHAL,
    STUB_CALL_SERVER,
    STUB_MARSHAL,
    STUB_CALL_SERVER_NO_HRESULT
}STUB_PHASE;

typedef enum {
    PROXY_CALCSIZE,
    PROXY_GETBUFFER,
    PROXY_MARSHAL,
    PROXY_SENDRECEIVE,
    PROXY_UNMARSHAL
}PROXY_PHASE;

struct IRpcStubBuffer;      



__declspec(dllimport)
void
__stdcall
NdrAsyncServerCall(
    PRPC_MESSAGE                pRpcMsg
    );


__declspec(dllimport)
long
__stdcall
NdrAsyncStubCall(
    struct IRpcStubBuffer *     pThis,
    struct IRpcChannelBuffer *  pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long *             pdwStubPhase
    );

#line 2545 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
long
__stdcall
NdrDcomAsyncStubCall(
    struct IRpcStubBuffer    *  pThis,
    struct IRpcChannelBuffer *  pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long            *  pdwStubPhase
    );

#line 2562 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
long
__stdcall
NdrStubCall2(
    void  *    pThis, 
    void  * pChannel, 
    PRPC_MESSAGE                pRpcMsg,
    unsigned long  *            pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall2(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
NdrStubCall (
    void  *    pThis, 
    void  * pChannel, 
    PRPC_MESSAGE                pRpcMsg,
    unsigned long  *            pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCall(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
int
__stdcall
NdrServerUnmarshall(
    void  * pChannel, 
    PRPC_MESSAGE                pRpcMsg,
    PMIDL_STUB_MESSAGE          pStubMsg,
    PMIDL_STUB_DESC             pStubDescriptor,
    PFORMAT_STRING              pFormat,
    void  *                     pParamList
    );

__declspec(dllimport)
void
__stdcall
NdrServerMarshall(
    void  *    pThis, 
    void  * pChannel, 
    PMIDL_STUB_MESSAGE          pStubMsg,
    PFORMAT_STRING              pFormat
    );



__declspec(dllimport)
RPC_STATUS
__stdcall
NdrMapCommAndFaultStatus(
    PMIDL_STUB_MESSAGE          pStubMsg,
    unsigned long  *            pCommStatus,
    unsigned long  *            pFaultStatus,
    RPC_STATUS                  Status
    );







typedef void  * RPC_SS_THREAD_HANDLE;

typedef void  * __stdcall
RPC_CLIENT_ALLOC (
      size_t Size
    );

typedef void __stdcall
RPC_CLIENT_FREE (
      void  * Ptr
    );





__declspec(dllimport)
void  *
__stdcall
RpcSsAllocate (
      size_t Size
    );

__declspec(dllimport)
void
__stdcall
RpcSsDisableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsEnableAllocate (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsFree (
      void  * NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSsGetThreadHandle (
    void
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetClientAllocFree (
      RPC_CLIENT_ALLOC  * ClientAlloc,
      RPC_CLIENT_FREE   * ClientFree
    );

__declspec(dllimport)
void
__stdcall
RpcSsSetThreadHandle (
      RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
void
__stdcall
RpcSsSwapClientAllocFree (
      RPC_CLIENT_ALLOC     * ClientAlloc,
      RPC_CLIENT_FREE      * ClientFree,
      RPC_CLIENT_ALLOC *  * OldClientAlloc,
      RPC_CLIENT_FREE  *  * OldClientFree
    );





__declspec(dllimport)
void  *
__stdcall
RpcSmAllocate (
       size_t          Size,
      RPC_STATUS  *   pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmClientFree (
       void        *   pNodeToFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDestroyClientContext (
      void         * * ContextHandle
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmDisableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmEnableAllocate (
    void
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmFree (
      void         *   NodeToFree
    );

__declspec(dllimport)
RPC_SS_THREAD_HANDLE
__stdcall
RpcSmGetThreadHandle (
      RPC_STATUS  *   pStatus
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetClientAllocFree (
      RPC_CLIENT_ALLOC * ClientAlloc,
      RPC_CLIENT_FREE  * ClientFree
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSetThreadHandle (
      RPC_SS_THREAD_HANDLE Id
    );

__declspec(dllimport)
RPC_STATUS
__stdcall
RpcSmSwapClientAllocFree (
      RPC_CLIENT_ALLOC     *   ClientAlloc,
      RPC_CLIENT_FREE      *   ClientFree,
      RPC_CLIENT_ALLOC    * * OldClientAlloc,
      RPC_CLIENT_FREE     * * OldClientFree
    );





__declspec(dllimport)
void
__stdcall
NdrRpcSsEnableAllocate(
    PMIDL_STUB_MESSAGE      pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDisableAllocate(
    PMIDL_STUB_MESSAGE      pMessage );

__declspec(dllimport)
void
__stdcall
NdrRpcSmSetClientToOsf(
    PMIDL_STUB_MESSAGE      pMessage );

__declspec(dllimport)
void  *
__stdcall
NdrRpcSmClientAllocate (
      size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSmClientFree (
      void  * NodeToFree
    );

__declspec(dllimport)
void  *
__stdcall
NdrRpcSsDefaultAllocate (
      size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrRpcSsDefaultFree (
      void  * NodeToFree
    );









__declspec(dllimport)
PFULL_PTR_XLAT_TABLES
__stdcall
NdrFullPointerXlatInit(
    unsigned long           NumberOfPointers,
    XLAT_SIDE               XlatSide
    );

__declspec(dllimport)
void
__stdcall
NdrFullPointerXlatFree(
    PFULL_PTR_XLAT_TABLES   pXlatTables
    );


__declspec(dllimport)
void  *
__stdcall
NdrAllocate(
    PMIDL_STUB_MESSAGE      pStubMsg,
    size_t                  Len
    );

__declspec(dllimport)
void
__stdcall
NdrClearOutParameters(
    PMIDL_STUB_MESSAGE      pStubMsg,
    PFORMAT_STRING          pFormat,
    void  *                 ArgAddr
    );






__declspec(dllimport)
void  *
__stdcall
NdrOleAllocate (
      size_t Size
    );

__declspec(dllimport)
void
__stdcall
NdrOleFree (
      void  * NodeToFree
    );





#line 2911 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"




































#line 2948 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"





typedef struct _NDR_USER_MARSHAL_INFO_LEVEL1
{
    void *                      Buffer;
    unsigned long               BufferSize;
    void *(__stdcall * pfnAllocate)(size_t);
    void (__stdcall * pfnFree)(void *);
    struct IRpcChannelBuffer *  pRpcChannelBuffer;
    ULONG_PTR                   Reserved[5];
} NDR_USER_MARSHAL_INFO_LEVEL1;



#pragma warning(push)
#line 2967 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#pragma warning(disable:4201)
#line 2969 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"

typedef struct _NDR_USER_MARSHAL_INFO
{
    unsigned long InformationLevel;
    union {
        NDR_USER_MARSHAL_INFO_LEVEL1 Level1;
    } ;
} NDR_USER_MARSHAL_INFO;



#pragma warning(pop)


#line 2984 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#line 2985 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"


RPC_STATUS
__stdcall
NdrGetUserMarshalInfo (
      unsigned long * pFlags,
      unsigned long            InformationLevel,
      NDR_USER_MARSHAL_INFO * pMarshalInfo
    );




RPC_STATUS __stdcall
NdrCreateServerInterfaceFromStub(
              struct IRpcStubBuffer* pStub,
              RPC_SERVER_INTERFACE *pServerIf );




CLIENT_CALL_RETURN __cdecl
NdrClientCall3(
    MIDL_STUBLESS_PROXY_INFO   *pProxyInfo,
    unsigned long               nProcNum,
    void *                      pReturnValue,
    ...
    );

CLIENT_CALL_RETURN __cdecl
Ndr64AsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO   *pProxyInfo,
    unsigned long               nProcNum,
    void *                      pReturnValue,
    ...
    );

#line 3023 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#pragma endregion

#pragma region Desktop Family


CLIENT_CALL_RETURN __cdecl
Ndr64DcomAsyncClientCall(
    MIDL_STUBLESS_PROXY_INFO   *pProxyInfo,
    unsigned long               nProcNum,
    void *                      pReturnValue,
    ...
    );

#line 3037 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#pragma endregion

#pragma region Application Family


struct IRpcStubBuffer;      


__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCall64(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
Ndr64AsyncServerCallAll(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
long
__stdcall
Ndr64AsyncStubCall(
    struct IRpcStubBuffer *     pThis,
    struct IRpcChannelBuffer *  pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long *             pdwStubPhase
    );

#line 3077 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#pragma endregion

#pragma region Desktop Family



__declspec(dllimport)
long
__stdcall
Ndr64DcomAsyncStubCall(
    struct IRpcStubBuffer    *  pThis,
    struct IRpcChannelBuffer *  pChannel,
    PRPC_MESSAGE                pRpcMsg,
    unsigned long            *  pdwStubPhase
    );

#line 3094 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#pragma endregion

#pragma region Application Family


__declspec(dllimport)
long
__stdcall
NdrStubCall3 (
    void  *    pThis, 
    void  * pChannel, 
    PRPC_MESSAGE                pRpcMsg,
    unsigned long  *            pdwStubPhase
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallAll(
    PRPC_MESSAGE                pRpcMsg
    );

__declspec(dllimport)
void
__stdcall
NdrServerCallNdr64(
    PRPC_MESSAGE                pRpcMsg
    );


__declspec(dllimport)
void
__stdcall
NdrServerCall3(
    PRPC_MESSAGE                pRpcMsg
    );



__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientMarshall(
    PMIDL_STUB_MESSAGE          pStubMsg,
    void *                      pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerUnmarshall(
    PMIDL_STUB_MESSAGE          pStubMsg,
    void **                     ppMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreClientBufferSize(
    PMIDL_STUB_MESSAGE          pStubMsg,
    void *                      pMemory
    );

__declspec(dllimport)
void
__stdcall
NdrPartialIgnoreServerInitialize(
    PMIDL_STUB_MESSAGE          pStubMsg,
    void **                     ppMemory,
    PFORMAT_STRING              pFormat
    );


void __stdcall
RpcUserFree( handle_t AsyncHandle, void * pBuffer );

#line 3171 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"
#pragma endregion


}
#line 3176 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 3178 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"

#line 3180 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\rpcndr.h"


#line 24 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"










#pragma once
#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"

 


#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"





 


#pragma warning( disable: 4049 )  
























#pragma once
#line 36 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"

 



#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\guiddef.h"
























































#line 58 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\guiddef.h"








#line 67 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\guiddef.h"











































































































































#line 42 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"


extern "C"{
#line 46 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"



 








#pragma once
#line 60 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"


extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0000_v0_0_s_ifspec;





 










































#line 113 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"

typedef WCHAR OLECHAR;

typedef    OLECHAR *LPOLESTR;

typedef    const OLECHAR *LPCOLESTR;









#line 129 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"










typedef unsigned char UCHAR;

typedef short SHORT;

typedef unsigned short USHORT;

typedef DWORD ULONG;

typedef double DOUBLE;






























#line 179 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"
















































































typedef struct _COAUTHIDENTITY
    {
     USHORT *User;
     ULONG UserLength;
     USHORT *Domain;
     ULONG DomainLength;
     USHORT *Password;
     ULONG PasswordLength;
    ULONG Flags;
    } 	COAUTHIDENTITY;

typedef struct _COAUTHINFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    LPWSTR pwszServerPrincName;
    DWORD dwAuthnLevel;
    DWORD dwImpersonationLevel;
    COAUTHIDENTITY *pAuthIdentityData;
    DWORD dwCapabilities;
    } 	COAUTHINFO;

typedef LONG SCODE;

typedef SCODE *PSCODE;




























#line 313 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"
typedef 
enum tagMEMCTX
    {
        MEMCTX_TASK	= 1,
        MEMCTX_SHARED	= 2,
        MEMCTX_MACSYSTEM	= 3,
        MEMCTX_UNKNOWN	= -1,
        MEMCTX_SAME	= -2
    } 	MEMCTX;




#line 327 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"









#line 337 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"








#line 346 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"
typedef 
enum tagCLSCTX
    {
        CLSCTX_INPROC_SERVER	= 0x1,
        CLSCTX_INPROC_HANDLER	= 0x2,
        CLSCTX_LOCAL_SERVER	= 0x4,
        CLSCTX_INPROC_SERVER16	= 0x8,
        CLSCTX_REMOTE_SERVER	= 0x10,
        CLSCTX_INPROC_HANDLER16	= 0x20,
        CLSCTX_RESERVED1	= 0x40,
        CLSCTX_RESERVED2	= 0x80,
        CLSCTX_RESERVED3	= 0x100,
        CLSCTX_RESERVED4	= 0x200,
        CLSCTX_NO_CODE_DOWNLOAD	= 0x400,
        CLSCTX_RESERVED5	= 0x800,
        CLSCTX_NO_CUSTOM_MARSHAL	= 0x1000,
        CLSCTX_ENABLE_CODE_DOWNLOAD	= 0x2000,
        CLSCTX_NO_FAILURE_LOG	= 0x4000,
        CLSCTX_DISABLE_AAA	= 0x8000,
        CLSCTX_ENABLE_AAA	= 0x10000,
        CLSCTX_FROM_DEFAULT_CONTEXT	= 0x20000,
        CLSCTX_ACTIVATE_32_BIT_SERVER	= 0x40000,
        CLSCTX_ACTIVATE_64_BIT_SERVER	= 0x80000,
        CLSCTX_ENABLE_CLOAKING	= 0x100000,
        CLSCTX_APPCONTAINER	= 0x400000,
        CLSCTX_ACTIVATE_AAA_AS_IU	= 0x800000,
        CLSCTX_PS_DLL	= ( int  )0x80000000
    } 	CLSCTX;




















typedef 
enum tagMSHLFLAGS
    {
        MSHLFLAGS_NORMAL	= 0,
        MSHLFLAGS_TABLESTRONG	= 1,
        MSHLFLAGS_TABLEWEAK	= 2,
        MSHLFLAGS_NOPING	= 4,
        MSHLFLAGS_RESERVED1	= 8,
        MSHLFLAGS_RESERVED2	= 16,
        MSHLFLAGS_RESERVED3	= 32,
        MSHLFLAGS_RESERVED4	= 64
    } 	MSHLFLAGS;

typedef 
enum tagMSHCTX
    {
        MSHCTX_LOCAL	= 0,
        MSHCTX_NOSHAREDMEM	= 1,
        MSHCTX_DIFFERENTMACHINE	= 2,
        MSHCTX_INPROC	= 3,
        MSHCTX_CROSSCTX	= 4
    } 	MSHCTX;

typedef struct _BYTE_BLOB
    {
    unsigned long clSize;
     byte abData[ 1 ];
    } 	BYTE_BLOB;

typedef    BYTE_BLOB *UP_BYTE_BLOB;

typedef struct _WORD_BLOB
    {
    unsigned long clSize;
     unsigned short asData[ 1 ];
    } 	WORD_BLOB;

typedef    WORD_BLOB *UP_WORD_BLOB;

typedef struct _DWORD_BLOB
    {
    unsigned long clSize;
     unsigned long alData[ 1 ];
    } 	DWORD_BLOB;

typedef    DWORD_BLOB *UP_DWORD_BLOB;

typedef struct _FLAGGED_BYTE_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
     byte abData[ 1 ];
    } 	FLAGGED_BYTE_BLOB;

typedef    FLAGGED_BYTE_BLOB *UP_FLAGGED_BYTE_BLOB;

typedef struct _FLAGGED_WORD_BLOB
    {
    unsigned long fFlags;
    unsigned long clSize;
     unsigned short asData[ 1 ];
    } 	FLAGGED_WORD_BLOB;

typedef    FLAGGED_WORD_BLOB *UP_FLAGGED_WORD_BLOB;

typedef struct _BYTE_SIZEDARR
    {
    unsigned long clSize;
     byte *pData;
    } 	BYTE_SIZEDARR;

typedef struct _SHORT_SIZEDARR
    {
    unsigned long clSize;
     unsigned short *pData;
    } 	WORD_SIZEDARR;

typedef struct _LONG_SIZEDARR
    {
    unsigned long clSize;
     unsigned long *pData;
    } 	DWORD_SIZEDARR;

typedef struct _HYPER_SIZEDARR
    {
    unsigned long clSize;
     __int64 *pData;
    } 	HYPER_SIZEDARR;



extern RPC_IF_HANDLE IWinTypesBase_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypesBase_v0_1_s_ifspec;
#line 488 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"


 

typedef boolean BOOLEAN;





typedef struct tagBLOB
    {
    ULONG cbSize;
     BYTE *pBlobData;
    } 	BLOB;

typedef struct tagBLOB *LPBLOB;

#line 507 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"

































extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypesbase_0000_0001_v0_0_s_ifspec;






}
#line 550 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"

#line 552 "c:\\program files (x86)\\windows kits\\8.0\\include\\shared\\wtypesbase.h"


#line 41 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"


extern "C"{
#line 45 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"



 








#pragma once
#line 59 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"


extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0000_v0_0_s_ifspec;





 

typedef struct tagRemHGLOBAL
    {
    long fNullHGlobal;
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHGLOBAL;

typedef struct tagRemHMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHMETAFILEPICT;

typedef struct tagRemHENHMETAFILE
    {
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHENHMETAFILE;

typedef struct tagRemHBITMAP
    {
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHBITMAP;

typedef struct tagRemHPALETTE
    {
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHPALETTE;

typedef struct tagRemBRUSH
    {
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemHBRUSH;












































































































































































#line 282 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"


















































#line 333 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"




#line 338 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"



#line 342 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"
typedef 
enum tagDVASPECT
    {
        DVASPECT_CONTENT	= 1,
        DVASPECT_THUMBNAIL	= 2,
        DVASPECT_ICON	= 4,
        DVASPECT_DOCPRINT	= 8
    } 	DVASPECT;

typedef 
enum tagSTGC
    {
        STGC_DEFAULT	= 0,
        STGC_OVERWRITE	= 1,
        STGC_ONLYIFCURRENT	= 2,
        STGC_DANGEROUSLYCOMMITMERELYTODISKCACHE	= 4,
        STGC_CONSOLIDATE	= 8
    } 	STGC;

typedef 
enum tagSTGMOVE
    {
        STGMOVE_MOVE	= 0,
        STGMOVE_COPY	= 1,
        STGMOVE_SHALLOWCOPY	= 2
    } 	STGMOVE;

typedef 
enum tagSTATFLAG
    {
        STATFLAG_DEFAULT	= 0,
        STATFLAG_NONAME	= 1,
        STATFLAG_NOOPEN	= 2
    } 	STATFLAG;

typedef  void *HCONTEXT;



typedef DWORD LCID;

#line 384 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"


typedef USHORT LANGID;

#line 389 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"






typedef struct _userCLIPFORMAT
    {
    long fContext;
      union __MIDL_IWinTypes_0001
        {
         DWORD dwValue;
         wchar_t *pwszName;
        } 	u;
    } 	userCLIPFORMAT;

typedef    userCLIPFORMAT *wireCLIPFORMAT;

typedef  WORD CLIPFORMAT;

typedef struct _GDI_NONREMOTE
    {
    long fContext;
      union __MIDL_IWinTypes_0002
        {
         long hInproc;
         DWORD_BLOB *hRemote;
        } 	u;
    } 	GDI_NONREMOTE;

typedef struct _userHGLOBAL
    {
    long fContext;
      union __MIDL_IWinTypes_0003
        {
         long hInproc;
         FLAGGED_BYTE_BLOB *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHGLOBAL;

typedef    userHGLOBAL *wireHGLOBAL;

typedef struct _userHMETAFILE
    {
    long fContext;
      union __MIDL_IWinTypes_0004
        {
         long hInproc;
         BYTE_BLOB *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHMETAFILE;

typedef struct _remoteMETAFILEPICT
    {
    long mm;
    long xExt;
    long yExt;
    userHMETAFILE *hMF;
    } 	remoteMETAFILEPICT;

typedef struct _userHMETAFILEPICT
    {
    long fContext;
      union __MIDL_IWinTypes_0005
        {
         long hInproc;
         remoteMETAFILEPICT *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHMETAFILEPICT;

typedef struct _userHENHMETAFILE
    {
    long fContext;
      union __MIDL_IWinTypes_0006
        {
         long hInproc;
         BYTE_BLOB *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHENHMETAFILE;

typedef struct _userBITMAP
    {
    LONG bmType;
    LONG bmWidth;
    LONG bmHeight;
    LONG bmWidthBytes;
    WORD bmPlanes;
    WORD bmBitsPixel;
    ULONG cbSize;
     byte pBuffer[ 1 ];
    } 	userBITMAP;

typedef struct _userHBITMAP
    {
    long fContext;
      union __MIDL_IWinTypes_0007
        {
         long hInproc;
         userBITMAP *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHBITMAP;

typedef struct _userHPALETTE
    {
    long fContext;
      union __MIDL_IWinTypes_0008
        {
         long hInproc;
         LOGPALETTE *hRemote;
         __int64 hInproc64;
        } 	u;
    } 	userHPALETTE;

typedef struct _RemotableHandle
    {
    long fContext;
      union __MIDL_IWinTypes_0009
        {
         long hInproc;
         long hRemote;
        } 	u;
    } 	RemotableHandle;

typedef    RemotableHandle *wireHWND;

typedef    RemotableHandle *wireHMENU;

typedef    RemotableHandle *wireHACCEL;

typedef    RemotableHandle *wireHBRUSH;

typedef    RemotableHandle *wireHFONT;

typedef    RemotableHandle *wireHDC;

typedef    RemotableHandle *wireHICON;

typedef    RemotableHandle *wireHRGN;

typedef    RemotableHandle *wireHMONITOR;

























#line 560 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"



















































typedef    userHBITMAP *wireHBITMAP;

typedef    userHPALETTE *wireHPALETTE;

typedef    userHENHMETAFILE *wireHENHMETAFILE;

typedef    userHMETAFILE *wireHMETAFILE;

typedef    userHMETAFILEPICT *wireHMETAFILEPICT;














#line 635 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"
typedef  void *HMETAFILEPICT;



extern RPC_IF_HANDLE IWinTypes_v0_1_c_ifspec;
extern RPC_IF_HANDLE IWinTypes_v0_1_s_ifspec;
#line 642 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"


 



#pragma warning(push)
#line 650 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"
#pragma warning(disable:4201)
#line 652 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"
typedef double DATE;












#line 666 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"

typedef union tagCY {
    struct {




        unsigned long Lo;
        long      Hi;
#line 676 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"
    } ;
    LONGLONG int64;
} CY;
#line 680 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"
#line 681 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"
typedef CY *LPCY;













#line 696 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"

typedef struct tagDEC {
    USHORT wReserved;
    union {
        struct {
            BYTE scale;
            BYTE sign;
        } ;
        USHORT signscale;
    } ;
    ULONG Hi32;
    union {
        struct {




            ULONG Lo32;
            ULONG Mid32;
#line 716 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"
        } ;
        ULONGLONG Lo64;
    } ;
} DECIMAL;



#line 724 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"
typedef DECIMAL *LPDECIMAL;



#pragma warning(pop)


#line 732 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"
#line 733 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"
typedef    FLAGGED_WORD_BLOB *wireBSTR;


typedef  OLECHAR *BSTR;



#line 741 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"
typedef BSTR *LPBSTR;


typedef short VARIANT_BOOL;





#line 751 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"


#line 754 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"





typedef struct tagBSTRBLOB
    {
    ULONG cbSize;
     BYTE *pData;
    } 	BSTRBLOB;

typedef struct tagBSTRBLOB *LPBSTRBLOB;

#line 768 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"


typedef struct tagCLIPDATA
    {
    ULONG cbSize;
    long ulClipFmt;
     BYTE *pClipData;
    } 	CLIPDATA;



typedef unsigned short VARTYPE;




























































enum VARENUM
    {
        VT_EMPTY	= 0,
        VT_NULL	= 1,
        VT_I2	= 2,
        VT_I4	= 3,
        VT_R4	= 4,
        VT_R8	= 5,
        VT_CY	= 6,
        VT_DATE	= 7,
        VT_BSTR	= 8,
        VT_DISPATCH	= 9,
        VT_ERROR	= 10,
        VT_BOOL	= 11,
        VT_VARIANT	= 12,
        VT_UNKNOWN	= 13,
        VT_DECIMAL	= 14,
        VT_I1	= 16,
        VT_UI1	= 17,
        VT_UI2	= 18,
        VT_UI4	= 19,
        VT_I8	= 20,
        VT_UI8	= 21,
        VT_INT	= 22,
        VT_UINT	= 23,
        VT_VOID	= 24,
        VT_HRESULT	= 25,
        VT_PTR	= 26,
        VT_SAFEARRAY	= 27,
        VT_CARRAY	= 28,
        VT_USERDEFINED	= 29,
        VT_LPSTR	= 30,
        VT_LPWSTR	= 31,
        VT_RECORD	= 36,
        VT_INT_PTR	= 37,
        VT_UINT_PTR	= 38,
        VT_FILETIME	= 64,
        VT_BLOB	= 65,
        VT_STREAM	= 66,
        VT_STORAGE	= 67,
        VT_STREAMED_OBJECT	= 68,
        VT_STORED_OBJECT	= 69,
        VT_BLOB_OBJECT	= 70,
        VT_CF	= 71,
        VT_CLSID	= 72,
        VT_VERSIONED_STREAM	= 73,
        VT_BSTR_BLOB	= 0xfff,
        VT_VECTOR	= 0x1000,
        VT_ARRAY	= 0x2000,
        VT_BYREF	= 0x4000,
        VT_RESERVED	= 0x8000,
        VT_ILLEGAL	= 0xffff,
        VT_ILLEGALMASKED	= 0xfff,
        VT_TYPEMASK	= 0xfff
    } ;
typedef ULONG PROPID;



typedef struct _tagpropertykey
    {
    GUID fmtid;
    DWORD pid;
    } 	PROPERTYKEY;

#line 906 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"
typedef struct tagCSPLATFORM
    {
    DWORD dwPlatformId;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    DWORD dwProcessorArch;
    } 	CSPLATFORM;

typedef struct tagQUERYCONTEXT
    {
    DWORD dwContext;
    CSPLATFORM Platform;
    LCID Locale;
    DWORD dwVersionHi;
    DWORD dwVersionLo;
    } 	QUERYCONTEXT;

typedef  
enum tagTYSPEC
    {
        TYSPEC_CLSID	= 0,
        TYSPEC_FILEEXT	= ( TYSPEC_CLSID + 1 ) ,
        TYSPEC_MIMETYPE	= ( TYSPEC_FILEEXT + 1 ) ,
        TYSPEC_FILENAME	= ( TYSPEC_MIMETYPE + 1 ) ,
        TYSPEC_PROGID	= ( TYSPEC_FILENAME + 1 ) ,
        TYSPEC_PACKAGENAME	= ( TYSPEC_PROGID + 1 ) ,
        TYSPEC_OBJECTID	= ( TYSPEC_PACKAGENAME + 1 ) 
    } 	TYSPEC;

typedef  struct __MIDL___MIDL_itf_wtypes_0000_0001_0001
    {
    DWORD tyspec;
      union __MIDL___MIDL_itf_wtypes_0000_0001_0005
        {
         CLSID clsid;
         LPOLESTR pFileExt;
         LPOLESTR pMimeType;
         LPOLESTR pProgId;
         LPOLESTR pFileName;
         struct 
            {
            LPOLESTR pPackageName;
            GUID PolicyId;
            } 	ByName;
         struct 
            {
            GUID ObjectId;
            GUID PolicyId;
            } 	ByObjectId;
        } 	tagged_union;
    } 	uCLSSPEC;



extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_wtypes_0000_0001_v0_0_s_ifspec;






}
#line 970 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"

#line 972 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\wtypes.h"


#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"






































extern "C" const GUID  GUID_DEVINTERFACE_DISK;
extern "C" const GUID  GUID_DEVINTERFACE_CDROM;
extern "C" const GUID  GUID_DEVINTERFACE_PARTITION;
extern "C" const GUID  GUID_DEVINTERFACE_TAPE;
extern "C" const GUID  GUID_DEVINTERFACE_WRITEONCEDISK;
extern "C" const GUID  GUID_DEVINTERFACE_VOLUME;
extern "C" const GUID  GUID_DEVINTERFACE_MEDIUMCHANGER;
extern "C" const GUID  GUID_DEVINTERFACE_FLOPPY;
extern "C" const GUID  GUID_DEVINTERFACE_CDCHANGER;
extern "C" const GUID  GUID_DEVINTERFACE_STORAGEPORT;
extern "C" const GUID  GUID_DEVINTERFACE_VMLUN;
extern "C" const GUID  GUID_DEVINTERFACE_SES;








extern "C" const GUID  GUID_DEVINTERFACE_HIDDEN_VOLUME;

extern "C" const GUID  GUID_DEVINTERFACE_COMPORT;
extern "C" const GUID  GUID_DEVINTERFACE_SERENUM_BUS_ENUMERATOR;






















#line 86 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"












































































































































































#line 259 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"






extern "C" {
#line 267 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"





























































































































typedef struct _STORAGE_HOTPLUG_INFO {
    DWORD Size; 
    BOOLEAN MediaRemovable; 
    BOOLEAN MediaHotplug;   
    BOOLEAN DeviceHotplug;  
    BOOLEAN WriteCacheEnableOverride; 
} STORAGE_HOTPLUG_INFO, *PSTORAGE_HOTPLUG_INFO;












typedef struct _STORAGE_DEVICE_NUMBER {

    
    
    

    DWORD DeviceType;

    
    
    

    DWORD       DeviceNumber;

    
    
    
    

    DWORD       PartitionNumber;
} STORAGE_DEVICE_NUMBER, *PSTORAGE_DEVICE_NUMBER;





typedef struct _STORAGE_BUS_RESET_REQUEST {
    BYTE  PathId;
} STORAGE_BUS_RESET_REQUEST, *PSTORAGE_BUS_RESET_REQUEST;





typedef struct STORAGE_BREAK_RESERVATION_REQUEST {
        DWORD Length;
        BYTE  _unused;
    BYTE  PathId;
    BYTE  TargetId;
    BYTE  Lun;
} STORAGE_BREAK_RESERVATION_REQUEST, *PSTORAGE_BREAK_RESERVATION_REQUEST;












typedef struct _PREVENT_MEDIA_REMOVAL {
    BOOLEAN PreventMediaRemoval;
} PREVENT_MEDIA_REMOVAL, *PPREVENT_MEDIA_REMOVAL;







typedef struct _CLASS_MEDIA_CHANGE_CONTEXT {
        DWORD MediaChangeCount;
        DWORD NewState;         
} CLASS_MEDIA_CHANGE_CONTEXT, *PCLASS_MEDIA_CHANGE_CONTEXT;





typedef struct _TAPE_STATISTICS {
    DWORD Version;
    DWORD Flags;
    LARGE_INTEGER RecoveredWrites;
    LARGE_INTEGER UnrecoveredWrites;
    LARGE_INTEGER RecoveredReads;
    LARGE_INTEGER UnrecoveredReads;
    BYTE          CompressionRatioReads;
    BYTE          CompressionRatioWrites;
} TAPE_STATISTICS, *PTAPE_STATISTICS;








typedef struct _TAPE_GET_STATISTICS {
    DWORD Operation;
} TAPE_GET_STATISTICS, *PTAPE_GET_STATISTICS;










typedef enum _STORAGE_MEDIA_TYPE {
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DDS_4mm = 0x20,            
    MiniQic,                   
    Travan,                    
    QIC,                       
    MP_8mm,                    
    AME_8mm,                   
    AIT1_8mm,                  
    DLT,                       
    NCTP,                      
    IBM_3480,                  
    IBM_3490E,                 
    IBM_Magstar_3590,          
    IBM_Magstar_MP,            
    STK_DATA_D3,               
    SONY_DTF,                  
    DV_6mm,                    
    DMI,                       
    SONY_D2,                   
    CLEANER_CARTRIDGE,         
    CD_ROM,                    
    CD_R,                      
    CD_RW,                     
    DVD_ROM,                   
    DVD_R,                     
    DVD_RW,                    
    MO_3_RW,                   
    MO_5_WO,                   
    MO_5_RW,                   
    MO_5_LIMDOW,               
    PC_5_WO,                   
    PC_5_RW,                   
    PD_5_RW,                   
    ABL_5_WO,                  
    PINNACLE_APEX_5_RW,        
    SONY_12_WO,                
    PHILIPS_12_WO,             
    HITACHI_12_WO,             
    CYGNET_12_WO,              
    KODAK_14_WO,               
    MO_NFR_525,                
    NIKON_12_RW,               
    IOMEGA_ZIP,                
    IOMEGA_JAZ,                
    SYQUEST_EZ135,             
    SYQUEST_EZFLYER,           
    SYQUEST_SYJET,             
    AVATAR_F2,                 
    MP2_8mm,                   
    DST_S,                     
    DST_M,                     
    DST_L,                     
    VXATape_1,                 
    VXATape_2,                 


#line 600 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
    STK_9840,                  
#line 602 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
    LTO_Ultrium,               
    LTO_Accelis,               
    DVD_RAM,                   
    AIT_8mm,                   
    ADR_1,                     
    ADR_2,
    STK_9940,                  
    SAIT,                      
    VXATape                    
}STORAGE_MEDIA_TYPE, *PSTORAGE_MEDIA_TYPE;














typedef enum _STORAGE_BUS_TYPE {
    BusTypeUnknown = 0x00,
    BusTypeScsi,
    BusTypeAtapi,
    BusTypeAta,
    BusType1394,
    BusTypeSsa,
    BusTypeFibre,
    BusTypeUsb,
    BusTypeRAID,
    BusTypeiScsi,
    BusTypeSas,
    BusTypeSata,
    BusTypeSd,
    BusTypeMmc,
    BusTypeVirtual,
    BusTypeFileBackedVirtual,
    BusTypeSpaces,
    BusTypeMax,
    BusTypeMaxReserved = 0x7F
} STORAGE_BUS_TYPE, *PSTORAGE_BUS_TYPE;













typedef struct _DEVICE_MEDIA_INFO {
    union {
        struct {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics; 
        } DiskInfo;

        struct {
            LARGE_INTEGER Cylinders;
            STORAGE_MEDIA_TYPE MediaType;
            DWORD TracksPerCylinder;
            DWORD SectorsPerTrack;
            DWORD BytesPerSector;
            DWORD NumberMediaSides;
            DWORD MediaCharacteristics; 
        } RemovableDiskInfo;

        struct {
            STORAGE_MEDIA_TYPE MediaType;
            DWORD   MediaCharacteristics; 
            DWORD   CurrentBlockSize;
            STORAGE_BUS_TYPE BusType;

            
            
            

            union {
                struct {
                    BYTE  MediumType;
                    BYTE  DensityCode;
                } ScsiInformation;
            } BusSpecificData;

        } TapeInfo;
    } DeviceSpecific;
} DEVICE_MEDIA_INFO, *PDEVICE_MEDIA_INFO;

typedef struct _GET_MEDIA_TYPES {
    DWORD DeviceType;              
    DWORD MediaInfoCount;
    DEVICE_MEDIA_INFO MediaInfo[1];
} GET_MEDIA_TYPES, *PGET_MEDIA_TYPES;














typedef struct _STORAGE_PREDICT_FAILURE
{
    DWORD PredictFailure;
    BYTE  VendorSpecific[512];
} STORAGE_PREDICT_FAILURE, *PSTORAGE_PREDICT_FAILURE;



























typedef enum _STORAGE_QUERY_TYPE {
    PropertyStandardQuery = 0,          
    PropertyExistsQuery,                
    PropertyMaskQuery,                  
    PropertyQueryMaxDefined     
} STORAGE_QUERY_TYPE, *PSTORAGE_QUERY_TYPE;





typedef enum _STORAGE_PROPERTY_ID {
    StorageDeviceProperty = 0,
    StorageAdapterProperty,
    StorageDeviceIdProperty,
    StorageDeviceUniqueIdProperty,              
    StorageDeviceWriteCacheProperty,
    StorageMiniportProperty,
    StorageAccessAlignmentProperty,
    StorageDeviceSeekPenaltyProperty,
    StorageDeviceTrimProperty,
    StorageDeviceWriteAggregationProperty,
    StorageDeviceDeviceTelemetryProperty,
    StorageDeviceLBProvisioningProperty,
    StorageDevicePowerProperty,
    StorageDeviceCopyOffloadProperty,
    StorageDeviceResiliencyProperty
} STORAGE_PROPERTY_ID, *PSTORAGE_PROPERTY_ID;






typedef struct _STORAGE_PROPERTY_QUERY {

    
    
    

    STORAGE_PROPERTY_ID PropertyId;

    
    
    

    STORAGE_QUERY_TYPE QueryType;

    
    
    

    BYTE  AdditionalParameters[1];

} STORAGE_PROPERTY_QUERY, *PSTORAGE_PROPERTY_QUERY;






typedef   struct _STORAGE_DESCRIPTOR_HEADER {

    DWORD Version;

    DWORD Size;

} STORAGE_DESCRIPTOR_HEADER, *PSTORAGE_DESCRIPTOR_HEADER;









typedef   struct _STORAGE_DEVICE_DESCRIPTOR {

    
    
    

    DWORD Version;

    
    
    
    

    DWORD Size;

    
    
    

    BYTE  DeviceType;

    
    
    

    BYTE  DeviceTypeModifier;

    
    
    
    

    BOOLEAN RemovableMedia;

    
    
    
    
    

    BOOLEAN CommandQueueing;

    
    
    
    

    DWORD VendorIdOffset;

    
    
    
    

    DWORD ProductIdOffset;

    
    
    
    
    

    DWORD ProductRevisionOffset;

    
    
    
    

    DWORD SerialNumberOffset;

    
    
    
    
    

    STORAGE_BUS_TYPE BusType;

    
    
    
    

    DWORD RawPropertiesLength;

    
    
    

    BYTE  RawDeviceProperties[1];

} STORAGE_DEVICE_DESCRIPTOR, *PSTORAGE_DEVICE_DESCRIPTOR;










typedef   struct _STORAGE_ADAPTER_DESCRIPTOR {

    DWORD Version;

    DWORD Size;

    DWORD MaximumTransferLength;

    DWORD MaximumPhysicalPages;

    DWORD AlignmentMask;

    BOOLEAN AdapterUsesPio;

    BOOLEAN AdapterScansDown;

    BOOLEAN CommandQueueing;

    BOOLEAN AcceleratedTransfer;



#line 957 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
    BYTE  BusType;
#line 959 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

    WORD   BusMajorVersion;

    WORD   BusMinorVersion;


    BYTE  SrbType;

    BYTE  AddressType;
#line 969 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

} STORAGE_ADAPTER_DESCRIPTOR, *PSTORAGE_ADAPTER_DESCRIPTOR;









#line 981 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"



#line 985 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"



#line 989 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

#line 991 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

typedef   struct _STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR {

    
    
    

    DWORD Version;

    
    
    
    

    DWORD Size;

    
    
    

    DWORD BytesPerCacheLine;

    
    
    

    DWORD BytesOffsetForCacheAlignment;

    
    
    

    DWORD BytesPerLogicalSector;

    
    
    

    DWORD BytesPerPhysicalSector;

    
    
    

    DWORD BytesOffsetForSectorAlignment;

} STORAGE_ACCESS_ALIGNMENT_DESCRIPTOR, *PSTORAGE_ACCESS_ALIGNMENT_DESCRIPTOR;



typedef enum _STORAGE_PORT_CODE_SET {
    StoragePortCodeSetReserved  = 0,
    StoragePortCodeSetStorport  = 1,
    StoragePortCodeSetSCSIport  = 2,
    StoragePortCodeSetSpaceport = 3,
    StoragePortCodeSetATAport   = 4,
    StoragePortCodeSetUSBport   = 5,
    StoragePortCodeSetSBP2port  = 6,
    StoragePortCodeSetSDport    = 7
} STORAGE_PORT_CODE_SET, *PSTORAGE_PORT_CODE_SET;

typedef struct _STORAGE_MINIPORT_DESCRIPTOR {

    DWORD Version;

    DWORD Size;

    STORAGE_PORT_CODE_SET Portdriver;

    BOOLEAN LUNResetSupported;

    BOOLEAN TargetResetSupported;


    WORD    IoTimeoutValue;
#line 1067 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

} STORAGE_MINIPORT_DESCRIPTOR, *PSTORAGE_MINIPORT_DESCRIPTOR;







typedef enum _STORAGE_IDENTIFIER_CODE_SET {
    StorageIdCodeSetReserved = 0,
    StorageIdCodeSetBinary = 1,
    StorageIdCodeSetAscii = 2,
    StorageIdCodeSetUtf8 = 3
} STORAGE_IDENTIFIER_CODE_SET, *PSTORAGE_IDENTIFIER_CODE_SET;

typedef enum _STORAGE_IDENTIFIER_TYPE {
    StorageIdTypeVendorSpecific = 0,
    StorageIdTypeVendorId = 1,
    StorageIdTypeEUI64 = 2,
    StorageIdTypeFCPHName = 3,
    StorageIdTypePortRelative = 4,
    StorageIdTypeTargetPortGroup = 5,
    StorageIdTypeLogicalUnitGroup = 6,
    StorageIdTypeMD5LogicalUnitIdentifier = 7,
    StorageIdTypeScsiNameString = 8
} STORAGE_IDENTIFIER_TYPE, *PSTORAGE_IDENTIFIER_TYPE;





typedef enum _STORAGE_ID_NAA_FORMAT {
        StorageIdNAAFormatIEEEExtended = 2,
        StorageIdNAAFormatIEEERegistered = 3,
        StorageIdNAAFormatIEEEERegisteredExtended = 5
} STORAGE_ID_NAA_FORMAT, *PSTORAGE_ID_NAA_FORMAT;

typedef enum _STORAGE_ASSOCIATION_TYPE {
    StorageIdAssocDevice = 0,
    StorageIdAssocPort = 1,
    StorageIdAssocTarget = 2
} STORAGE_ASSOCIATION_TYPE, *PSTORAGE_ASSOCIATION_TYPE;

typedef struct _STORAGE_IDENTIFIER {
    STORAGE_IDENTIFIER_CODE_SET CodeSet;
    STORAGE_IDENTIFIER_TYPE Type;
    WORD   IdentifierSize;
    WORD   NextOffset;

    
    
    
    

    STORAGE_ASSOCIATION_TYPE Association;

    
    
    

    BYTE  Identifier[1];
} STORAGE_IDENTIFIER, *PSTORAGE_IDENTIFIER;

typedef   struct _STORAGE_DEVICE_ID_DESCRIPTOR {

    DWORD Version;

    DWORD Size;

    
    
    

    DWORD NumberOfIdentifiers;

    
    
    
    
    

    BYTE  Identifiers[1];
} STORAGE_DEVICE_ID_DESCRIPTOR, *PSTORAGE_DEVICE_ID_DESCRIPTOR;


typedef struct _DEVICE_SEEK_PENALTY_DESCRIPTOR {
    DWORD       Version;          
    DWORD       Size;             

    BOOLEAN     IncursSeekPenalty;
} DEVICE_SEEK_PENALTY_DESCRIPTOR, *PDEVICE_SEEK_PENALTY_DESCRIPTOR;


typedef struct _DEVICE_WRITE_AGGREGATION_DESCRIPTOR {
    DWORD       Version;          
    DWORD       Size;             

    BOOLEAN     BenefitsFromWriteAggregation;
} DEVICE_WRITE_AGGREGATION_DESCRIPTOR, *PDEVICE_WRITE_AGGREGATION_DESCRIPTOR;


typedef struct _DEVICE_TRIM_DESCRIPTOR {
    DWORD       Version;          
    DWORD       Size;             

    BOOLEAN     TrimEnabled;
} DEVICE_TRIM_DESCRIPTOR, *PDEVICE_TRIM_DESCRIPTOR;

#pragma warning(push)
#pragma warning(disable:4214) 



typedef struct _DEVICE_LB_PROVISIONING_DESCRIPTOR {
    DWORD       Version;          
    DWORD       Size;             

    BYTE  ThinProvisioningEnabled : 1;
    BYTE  ThinProvisioningReadZeros : 1;
    BYTE  AnchorSupported : 3;
    BYTE  UnmapGranularityAlignmentValid : 1;
    BYTE  Reserved0 : 2;
    BYTE  Reserved1[7];
    DWORDLONG OptimalUnmapGranularity;          
    DWORDLONG UnmapGranularityAlignment;    
} DEVICE_LB_PROVISIONING_DESCRIPTOR, *PDEVICE_LB_PROVISIONING_DESCRIPTOR;












typedef struct _STORAGE_LB_PROVISIONING_MAP_RESOURCES {
    DWORD       Size;
    DWORD       Version;
    BYTE        AvailableMappingResourcesValid : 1;
    BYTE        UsedMappingResourcesValid : 1;
    BYTE        Reserved0 : 6;
    BYTE        Reserved1[3];
    BYTE        AvailableMappingResourcesScope : 2; 
    BYTE        UsedMappingResourcesScope : 2;
    BYTE        Reserved2 : 4;
    BYTE        Reserved3[3];
    DWORDLONG   AvailableMappingResources;  
    DWORDLONG   UsedMappingResources;       
} STORAGE_LB_PROVISIONING_MAP_RESOURCES, *PSTORAGE_LB_PROVISIONING_MAP_RESOURCES;

#pragma warning(pop)


typedef struct _DEVICE_POWER_DESCRIPTOR {
    DWORD       Version;          
    DWORD       Size;             

    BOOLEAN     DeviceAttentionSupported;   
    BOOLEAN     AsynchronousNotificationSupported;  
    BOOLEAN     IdlePowerManagementEnabled; 
    BOOLEAN     D3ColdEnabled;              
    BOOLEAN     D3ColdSupported;            
    BYTE        Reserved[3];
    DWORD       IdleTimeoutInMS;            
} DEVICE_POWER_DESCRIPTOR, *PDEVICE_POWER_DESCRIPTOR;




typedef struct _DEVICE_COPY_OFFLOAD_DESCRIPTOR {
    DWORD       Version;          
    DWORD       Size;             

    DWORD       MaximumTokenLifetime;
    DWORD       DefaultTokenLifetime;
    DWORDLONG   MaximumTransferSize;
    DWORDLONG   OptimalTransferCount;
    DWORD       MaximumDataDescriptors;
    DWORD       MaximumTransferLengthPerDescriptor;
    DWORD       OptimalTransferLengthPerDescriptor;
    WORD        OptimalTransferLengthGranularity;
    BYTE        Reserved[2];
} DEVICE_COPY_OFFLOAD_DESCRIPTOR, *PDEVICE_COPY_OFFLOAD_DESCRIPTOR;





typedef   struct _STORAGE_DEVICE_RESILIENCY_DESCRIPTOR {

    
    
    
    

    DWORD Version;

    
    
    
    

    DWORD Size;

    
    
    
    

    DWORD NameOffset;

    
    
    
    

    DWORD NumberOfLogicalCopies;

    
    
    
    

    DWORD NumberOfPhysicalCopies;

    
    
    
    

    DWORD PhysicalDiskRedundancy;

    
    
    
    

    DWORD NumberOfColumns;

    
    
    
    

    DWORD Interleave;

} STORAGE_DEVICE_RESILIENCY_DESCRIPTOR, *PSTORAGE_DEVICE_RESILIENCY_DESCRIPTOR;












































typedef DWORD DEVICE_DATA_MANAGEMENT_SET_ACTION;

    
    
    
    
    
    
    
    
    
    
    







































typedef struct _DEVICE_DATA_SET_RANGE {
    LONGLONG    StartingOffset;        
    DWORDLONG   LengthInBytes;         
} DEVICE_DATA_SET_RANGE, *PDEVICE_DATA_SET_RANGE;









typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES {
    DWORD                               Size;                   
    DEVICE_DATA_MANAGEMENT_SET_ACTION   Action;

    DWORD                               Flags;                  

    DWORD                               ParameterBlockOffset;   
    DWORD                               ParameterBlockLength;   

    DWORD                               DataSetRangesOffset;    
    DWORD                               DataSetRangesLength;    

} DEVICE_MANAGE_DATA_SET_ATTRIBUTES, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES;






typedef struct _DEVICE_DSM_NOTIFICATION_PARAMETERS {

    DWORD                               Size;                   

    DWORD                               Flags;                  

    DWORD                               NumFileTypeIDs;         

    GUID                                FileTypeID[1];          

} DEVICE_DSM_NOTIFICATION_PARAMETERS, *PDEVICE_DSM_NOTIFICATION_PARAMETERS;


























#pragma warning(push)
#pragma warning(disable:4201) 
typedef struct _STORAGE_OFFLOAD_TOKEN {
    BYTE  TokenType[4];
    BYTE  Reserved[2];
    BYTE  TokenIdLength[2];
    union {
        struct {
            BYTE  Reserved2[0x1F8];
        } StorageOffloadZeroDataToken;
        BYTE  Token[0x1F8];
    };
} STORAGE_OFFLOAD_TOKEN, *PSTORAGE_OFFLOAD_TOKEN;
#pragma warning(pop)



















typedef struct _DEVICE_DSM_OFFLOAD_READ_PARAMETERS {
    DWORD       Flags;                                          
    DWORD       TimeToLive;                                     
    DWORD       Reserved[2];                                    
} DEVICE_DSM_OFFLOAD_READ_PARAMETERS, *PDEVICE_DSM_OFFLOAD_READ_PARAMETERS;

typedef struct _DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS {
    DWORD Flags;                                                
    DWORD Reserved;                                             
    DWORDLONG TokenOffset;                                      
    STORAGE_OFFLOAD_TOKEN Token;                                
} DEVICE_DSM_OFFLOAD_WRITE_PARAMETERS, *PDEVICE_DSM_OFFLOAD_WRITE_PARAMETERS;





typedef struct _DEVICE_DATA_SET_REPAIR_PARAMETERS {

    DWORD NumberOfRepairCopies;                 
    DWORD SourceCopy;                           
    DWORD RepairCopies[1];          

} DEVICE_DATA_SET_REPAIR_PARAMETERS, *PDEVICE_DATA_SET_REPAIR_PARAMETERS;













typedef struct _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT {

    DWORD Size;                                                 

    DEVICE_DATA_MANAGEMENT_SET_ACTION Action;                   

    DWORD       Flags;                                          
    DWORD       OperationStatus;                                
    DWORD       ExtendedError;                                  
    DWORD       TargetDetailedError;                            
    DWORD       ReservedStatus;                                 

    DWORD       OutputBlockOffset;                              
    DWORD       OutputBlockLength;                              

} DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT, *PDEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT;





typedef struct _DEVICE_DATA_SET_LB_PROVISIONING_STATE {

    DWORD     Size;                                 
    DWORD     Version;                              
    DWORDLONG SlabSizeInBytes;                      
    DWORD     SlabOffsetDeltaInBytes;               
    DWORD     SlabAllocationBitMapBitCount;         
    DWORD     SlabAllocationBitMapLength;           
    DWORD     SlabAllocationBitMap[1];  

} DEVICE_DATA_SET_LB_PROVISIONING_STATE, *PDEVICE_DATA_SET_LB_PROVISIONING_STATE;

typedef struct _STORAGE_OFFLOAD_READ_OUTPUT {

    DWORD       OffloadReadFlags;                               
    DWORD       Reserved;
    DWORDLONG   LengthProtected;                                
    DWORD       TokenLength;                                    
    STORAGE_OFFLOAD_TOKEN Token;                                

} STORAGE_OFFLOAD_READ_OUTPUT, *PSTORAGE_OFFLOAD_READ_OUTPUT;







typedef struct _STORAGE_OFFLOAD_WRITE_OUTPUT {

    DWORD       OffloadWriteFlags;                               
    DWORD       Reserved;                                        
    DWORDLONG   LengthCopied;                                    

} STORAGE_OFFLOAD_WRITE_OUTPUT, *PSTORAGE_OFFLOAD_WRITE_OUTPUT;












typedef struct _DEVICE_DATA_SET_SCRUB_OUTPUT {

    DWORDLONG BytesProcessed;                                   
    DWORDLONG BytesRepaired;                                    
    DWORDLONG BytesFailed;                                      

} DEVICE_DATA_SET_SCRUB_OUTPUT, *PDEVICE_DATA_SET_SCRUB_OUTPUT;

















typedef struct _STORAGE_GET_BC_PROPERTIES_OUTPUT {

    
    
    
    
    DWORD MaximumRequestsPerPeriod;

    
    
    
    
    DWORD MinimumPeriod;

    
    
    
    
    
    
    DWORDLONG MaximumRequestSize;

    
    
    
    
    
    DWORD EstimatedTimePerRequest;

    
    
    
    
    
    
    
    DWORD NumOutStandingRequests;

    
    
    
    
    
    DWORDLONG RequestSize;

} STORAGE_GET_BC_PROPERTIES_OUTPUT, *PSTORAGE_GET_BC_PROPERTIES_OUTPUT;


















typedef struct _STORAGE_ALLOCATE_BC_STREAM_INPUT {

    
    
    
    DWORD Version;

    
    
    
    
    DWORD RequestsPerPeriod;

    
    
    
    
    DWORD Period;

    
    
    
    
    BOOLEAN RetryFailures;

    
    
    
    
    BOOLEAN Discardable;

    
    
    
    BOOLEAN Reserved1[2];

    
    
    
    
    DWORD AccessType;

    
    
    
    
    DWORD AccessMode;

} STORAGE_ALLOCATE_BC_STREAM_INPUT, *PSTORAGE_ALLOCATE_BC_STREAM_INPUT;

typedef struct _STORAGE_ALLOCATE_BC_STREAM_OUTPUT {

    
    
    
    
    DWORDLONG RequestSize;

    
    
    
    
    
    DWORD NumOutStandingRequests;

} STORAGE_ALLOCATE_BC_STREAM_OUTPUT, *PSTORAGE_ALLOCATE_BC_STREAM_OUTPUT;























typedef struct _STORAGE_PRIORITY_HINT_SUPPORT {
    DWORD SupportFlags;
} STORAGE_PRIORITY_HINT_SUPPORT, *PSTORAGE_PRIORITY_HINT_SUPPORT;



#pragma warning(push)
#pragma warning(disable:4200)



typedef struct _STORAGE_MEDIA_SERIAL_NUMBER_DATA {

    WORD   Reserved;

    
    
    
    
    

    WORD   SerialNumberLength;

    
    
    
    
    


    BYTE  SerialNumber[0];
#line 1830 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

} STORAGE_MEDIA_SERIAL_NUMBER_DATA, *PSTORAGE_MEDIA_SERIAL_NUMBER_DATA;

#line 1834 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

typedef   struct _STORAGE_READ_CAPACITY {

    
    
    
    DWORD Version;

    
    
    
    DWORD Size;

    
    
    

    DWORD BlockLength;

    
    
    
    

    LARGE_INTEGER NumberOfBlocks;

    
    
    

    LARGE_INTEGER DiskLength;

} STORAGE_READ_CAPACITY, *PSTORAGE_READ_CAPACITY;

#pragma warning(pop)








typedef enum _WRITE_CACHE_TYPE {
    WriteCacheTypeUnknown,
    WriteCacheTypeNone,
    WriteCacheTypeWriteBack,
    WriteCacheTypeWriteThrough
} WRITE_CACHE_TYPE;

typedef enum _WRITE_CACHE_ENABLE {
    WriteCacheEnableUnknown,
    WriteCacheDisabled,
    WriteCacheEnabled
} WRITE_CACHE_ENABLE;

typedef enum _WRITE_CACHE_CHANGE {
    WriteCacheChangeUnknown,
    WriteCacheNotChangeable,
    WriteCacheChangeable
} WRITE_CACHE_CHANGE;

typedef enum _WRITE_THROUGH {
    WriteThroughUnknown,
    WriteThroughNotSupported,
    WriteThroughSupported
} WRITE_THROUGH;

typedef   struct _STORAGE_WRITE_CACHE_PROPERTY {

    
    
    
    
    DWORD Version;

    
    
    
    
    DWORD Size;

    
    
    
    WRITE_CACHE_TYPE WriteCacheType;

    
    
    
    WRITE_CACHE_ENABLE WriteCacheEnabled;

    
    
    
    WRITE_CACHE_CHANGE WriteCacheChangeable;

    
    
    
    WRITE_THROUGH WriteThroughSupported;

    
    
    
    BOOLEAN FlushCacheSupported;

    
    
    
    BOOLEAN UserDefinedPowerProtection;

    
    
    
    BOOLEAN NVCacheEnabled;

} STORAGE_WRITE_CACHE_PROPERTY, *PSTORAGE_WRITE_CACHE_PROPERTY;

#pragma warning(push)
#pragma warning(disable:4200) 
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 




typedef struct _PERSISTENT_RESERVE_COMMAND {

    DWORD Version;
    DWORD Size;

    union {

        struct {

            
            
            

            BYTE  ServiceAction : 5;
            BYTE  Reserved1 : 3;

            
            
            

            WORD   AllocationLength;

        } PR_IN;

        struct {

            
            
            

            BYTE  ServiceAction : 5;
            BYTE  Reserved1 : 3;

            
            
            

            BYTE  Type : 4;
            BYTE  Scope : 4;

            
            
            


            BYTE  ParameterList[0];
#line 2008 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

        } PR_OUT;
    };

} PERSISTENT_RESERVE_COMMAND, *PPERSISTENT_RESERVE_COMMAND;

#line 2015 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
#pragma warning(pop)










#pragma warning(push)























typedef enum _DEVICEDUMP_COLLECTION_TYPE {
    TCCollectionBugCheck = 1,                   
    TCCollectionApplicationRequested,           
    TCCollectionDeviceRequested                 
} DEVICEDUMP_COLLECTION_TYPEIDE_NOTIFICATION_TYPE, *PDEVICEDUMP_COLLECTION_TYPE;













#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 2069 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"


















typedef struct _DEVICEDUMP_SUBSECTION_POINTER {
        DWORD    dwSize;        
        DWORD    dwFlags;       
        DWORD    dwOffset;      
} DEVICEDUMP_SUBSECTION_POINTER,*PDEVICEDUMP_SUBSECTION_POINTER;




typedef struct _DEVICEDUMP_STRUCTURE_VERSION {
        
        
        
        DWORD   dwSignature;

        
        
        
        DWORD   dwVersion;

        
        
        
        DWORD   dwSize;

} DEVICEDUMP_STRUCTURE_VERSION, *PDEVICEDUMP_STRUCTURE_VERSION;




typedef  struct _DEVICEDUMP_SECTION_HEADER {
        
        
        
        GUID    guidDeviceDataId;

        
        
        

        
        
        
        
        
        
        BYTE     sOrganizationID[16];

        
        
        
        DWORD    dwFirmwareRevision;

        
        
        
        BYTE    sModelNumber[32];

        
        
        
        BYTE    szDeviceManufacturingID[32];       

        
        
        
        
        
        DWORD  dwFlags;

        
        
        
        DWORD bRestrictedPrivateDataVersion;

        
        
        
        
        DWORD dwFirmwareIssueId;                

        
        
        
        BYTE     szIssueDescriptionString[132];      

} DEVICEDUMP_SECTION_HEADER, *PDEVICEDUMP_SECTION_HEADER;


























typedef struct _GP_LOG_PAGE_DESCRIPTOR {
        WORD    LogAddress;
        WORD    LogSectors;
} GP_LOG_PAGE_DESCRIPTOR,*PGP_LOG_PAGE_DESCRIPTOR;

typedef struct _DEVICEDUMP_PUBLIC_SUBSECTION {
        DWORD   dwFlags;
        GP_LOG_PAGE_DESCRIPTOR  GPLogTable[16];
        CHAR    szDescription[16]; 
        BYTE    bData[1];      
} DEVICEDUMP_PUBLIC_SUBSECTION, *PDEVICEDUMP_PUBLIC_SUBSECTION;




typedef struct _DEVICEDUMP_RESTRICTED_SUBSECTION {

        BYTE    bData[1];           

} DEVICEDUMP_RESTRICTED_SUBSECTION, *PDEVICEDUMP_RESTRICTED_SUBSECTION;




typedef struct _DEVICEDUMP_PRIVATE_SUBSECTION {

        DWORD   dwFlags;
        GP_LOG_PAGE_DESCRIPTOR GPLogId;

        BYTE    bData[1];   

} DEVICEDUMP_PRIVATE_SUBSECTION, *PDEVICEDUMP_PRIVATE_SUBSECTION;




typedef   struct _DEVICEDUMP_STORAGEDEVICE_DATA {

        
        
        
        DEVICEDUMP_STRUCTURE_VERSION    Descriptor;

        
        
        
        DEVICEDUMP_SECTION_HEADER SectionHeader;

        
        
        
        DWORD   dwBufferSize;

        
        
        
        DWORD   dwReasonForCollection;

        
        
        
        DEVICEDUMP_SUBSECTION_POINTER PublicData;
        DEVICEDUMP_SUBSECTION_POINTER RestrictedData;
        DEVICEDUMP_SUBSECTION_POINTER PrivateData;

} DEVICEDUMP_STORAGEDEVICE_DATA, *PDEVICEDUMP_STORAGEDEVICE_DATA;



















typedef struct _DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD {
        
        BYTE      Cdb[16];

        
        BYTE      Command[16];

        
        DWORDLONG StartTime;

        
        DWORDLONG EndTime;

        
        DWORD  OperationStatus;

        
        DWORD   OperationError;

        
        union {
         struct {
                DWORD dwReserved;
                } ExternalStack;

         struct {
                DWORD   dwAtaPortSpecific;
         }  AtaPort;

         struct {
                DWORD   SrbTag  ;
         }  StorPort;

        } StackSpecific;

} DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD,*PDEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD;


typedef   struct _DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP {

        
        
        
        DEVICEDUMP_STRUCTURE_VERSION    Descriptor;

        
        
        
        DWORD   dwReasonForCollection;

        
        
        
        BYTE    cDriverName[16];

        
        
        
        
        DWORD   uiNumRecords;

        DEVICEDUMP_STORAGESTACK_PUBLIC_STATE_RECORD RecordArray[1]; 

} DEVICEDUMP_STORAGESTACK_PUBLIC_DUMP,*PDEVICEDUMP_STORAGESTACK_PUBLIC_DUMP;


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 2352 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"











#pragma warning(push)
#pragma warning(disable:4214) 











typedef struct _STORAGE_IDLE_POWER {
    DWORD Version;              
    DWORD Size;                 
    DWORD WakeCapableHint : 1;  
    DWORD D3ColdSupported : 1;  
    DWORD Reserved : 30;
    DWORD D3IdleTimeout;        
} STORAGE_IDLE_POWER, *PSTORAGE_IDLE_POWER;

#pragma warning(pop)










typedef enum _STORAGE_POWERUP_REASON_TYPE {
  StoragePowerupUnknown           = 0,
  StoragePowerupIO,
  StoragePowerupDeviceAttention
} STORAGE_POWERUP_REASON_TYPE, *PSTORAGE_POWERUP_REASON_TYPE;

typedef struct _STORAGE_IDLE_POWERUP_REASON {
    DWORD Version;                          
    DWORD Size;                             
    STORAGE_POWERUP_REASON_TYPE PowerupReason;   
} STORAGE_IDLE_POWERUP_REASON, *PSTORAGE_IDLE_POWERUP_REASON;












typedef struct _STORAGE_EVENT_NOTIFICATION {
    DWORD Version;                          
    DWORD Size;                             
    DWORDLONG Events;                       
} STORAGE_EVENT_NOTIFICATION, *PSTORAGE_EVENT_NOTIFICATION;









#pragma warning(pop)











}
#line 2447 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"


#line 2450 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"






#pragma region Desktop Family





#pragma warning(push)
#pragma warning(disable:4201) 
#pragma warning(disable:4214) 
#line 2466 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
#line 2467 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"







































#line 2507 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"















#line 2523 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"









#line 2533 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"









#line 2543 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

#line 2545 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"



















#line 2565 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

























































































#line 2655 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"








#line 2664 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"




























































typedef enum _MEDIA_TYPE {
    Unknown,                
    F5_1Pt2_512,            
    F3_1Pt44_512,           
    F3_2Pt88_512,           
    F3_20Pt8_512,           
    F3_720_512,             
    F5_360_512,             
    F5_320_512,             
    F5_320_1024,            
    F5_180_512,             
    F5_160_512,             
    RemovableMedia,         
    FixedMedia,             
    F3_120M_512,            
    F3_640_512,             
    F5_640_512,             
    F5_720_512,             
    F3_1Pt2_512,            
    F3_1Pt23_1024,          
    F5_1Pt23_1024,          
    F3_128Mb_512,           
    F3_230Mb_512,           
    F8_256_128,             
    F3_200Mb_512,           
    F3_240M_512,            
    F3_32M_512              
} MEDIA_TYPE, *PMEDIA_TYPE;






typedef struct _FORMAT_PARAMETERS {
   MEDIA_TYPE MediaType;
   DWORD StartCylinderNumber;
   DWORD EndCylinderNumber;
   DWORD StartHeadNumber;
   DWORD EndHeadNumber;
} FORMAT_PARAMETERS, *PFORMAT_PARAMETERS;








typedef WORD   BAD_TRACK_NUMBER;
typedef WORD   *PBAD_TRACK_NUMBER;






typedef struct _FORMAT_EX_PARAMETERS {
   MEDIA_TYPE MediaType;
   DWORD StartCylinderNumber;
   DWORD EndCylinderNumber;
   DWORD StartHeadNumber;
   DWORD EndHeadNumber;
   WORD   FormatGapLength;
   WORD   SectorsPerTrack;
   WORD   SectorNumber[1];
} FORMAT_EX_PARAMETERS, *PFORMAT_EX_PARAMETERS;







typedef struct _DISK_GEOMETRY {
    LARGE_INTEGER Cylinders;
    MEDIA_TYPE MediaType;
    DWORD TracksPerCylinder;
    DWORD SectorsPerTrack;
    DWORD BytesPerSector;
} DISK_GEOMETRY, *PDISK_GEOMETRY;
















typedef struct _PARTITION_INFORMATION {
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER PartitionLength;
    DWORD HiddenSectors;
    DWORD PartitionNumber;
    BYTE  PartitionType;
    BOOLEAN BootIndicator;
    BOOLEAN RecognizedPartition;
    BOOLEAN RewritePartition;
} PARTITION_INFORMATION, *PPARTITION_INFORMATION;







typedef struct _SET_PARTITION_INFORMATION {
    BYTE  PartitionType;
} SET_PARTITION_INFORMATION, *PSET_PARTITION_INFORMATION;






typedef struct _DRIVE_LAYOUT_INFORMATION {
    DWORD PartitionCount;
    DWORD Signature;
    PARTITION_INFORMATION PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION, *PDRIVE_LAYOUT_INFORMATION;






typedef struct _VERIFY_INFORMATION {
    LARGE_INTEGER StartingOffset;
    DWORD Length;
} VERIFY_INFORMATION, *PVERIFY_INFORMATION;






typedef struct _REASSIGN_BLOCKS {
    WORD   Reserved;
    WORD   Count;
    DWORD BlockNumber[1];
} REASSIGN_BLOCKS, *PREASSIGN_BLOCKS;






#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 2880 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
typedef struct _REASSIGN_BLOCKS_EX {
    WORD   Reserved;
    WORD   Count;
    LARGE_INTEGER BlockNumber[1];
} REASSIGN_BLOCKS_EX, *PREASSIGN_BLOCKS_EX;
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 2886 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
















typedef enum _PARTITION_STYLE {
    PARTITION_STYLE_MBR,
    PARTITION_STYLE_GPT,
    PARTITION_STYLE_RAW
} PARTITION_STYLE;







typedef struct _PARTITION_INFORMATION_GPT {
    GUID PartitionType;                 
    GUID PartitionId;                   
    DWORD64 Attributes;                 
    WCHAR Name [36];                    
} PARTITION_INFORMATION_GPT, *PPARTITION_INFORMATION_GPT;























typedef struct _PARTITION_INFORMATION_MBR {
    BYTE  PartitionType;
    BOOLEAN BootIndicator;
    BOOLEAN RecognizedPartition;
    DWORD HiddenSectors;
} PARTITION_INFORMATION_MBR, *PPARTITION_INFORMATION_MBR;










typedef SET_PARTITION_INFORMATION SET_PARTITION_INFORMATION_MBR;
typedef PARTITION_INFORMATION_GPT SET_PARTITION_INFORMATION_GPT;


typedef struct _SET_PARTITION_INFORMATION_EX {
    PARTITION_STYLE PartitionStyle;
    union {
        SET_PARTITION_INFORMATION_MBR Mbr;
        SET_PARTITION_INFORMATION_GPT Gpt;
    } ;
} SET_PARTITION_INFORMATION_EX, *PSET_PARTITION_INFORMATION_EX;







typedef struct _CREATE_DISK_GPT {
    GUID DiskId;                    
    DWORD MaxPartitionCount;        
} CREATE_DISK_GPT, *PCREATE_DISK_GPT;






typedef struct _CREATE_DISK_MBR {
    DWORD Signature;
} CREATE_DISK_MBR, *PCREATE_DISK_MBR;


typedef struct _CREATE_DISK {
    PARTITION_STYLE PartitionStyle;
    union {
        CREATE_DISK_MBR Mbr;
        CREATE_DISK_GPT Gpt;
    } ;
} CREATE_DISK, *PCREATE_DISK;








typedef struct _GET_LENGTH_INFORMATION {
    LARGE_INTEGER   Length;
} GET_LENGTH_INFORMATION, *PGET_LENGTH_INFORMATION;







typedef struct _PARTITION_INFORMATION_EX {
    PARTITION_STYLE PartitionStyle;
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER PartitionLength;
    DWORD PartitionNumber;
    BOOLEAN RewritePartition;
    union {
        PARTITION_INFORMATION_MBR Mbr;
        PARTITION_INFORMATION_GPT Gpt;
    } ;
} PARTITION_INFORMATION_EX, *PPARTITION_INFORMATION_EX;






typedef struct _DRIVE_LAYOUT_INFORMATION_GPT {
    GUID DiskId;
    LARGE_INTEGER StartingUsableOffset;
    LARGE_INTEGER UsableLength;
    DWORD MaxPartitionCount;
} DRIVE_LAYOUT_INFORMATION_GPT, *PDRIVE_LAYOUT_INFORMATION_GPT;






typedef struct _DRIVE_LAYOUT_INFORMATION_MBR {
    DWORD Signature;
} DRIVE_LAYOUT_INFORMATION_MBR, *PDRIVE_LAYOUT_INFORMATION_MBR;






typedef struct _DRIVE_LAYOUT_INFORMATION_EX {
    DWORD PartitionStyle;
    DWORD PartitionCount;
    union {
        DRIVE_LAYOUT_INFORMATION_MBR Mbr;
        DRIVE_LAYOUT_INFORMATION_GPT Gpt;
    } ;
    PARTITION_INFORMATION_EX PartitionEntry[1];
} DRIVE_LAYOUT_INFORMATION_EX, *PDRIVE_LAYOUT_INFORMATION_EX;


#line 3067 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"









typedef enum _DETECTION_TYPE {
        DetectNone,
        DetectInt13,
        DetectExInt13
} DETECTION_TYPE;

typedef struct _DISK_INT13_INFO {
        WORD   DriveSelect;
        DWORD MaxCylinders;
        WORD   SectorsPerTrack;
        WORD   MaxHeads;
        WORD   NumberDrives;
} DISK_INT13_INFO, *PDISK_INT13_INFO;

typedef struct _DISK_EX_INT13_INFO {
        WORD   ExBufferSize;
        WORD   ExFlags;
        DWORD ExCylinders;
        DWORD ExHeads;
        DWORD ExSectorsPerTrack;
        DWORD64 ExSectorsPerDrive;
        WORD   ExSectorSize;
        WORD   ExReserved;
} DISK_EX_INT13_INFO, *PDISK_EX_INT13_INFO;


#pragma warning(push)
#pragma warning(disable:4201) 
#line 3105 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

typedef struct _DISK_DETECTION_INFO {
        DWORD SizeOfDetectInfo;
        DETECTION_TYPE DetectionType;
        union {
                struct {

                        
                        
                        
                        

                        DISK_INT13_INFO Int13;

                        
                        
                        
                        

                        DISK_EX_INT13_INFO ExInt13;     
                } ;
        } ;
} DISK_DETECTION_INFO, *PDISK_DETECTION_INFO;


typedef struct _DISK_PARTITION_INFO {
        DWORD SizeOfPartitionInfo;
        PARTITION_STYLE PartitionStyle;                 
        union {
                struct {                                                        
                        DWORD Signature;                                
                        DWORD CheckSum;                                 
                } Mbr;
                struct {                                                        
                        GUID DiskId;
                } Gpt;
        } ;
} DISK_PARTITION_INFO, *PDISK_PARTITION_INFO;


#pragma warning(pop)
#line 3147 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"














#line 3162 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"






#line 3169 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
typedef struct _DISK_GEOMETRY_EX {
        DISK_GEOMETRY Geometry;                                 
        LARGE_INTEGER DiskSize;                                 
        BYTE  Data[1];                                                  
} DISK_GEOMETRY_EX, *PDISK_GEOMETRY_EX;

#line 3176 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"








typedef struct _DISK_CONTROLLER_NUMBER {
    DWORD ControllerNumber;
    DWORD DiskNumber;
} DISK_CONTROLLER_NUMBER, *PDISK_CONTROLLER_NUMBER;
#line 3189 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

























typedef enum {
    EqualPriority,
    KeepPrefetchedData,
    KeepReadData
} DISK_CACHE_RETENTION_PRIORITY;







#line 3227 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

typedef struct _DISK_CACHE_INFORMATION {

    
    
    
    
    

    BOOLEAN ParametersSavable;

    
    
    

    BOOLEAN ReadCacheEnabled;
    BOOLEAN WriteCacheEnabled;

    
    
    
    
    
    

    DISK_CACHE_RETENTION_PRIORITY ReadRetentionPriority;
    DISK_CACHE_RETENTION_PRIORITY WriteRetentionPriority;

    
    
    
    

    WORD   DisablePrefetchTransferLength;

    
    
    
    
    

    BOOLEAN PrefetchScalar;

    
    
    
    
    
    
    

    union {
        struct {
            WORD   Minimum;
            WORD   Maximum;

            
            
            
            

            WORD   MaximumBlocks;
        } ScalarPrefetch;

        struct {
            WORD   Minimum;
            WORD   Maximum;
        } BlockPrefetch;
    } ;

} DISK_CACHE_INFORMATION, *PDISK_CACHE_INFORMATION;








typedef struct _DISK_GROW_PARTITION {
    DWORD PartitionNumber;
    LARGE_INTEGER BytesToGrow;
} DISK_GROW_PARTITION, *PDISK_GROW_PARTITION;
#line 3311 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"



















typedef struct _HISTOGRAM_BUCKET {
    DWORD       Reads;
    DWORD       Writes;
} HISTOGRAM_BUCKET, *PHISTOGRAM_BUCKET;



typedef struct _DISK_HISTOGRAM {
    LARGE_INTEGER   DiskSize;
    LARGE_INTEGER   Start;
    LARGE_INTEGER   End;
    LARGE_INTEGER   Average;
    LARGE_INTEGER   AverageRead;
    LARGE_INTEGER   AverageWrite;
    DWORD           Granularity;
    DWORD           Size;
    DWORD           ReadCount;
    DWORD           WriteCount;
    PHISTOGRAM_BUCKET  Histogram;
} DISK_HISTOGRAM, *PDISK_HISTOGRAM;























typedef struct _DISK_PERFORMANCE {
        LARGE_INTEGER BytesRead;
        LARGE_INTEGER BytesWritten;
        LARGE_INTEGER ReadTime;
        LARGE_INTEGER WriteTime;
        LARGE_INTEGER IdleTime;
        DWORD ReadCount;
        DWORD WriteCount;
        DWORD QueueDepth;
        DWORD SplitCount;
        LARGE_INTEGER QueryTime;
        DWORD   StorageDeviceNumber;
        WCHAR   StorageManagerName[8];
} DISK_PERFORMANCE, *PDISK_PERFORMANCE;







typedef struct _DISK_RECORD {
   LARGE_INTEGER ByteOffset;
   LARGE_INTEGER StartTime;
   LARGE_INTEGER EndTime;
   PVOID VirtualAddress;
   DWORD NumberOfBytes;
   BYTE  DeviceNumber;
   BOOLEAN ReadRequest;
} DISK_RECORD, *PDISK_RECORD;






typedef struct _DISK_LOGGING {
    BYTE  Function;
    PVOID BufferAddress;
    DWORD BufferSize;
} DISK_LOGGING, *PDISK_LOGGING;





































typedef enum _BIN_TYPES {
    RequestSize,
    RequestLocation
} BIN_TYPES;





typedef struct _BIN_RANGE {
    LARGE_INTEGER StartValue;
    LARGE_INTEGER Length;
} BIN_RANGE, *PBIN_RANGE;





typedef struct _PERF_BIN {
    DWORD NumberOfBins;
    DWORD TypeOfBin;
    BIN_RANGE BinsRanges[1];
} PERF_BIN, *PPERF_BIN ;





typedef struct _BIN_COUNT {
    BIN_RANGE BinRange;
    DWORD BinCount;
} BIN_COUNT, *PBIN_COUNT;





typedef struct _BIN_RESULTS {
    DWORD NumberOfBins;
    BIN_COUNT BinCounts[1];
} BIN_RESULTS, *PBIN_RESULTS;









#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 3502 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
typedef struct _GETVERSIONINPARAMS {
        BYTE     bVersion;               
        BYTE     bRevision;              
        BYTE     bReserved;              
        BYTE     bIDEDeviceMap;          
        DWORD   fCapabilities;          
        DWORD   dwReserved[4];          
} GETVERSIONINPARAMS, *PGETVERSIONINPARAMS, *LPGETVERSIONINPARAMS;
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 3511 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"













#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 3525 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
typedef struct _IDEREGS {
        BYTE     bFeaturesReg;           
        BYTE     bSectorCountReg;        
        BYTE     bSectorNumberReg;       
        BYTE     bCylLowReg;             
        BYTE     bCylHighReg;            
        BYTE     bDriveHeadReg;          
        BYTE     bCommandReg;            
        BYTE     bReserved;                      
} IDEREGS, *PIDEREGS, *LPIDEREGS;
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 3536 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"








                                        
                                        














#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 3561 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
typedef struct _SENDCMDINPARAMS {
        DWORD   cBufferSize;            
        IDEREGS irDriveRegs;            
        BYTE     bDriveNumber;           
                                                                
        BYTE     bReserved[3];           
        DWORD   dwReserved[4];          
        BYTE     bBuffer[1];                     
} SENDCMDINPARAMS, *PSENDCMDINPARAMS, *LPSENDCMDINPARAMS;
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 3571 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"





#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 3577 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
typedef struct _DRIVERSTATUS {
        BYTE     bDriverError;           
                                                                
        BYTE     bIDEError;                      
                                                                
                                                                
        BYTE     bReserved[2];           
        DWORD   dwReserved[2];          
} DRIVERSTATUS, *PDRIVERSTATUS, *LPDRIVERSTATUS;
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 3587 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
















                                        











#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 3616 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
typedef struct _SENDCMDOUTPARAMS {
        DWORD                   cBufferSize;            
        DRIVERSTATUS            DriverStatus;           
        BYTE                    bBuffer[1];             
} SENDCMDOUTPARAMS, *PSENDCMDOUTPARAMS, *LPSENDCMDOUTPARAMS;
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 3622 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"






















#line 3645 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"






















typedef struct _GET_DISK_ATTRIBUTES {

    
    
    
    
    DWORD Version;

    
    
    
    DWORD Reserved1;

    
    
    
    
    DWORDLONG Attributes;

} GET_DISK_ATTRIBUTES, *PGET_DISK_ATTRIBUTES;











typedef struct _SET_DISK_ATTRIBUTES {

    
    
    
    
    DWORD Version;

    
    
    
    
    
    BOOLEAN Persist;

    
    
    
    BYTE  Reserved1[3];

    
    
    
    DWORDLONG Attributes;

    
    
    
    
    DWORDLONG AttributesMask;

    
    
    
    DWORD Reserved2[4];

} SET_DISK_ATTRIBUTES, *PSET_DISK_ATTRIBUTES;






#pragma warning(pop)
#line 3743 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
#line 3744 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"


#line 3747 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
#pragma endregion

#line 3750 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"






























typedef  enum _ELEMENT_TYPE {
    AllElements,        
    ChangerTransport,   
    ChangerSlot,        
    ChangerIEPort,      
    ChangerDrive,       
    ChangerDoor,        
    ChangerKeypad,      
    ChangerMaxElement   
} ELEMENT_TYPE, *PELEMENT_TYPE;

typedef  struct _CHANGER_ELEMENT {
    ELEMENT_TYPE    ElementType;
    DWORD   ElementAddress;
} CHANGER_ELEMENT, *PCHANGER_ELEMENT;

typedef  struct _CHANGER_ELEMENT_LIST {
    CHANGER_ELEMENT Element;
    DWORD   NumberOfElements;
} CHANGER_ELEMENT_LIST , *PCHANGER_ELEMENT_LIST;
























                                                       







                                                       

                                                       



                                                       








                                                       










































typedef  struct _GET_CHANGER_PARAMETERS {

    
    
    

    DWORD Size;

    
    
    

    WORD   NumberTransportElements;
    WORD   NumberStorageElements;                
    WORD   NumberCleanerSlots;                   
    WORD   NumberIEElements;
    WORD   NumberDataTransferElements;

    
    
    

    WORD   NumberOfDoors;

    
    
    
    

    WORD   FirstSlotNumber;
    WORD   FirstDriveNumber;
    WORD   FirstTransportNumber;
    WORD   FirstIEPortNumber;
    WORD   FirstCleanerSlotAddress;

    
    
    

    WORD   MagazineSize;

    
    
    
    

    DWORD DriveCleanTimeout;

    
    
    

    DWORD Features0;
    DWORD Features1;

    
    
    
    

    BYTE  MoveFromTransport;
    BYTE  MoveFromSlot;
    BYTE  MoveFromIePort;
    BYTE  MoveFromDrive;

    
    
    
    

    BYTE  ExchangeFromTransport;
    BYTE  ExchangeFromSlot;
    BYTE  ExchangeFromIePort;
    BYTE  ExchangeFromDrive;

    
    
    
    

    BYTE  LockUnlockCapabilities;

    
    
    
    

    BYTE  PositionCapabilities;

    
    
    

    BYTE  Reserved1[2];
    DWORD Reserved2[2];

} GET_CHANGER_PARAMETERS, * PGET_CHANGER_PARAMETERS;






typedef  struct _CHANGER_PRODUCT_DATA {

    
    
    

    BYTE  VendorId[8];

    
    
    

    BYTE  ProductId[16];

    
    
    

    BYTE  Revision[4];

    
    
    
    

    BYTE  SerialNumber[32];

    
    
    

    BYTE  DeviceType;

} CHANGER_PRODUCT_DATA, *PCHANGER_PRODUCT_DATA;











typedef struct _CHANGER_SET_ACCESS {

    
    
    

    CHANGER_ELEMENT Element;

    
    
    

    DWORD           Control;
} CHANGER_SET_ACCESS, *PCHANGER_SET_ACCESS;










typedef struct _CHANGER_READ_ELEMENT_STATUS {

    
    
    

    CHANGER_ELEMENT_LIST ElementList;

    
    
    

    BOOLEAN VolumeTagInfo;
} CHANGER_READ_ELEMENT_STATUS, *PCHANGER_READ_ELEMENT_STATUS;





typedef  struct _CHANGER_ELEMENT_STATUS {

    
    
    

    CHANGER_ELEMENT Element;

    
    
    
    
    

    CHANGER_ELEMENT SrcElementAddress;

    
    
    

    DWORD Flags;

    
    
    

    DWORD ExceptionCode;

    
    
    
    

    BYTE  TargetId;

    
    
    
    

    BYTE  Lun;
    WORD   Reserved;

    
    
    
    

    BYTE  PrimaryVolumeID[36];

    
    
    
    
    

    BYTE  AlternateVolumeID[36];

} CHANGER_ELEMENT_STATUS, *PCHANGER_ELEMENT_STATUS;







typedef  struct _CHANGER_ELEMENT_STATUS_EX {

    
    
    

    CHANGER_ELEMENT Element;

    
    
    
    
    

    CHANGER_ELEMENT SrcElementAddress;

    
    
    

    DWORD Flags;

    
    
    

    DWORD ExceptionCode;

    
    
    
    

    BYTE  TargetId;

    
    
    
    

    BYTE  Lun;
    WORD   Reserved;

    
    
    
    

    BYTE  PrimaryVolumeID[36];

    
    
    
    
    

    BYTE  AlternateVolumeID[36];

    
    
    
    BYTE  VendorIdentification[8];

    
    
    
    BYTE  ProductIdentification[16];

    
    
    
    BYTE  SerialNumber[32];

} CHANGER_ELEMENT_STATUS_EX, *PCHANGER_ELEMENT_STATUS_EX;








































typedef struct _CHANGER_INITIALIZE_ELEMENT_STATUS {

    
    
    

    CHANGER_ELEMENT_LIST ElementList;

    
    
    
    

    BOOLEAN BarCodeScan;
} CHANGER_INITIALIZE_ELEMENT_STATUS, *PCHANGER_INITIALIZE_ELEMENT_STATUS;






typedef struct _CHANGER_SET_POSITION {


    
    
    

    CHANGER_ELEMENT Transport;

    
    
    

    CHANGER_ELEMENT Destination;

    
    
    

    BOOLEAN         Flip;
} CHANGER_SET_POSITION, *PCHANGER_SET_POSITION;






typedef struct _CHANGER_EXCHANGE_MEDIUM {

    
    
    

    CHANGER_ELEMENT Transport;

    
    
    

    CHANGER_ELEMENT Source;

    
    
    

    CHANGER_ELEMENT Destination1;

    
    
    

    CHANGER_ELEMENT Destination2;

    
    
    

    BOOLEAN         Flip1;
    BOOLEAN         Flip2;
} CHANGER_EXCHANGE_MEDIUM, *PCHANGER_EXCHANGE_MEDIUM;






typedef struct _CHANGER_MOVE_MEDIUM {

    
    
    

    CHANGER_ELEMENT Transport;

    
    
    

    CHANGER_ELEMENT Source;

    
    
    

    CHANGER_ELEMENT Destination;

    
    
    

    BOOLEAN         Flip;
} CHANGER_MOVE_MEDIUM, *PCHANGER_MOVE_MEDIUM;











typedef  struct _CHANGER_SEND_VOLUME_TAG_INFORMATION {

    
    
    

    CHANGER_ELEMENT StartingElement;

    
    
    

    DWORD ActionCode;

    
    
    

    BYTE  VolumeIDTemplate[40];
} CHANGER_SEND_VOLUME_TAG_INFORMATION, *PCHANGER_SEND_VOLUME_TAG_INFORMATION;






typedef struct _READ_ELEMENT_ADDRESS_INFO {

    
    
    

    DWORD NumberOfElements;

    
    
    
    

    CHANGER_ELEMENT_STATUS ElementStatus[1];
} READ_ELEMENT_ADDRESS_INFO, *PREAD_ELEMENT_ADDRESS_INFO;


























typedef enum _CHANGER_DEVICE_PROBLEM_TYPE {
   DeviceProblemNone,
   DeviceProblemHardware,
   DeviceProblemCHMError,
   DeviceProblemDoorOpen,
   DeviceProblemCalibrationError,
   DeviceProblemTargetFailure,
   DeviceProblemCHMMoveError,
   DeviceProblemCHMZeroError,
   DeviceProblemCartridgeInsertError,
   DeviceProblemPositionError,
   DeviceProblemSensorError,
   DeviceProblemCartridgeEjectError,
   DeviceProblemGripperError,
   DeviceProblemDriveError
} CHANGER_DEVICE_PROBLEM_TYPE, *PCHANGER_DEVICE_PROBLEM_TYPE;








































































































#line 4573 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"










































#line 4616 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"














































#line 4663 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"



#line 4667 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"




#line 4672 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"



#line 4676 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"





#line 4682 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"



#line 4686 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"





















#line 4708 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"





#line 4714 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"



#line 4718 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"











#line 4730 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"










#line 4741 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
















#line 4758 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"






























typedef struct _PATHNAME_BUFFER {

    DWORD PathNameLength;
    WCHAR Name[1];

} PATHNAME_BUFFER, *PPATHNAME_BUFFER;







typedef struct _FSCTL_QUERY_FAT_BPB_BUFFER {

    BYTE  First0x24BytesOfBootSector[0x24];

} FSCTL_QUERY_FAT_BPB_BUFFER, *PFSCTL_QUERY_FAT_BPB_BUFFER;












typedef struct {

    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    DWORD BytesPerSector;
    DWORD BytesPerCluster;
    DWORD BytesPerFileRecordSegment;
    DWORD ClustersPerFileRecordSegment;
    LARGE_INTEGER MftValidDataLength;
    LARGE_INTEGER MftStartLcn;
    LARGE_INTEGER Mft2StartLcn;
    LARGE_INTEGER MftZoneStart;
    LARGE_INTEGER MftZoneEnd;

} NTFS_VOLUME_DATA_BUFFER, *PNTFS_VOLUME_DATA_BUFFER;

typedef struct {

    DWORD ByteCount;

    WORD   MajorVersion;
    WORD   MinorVersion;

    DWORD BytesPerPhysicalSector;

    WORD   LfsMajorVersion;
    WORD   LfsMinorVersion;

} NTFS_EXTENDED_VOLUME_DATA, *PNTFS_EXTENDED_VOLUME_DATA;
#line 4851 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"










typedef struct {

    DWORD ByteCount;
    DWORD MajorVersion;
    DWORD MinorVersion;
    
    DWORD BytesPerPhysicalSector;
    
    LARGE_INTEGER VolumeSerialNumber;
    LARGE_INTEGER NumberSectors;
    LARGE_INTEGER TotalClusters;
    LARGE_INTEGER FreeClusters;
    LARGE_INTEGER TotalReserved;
    DWORD BytesPerSector;
    DWORD BytesPerCluster;
    LARGE_INTEGER MaximumSizeOfResidentFile;
    
    LARGE_INTEGER Reserved[10];

} REFS_VOLUME_DATA_BUFFER, *PREFS_VOLUME_DATA_BUFFER;

#line 4883 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"









typedef struct {

    LARGE_INTEGER StartingLcn;

} STARTING_LCN_INPUT_BUFFER, *PSTARTING_LCN_INPUT_BUFFER;

typedef struct {

    LARGE_INTEGER StartingLcn;
    LARGE_INTEGER BitmapSize;
    BYTE  Buffer[1];

} VOLUME_BITMAP_BUFFER, *PVOLUME_BITMAP_BUFFER;
#line 4906 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"








typedef struct {

    LARGE_INTEGER StartingVcn;

} STARTING_VCN_INPUT_BUFFER, *PSTARTING_VCN_INPUT_BUFFER;

typedef struct RETRIEVAL_POINTERS_BUFFER {

    DWORD ExtentCount;
    LARGE_INTEGER StartingVcn;
    struct {
        LARGE_INTEGER NextVcn;
        LARGE_INTEGER Lcn;
    } Extents[1];

} RETRIEVAL_POINTERS_BUFFER, *PRETRIEVAL_POINTERS_BUFFER;
#line 4931 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"








typedef struct {

    LARGE_INTEGER FileReferenceNumber;

} NTFS_FILE_RECORD_INPUT_BUFFER, *PNTFS_FILE_RECORD_INPUT_BUFFER;

typedef struct {

    LARGE_INTEGER FileReferenceNumber;
    DWORD FileRecordLength;
    BYTE  FileRecordBuffer[1];

} NTFS_FILE_RECORD_OUTPUT_BUFFER, *PNTFS_FILE_RECORD_OUTPUT_BUFFER;
#line 4953 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"








typedef struct {

    HANDLE FileHandle;
    LARGE_INTEGER StartingVcn;
    LARGE_INTEGER StartingLcn;
    DWORD ClusterCount;

} MOVE_FILE_DATA, *PMOVE_FILE_DATA;

typedef struct {

    HANDLE FileHandle;
    LARGE_INTEGER SourceFileRecord;
    LARGE_INTEGER TargetFileRecord;

} MOVE_FILE_RECORD_DATA, *PMOVE_FILE_RECORD_DATA;















#line 4993 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
#line 4994 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"








typedef struct {
    DWORD Restart;
    SID Sid;
} FIND_BY_SID_DATA, *PFIND_BY_SID_DATA;

typedef struct {
    DWORD NextEntryOffset;
    DWORD FileIndex;
    DWORD FileNameLength;
    WCHAR FileName[1];
} FIND_BY_SID_OUTPUT, *PFIND_BY_SID_OUTPUT;

#line 5015 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"












typedef struct {

    DWORDLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;

} MFT_ENUM_DATA_V0, *PMFT_ENUM_DATA_V0;

typedef struct {

    DWORDLONG StartFileReferenceNumber;
    USN LowUsn;
    USN HighUsn;
    WORD   MinMajorVersion;
    WORD   MaxMajorVersion;

} MFT_ENUM_DATA_V1, *PMFT_ENUM_DATA_V1;


typedef MFT_ENUM_DATA_V1 MFT_ENUM_DATA, *PMFT_ENUM_DATA;


#line 5050 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"







typedef struct {

    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;

} CREATE_USN_JOURNAL_DATA, *PCREATE_USN_JOURNAL_DATA;













typedef struct {

    WORD   MinMajorVersion;
    WORD   MaxMajorVersion;

} READ_FILE_USN_DATA, *PREAD_FILE_USN_DATA;








typedef struct {

    USN StartUsn;
    DWORD ReasonMask;
    DWORD ReturnOnlyOnClose;
    DWORDLONG Timeout;
    DWORDLONG BytesToWaitFor;
    DWORDLONG UsnJournalID;

} READ_USN_JOURNAL_DATA_V0, *PREAD_USN_JOURNAL_DATA_V0;

typedef struct {

    USN StartUsn;
    DWORD ReasonMask;
    DWORD ReturnOnlyOnClose;
    DWORDLONG Timeout;
    DWORDLONG BytesToWaitFor;
    DWORDLONG UsnJournalID;
    WORD   MinMajorVersion;
    WORD   MaxMajorVersion;

} READ_USN_JOURNAL_DATA_V1, *PREAD_USN_JOURNAL_DATA_V1;


typedef READ_USN_JOURNAL_DATA_V1 READ_USN_JOURNAL_DATA, *PREAD_USN_JOURNAL_DATA;


#line 5119 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"





















typedef struct {

    DWORD RecordLength;
    WORD   MajorVersion;
    WORD   MinorVersion;
    DWORDLONG FileReferenceNumber;
    DWORDLONG ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD SecurityId;
    DWORD FileAttributes;
    WORD   FileNameLength;
    WORD   FileNameOffset;
    WCHAR FileName[1];

} USN_RECORD_V2, *PUSN_RECORD_V2;

typedef struct {

    DWORD RecordLength;
    WORD   MajorVersion;
    WORD   MinorVersion;
    FILE_ID_128 FileReferenceNumber;
    FILE_ID_128 ParentFileReferenceNumber;
    USN Usn;
    LARGE_INTEGER TimeStamp;
    DWORD Reason;
    DWORD SourceInfo;
    DWORD SecurityId;
    DWORD FileAttributes;
    WORD   FileNameLength;
    WORD   FileNameOffset;
    WCHAR FileName[1];

} USN_RECORD_V3, *PUSN_RECORD_V3;

typedef USN_RECORD_V2 USN_RECORD, *PUSN_RECORD;

































typedef struct {

    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;

} USN_JOURNAL_DATA_V0, *PUSN_JOURNAL_DATA_V0;

typedef struct {

    DWORDLONG UsnJournalID;
    USN FirstUsn;
    USN NextUsn;
    USN LowestValidUsn;
    USN MaxUsn;
    DWORDLONG MaximumSize;
    DWORDLONG AllocationDelta;
    WORD   MinSupportedMajorVersion;
    WORD   MaxSupportedMajorVersion;

} USN_JOURNAL_DATA_V1, *PUSN_JOURNAL_DATA_V1;


typedef USN_JOURNAL_DATA_V1 USN_JOURNAL_DATA, *PUSN_JOURNAL_DATA;


#line 5243 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"







typedef struct {

    DWORDLONG UsnJournalID;
    DWORD DeleteFlags;

} DELETE_USN_JOURNAL_DATA, *PDELETE_USN_JOURNAL_DATA;













#pragma warning(push)
#line 5271 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
#pragma warning(disable:4201)       

typedef struct {


    union {
        DWORD UsnSourceInfo;
        DWORD CopyNumber;
    };


#line 5283 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

    HANDLE VolumeHandle;
    DWORD HandleInfo;

} MARK_HANDLE_INFO, *PMARK_HANDLE_INFO;




















#line 5309 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"


#pragma warning(pop)


#line 5315 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"















































#line 5363 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"






#line 5370 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"






#line 5377 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"






#line 5384 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"









typedef struct {

    ACCESS_MASK DesiredAccess;
    DWORD SecurityIds[1];

} BULK_SECURITY_TEST_DATA, *PBULK_SECURITY_TEST_DATA;
#line 5400 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"











#line 5412 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"






typedef struct _FILE_PREFETCH {
    DWORD Type;
    DWORD Count;
    DWORDLONG Prefetch[1];
} FILE_PREFETCH, *PFILE_PREFETCH;

typedef struct _FILE_PREFETCH_EX {
    DWORD Type;
    DWORD Count;
    PVOID Context;
    DWORDLONG Prefetch[1];
} FILE_PREFETCH_EX, *PFILE_PREFETCH_EX;








#line 5439 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"









typedef struct _FILESYSTEM_STATISTICS {

    WORD   FileSystemType;
    WORD   Version;                     

    DWORD SizeOfCompleteStructure;      

    DWORD UserFileReads;
    DWORD UserFileReadBytes;
    DWORD UserDiskReads;
    DWORD UserFileWrites;
    DWORD UserFileWriteBytes;
    DWORD UserDiskWrites;

    DWORD MetaDataReads;
    DWORD MetaDataReadBytes;
    DWORD MetaDataDiskReads;
    DWORD MetaDataWrites;
    DWORD MetaDataWriteBytes;
    DWORD MetaDataDiskWrites;

    
    
    

} FILESYSTEM_STATISTICS, *PFILESYSTEM_STATISTICS;












typedef struct _FAT_STATISTICS {
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;

    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;

    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
} FAT_STATISTICS, *PFAT_STATISTICS;

typedef struct _EXFAT_STATISTICS {
    DWORD CreateHits;
    DWORD SuccessfulCreates;
    DWORD FailedCreates;

    DWORD NonCachedReads;
    DWORD NonCachedReadBytes;
    DWORD NonCachedWrites;
    DWORD NonCachedWriteBytes;

    DWORD NonCachedDiskReads;
    DWORD NonCachedDiskWrites;
} EXFAT_STATISTICS, *PEXFAT_STATISTICS;

typedef struct _NTFS_STATISTICS {

    DWORD LogFileFullExceptions;
    DWORD OtherExceptions;

    
    
    

    DWORD MftReads;
    DWORD MftReadBytes;
    DWORD MftWrites;
    DWORD MftWriteBytes;
    struct {
        WORD   Write;
        WORD   Create;
        WORD   SetInfo;
        WORD   Flush;
    } MftWritesUserLevel;

    WORD   MftWritesFlushForLogFileFull;
    WORD   MftWritesLazyWriter;
    WORD   MftWritesUserRequest;

    DWORD Mft2Writes;
    DWORD Mft2WriteBytes;
    struct {
        WORD   Write;
        WORD   Create;
        WORD   SetInfo;
        WORD   Flush;
    } Mft2WritesUserLevel;

    WORD   Mft2WritesFlushForLogFileFull;
    WORD   Mft2WritesLazyWriter;
    WORD   Mft2WritesUserRequest;

    DWORD RootIndexReads;
    DWORD RootIndexReadBytes;
    DWORD RootIndexWrites;
    DWORD RootIndexWriteBytes;

    DWORD BitmapReads;
    DWORD BitmapReadBytes;
    DWORD BitmapWrites;
    DWORD BitmapWriteBytes;

    WORD   BitmapWritesFlushForLogFileFull;
    WORD   BitmapWritesLazyWriter;
    WORD   BitmapWritesUserRequest;

    struct {
        WORD   Write;
        WORD   Create;
        WORD   SetInfo;
    } BitmapWritesUserLevel;

    DWORD MftBitmapReads;
    DWORD MftBitmapReadBytes;
    DWORD MftBitmapWrites;
    DWORD MftBitmapWriteBytes;

    WORD   MftBitmapWritesFlushForLogFileFull;
    WORD   MftBitmapWritesLazyWriter;
    WORD   MftBitmapWritesUserRequest;

    struct {
        WORD   Write;
        WORD   Create;
        WORD   SetInfo;
        WORD   Flush;
    } MftBitmapWritesUserLevel;

    DWORD UserIndexReads;
    DWORD UserIndexReadBytes;
    DWORD UserIndexWrites;
    DWORD UserIndexWriteBytes;

    
    
    

    DWORD LogFileReads;
    DWORD LogFileReadBytes;
    DWORD LogFileWrites;
    DWORD LogFileWriteBytes;

    struct {
        DWORD Calls;                
        DWORD Clusters;             
        DWORD Hints;                

        DWORD RunsReturned;         

        DWORD HintsHonored;         
        DWORD HintsClusters;        
        DWORD Cache;                
        DWORD CacheClusters;        
        DWORD CacheMiss;            
        DWORD CacheMissClusters;    
    } Allocate;

} NTFS_STATISTICS, *PNTFS_STATISTICS;












#pragma warning(push)
#line 5631 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
#pragma warning(disable:4201)       

typedef struct _FILE_OBJECTID_BUFFER {

    
    
    

    BYTE  ObjectId[16];

    
    
    
    

    union {
        struct {
            BYTE  BirthVolumeId[16];
            BYTE  BirthObjectId[16];
            BYTE  DomainId[16];
        } ;
        BYTE  ExtendedInfo[48];
    } ;

} FILE_OBJECTID_BUFFER, *PFILE_OBJECTID_BUFFER;


#pragma warning(pop)


#line 5662 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"

#line 5664 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"









typedef struct _FILE_SET_SPARSE_BUFFER {
    BOOLEAN SetSparse;
} FILE_SET_SPARSE_BUFFER, *PFILE_SET_SPARSE_BUFFER;


#line 5679 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"









typedef struct _FILE_ZERO_DATA_INFORMATION {

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER BeyondFinalZero;

} FILE_ZERO_DATA_INFORMATION, *PFILE_ZERO_DATA_INFORMATION;
#line 5695 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"















typedef struct _FILE_ALLOCATED_RANGE_BUFFER {

    LARGE_INTEGER FileOffset;
    LARGE_INTEGER Length;

} FILE_ALLOCATED_RANGE_BUFFER, *PFILE_ALLOCATED_RANGE_BUFFER;
#line 5717 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
















typedef struct _ENCRYPTION_BUFFER {

    DWORD EncryptionOperation;
    BYTE  Private[1];

} ENCRYPTION_BUFFER, *PENCRYPTION_BUFFER;













typedef struct _DECRYPTION_STATUS_BUFFER {

    BOOLEAN NoEncryptedStreams;

} DECRYPTION_STATUS_BUFFER, *PDECRYPTION_STATUS_BUFFER;











typedef struct _REQUEST_RAW_ENCRYPTED_DATA {

    
    
    
    
    
    

    LONGLONG FileOffset;
    DWORD Length;

} REQUEST_RAW_ENCRYPTED_DATA, *PREQUEST_RAW_ENCRYPTED_DATA;

























typedef struct _ENCRYPTED_DATA_INFO {

    
    
    
    
    
    

    DWORDLONG StartingFileOffset;

    
    
    
    
    
    
    

    DWORD OutputBufferOffset;

    
    
    
    
    
    
    
    

    DWORD BytesWithinFileSize;

    
    
    
    
    
    
    
    

    DWORD BytesWithinValidDataLength;

    
    
    
    
    
    

    WORD   CompressionFormat;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    BYTE  DataUnitShift;
    BYTE  ChunkShift;
    BYTE  ClusterShift;

    
    
    

    BYTE  EncryptionFormat;

    
    
    
    

    WORD   NumberOfDataBlocks;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    DWORD DataBlockSize[1];

} ENCRYPTED_DATA_INFO, *PENCRYPTED_DATA_INFO;
#line 5924 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"











typedef struct _EXTENDED_ENCRYPTED_DATA_INFO {

    
    
    
    
    
    

    DWORD ExtendedCode;

    
    
    

    DWORD Length;

    
    
    

    DWORD Flags;
    DWORD Reserved;

} EXTENDED_ENCRYPTED_DATA_INFO, *PEXTENDED_ENCRYPTED_DATA_INFO;
#line 5961 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"











typedef struct _PLEX_READ_DATA_REQUEST {

    
    
    
    
    
    
    
    
    

    LARGE_INTEGER ByteOffset;
    DWORD ByteLength;
    DWORD PlexNumber;

} PLEX_READ_DATA_REQUEST, *PPLEX_READ_DATA_REQUEST;
#line 5990 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"











typedef struct _SI_COPYFILE {
    DWORD SourceFileNameLength;
    DWORD DestinationFileNameLength;
    DWORD Flags;
    WCHAR FileNameBuffer[1];
} SI_COPYFILE, *PSI_COPYFILE;




#line 6012 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"








typedef struct _FILE_MAKE_COMPATIBLE_BUFFER {
    BOOLEAN CloseDisc;
} FILE_MAKE_COMPATIBLE_BUFFER, *PFILE_MAKE_COMPATIBLE_BUFFER;







typedef struct _FILE_SET_DEFECT_MGMT_BUFFER {
    BOOLEAN Disable;
} FILE_SET_DEFECT_MGMT_BUFFER, *PFILE_SET_DEFECT_MGMT_BUFFER;







typedef struct _FILE_QUERY_SPARING_BUFFER {
    DWORD SparingUnitBytes;
    BOOLEAN SoftwareSparing;
    DWORD TotalSpareBlocks;
    DWORD FreeSpareBlocks;
} FILE_QUERY_SPARING_BUFFER, *PFILE_QUERY_SPARING_BUFFER;







typedef struct _FILE_QUERY_ON_DISK_VOL_INFO_BUFFER {
    LARGE_INTEGER DirectoryCount;       
    LARGE_INTEGER FileCount;            
    WORD   FsFormatMajVersion;          
    WORD   FsFormatMinVersion;          
    WCHAR FsFormatName[ 12];
    LARGE_INTEGER FormatTime;
    LARGE_INTEGER LastUpdateTime;
    WCHAR CopyrightInfo[ 34];
    WCHAR AbstractInfo[ 34];
    WCHAR FormattingImplementationInfo[ 34];
    WCHAR LastModifyingImplementationInfo[ 34];
} FILE_QUERY_ON_DISK_VOL_INFO_BUFFER, *PFILE_QUERY_ON_DISK_VOL_INFO_BUFFER;


































































typedef DWORDLONG CLSN;

typedef struct _FILE_INITIATE_REPAIR_OUTPUT_BUFFER {
    DWORDLONG Hint1;
    DWORDLONG Hint2;
    CLSN Clsn;
    DWORD    Status;
} FILE_INITIATE_REPAIR_OUTPUT_BUFFER, *PFILE_INITIATE_REPAIR_OUTPUT_BUFFER;







typedef enum _SHRINK_VOLUME_REQUEST_TYPES
{
    ShrinkPrepare = 1,
    ShrinkCommit,
    ShrinkAbort

} SHRINK_VOLUME_REQUEST_TYPES, *PSHRINK_VOLUME_REQUEST_TYPES;

typedef struct _SHRINK_VOLUME_INFORMATION
{
    SHRINK_VOLUME_REQUEST_TYPES ShrinkRequestType;
    DWORDLONG Flags;
    LONGLONG NewNumberOfSectors;

} SHRINK_VOLUME_INFORMATION, *PSHRINK_VOLUME_INFORMATION;






































































typedef struct _TXFS_MODIFY_RM {

    
    
    

    DWORD Flags;

    
    
    

    DWORD LogContainerCountMax;

    
    
    

    DWORD LogContainerCountMin;

    
    
    

    DWORD LogContainerCount;

    
    
    
    
    

    DWORD LogGrowthIncrement;

    
    
    
    

    DWORD LogAutoShrinkPercentage;

    
    
    

    DWORDLONG Reserved;

    
    
    
    

    WORD   LoggingMode;

} TXFS_MODIFY_RM,
 *PTXFS_MODIFY_RM;














































typedef struct _TXFS_QUERY_RM_INFORMATION {

    
    
    
    

    DWORD BytesRequired;

    
    
    

    DWORDLONG TailLsn;

    
    
    

    DWORDLONG CurrentLsn;

    
    
    

    DWORDLONG ArchiveTailLsn;

    
    
    

    DWORDLONG LogContainerSize;

    
    
    

    LARGE_INTEGER HighestVirtualClock;

    
    
    

    DWORD LogContainerCount;

    
    
    

    DWORD LogContainerCountMax;

    
    
    

    DWORD LogContainerCountMin;

    
    
    
    
    

    DWORD LogGrowthIncrement;

    
    
    
    
    

    DWORD LogAutoShrinkPercentage;

    
    
    
    

    DWORD Flags;

    
    
    

    WORD   LoggingMode;

    
    
    

    WORD   Reserved;

    
    
    

    DWORD RmState;

    
    
    

    DWORDLONG LogCapacity;

    
    
    

    DWORDLONG LogFree;

    
    
    

    DWORDLONG TopsSize;

    
    
    

    DWORDLONG TopsUsed;

    
    
    

    DWORDLONG TransactionCount;

    
    
    

    DWORDLONG OnePCCount;

    
    
    

    DWORDLONG TwoPCCount;

    
    
    

    DWORDLONG NumberLogFileFull;

    
    
    

    DWORDLONG OldestTransactionAge;

    
    
    

    GUID RMName;

    
    
    
    

    DWORD TmLogPathOffset;

} TXFS_QUERY_RM_INFORMATION,
 *PTXFS_QUERY_RM_INFORMATION;














typedef struct _TXFS_ROLLFORWARD_REDO_INFORMATION {
    LARGE_INTEGER  LastVirtualClock;
    DWORDLONG LastRedoLsn;
    DWORDLONG HighestRecoveryLsn;
    DWORD Flags;
} TXFS_ROLLFORWARD_REDO_INFORMATION,
 *PTXFS_ROLLFORWARD_REDO_INFORMATION;



#pragma deprecated(TXFS_ROLLFORWARD_REDO_INFORMATION)
#pragma deprecated(PTXFS_ROLLFORWARD_REDO_INFORMATION)
#line 6528 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
#line 6529 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"




















































typedef struct _TXFS_START_RM_INFORMATION {

    
    
    

    DWORD Flags;

    
    
    

    DWORDLONG LogContainerSize;

    
    
    

    DWORD LogContainerCountMin;

    
    
    

    DWORD LogContainerCountMax;

    
    
    
    
    

    DWORD LogGrowthIncrement;

    
    
    

    DWORD LogAutoShrinkPercentage;

    
    
    
    
    

    DWORD TmLogPathOffset;

    
    
    
    

    WORD   TmLogPathLength;

    
    
    
    
    

    WORD   LoggingMode;

    
    
    
    

    WORD   LogPathLength;

    
    
    

    WORD   Reserved;

    
    
    
    

    WCHAR LogPath[1];

} TXFS_START_RM_INFORMATION,
 *PTXFS_START_RM_INFORMATION;



#pragma deprecated(TXFS_START_RM_INFORMATION)
#pragma deprecated(PTXFS_START_RM_INFORMATION)
#line 6672 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
#line 6673 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"







typedef struct _TXFS_GET_METADATA_INFO_OUT {

    
    
    

    struct {
        LONGLONG LowPart;
        LONGLONG HighPart;
    } TxfFileId;

    
    
    

    GUID LockingTransaction;

    
    
    

    DWORDLONG LastLsn;

    
    
    

    DWORD TransactionState;

} TXFS_GET_METADATA_INFO_OUT, *PTXFS_GET_METADATA_INFO_OUT;




















typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY {

    
    
    
    

    DWORDLONG Offset;

    
    
    
    

    DWORD NameFlags;

    
    
    

    LONGLONG FileId;

    
    
    

    DWORD Reserved1;
    DWORD Reserved2;
    LONGLONG Reserved3;

    
    
    

    WCHAR FileName[1];
} TXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY, *PTXFS_LIST_TRANSACTION_LOCKED_FILES_ENTRY;


typedef struct _TXFS_LIST_TRANSACTION_LOCKED_FILES {

    
    
    

    GUID KtmTransaction;

    
    
    

    DWORDLONG NumberOfFiles;

    
    
    
    

    DWORDLONG BufferSizeRequired;

    
    
    
    

    DWORDLONG Offset;
} TXFS_LIST_TRANSACTION_LOCKED_FILES, *PTXFS_LIST_TRANSACTION_LOCKED_FILES;







typedef struct _TXFS_LIST_TRANSACTIONS_ENTRY {

    
    
    

    GUID TransactionId;

    
    
    

    DWORD TransactionState;

    
    
    

    DWORD Reserved1;
    DWORD Reserved2;
    LONGLONG Reserved3;
} TXFS_LIST_TRANSACTIONS_ENTRY, *PTXFS_LIST_TRANSACTIONS_ENTRY;

typedef struct _TXFS_LIST_TRANSACTIONS {

    
    
    

    DWORDLONG NumberOfTransactions;

    
    
    
    
    

    DWORDLONG BufferSizeRequired;
} TXFS_LIST_TRANSACTIONS, *PTXFS_LIST_TRANSACTIONS;









#pragma warning(push)
#line 6853 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
#pragma warning(disable:4201)       

typedef struct _TXFS_READ_BACKUP_INFORMATION_OUT {
    union {

        
        
        

        DWORD BufferLength;

        
        
        

        BYTE  Buffer[1];
    } ;
} TXFS_READ_BACKUP_INFORMATION_OUT, *PTXFS_READ_BACKUP_INFORMATION_OUT;


#pragma warning(pop)


#line 6877 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"







typedef struct _TXFS_WRITE_BACKUP_INFORMATION {

    
    
    
    

    BYTE  Buffer[1];
} TXFS_WRITE_BACKUP_INFORMATION, *PTXFS_WRITE_BACKUP_INFORMATION;










typedef struct _TXFS_GET_TRANSACTED_VERSION {

    
    
    
    
    

    DWORD ThisBaseVersion;

    
    
    

    DWORD LatestVersion;

    
    
    
    

    WORD   ThisMiniVersion;

    
    
    
    

    WORD   FirstMiniVersion;

    
    
    
    

    WORD   LatestMiniVersion;

} TXFS_GET_TRANSACTED_VERSION, *PTXFS_GET_TRANSACTED_VERSION;




































typedef struct _TXFS_SAVEPOINT_INFORMATION {

    
    
    

    HANDLE KtmTransaction;

    
    
    

    DWORD ActionCode;

    
    
    
    
    
    
    
    
    

    DWORD SavepointId;

} TXFS_SAVEPOINT_INFORMATION, *PTXFS_SAVEPOINT_INFORMATION;



#pragma deprecated(TXFS_SAVEPOINT_INFORMATION)
#pragma deprecated(PTXFS_SAVEPOINT_INFORMATION)
#line 7010 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
#line 7011 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"









typedef struct _TXFS_CREATE_MINIVERSION_INFO {

    WORD   StructureVersion;

    WORD   StructureLength;

    
    
    

    DWORD BaseVersion;

    
    
    

    WORD   MiniVersion;

} TXFS_CREATE_MINIVERSION_INFO, *PTXFS_CREATE_MINIVERSION_INFO;



#pragma deprecated(TXFS_CREATE_MINIVERSION_INFO)
#pragma deprecated(PTXFS_CREATE_MINIVERSION_INFO)
#line 7045 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
#line 7046 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"







typedef struct _TXFS_TRANSACTION_ACTIVE_INFO {

    
    
    

    BOOLEAN TransactionsActiveAtSnapshot;

} TXFS_TRANSACTION_ACTIVE_INFO, *PTXFS_TRANSACTION_ACTIVE_INFO;

#line 7064 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"










typedef struct _BOOT_AREA_INFO {

    DWORD               BootSectorCount;  
    struct {
        LARGE_INTEGER   Offset;
    } BootSectors[2];                     

} BOOT_AREA_INFO, *PBOOT_AREA_INFO;







typedef struct _RETRIEVAL_POINTER_BASE {

    LARGE_INTEGER       FileAreaOffset; 
} RETRIEVAL_POINTER_BASE, *PRETRIEVAL_POINTER_BASE;









typedef struct _FILE_FS_PERSISTENT_VOLUME_INFORMATION {

    DWORD VolumeFlags;
    DWORD FlagMask;
    DWORD Version;
    DWORD Reserved;

} FILE_FS_PERSISTENT_VOLUME_INFORMATION, *PFILE_FS_PERSISTENT_VOLUME_INFORMATION;











#line 7122 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"







typedef struct _FILE_SYSTEM_RECOGNITION_INFORMATION {

    CHAR FileSystem[9];

} FILE_SYSTEM_RECOGNITION_INFORMATION, *PFILE_SYSTEM_RECOGNITION_INFORMATION;

















typedef struct _REQUEST_OPLOCK_INPUT_BUFFER {

    
    
    

    WORD   StructureVersion;

    WORD   StructureLength;

    
    
    

    DWORD RequestedOplockLevel;

    
    
    

    DWORD Flags;

} REQUEST_OPLOCK_INPUT_BUFFER, *PREQUEST_OPLOCK_INPUT_BUFFER;




typedef struct _REQUEST_OPLOCK_OUTPUT_BUFFER {

    
    
    

    WORD   StructureVersion;

    WORD   StructureLength;

    
    
    
    

    DWORD OriginalOplockLevel;

    
    
    
    
    

    DWORD NewOplockLevel;

    
    
    

    DWORD Flags;

    
    
    
    
    

    ACCESS_MASK AccessMode;

    WORD   ShareMode;

} REQUEST_OPLOCK_OUTPUT_BUFFER, *PREQUEST_OPLOCK_OUTPUT_BUFFER;





#pragma warning(push)
#pragma warning(disable : 4200)
#pragma warning(disable : 4201)



typedef struct _VIRTUAL_STORAGE_TYPE
{
    DWORD DeviceId;
    GUID  VendorId;
} VIRTUAL_STORAGE_TYPE, *PVIRTUAL_STORAGE_TYPE;
#line 7237 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"





typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST {
    DWORD   RequestLevel;
    DWORD   RequestFlags;
} STORAGE_QUERY_DEPENDENT_VOLUME_REQUEST, *PSTORAGE_QUERY_DEPENDENT_VOLUME_REQUEST;




typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY {
    DWORD   EntryLength;
    DWORD   DependencyTypeFlags;
    DWORD   ProviderSpecificFlags;
    VIRTUAL_STORAGE_TYPE VirtualStorageType;
} STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY, *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY;

typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY {
    DWORD   EntryLength;
    DWORD   DependencyTypeFlags;
    DWORD   ProviderSpecificFlags;
    VIRTUAL_STORAGE_TYPE VirtualStorageType;
    DWORD   AncestorLevel;      
    DWORD   HostVolumeNameOffset;
    DWORD   HostVolumeNameSize;
    DWORD   DependentVolumeNameOffset;
    DWORD   DependentVolumeNameSize;
    DWORD   RelativePathOffset;
    DWORD   RelativePathSize;
    DWORD   DependentDeviceNameOffset;
    DWORD   DependentDeviceNameSize;
} STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY, *PSTORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY;

typedef struct _STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE {
    DWORD   ResponseLevel;
    DWORD   NumberEntries;
    union {
        STORAGE_QUERY_DEPENDENT_VOLUME_LEV1_ENTRY Lev1Depends[];
        STORAGE_QUERY_DEPENDENT_VOLUME_LEV2_ENTRY Lev2Depends[];
    };
} STORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE, *PSTORAGE_QUERY_DEPENDENT_VOLUME_RESPONSE;

#pragma warning(pop)




















typedef struct _SD_CHANGE_MACHINE_SID_INPUT {

    
    
    
    
    
    
    

    WORD   CurrentMachineSIDOffset;
    WORD   CurrentMachineSIDLength;

    
    
    
    
    
    
    

    WORD   NewMachineSIDOffset;
    WORD   NewMachineSIDLength;

} SD_CHANGE_MACHINE_SID_INPUT, *PSD_CHANGE_MACHINE_SID_INPUT;

typedef struct _SD_CHANGE_MACHINE_SID_OUTPUT {

    
    
    

    DWORDLONG NumSDChangedSuccess;

    
    
    

    DWORDLONG NumSDChangedFail;

    
    
    

    DWORDLONG NumSDUnused;

    
    
    

    DWORDLONG NumSDTotal;

    
    
    

    DWORDLONG NumMftSDChangedSuccess;

    
    
    

    DWORDLONG NumMftSDChangedFail;

    
    
    

    DWORDLONG NumMftSDTotal;

} SD_CHANGE_MACHINE_SID_OUTPUT, *PSD_CHANGE_MACHINE_SID_OUTPUT;





typedef struct _SD_QUERY_STATS_INPUT {

    DWORD Reserved;

} SD_QUERY_STATS_INPUT, *PSD_QUERY_STATS_INPUT;

typedef struct _SD_QUERY_STATS_OUTPUT {

    
    
    
    

    DWORDLONG SdsStreamSize;
    DWORDLONG SdsAllocationSize;

    
    
    
    

    DWORDLONG SiiStreamSize;
    DWORDLONG SiiAllocationSize;

    
    
    
    

    DWORDLONG SdhStreamSize;
    DWORDLONG SdhAllocationSize;

    
    
    
    

    DWORDLONG NumSDTotal;

    
    
    
    

    DWORDLONG NumSDUnused;

} SD_QUERY_STATS_OUTPUT, *PSD_QUERY_STATS_OUTPUT;





typedef struct _SD_ENUM_SDS_INPUT {

    
    
    
    
    
    
    
    
    

    DWORDLONG StartingOffset;

    
    
    
    
    

    DWORDLONG MaxSDEntriesToReturn;

} SD_ENUM_SDS_INPUT, *PSD_ENUM_SDS_INPUT;

typedef struct _SD_ENUM_SDS_ENTRY {

    
    
    

    DWORD Hash;

    
    
    

    DWORD SecurityId;

    
    
    
    

    DWORDLONG Offset;

    
    
    
    

    DWORD Length;

    
    
    

    BYTE  Descriptor[1];

} SD_ENUM_SDS_ENTRY, *PSD_ENUM_SDS_ENTRY;

typedef struct _SD_ENUM_SDS_OUTPUT {

    
    
    
    
    
    
    

    DWORDLONG NextOffset;

    
    
    

    DWORDLONG NumSDEntriesReturned;

    
    
    

    DWORDLONG NumSDBytesReturned;

    
    
    
    
    
    
    

    SD_ENUM_SDS_ENTRY SDEntry[1];

} SD_ENUM_SDS_OUTPUT, *PSD_ENUM_SDS_OUTPUT;






#pragma warning(push)
#line 7534 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
#pragma warning(disable:4201)       

typedef struct _SD_GLOBAL_CHANGE_INPUT
{
    
    
    

    DWORD Flags;

    
    
    
    

    DWORD ChangeType;

    union {

        SD_CHANGE_MACHINE_SID_INPUT SdChange;
        SD_QUERY_STATS_INPUT SdQueryStats;
        SD_ENUM_SDS_INPUT SdEnumSds;
    };

} SD_GLOBAL_CHANGE_INPUT, *PSD_GLOBAL_CHANGE_INPUT;

typedef struct _SD_GLOBAL_CHANGE_OUTPUT
{

    
    
    

    DWORD Flags;

    
    
    

    DWORD ChangeType;

    union {

        SD_CHANGE_MACHINE_SID_OUTPUT SdChange;
        SD_QUERY_STATS_OUTPUT SdQueryStats;
        SD_ENUM_SDS_OUTPUT SdEnumSds;
    };

} SD_GLOBAL_CHANGE_OUTPUT, *PSD_GLOBAL_CHANGE_OUTPUT;


#pragma warning(pop)


#line 7589 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"





typedef struct _LOOKUP_STREAM_FROM_CLUSTER_INPUT {

    
    
    
    DWORD         Flags;

    
    
    
    
    
    DWORD         NumberOfClusters;

    
    
    
    LARGE_INTEGER Cluster[1];
} LOOKUP_STREAM_FROM_CLUSTER_INPUT, *PLOOKUP_STREAM_FROM_CLUSTER_INPUT;

typedef struct _LOOKUP_STREAM_FROM_CLUSTER_OUTPUT {
    
    
    
    
    DWORD         Offset;

    
    
    
    
    
    DWORD         NumberOfMatches;

    
    
    
    
    DWORD         BufferSizeRequired;
} LOOKUP_STREAM_FROM_CLUSTER_OUTPUT, *PLOOKUP_STREAM_FROM_CLUSTER_OUTPUT;











typedef struct _LOOKUP_STREAM_FROM_CLUSTER_ENTRY {
    
    
    
    
    DWORD         OffsetToNext;

    
    
    
    DWORD         Flags;

    
    
    
    LARGE_INTEGER Reserved;

    
    
    
    
    LARGE_INTEGER Cluster;

    
    
    
    
    
    
    WCHAR         FileName[1];
} LOOKUP_STREAM_FROM_CLUSTER_ENTRY, *PLOOKUP_STREAM_FROM_CLUSTER_ENTRY;









typedef struct _FILE_TYPE_NOTIFICATION_INPUT {

    
    
    
    

    DWORD Flags;

    
    
    

    DWORD NumFileTypeIDs;

    
    
    

    GUID FileTypeID[1];

} FILE_TYPE_NOTIFICATION_INPUT, *PFILE_TYPE_NOTIFICATION_INPUT;












extern "C" const GUID  FILE_TYPE_NOTIFICATION_GUID_PAGE_FILE;
extern "C" const GUID  FILE_TYPE_NOTIFICATION_GUID_HIBERNATION_FILE;
extern "C" const GUID  FILE_TYPE_NOTIFICATION_GUID_CRASHDUMP_FILE;





typedef struct _CSV_MGMT_LOCK {
    DWORD      Flags;
}CSV_MGMT_LOCK, *PCSV_MGMT_LOCK;







typedef struct _CSV_NAMESPACE_INFO {

    DWORD         Version;
    DWORD         DeviceNumber;
    LARGE_INTEGER StartingOffset;
    DWORD         SectorSize;

} CSV_NAMESPACE_INFO, *PCSV_NAMESPACE_INFO;








typedef enum _CSV_CONTROL_OP {
    CsvControlStartRedirectFile         = 2,
    CsvControlStopRedirectFile          = 3,
    CsvControlQueryRedirectState        = 4,
    CsvControlQueryFileRevision         = 6,
    CsvControlQueryMdsPath              = 8,
} CSV_CONTROL_OP, *PCSV_CONTROL_OP;

typedef struct _CSV_CONTROL_PARAM {
    CSV_CONTROL_OP Operation;
    LONGLONG Unused;
} CSV_CONTROL_PARAM, *PCSV_CONTROL_PARAM;




typedef struct _CSV_QUERY_REDIRECT_STATE {
    DWORD MdsNodeId;
    DWORD DsNodeId;
    BOOLEAN FileRedirected;
} CSV_QUERY_REDIRECT_STATE, *PCSV_QUERY_REDIRECT_STATE;







typedef struct _CSV_QUERY_FILE_REVISION {
    
    
    
    LONGLONG FileId;
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    LONGLONG FileRevision[3];

} CSV_QUERY_FILE_REVISION, *PCSV_QUERY_FILE_REVISION;






typedef struct _CSV_QUERY_MDS_PATH {
    DWORD MdsNodeId;
    DWORD DsNodeId;
    DWORD PathLength;
    WCHAR Path[1];
} CSV_QUERY_MDS_PATH, *PCSV_QUERY_MDS_PATH;











typedef struct _CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT {
    DWORDLONG VetoedFromAltitudeIntegral;
    DWORDLONG VetoedFromAltitudeDecimal;
    WCHAR   Reason[256];
} CSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT, *PCSV_QUERY_VETO_FILE_DIRECT_IO_OUTPUT;

#line 7837 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"








typedef struct _CSV_IS_OWNED_BY_CSVFS {
    BOOLEAN OwnedByCSVFS;
}CSV_IS_OWNED_BY_CSVFS, *PCSV_IS_OWNED_BY_CSVFS;







typedef struct _FILE_LEVEL_TRIM_RANGE {

    
    
    

    DWORDLONG Offset;

    
    
    

    DWORDLONG Length;
} FILE_LEVEL_TRIM_RANGE, *PFILE_LEVEL_TRIM_RANGE;





typedef struct _FILE_LEVEL_TRIM {

    
    
    
    

    DWORD Key;

    
    
    

    DWORD NumRanges;

    
    
    

    FILE_LEVEL_TRIM_RANGE Ranges[1];

} FILE_LEVEL_TRIM, *PFILE_LEVEL_TRIM;





typedef struct _FILE_LEVEL_TRIM_OUTPUT {

    
    
    
    

    DWORD NumRangesProcessed;

} FILE_LEVEL_TRIM_OUTPUT, *PFILE_LEVEL_TRIM_OUTPUT;













































typedef enum _QUERY_FILE_LAYOUT_FILTER_TYPE {
    QUERY_FILE_LAYOUT_FILTER_TYPE_NONE = 0,
    QUERY_FILE_LAYOUT_FILTER_TYPE_CLUSTERS = 1,
    QUERY_FILE_LAYOUT_FILTER_TYPE_FILEID = 2,
    QUERY_FILE_LAYOUT_NUM_FILTER_TYPES = 3,
} QUERY_FILE_LAYOUT_FILTER_TYPE;

typedef struct _CLUSTER_RANGE {

    
    
    
    
    LARGE_INTEGER       StartingCluster;

    
    
    
    LARGE_INTEGER       ClusterCount;

} CLUSTER_RANGE, *PCLUSTER_RANGE;

typedef struct _FILE_REFERENCE_RANGE {

    
    
    
    
    DWORDLONG           StartingFileReferenceNumber;

    
    
    
    
    DWORDLONG           EndingFileReferenceNumber;

} FILE_REFERENCE_RANGE, *PFILE_REFERENCE_RANGE;

typedef struct _QUERY_FILE_LAYOUT_INPUT {

    
    
    
    
    
    DWORD               NumberOfPairs;

    
    
    
    DWORD               Flags;

    
    
    

    QUERY_FILE_LAYOUT_FILTER_TYPE   FilterType;

    
    
    

    DWORD               Reserved;

    
    
    
    

    union {

        
        
        
        

        
#line 8034 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
        CLUSTER_RANGE ClusterRanges[1];

        
        
        
        

        
#line 8043 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
        FILE_REFERENCE_RANGE FileReferenceRanges[1];

    } Filter;
} QUERY_FILE_LAYOUT_INPUT, *PQUERY_FILE_LAYOUT_INPUT;







typedef struct _QUERY_FILE_LAYOUT_OUTPUT {

    
    
    
    
    
    DWORD               FileEntryCount;

    
    
    
    
    DWORD               FirstFileOffset;

    
    
    
    
    DWORD               Flags;

    
    
    
    DWORD               Reserved;

} QUERY_FILE_LAYOUT_OUTPUT, *PQUERY_FILE_LAYOUT_OUTPUT;

typedef struct _FILE_LAYOUT_ENTRY {

    
    
    
    
    DWORD         Version;

    
    
    
    
    DWORD         NextFileOffset;

    
    
    
    
    DWORD         Flags;

    
    
    
    DWORD         FileAttributes;

    
    
    
    DWORDLONG     FileReferenceNumber;

    
    
    
    
    
    DWORD         FirstNameOffset;

    
    
    
    
    
    DWORD         FirstStreamOffset;

    
    
    
    
    
    
    DWORD         ExtraInfoOffset;

    
    
    
    DWORD         Reserved;

    
    
    
    
    
    
    

} FILE_LAYOUT_ENTRY, *PFILE_LAYOUT_ENTRY;








typedef struct _FILE_LAYOUT_NAME_ENTRY {

    
    
    
    
    DWORD         NextNameOffset;

    
    
    
    DWORD         Flags;

    
    
    
    DWORDLONG     ParentFileReferenceNumber;

    
    
    
    DWORD         FileNameLength;

    
    
    
    DWORD         Reserved;

    
    
    
    
     
    WCHAR         FileName[1];

} FILE_LAYOUT_NAME_ENTRY, *PFILE_LAYOUT_NAME_ENTRY;

typedef struct _FILE_LAYOUT_INFO_ENTRY {

    
    
    
    struct {
        LARGE_INTEGER CreationTime;
        LARGE_INTEGER LastAccessTime;
        LARGE_INTEGER LastWriteTime;
        LARGE_INTEGER ChangeTime;
        DWORD FileAttributes;
    } BasicInformation;

    
    
    
    DWORD                       OwnerId;

    
    
    
    DWORD                       SecurityId;

    
    
    
    USN                         Usn;

} FILE_LAYOUT_INFO_ENTRY, *PFILE_LAYOUT_INFO_ENTRY;






















typedef struct _STREAM_LAYOUT_ENTRY {

    
    
    
    DWORD         Version;

    
    
    
    DWORD         NextStreamOffset;

    
    
    
    DWORD         Flags;

    
    
    
    
    
    
    DWORD         ExtentInformationOffset;

    
    
    
    
    LARGE_INTEGER AllocationSize;

    
    
    
    LARGE_INTEGER EndOfFile;

    
    
    
    
    DWORDLONG     Reserved;

    
    
    
    DWORD         AttributeFlags;

    
    
    
    DWORD         StreamIdentifierLength;

    
    
    
    
     
    WCHAR         StreamIdentifier[1];

} STREAM_LAYOUT_ENTRY, *PSTREAM_LAYOUT_ENTRY;















typedef struct _STREAM_EXTENT_ENTRY {

    
    
    
    DWORD        Flags;

    union {

        
        
        
        
        
        RETRIEVAL_POINTERS_BUFFER        RetrievalPointers;

    } ExtentInformation;

} STREAM_EXTENT_ENTRY, *PSTREAM_EXTENT_ENTRY;















typedef struct _FSCTL_GET_INTEGRITY_INFORMATION_BUFFER {
    WORD   ChecksumAlgorithm;   
    WORD   Reserved;            
    DWORD Flags;                
    DWORD ChecksumChunkSizeInBytes;
    DWORD ClusterSizeInBytes;
} FSCTL_GET_INTEGRITY_INFORMATION_BUFFER, *PFSCTL_GET_INTEGRITY_INFORMATION_BUFFER;

typedef struct _FSCTL_SET_INTEGRITY_INFORMATION_BUFFER {
    WORD   ChecksumAlgorithm;   
    WORD   Reserved;            
    DWORD Flags;                
} FSCTL_SET_INTEGRITY_INFORMATION_BUFFER, *PFSCTL_SET_INTEGRITY_INFORMATION_BUFFER;








typedef struct _FSCTL_OFFLOAD_READ_INPUT {
    DWORD Size;
    DWORD Flags;
    DWORD TokenTimeToLive; 
    DWORD Reserved;
    DWORDLONG FileOffset;
    DWORDLONG CopyLength;
} FSCTL_OFFLOAD_READ_INPUT, *PFSCTL_OFFLOAD_READ_INPUT;

typedef struct _FSCTL_OFFLOAD_READ_OUTPUT {
    DWORD Size;
    DWORD Flags;
    DWORDLONG TransferLength;
    BYTE  Token[512];
} FSCTL_OFFLOAD_READ_OUTPUT, *PFSCTL_OFFLOAD_READ_OUTPUT;










typedef struct _FSCTL_OFFLOAD_WRITE_INPUT {
    DWORD Size;
    DWORD Flags;
    DWORDLONG FileOffset;
    DWORDLONG CopyLength;
    DWORDLONG TransferOffset;
    BYTE  Token[512];
} FSCTL_OFFLOAD_WRITE_INPUT, *PFSCTL_OFFLOAD_WRITE_INPUT;

typedef struct _FSCTL_OFFLOAD_WRITE_OUTPUT {
    DWORD Size;
    DWORD Flags;
    DWORDLONG LengthWritten;
} FSCTL_OFFLOAD_WRITE_OUTPUT, *PFSCTL_OFFLOAD_WRITE_OUTPUT;








typedef struct _SET_PURGE_FAILURE_MODE_INPUT {
    DWORD Flags;
} SET_PURGE_FAILURE_MODE_INPUT, *PSET_PURGE_FAILURE_MODE_INPUT;










typedef struct _DEDUP_QUERY_FILE_HASHES_INPUT_BUFFER {
    DWORD           Version;
    DWORD           QueryFlags;
    DWORD           HashAlgorithm;
    LARGE_INTEGER   RangeOffsetInFile;
    LARGE_INTEGER   RangeLength;
} DEDUP_QUERY_FILE_HASHES_INPUT_BUFFER, *PDEDUP_QUERY_FILE_HASHES_INPUT_BUFFER;


typedef struct _DEDUP_CHUNK_INFORMATION_HASH32 {
    DWORD    ChunkFlags;
    LONGLONG ChunkOffsetInFile;
    LONGLONG ChunkSize;
    BYTE     HashVal[32];
} DEDUP_CHUNK_INFORMATION_HASH32, *PDEDUP_CHUNK_INFORMATION_HASH32;





typedef struct _REPAIR_COPIES_INPUT {

    DWORD Size;                                 

    DWORD Flags;                                

    LARGE_INTEGER FileOffset;

    DWORD Length;

    DWORD SourceCopy;                           

    DWORD NumberOfRepairCopies;                 

    DWORD RepairCopies[1];          

} REPAIR_COPIES_INPUT, *PREPAIR_COPIES_INPUT;

typedef struct _REPAIR_COPIES_OUTPUT {

    DWORD Size;                                 

    DWORD Status;                               

    LARGE_INTEGER ResumeFileOffset;             
                                                
} REPAIR_COPIES_OUTPUT, *PREPAIR_COPIES_OUTPUT;
















typedef struct _FILE_REGION_INFO {
    LONGLONG FileOffset;
    LONGLONG Length;
    DWORD Usage;
    DWORD Reserved;
} FILE_REGION_INFO, *PFILE_REGION_INFO;

typedef struct _FILE_REGION_OUTPUT {
    DWORD Flags;                            
    DWORD TotalRegionEntryCount;            
    DWORD RegionEntryCount;                 
    DWORD Reserved;                         
    FILE_REGION_INFO Region[1];
} FILE_REGION_OUTPUT, *PFILE_REGION_OUTPUT;






typedef struct _FILE_REGION_INPUT {

    LONGLONG FileOffset;
    LONGLONG Length;
    DWORD DesiredUsage;

} FILE_REGION_INPUT, *PFILE_REGION_INPUT;

#line 8526 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"
















typedef struct _WRITE_USN_REASON_INPUT {

    DWORD Flags;                        
    DWORD UsnReasonToWrite;             

} WRITE_USN_REASON_INPUT, *PWRITE_USN_REASON_INPUT;





#line 8554 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"





#line 8560 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"



























typedef struct _DISK_EXTENT {

    
    
    
    
    DWORD DiskNumber;

    
    
    
    
    
    LARGE_INTEGER StartingOffset;
    LARGE_INTEGER ExtentLength;

} DISK_EXTENT, *PDISK_EXTENT;

typedef struct _VOLUME_DISK_EXTENTS {

    
    
    
    
    DWORD NumberOfDiskExtents;
    DISK_EXTENT Extents[1];

} VOLUME_DISK_EXTENTS, *PVOLUME_DISK_EXTENTS;





















#line 8637 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"






































typedef struct _VOLUME_GET_GPT_ATTRIBUTES_INFORMATION {

    
    
    
    
    DWORDLONG GptAttributes;

} VOLUME_GET_GPT_ATTRIBUTES_INFORMATION, *PVOLUME_GET_GPT_ATTRIBUTES_INFORMATION;

#line 8686 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"


#line 8689 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winioctl.h"


#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winsmcrd.h"






















#pragma once
#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winsmcrd.h"


extern "C" {
#line 29 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winsmcrd.h"


typedef DWORD ULONG;
typedef WORD UWORD;
typedef BYTE UCHAR;




#line 39 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winsmcrd.h"







#line 47 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winsmcrd.h"







extern "C" const GUID  GUID_DEVINTERFACE_SMARTCARD_READER;
#line 56 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winsmcrd.h"






















































































































































#line 207 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winsmcrd.h"


























                              

                              

                              
                              

                              
                              

                              
                              
                              

                              

                              
                              











typedef struct _SCARD_IO_REQUEST{
    DWORD dwProtocol;   
    DWORD cbPciLength;  
} SCARD_IO_REQUEST, *PSCARD_IO_REQUEST, *LPSCARD_IO_REQUEST;
typedef const SCARD_IO_REQUEST *LPCSCARD_IO_REQUEST;






typedef struct {
    BYTE
        bCla,   
        bIns,   
        bP1,
        bP2,    
        bP3;    
} SCARD_T0_COMMAND, *LPSCARD_T0_COMMAND;

typedef struct {
    SCARD_IO_REQUEST ioRequest;
    BYTE
        bSw1,
        bSw2;           
    union
    {
        SCARD_T0_COMMAND CmdBytes;
        BYTE rgbHeader[5];
    } ;
} SCARD_T0_REQUEST;

typedef SCARD_T0_REQUEST *PSCARD_T0_REQUEST, *LPSCARD_T0_REQUEST;






typedef struct {
    SCARD_IO_REQUEST ioRequest;
} SCARD_T1_REQUEST;
typedef SCARD_T1_REQUEST *PSCARD_T1_REQUEST, *LPSCARD_T1_REQUEST;









                                                

                                                

                                                

















}
#line 338 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winsmcrd.h"
#line 339 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\winsmcrd.h"

#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"






extern "C" {
#line 41 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

#pragma region Desktop Family




typedef const BYTE *LPCBYTE;
#line 49 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"


typedef const void *LPCVOID;
#line 53 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"



#line 57 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"


#line 60 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"






__declspec(dllimport) extern const SCARD_IO_REQUEST
    g_rgSCardT0Pci,
    g_rgSCardT1Pci,
    g_rgSCardRawPci;



#line 74 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"










typedef ULONG_PTR SCARDCONTEXT;
typedef SCARDCONTEXT *PSCARDCONTEXT, *LPSCARDCONTEXT;

typedef ULONG_PTR SCARDHANDLE;
typedef SCARDHANDLE *PSCARDHANDLE, *LPSCARDHANDLE;




                                
                                

                                
                                
                                
                                

                                
                                
                                
                                

extern  LONG __stdcall
SCardEstablishContext(
       DWORD dwScope,
       LPCVOID pvReserved1,
       LPCVOID pvReserved2,
      LPSCARDCONTEXT phContext);

extern  LONG __stdcall
SCardReleaseContext(
           SCARDCONTEXT hContext);

extern  LONG __stdcall
SCardIsValidContext(
           SCARDCONTEXT hContext);
























extern  LONG __stdcall
SCardListReaderGroupsA(
         SCARDCONTEXT hContext,
          LPSTR mszGroups,
      LPDWORD pcchGroups);
extern  LONG __stdcall
SCardListReaderGroupsW(
         SCARDCONTEXT hContext,
          LPWSTR mszGroups,
      LPDWORD pcchGroups);




#line 159 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

 
extern  LONG __stdcall
SCardListReadersA(
          SCARDCONTEXT hContext,
      LPCSTR mszGroups,
    
    
             LPSTR mszReaders,
       LPDWORD pcchReaders);
 
extern  LONG __stdcall
SCardListReadersW(
          SCARDCONTEXT hContext,
      LPCWSTR mszGroups,
    
    
             LPWSTR mszReaders,
       LPDWORD pcchReaders);




#line 183 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

 
extern  LONG __stdcall
SCardListCardsA(
           SCARDCONTEXT hContext,
       LPCBYTE pbAtr,
       LPCGUID rgquidInterfaces,
           DWORD cguidInterfaceCount,
    
    
              CHAR *mszCards,
        LPDWORD pcchCards);
 
extern  LONG __stdcall
SCardListCardsW(
           SCARDCONTEXT hContext,
       LPCBYTE pbAtr,
       LPCGUID rgquidInterfaces,
           DWORD cguidInterfaceCount,
    
    
              WCHAR *mszCards,
        LPDWORD pcchCards);




#line 211 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"
















extern  LONG __stdcall
SCardListInterfacesA(
          SCARDCONTEXT hContext,
          LPCSTR szCard,
         LPGUID pguidInterfaces,
       LPDWORD pcguidInterfaces);
extern  LONG __stdcall
SCardListInterfacesW(
          SCARDCONTEXT hContext,
          LPCWSTR szCard,
         LPGUID pguidInterfaces,
       LPDWORD pcguidInterfaces);




#line 244 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

extern  LONG __stdcall
SCardGetProviderIdA(
          SCARDCONTEXT hContext,
          LPCSTR szCard,
         LPGUID pguidProviderId);
extern  LONG __stdcall
SCardGetProviderIdW(
          SCARDCONTEXT hContext,
          LPCWSTR szCard,
         LPGUID pguidProviderId);




#line 260 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"





 
extern  LONG __stdcall
SCardGetCardTypeProviderNameA(
           SCARDCONTEXT hContext,
           LPCSTR szCardName,
           DWORD dwProviderId,
    
    
              CHAR *szProvider,
        LPDWORD pcchProvider);
 
extern  LONG __stdcall
SCardGetCardTypeProviderNameW(
           SCARDCONTEXT hContext,
           LPCWSTR szCardName,
           DWORD dwProviderId,
    
    
              WCHAR *szProvider,
        LPDWORD pcchProvider);




#line 290 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"









extern  LONG __stdcall
SCardIntroduceReaderGroupA(
      SCARDCONTEXT hContext,
      LPCSTR szGroupName);
extern  LONG __stdcall
SCardIntroduceReaderGroupW(
      SCARDCONTEXT hContext,
      LPCWSTR szGroupName);




#line 312 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

extern  LONG __stdcall
SCardForgetReaderGroupA(
      SCARDCONTEXT hContext,
      LPCSTR szGroupName);
extern  LONG __stdcall
SCardForgetReaderGroupW(
      SCARDCONTEXT hContext,
      LPCWSTR szGroupName);




#line 326 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

extern  LONG __stdcall
SCardIntroduceReaderA(
      SCARDCONTEXT hContext,
      LPCSTR szReaderName,
      LPCSTR szDeviceName);
extern  LONG __stdcall
SCardIntroduceReaderW(
      SCARDCONTEXT hContext,
      LPCWSTR szReaderName,
      LPCWSTR szDeviceName);




#line 342 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

extern  LONG __stdcall
SCardForgetReaderA(
      SCARDCONTEXT hContext,
      LPCSTR szReaderName);
extern  LONG __stdcall
SCardForgetReaderW(
      SCARDCONTEXT hContext,
      LPCWSTR szReaderName);




#line 356 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

extern  LONG __stdcall
SCardAddReaderToGroupA(
      SCARDCONTEXT hContext,
      LPCSTR szReaderName,
      LPCSTR szGroupName);
extern  LONG __stdcall
SCardAddReaderToGroupW(
      SCARDCONTEXT hContext,
      LPCWSTR szReaderName,
      LPCWSTR szGroupName);




#line 372 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

extern  LONG __stdcall
SCardRemoveReaderFromGroupA(
      SCARDCONTEXT hContext,
      LPCSTR szReaderName,
      LPCSTR szGroupName);
extern  LONG __stdcall
SCardRemoveReaderFromGroupW(
      SCARDCONTEXT hContext,
      LPCWSTR szReaderName,
      LPCWSTR szGroupName);




#line 388 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

extern  LONG __stdcall
SCardIntroduceCardTypeA(
          SCARDCONTEXT hContext,
          LPCSTR szCardName,
      LPCGUID pguidPrimaryProvider,
      LPCGUID rgguidInterfaces,
          DWORD dwInterfaceCount,
          LPCBYTE pbAtr,
          LPCBYTE pbAtrMask,
          DWORD cbAtrLen);
extern  LONG __stdcall
SCardIntroduceCardTypeW(
          SCARDCONTEXT hContext,
          LPCWSTR szCardName,
      LPCGUID pguidPrimaryProvider,
      LPCGUID rgguidInterfaces,
          DWORD dwInterfaceCount,
          LPCBYTE pbAtr,
          LPCBYTE pbAtrMask,
          DWORD cbAtrLen);




#line 414 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"



















extern  LONG __stdcall
SCardSetCardTypeProviderNameA(
      SCARDCONTEXT hContext,
      LPCSTR szCardName,
      DWORD dwProviderId,
      LPCSTR szProvider);
extern  LONG __stdcall
SCardSetCardTypeProviderNameW(
      SCARDCONTEXT hContext,
      LPCWSTR szCardName,
      DWORD dwProviderId,
      LPCWSTR szProvider);




#line 450 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"




extern  LONG __stdcall
SCardForgetCardTypeA(
      SCARDCONTEXT hContext,
      LPCSTR szCardName);
extern  LONG __stdcall
SCardForgetCardTypeW(
      SCARDCONTEXT hContext,
      LPCWSTR szCardName);




#line 467 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"











extern  LONG __stdcall
SCardFreeMemory(
      SCARDCONTEXT hContext,
      LPCVOID pvMem);


extern  HANDLE __stdcall
SCardAccessStartedEvent(void);

extern  void __stdcall
SCardReleaseStartedEvent(void);
#line 490 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"









typedef struct {
    LPCSTR      szReader;       
    LPVOID      pvUserData;     
    DWORD       dwCurrentState; 
    DWORD       dwEventState;   
    DWORD       cbAtr;          
    BYTE        rgbAtr[36];     
} SCARD_READERSTATEA, *PSCARD_READERSTATEA, *LPSCARD_READERSTATEA;
typedef struct {
    LPCWSTR     szReader;       
    LPVOID      pvUserData;     
    DWORD       dwCurrentState; 
    DWORD       dwEventState;   
    DWORD       cbAtr;          
    BYTE        rgbAtr[36];     
} SCARD_READERSTATEW, *PSCARD_READERSTATEW, *LPSCARD_READERSTATEW;





typedef SCARD_READERSTATEA SCARD_READERSTATE;
typedef PSCARD_READERSTATEA PSCARD_READERSTATE;
typedef LPSCARD_READERSTATEA LPSCARD_READERSTATE;
#line 524 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"










                                            
                                            
                                            
                                            
                                            
                                            

                                            
                                            

                                            
                                            
                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            
                                            

                                            
                                            
                                            

                                            

                                            
                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            
                                            
                                            
                                            

                                            
                                            
                                            

                                            

extern  LONG __stdcall
SCardLocateCardsA(
         SCARDCONTEXT hContext,
         LPCSTR mszCards,
      LPSCARD_READERSTATEA rgReaderStates,
         DWORD cReaders);
extern  LONG __stdcall
SCardLocateCardsW(
         SCARDCONTEXT hContext,
         LPCWSTR mszCards,
      LPSCARD_READERSTATEW rgReaderStates,
         DWORD cReaders);




#line 612 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"


typedef struct _SCARD_ATRMASK {
    DWORD       cbAtr;          
    BYTE        rgbAtr[36];     
    BYTE        rgbMask[36];    
} SCARD_ATRMASK, *PSCARD_ATRMASK, *LPSCARD_ATRMASK;


extern  LONG __stdcall
SCardLocateCardsByATRA(
         SCARDCONTEXT hContext,
         LPSCARD_ATRMASK rgAtrMasks,
         DWORD cAtrs,
      LPSCARD_READERSTATEA rgReaderStates,
         DWORD cReaders);
extern  LONG __stdcall
SCardLocateCardsByATRW(
         SCARDCONTEXT hContext,
         LPSCARD_ATRMASK rgAtrMasks,
         DWORD cAtrs,
      LPSCARD_READERSTATEW rgReaderStates,
         DWORD cReaders);




#line 640 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"
#line 641 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

extern  LONG __stdcall
SCardGetStatusChangeA(
         SCARDCONTEXT hContext,
         DWORD dwTimeout,
      LPSCARD_READERSTATEA rgReaderStates,
         DWORD cReaders);
extern  LONG __stdcall
SCardGetStatusChangeW(
         SCARDCONTEXT hContext,
         DWORD dwTimeout,
      LPSCARD_READERSTATEW rgReaderStates,
         DWORD cReaders);




#line 659 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

extern  LONG __stdcall
SCardCancel(
         SCARDCONTEXT hContext);











                                

                                

                                
                                






extern  LONG __stdcall
SCardConnectA(
         SCARDCONTEXT hContext,
         LPCSTR szReader,
         DWORD dwShareMode,
         DWORD dwPreferredProtocols,
        LPSCARDHANDLE phCard,
        LPDWORD pdwActiveProtocol);
extern  LONG __stdcall
SCardConnectW(
         SCARDCONTEXT hContext,
         LPCWSTR szReader,
         DWORD dwShareMode,
         DWORD dwPreferredProtocols,
        LPSCARDHANDLE phCard,
        LPDWORD pdwActiveProtocol);




#line 707 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

extern  LONG __stdcall
SCardReconnect(
           SCARDHANDLE hCard,
           DWORD dwShareMode,
           DWORD dwPreferredProtocols,
           DWORD dwInitialization,
      LPDWORD pdwActiveProtocol);

extern  LONG __stdcall
SCardDisconnect(
         SCARDHANDLE hCard,
         DWORD dwDisposition);

extern  LONG __stdcall
SCardBeginTransaction(
         SCARDHANDLE hCard);

extern  LONG __stdcall
SCardEndTransaction(
         SCARDHANDLE hCard,
         DWORD dwDisposition);

extern  LONG __stdcall
SCardCancelTransaction(
         SCARDHANDLE hCard);






extern  LONG __stdcall
SCardState(
         SCARDHANDLE hCard,
        LPDWORD pdwState,
        LPDWORD pdwProtocol,
        LPBYTE pbAtr,
      LPDWORD pcbAtrLen);





extern  LONG __stdcall
SCardStatusA(
             SCARDHANDLE hCard,
    
    
                LPSTR mszReaderNames,
      LPDWORD pcchReaderLen,
        LPDWORD pdwState,
        LPDWORD pdwProtocol,
    
    
                LPBYTE pbAtr,
      LPDWORD pcbAtrLen);
extern  LONG __stdcall
SCardStatusW(
             SCARDHANDLE hCard,
    
    
                LPWSTR mszReaderNames,
      LPDWORD pcchReaderLen,
        LPDWORD pdwState,
        LPDWORD pdwProtocol,
    
    
                LPBYTE pbAtr,
      LPDWORD pcbAtrLen);




#line 782 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

extern  LONG __stdcall
SCardTransmit(
             SCARDHANDLE hCard,
             LPCSCARD_IO_REQUEST pioSendPci,
      LPCBYTE pbSendBuffer,
             DWORD cbSendLength,
      LPSCARD_IO_REQUEST pioRecvPci,
      LPBYTE pbRecvBuffer,
          LPDWORD pcbRecvLength);


extern  LONG __stdcall
SCardGetTransmitCount(
      SCARDHANDLE hCard,
      LPDWORD pcTransmitCount);
#line 799 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"











extern  LONG __stdcall
SCardControl(
         SCARDHANDLE hCard,
         DWORD dwControlCode,
      LPCVOID lpInBuffer,
         DWORD cbInBufferSize,
      LPVOID lpOutBuffer,
         DWORD cbOutBufferSize,
        LPDWORD lpBytesReturned);

extern  LONG __stdcall
SCardGetAttrib(
         SCARDHANDLE hCard,
         DWORD dwAttrId,
      LPBYTE pbAttr,
      LPDWORD pcbAttrLen);














extern  LONG __stdcall
SCardSetAttrib(
      SCARDHANDLE hCard,
      DWORD dwAttrId,
      LPCBYTE pbAttr,
      DWORD cbAttrLen);

































typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCA) (  SCARDCONTEXT,   LPSTR,   LPSTR,   PVOID);
typedef SCARDHANDLE (__stdcall *LPOCNCONNPROCW) (  SCARDCONTEXT,   LPWSTR,   LPWSTR,   PVOID);




#line 886 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"
typedef BOOL (__stdcall *LPOCNCHKPROC) (  SCARDCONTEXT,   SCARDHANDLE,   PVOID);
typedef void (__stdcall *LPOCNDSCPROC) (  SCARDCONTEXT,   SCARDHANDLE,   PVOID);











typedef struct {
    DWORD           dwStructSize;
    LPSTR           lpstrGroupNames;        
    DWORD           nMaxGroupNames;         
                                            
    LPCGUID         rgguidInterfaces;       
    DWORD           cguidInterfaces;        
    LPSTR           lpstrCardNames;         
    DWORD           nMaxCardNames;          
    LPOCNCHKPROC    lpfnCheck;              
    LPOCNCONNPROCA  lpfnConnect;            
    LPOCNDSCPROC    lpfnDisconnect;         
    LPVOID          pvUserData;             
    DWORD           dwShareMode;            
    DWORD           dwPreferredProtocols;   
} OPENCARD_SEARCH_CRITERIAA, *POPENCARD_SEARCH_CRITERIAA, *LPOPENCARD_SEARCH_CRITERIAA;
typedef struct {
    DWORD           dwStructSize;
    LPWSTR          lpstrGroupNames;        
    DWORD           nMaxGroupNames;         
                                            
    LPCGUID         rgguidInterfaces;       
    DWORD           cguidInterfaces;        
    LPWSTR          lpstrCardNames;         
    DWORD           nMaxCardNames;          
    LPOCNCHKPROC    lpfnCheck;              
    LPOCNCONNPROCW  lpfnConnect;            
    LPOCNDSCPROC    lpfnDisconnect;         
    LPVOID          pvUserData;             
    DWORD           dwShareMode;            
    DWORD           dwPreferredProtocols;   
} OPENCARD_SEARCH_CRITERIAW, *POPENCARD_SEARCH_CRITERIAW, *LPOPENCARD_SEARCH_CRITERIAW;





typedef OPENCARD_SEARCH_CRITERIAA OPENCARD_SEARCH_CRITERIA;
typedef POPENCARD_SEARCH_CRITERIAA POPENCARD_SEARCH_CRITERIA;
typedef LPOPENCARD_SEARCH_CRITERIAA LPOPENCARD_SEARCH_CRITERIA;
#line 940 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"






typedef struct {
    DWORD           dwStructSize;           
    SCARDCONTEXT    hSCardContext;          
    HWND            hwndOwner;              
    DWORD           dwFlags;                
    LPCSTR          lpstrTitle;             
    LPCSTR          lpstrSearchDesc;        
    HICON           hIcon;                  
    POPENCARD_SEARCH_CRITERIAA pOpenCardSearchCriteria; 
    LPOCNCONNPROCA  lpfnConnect;            
    LPVOID          pvUserData;             
    DWORD           dwShareMode;            
    DWORD           dwPreferredProtocols;   
                                            
    LPSTR           lpstrRdr;               
    DWORD           nMaxRdr;                
    LPSTR           lpstrCard;              
    DWORD           nMaxCard;               
    DWORD           dwActiveProtocol;       
    SCARDHANDLE     hCardHandle;            
} OPENCARDNAME_EXA, *POPENCARDNAME_EXA, *LPOPENCARDNAME_EXA;
typedef struct {
    DWORD           dwStructSize;           
    SCARDCONTEXT    hSCardContext;          
    HWND            hwndOwner;              
    DWORD           dwFlags;                
    LPCWSTR         lpstrTitle;             
    LPCWSTR         lpstrSearchDesc;        
    HICON           hIcon;                  
    POPENCARD_SEARCH_CRITERIAW pOpenCardSearchCriteria; 
    LPOCNCONNPROCW  lpfnConnect;            
    LPVOID          pvUserData;             
    DWORD           dwShareMode;            
    DWORD           dwPreferredProtocols;   
                                            
    LPWSTR          lpstrRdr;               
    DWORD           nMaxRdr;                
    LPWSTR          lpstrCard;              
    DWORD           nMaxCard;               
    DWORD           dwActiveProtocol;       
    SCARDHANDLE     hCardHandle;            
} OPENCARDNAME_EXW, *POPENCARDNAME_EXW, *LPOPENCARDNAME_EXW;





typedef OPENCARDNAME_EXA OPENCARDNAME_EX;
typedef POPENCARDNAME_EXA POPENCARDNAME_EX;
typedef LPOPENCARDNAME_EXA LPOPENCARDNAME_EX;
#line 997 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"


















































































typedef enum {
    RSR_MATCH_TYPE_READER_AND_CONTAINER = 1,
    RSR_MATCH_TYPE_SERIAL_NUMBER,
    RSR_MATCH_TYPE_ALL_CARDS
} READER_SEL_REQUEST_MATCH_TYPE;

typedef struct {
    DWORD                           dwShareMode;
    DWORD                           dwPreferredProtocols;
    READER_SEL_REQUEST_MATCH_TYPE   MatchType;
    union {
        struct {
            DWORD                   cbReaderNameOffset;
            DWORD                   cchReaderNameLength;
            DWORD                   cbContainerNameOffset;
            DWORD                   cchContainerNameLength;
            DWORD                   dwDesiredCardModuleVersion;
            DWORD                   dwCspFlags;
        } ReaderAndContainerParameter;
        struct {
            DWORD                   cbSerialNumberOffset;
            DWORD                   cbSerialNumberLength;
            DWORD                   dwDesiredCardModuleVersion;
        } SerialNumberParameter;
    };
} READER_SEL_REQUEST, *PREADER_SEL_REQUEST;




















typedef struct {
    DWORD                           cbReaderNameOffset;
    DWORD                           cchReaderNameLength;
    DWORD                           cbCardNameOffset;
    DWORD                           cchCardNameLength;
} READER_SEL_RESPONSE, *PREADER_SEL_RESPONSE;






extern  LONG __stdcall
SCardUIDlgSelectCardA(
    LPOPENCARDNAME_EXA);
extern  LONG __stdcall
SCardUIDlgSelectCardW(
    LPOPENCARDNAME_EXW);




#line 1148 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"







typedef struct {
    DWORD           dwStructSize;
    HWND            hwndOwner;
    SCARDCONTEXT    hSCardContext;
    LPSTR           lpstrGroupNames;
    DWORD           nMaxGroupNames;
    LPSTR           lpstrCardNames;
    DWORD           nMaxCardNames;
    LPCGUID         rgguidInterfaces;
    DWORD           cguidInterfaces;
    LPSTR           lpstrRdr;
    DWORD           nMaxRdr;
    LPSTR           lpstrCard;
    DWORD           nMaxCard;
    LPCSTR          lpstrTitle;
    DWORD           dwFlags;
    LPVOID          pvUserData;
    DWORD           dwShareMode;
    DWORD           dwPreferredProtocols;
    DWORD           dwActiveProtocol;
    LPOCNCONNPROCA  lpfnConnect;
    LPOCNCHKPROC    lpfnCheck;
    LPOCNDSCPROC    lpfnDisconnect;
    SCARDHANDLE     hCardHandle;
} OPENCARDNAMEA, *POPENCARDNAMEA, *LPOPENCARDNAMEA;
typedef struct {
    DWORD           dwStructSize;
    HWND            hwndOwner;
    SCARDCONTEXT    hSCardContext;
    LPWSTR          lpstrGroupNames;
    DWORD           nMaxGroupNames;
    LPWSTR          lpstrCardNames;
    DWORD           nMaxCardNames;
    LPCGUID         rgguidInterfaces;
    DWORD           cguidInterfaces;
    LPWSTR          lpstrRdr;
    DWORD           nMaxRdr;
    LPWSTR          lpstrCard;
    DWORD           nMaxCard;
    LPCWSTR         lpstrTitle;
    DWORD           dwFlags;
    LPVOID          pvUserData;
    DWORD           dwShareMode;
    DWORD           dwPreferredProtocols;
    DWORD           dwActiveProtocol;
    LPOCNCONNPROCW  lpfnConnect;
    LPOCNCHKPROC    lpfnCheck;
    LPOCNDSCPROC    lpfnDisconnect;
    SCARDHANDLE     hCardHandle;
} OPENCARDNAMEW, *POPENCARDNAMEW, *LPOPENCARDNAMEW;





typedef OPENCARDNAMEA OPENCARDNAME;
typedef POPENCARDNAMEA POPENCARDNAME;
typedef LPOPENCARDNAMEA LPOPENCARDNAME;
#line 1214 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"









extern  LONG __stdcall
GetOpenCardNameA(
    LPOPENCARDNAMEA);
extern  LONG __stdcall
GetOpenCardNameW(
    LPOPENCARDNAMEW);




#line 1234 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

extern  LONG __stdcall
SCardDlgExtendedError (void);







extern  LONG __stdcall
SCardReadCacheA(
       SCARDCONTEXT hContext,
       UUID *CardIdentifier,
       DWORD FreshnessCounter,
       LPSTR LookupName,
      PBYTE Data,
      DWORD *DataLen);
extern  LONG __stdcall
SCardReadCacheW(
       SCARDCONTEXT hContext,
       UUID *CardIdentifier,
       DWORD FreshnessCounter,
       LPWSTR LookupName,
      PBYTE Data,
      DWORD *DataLen);




#line 1265 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

extern  LONG __stdcall
SCardWriteCacheA(
      SCARDCONTEXT hContext,
      UUID *CardIdentifier,
      DWORD FreshnessCounter,
      LPSTR LookupName,
      PBYTE Data,
      DWORD DataLen);
extern  LONG __stdcall
SCardWriteCacheW(
      SCARDCONTEXT hContext,
      UUID *CardIdentifier,
      DWORD FreshnessCounter,
      LPWSTR LookupName,
      PBYTE Data,
      DWORD DataLen);




#line 1287 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

#line 1289 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"



 
extern  LONG __stdcall 
SCardGetReaderIconA(
        SCARDCONTEXT hContext,
        LPCSTR szReaderName, 
  
  
           LPBYTE pbIcon,
     LPDWORD pcbIcon);
 
extern  LONG __stdcall 
SCardGetReaderIconW(
        SCARDCONTEXT hContext,
        LPCWSTR szReaderName, 
  
  
           LPBYTE pbIcon,
     LPDWORD pcbIcon);




#line 1315 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

 
extern  LONG __stdcall 
SCardGetDeviceTypeIdA(
        SCARDCONTEXT hContext,
        LPCSTR szReaderName, 
     LPDWORD pdwDeviceTypeId);
 
extern  LONG __stdcall 
SCardGetDeviceTypeIdW(
        SCARDCONTEXT hContext,
        LPCWSTR szReaderName, 
     LPDWORD pdwDeviceTypeId);




#line 1333 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"
  
 
extern  LONG __stdcall
SCardGetReaderDeviceInstanceIdA(
    SCARDCONTEXT hContext,
    LPCSTR szReaderName,
    LPSTR szDeviceInstanceId,
    LPDWORD pcchDeviceInstanceId);
 
extern  LONG __stdcall
SCardGetReaderDeviceInstanceIdW(
    SCARDCONTEXT hContext,
    LPCWSTR szReaderName,
    LPWSTR szDeviceInstanceId,
    LPDWORD pcchDeviceInstanceId);




#line 1353 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

 
extern  LONG __stdcall
SCardListReadersWithDeviceInstanceIdA(
       SCARDCONTEXT hContext,
       LPCSTR szDeviceInstanceId,
  
  
          LPSTR mszReaders,
    LPDWORD pcchReaders);
 
extern  LONG __stdcall
SCardListReadersWithDeviceInstanceIdW(
       SCARDCONTEXT hContext,
       LPCWSTR szDeviceInstanceId,
  
  
          LPWSTR mszReaders,
    LPDWORD pcchReaders);




#line 1377 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"








                                    


                                    

 
extern  LONG __stdcall
SCardAudit(
    SCARDCONTEXT hContext,
    DWORD dwEvent);

#line 1397 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"

#line 1399 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"
#pragma endregion


}
#line 1404 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"
#line 1405 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winscard.h"


#line 202 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 203 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"






















#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"
























#line 26 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"
#line 27 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"





















#pragma warning(push)
#pragma warning(disable:4201) 
#line 51 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"





#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"























#pragma warning(disable:4103)

#pragma pack(push,4)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack4.h"
#line 57 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"
#line 58 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"


extern "C" {
#line 62 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"


#pragma region Desktop Family









#line 75 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"






#line 82 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"
#line 83 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"






#line 90 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"
#line 91 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"



struct _PSP;
typedef struct _PSP * HPROPSHEETPAGE;


struct _PROPSHEETPAGEA;
struct _PROPSHEETPAGEW;
#line 101 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"

typedef UINT (__stdcall *LPFNPSPCALLBACKA)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEA *ppsp);
typedef UINT (__stdcall *LPFNPSPCALLBACKW)(HWND hwnd, UINT uMsg, struct _PROPSHEETPAGEW *ppsp);





#line 110 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"




















#line 131 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"







typedef LPCDLGTEMPLATE PROPSHEETPAGE_RESOURCE;


#line 142 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"


















































#line 193 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"

typedef struct _PROPSHEETPAGEA_V1
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEA_V1, *LPPROPSHEETPAGEA_V1;
typedef const PROPSHEETPAGEA_V1 *LPCPROPSHEETPAGEA_V1;

typedef struct _PROPSHEETPAGEA_V2
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR           pszHeaderTitle;    
    LPCSTR           pszHeaderSubTitle; 
} PROPSHEETPAGEA_V2, *LPPROPSHEETPAGEA_V2;
typedef const PROPSHEETPAGEA_V2 *LPCPROPSHEETPAGEA_V2;

typedef struct _PROPSHEETPAGEA_V3
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR           pszHeaderTitle;    
    LPCSTR           pszHeaderSubTitle; 

    HANDLE           hActCtx;
} PROPSHEETPAGEA_V3, *LPPROPSHEETPAGEA_V3;
typedef const PROPSHEETPAGEA_V3 *LPCPROPSHEETPAGEA_V3;


typedef struct _PROPSHEETPAGEA
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKA pfnCallback; UINT *pcRefParent;

    LPCSTR           pszHeaderTitle;    
    LPCSTR           pszHeaderSubTitle; 

    HANDLE           hActCtx;

    union 
    {
        HBITMAP     hbmHeader;
        LPCSTR      pszbmHeader;
    } ;

} PROPSHEETPAGEA_V4, *LPPROPSHEETPAGEA_V4;
typedef const PROPSHEETPAGEA_V4 *LPCPROPSHEETPAGEA_V4;
#line 239 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"

typedef struct _PROPSHEETPAGEW_V1
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;
} PROPSHEETPAGEW_V1, *LPPROPSHEETPAGEW_V1;
typedef const PROPSHEETPAGEW_V1 *LPCPROPSHEETPAGEW_V1;

typedef struct _PROPSHEETPAGEW_V2
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR           pszHeaderTitle;    
    LPCWSTR           pszHeaderSubTitle; 
} PROPSHEETPAGEW_V2, *LPPROPSHEETPAGEW_V2;
typedef const PROPSHEETPAGEW_V2 *LPCPROPSHEETPAGEW_V2;

typedef struct _PROPSHEETPAGEW_V3
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR           pszHeaderTitle;    
    LPCWSTR           pszHeaderSubTitle; 

    HANDLE           hActCtx;
} PROPSHEETPAGEW_V3, *LPPROPSHEETPAGEW_V3;
typedef const PROPSHEETPAGEW_V3 *LPCPROPSHEETPAGEW_V3;


typedef struct _PROPSHEETPAGEW
{
    DWORD dwSize; DWORD dwFlags; HINSTANCE hInstance; union { LPCWSTR pszTemplate; PROPSHEETPAGE_RESOURCE pResource; } ; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszTitle; DLGPROC pfnDlgProc; LPARAM lParam; LPFNPSPCALLBACKW pfnCallback; UINT *pcRefParent;

    LPCWSTR           pszHeaderTitle;    
    LPCWSTR           pszHeaderSubTitle; 

    HANDLE            hActCtx;

    union 
    {
        HBITMAP     hbmHeader;
        LPCWSTR     pszbmHeader;
    } ;

} PROPSHEETPAGEW_V4, *LPPROPSHEETPAGEW_V4;
typedef const PROPSHEETPAGEW_V4 *LPCPROPSHEETPAGEW_V4;
#line 285 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"













#line 299 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"



typedef    PROPSHEETPAGEA_V4    PROPSHEETPAGEA_LATEST;
typedef    PROPSHEETPAGEW_V4    PROPSHEETPAGEW_LATEST;
typedef  LPPROPSHEETPAGEA_V4  LPPROPSHEETPAGEA_LATEST;
typedef  LPPROPSHEETPAGEW_V4  LPPROPSHEETPAGEW_LATEST;
typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA_LATEST;
typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW_LATEST;







#line 316 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"



typedef    PROPSHEETPAGEA_V4    PROPSHEETPAGEA;
typedef    PROPSHEETPAGEW_V4    PROPSHEETPAGEW;
typedef  LPPROPSHEETPAGEA_V4  LPPROPSHEETPAGEA;
typedef  LPPROPSHEETPAGEW_V4  LPPROPSHEETPAGEW;
typedef LPCPROPSHEETPAGEA_V4 LPCPROPSHEETPAGEA;
typedef LPCPROPSHEETPAGEW_V4 LPCPROPSHEETPAGEW;














#line 340 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"











































#line 384 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"



#line 388 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"

























#line 414 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"

#line 416 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"























#line 440 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"



typedef int (__stdcall *PFNPROPSHEETCALLBACK)(HWND, UINT, LPARAM);

























typedef struct _PROPSHEETHEADERA_V1
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCSTR pStartPage; } ; union { LPCPROPSHEETPAGEA ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERA_V1, *LPPROPSHEETHEADERA_V1;
typedef const PROPSHEETHEADERA_V1 *LPCPROPSHEETHEADERA_V1;

typedef struct _PROPSHEETHEADERA_V2
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCSTR pszIcon; } ; LPCSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCSTR pStartPage; } ; union { LPCPROPSHEETPAGEA ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
    union 
    {
        HBITMAP hbmWatermark;
        LPCSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    union 
    {
        HBITMAP hbmHeader;     
        LPCSTR pszbmHeader;
    } ;
} PROPSHEETHEADERA_V2, *LPPROPSHEETHEADERA_V2;
typedef const PROPSHEETHEADERA_V2 *LPCPROPSHEETHEADERA_V2;

























typedef struct _PROPSHEETHEADERW_V1
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCWSTR pStartPage; } ; union { LPCPROPSHEETPAGEW ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
} PROPSHEETHEADERW_V1, *LPPROPSHEETHEADERW_V1;
typedef const PROPSHEETHEADERW_V1 *LPCPROPSHEETHEADERW_V1;

typedef struct _PROPSHEETHEADERW_V2
{
    DWORD dwSize; DWORD dwFlags; HWND hwndParent; HINSTANCE hInstance; union { HICON hIcon; LPCWSTR pszIcon; } ; LPCWSTR pszCaption; UINT nPages; union { UINT nStartPage; LPCWSTR pStartPage; } ; union { LPCPROPSHEETPAGEW ppsp; HPROPSHEETPAGE *phpage; } ; PFNPROPSHEETCALLBACK pfnCallback;
    union 
    {
        HBITMAP hbmWatermark;
        LPCWSTR pszbmWatermark;
    } ;
    HPALETTE hplWatermark;
    union 
    {
        HBITMAP hbmHeader;     
        LPCWSTR pszbmHeader;
    } ;
} PROPSHEETHEADERW_V2, *LPPROPSHEETHEADERW_V2;
typedef const PROPSHEETHEADERW_V2 *LPCPROPSHEETHEADERW_V2;









typedef    PROPSHEETHEADERA_V2      PROPSHEETHEADERA;
typedef    PROPSHEETHEADERW_V2      PROPSHEETHEADERW;
typedef  LPPROPSHEETHEADERA_V2      LPPROPSHEETHEADERA;
typedef  LPPROPSHEETHEADERW_V2      LPPROPSHEETHEADERW;
typedef LPCPROPSHEETHEADERA_V2      LPCPROPSHEETHEADERA;
typedef LPCPROPSHEETHEADERW_V2      LPCPROPSHEETHEADERW;













#line 567 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"














#line 582 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"

__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageA(LPCPROPSHEETPAGEA constPropSheetPagePointer);
__declspec(dllimport) HPROPSHEETPAGE __stdcall CreatePropertySheetPageW(LPCPROPSHEETPAGEW constPropSheetPagePointer);
__declspec(dllimport) BOOL           __stdcall DestroyPropertySheetPage(HPROPSHEETPAGE);

__declspec(dllimport) INT_PTR        __stdcall PropertySheetA(LPCPROPSHEETHEADERA);

__declspec(dllimport) INT_PTR        __stdcall PropertySheetW(LPCPROPSHEETHEADERW);







#line 598 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"



typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGE)(HPROPSHEETPAGE, LPARAM);
typedef BOOL (__stdcall *LPFNADDPROPSHEETPAGES)(LPVOID, LPFNADDPROPSHEETPAGE, LPARAM);


typedef struct _PSHNOTIFY
{
    NMHDR hdr;
    LPARAM lParam;
} PSHNOTIFY, *LPPSHNOTIFY;


















































































#line 693 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"




















#line 714 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"






























#line 745 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"
























#line 770 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"








#line 779 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"












#line 792 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"




































































#line 861 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"
























#pragma warning(pop)
#line 887 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"


#line 890 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"
#pragma endregion






#line 898 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"
#line 899 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"


}
#line 903 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 905 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"


#line 908 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"


#line 24 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"
#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


extern "C" {
#line 29 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

#pragma region Desktop Family



typedef struct _PRINTER_INFO_1A {
    DWORD   Flags;
    LPSTR   pDescription;
    LPSTR   pName;
    LPSTR   pComment;
} PRINTER_INFO_1A, *PPRINTER_INFO_1A, *LPPRINTER_INFO_1A;
typedef struct _PRINTER_INFO_1W {
    DWORD   Flags;
    LPWSTR  pDescription;
    LPWSTR  pName;
    LPWSTR  pComment;
} PRINTER_INFO_1W, *PPRINTER_INFO_1W, *LPPRINTER_INFO_1W;





typedef PRINTER_INFO_1A PRINTER_INFO_1;
typedef PPRINTER_INFO_1A PPRINTER_INFO_1;
typedef LPPRINTER_INFO_1A LPPRINTER_INFO_1;
#line 55 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _PRINTER_INFO_2A {
    LPSTR     pServerName;
    LPSTR     pPrinterName;
    LPSTR     pShareName;
    LPSTR     pPortName;
    LPSTR     pDriverName;
    LPSTR     pComment;
    LPSTR     pLocation;
    LPDEVMODEA pDevMode;
    LPSTR     pSepFile;
    LPSTR     pPrintProcessor;
    LPSTR     pDatatype;
    LPSTR     pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD   Attributes;
    DWORD   Priority;
    DWORD   DefaultPriority;
    DWORD   StartTime;
    DWORD   UntilTime;
    DWORD   Status;
    DWORD   cJobs;
    DWORD   AveragePPM;
} PRINTER_INFO_2A, *PPRINTER_INFO_2A, *LPPRINTER_INFO_2A;
typedef struct _PRINTER_INFO_2W {
    LPWSTR    pServerName;
    LPWSTR    pPrinterName;
    LPWSTR    pShareName;
    LPWSTR    pPortName;
    LPWSTR    pDriverName;
    LPWSTR    pComment;
    LPWSTR    pLocation;
    LPDEVMODEW pDevMode;
    LPWSTR    pSepFile;
    LPWSTR    pPrintProcessor;
    LPWSTR    pDatatype;
    LPWSTR    pParameters;
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
    DWORD   Attributes;
    DWORD   Priority;
    DWORD   DefaultPriority;
    DWORD   StartTime;
    DWORD   UntilTime;
    DWORD   Status;
    DWORD   cJobs;
    DWORD   AveragePPM;
} PRINTER_INFO_2W, *PPRINTER_INFO_2W, *LPPRINTER_INFO_2W;





typedef PRINTER_INFO_2A PRINTER_INFO_2;
typedef PPRINTER_INFO_2A PPRINTER_INFO_2;
typedef LPPRINTER_INFO_2A LPPRINTER_INFO_2;
#line 111 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _PRINTER_INFO_3 {
    PSECURITY_DESCRIPTOR pSecurityDescriptor;
} PRINTER_INFO_3, *PPRINTER_INFO_3, *LPPRINTER_INFO_3;

typedef struct _PRINTER_INFO_4A {
    LPSTR   pPrinterName;
    LPSTR   pServerName;
    DWORD   Attributes;
} PRINTER_INFO_4A, *PPRINTER_INFO_4A, *LPPRINTER_INFO_4A;
typedef struct _PRINTER_INFO_4W {
    LPWSTR  pPrinterName;
    LPWSTR  pServerName;
    DWORD   Attributes;
} PRINTER_INFO_4W, *PPRINTER_INFO_4W, *LPPRINTER_INFO_4W;





typedef PRINTER_INFO_4A PRINTER_INFO_4;
typedef PPRINTER_INFO_4A PPRINTER_INFO_4;
typedef LPPRINTER_INFO_4A LPPRINTER_INFO_4;
#line 135 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _PRINTER_INFO_5A {
    LPSTR   pPrinterName;
    LPSTR   pPortName;
    DWORD   Attributes;
    DWORD   DeviceNotSelectedTimeout;
    DWORD   TransmissionRetryTimeout;
} PRINTER_INFO_5A, *PPRINTER_INFO_5A, *LPPRINTER_INFO_5A;
typedef struct _PRINTER_INFO_5W {
    LPWSTR  pPrinterName;
    LPWSTR  pPortName;
    DWORD   Attributes;
    DWORD   DeviceNotSelectedTimeout;
    DWORD   TransmissionRetryTimeout;
} PRINTER_INFO_5W, *PPRINTER_INFO_5W, *LPPRINTER_INFO_5W;





typedef PRINTER_INFO_5A PRINTER_INFO_5;
typedef PPRINTER_INFO_5A PPRINTER_INFO_5;
typedef LPPRINTER_INFO_5A LPPRINTER_INFO_5;
#line 159 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _PRINTER_INFO_6 {
    DWORD   dwStatus;
} PRINTER_INFO_6, *PPRINTER_INFO_6, *LPPRINTER_INFO_6;


typedef struct _PRINTER_INFO_7A {
  LPSTR    pszObjectGUID;
  DWORD    dwAction;
} PRINTER_INFO_7A, *PPRINTER_INFO_7A, *LPPRINTER_INFO_7A;
typedef struct _PRINTER_INFO_7W {
  LPWSTR   pszObjectGUID;
  DWORD    dwAction;
} PRINTER_INFO_7W, *PPRINTER_INFO_7W, *LPPRINTER_INFO_7W;





typedef PRINTER_INFO_7A PRINTER_INFO_7;
typedef PPRINTER_INFO_7A PPRINTER_INFO_7;
typedef LPPRINTER_INFO_7A LPPRINTER_INFO_7;
#line 182 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"







typedef struct _PRINTER_INFO_8A {
    LPDEVMODEA pDevMode;
} PRINTER_INFO_8A, *PPRINTER_INFO_8A, *LPPRINTER_INFO_8A;
typedef struct _PRINTER_INFO_8W {
    LPDEVMODEW pDevMode;
} PRINTER_INFO_8W, *PPRINTER_INFO_8W, *LPPRINTER_INFO_8W;





typedef PRINTER_INFO_8A PRINTER_INFO_8;
typedef PPRINTER_INFO_8A PPRINTER_INFO_8;
typedef LPPRINTER_INFO_8A LPPRINTER_INFO_8;
#line 204 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _PRINTER_INFO_9A {
    LPDEVMODEA pDevMode;
} PRINTER_INFO_9A, *PPRINTER_INFO_9A, *LPPRINTER_INFO_9A;
typedef struct _PRINTER_INFO_9W {
    LPDEVMODEW pDevMode;
} PRINTER_INFO_9W, *PPRINTER_INFO_9W, *LPPRINTER_INFO_9W;





typedef PRINTER_INFO_9A PRINTER_INFO_9;
typedef PPRINTER_INFO_9A PPRINTER_INFO_9;
typedef LPPRINTER_INFO_9A LPPRINTER_INFO_9;
#line 220 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"




















































    
#line 274 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


    
#line 279 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



    
    
    
    
    
    
    
    
    
    
    

    

    
    
    
    
    
    

#line 304 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"







typedef struct _JOB_INFO_1A {
   DWORD    JobId;
   LPSTR      pPrinterName;
   LPSTR      pMachineName;
   LPSTR      pUserName;
   LPSTR      pDocument;
   LPSTR      pDatatype;
   LPSTR      pStatus;
   DWORD    Status;
   DWORD    Priority;
   DWORD    Position;
   DWORD    TotalPages;
   DWORD    PagesPrinted;
   SYSTEMTIME Submitted;
} JOB_INFO_1A, *PJOB_INFO_1A, *LPJOB_INFO_1A;
typedef struct _JOB_INFO_1W {
   DWORD    JobId;
   LPWSTR     pPrinterName;
   LPWSTR     pMachineName;
   LPWSTR     pUserName;
   LPWSTR     pDocument;
   LPWSTR     pDatatype;
   LPWSTR     pStatus;
   DWORD    Status;
   DWORD    Priority;
   DWORD    Position;
   DWORD    TotalPages;
   DWORD    PagesPrinted;
   SYSTEMTIME Submitted;
} JOB_INFO_1W, *PJOB_INFO_1W, *LPJOB_INFO_1W;





typedef JOB_INFO_1A JOB_INFO_1;
typedef PJOB_INFO_1A PJOB_INFO_1;
typedef LPJOB_INFO_1A LPJOB_INFO_1;
#line 350 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _JOB_INFO_2A {
   DWORD    JobId;
   LPSTR      pPrinterName;
   LPSTR      pMachineName;
   LPSTR      pUserName;
   LPSTR      pDocument;
   LPSTR      pNotifyName;
   LPSTR      pDatatype;
   LPSTR      pPrintProcessor;
   LPSTR      pParameters;
   LPSTR      pDriverName;
   LPDEVMODEA pDevMode;
   LPSTR      pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD    Status;
   DWORD    Priority;
   DWORD    Position;
   DWORD    StartTime;
   DWORD    UntilTime;
   DWORD    TotalPages;
   DWORD    Size;
   SYSTEMTIME Submitted;    
   DWORD    Time;           
   DWORD    PagesPrinted;
} JOB_INFO_2A, *PJOB_INFO_2A, *LPJOB_INFO_2A;
typedef struct _JOB_INFO_2W {
   DWORD    JobId;
   LPWSTR     pPrinterName;
   LPWSTR     pMachineName;
   LPWSTR     pUserName;
   LPWSTR     pDocument;
   LPWSTR     pNotifyName;
   LPWSTR     pDatatype;
   LPWSTR     pPrintProcessor;
   LPWSTR     pParameters;
   LPWSTR     pDriverName;
   LPDEVMODEW pDevMode;
   LPWSTR     pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD    Status;
   DWORD    Priority;
   DWORD    Position;
   DWORD    StartTime;
   DWORD    UntilTime;
   DWORD    TotalPages;
   DWORD    Size;
   SYSTEMTIME Submitted;    
   DWORD    Time;           
   DWORD    PagesPrinted;
} JOB_INFO_2W, *PJOB_INFO_2W, *LPJOB_INFO_2W;





typedef JOB_INFO_2A JOB_INFO_2;
typedef PJOB_INFO_2A PJOB_INFO_2;
typedef LPJOB_INFO_2A LPJOB_INFO_2;
#line 410 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _JOB_INFO_3 {
    DWORD   JobId;
    DWORD   NextJobId;
    DWORD   Reserved;
} JOB_INFO_3, *PJOB_INFO_3, *LPJOB_INFO_3;

typedef struct _JOB_INFO_4A {
   DWORD          JobId;
   LPSTR          pPrinterName;
   LPSTR          pMachineName;
   LPSTR          pUserName;
   LPSTR          pDocument;
   LPSTR          pNotifyName;
   LPSTR          pDatatype;
   LPSTR          pPrintProcessor;
   LPSTR          pParameters;
   LPSTR          pDriverName;
   LPDEVMODEA     pDevMode;
   LPSTR          pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD          Status;
   DWORD          Priority;
   DWORD          Position;
   DWORD          StartTime;
   DWORD          UntilTime;
   DWORD          TotalPages;
   DWORD          Size;
   SYSTEMTIME     Submitted;
   DWORD          Time;
   DWORD          PagesPrinted;
   LONG           SizeHigh;
} JOB_INFO_4A, *PJOB_INFO_4A, *LPJOB_INFO_4A;
typedef struct _JOB_INFO_4W {
   DWORD          JobId;
   LPWSTR         pPrinterName;
   LPWSTR         pMachineName;
   LPWSTR         pUserName;
   LPWSTR         pDocument;
   LPWSTR         pNotifyName;
   LPWSTR         pDatatype;
   LPWSTR         pPrintProcessor;
   LPWSTR         pParameters;
   LPWSTR         pDriverName;
   LPDEVMODEW     pDevMode;
   LPWSTR         pStatus;
   PSECURITY_DESCRIPTOR pSecurityDescriptor;
   DWORD          Status;
   DWORD          Priority;
   DWORD          Position;
   DWORD          StartTime;
   DWORD          UntilTime;
   DWORD          TotalPages;
   DWORD          Size;
   SYSTEMTIME     Submitted;
   DWORD          Time;
   DWORD          PagesPrinted;
   LONG           SizeHigh;
} JOB_INFO_4W, *PJOB_INFO_4W, *LPJOB_INFO_4W;





typedef JOB_INFO_4A JOB_INFO_4;
typedef PJOB_INFO_4A PJOB_INFO_4;
typedef LPJOB_INFO_4A LPJOB_INFO_4;
#line 478 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"










    
    
#line 491 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"















    
#line 508 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


    
    
#line 513 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



typedef struct _ADDJOB_INFO_1A {
    LPSTR     Path;
    DWORD   JobId;
} ADDJOB_INFO_1A, *PADDJOB_INFO_1A, *LPADDJOB_INFO_1A;
typedef struct _ADDJOB_INFO_1W {
    LPWSTR    Path;
    DWORD   JobId;
} ADDJOB_INFO_1W, *PADDJOB_INFO_1W, *LPADDJOB_INFO_1W;





typedef ADDJOB_INFO_1A ADDJOB_INFO_1;
typedef PADDJOB_INFO_1A PADDJOB_INFO_1;
typedef LPADDJOB_INFO_1A LPADDJOB_INFO_1;
#line 533 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


typedef struct _DRIVER_INFO_1A {
    LPSTR     pName;              
} DRIVER_INFO_1A, *PDRIVER_INFO_1A, *LPDRIVER_INFO_1A;
typedef struct _DRIVER_INFO_1W {
    LPWSTR    pName;              
} DRIVER_INFO_1W, *PDRIVER_INFO_1W, *LPDRIVER_INFO_1W;





typedef DRIVER_INFO_1A DRIVER_INFO_1;
typedef PDRIVER_INFO_1A PDRIVER_INFO_1;
typedef LPDRIVER_INFO_1A LPDRIVER_INFO_1;
#line 550 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _DRIVER_INFO_2A {
    DWORD   cVersion;
    LPSTR     pName;              
    LPSTR     pEnvironment;       
    LPSTR     pDriverPath;        
    LPSTR     pDataFile;          
    LPSTR     pConfigFile;        
} DRIVER_INFO_2A, *PDRIVER_INFO_2A, *LPDRIVER_INFO_2A;
typedef struct _DRIVER_INFO_2W {
    DWORD   cVersion;
    LPWSTR    pName;              
    LPWSTR    pEnvironment;       
    LPWSTR    pDriverPath;        
    LPWSTR    pDataFile;          
    LPWSTR    pConfigFile;        
} DRIVER_INFO_2W, *PDRIVER_INFO_2W, *LPDRIVER_INFO_2W;





typedef DRIVER_INFO_2A DRIVER_INFO_2;
typedef PDRIVER_INFO_2A PDRIVER_INFO_2;
typedef LPDRIVER_INFO_2A LPDRIVER_INFO_2;
#line 576 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _DRIVER_INFO_3A {
    DWORD   cVersion;
    LPSTR     pName;                    
    LPSTR     pEnvironment;             
    LPSTR     pDriverPath;              
    LPSTR     pDataFile;                
    LPSTR     pConfigFile;              
    LPSTR     pHelpFile;                
    LPSTR     pDependentFiles;          
    LPSTR     pMonitorName;             
    LPSTR     pDefaultDataType;         
} DRIVER_INFO_3A, *PDRIVER_INFO_3A, *LPDRIVER_INFO_3A;
typedef struct _DRIVER_INFO_3W {
    DWORD   cVersion;
    LPWSTR    pName;                    
    LPWSTR    pEnvironment;             
    LPWSTR    pDriverPath;              
    LPWSTR    pDataFile;                
    LPWSTR    pConfigFile;              
    LPWSTR    pHelpFile;                
    LPWSTR    pDependentFiles;          
    LPWSTR    pMonitorName;             
    LPWSTR    pDefaultDataType;         
} DRIVER_INFO_3W, *PDRIVER_INFO_3W, *LPDRIVER_INFO_3W;





typedef DRIVER_INFO_3A DRIVER_INFO_3;
typedef PDRIVER_INFO_3A PDRIVER_INFO_3;
typedef LPDRIVER_INFO_3A LPDRIVER_INFO_3;
#line 610 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _DRIVER_INFO_4A {
    DWORD   cVersion;
    LPSTR     pName;                    
    LPSTR     pEnvironment;             
    LPSTR     pDriverPath;              
    LPSTR     pDataFile;                
    LPSTR     pConfigFile;              
    LPSTR     pHelpFile;                
    LPSTR     pDependentFiles;          
    LPSTR     pMonitorName;             
    LPSTR     pDefaultDataType;         
    LPSTR     pszzPreviousNames;        
} DRIVER_INFO_4A, *PDRIVER_INFO_4A, *LPDRIVER_INFO_4A;
typedef struct _DRIVER_INFO_4W {
    DWORD   cVersion;
    LPWSTR    pName;                    
    LPWSTR    pEnvironment;             
    LPWSTR    pDriverPath;              
    LPWSTR    pDataFile;                
    LPWSTR    pConfigFile;              
    LPWSTR    pHelpFile;                
    LPWSTR    pDependentFiles;          
    LPWSTR    pMonitorName;             
    LPWSTR    pDefaultDataType;         
    LPWSTR    pszzPreviousNames;        
} DRIVER_INFO_4W, *PDRIVER_INFO_4W, *LPDRIVER_INFO_4W;





typedef DRIVER_INFO_4A DRIVER_INFO_4;
typedef PDRIVER_INFO_4A PDRIVER_INFO_4;
typedef LPDRIVER_INFO_4A LPDRIVER_INFO_4;
#line 646 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _DRIVER_INFO_5A {
    DWORD   cVersion;
    LPSTR     pName;                    
    LPSTR     pEnvironment;             
    LPSTR     pDriverPath;              
    LPSTR     pDataFile;                
    LPSTR     pConfigFile;              
    DWORD     dwDriverAttributes;       
    DWORD     dwConfigVersion;          
    DWORD     dwDriverVersion;          
} DRIVER_INFO_5A, *PDRIVER_INFO_5A, *LPDRIVER_INFO_5A;
typedef struct _DRIVER_INFO_5W {
    DWORD   cVersion;
    LPWSTR    pName;                    
    LPWSTR    pEnvironment;             
    LPWSTR    pDriverPath;              
    LPWSTR    pDataFile;                
    LPWSTR    pConfigFile;              
    DWORD     dwDriverAttributes;       
    DWORD     dwConfigVersion;          
    DWORD     dwDriverVersion;          
} DRIVER_INFO_5W, *PDRIVER_INFO_5W, *LPDRIVER_INFO_5W;





typedef DRIVER_INFO_5A DRIVER_INFO_5;
typedef PDRIVER_INFO_5A PDRIVER_INFO_5;
typedef LPDRIVER_INFO_5A LPDRIVER_INFO_5;
#line 678 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _DRIVER_INFO_6A {
    DWORD     cVersion;
    LPSTR     pName;                    
    LPSTR     pEnvironment;             
    LPSTR     pDriverPath;              
    LPSTR     pDataFile;                
    LPSTR     pConfigFile;              
    LPSTR     pHelpFile;                
    LPSTR     pDependentFiles;          
    LPSTR     pMonitorName;             
    LPSTR     pDefaultDataType;         
    LPSTR     pszzPreviousNames;        
    FILETIME  ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPSTR      pszMfgName;
    LPSTR      pszOEMUrl;
    LPSTR      pszHardwareID;
    LPSTR      pszProvider;
} DRIVER_INFO_6A, *PDRIVER_INFO_6A, *LPDRIVER_INFO_6A;
typedef struct _DRIVER_INFO_6W {
    DWORD     cVersion;
    LPWSTR    pName;                    
    LPWSTR    pEnvironment;             
    LPWSTR    pDriverPath;              
    LPWSTR    pDataFile;                
    LPWSTR    pConfigFile;              
    LPWSTR    pHelpFile;                
    LPWSTR    pDependentFiles;          
    LPWSTR    pMonitorName;             
    LPWSTR    pDefaultDataType;         
    LPWSTR    pszzPreviousNames;        
    FILETIME  ftDriverDate;
    DWORDLONG dwlDriverVersion;
    LPWSTR     pszMfgName;
    LPWSTR     pszOEMUrl;
    LPWSTR     pszHardwareID;
    LPWSTR     pszProvider;
} DRIVER_INFO_6W, *PDRIVER_INFO_6W, *LPDRIVER_INFO_6W;





typedef DRIVER_INFO_6A DRIVER_INFO_6;
typedef PDRIVER_INFO_6A PDRIVER_INFO_6;
typedef LPDRIVER_INFO_6A LPDRIVER_INFO_6;
#line 726 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"














typedef struct _DRIVER_INFO_8A {
    DWORD      cVersion;
    LPSTR      pName;                    
    LPSTR      pEnvironment;             
    LPSTR      pDriverPath;              
    LPSTR      pDataFile;                
    LPSTR      pConfigFile;              
    LPSTR      pHelpFile;                
    LPSTR      pDependentFiles;          
    LPSTR      pMonitorName;             
    LPSTR      pDefaultDataType;         
    LPSTR      pszzPreviousNames;        
    FILETIME   ftDriverDate;
    DWORDLONG  dwlDriverVersion;
    LPSTR      pszMfgName;
    LPSTR      pszOEMUrl;
    LPSTR      pszHardwareID;
    LPSTR      pszProvider;
    LPSTR      pszPrintProcessor;
    LPSTR      pszVendorSetup;
    LPSTR      pszzColorProfiles;
    LPSTR      pszInfPath;
    DWORD      dwPrinterDriverAttributes;
    LPSTR      pszzCoreDriverDependencies;
    FILETIME   ftMinInboxDriverVerDate;
    DWORDLONG  dwlMinInboxDriverVerVersion;
} DRIVER_INFO_8A, *PDRIVER_INFO_8A, *LPDRIVER_INFO_8A;
typedef struct _DRIVER_INFO_8W {
    DWORD      cVersion;
    LPWSTR     pName;                    
    LPWSTR     pEnvironment;             
    LPWSTR     pDriverPath;              
    LPWSTR     pDataFile;                
    LPWSTR     pConfigFile;              
    LPWSTR     pHelpFile;                
    LPWSTR     pDependentFiles;          
    LPWSTR     pMonitorName;             
    LPWSTR     pDefaultDataType;         
    LPWSTR     pszzPreviousNames;        
    FILETIME   ftDriverDate;
    DWORDLONG  dwlDriverVersion;
    LPWSTR     pszMfgName;
    LPWSTR     pszOEMUrl;
    LPWSTR     pszHardwareID;
    LPWSTR     pszProvider;
    LPWSTR     pszPrintProcessor;
    LPWSTR     pszVendorSetup;
    LPWSTR     pszzColorProfiles;
    LPWSTR     pszInfPath;
    DWORD      dwPrinterDriverAttributes;
    LPWSTR     pszzCoreDriverDependencies;
    FILETIME   ftMinInboxDriverVerDate;
    DWORDLONG  dwlMinInboxDriverVerVersion;
} DRIVER_INFO_8W, *PDRIVER_INFO_8W, *LPDRIVER_INFO_8W;





typedef DRIVER_INFO_8A DRIVER_INFO_8;
typedef PDRIVER_INFO_8A PDRIVER_INFO_8;
typedef LPDRIVER_INFO_8A LPDRIVER_INFO_8;
#line 803 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


















    
#line 823 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"




typedef struct _DOC_INFO_1A {
    LPSTR     pDocName;
    LPSTR     pOutputFile;
    LPSTR     pDatatype;
} DOC_INFO_1A, *PDOC_INFO_1A, *LPDOC_INFO_1A;
typedef struct _DOC_INFO_1W {
    LPWSTR    pDocName;
    LPWSTR    pOutputFile;
    LPWSTR    pDatatype;
} DOC_INFO_1W, *PDOC_INFO_1W, *LPDOC_INFO_1W;





typedef DOC_INFO_1A DOC_INFO_1;
typedef PDOC_INFO_1A PDOC_INFO_1;
typedef LPDOC_INFO_1A LPDOC_INFO_1;
#line 846 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _FORM_INFO_1A {
    DWORD   Flags;
    LPSTR     pName;
    SIZEL   Size;
    RECTL   ImageableArea;
} FORM_INFO_1A, *PFORM_INFO_1A, *LPFORM_INFO_1A;
typedef struct _FORM_INFO_1W {
    DWORD   Flags;
    LPWSTR    pName;
    SIZEL   Size;
    RECTL   ImageableArea;
} FORM_INFO_1W, *PFORM_INFO_1W, *LPFORM_INFO_1W;





typedef FORM_INFO_1A FORM_INFO_1;
typedef PFORM_INFO_1A PFORM_INFO_1;
typedef LPFORM_INFO_1A LPFORM_INFO_1;
#line 868 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


    
    
    

    

    typedef struct _FORM_INFO_2A {
        DWORD           Flags;
        LPCSTR          pName;
        SIZEL           Size;
        RECTL           ImageableArea;
        LPCSTR          pKeyword;
        DWORD           StringType;
        LPCSTR          pMuiDll;
        DWORD           dwResourceId;
        LPCSTR          pDisplayName;
        LANGID          wLangId;
    } FORM_INFO_2A, *PFORM_INFO_2A, *LPFORM_INFO_2A;
    typedef struct _FORM_INFO_2W {
        DWORD           Flags;
        LPCWSTR         pName;
        SIZEL           Size;
        RECTL           ImageableArea;
        LPCSTR          pKeyword;
        DWORD           StringType;
        LPCWSTR         pMuiDll;
        DWORD           dwResourceId;
        LPCWSTR         pDisplayName;
        LANGID          wLangId;
    } FORM_INFO_2W, *PFORM_INFO_2W, *LPFORM_INFO_2W;





typedef FORM_INFO_2A FORM_INFO_2;
typedef PFORM_INFO_2A PFORM_INFO_2;
typedef LPFORM_INFO_2A LPFORM_INFO_2;
#line 909 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"
#line 910 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _DOC_INFO_2A {
    LPSTR     pDocName;
    LPSTR     pOutputFile;
    LPSTR     pDatatype;
    DWORD   dwMode;
    DWORD   JobId;
} DOC_INFO_2A, *PDOC_INFO_2A, *LPDOC_INFO_2A;
typedef struct _DOC_INFO_2W {
    LPWSTR    pDocName;
    LPWSTR    pOutputFile;
    LPWSTR    pDatatype;
    DWORD   dwMode;
    DWORD   JobId;
} DOC_INFO_2W, *PDOC_INFO_2W, *LPDOC_INFO_2W;





typedef DOC_INFO_2A DOC_INFO_2;
typedef PDOC_INFO_2A PDOC_INFO_2;
typedef LPDOC_INFO_2A LPDOC_INFO_2;
#line 934 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"






typedef struct _DOC_INFO_3A {
    LPSTR     pDocName;
    LPSTR     pOutputFile;
    LPSTR     pDatatype;
    DWORD     dwFlags;
} DOC_INFO_3A, *PDOC_INFO_3A, *LPDOC_INFO_3A;
typedef struct _DOC_INFO_3W {
    LPWSTR    pDocName;
    LPWSTR    pOutputFile;
    LPWSTR    pDatatype;
    DWORD     dwFlags;
} DOC_INFO_3W, *PDOC_INFO_3W, *LPDOC_INFO_3W;





typedef DOC_INFO_3A DOC_INFO_3;
typedef PDOC_INFO_3A PDOC_INFO_3;
typedef LPDOC_INFO_3A LPDOC_INFO_3;
#line 961 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"







typedef struct _PRINTPROCESSOR_INFO_1A {
    LPSTR     pName;
} PRINTPROCESSOR_INFO_1A, *PPRINTPROCESSOR_INFO_1A, *LPPRINTPROCESSOR_INFO_1A;
typedef struct _PRINTPROCESSOR_INFO_1W {
    LPWSTR    pName;
} PRINTPROCESSOR_INFO_1W, *PPRINTPROCESSOR_INFO_1W, *LPPRINTPROCESSOR_INFO_1W;





typedef PRINTPROCESSOR_INFO_1A PRINTPROCESSOR_INFO_1;
typedef PPRINTPROCESSOR_INFO_1A PPRINTPROCESSOR_INFO_1;
typedef LPPRINTPROCESSOR_INFO_1A LPPRINTPROCESSOR_INFO_1;
#line 983 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


    typedef struct _PRINTPROCESSOR_CAPS_1 {
        DWORD     dwLevel;
        DWORD     dwNupOptions;
        DWORD     dwPageOrderFlags;
        DWORD     dwNumberOfCopies;
    } PRINTPROCESSOR_CAPS_1, *PPRINTPROCESSOR_CAPS_1;

    
    
#line 995 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


    typedef struct _PRINTPROCESSOR_CAPS_2 {
        DWORD     dwLevel;
        DWORD     dwNupOptions;
        DWORD     dwPageOrderFlags;
        DWORD     dwNumberOfCopies;

        
        DWORD     dwDuplexHandlingCaps;
        DWORD     dwNupDirectionCaps;
        DWORD     dwNupBorderCaps;
        DWORD     dwBookletHandlingCaps;
        DWORD     dwScalingCaps;

    } PRINTPROCESSOR_CAPS_2, *PPRINTPROCESSOR_CAPS_2;

    
    
    
    
    

    
    

    
    

    
    
    
    
    
    

    
    


#line 1036 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _PORT_INFO_1A {
    LPSTR     pName;
} PORT_INFO_1A, *PPORT_INFO_1A, *LPPORT_INFO_1A;
typedef struct _PORT_INFO_1W {
    LPWSTR    pName;
} PORT_INFO_1W, *PPORT_INFO_1W, *LPPORT_INFO_1W;





typedef PORT_INFO_1A PORT_INFO_1;
typedef PPORT_INFO_1A PPORT_INFO_1;
typedef LPPORT_INFO_1A LPPORT_INFO_1;
#line 1052 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _PORT_INFO_2A {
    LPSTR     pPortName;
    LPSTR     pMonitorName;
    LPSTR     pDescription;
    DWORD     fPortType;
    DWORD     Reserved;
} PORT_INFO_2A, *PPORT_INFO_2A, *LPPORT_INFO_2A;
typedef struct _PORT_INFO_2W {
    LPWSTR    pPortName;
    LPWSTR    pMonitorName;
    LPWSTR    pDescription;
    DWORD     fPortType;
    DWORD     Reserved;
} PORT_INFO_2W, *PPORT_INFO_2W, *LPPORT_INFO_2W;





typedef PORT_INFO_2A PORT_INFO_2;
typedef PPORT_INFO_2A PPORT_INFO_2;
typedef LPPORT_INFO_2A LPPORT_INFO_2;
#line 1076 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"






typedef struct _PORT_INFO_3A {
    DWORD   dwStatus;
    LPSTR   pszStatus;
    DWORD   dwSeverity;
} PORT_INFO_3A, *PPORT_INFO_3A, *LPPORT_INFO_3A;
typedef struct _PORT_INFO_3W {
    DWORD   dwStatus;
    LPWSTR  pszStatus;
    DWORD   dwSeverity;
} PORT_INFO_3W, *PPORT_INFO_3W, *LPPORT_INFO_3W;





typedef PORT_INFO_3A PORT_INFO_3;
typedef PPORT_INFO_3A PPORT_INFO_3;
typedef LPPORT_INFO_3A LPPORT_INFO_3;
#line 1101 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"





















typedef struct _MONITOR_INFO_1A{
    LPSTR     pName;
} MONITOR_INFO_1A, *PMONITOR_INFO_1A, *LPMONITOR_INFO_1A;
typedef struct _MONITOR_INFO_1W{
    LPWSTR    pName;
} MONITOR_INFO_1W, *PMONITOR_INFO_1W, *LPMONITOR_INFO_1W;





typedef MONITOR_INFO_1A MONITOR_INFO_1;
typedef PMONITOR_INFO_1A PMONITOR_INFO_1;
typedef LPMONITOR_INFO_1A LPMONITOR_INFO_1;
#line 1137 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _MONITOR_INFO_2A{
    LPSTR     pName;
    LPSTR     pEnvironment;
    LPSTR     pDLLName;
} MONITOR_INFO_2A, *PMONITOR_INFO_2A, *LPMONITOR_INFO_2A;
typedef struct _MONITOR_INFO_2W{
    LPWSTR    pName;
    LPWSTR    pEnvironment;
    LPWSTR    pDLLName;
} MONITOR_INFO_2W, *PMONITOR_INFO_2W, *LPMONITOR_INFO_2W;





typedef MONITOR_INFO_2A MONITOR_INFO_2;
typedef PMONITOR_INFO_2A PMONITOR_INFO_2;
typedef LPMONITOR_INFO_2A LPMONITOR_INFO_2;
#line 1157 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _DATATYPES_INFO_1A{
    LPSTR     pName;
} DATATYPES_INFO_1A, *PDATATYPES_INFO_1A, *LPDATATYPES_INFO_1A;
typedef struct _DATATYPES_INFO_1W{
    LPWSTR    pName;
} DATATYPES_INFO_1W, *PDATATYPES_INFO_1W, *LPDATATYPES_INFO_1W;





typedef DATATYPES_INFO_1A DATATYPES_INFO_1;
typedef PDATATYPES_INFO_1A PDATATYPES_INFO_1;
typedef LPDATATYPES_INFO_1A LPDATATYPES_INFO_1;
#line 1173 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _PRINTER_DEFAULTSA{
    LPSTR         pDatatype;
    LPDEVMODEA pDevMode;
    ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSA, *PPRINTER_DEFAULTSA, *LPPRINTER_DEFAULTSA;
typedef struct _PRINTER_DEFAULTSW{
    LPWSTR        pDatatype;
    LPDEVMODEW pDevMode;
    ACCESS_MASK DesiredAccess;
} PRINTER_DEFAULTSW, *PPRINTER_DEFAULTSW, *LPPRINTER_DEFAULTSW;





typedef PRINTER_DEFAULTSA PRINTER_DEFAULTS;
typedef PPRINTER_DEFAULTSA PPRINTER_DEFAULTS;
typedef LPPRINTER_DEFAULTSA LPPRINTER_DEFAULTS;
#line 1193 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _PRINTER_ENUM_VALUESA {
    LPSTR   pValueName;
    DWORD   cbValueName;
    DWORD   dwType;
    LPBYTE  pData;
    DWORD   cbData;
} PRINTER_ENUM_VALUESA, *PPRINTER_ENUM_VALUESA, *LPPRINTER_ENUM_VALUESA;
typedef struct _PRINTER_ENUM_VALUESW {
    LPWSTR  pValueName;
    DWORD   cbValueName;
    DWORD   dwType;
    LPBYTE  pData;
    DWORD   cbData;
} PRINTER_ENUM_VALUESW, *PPRINTER_ENUM_VALUESW, *LPPRINTER_ENUM_VALUESW;





typedef PRINTER_ENUM_VALUESA PRINTER_ENUM_VALUES;
typedef PPRINTER_ENUM_VALUESA PPRINTER_ENUM_VALUES;
typedef LPPRINTER_ENUM_VALUESA LPPRINTER_ENUM_VALUES;
#line 1217 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

 
BOOL
__stdcall
EnumPrintersA(
           DWORD   Flags,
       LPSTR Name,
              DWORD   Level,
 
              LPBYTE  pPrinterEnum,
              DWORD   cbBuf,
          LPDWORD pcbNeeded,
          LPDWORD pcReturned
);
 
BOOL
__stdcall
EnumPrintersW(
           DWORD   Flags,
       LPWSTR Name,
              DWORD   Level,
 
              LPBYTE  pPrinterEnum,
              DWORD   cbBuf,
          LPDWORD pcbNeeded,
          LPDWORD pcReturned
);




#line 1249 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



























HANDLE
__stdcall
GetSpoolFileHandle(
     HANDLE  hPrinter
);

HANDLE
__stdcall
CommitSpoolData(
     HANDLE  hPrinter,
     HANDLE  hSpoolFile,
        DWORD   cbCommit
);

BOOL
__stdcall
CloseSpoolFileHandle(
     HANDLE  hPrinter,
     HANDLE  hSpoolFile
);

BOOL
__stdcall
OpenPrinterA(
     LPSTR             pPrinterName,
        LPHANDLE            phPrinter,
     LPPRINTER_DEFAULTSA pDefault
);
BOOL
__stdcall
OpenPrinterW(
     LPWSTR             pPrinterName,
        LPHANDLE            phPrinter,
     LPPRINTER_DEFAULTSW pDefault
);




#line 1316 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
ResetPrinterA(
         HANDLE                hPrinter,
     LPPRINTER_DEFAULTSA   pDefault
);
BOOL
__stdcall
ResetPrinterW(
         HANDLE                hPrinter,
     LPPRINTER_DEFAULTSW   pDefault
);




#line 1334 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
SetJobA(
              HANDLE hPrinter,
                 DWORD  JobId,
  DWORD  Level,





                 LPBYTE pJob,
                 DWORD  Command
);
BOOL
__stdcall
SetJobW(
              HANDLE hPrinter,
                 DWORD  JobId,
  DWORD  Level,





                 LPBYTE pJob,
                 DWORD  Command
);




#line 1368 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
GetJobA(
   HANDLE   hPrinter,
      DWORD    JobId,
      DWORD    Level,
 
      LPBYTE   pJob,
      DWORD    cbBuf,
  LPDWORD  pcbNeeded
);
BOOL
__stdcall
GetJobW(
   HANDLE   hPrinter,
      DWORD    JobId,
      DWORD    Level,
 
      LPBYTE   pJob,
      DWORD    cbBuf,
  LPDWORD  pcbNeeded
);




#line 1396 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
EnumJobsA(
   HANDLE  hPrinter,
      DWORD   FirstJob,
      DWORD   NoJobs,
      DWORD   Level,
 
      LPBYTE  pJob,
      DWORD   cbBuf,
  LPDWORD pcbNeeded,
  LPDWORD pcReturned
);
BOOL
__stdcall
EnumJobsW(
   HANDLE  hPrinter,
      DWORD   FirstJob,
      DWORD   NoJobs,
      DWORD   Level,
 
      LPBYTE  pJob,
      DWORD   cbBuf,
  LPDWORD pcbNeeded,
  LPDWORD pcReturned
);




#line 1428 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

HANDLE
__stdcall
AddPrinterA(
     LPSTR    pName,
 
            DWORD      Level,


            LPBYTE     pPrinter
);
HANDLE
__stdcall
AddPrinterW(
     LPWSTR    pName,
 
            DWORD      Level,


            LPBYTE     pPrinter
);




#line 1454 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
DeletePrinter(
  HANDLE   hPrinter
);

BOOL
__stdcall
SetPrinterA(
                  HANDLE  hPrinter,
      DWORD   Level,
    
    
    
    
    
    
    
    
    
    
    
                     LPBYTE  pPrinter,
                  DWORD   Command
    );
BOOL
__stdcall
SetPrinterW(
                  HANDLE  hPrinter,
      DWORD   Level,
    
    
    
    
    
    
    
    
    
    
    
                     LPBYTE  pPrinter,
                  DWORD   Command
    );




#line 1504 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
GetPrinterA(
   HANDLE  hPrinter,
      DWORD   Level,
 
      LPBYTE  pPrinter,
      DWORD   cbBuf,
  LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterW(
   HANDLE  hPrinter,
      DWORD   Level,
 
      LPBYTE  pPrinter,
      DWORD   cbBuf,
  LPDWORD pcbNeeded
);




#line 1530 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
AddPrinterDriverA(
     LPSTR   pName,
            DWORD     Level,
         LPBYTE    pDriverInfo
);
BOOL
__stdcall
AddPrinterDriverW(
     LPWSTR   pName,
            DWORD     Level,
         LPBYTE    pDriverInfo
);




#line 1550 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
AddPrinterDriverExA(
          LPSTR  pName,
  DWORD    Level,





                 PBYTE    lpbDriverInfo,
              DWORD    dwFileCopyFlags
);
BOOL
__stdcall
AddPrinterDriverExW(
          LPWSTR  pName,
  DWORD    Level,





                 PBYTE    lpbDriverInfo,
              DWORD    dwFileCopyFlags
);




#line 1582 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
EnumPrinterDriversA(
     LPSTR        pName,
     LPSTR        pEnvironment,
            DWORD          Level,
 
            LPBYTE        pDriverInfo,
            DWORD          cbBuf,
        LPDWORD        pcbNeeded,
        LPDWORD        pcReturned
);
BOOL
__stdcall
EnumPrinterDriversW(
     LPWSTR        pName,
     LPWSTR        pEnvironment,
            DWORD          Level,
 
            LPBYTE        pDriverInfo,
            DWORD          cbBuf,
        LPDWORD        pcbNeeded,
        LPDWORD        pcReturned
);




#line 1612 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
GetPrinterDriverA(
         HANDLE  hPrinter,
     LPSTR pEnvironment,
            DWORD   Level,
 
            LPBYTE  pDriverInfo,
            DWORD   cbBuf,
        LPDWORD pcbNeeded
);
BOOL
__stdcall
GetPrinterDriverW(
         HANDLE  hPrinter,
     LPWSTR pEnvironment,
            DWORD   Level,
 
            LPBYTE  pDriverInfo,
            DWORD   cbBuf,
        LPDWORD pcbNeeded
);




#line 1640 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
GetPrinterDriverDirectoryA(
     LPSTR   pName,
     LPSTR   pEnvironment,
            DWORD     Level,
 
            LPBYTE    pDriverDirectory,
            DWORD     cbBuf,
        LPDWORD   pcbNeeded
);
BOOL
__stdcall
GetPrinterDriverDirectoryW(
     LPWSTR   pName,
     LPWSTR   pEnvironment,
            DWORD     Level,
 
            LPBYTE    pDriverDirectory,
            DWORD     cbBuf,
        LPDWORD   pcbNeeded
);




#line 1668 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
DeletePrinterDriverA(
     LPSTR    pName,
     LPSTR    pEnvironment,
         LPSTR    pDriverName
);
BOOL
__stdcall
DeletePrinterDriverW(
     LPWSTR    pName,
     LPWSTR    pEnvironment,
         LPWSTR    pDriverName
);




#line 1688 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
DeletePrinterDriverExA(
     LPSTR    pName,
     LPSTR    pEnvironment,
         LPSTR    pDriverName,
            DWORD      dwDeleteFlag,
            DWORD      dwVersionFlag
);
BOOL
__stdcall
DeletePrinterDriverExW(
     LPWSTR    pName,
     LPWSTR    pEnvironment,
         LPWSTR    pDriverName,
            DWORD      dwDeleteFlag,
            DWORD      dwVersionFlag
);




#line 1712 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



BOOL
__stdcall
AddPrintProcessorA(
    LPSTR   pName,
    LPSTR   pEnvironment,
        LPSTR   pPathName,
        LPSTR   pPrintProcessorName
);
BOOL
__stdcall
AddPrintProcessorW(
    LPWSTR   pName,
    LPWSTR   pEnvironment,
        LPWSTR   pPathName,
        LPWSTR   pPrintProcessorName
);




#line 1736 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
EnumPrintProcessorsA(
    LPSTR   pName,
    LPSTR   pEnvironment,
           DWORD     Level,
 
           LPBYTE    pPrintProcessorInfo,
           DWORD     cbBuf,
       LPDWORD   pcbNeeded,
       LPDWORD   pcReturned
);
BOOL
__stdcall
EnumPrintProcessorsW(
    LPWSTR   pName,
    LPWSTR   pEnvironment,
           DWORD     Level,
 
           LPBYTE    pPrintProcessorInfo,
           DWORD     cbBuf,
       LPDWORD   pcbNeeded,
       LPDWORD   pcReturned
);




#line 1766 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



BOOL
__stdcall
GetPrintProcessorDirectoryA(
    LPSTR    pName,
    LPSTR    pEnvironment,
           DWORD      Level,
 
           LPBYTE     pPrintProcessorInfo,
           DWORD      cbBuf,
       LPDWORD    pcbNeeded
);
BOOL
__stdcall
GetPrintProcessorDirectoryW(
    LPWSTR    pName,
    LPWSTR    pEnvironment,
           DWORD      Level,
 
           LPBYTE     pPrintProcessorInfo,
           DWORD      cbBuf,
       LPDWORD    pcbNeeded
);




#line 1796 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

 
BOOL
__stdcall
EnumPrintProcessorDatatypesA(
     LPSTR   pName,
         LPSTR   pPrintProcessorName,
            DWORD     Level,
 
            LPBYTE    pDatatypes,
            DWORD     cbBuf,
        LPDWORD   pcbNeeded,
        LPDWORD   pcReturned
);
 
BOOL
__stdcall
EnumPrintProcessorDatatypesW(
     LPWSTR   pName,
         LPWSTR   pPrintProcessorName,
            DWORD     Level,
 
            LPBYTE    pDatatypes,
            DWORD     cbBuf,
        LPDWORD   pcbNeeded,
        LPDWORD   pcReturned
);




#line 1828 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
DeletePrintProcessorA(
     LPSTR   pName,
     LPSTR   pEnvironment,
         LPSTR   pPrintProcessorName
);
BOOL
__stdcall
DeletePrintProcessorW(
     LPWSTR   pName,
     LPWSTR   pEnvironment,
         LPWSTR   pPrintProcessorName
);




#line 1848 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

DWORD
__stdcall
StartDocPrinterA(
              HANDLE  hPrinter,
  DWORD    Level,


                 LPBYTE  pDocInfo
);
DWORD
__stdcall
StartDocPrinterW(
              HANDLE  hPrinter,
  DWORD    Level,


                 LPBYTE  pDocInfo
);




#line 1872 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
StartPagePrinter(
     HANDLE  hPrinter
);

BOOL
__stdcall
WritePrinter(
     HANDLE  hPrinter,
 
        LPVOID  pBuf,
        DWORD   cbBuf,
    LPDWORD pcWritten
);


BOOL
__stdcall
FlushPrinter(
     HANDLE  hPrinter,
 
        LPVOID  pBuf,
        DWORD   cbBuf,
    LPDWORD pcWritten,
        DWORD   cSleep
);

BOOL
__stdcall
EndPagePrinter(
     HANDLE   hPrinter
);

BOOL
__stdcall
AbortPrinter(
     HANDLE   hPrinter
);

BOOL
__stdcall
ReadPrinter(
     HANDLE  hPrinter,
 
        LPVOID  pBuf,
        DWORD   cbBuf,
    LPDWORD pNoBytesRead
);

BOOL
__stdcall
EndDocPrinter(
       HANDLE   hPrinter
    );

BOOL
__stdcall
AddJobA(
     HANDLE  hPrinter,
        DWORD   Level,
 
        LPBYTE  pData,
        DWORD   cbBuf,
    LPDWORD pcbNeeded
);
BOOL
__stdcall
AddJobW(
     HANDLE  hPrinter,
        DWORD   Level,
 
        LPBYTE  pData,
        DWORD   cbBuf,
    LPDWORD pcbNeeded
);




#line 1954 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
ScheduleJob(
     HANDLE  hPrinter,
        DWORD   JobId
);

BOOL
__stdcall
PrinterProperties(
     HWND    hWnd,
     HANDLE  hPrinter
);

LONG
__stdcall
DocumentPropertiesA(
         HWND      hWnd,
             HANDLE    hPrinter,
             LPSTR   pDeviceName,
        PDEVMODEA pDevModeOutput,
         PDEVMODEA pDevModeInput,
                DWORD     fMode
);
LONG
__stdcall
DocumentPropertiesW(
         HWND      hWnd,
             HANDLE    hPrinter,
             LPWSTR   pDeviceName,
        PDEVMODEW pDevModeOutput,
         PDEVMODEW pDevModeInput,
                DWORD     fMode
);




#line 1994 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

LONG
__stdcall
AdvancedDocumentPropertiesA(
             HWND        hWnd,
             HANDLE      hPrinter,
             LPSTR     pDeviceName,
      PDEVMODEA   pDevModeOutput,
         PDEVMODEA   pDevModeInput
);
LONG
__stdcall
AdvancedDocumentPropertiesW(
             HWND        hWnd,
             HANDLE      hPrinter,
             LPWSTR     pDeviceName,
      PDEVMODEW   pDevModeOutput,
         PDEVMODEW   pDevModeInput
);




#line 2018 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


    LONG
    ExtDeviceMode(
             HWND        hWnd,
             HANDLE      hInst,
          LPDEVMODEA  pDevModeOutput,
             LPSTR       pDeviceName,
             LPSTR       pPort,
             LPDEVMODEA  pDevModeInput,
             LPSTR       pProfile,
                    DWORD       fMode
    );
#line 2032 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


DWORD
__stdcall
GetPrinterDataA(
          HANDLE   hPrinter,
          LPSTR  pValueName,
     LPDWORD  pType,
 
             LPBYTE   pData,
             DWORD    nSize,
         LPDWORD  pcbNeeded
);
DWORD
__stdcall
GetPrinterDataW(
          HANDLE   hPrinter,
          LPWSTR  pValueName,
     LPDWORD  pType,
 
             LPBYTE   pData,
             DWORD    nSize,
         LPDWORD  pcbNeeded
);




#line 2061 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

DWORD
__stdcall
GetPrinterDataExA(
          HANDLE   hPrinter,
          LPCSTR pKeyName,
          LPCSTR pValueName,
     LPDWORD  pType,
 
             LPBYTE   pData,
             DWORD    nSize,
         LPDWORD  pcbNeeded
);
DWORD
__stdcall
GetPrinterDataExW(
          HANDLE   hPrinter,
          LPCWSTR pKeyName,
          LPCWSTR pValueName,
     LPDWORD  pType,
 
             LPBYTE   pData,
             DWORD    nSize,
         LPDWORD  pcbNeeded
);




#line 2091 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

DWORD
__stdcall
EnumPrinterDataA(
         HANDLE   hPrinter,
            DWORD    dwIndex,
 
            LPSTR  pValueName,
            DWORD    cbValueName,
        LPDWORD  pcbValueName,
    LPDWORD  pType,
 
            LPBYTE   pData,
            DWORD    cbData,

    LPDWORD  pcbData
);
DWORD
__stdcall
EnumPrinterDataW(
         HANDLE   hPrinter,
            DWORD    dwIndex,
 
            LPWSTR  pValueName,
            DWORD    cbValueName,
        LPDWORD  pcbValueName,
    LPDWORD  pType,
 
            LPBYTE   pData,
            DWORD    cbData,

    LPDWORD  pcbData
);




#line 2129 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

DWORD
__stdcall
EnumPrinterDataExA(
     HANDLE    hPrinter,
     LPCSTR  pKeyName,
 
        LPBYTE    pEnumValues,
        DWORD     cbEnumValues,
    LPDWORD   pcbEnumValues,
    LPDWORD   pnEnumValues
);
DWORD
__stdcall
EnumPrinterDataExW(
     HANDLE    hPrinter,
     LPCWSTR  pKeyName,
 
        LPBYTE    pEnumValues,
        DWORD     cbEnumValues,
    LPDWORD   pcbEnumValues,
    LPDWORD   pnEnumValues
);




#line 2157 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

DWORD
__stdcall
EnumPrinterKeyA(
     HANDLE   hPrinter,
     LPCSTR pKeyName,
 
        LPSTR  pSubkey,
        DWORD    cbSubkey,
    LPDWORD  pcbSubkey
);
DWORD
__stdcall
EnumPrinterKeyW(
     HANDLE   hPrinter,
     LPCWSTR pKeyName,
 
        LPWSTR  pSubkey,
        DWORD    cbSubkey,
    LPDWORD  pcbSubkey
);




#line 2183 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


DWORD
__stdcall
SetPrinterDataA(
     HANDLE  hPrinter,
     LPSTR pValueName,
        DWORD   Type,
 
        LPBYTE  pData,
        DWORD   cbData
);
DWORD
__stdcall
SetPrinterDataW(
     HANDLE  hPrinter,
     LPWSTR pValueName,
        DWORD   Type,
 
        LPBYTE  pData,
        DWORD   cbData
);




#line 2210 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


DWORD
__stdcall
SetPrinterDataExA(
     HANDLE   hPrinter,
     LPCSTR pKeyName,
     LPCSTR pValueName,
        DWORD    Type,
 
        LPBYTE   pData,
        DWORD    cbData
);
DWORD
__stdcall
SetPrinterDataExW(
     HANDLE   hPrinter,
     LPCWSTR pKeyName,
     LPCWSTR pValueName,
        DWORD    Type,
 
        LPBYTE   pData,
        DWORD    cbData
);




#line 2239 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



DWORD
__stdcall
DeletePrinterDataA(
     HANDLE  hPrinter,
     LPSTR pValueName
);
DWORD
__stdcall
DeletePrinterDataW(
     HANDLE  hPrinter,
     LPWSTR pValueName
);




#line 2259 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


DWORD
__stdcall
DeletePrinterDataExA(
     HANDLE   hPrinter,
     LPCSTR pKeyName,
     LPCSTR pValueName
);
DWORD
__stdcall
DeletePrinterDataExW(
     HANDLE   hPrinter,
     LPCWSTR pKeyName,
     LPCWSTR pValueName
);




#line 2280 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


DWORD
__stdcall
DeletePrinterKeyA(
     HANDLE   hPrinter,
     LPCSTR pKeyName
);
DWORD
__stdcall
DeletePrinterKeyW(
     HANDLE   hPrinter,
     LPCWSTR pKeyName
);




#line 2299 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



































    
#line 2336 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


    
#line 2340 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"





























#line 2370 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


typedef struct _PRINTER_NOTIFY_OPTIONS_TYPE {
    WORD Type;
    WORD Reserved0;
    DWORD Reserved1;
    DWORD Reserved2;
    DWORD Count;
    PWORD pFields;
} PRINTER_NOTIFY_OPTIONS_TYPE, *PPRINTER_NOTIFY_OPTIONS_TYPE, *LPPRINTER_NOTIFY_OPTIONS_TYPE;




typedef struct _PRINTER_NOTIFY_OPTIONS {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PPRINTER_NOTIFY_OPTIONS_TYPE pTypes;
} PRINTER_NOTIFY_OPTIONS, *PPRINTER_NOTIFY_OPTIONS, *LPPRINTER_NOTIFY_OPTIONS;





typedef struct _PRINTER_NOTIFY_INFO_DATA {
    WORD Type;
    WORD Field;
    DWORD Reserved;
    DWORD Id;
    union {
        DWORD adwData[2];
        struct {
            DWORD  cbBuf;
            LPVOID pBuf;
        } Data;
    } NotifyData;
} PRINTER_NOTIFY_INFO_DATA, *PPRINTER_NOTIFY_INFO_DATA, *LPPRINTER_NOTIFY_INFO_DATA;

typedef struct _PRINTER_NOTIFY_INFO {
    DWORD Version;
    DWORD Flags;
    DWORD Count;
    PRINTER_NOTIFY_INFO_DATA aData[1];
} PRINTER_NOTIFY_INFO, *PPRINTER_NOTIFY_INFO, *LPPRINTER_NOTIFY_INFO;


    typedef struct _BINARY_CONTAINER{
        DWORD cbBuf;
        LPBYTE pData;
    } BINARY_CONTAINER, *PBINARY_CONTAINER;


    typedef struct _BIDI_DATA{
        DWORD dwBidiType;
        union {
            BOOL   bData;
            LONG   iData;
            LPWSTR sData;
            FLOAT  fData;
            BINARY_CONTAINER biData;
            }u;
    } BIDI_DATA, *PBIDI_DATA, *LPBIDI_DATA;


    typedef struct _BIDI_REQUEST_DATA{
        DWORD     dwReqNumber;
        LPWSTR    pSchema;
        BIDI_DATA data;
    } BIDI_REQUEST_DATA , *PBIDI_REQUEST_DATA , *LPBIDI_REQUEST_DATA;


    typedef struct _BIDI_REQUEST_CONTAINER{
        DWORD Version;
        DWORD Flags;
        DWORD Count;
        BIDI_REQUEST_DATA aData[ 1 ];
    }BIDI_REQUEST_CONTAINER, *PBIDI_REQUEST_CONTAINER, *LPBIDI_REQUEST_CONTAINER;

    typedef struct _BIDI_RESPONSE_DATA{
        DWORD  dwResult;
        DWORD  dwReqNumber;
        LPWSTR pSchema;
        BIDI_DATA data;
    } BIDI_RESPONSE_DATA, *PBIDI_RESPONSE_DATA, *LPBIDI_RESPONSE_DATA;

    typedef struct _BIDI_RESPONSE_CONTAINER{
        DWORD Version;
        DWORD Flags;
        DWORD Count;
        BIDI_RESPONSE_DATA aData[ 1 ];
    } BIDI_RESPONSE_CONTAINER, *PBIDI_RESPONSE_CONTAINER, *LPBIDI_RESPONSE_CONTAINER;

    
    
    
    

    typedef enum {
        BIDI_NULL   = 0,
        BIDI_INT    = 1,
        BIDI_FLOAT  = 2,
        BIDI_BOOL   = 3,
        BIDI_STRING = 4,
        BIDI_TEXT   = 5,
        BIDI_ENUM   = 6,
        BIDI_BLOB   = 7
    } BIDI_TYPE;

    
    


    



    
    

    
    
    
    
    
    
#line 2497 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

DWORD
__stdcall
WaitForPrinterChange(
  HANDLE  hPrinter,
     DWORD   Flags
);

HANDLE
__stdcall
FindFirstPrinterChangeNotification(
      HANDLE hPrinter,
         DWORD  fdwFilter,
         DWORD  fdwOptions,
  PVOID  pPrinterNotifyOptions
    );


BOOL
__stdcall
FindNextPrinterChangeNotification(
         HANDLE hChange,
    PDWORD pdwChange,
     LPVOID pvReserved,
    LPVOID *ppPrinterNotifyInfo
    );

BOOL
__stdcall
FreePrinterNotifyInfo(
    PPRINTER_NOTIFY_INFO pPrinterNotifyInfo
    );

BOOL
__stdcall
FindClosePrinterChangeNotification(
    HANDLE hChange
    );
























#line 2560 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"










#line 2571 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

DWORD
__stdcall
PrinterMessageBoxA(
    HANDLE    hPrinter,
       DWORD     Error,
    HWND      hWnd,
    LPSTR   pText,
    LPSTR   pCaption,
       DWORD     dwType
);
DWORD
__stdcall
PrinterMessageBoxW(
    HANDLE    hPrinter,
       DWORD     Error,
    HWND      hWnd,
    LPWSTR   pText,
    LPWSTR   pCaption,
       DWORD     dwType
);




#line 2597 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"











BOOL
__stdcall
ClosePrinter(
  HANDLE hPrinter
);

BOOL
__stdcall
AddFormA(
              HANDLE hPrinter,
  DWORD  Level,


                 LPBYTE pForm
);
BOOL
__stdcall
AddFormW(
              HANDLE hPrinter,
  DWORD  Level,


                 LPBYTE pForm
);




#line 2637 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
DeleteFormA(
     HANDLE    hPrinter,
     LPSTR   pFormName
);
BOOL
__stdcall
DeleteFormW(
     HANDLE    hPrinter,
     LPWSTR   pFormName
);




#line 2655 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



BOOL
__stdcall
GetFormA(
     HANDLE        hPrinter,
     LPSTR       pFormName,
        DWORD         Level,
 
        LPBYTE        pForm,
        DWORD         cbBuf,
    LPDWORD       pcbNeeded
);
BOOL
__stdcall
GetFormW(
     HANDLE        hPrinter,
     LPWSTR       pFormName,
        DWORD         Level,
 
        LPBYTE        pForm,
        DWORD         cbBuf,
    LPDWORD       pcbNeeded
);




#line 2685 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



BOOL
__stdcall
SetFormA(
              HANDLE  hPrinter,
              LPSTR pFormName,
  DWORD   Level,


                 LPBYTE  pForm
);
BOOL
__stdcall
SetFormW(
              HANDLE  hPrinter,
              LPWSTR pFormName,
  DWORD   Level,


                 LPBYTE  pForm
);




#line 2713 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
EnumFormsA(
     HANDLE  hPrinter,
        DWORD   Level,
 
        LPBYTE  pForm,
        DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);
BOOL
__stdcall
EnumFormsW(
     HANDLE  hPrinter,
        DWORD   Level,
 
        LPBYTE  pForm,
        DWORD   cbBuf,
    LPDWORD pcbNeeded,
    LPDWORD pcReturned
);




#line 2741 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


BOOL
__stdcall
EnumMonitorsA(
     LPSTR   pName,
            DWORD       Level,
 
            LPBYTE      pMonitor,
            DWORD       cbBuf,
        LPDWORD    pcbNeeded,
        LPDWORD    pcReturned
);
BOOL
__stdcall
EnumMonitorsW(
     LPWSTR   pName,
            DWORD       Level,
 
            LPBYTE      pMonitor,
            DWORD       cbBuf,
        LPDWORD    pcbNeeded,
        LPDWORD    pcReturned
);




#line 2770 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



BOOL
__stdcall
AddMonitorA(
     LPSTR pName,
            DWORD   Level,
 
            LPBYTE  pMonitors
);
BOOL
__stdcall
AddMonitorW(
     LPWSTR pName,
            DWORD   Level,
 
            LPBYTE  pMonitors
);




#line 2794 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



BOOL
__stdcall
DeleteMonitorA(
     LPSTR     pName,
     LPSTR     pEnvironment,
         LPSTR     pMonitorName
);
BOOL
__stdcall
DeleteMonitorW(
     LPWSTR     pName,
     LPWSTR     pEnvironment,
         LPWSTR     pMonitorName
);




#line 2816 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



BOOL
__stdcall
EnumPortsA(
     LPSTR pName,
            DWORD   Level,
 
            LPBYTE  pPort,
            DWORD   cbBuf,
        LPDWORD pcbNeeded,
        LPDWORD pcReturned
);
BOOL
__stdcall
EnumPortsW(
     LPWSTR pName,
            DWORD   Level,
 
            LPBYTE  pPort,
            DWORD   cbBuf,
        LPDWORD pcbNeeded,
        LPDWORD pcReturned
);




#line 2846 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


BOOL
__stdcall
AddPortA(
     LPSTR   pName,
         HWND      hWnd,
         LPSTR   pMonitorName
);
BOOL
__stdcall
AddPortW(
     LPWSTR   pName,
         HWND      hWnd,
         LPWSTR   pMonitorName
);




#line 2867 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



BOOL
__stdcall
ConfigurePortA(
     LPSTR   pName,
         HWND      hWnd,
         LPSTR   pPortName
);
BOOL
__stdcall
ConfigurePortW(
     LPWSTR   pName,
         HWND      hWnd,
         LPWSTR   pPortName
);




#line 2889 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
DeletePortA(
     LPSTR pName,
         HWND    hWnd,
         LPSTR pPortName
);
BOOL
__stdcall
DeletePortW(
     LPWSTR pName,
         HWND    hWnd,
         LPWSTR pPortName
);




#line 2909 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
XcvDataW(
         HANDLE  hXcv,
         PCWSTR  pszDataName,
 
            PBYTE   pInputData,
            DWORD   cbInputData,
 
            PBYTE   pOutputData,
            DWORD   cbOutputData,
        PDWORD  pcbOutputNeeded,
    PDWORD  pdwStatus
);


BOOL
__stdcall
GetDefaultPrinterA(
        LPSTR   pszBuffer,
                              LPDWORD   pcchBuffer
    );
BOOL
__stdcall
GetDefaultPrinterW(
        LPWSTR   pszBuffer,
                              LPDWORD   pcchBuffer
    );




#line 2943 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
SetDefaultPrinterA(
     LPCSTR pszPrinter
    );
BOOL
__stdcall
SetDefaultPrinterW(
     LPCWSTR pszPrinter
    );




#line 2959 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


BOOL
__stdcall
SetPortA(
     LPSTR     pName,
         LPSTR     pPortName,
            DWORD       dwLevel,
 
            LPBYTE      pPortInfo
);
BOOL
__stdcall
SetPortW(
     LPWSTR     pName,
         LPWSTR     pPortName,
            DWORD       dwLevel,
 
            LPBYTE      pPortInfo
);




#line 2984 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



BOOL
__stdcall
AddPrinterConnectionA(
  LPSTR   pName
);
BOOL
__stdcall
AddPrinterConnectionW(
  LPWSTR   pName
);




#line 3002 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



BOOL
__stdcall
DeletePrinterConnectionA(
  LPSTR   pName
);
BOOL
__stdcall
DeletePrinterConnectionW(
  LPWSTR   pName
);




#line 3020 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



HANDLE
__stdcall
ConnectToPrinterDlg(
     HWND    hwnd,
       DWORD    Flags
);

typedef struct _PROVIDOR_INFO_1A{
    LPSTR     pName;
    LPSTR     pEnvironment;
    LPSTR     pDLLName;
} PROVIDOR_INFO_1A, *PPROVIDOR_INFO_1A, *LPPROVIDOR_INFO_1A;
typedef struct _PROVIDOR_INFO_1W{
    LPWSTR    pName;
    LPWSTR    pEnvironment;
    LPWSTR    pDLLName;
} PROVIDOR_INFO_1W, *PPROVIDOR_INFO_1W, *LPPROVIDOR_INFO_1W;





typedef PROVIDOR_INFO_1A PROVIDOR_INFO_1;
typedef PPROVIDOR_INFO_1A PPROVIDOR_INFO_1;
typedef LPPROVIDOR_INFO_1A LPPROVIDOR_INFO_1;
#line 3049 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

typedef struct _PROVIDOR_INFO_2A{
    LPSTR     pOrder;
} PROVIDOR_INFO_2A, *PPROVIDOR_INFO_2A, *LPPROVIDOR_INFO_2A;
typedef struct _PROVIDOR_INFO_2W{
    LPWSTR    pOrder;
} PROVIDOR_INFO_2W, *PPROVIDOR_INFO_2W, *LPPROVIDOR_INFO_2W;





typedef PROVIDOR_INFO_2A PROVIDOR_INFO_2;
typedef PPROVIDOR_INFO_2A PPROVIDOR_INFO_2;
typedef LPPROVIDOR_INFO_2A LPPROVIDOR_INFO_2;
#line 3065 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
AddPrintProvidorA(
          LPSTR  pName,
  DWORD    Level,


              LPBYTE   pProvidorInfo
);
BOOL
__stdcall
AddPrintProvidorW(
          LPWSTR  pName,
  DWORD    Level,


              LPBYTE   pProvidorInfo
);




#line 3089 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

BOOL
__stdcall
DeletePrintProvidorA(
     LPSTR   pName,
     LPSTR   pEnvironment,
         LPSTR   pPrintProvidorName
);
BOOL
__stdcall
DeletePrintProvidorW(
     LPWSTR   pName,
     LPWSTR   pEnvironment,
         LPWSTR   pPrintProvidorName
);




#line 3109 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


    BOOL
    __stdcall
    IsValidDevmodeA(
             PDEVMODEA   pDevmode,
                    size_t      DevmodeSize
        );
    BOOL
    __stdcall
    IsValidDevmodeW(
             PDEVMODEW   pDevmode,
                    size_t      DevmodeSize
        );




#line 3128 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"
#line 3129 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"




















    
#line 3151 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"










    
#line 3164 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


    
#line 3168 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"










#line 3179 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"




#line 3184 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"










    
#line 3197 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"









































    





#line 3246 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


    





#line 3256 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"




















































































    
    
    
    
    typedef enum _PRINTER_OPTION_FLAGS
    {
        PRINTER_OPTION_NO_CACHE       = 1 << 0,
        PRINTER_OPTION_CACHE          = 1 << 1,
        PRINTER_OPTION_CLIENT_CHANGE  = 1 << 2,
        PRINTER_OPTION_NO_CLIENT_DATA = 1 << 3,
    } PRINTER_OPTION_FLAGS;


    typedef struct _PRINTER_OPTIONSA
    {
        UINT            cbSize;
        DWORD           dwFlags;
    } PRINTER_OPTIONSA, *PPRINTER_OPTIONSA, *LPPRINTER_OPTIONSA;
    typedef struct _PRINTER_OPTIONSW
    {
        UINT            cbSize;
        DWORD           dwFlags;
    } PRINTER_OPTIONSW, *PPRINTER_OPTIONSW, *LPPRINTER_OPTIONSW;





typedef PRINTER_OPTIONSA PRINTER_OPTIONS;
typedef PPRINTER_OPTIONSA PPRINTER_OPTIONS;
typedef LPPRINTER_OPTIONSA LPPRINTER_OPTIONS;
#line 3372 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

    BOOL
    __stdcall
    OpenPrinter2A(
           LPCSTR                pPrinterName,
              LPHANDLE                phPrinter,
           PPRINTER_DEFAULTSA      pDefault,
           PPRINTER_OPTIONSA       pOptions
    );
    BOOL
    __stdcall
    OpenPrinter2W(
           LPCWSTR                pPrinterName,
              LPHANDLE                phPrinter,
           PPRINTER_DEFAULTSW      pDefault,
           PPRINTER_OPTIONSW       pOptions
    );




#line 3394 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

    
    

    typedef struct _PRINTER_CONNECTION_INFO_1A
    {
        DWORD       dwFlags;
        LPSTR       pszDriverName;
    } PRINTER_CONNECTION_INFO_1A, *PPRINTER_CONNECTION_INFO_1A;
    typedef struct _PRINTER_CONNECTION_INFO_1W
    {
        DWORD       dwFlags;
        LPWSTR      pszDriverName;
    } PRINTER_CONNECTION_INFO_1W, *PPRINTER_CONNECTION_INFO_1W;




typedef PRINTER_CONNECTION_INFO_1A PRINTER_CONNECTION_INFO_1;
typedef PPRINTER_CONNECTION_INFO_1A PPRINTER_CONNECTION_INFO_1;
#line 3415 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

    BOOL
    __stdcall
    AddPrinterConnection2A(
         HWND            hWnd,
             LPCSTR        pszName,
                DWORD           dwLevel,
             PVOID           pConnectionInfo
        );
    BOOL
    __stdcall
    AddPrinterConnection2W(
         HWND            hWnd,
             LPCWSTR        pszName,
                DWORD           dwLevel,
             PVOID           pConnectionInfo
        );




#line 3437 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"








    HRESULT
    __stdcall
    InstallPrinterDriverFromPackageA(
        LPCSTR    pszServer,
        LPCSTR    pszInfPath,
            LPCSTR    pszDriverName,
        LPCSTR    pszEnvironment,
            DWORD       dwFlags
    );
    HRESULT
    __stdcall
    InstallPrinterDriverFromPackageW(
        LPCWSTR    pszServer,
        LPCWSTR    pszInfPath,
            LPCWSTR    pszDriverName,
        LPCWSTR    pszEnvironment,
            DWORD       dwFlags
    );




#line 3468 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



                                            


    HRESULT
    __stdcall
    UploadPrinterDriverPackageA(
        LPCSTR    pszServer,
            LPCSTR    pszInfPath,
        LPCSTR    pszEnvironment,
            DWORD       dwFlags,
            HWND        hwnd,
     
               LPSTR     pszDestInfPath,
         PULONG      pcchDestInfPath
    );
    HRESULT
    __stdcall
    UploadPrinterDriverPackageW(
        LPCWSTR    pszServer,
            LPCWSTR    pszInfPath,
        LPCWSTR    pszEnvironment,
            DWORD       dwFlags,
            HWND        hwnd,
     
               LPWSTR     pszDestInfPath,
         PULONG      pcchDestInfPath
    );




#line 3503 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

    typedef struct _CORE_PRINTER_DRIVERA
    {
        GUID         CoreDriverGUID;
        FILETIME     ftDriverDate;
        DWORDLONG    dwlDriverVersion;
        CHAR         szPackageID[260];
    } CORE_PRINTER_DRIVERA, *PCORE_PRINTER_DRIVERA;
    typedef struct _CORE_PRINTER_DRIVERW
    {
        GUID         CoreDriverGUID;
        FILETIME     ftDriverDate;
        DWORDLONG    dwlDriverVersion;
        WCHAR        szPackageID[260];
    } CORE_PRINTER_DRIVERW, *PCORE_PRINTER_DRIVERW;




typedef CORE_PRINTER_DRIVERA CORE_PRINTER_DRIVER;
typedef PCORE_PRINTER_DRIVERA PCORE_PRINTER_DRIVER;
#line 3525 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

    HRESULT
    __stdcall
    GetCorePrinterDriversA(
                               LPCSTR               pszServer,
                               LPCSTR               pszEnvironment,
                                   LPCSTR               pszzCoreDriverDependencies,
                                   DWORD                  cCorePrinterDrivers,
      PCORE_PRINTER_DRIVERA  pCorePrinterDrivers
    );
    HRESULT
    __stdcall
    GetCorePrinterDriversW(
                               LPCWSTR               pszServer,
                               LPCWSTR               pszEnvironment,
                                   LPCWSTR               pszzCoreDriverDependencies,
                                   DWORD                  cCorePrinterDrivers,
      PCORE_PRINTER_DRIVERW  pCorePrinterDrivers
    );




#line 3549 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

    HRESULT
    __stdcall
    CorePrinterDriverInstalledA(
                 LPCSTR     pszServer,
                 LPCSTR     pszEnvironment,
                     GUID         CoreDriverGUID,
                     FILETIME     ftDriverDate,
                     DWORDLONG    dwlDriverVersion,
                    BOOL         *pbDriverInstalled
    );
    HRESULT
    __stdcall
    CorePrinterDriverInstalledW(
                 LPCWSTR     pszServer,
                 LPCWSTR     pszEnvironment,
                     GUID         CoreDriverGUID,
                     FILETIME     ftDriverDate,
                     DWORDLONG    dwlDriverVersion,
                    BOOL         *pbDriverInstalled
    );




#line 3575 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

    HRESULT
    __stdcall
    GetPrinterDriverPackagePathA(
                                        LPCSTR      pszServer,
                                        LPCSTR      pszEnvironment,
                                        LPCSTR      pszLanguage,
                                            LPCSTR      pszPackageID,
         LPSTR       pszDriverPackageCab,
                                        DWORD         cchDriverPackageCab,
                                           LPDWORD       pcchRequiredSize
    );
    HRESULT
    __stdcall
    GetPrinterDriverPackagePathW(
                                        LPCWSTR      pszServer,
                                        LPCWSTR      pszEnvironment,
                                        LPCWSTR      pszLanguage,
                                            LPCWSTR      pszPackageID,
         LPWSTR       pszDriverPackageCab,
                                        DWORD         cchDriverPackageCab,
                                           LPDWORD       pcchRequiredSize
    );




#line 3603 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

    HRESULT
    __stdcall
    DeletePrinterDriverPackageA(
        LPCSTR    pszServer,
            LPCSTR    pszInfPath,
        LPCSTR    pszEnvironment
    );
    HRESULT
    __stdcall
    DeletePrinterDriverPackageW(
        LPCWSTR    pszServer,
            LPCWSTR    pszInfPath,
        LPCWSTR    pszEnvironment
    );




#line 3623 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

    typedef enum
    {
        kPropertyTypeString = 1,
        kPropertyTypeInt32,
        kPropertyTypeInt64,
        kPropertyTypeByte,
        kPropertyTypeTime,
        kPropertyTypeDevMode,
        kPropertyTypeSD,
        kPropertyTypeNotificationReply,
        kPropertyTypeNotificationOptions,
        kPropertyTypeBuffer

    } EPrintPropertyType;

    typedef enum
    {
        kAddingDocumentSequence = 0,
        kDocumentSequenceAdded  = 1,
        kAddingFixedDocument    = 2,
        kFixedDocumentAdded     = 3,
        kAddingFixedPage        = 4,
        kFixedPageAdded         = 5,
        kResourceAdded          = 6,
        kFontAdded              = 7,
        kImageAdded             = 8,
        kXpsDocumentCommitted   = 9

    } EPrintXPSJobProgress;

    typedef enum
    {
        kJobProduction = 1,
        kJobConsumption

    } EPrintXPSJobOperation;

    typedef struct
    {
        EPrintPropertyType       ePropertyType;
        union
        {
            BYTE                 propertyByte;
            PWSTR                propertyString;
            LONG                 propertyInt32;
            LONGLONG             propertyInt64;
            struct {
                DWORD  cbBuf;
                LPVOID pBuf;
            }                    propertyBlob;
        } value;

    }PrintPropertyValue;

    typedef struct
    {
        WCHAR*                  propertyName;
        PrintPropertyValue      propertyValue;

    }PrintNamedProperty;

    typedef struct
    {
        ULONG                   numberOfProperties;
        PrintNamedProperty*     propertiesCollection;

    }PrintPropertiesCollection;

    HRESULT
    __stdcall
    ReportJobProcessingProgress(
             HANDLE                         printerHandle,
                ULONG                          jobId,
                EPrintXPSJobOperation          jobOperation,
                EPrintXPSJobProgress           jobProgress
        );

    BOOL
    __stdcall
    GetPrinterDriver2A(
             HWND    hWnd,
                 HANDLE  hPrinter,
             LPSTR pEnvironment,
                    DWORD   Level,
         
                    LPBYTE  pDriverInfo,
                    DWORD   cbBuf,
                LPDWORD pcbNeeded
    );
    BOOL
    __stdcall
    GetPrinterDriver2W(
             HWND    hWnd,
                 HANDLE  hPrinter,
             LPWSTR pEnvironment,
                    DWORD   Level,
         
                    LPBYTE  pDriverInfo,
                    DWORD   cbBuf,
                LPDWORD pcbNeeded
    );




#line 3730 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

#line 3732 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



typedef enum
{
    PRINT_EXECUTION_CONTEXT_APPLICATION = 0,
    PRINT_EXECUTION_CONTEXT_SPOOLER_SERVICE = 1,
    PRINT_EXECUTION_CONTEXT_SPOOLER_ISOLATION_HOST = 2,
    PRINT_EXECUTION_CONTEXT_FILTER_PIPELINE = 3,
    PRINT_EXECUTION_CONTEXT_WOW64 = 4
}
PRINT_EXECUTION_CONTEXT;

typedef struct
{
    PRINT_EXECUTION_CONTEXT context;
    DWORD                   clientAppPID;
}
PRINT_EXECUTION_DATA;

BOOL
__stdcall
GetPrintExecutionData(
      PRINT_EXECUTION_DATA *pData
    );


#line 3760 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"



DWORD
__stdcall
GetJobNamedPropertyValue(
       HANDLE             hPrinter,
       DWORD              JobId,
       PCWSTR             pszName,
      PrintPropertyValue *pValue
    );

void
__stdcall
FreePrintPropertyValue(
      PrintPropertyValue *pValue
    );

void
__stdcall
FreePrintNamedPropertyArray(
                                   DWORD              cProperties,
     
        
                                      PrintNamedProperty **ppProperties
    );

DWORD
__stdcall
SetJobNamedProperty(
       HANDLE                   hPrinter,
       DWORD                    JobId,
       const PrintNamedProperty *pProperty
    );

DWORD
__stdcall
DeleteJobNamedProperty(
       HANDLE             hPrinter,
       DWORD              JobId,
       PCWSTR             pszName
    );

DWORD
__stdcall
EnumJobNamedProperties(
       HANDLE             hPrinter,
       DWORD              JobId,
      DWORD              *pcProperties,
    
          PrintNamedProperty **ppProperties
    );

HRESULT
__stdcall
GetPrintOutputInfo(
             HWND   hWnd,
             PCWSTR pszPrinter,
     HANDLE *phFile,
     PWSTR  *ppszOutputFile
    );




#line 3826 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


#line 3829 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"
#pragma endregion


}
#line 3834 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"


#line 3837 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winspool.h"

#line 207 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"

















#pragma once
#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"
#line 24 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"








#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"






#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"






















#pragma once
#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"
#line 27 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
 



























#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apiset.h"

















































































































































































#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\apisetcconv.h"






























































































#line 31 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"









#line 41 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"










#line 52 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"




#line 57 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"




#line 62 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"




#line 67 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"







#pragma once
#line 76 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"
#line 78 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"


















#line 97 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#line 99 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#pragma region Application Family




































































































#line 202 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"


























#line 229 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
   
   
#line 232 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#line 233 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"







extern "C++"
{
    template<typename T>     void** IID_PPV_ARGS_Helper(T** pp) 
    {
#pragma prefast(suppress: 6269, "Tool issue with unused static_cast")
        static_cast<IUnknown*>(*pp);    
        return reinterpret_cast<void**>(pp);
    }    
}





















































#line 303 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"












#line 316 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#line 317 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"









#line 327 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#line 328 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"















#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"














 



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\limits.h"














#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\crtdefs.h"














 



























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\limits.h"
















#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\limits.h"









































#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\limits.h"






#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\limits.h"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\limits.h"




#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\limits.h"
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\limits.h"
































#line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\limits.h"
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"





#pragma pack(push,8)


extern "C" {
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"



















typedef int (__cdecl * _onexit_t)(void);



#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"



#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"




#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"


#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"






typedef struct _div_t {
        int quot;
        int rem;
} div_t;

typedef struct _ldiv_t {
        long quot;
        long rem;
} ldiv_t;

typedef struct _lldiv_t {
        long long quot;
        long long rem;
} lldiv_t;


#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"










#pragma pack(4)
typedef struct {
    unsigned char ld[10];
} _LDOUBLE;
#pragma pack()













#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

typedef struct {
        double x;
} _CRT_DOUBLE;

typedef struct {
    float f;
} _CRT_FLOAT;





typedef struct {
        


        long double x;
} _LONGDOUBLE;



#pragma pack(4)
typedef struct {
    unsigned char ld12[12];
} _LDBL12;
#pragma pack()


#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

























































typedef void (__cdecl *_purecall_handler)(void); 


 _purecall_handler __cdecl _set_purecall_handler(  _purecall_handler _Handler);
 _purecall_handler __cdecl _get_purecall_handler(void);
#line 214 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"


extern "C++"
{




#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
}
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"



typedef void (__cdecl *_invalid_parameter_handler)(const wchar_t *, const wchar_t *, const wchar_t *, unsigned int, uintptr_t); 


 _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(  _invalid_parameter_handler _Handler);
 _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"




 extern int * __cdecl _errno(void);


errno_t __cdecl _set_errno(  int _Value);
errno_t __cdecl _get_errno(  int * _Value);
#line 244 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

 unsigned long * __cdecl __doserrno(void);


errno_t __cdecl _set_doserrno(  unsigned long _Value);
errno_t __cdecl _get_doserrno(  unsigned long * _Value);


 __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char ** __cdecl __sys_errlist(void);


 __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int * __cdecl __sys_nerr(void);
















#line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"




 extern int __argc;          
 extern char ** __argv;      
 extern wchar_t ** __wargv;  







#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

#line 290 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"








 extern char ** _environ;    
 extern wchar_t ** _wenviron;    
#line 301 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

#line 303 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  extern char * _pgmptr;      
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  extern wchar_t * _wpgmptr;  




















#line 327 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

errno_t __cdecl _get_pgmptr( char ** _Value);
errno_t __cdecl _get_wpgmptr( wchar_t ** _Value);



__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  extern int _fmode;          



#line 338 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

 errno_t __cdecl _set_fmode(  int _Mode);
 errno_t __cdecl _get_fmode(  int * _PMode);





#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
extern "C++"
{
template <typename _CountofType, size_t _SizeOfArray>
char (*__countof_helper( _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

}
#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
#line 355 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"





 __declspec(noreturn) void __cdecl exit(  int _Code);
 __declspec(noreturn) void __cdecl _exit(  int _Code);
 __declspec(noreturn) void __cdecl abort(void);
#line 364 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

 unsigned int __cdecl _set_abort_behavior(  unsigned int _Flags,   unsigned int _Mask);



        int       __cdecl abs(  int _X);
        long      __cdecl labs(  long _X);
        long long __cdecl llabs(  long long _X);
#line 373 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

        __int64    __cdecl _abs64(__int64);




















#line 396 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"















#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
        int    __cdecl atexit(void (__cdecl *)(void));
#line 414 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"


   double  __cdecl atof(  const char *_String);
   double  __cdecl _atof_l(  const char *_String,   _locale_t _Locale);
#line 419 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
    int    __cdecl atoi(  const char *_Str);
   int    __cdecl _atoi_l(  const char *_Str,   _locale_t _Locale);
   long   __cdecl atol(  const char *_Str);
   long   __cdecl _atol_l(  const char *_Str,   _locale_t _Locale);



   void * __cdecl bsearch_s(  const void * _Key,   const void * _Base, 
          rsize_t _NumOfElements,   rsize_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void * _Context);
#line 430 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
   void * __cdecl bsearch(  const void * _Key,   const void * _Base, 
          size_t _NumOfElements,   size_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(const void *, const void *));


 void __cdecl qsort_s(  void * _Base, 
          rsize_t _NumOfElements,   rsize_t _SizeOfElements,
          int (__cdecl * _PtFuncCompare)(void *, const void *, const void *), void *_Context);
#line 439 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
 void __cdecl qsort(  void * _Base, 
	  size_t _NumOfElements,   size_t _SizeOfElements, 
          int (__cdecl * _PtFuncCompare)(const void *, const void *));
#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
          unsigned short __cdecl _byteswap_ushort(  unsigned short _Short);
          unsigned long  __cdecl _byteswap_ulong (  unsigned long _Long);
          unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Int64);
   div_t  __cdecl div(  int _Numerator,   int _Denominator);


   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl getenv(  const char * _VarName);

  errno_t __cdecl getenv_s(  size_t * _ReturnSize,   char * _DstBuf,   rsize_t _DstSize,   const char * _VarName);
#line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t * _ReturnSize, char (&_Dest)[_Size],   const char * _VarName) throw() { return getenv_s(_ReturnSize, _Dest, _Size, _VarName); } }



#line 458 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _dupenv_s(  char **_PBuffer,   size_t * _PBufferSizeInBytes,   const char * _VarName);



#line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
#line 465 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _itoa_s(  int _Value,   char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itoa_s(  int _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _itoa( int _Value,   char *_Dest,  int _Radix);
  errno_t __cdecl _i64toa_s(  __int64 _Val,   char * _DstBuf,   size_t _Size,   int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _i64toa(  __int64 _Val,     char * _DstBuf,   int _Radix);
  errno_t __cdecl _ui64toa_s(  unsigned __int64 _Val,   char * _DstBuf,   size_t _Size,   int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _ui64toa(  unsigned __int64 _Val,     char * _DstBuf,   int _Radix);
   __int64 __cdecl _atoi64(  const char * _String);
   __int64 __cdecl _atoi64_l(  const char * _String,   _locale_t _Locale);
   __int64 __cdecl _strtoi64(  const char * _String,     char ** _EndPtr,   int _Radix);
   __int64 __cdecl _strtoi64_l(  const char * _String,     char ** _EndPtr,   int _Radix,   _locale_t _Locale);
   unsigned __int64 __cdecl _strtoui64(  const char * _String,     char ** _EndPtr,   int _Radix);
   unsigned __int64 __cdecl _strtoui64_l(  const char * _String,     char ** _EndPtr,   int  _Radix,   _locale_t _Locale);
   ldiv_t __cdecl ldiv(  long _Numerator,   long _Denominator);
   lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);

extern "C++"
{
    inline long abs(long _X)
    {
        return labs(_X);
    }
    inline long long abs(long long _X)
    {
        return llabs(_X);
    }
    inline ldiv_t div(long _A1, long _A2)
    {
        return ldiv(_A1, _A2);
    }
    inline lldiv_t div(long long _A1, long long _A2)
    {
        return lldiv(_A1, _A2);
    }
}
#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
  errno_t __cdecl _ltoa_s(  long _Val,   char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _ltoa( long _Value,   char *_Dest,  int _Radix);
   int    __cdecl mblen(    const char * _Ch,   size_t _MaxCount);
   int    __cdecl _mblen_l(    const char * _Ch,   size_t _MaxCount,   _locale_t _Locale);
   size_t __cdecl _mbstrlen(  const char * _Str);
   size_t __cdecl _mbstrlen_l(  const char *_Str,   _locale_t _Locale);
   size_t __cdecl _mbstrnlen(  const char *_Str,   size_t _MaxCount);
   size_t __cdecl _mbstrnlen_l(  const char *_Str,   size_t _MaxCount,   _locale_t _Locale);
 int    __cdecl mbtowc(    wchar_t * _DstCh,     const char * _SrcCh,   size_t _SrcSizeInBytes);
 int    __cdecl _mbtowc_l(    wchar_t * _DstCh,     const char * _SrcCh,   size_t _SrcSizeInBytes,   _locale_t _Locale);
  errno_t __cdecl mbstowcs_s(  size_t * _PtNumOfCharConverted,   wchar_t * _DstBuf,   size_t _SizeInWords,   const char * _SrcBuf,   size_t _MaxCount );
extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t * _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   const char * _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl mbstowcs( wchar_t *_Dest,  const char * _Source,  size_t _MaxCount);

  errno_t __cdecl _mbstowcs_s_l(  size_t * _PtNumOfCharConverted,   wchar_t * _DstBuf,   size_t _SizeInWords,   const char * _SrcBuf,   size_t _MaxCount,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t * _PtNumOfCharConverted, wchar_t (&_Dest)[_Size],   const char * _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,   const char * _Source,   size_t _MaxCount,   _locale_t _Locale);

   int    __cdecl rand(void);


#line 525 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

  int    __cdecl _set_error_mode(  int _Mode);

 void   __cdecl srand(  unsigned int _Seed);
   double __cdecl strtod(  const char * _Str,     char ** _EndPtr);
   double __cdecl _strtod_l(  const char * _Str,     char ** _EndPtr,   _locale_t _Locale);
   long   __cdecl strtol(  const char * _Str,     char ** _EndPtr,   int _Radix );
   long   __cdecl _strtol_l(  const char *_Str,     char **_EndPtr,   int _Radix,   _locale_t _Locale);
   unsigned long __cdecl strtoul(  const char * _Str,     char ** _EndPtr,   int _Radix);
   unsigned long __cdecl _strtoul_l(const char * _Str,     char **_EndPtr,   int _Radix,   _locale_t _Locale);




 int __cdecl system(  const char * _Command);
#line 541 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
#line 542 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _ultoa_s(  unsigned long _Val,   char * _DstBuf,   size_t _Size,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Dest)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl _ultoa( unsigned long _Value,   char *_Dest,  int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int    __cdecl wctomb(  char * _MbCh,   wchar_t _WCh);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) int    __cdecl _wctomb_l(    char * _MbCh,   wchar_t _WCh,   _locale_t _Locale);

  errno_t __cdecl wctomb_s(  int * _SizeConverted,   char * _MbCh,   rsize_t _SizeInBytes,   wchar_t _WCh);
#line 551 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
  errno_t __cdecl _wctomb_s_l(  int * _SizeConverted,   char * _MbCh,   size_t _SizeInBytes,   wchar_t _WCh,   _locale_t _Locale);
  errno_t __cdecl wcstombs_s(  size_t * _PtNumOfCharConverted,   char * _Dst,   size_t _DstSizeInBytes,   const wchar_t * _Src,   size_t _MaxCountInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t * _PtNumOfCharConverted,   char (&_Dest)[_Size],   const wchar_t * _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl wcstombs( char *_Dest,  const wchar_t * _Source,  size_t _MaxCount);
  errno_t __cdecl _wcstombs_s_l(  size_t * _PtNumOfCharConverted,   char * _Dst,   size_t _DstSizeInBytes,   const wchar_t * _Src,   size_t _MaxCountInBytes,   _locale_t _Locale);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t * _PtNumOfCharConverted,   char (&_Dest)[_Size],   const wchar_t * _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  size_t __cdecl _wcstombs_l(  char *_Dest,   const wchar_t * _Source,   size_t _MaxCount,   _locale_t _Locale);

























#line 584 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"


































#line 619 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
        __declspec(noalias) __declspec(restrict)    void * __cdecl calloc(  size_t _Count,   size_t _Size);
                     __declspec(noalias)                                                                             void   __cdecl free(    void * _Memory);
        __declspec(noalias) __declspec(restrict)                              void * __cdecl malloc(  size_t _Size);
 
       __declspec(noalias) __declspec(restrict)                           void * __cdecl realloc(    void * _Memory,   size_t _NewSize);
 
       __declspec(noalias) __declspec(restrict)                       void * __cdecl _recalloc(    void * _Memory,   size_t _Count,   size_t _Size);
                     __declspec(noalias)                                                                             void   __cdecl _aligned_free(    void * _Memory);
       __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_malloc(  size_t _Size,   size_t _Alignment);
       __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_offset_malloc(  size_t _Size,   size_t _Alignment,   size_t _Offset);
 
       __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_realloc(    void * _Memory,   size_t _NewSize,   size_t _Alignment);
 
       __declspec(noalias) __declspec(restrict)                       void * __cdecl _aligned_recalloc(    void * _Memory,   size_t _Count,   size_t _Size,   size_t _Alignment);
 
       __declspec(noalias) __declspec(restrict)                              void * __cdecl _aligned_offset_realloc(    void * _Memory,   size_t _NewSize,   size_t _Alignment,   size_t _Offset);
 
       __declspec(noalias) __declspec(restrict)                       void * __cdecl _aligned_offset_recalloc(    void * _Memory,   size_t _Count,   size_t _Size,   size_t _Alignment,   size_t _Offset);
                                                    size_t __cdecl _aligned_msize(  void * _Memory,   size_t _Alignment,   size_t _Offset);


















#line 657 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

#line 659 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"





  errno_t __cdecl _itow_s (  int _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _itow( int _Value,   wchar_t *_Dest,  int _Radix);
  errno_t __cdecl _ltow_s (  long _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _ltow( long _Value,   wchar_t *_Dest,  int _Radix);
  errno_t __cdecl _ultow_s (  unsigned long _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Dest)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Dest, _Size, _Radix); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  wchar_t * __cdecl _ultow( unsigned long _Value,   wchar_t *_Dest,  int _Radix);
   double __cdecl wcstod(  const wchar_t * _Str,     wchar_t ** _EndPtr);
   double __cdecl _wcstod_l(  const wchar_t *_Str,     wchar_t ** _EndPtr,   _locale_t _Locale);
   long   __cdecl wcstol(  const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix);
   long   __cdecl _wcstol_l(  const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix,   _locale_t _Locale);
   unsigned long __cdecl wcstoul(  const wchar_t *_Str,     wchar_t ** _EndPtr, int _Radix);
   unsigned long __cdecl _wcstoul_l(  const wchar_t *_Str,     wchar_t **_EndPtr, int _Radix,   _locale_t _Locale);



   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _wgetenv(  const wchar_t * _VarName);
  errno_t __cdecl _wgetenv_s(  size_t * _ReturnSize,   wchar_t * _DstBuf,   size_t _DstSizeInWords,   const wchar_t * _VarName);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wgetenv_s(  size_t * _ReturnSize, wchar_t (&_Dest)[_Size],   const wchar_t * _VarName) throw() { return _wgetenv_s(_ReturnSize, _Dest, _Size, _VarName); } }




#line 690 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _wdupenv_s(  wchar_t **_Buffer,   size_t *_BufferSizeInWords,   const wchar_t *_VarName);



#line 696 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"



 int __cdecl _wsystem(  const wchar_t * _Command);
#line 701 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

#line 703 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

   double __cdecl _wtof(  const wchar_t *_Str);
   double __cdecl _wtof_l(  const wchar_t *_Str,   _locale_t _Locale);
   int __cdecl _wtoi(  const wchar_t *_Str);
   int __cdecl _wtoi_l(  const wchar_t *_Str,   _locale_t _Locale);
   long __cdecl _wtol(  const wchar_t *_Str);
   long __cdecl _wtol_l(  const wchar_t *_Str,   _locale_t _Locale);

  errno_t __cdecl _i64tow_s(  __int64 _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _i64tow(  __int64 _Val,     wchar_t * _DstBuf,   int _Radix);
  errno_t __cdecl _ui64tow_s(  unsigned __int64 _Val,   wchar_t * _DstBuf,   size_t _SizeInWords,   int _Radix);
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) wchar_t * __cdecl _ui64tow(  unsigned __int64 _Val,     wchar_t * _DstBuf,   int _Radix);
   __int64   __cdecl _wtoi64(  const wchar_t *_Str);
   __int64   __cdecl _wtoi64_l(  const wchar_t *_Str,   _locale_t _Locale);
   __int64   __cdecl _wcstoi64(  const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix);
   __int64   __cdecl _wcstoi64_l(  const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix,   _locale_t _Locale);
   unsigned __int64  __cdecl _wcstoui64(  const wchar_t * _Str,     wchar_t ** _EndPtr,   int _Radix);
   unsigned __int64  __cdecl _wcstoui64_l(  const wchar_t *_Str ,     wchar_t ** _EndPtr,   int _Radix,   _locale_t _Locale);


#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"














#line 739 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

   char * __cdecl _fullpath(  char * _FullPath,   const char * _Path,   size_t _SizeInBytes);





#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _ecvt_s(  char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDights,   int * _PtDec,   int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits,   int * _PtDec,   int * _PtSign) throw() { return _ecvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _ecvt(  double _Val,   int _NumOfDigits,   int * _PtDec,   int * _PtSign);
  errno_t __cdecl _fcvt_s(  char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _fcvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits,   int * _PtDec,   int * _PtSign) throw() { return _fcvt_s(_Dest, _Size, _Value, _NumOfDigits, _PtDec, _PtSign); } }
   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _fcvt(  double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
 errno_t __cdecl _gcvt_s(  char * _DstBuf,   size_t _Size,   double _Val,   int _NumOfDigits);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _gcvt_s(char (&_Dest)[_Size],   double _Value,   int _NumOfDigits) throw() { return _gcvt_s(_Dest, _Size, _Value, _NumOfDigits); } }
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details.")) char * __cdecl _gcvt(  double _Val,   int _NumOfDigits,     char * _DstBuf);

   int __cdecl _atodbl(  _CRT_DOUBLE * _Result,   char * _Str);
   int __cdecl _atoldbl(  _LDOUBLE * _Result,   char * _Str);
   int __cdecl _atoflt(  _CRT_FLOAT * _Result,   char * _Str);
   int __cdecl _atodbl_l(  _CRT_DOUBLE * _Result,   char * _Str,   _locale_t _Locale);
   int __cdecl _atoldbl_l(  _LDOUBLE * _Result,   char * _Str,   _locale_t _Locale);
   int __cdecl _atoflt_l(  _CRT_FLOAT * _Result,   char * _Str,   _locale_t _Locale);
          unsigned long __cdecl _lrotl(  unsigned long _Val,   int _Shift);
          unsigned long __cdecl _lrotr(  unsigned long _Val,   int _Shift);
  errno_t   __cdecl _makepath_s(  char * _PathResult,   size_t _SizeInWords,   const char * _Drive,   const char * _Dir,   const char * _Filename,
          const char * _Ext);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Path)[_Size],   const char * _Drive,   const char * _Dir,   const char * _Filename,   const char * _Ext) throw() { return _makepath_s(_Path, _Size, _Drive, _Dir, _Filename, _Ext); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _makepath(  char *_Path,  const char * _Drive,  const char * _Dir,  const char * _Filename,  const char * _Ext);












#line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"












#line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
        _onexit_t __cdecl _onexit(  _onexit_t _Func);
#line 798 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"
        


 void __cdecl perror(  const char * _ErrMsg);
#line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

#pragma warning (push)
#pragma warning (disable:6540) 


   int    __cdecl _putenv(  const char * _EnvString);
  errno_t __cdecl _putenv_s(  const char * _Name,   const char * _Value);
#line 811 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

        unsigned int __cdecl _rotl(  unsigned int _Val,   int _Shift);
        unsigned __int64 __cdecl _rotl64(  unsigned __int64 _Val,   int _Shift);
        unsigned int __cdecl _rotr(  unsigned int _Val,   int _Shift);
        unsigned __int64 __cdecl _rotr64(  unsigned __int64 _Val,   int _Shift);
#pragma warning (pop)


 errno_t __cdecl _searchenv_s(  const char * _Filename,   const char * _EnvVar,   char * _ResultPath,   size_t _SizeInBytes);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(  const char * _Filename,   const char * _EnvVar, char (&_ResultPath)[_Size]) throw() { return _searchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _searchenv( const char * _Filename,  const char * _EnvVar,   char *_ResultPath);
#line 823 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void   __cdecl _splitpath(  const char * _FullPath,     char * _Drive,     char * _Dir,     char * _Filename,     char * _Ext);
  errno_t  __cdecl _splitpath_s(  const char * _FullPath, 
		  char * _Drive,   size_t _DriveSize, 
		  char * _Dir,   size_t _DirSize, 
		  char * _Filename,   size_t _FilenameSize, 
		  char * _Ext,   size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(  const char *_Dest,   char (&_Drive)[_DriveSize],   char (&_Dir)[_DirSize],   char (&_Name)[_NameSize],   char (&_Ext)[_ExtSize]) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }

 void   __cdecl _swab(    char * _Buf1,     char * _Buf2, int _SizeInBytes);








#line 842 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

   wchar_t * __cdecl _wfullpath(  wchar_t * _FullPath,   const wchar_t * _Path,   size_t _SizeInWords);



#line 848 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

  errno_t __cdecl _wmakepath_s(  wchar_t * _PathResult,   size_t _SIZE,   const wchar_t * _Drive,   const wchar_t * _Dir,   const wchar_t * _Filename,
          const wchar_t * _Ext);        
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_ResultPath)[_Size],   const wchar_t * _Drive,   const wchar_t * _Dir,   const wchar_t * _Filename,   const wchar_t * _Ext) throw() { return _wmakepath_s(_ResultPath, _Size, _Drive, _Dir, _Filename, _Ext); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _wmakepath(  wchar_t *_ResultPath,  const wchar_t * _Drive,  const wchar_t * _Dir,  const wchar_t * _Filename,  const wchar_t * _Ext);


 void __cdecl _wperror(  const wchar_t * _ErrMsg);
#line 857 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"


   int    __cdecl _wputenv(  const wchar_t * _EnvString);
  errno_t __cdecl _wputenv_s(  const wchar_t * _Name,   const wchar_t * _Value);
 errno_t __cdecl _wsearchenv_s(  const wchar_t * _Filename,   const wchar_t * _EnvVar,   wchar_t * _ResultPath,   size_t _SizeInWords);
extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(  const wchar_t * _Filename,   const wchar_t * _EnvVar, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _EnvVar, _ResultPath, _Size); } }
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void __cdecl _wsearchenv( const wchar_t * _Filename,  const wchar_t * _EnvVar,   wchar_t *_ResultPath);
#line 865 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  void   __cdecl _wsplitpath(  const wchar_t * _FullPath,     wchar_t * _Drive,     wchar_t * _Dir,     wchar_t * _Filename,     wchar_t * _Ext);
 errno_t __cdecl _wsplitpath_s(  const wchar_t * _FullPath, 
		  wchar_t * _Drive,   size_t _DriveSize, 
		  wchar_t * _Dir,   size_t _DirSize, 
		  wchar_t * _Filename,   size_t _FilenameSize, 
		  wchar_t * _Ext,   size_t _ExtSize);
extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(  const wchar_t *_Path,   wchar_t (&_Drive)[_DriveSize],   wchar_t (&_Dir)[_DirSize],   wchar_t (&_Name)[_NameSize],   wchar_t (&_Ext)[_ExtSize]) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }


#line 876 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"



__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "SetErrorMode" " instead. See online help for details."))  void __cdecl _seterrormode(  int _Mode);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Beep" " instead. See online help for details."))  void __cdecl _beep(  unsigned _Frequency,   unsigned _Duration);
__declspec(deprecated("This function or variable has been superceded by newer library or operating system functionality. Consider using " "Sleep" " instead. See online help for details."))  void __cdecl _sleep(  unsigned long _Duration);
#line 883 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

#line 885 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

















#line 903 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

#pragma warning(push)
#pragma warning(disable: 4141)  
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl ecvt(  double _Val,   int _NumOfDigits,   int * _PtDec,   int * _PtSign);
  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))  char * __cdecl fcvt(  double _Val,   int _NumOfDec,   int * _PtDec,   int * _PtSign);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))		 char * __cdecl gcvt(  double _Val,   int _NumOfDigits,     char * _DstBuf);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))		 char * __cdecl itoa(  int _Val,     char * _DstBuf,   int _Radix);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))		 char * __cdecl ltoa(  long _Val,     char * _DstBuf,   int _Radix);


  __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_putenv" ". See online help for details."))  int    __cdecl putenv(  const char * _EnvString);
#line 915 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_swab" ". See online help for details."))										 void   __cdecl swab(  char * _Buf1,  char * _Buf2,   int _SizeInBytes);
__declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. See online help for details."))	 char * __cdecl ultoa(  unsigned long _Val,     char * _Dstbuf,   int _Radix);
#pragma warning(pop)
_onexit_t __cdecl onexit(  _onexit_t _Func);

#line 922 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

#line 924 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"


}

#line 929 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

#pragma pack(pop)

#line 933 "C:\\Program Files (x86)\\Microsoft Visual Studio 11.0\\VC\\INCLUDE\\stdlib.h"

#line 330 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"



























#line 358 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"



typedef enum tagREGCLS
{
    REGCLS_SINGLEUSE = 0,       
    REGCLS_MULTIPLEUSE = 1,     
                                
    REGCLS_MULTI_SEPARATE = 2,  
                                
    REGCLS_SUSPENDED      = 4,  
                                
    REGCLS_SURROGATE      = 8   
                                
                                
} REGCLS;

 

typedef struct    IRpcStubBuffer     IRpcStubBuffer;
typedef struct    IRpcChannelBuffer  IRpcChannelBuffer;


typedef enum tagCOINITBASE
{


  
  COINITBASE_MULTITHREADED      = 0x0,      
#line 388 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
} COINITBASE;


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"





 


#pragma warning( disable: 4049 )  






















#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"





#pragma once
#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"

 



typedef struct IUnknown IUnknown;

#line 48 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"




typedef struct AsyncIUnknown AsyncIUnknown;

#line 55 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"




typedef struct IClassFactory IClassFactory;

#line 62 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"






extern "C"{
#line 70 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"



 









#pragma once
#line 85 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0000_v0_0_s_ifspec;





 

typedef  IUnknown *LPUNKNOWN;







    extern "C" const IID IID_IUnknown;
    extern "C++"
    {
        struct __declspec(uuid("00000000-0000-0000-C000-000000000046")) __declspec(novtable)
        IUnknown
        {
        public:
            
            virtual HRESULT __stdcall QueryInterface( 
                 const IID & riid,
                  void  * *ppvObject) = 0;

            virtual ULONG __stdcall AddRef( void) = 0;

            virtual ULONG __stdcall Release( void) = 0;

            template<class Q>
            HRESULT



            __stdcall
#line 129 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"
            QueryInterface( Q** pp)
            {
                return QueryInterface(__uuidof(Q), (void **)pp);
            }

            
        };
    } 
    HRESULT __stdcall IUnknown_QueryInterface_Proxy(
        IUnknown  * This,
         const IID & riid,
          void  * *ppvObject);
    
    void __stdcall IUnknown_QueryInterface_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);
    
    ULONG __stdcall IUnknown_AddRef_Proxy(
        IUnknown  * This);
    
    void __stdcall IUnknown_AddRef_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);
    
    ULONG __stdcall IUnknown_Release_Proxy(
        IUnknown  * This);
    
    void __stdcall IUnknown_Release_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);












































































































#line 274 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"



 

#line 280 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"
#line 281 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0001_v0_0_s_ifspec;





 


extern "C" const IID IID_AsyncIUnknown;


    
    struct __declspec(uuid("000e0000-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIUnknown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_QueryInterface( 
             const IID & riid) = 0;
        
        virtual HRESULT __stdcall Finish_QueryInterface( 
             
              void **ppvObject) = 0;
        
        virtual HRESULT __stdcall Begin_AddRef( void) = 0;
        
        virtual ULONG __stdcall Finish_AddRef( void) = 0;
        
        virtual HRESULT __stdcall Begin_Release( void) = 0;
        
        virtual ULONG __stdcall Finish_Release( void) = 0;
        
    };
    
    



















































































#line 406 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"




#line 411 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"



 

#line 417 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0002_v0_0_s_ifspec;





 

typedef    IClassFactory *LPCLASSFACTORY;


extern "C" const IID IID_IClassFactory;


    
    struct __declspec(uuid("00000001-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassFactory : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall CreateInstance( 
             
               IUnknown *pUnkOuter,
             
               const IID & riid,
             
              void **ppvObject) = 0;
        
        virtual  HRESULT __stdcall LockServer( 
             BOOL fLock) = 0;
        
    };
    
    































































#line 520 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"



 HRESULT __stdcall IClassFactory_RemoteCreateInstance_Proxy( 
     IClassFactory * This,
      const IID & riid,
      IUnknown **ppvObject);


void __stdcall IClassFactory_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IClassFactory_RemoteLockServer_Proxy( 
     IClassFactory * This,
     BOOL fLock);


void __stdcall IClassFactory_RemoteLockServer_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 550 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"



 

#line 556 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"
#pragma endregion


extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwnbase_0000_0003_v0_0_s_ifspec;



 HRESULT __stdcall IClassFactory_CreateInstance_Proxy( 
    IClassFactory * This,
     
       IUnknown *pUnkOuter,
     
       const IID & riid,
     
      void **ppvObject);


 HRESULT __stdcall IClassFactory_CreateInstance_Stub( 
     IClassFactory * This,
      const IID & riid,
      IUnknown **ppvObject);

 HRESULT __stdcall IClassFactory_LockServer_Proxy( 
    IClassFactory * This,
     BOOL fLock);


 HRESULT __stdcall IClassFactory_LockServer_Stub( 
     IClassFactory * This,
     BOOL fLock);






}
#line 595 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"

#line 597 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\unknwnbase.h"


#line 392 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"





 


#pragma warning( disable: 4049 )  






















#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"





#pragma once
#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"

 



typedef struct IMarshal IMarshal;

#line 48 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct INoMarshal INoMarshal;

#line 55 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IAgileObject IAgileObject;

#line 62 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IMarshal2 IMarshal2;

#line 69 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IMalloc IMalloc;

#line 76 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IStdMarshalInfo IStdMarshalInfo;

#line 83 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IExternalConnection IExternalConnection;

#line 90 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IMultiQI IMultiQI;

#line 97 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct AsyncIMultiQI AsyncIMultiQI;

#line 104 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IInternalUnknown IInternalUnknown;

#line 111 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IEnumUnknown IEnumUnknown;

#line 118 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IEnumString IEnumString;

#line 125 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct ISequentialStream ISequentialStream;

#line 132 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IStream IStream;

#line 139 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IRpcChannelBuffer IRpcChannelBuffer;

#line 146 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IRpcChannelBuffer2 IRpcChannelBuffer2;

#line 153 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IAsyncRpcChannelBuffer IAsyncRpcChannelBuffer;

#line 160 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IRpcChannelBuffer3 IRpcChannelBuffer3;

#line 167 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IRpcSyntaxNegotiate IRpcSyntaxNegotiate;

#line 174 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IRpcProxyBuffer IRpcProxyBuffer;

#line 181 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IRpcStubBuffer IRpcStubBuffer;

#line 188 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IPSFactoryBuffer IPSFactoryBuffer;

#line 195 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IChannelHook IChannelHook;

#line 202 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IClientSecurity IClientSecurity;

#line 209 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IServerSecurity IServerSecurity;

#line 216 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IRpcOptions IRpcOptions;

#line 223 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IGlobalOptions IGlobalOptions;

#line 230 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct ISurrogate ISurrogate;

#line 237 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IGlobalInterfaceTable IGlobalInterfaceTable;

#line 244 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct ISynchronize ISynchronize;

#line 251 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct ISynchronizeHandle ISynchronizeHandle;

#line 258 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct ISynchronizeEvent ISynchronizeEvent;

#line 265 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct ISynchronizeContainer ISynchronizeContainer;

#line 272 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct ISynchronizeMutex ISynchronizeMutex;

#line 279 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct ICancelMethodCalls ICancelMethodCalls;

#line 286 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IAsyncManager IAsyncManager;

#line 293 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct ICallFactory ICallFactory;

#line 300 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IRpcHelper IRpcHelper;

#line 307 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IReleaseMarshalBuffers IReleaseMarshalBuffers;

#line 314 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IWaitMultiple IWaitMultiple;

#line 321 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IAddrTrackingControl IAddrTrackingControl;

#line 328 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IAddrExclusionControl IAddrExclusionControl;

#line 335 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IPipeByte IPipeByte;

#line 342 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct AsyncIPipeByte AsyncIPipeByte;

#line 349 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IPipeLong IPipeLong;

#line 356 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct AsyncIPipeLong AsyncIPipeLong;

#line 363 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IPipeDouble IPipeDouble;

#line 370 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct AsyncIPipeDouble AsyncIPipeDouble;

#line 377 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IEnumContextProps IEnumContextProps;

#line 384 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IContext IContext;

#line 391 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IObjContext IObjContext;

#line 398 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IComThreadingInfo IComThreadingInfo;

#line 405 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IProcessInitControl IProcessInitControl;

#line 412 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IFastRundown IFastRundown;

#line 419 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




typedef struct IMarshalingStream IMarshalingStream;

#line 426 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






extern "C"{
#line 434 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 











#line 450 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"


#line 453 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"


#line 456 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"


#line 459 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"





#pragma warning(push)
#line 466 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma warning(disable:4201)
#line 468 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"

#pragma once
#line 471 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"

#pragma region Application Family



#line 477 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family




#line 484 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Application Family


typedef struct _COSERVERINFO
    {
    DWORD dwReserved1;
    LPWSTR pwszName;
    COAUTHINFO *pAuthInfo;
    DWORD dwReserved2;
    } 	COSERVERINFO;




extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0000_v0_0_s_ifspec;





 

typedef  IMarshal *LPMARSHAL;


extern "C" const IID IID_IMarshal;


    
    struct __declspec(uuid("00000003-0000-0000-C000-000000000046")) __declspec(novtable)
    IMarshal : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetUnmarshalClass( 
             
               const IID & riid,
             
               void *pv,
             
               DWORD dwDestContext,
             
               void *pvDestContext,
             
               DWORD mshlflags,
             
               CLSID *pCid) = 0;
        
        virtual HRESULT __stdcall GetMarshalSizeMax( 
             
               const IID & riid,
             
               void *pv,
             
               DWORD dwDestContext,
             
               void *pvDestContext,
             
               DWORD mshlflags,
             
               DWORD *pSize) = 0;
        
        virtual HRESULT __stdcall MarshalInterface( 
             
               IStream *pStm,
             
               const IID & riid,
             
               void *pv,
             
               DWORD dwDestContext,
             
               void *pvDestContext,
             
               DWORD mshlflags) = 0;
        
        virtual HRESULT __stdcall UnmarshalInterface( 
             
               IStream *pStm,
             
               const IID & riid,
             
              void **ppv) = 0;
        
        virtual HRESULT __stdcall ReleaseMarshalData( 
             
               IStream *pStm) = 0;
        
        virtual HRESULT __stdcall DisconnectObject( 
             
               DWORD dwReserved) = 0;
        
    };
    
    






























































































































#line 707 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 712 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_INoMarshal;


    
    struct __declspec(uuid("ecc8691b-c1db-4dc0-855e-65f6c551af49")) __declspec(novtable)
    INoMarshal : public IUnknown
    {
    public:
    };
    
    












































#line 777 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 782 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IAgileObject;


    
    struct __declspec(uuid("94ea2b94-e9cc-49e0-c0ff-ee64ca8f5b90")) __declspec(novtable)
    IAgileObject : public IUnknown
    {
    public:
    };
    
    












































#line 847 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 852 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

#line 858 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0003_v0_0_s_ifspec;





 

typedef  IMarshal2 *LPMARSHAL2;


extern "C" const IID IID_IMarshal2;


    
    struct __declspec(uuid("000001cf-0000-0000-C000-000000000046")) __declspec(novtable)
    IMarshal2 : public IMarshal
    {
    public:
    };
    
    































































































































#line 1014 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 1019 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 

typedef  IMalloc *LPMALLOC;


extern "C" const IID IID_IMalloc;


    
    struct __declspec(uuid("00000002-0000-0000-C000-000000000046")) __declspec(novtable)
    IMalloc : public IUnknown
    {
    public:
        virtual void *__stdcall Alloc( 
             
               SIZE_T cb) = 0;
        
        virtual void *__stdcall Realloc( 
             
               void *pv,
             
               SIZE_T cb) = 0;
        
        virtual void __stdcall Free( 
             
               void *pv) = 0;
        
        virtual SIZE_T __stdcall GetSize( 
             
               void *pv) = 0;
        
        virtual int __stdcall DidAlloc( 
             
               void *pv) = 0;
        
        virtual void __stdcall HeapMinimize( void) = 0;
        
    };
    
    




























































































#line 1158 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 1163 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 

typedef  IStdMarshalInfo *LPSTDMARSHALINFO;


extern "C" const IID IID_IStdMarshalInfo;


    
    struct __declspec(uuid("00000018-0000-0000-C000-000000000046")) __declspec(novtable)
    IStdMarshalInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassForHandler( 
             
               DWORD dwDestContext,
             
               void *pvDestContext,
             
               CLSID *pClsid) = 0;
        
    };
    
    
























































#line 1250 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 1255 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 

typedef  IExternalConnection *LPEXTERNALCONNECTION;

typedef 
enum tagEXTCONN
    {
        EXTCONN_STRONG	= 0x1,
        EXTCONN_WEAK	= 0x2,
        EXTCONN_CALLABLE	= 0x4
    } 	EXTCONN;


extern "C" const IID IID_IExternalConnection;


    
    struct __declspec(uuid("00000019-0000-0000-C000-000000000046")) __declspec(novtable)
    IExternalConnection : public IUnknown
    {
    public:
        virtual DWORD __stdcall AddConnection( 
             
               DWORD extconn,
             
               DWORD reserved) = 0;
        
        virtual DWORD __stdcall ReleaseConnection( 
             
               DWORD extconn,
             
               DWORD reserved,
             
               BOOL fLastReleaseCloses) = 0;
        
    };
    
    


































































#line 1366 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 1371 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

typedef    IMultiQI *LPMULTIQI;

#line 1379 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Application Family

typedef struct tagMULTI_QI
    {
    const IID *pIID;
    IUnknown *pItf;
    HRESULT hr;
    } 	MULTI_QI;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0007_v0_0_s_ifspec;





 


extern "C" const IID IID_IMultiQI;


    
    struct __declspec(uuid("00000020-0000-0000-C000-000000000046")) __declspec(novtable)
    IMultiQI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryMultipleInterfaces( 
             
               ULONG cMQIs,
             
               MULTI_QI *pMQIs) = 0;
        
    };
    
    






















































#line 1473 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 1478 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_AsyncIMultiQI;


    
    struct __declspec(uuid("000e0020-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIMultiQI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_QueryMultipleInterfaces( 
             
               ULONG cMQIs,
             
               MULTI_QI *pMQIs) = 0;
        
        virtual HRESULT __stdcall Finish_QueryMultipleInterfaces( 
             
               MULTI_QI *pMQIs) = 0;
        
    };
    
    






























































#line 1571 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 1576 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

#line 1582 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0008_v0_0_s_ifspec;





 


extern "C" const IID IID_IInternalUnknown;


    
    struct __declspec(uuid("00000021-0000-0000-C000-000000000046")) __declspec(novtable)
    IInternalUnknown : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryInternalInterface( 
             
               const IID & riid,
             
              void **ppv) = 0;
        
    };
    
    






















































#line 1669 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 1674 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

#line 1680 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0009_v0_0_s_ifspec;





 

typedef    IEnumUnknown *LPENUMUNKNOWN;


extern "C" const IID IID_IEnumUnknown;


    
    struct __declspec(uuid("00000100-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumUnknown : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             
               ULONG celt,
             
               IUnknown **rgelt,
             
               ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
              IEnumUnknown **ppenum) = 0;
        
    };
    
    












































































#line 1801 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 HRESULT __stdcall IEnumUnknown_RemoteNext_Proxy( 
     IEnumUnknown * This,
     ULONG celt,
      IUnknown **rgelt,
      ULONG *pceltFetched);


void __stdcall IEnumUnknown_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1820 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 

typedef    IEnumString *LPENUMSTRING;


extern "C" const IID IID_IEnumString;


    
    struct __declspec(uuid("00000101-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumString : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             
               LPOLESTR *rgelt,
             
               ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
              IEnumString **ppenum) = 0;
        
    };
    
    











































































#line 1933 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 HRESULT __stdcall IEnumString_RemoteNext_Proxy( 
     IEnumString * This,
     ULONG celt,
      LPOLESTR *rgelt,
      ULONG *pceltFetched);


void __stdcall IEnumString_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1952 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_ISequentialStream;


    
    struct __declspec(uuid("0c733a30-2a1c-11ce-ade5-00aa0044773d")) __declspec(novtable)
    ISequentialStream : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Read( 
             
               void *pv,
             
               ULONG cb,
             
               ULONG *pcbRead) = 0;
        
        virtual  HRESULT __stdcall Write( 
             
               const void *pv,
             
               ULONG cb,
             
               ULONG *pcbWritten) = 0;
        
    };
    
    




































































#line 2057 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 HRESULT __stdcall ISequentialStream_RemoteRead_Proxy( 
     ISequentialStream * This,
      byte *pv,
     ULONG cb,
      ULONG *pcbRead);


void __stdcall ISequentialStream_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ISequentialStream_RemoteWrite_Proxy( 
     ISequentialStream * This,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);


void __stdcall ISequentialStream_RemoteWrite_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2090 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 

typedef    IStream *LPSTREAM;



















typedef struct tagSTATSTG
    {
    LPOLESTR pwcsName;
    DWORD type;
    ULARGE_INTEGER cbSize;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD grfMode;
    DWORD grfLocksSupported;
    CLSID clsid;
    DWORD grfStateBits;
    DWORD reserved;
    } 	STATSTG;

#line 2134 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
typedef 
enum tagSTGTY
    {
        STGTY_STORAGE	= 1,
        STGTY_STREAM	= 2,
        STGTY_LOCKBYTES	= 3,
        STGTY_PROPERTY	= 4
    } 	STGTY;

typedef 
enum tagSTREAM_SEEK
    {
        STREAM_SEEK_SET	= 0,
        STREAM_SEEK_CUR	= 1,
        STREAM_SEEK_END	= 2
    } 	STREAM_SEEK;

typedef 
enum tagLOCKTYPE
    {
        LOCK_WRITE	= 1,
        LOCK_EXCLUSIVE	= 2,
        LOCK_ONLYONCE	= 4
    } 	LOCKTYPE;


extern "C" const IID IID_IStream;


    
    struct __declspec(uuid("0000000c-0000-0000-C000-000000000046")) __declspec(novtable)
    IStream : public ISequentialStream
    {
    public:
        virtual  HRESULT __stdcall Seek( 
             LARGE_INTEGER dlibMove,
             DWORD dwOrigin,
             
               ULARGE_INTEGER *plibNewPosition) = 0;
        
        virtual HRESULT __stdcall SetSize( 
             ULARGE_INTEGER libNewSize) = 0;
        
        virtual  HRESULT __stdcall CopyTo( 
             
               IStream *pstm,
             ULARGE_INTEGER cb,
             
               ULARGE_INTEGER *pcbRead,
             
               ULARGE_INTEGER *pcbWritten) = 0;
        
        virtual HRESULT __stdcall Commit( 
             DWORD grfCommitFlags) = 0;
        
        virtual HRESULT __stdcall Revert( void) = 0;
        
        virtual HRESULT __stdcall LockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall UnlockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall Stat( 
              STATSTG *pstatstg,
             DWORD grfStatFlag) = 0;
        
        virtual HRESULT __stdcall Clone( 
              IStream **ppstm) = 0;
        
    };
    
    

















































































































































#line 2357 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 HRESULT __stdcall IStream_RemoteSeek_Proxy( 
     IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
      ULARGE_INTEGER *plibNewPosition);


void __stdcall IStream_RemoteSeek_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStream_RemoteCopyTo_Proxy( 
     IStream * This,
      IStream *pstm,
     ULARGE_INTEGER cb,
      ULARGE_INTEGER *pcbRead,
      ULARGE_INTEGER *pcbWritten);


void __stdcall IStream_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2391 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 

typedef unsigned long RPCOLEDATAREP;

typedef struct tagRPCOLEMESSAGE
    {
    void *reserved1;
    RPCOLEDATAREP dataRepresentation;
    void *Buffer;
    ULONG cbBuffer;
    ULONG iMethod;
    void *reserved2[ 5 ];
    ULONG rpcFlags;
    } 	RPCOLEMESSAGE;

typedef RPCOLEMESSAGE *PRPCOLEMESSAGE;


extern "C" const IID IID_IRpcChannelBuffer;


    
    struct __declspec(uuid("D5F56B60-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcChannelBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBuffer( 
             
               RPCOLEMESSAGE *pMessage,
             
               const IID & riid) = 0;
        
        virtual HRESULT __stdcall SendReceive( 
             
               RPCOLEMESSAGE *pMessage,
             
               ULONG *pStatus) = 0;
        
        virtual HRESULT __stdcall FreeBuffer( 
             
               RPCOLEMESSAGE *pMessage) = 0;
        
        virtual HRESULT __stdcall GetDestCtx( 
             
               DWORD *pdwDestContext,
             
              void **ppvDestContext) = 0;
        
        virtual HRESULT __stdcall IsConnected( void) = 0;
        
    };
    
    
























































































#line 2539 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 2544 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

#line 2550 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0014_v0_0_s_ifspec;





 


extern "C" const IID IID_IRpcChannelBuffer2;


    
    struct __declspec(uuid("594f31d0-7f19-11d0-b194-00a0c90dc8bf")) __declspec(novtable)
    IRpcChannelBuffer2 : public IRpcChannelBuffer
    {
    public:
        virtual HRESULT __stdcall GetProtocolVersion( 
             
               DWORD *pdwVersion) = 0;
        
    };
    
    

































































































#line 2678 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 2683 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IAsyncRpcChannelBuffer;


    
    struct __declspec(uuid("a5029fb6-3c34-11d1-9c99-00c04fb998aa")) __declspec(novtable)
    IAsyncRpcChannelBuffer : public IRpcChannelBuffer2
    {
    public:
        virtual HRESULT __stdcall Send( 
             
               RPCOLEMESSAGE *pMsg,
             
               ISynchronize *pSync,
             
               ULONG *pulStatus) = 0;
        
        virtual HRESULT __stdcall Receive( 
             
               RPCOLEMESSAGE *pMsg,
             
               ULONG *pulStatus) = 0;
        
        virtual HRESULT __stdcall GetDestCtxEx( 
             
               RPCOLEMESSAGE *pMsg,
             
               DWORD *pdwDestContext,
             
              void **ppvDestContext) = 0;
        
    };
    
    




































































































































#line 2858 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 2863 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IRpcChannelBuffer3;


    
    struct __declspec(uuid("25B15600-0115-11d0-BF0D-00AA00B8DFD2")) __declspec(novtable)
    IRpcChannelBuffer3 : public IRpcChannelBuffer2
    {
    public:
        virtual HRESULT __stdcall Send( 
             
               RPCOLEMESSAGE *pMsg,
             
               ULONG *pulStatus) = 0;
        
        virtual HRESULT __stdcall Receive( 
             
               RPCOLEMESSAGE *pMsg,
             
               ULONG ulSize,
             
               ULONG *pulStatus) = 0;
        
        virtual HRESULT __stdcall Cancel( 
             
               RPCOLEMESSAGE *pMsg) = 0;
        
        virtual HRESULT __stdcall GetCallContext( 
             
               RPCOLEMESSAGE *pMsg,
             
               const IID & riid,
             
              void **pInterface) = 0;
        
        virtual HRESULT __stdcall GetDestCtxEx( 
             
               RPCOLEMESSAGE *pMsg,
             
               DWORD *pdwDestContext,
             
              void **ppvDestContext) = 0;
        
        virtual HRESULT __stdcall GetState( 
             
               RPCOLEMESSAGE *pMsg,
             
               DWORD *pState) = 0;
        
        virtual HRESULT __stdcall RegisterAsync( 
             
               RPCOLEMESSAGE *pMsg,
             
               IAsyncManager *pAsyncMgr) = 0;
        
    };
    
    












































































































































































#line 3102 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 3107 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IRpcSyntaxNegotiate;


    
    struct __declspec(uuid("58a08519-24c8-4935-b482-3fd823333a4f")) __declspec(novtable)
    IRpcSyntaxNegotiate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall NegotiateSyntax( 
             
               RPCOLEMESSAGE *pMsg) = 0;
        
    };
    
    




















































#line 3184 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 3189 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IRpcProxyBuffer;


    
    struct __declspec(uuid("D5F56A34-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcProxyBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect( 
             
               IRpcChannelBuffer *pRpcChannelBuffer) = 0;
        
        virtual void __stdcall Disconnect( void) = 0;
        
    };
    
    


























































#line 3274 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 3279 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

#line 3285 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0019_v0_0_s_ifspec;





 


extern "C" const IID IID_IRpcStubBuffer;


    
    struct __declspec(uuid("D5F56AFC-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IRpcStubBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Connect( 
             
               IUnknown *pUnkServer) = 0;
        
        virtual void __stdcall Disconnect( void) = 0;
        
        virtual HRESULT __stdcall Invoke( 
             
               RPCOLEMESSAGE *_prpcmsg,
             
               IRpcChannelBuffer *_pRpcChannelBuffer) = 0;
        
        virtual IRpcStubBuffer *__stdcall IsIIDSupported( 
             
               const IID & riid) = 0;
        
        virtual ULONG __stdcall CountRefs( void) = 0;
        
        virtual HRESULT __stdcall DebugServerQueryInterface( 
             
              void **ppv) = 0;
        
        virtual void __stdcall DebugServerRelease( 
             
               void *pv) = 0;
        
    };
    
    


































































































#line 3436 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 3441 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IPSFactoryBuffer;


    
    struct __declspec(uuid("D5F569D0-593B-101A-B569-08002B2DBF7A")) __declspec(novtable)
    IPSFactoryBuffer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateProxy( 
             
               IUnknown *pUnkOuter,
             
               const IID & riid,
             
              IRpcProxyBuffer **ppProxy,
             
              void **ppv) = 0;
        
        virtual HRESULT __stdcall CreateStub( 
             
               const IID & riid,
             
               IUnknown *pUnkServer,
             
              IRpcStubBuffer **ppStub) = 0;
        
    };
    
    






































































#line 3550 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 3555 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

#line 3561 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family



typedef struct SChannelHookCallInfo
    {
    IID iid;
    DWORD cbSize;
    GUID uCausality;
    DWORD dwServerPid;
    DWORD iMethod;
    void *pObject;
    } 	SChannelHookCallInfo;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0021_v0_0_s_ifspec;





 


extern "C" const IID IID_IChannelHook;


    
    struct __declspec(uuid("1008c4a0-7613-11cf-9af1-0020af6e72f4")) __declspec(novtable)
    IChannelHook : public IUnknown
    {
    public:
        virtual void __stdcall ClientGetSize( 
             
               const GUID & uExtent,
             
               const IID & riid,
             
               ULONG *pDataSize) = 0;
        
        virtual void __stdcall ClientFillBuffer( 
             
               const GUID & uExtent,
             
               const IID & riid,
             
               ULONG *pDataSize,
             
               void *pDataBuffer) = 0;
        
        virtual void __stdcall ClientNotify( 
             
               const GUID & uExtent,
             
               const IID & riid,
             
               ULONG cbDataSize,
             
               void *pDataBuffer,
             
               DWORD lDataRep,
             
               HRESULT hrFault) = 0;
        
        virtual void __stdcall ServerNotify( 
             
               const GUID & uExtent,
             
               const IID & riid,
             
               ULONG cbDataSize,
             
               void *pDataBuffer,
             
               DWORD lDataRep) = 0;
        
        virtual void __stdcall ServerGetSize( 
             
               const GUID & uExtent,
             
               const IID & riid,
             
               HRESULT hrFault,
             
               ULONG *pDataSize) = 0;
        
        virtual void __stdcall ServerFillBuffer( 
             
               const GUID & uExtent,
             
               const IID & riid,
             
               ULONG *pDataSize,
             
               void *pDataBuffer,
             
               HRESULT hrFault) = 0;
        
    };
    
    






































































































































#line 3800 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 3805 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

#line 3811 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#line 3812 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion


#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0022_v0_0_s_ifspec;





 

typedef struct tagSOLE_AUTHENTICATION_SERVICE
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    OLECHAR *pPrincipalName;
    HRESULT hr;
    } 	SOLE_AUTHENTICATION_SERVICE;

typedef SOLE_AUTHENTICATION_SERVICE *PSOLE_AUTHENTICATION_SERVICE;

typedef 
enum tagEOLE_AUTHENTICATION_CAPABILITIES
    {
        EOAC_NONE	= 0,
        EOAC_MUTUAL_AUTH	= 0x1,
        EOAC_STATIC_CLOAKING	= 0x20,
        EOAC_DYNAMIC_CLOAKING	= 0x40,
        EOAC_ANY_AUTHORITY	= 0x80,
        EOAC_MAKE_FULLSIC	= 0x100,
        EOAC_DEFAULT	= 0x800,
        EOAC_SECURE_REFS	= 0x2,
        EOAC_ACCESS_CONTROL	= 0x4,
        EOAC_APPID	= 0x8,
        EOAC_DYNAMIC	= 0x10,
        EOAC_REQUIRE_FULLSIC	= 0x200,
        EOAC_AUTO_IMPERSONATE	= 0x400,
        EOAC_NO_CUSTOM_MARSHAL	= 0x2000,
        EOAC_DISABLE_AAA	= 0x1000
    } 	EOLE_AUTHENTICATION_CAPABILITIES;





typedef struct tagSOLE_AUTHENTICATION_INFO
    {
    DWORD dwAuthnSvc;
    DWORD dwAuthzSvc;
    void *pAuthInfo;
    } 	SOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_INFO *PSOLE_AUTHENTICATION_INFO;

typedef struct tagSOLE_AUTHENTICATION_LIST
    {
    DWORD cAuthInfo;
    SOLE_AUTHENTICATION_INFO *aAuthInfo;
    } 	SOLE_AUTHENTICATION_LIST;

typedef struct tagSOLE_AUTHENTICATION_LIST *PSOLE_AUTHENTICATION_LIST;


extern "C" const IID IID_IClientSecurity;


    
    struct __declspec(uuid("0000013D-0000-0000-C000-000000000046")) __declspec(novtable)
    IClientSecurity : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryBlanket( 
             
               IUnknown *pProxy,
             
               DWORD *pAuthnSvc,
             
               DWORD *pAuthzSvc,
             
              OLECHAR **pServerPrincName,
             
               DWORD *pAuthnLevel,
             
               DWORD *pImpLevel,
             
              void **pAuthInfo,
             
               DWORD *pCapabilites) = 0;
        
        virtual HRESULT __stdcall SetBlanket( 
             
               IUnknown *pProxy,
             
               DWORD dwAuthnSvc,
             
               DWORD dwAuthzSvc,
             
              OLECHAR *pServerPrincName,
             
               DWORD dwAuthnLevel,
             
               DWORD dwImpLevel,
             
               void *pAuthInfo,
             
               DWORD dwCapabilities) = 0;
        
        virtual HRESULT __stdcall CopyProxy( 
             
               IUnknown *pProxy,
             
              IUnknown **ppCopy) = 0;
        
    };
    
    


































































































#line 4032 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 4037 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

#line 4043 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0023_v0_0_s_ifspec;





 


extern "C" const IID IID_IServerSecurity;


    
    struct __declspec(uuid("0000013E-0000-0000-C000-000000000046")) __declspec(novtable)
    IServerSecurity : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryBlanket( 
             
               DWORD *pAuthnSvc,
             
               DWORD *pAuthzSvc,
             
              OLECHAR **pServerPrincName,
             
               DWORD *pAuthnLevel,
             
               DWORD *pImpLevel,
             
              void **pPrivs,
             
               DWORD *pCapabilities) = 0;
        
        virtual HRESULT __stdcall ImpersonateClient( void) = 0;
        
        virtual HRESULT __stdcall RevertToSelf( void) = 0;
        
        virtual BOOL __stdcall IsImpersonating( void) = 0;
        
    };
    
    


















































































#line 4174 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 4179 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

typedef 
enum tagRPCOPT_PROPERTIES
    {
        COMBND_RPCTIMEOUT	= 0x1,
        COMBND_SERVER_LOCALITY	= 0x2,
        COMBND_RESERVED1	= 0x4
    } 	RPCOPT_PROPERTIES;

typedef 
enum tagRPCOPT_SERVER_LOCALITY_VALUES
    {
        SERVER_LOCALITY_PROCESS_LOCAL	= 0,
        SERVER_LOCALITY_MACHINE_LOCAL	= 1,
        SERVER_LOCALITY_REMOTE	= 2
    } 	RPCOPT_SERVER_LOCALITY_VALUES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0024_v0_0_s_ifspec;





 


extern "C" const IID IID_IRpcOptions;


    
    struct __declspec(uuid("00000144-0000-0000-C000-000000000046")) __declspec(novtable)
    IRpcOptions : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Set( 
             
               IUnknown *pPrx,
             
               RPCOPT_PROPERTIES dwProperty,
             
               ULONG_PTR dwValue) = 0;
        
        virtual HRESULT __stdcall Query( 
             
               IUnknown *pPrx,
             
               RPCOPT_PROPERTIES dwProperty,
             
               ULONG_PTR *pdwValue) = 0;
        
    };
    
    




































































#line 4308 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 4313 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

#line 4319 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Application Family

typedef 
enum tagGLOBALOPT_PROPERTIES
    {
        COMGLB_EXCEPTION_HANDLING	= 1,
        COMGLB_APPID	= 2,
        COMGLB_RPC_THREADPOOL_SETTING	= 3,
        COMGLB_RO_SETTINGS	= 4,
        COMGLB_UNMARSHALING_POLICY	= 5
    } 	GLOBALOPT_PROPERTIES;

typedef 
enum tagGLOBALOPT_EH_VALUES
    {
        COMGLB_EXCEPTION_HANDLE	= 0,
        COMGLB_EXCEPTION_DONOT_HANDLE_FATAL	= 1,
        COMGLB_EXCEPTION_DONOT_HANDLE	= COMGLB_EXCEPTION_DONOT_HANDLE_FATAL,
        COMGLB_EXCEPTION_DONOT_HANDLE_ANY	= 2
    } 	GLOBALOPT_EH_VALUES;

typedef 
enum tagGLOBALOPT_RPCTP_VALUES
    {
        COMGLB_RPC_THREADPOOL_SETTING_DEFAULT_POOL	= 0,
        COMGLB_RPC_THREADPOOL_SETTING_PRIVATE_POOL	= 1
    } 	GLOBALOPT_RPCTP_VALUES;

typedef 
enum tagGLOBALOPT_RO_FLAGS
    {
        COMGLB_STA_MODALLOOP_REMOVE_TOUCH_MESSAGES	= 0x1,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REMOVE_INPUT_MESSAGES	= 0x2,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_DONOT_REMOVE_INPUT_MESSAGES	= 0x4,
        COMGLB_FAST_RUNDOWN	= 0x8,
        COMGLB_RESERVED1	= 0x10,
        COMGLB_RESERVED2	= 0x20,
        COMGLB_RESERVED3	= 0x40,
        COMGLB_STA_MODALLOOP_SHARED_QUEUE_REORDER_POINTER_MESSAGES	= 0x80
    } 	GLOBALOPT_RO_FLAGS;

typedef 
enum tagGLOBALOPT_UNMARSHALING_POLICY_VALUES
    {
        COMGLB_UNMARSHALING_POLICY_NORMAL	= 0,
        COMGLB_UNMARSHALING_POLICY_STRONG	= 1,
        COMGLB_UNMARSHALING_POLICY_HYBRID	= 2
    } 	GLOBALOPT_UNMARSHALING_POLICY_VALUES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0025_v0_0_s_ifspec;





 


extern "C" const IID IID_IGlobalOptions;


    
    struct __declspec(uuid("0000015B-0000-0000-C000-000000000046")) __declspec(novtable)
    IGlobalOptions : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Set( 
             
               GLOBALOPT_PROPERTIES dwProperty,
             
               ULONG_PTR dwValue) = 0;
        
        virtual HRESULT __stdcall Query( 
             
               GLOBALOPT_PROPERTIES dwProperty,
             
               ULONG_PTR *pdwValue) = 0;
        
    };
    
    
































































#line 4469 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 4474 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

#line 4480 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#line 4482 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0026_v0_0_s_ifspec;





 

typedef    ISurrogate *LPSURROGATE;


extern "C" const IID IID_ISurrogate;


    
    struct __declspec(uuid("00000022-0000-0000-C000-000000000046")) __declspec(novtable)
    ISurrogate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall LoadDllServer( 
              const IID & Clsid) = 0;
        
        virtual HRESULT __stdcall FreeSurrogate( void) = 0;
        
    };
    
    

























































#line 4572 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 4577 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 

typedef  IGlobalInterfaceTable *LPGLOBALINTERFACETABLE;


extern "C" const IID IID_IGlobalInterfaceTable;


    
    struct __declspec(uuid("00000146-0000-0000-C000-000000000046")) __declspec(novtable)
    IGlobalInterfaceTable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterInterfaceInGlobal( 
             
               IUnknown *pUnk,
             
               const IID & riid,
             
               DWORD *pdwCookie) = 0;
        
        virtual HRESULT __stdcall RevokeInterfaceFromGlobal( 
             
               DWORD dwCookie) = 0;
        
        virtual HRESULT __stdcall GetInterfaceFromGlobal( 
             
               DWORD dwCookie,
             
               const IID & riid,
             
              void **ppv) = 0;
        
    };
    
    












































































#line 4696 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 4701 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

#line 4707 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0028_v0_0_s_ifspec;





 


extern "C" const IID IID_ISynchronize;


    
    struct __declspec(uuid("00000030-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronize : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Wait( 
             DWORD dwFlags,
             DWORD dwMilliseconds) = 0;
        
        virtual HRESULT __stdcall Signal( void) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
    };
    
    
































































#line 4806 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 4811 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_ISynchronizeHandle;


    
    struct __declspec(uuid("00000031-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeHandle : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetHandle( 
             
               HANDLE *ph) = 0;
        
    };
    
    




















































#line 4888 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 4893 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_ISynchronizeEvent;


    
    struct __declspec(uuid("00000032-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeEvent : public ISynchronizeHandle
    {
    public:
        virtual HRESULT __stdcall SetEventHandle( 
             
               HANDLE *ph) = 0;
        
    };
    
    





























































#line 4979 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 4984 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_ISynchronizeContainer;


    
    struct __declspec(uuid("00000033-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeContainer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddSynchronize( 
             
               ISynchronize *pSync) = 0;
        
        virtual HRESULT __stdcall WaitMultiple( 
             
               DWORD dwFlags,
             
               DWORD dwTimeOut,
             
              ISynchronize **ppSync) = 0;
        
    };
    
    
































































#line 5081 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 5086 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_ISynchronizeMutex;


    
    struct __declspec(uuid("00000025-0000-0000-C000-000000000046")) __declspec(novtable)
    ISynchronizeMutex : public ISynchronize
    {
    public:
        virtual HRESULT __stdcall ReleaseMutex( void) = 0;
        
    };
    
    







































































#line 5180 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 5185 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 

typedef  ICancelMethodCalls *LPCANCELMETHODCALLS;


extern "C" const IID IID_ICancelMethodCalls;


    
    struct __declspec(uuid("00000029-0000-0000-C000-000000000046")) __declspec(novtable)
    ICancelMethodCalls : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Cancel( 
             
               ULONG ulSeconds) = 0;
        
        virtual HRESULT __stdcall TestCancel( void) = 0;
        
    };
    
    


























































#line 5272 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 5277 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 

typedef 
enum tagDCOM_CALL_STATE
    {
        DCOM_NONE	= 0,
        DCOM_CALL_COMPLETE	= 0x1,
        DCOM_CALL_CANCELED	= 0x2
    } 	DCOM_CALL_STATE;


extern "C" const IID IID_IAsyncManager;


    
    struct __declspec(uuid("0000002A-0000-0000-C000-000000000046")) __declspec(novtable)
    IAsyncManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CompleteCall( 
             
               HRESULT Result) = 0;
        
        virtual HRESULT __stdcall GetCallContext( 
             
               const IID & riid,
             
              void **pInterface) = 0;
        
        virtual HRESULT __stdcall GetState( 
             
               ULONG *pulStateFlags) = 0;
        
    };
    
    






































































#line 5390 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 5395 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_ICallFactory;


    
    struct __declspec(uuid("1c733a30-2a1c-11ce-ade5-00aa0044773d")) __declspec(novtable)
    ICallFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateCall( 
             
               const IID & riid,
             
               IUnknown *pCtrlUnk,
             
               const IID & riid2,
             
              IUnknown **ppv) = 0;
        
    };
    
    


























































#line 5484 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 5489 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IRpcHelper;


    
    struct __declspec(uuid("00000149-0000-0000-C000-000000000046")) __declspec(novtable)
    IRpcHelper : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetDCOMProtocolVersion( 
             
               DWORD *pComVersion) = 0;
        
        virtual HRESULT __stdcall GetIIDFromOBJREF( 
             
               void *pObjRef,
             
              IID **piid) = 0;
        
    };
    
    






























































#line 5582 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 5587 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IReleaseMarshalBuffers;


    
    struct __declspec(uuid("eb0cb9e8-7996-11d2-872e-0000f8080859")) __declspec(novtable)
    IReleaseMarshalBuffers : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReleaseMarshalBuffer( 
             
               RPCOLEMESSAGE *pMsg,
             
               DWORD dwFlags,
             
               IUnknown *pChnl) = 0;
        
    };
    
    
























































#line 5672 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 5677 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IWaitMultiple;


    
    struct __declspec(uuid("0000002B-0000-0000-C000-000000000046")) __declspec(novtable)
    IWaitMultiple : public IUnknown
    {
    public:
        virtual HRESULT __stdcall WaitMultiple( 
             
               DWORD timeout,
             
              ISynchronize **pSync) = 0;
        
        virtual HRESULT __stdcall AddSynchronize( 
             
               ISynchronize *pSync) = 0;
        
    };
    
    






























































#line 5770 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 5775 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 

typedef  IAddrTrackingControl *LPADDRTRACKINGCONTROL;


extern "C" const IID IID_IAddrTrackingControl;


    
    struct __declspec(uuid("00000147-0000-0000-C000-000000000046")) __declspec(novtable)
    IAddrTrackingControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall EnableCOMDynamicAddrTracking( void) = 0;
        
        virtual HRESULT __stdcall DisableCOMDynamicAddrTracking( void) = 0;
        
    };
    
    
























































#line 5858 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 5863 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 

typedef  IAddrExclusionControl *LPADDREXCLUSIONCONTROL;


extern "C" const IID IID_IAddrExclusionControl;


    
    struct __declspec(uuid("00000148-0000-0000-C000-000000000046")) __declspec(novtable)
    IAddrExclusionControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCurrentAddrExclusionList( 
             
               const IID & riid,
             
              void **ppEnumerator) = 0;
        
        virtual HRESULT __stdcall UpdateAddrExclusionList( 
             
               IUnknown *pEnumerator) = 0;
        
    };
    
    






























































#line 5958 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 5963 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IPipeByte;


    
    struct __declspec(uuid("DB2F3ACA-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeByte : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull( 
              BYTE *buf,
             ULONG cRequest,
              ULONG *pcReturned) = 0;
        
        virtual HRESULT __stdcall Push( 
              BYTE *buf,
             ULONG cSent) = 0;
        
    };
    
    





























































#line 6054 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 6059 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_AsyncIPipeByte;


    
    struct __declspec(uuid("DB2F3ACB-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeByte : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull( 
             ULONG cRequest) = 0;
        
        virtual HRESULT __stdcall Finish_Pull( 
              BYTE *buf,
              ULONG *pcReturned) = 0;
        
        virtual HRESULT __stdcall Begin_Push( 
              BYTE *buf,
             ULONG cSent) = 0;
        
        virtual HRESULT __stdcall Finish_Push( void) = 0;
        
    };
    
    









































































#line 6166 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 6171 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IPipeLong;


    
    struct __declspec(uuid("DB2F3ACC-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeLong : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull( 
              LONG *buf,
             ULONG cRequest,
              ULONG *pcReturned) = 0;
        
        virtual HRESULT __stdcall Push( 
              LONG *buf,
             ULONG cSent) = 0;
        
    };
    
    





























































#line 6262 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 6267 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_AsyncIPipeLong;


    
    struct __declspec(uuid("DB2F3ACD-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeLong : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull( 
             ULONG cRequest) = 0;
        
        virtual HRESULT __stdcall Finish_Pull( 
              LONG *buf,
              ULONG *pcReturned) = 0;
        
        virtual HRESULT __stdcall Begin_Push( 
              LONG *buf,
             ULONG cSent) = 0;
        
        virtual HRESULT __stdcall Finish_Push( void) = 0;
        
    };
    
    









































































#line 6374 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 6379 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IPipeDouble;


    
    struct __declspec(uuid("DB2F3ACE-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    IPipeDouble : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Pull( 
              DOUBLE *buf,
             ULONG cRequest,
              ULONG *pcReturned) = 0;
        
        virtual HRESULT __stdcall Push( 
              DOUBLE *buf,
             ULONG cSent) = 0;
        
    };
    
    





























































#line 6470 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 6475 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_AsyncIPipeDouble;


    
    struct __declspec(uuid("DB2F3ACF-2F86-11d1-8E04-00C04FB9989A")) __declspec(novtable)
    AsyncIPipeDouble : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Begin_Pull( 
             ULONG cRequest) = 0;
        
        virtual HRESULT __stdcall Finish_Pull( 
              DOUBLE *buf,
              ULONG *pcReturned) = 0;
        
        virtual HRESULT __stdcall Begin_Push( 
              DOUBLE *buf,
             ULONG cSent) = 0;
        
        virtual HRESULT __stdcall Finish_Push( void) = 0;
        
    };
    
    









































































#line 6582 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 6587 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 


















































































































































































































































































































































































































































































#line 7058 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#line 7059 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Application Family

typedef 
enum _APTTYPEQUALIFIER
    {
        APTTYPEQUALIFIER_NONE	= 0,
        APTTYPEQUALIFIER_IMPLICIT_MTA	= 1,
        APTTYPEQUALIFIER_NA_ON_MTA	= 2,
        APTTYPEQUALIFIER_NA_ON_STA	= 3,
        APTTYPEQUALIFIER_NA_ON_IMPLICIT_MTA	= 4,
        APTTYPEQUALIFIER_NA_ON_MAINSTA	= 5,
        APTTYPEQUALIFIER_APPLICATION_STA	= 6
    } 	APTTYPEQUALIFIER;

typedef 
enum _APTTYPE
    {
        APTTYPE_CURRENT	= -1,
        APTTYPE_STA	= 0,
        APTTYPE_MTA	= 1,
        APTTYPE_NA	= 2,
        APTTYPE_MAINSTA	= 3
    } 	APTTYPE;

#line 7085 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Desktop Family

typedef 
enum _THDTYPE
    {
        THDTYPE_BLOCKMESSAGES	= 0,
        THDTYPE_PROCESSMESSAGES	= 1
    } 	THDTYPE;

typedef DWORD APARTMENTID;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0047_v0_0_s_ifspec;





 


extern "C" const IID IID_IComThreadingInfo;


    
    struct __declspec(uuid("000001ce-0000-0000-C000-000000000046")) __declspec(novtable)
    IComThreadingInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCurrentApartmentType( 
             
               APTTYPE *pAptType) = 0;
        
        virtual HRESULT __stdcall GetCurrentThreadType( 
             
               THDTYPE *pThreadType) = 0;
        
        virtual HRESULT __stdcall GetCurrentLogicalThreadId( 
             
               GUID *pguidLogicalThreadId) = 0;
        
        virtual HRESULT __stdcall SetCurrentLogicalThreadId( 
             
               const GUID & rguid) = 0;
        
    };
    
    












































































#line 7213 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 7218 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IProcessInitControl;


    
    struct __declspec(uuid("72380d55-8d2b-43a3-8513-2b6ef31434e9")) __declspec(novtable)
    IProcessInitControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ResetInitializerTimeout( 
             DWORD dwSecondsRemaining) = 0;
        
    };
    
    



















































#line 7293 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 7298 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"






 


extern "C" const IID IID_IFastRundown;


    
    struct __declspec(uuid("00000040-0000-0000-C000-000000000046")) __declspec(novtable)
    IFastRundown : public IUnknown
    {
    public:
    };
    
    












































#line 7363 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 7368 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

typedef 
enum CO_MARSHALING_CONTEXT_ATTRIBUTES
    {
        CO_MARSHALING_SOURCE_IS_APP_CONTAINER	= 0
    } 	CO_MARSHALING_CONTEXT_ATTRIBUTES;



extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0050_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0050_v0_0_s_ifspec;





 


extern "C" const IID IID_IMarshalingStream;


    
    struct __declspec(uuid("D8F2F5E6-6102-4863-9F26-389A4676EFDE")) __declspec(novtable)
    IMarshalingStream : public IStream
    {
    public:
        virtual HRESULT __stdcall GetMarshalingContextAttribute( 
             CO_MARSHALING_CONTEXT_ATTRIBUTES attribute,
             ULONG_PTR *pAttributeValue) = 0;
        
    };
    
    


























































































































































#line 7561 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"




#line 7566 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



 

#line 7572 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion
#pragma region Application Family

extern "C" const GUID  IID_ICallbackWithNoReentrancyToApplicationSTA;
#line 7577 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#pragma endregion

#line 7580 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"


#pragma warning(pop)


#line 7586 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"
#line 7587 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"


extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidlbase_0000_0051_v0_0_s_ifspec;



 HRESULT __stdcall IEnumUnknown_Next_Proxy( 
    IEnumUnknown * This,
     
       ULONG celt,
     
       IUnknown **rgelt,
     
       ULONG *pceltFetched);


 HRESULT __stdcall IEnumUnknown_Next_Stub( 
     IEnumUnknown * This,
     ULONG celt,
      IUnknown **rgelt,
      ULONG *pceltFetched);

 HRESULT __stdcall IEnumString_Next_Proxy( 
    IEnumString * This,
     ULONG celt,
     
       LPOLESTR *rgelt,
     
       ULONG *pceltFetched);


 HRESULT __stdcall IEnumString_Next_Stub( 
     IEnumString * This,
     ULONG celt,
      LPOLESTR *rgelt,
      ULONG *pceltFetched);

 HRESULT __stdcall ISequentialStream_Read_Proxy( 
    ISequentialStream * This,
     
       void *pv,
     
       ULONG cb,
     
       ULONG *pcbRead);


 HRESULT __stdcall ISequentialStream_Read_Stub( 
     ISequentialStream * This,
      byte *pv,
     ULONG cb,
      ULONG *pcbRead);

 HRESULT __stdcall ISequentialStream_Write_Proxy( 
    ISequentialStream * This,
     
       const void *pv,
     
       ULONG cb,
     
       ULONG *pcbWritten);


 HRESULT __stdcall ISequentialStream_Write_Stub( 
     ISequentialStream * This,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);

 HRESULT __stdcall IStream_Seek_Proxy( 
    IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     
       ULARGE_INTEGER *plibNewPosition);


 HRESULT __stdcall IStream_Seek_Stub( 
     IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
      ULARGE_INTEGER *plibNewPosition);

 HRESULT __stdcall IStream_CopyTo_Proxy( 
    IStream * This,
     
       IStream *pstm,
     ULARGE_INTEGER cb,
     
       ULARGE_INTEGER *pcbRead,
     
       ULARGE_INTEGER *pcbWritten);


 HRESULT __stdcall IStream_CopyTo_Stub( 
     IStream * This,
      IStream *pstm,
     ULARGE_INTEGER cb,
      ULARGE_INTEGER *pcbRead,
      ULARGE_INTEGER *pcbWritten);






}
#line 7696 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"

#line 7698 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidlbase.h"



#line 393 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"
























































#line 58 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"








#line 67 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\guiddef.h"











































































































































#line 395 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"















#pragma once
#line 18 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"



#pragma warning(push)
#line 23 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"
#pragma warning(disable:4001) 
#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"


extern "C" {
#line 29 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"

#pragma region Application Family


extern const IID GUID_NULL;

#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"
#pragma endregion

#pragma region Desktop Family



extern const IID CATID_MARSHALER;
#line 44 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"

extern const IID IID_IRpcChannel;
extern const IID IID_IRpcStub;
extern const IID IID_IStubManager;
extern const IID IID_IRpcProxy;
extern const IID IID_IProxyManager;
extern const IID IID_IPSFactory;
extern const IID IID_IInternalMoniker;
extern const IID IID_IDfReserved1;
extern const IID IID_IDfReserved2;
extern const IID IID_IDfReserved3;
extern const CLSID CLSID_StdMarshal;
extern const CLSID CLSID_AggStdMarshal;
extern const CLSID CLSID_StdAsyncActManager;
extern const IID IID_IStub;
extern const IID IID_IProxy;
extern const IID IID_IEnumGeneric;
extern const IID IID_IEnumHolder;
extern const IID IID_IEnumCallback;
extern const IID IID_IOleManager;
extern const IID IID_IOlePresObj;
extern const IID IID_IDebug;
extern const IID IID_IDebugStream;
extern const CLSID CLSID_PSGenObject;
extern const CLSID CLSID_PSClientSite;
extern const CLSID CLSID_PSClassObject;
extern const CLSID CLSID_PSInPlaceActive;
extern const CLSID CLSID_PSInPlaceFrame;
extern const CLSID CLSID_PSDragDrop;
extern const CLSID CLSID_PSBindCtx;
extern const CLSID CLSID_PSEnumerators;
extern const CLSID CLSID_StaticMetafile;
extern const CLSID CLSID_StaticDib;
extern const CLSID CID_CDfsVolume;
extern const CLSID CLSID_DCOMAccessControl;

#line 81 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"
#pragma endregion

#pragma region Application Family


extern const CLSID CLSID_GlobalOptions;
extern const CLSID CLSID_StdGlobalInterfaceTable;

#line 90 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"
#pragma endregion

#pragma region Desktop Family


extern const CLSID CLSID_ComBinding;
extern const CLSID CLSID_StdEvent;
extern const CLSID CLSID_ManualResetEvent;
extern const CLSID CLSID_SynchronizeContainer;


extern const CLSID CLSID_AddrControl;
#line 103 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"


extern const CLSID CLSID_ContextSwitcher;
#line 107 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"










extern const CLSID CLSID_CCDFormKrnl;
extern const CLSID CLSID_CCDPropertyPage;
extern const CLSID CLSID_CCDFormDialog;




extern const CLSID CLSID_CCDCommandButton;
extern const CLSID CLSID_CCDComboBox;
extern const CLSID CLSID_CCDTextBox;
extern const CLSID CLSID_CCDCheckBox;
extern const CLSID CLSID_CCDLabel;
extern const CLSID CLSID_CCDOptionButton;
extern const CLSID CLSID_CCDListBox;
extern const CLSID CLSID_CCDScrollBar;
extern const CLSID CLSID_CCDGroupBox;




extern const CLSID CLSID_CCDGeneralPropertyPage;
extern const CLSID CLSID_CCDGenericPropertyPage;
extern const CLSID CLSID_CCDFontPropertyPage;
extern const CLSID CLSID_CCDColorPropertyPage;
extern const CLSID CLSID_CCDLabelPropertyPage;
extern const CLSID CLSID_CCDCheckBoxPropertyPage;
extern const CLSID CLSID_CCDTextBoxPropertyPage;
extern const CLSID CLSID_CCDOptionButtonPropertyPage;
extern const CLSID CLSID_CCDListBoxPropertyPage;
extern const CLSID CLSID_CCDCommandButtonPropertyPage;
extern const CLSID CLSID_CCDComboBoxPropertyPage;
extern const CLSID CLSID_CCDScrollBarPropertyPage;
extern const CLSID CLSID_CCDGroupBoxPropertyPage;
extern const CLSID CLSID_CCDXObjectPropertyPage;

extern const CLSID CLSID_CStdPropertyFrame;

extern const CLSID CLSID_CFormPropertyPage;
extern const CLSID CLSID_CGridPropertyPage;

extern const CLSID CLSID_CWSJArticlePage;
extern const CLSID CLSID_CSystemPage;
extern const CLSID CLSID_IdentityUnmarshal;

#line 162 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"
#pragma endregion

#pragma region Application Family


extern const CLSID CLSID_InProcFreeMarshaler;

#line 170 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"
#pragma endregion

#pragma region Desktop Family


extern const CLSID CLSID_Picture_Metafile;
extern const CLSID CLSID_Picture_EnhMetafile;
extern const CLSID CLSID_Picture_Dib;




extern const GUID GUID_TRISTATE;

#line 185 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"
#pragma endregion


}
#line 190 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"



#pragma warning(pop)


#line 197 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"
#line 198 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"

#line 200 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\cguid.h"
#line 399 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#line 400 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#line 402 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion



#pragma region Desktop Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetMalloc(
      DWORD dwMemContext,
     LPMALLOC  * ppMalloc
    );


#line 418 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CreateStreamOnHGlobal(
    HGLOBAL hGlobal,
      BOOL fDeleteOnRelease,
     LPSTREAM  * ppstm
    );

                    
  extern "C" __declspec(dllimport) HRESULT __stdcall
GetHGlobalFromStream(
      LPSTREAM pstm,
      HGLOBAL  * phglobal
    );




extern "C" __declspec(dllimport) void __stdcall
CoUninitialize(
    void
    );


#line 448 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family



extern "C" __declspec(dllimport) DWORD __stdcall
CoGetCurrentProcess(
    void
    );


#line 461 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion




#pragma region Application Family





  extern "C" __declspec(dllimport) HRESULT __stdcall
CoInitializeEx(
      LPVOID pvReserved,
      DWORD dwCoInit
    );


#line 480 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family





extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCallerTID(
      LPDWORD lpdwTID
    );



#line 496 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family


 


extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCurrentLogicalThreadId(
      GUID * pguid
    );


#line 511 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#line 514 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"




#pragma region Application Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetContextToken(
      ULONG_PTR * pToken
    );


#line 529 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetDefaultContext(
      APTTYPE aptType,
      const IID & riid,
     void ** ppv
    );


#line 544 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#line 547 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#pragma region Application Family








  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetApartmentType(
      APTTYPE * pAptType,
      APTTYPEQUALIFIER * pAptQualifier
    );


#line 565 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#line 567 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion






#pragma region Application Family



typedef struct tagServerInformation
{
    DWORD  dwServerPid;
    DWORD  dwServerTid;
    UINT64 ui64ServerAddress;
} ServerInformation, *PServerInformation;

#line 586 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoDecodeProxy(
      DWORD dwClientPid,
      UINT64 ui64ProxyAddress,
      PServerInformation pServerInformation
    );


#line 601 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family



struct CO_MTA_USAGE_COOKIE__{int unused;}; typedef struct CO_MTA_USAGE_COOKIE__ *CO_MTA_USAGE_COOKIE;

#line 610 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoIncrementMTAUsage(
      CO_MTA_USAGE_COOKIE * pCookie
    );

               extern "C" __declspec(dllimport) HRESULT __stdcall
CoDecrementMTAUsage(
      CO_MTA_USAGE_COOKIE Cookie
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
CoWaitForMultipleObjects(
      DWORD dwFlags,
      DWORD dwTimeout,
      ULONG cHandles,
      const HANDLE * pHandles,
      LPDWORD lpdwindex
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
CoAllowUnmarshalerCLSID(
      const IID & clsid
    );


#line 644 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#line 647 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#pragma region Application Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetObjectContext(
      const IID & riid,
     LPVOID  * ppv
    );


#line 660 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family





  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetClassObject(
      const IID & rclsid,
      DWORD dwClsContext,
      LPVOID pvReserved,
      const IID & riid,
     LPVOID  * ppv
    );

#line 678 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterClassObject(
      const IID & rclsid,
      LPUNKNOWN pUnk,
      DWORD dwClsContext,
      DWORD flags,
      LPDWORD lpdwRegister
    );

  extern "C" __declspec(dllimport) HRESULT __stdcall
CoRevokeClassObject(
      DWORD dwRegister
    );

  extern "C" __declspec(dllimport) HRESULT __stdcall
CoResumeClassObjects(
    void
    );

  extern "C" __declspec(dllimport) HRESULT __stdcall
CoSuspendClassObjects(
    void
    );


#line 710 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family



extern "C" __declspec(dllimport) ULONG __stdcall
CoAddRefServerProcess(
    void
    );


extern "C" __declspec(dllimport) ULONG __stdcall
CoReleaseServerProcess(
    void
    );


  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetPSClsid(
      const IID & riid,
      CLSID * pClsid
    );

  extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterPSClsid(
      const IID & riid,
      const IID & rclsid
    );



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoRegisterSurrogate(
      LPSURROGATE pSurrogate
    );


#line 749 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family





  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetMarshalSizeMax(
      ULONG * pulSize,
      const IID & riid,
      LPUNKNOWN pUnk,
      DWORD dwDestContext,
      LPVOID pvDestContext,
      DWORD mshlflags
    );

  extern "C" __declspec(dllimport) HRESULT __stdcall
CoMarshalInterface(
      LPSTREAM pStm,
      const IID & riid,
      LPUNKNOWN pUnk,
      DWORD dwDestContext,
      LPVOID pvDestContext,
      DWORD mshlflags
    );

  extern "C" __declspec(dllimport) HRESULT __stdcall
CoUnmarshalInterface(
      LPSTREAM pStm,
      const IID & riid,
     LPVOID  * ppv
    );


#line 786 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family



extern "C" __declspec(dllimport) HRESULT __stdcall
CoMarshalHresult(
      LPSTREAM pstm,
      HRESULT hresult
    );

extern "C" __declspec(dllimport) HRESULT __stdcall
CoUnmarshalHresult(
      LPSTREAM pstm,
      HRESULT  * phresult
    );


#line 806 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoReleaseMarshalData(
      LPSTREAM pStm
    );

  extern "C" __declspec(dllimport) HRESULT __stdcall
CoDisconnectObject(
      LPUNKNOWN pUnk,
      DWORD dwReserved
    );


#line 825 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoLockObjectExternal(
      LPUNKNOWN pUnk,
      BOOL fLock,
      BOOL fLastUnlockReleases
    );


#line 840 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetStandardMarshal(
      const IID & riid,
      LPUNKNOWN pUnk,
      DWORD dwDestContext,
      LPVOID pvDestContext,
      DWORD mshlflags,
     LPMARSHAL  * ppMarshal
    );


                    
#line 859 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetStdMarshalEx(
      LPUNKNOWN pUnkOuter,
      DWORD smexflags,
     LPUNKNOWN  * ppUnkInner
    );


#line 874 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family




typedef enum tagSTDMSHLFLAGS
{
    SMEXF_SERVER     = 0x01,       
    SMEXF_HANDLER    = 0x02        
} STDMSHLFLAGS;


#line 889 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family



extern "C" __declspec(dllimport) BOOL __stdcall
CoIsHandlerConnected(
      LPUNKNOWN pUnk
    );



#line 903 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family




  extern "C" __declspec(dllimport) HRESULT __stdcall
CoMarshalInterThreadInterfaceInStream(
      const IID & riid,
      LPUNKNOWN pUnk,
     LPSTREAM * ppStm
    );


  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetInterfaceAndReleaseStream(
      LPSTREAM pStm,
      const IID & iid,
     LPVOID  * ppv
    );


  extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateFreeThreadedMarshaler(
      LPUNKNOWN punkOuter,
     LPUNKNOWN * ppunkMarshal
    );


extern "C" __declspec(dllimport) void __stdcall
CoFreeUnusedLibraries(
    void
    );





extern "C" __declspec(dllimport) void __stdcall
CoFreeUnusedLibrariesEx(
      DWORD dwUnloadDelay,
      DWORD dwReserved
    );

#line 949 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#line 951 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion




#pragma region Desktop Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoDisconnectContext(
    DWORD dwTimeout
    );


#line 967 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#line 970 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"




#pragma region Application Family







  extern "C" __declspec(dllimport) HRESULT __stdcall
CoInitializeSecurity(
      PSECURITY_DESCRIPTOR pSecDesc,
      LONG cAuthSvc,
      SOLE_AUTHENTICATION_SERVICE * asAuthSvc,
      void * pReserved1,
      DWORD dwAuthnLevel,
      DWORD dwImpLevel,
      void * pAuthList,
      DWORD dwCapabilities,
      void * pReserved3
    );


#line 997 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family





  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCallContext(
      const IID & riid,
     void ** ppInterface
    );




  extern "C" __declspec(dllimport) HRESULT __stdcall
CoQueryProxyBlanket(
      IUnknown * pProxy,
      DWORD * pwAuthnSvc,
      DWORD * pAuthzSvc,
     LPOLESTR * pServerPrincName,
      DWORD * pAuthnLevel,
      DWORD * pImpLevel,
      RPC_AUTH_IDENTITY_HANDLE * pAuthInfo,
      DWORD * pCapabilites
    );




  extern "C" __declspec(dllimport) HRESULT __stdcall
CoSetProxyBlanket(
      IUnknown * pProxy,
      DWORD dwAuthnSvc,
      DWORD dwAuthzSvc,
      OLECHAR * pServerPrincName,
      DWORD dwAuthnLevel,
      DWORD dwImpLevel,
      RPC_AUTH_IDENTITY_HANDLE pAuthInfo,
      DWORD dwCapabilities
    );




  extern "C" __declspec(dllimport) HRESULT __stdcall
CoCopyProxy(
      IUnknown * pProxy,
     IUnknown ** ppCopy
    );




  extern "C" __declspec(dllimport) HRESULT __stdcall
CoQueryClientBlanket(
      DWORD * pAuthnSvc,
      DWORD * pAuthzSvc,
     LPOLESTR * pServerPrincName,
      DWORD * pAuthnLevel,
      DWORD * pImpLevel,
     RPC_AUTHZ_HANDLE * pPrivs,
      DWORD * pCapabilities
    );




  extern "C" __declspec(dllimport) HRESULT __stdcall
CoImpersonateClient(
    void
    );




  extern "C" __declspec(dllimport) HRESULT __stdcall
CoRevertToSelf(
    void
    );




  extern "C" __declspec(dllimport) HRESULT __stdcall
CoQueryAuthenticationServices(
      DWORD * pcAuthSvc,
     SOLE_AUTHENTICATION_SERVICE ** asAuthSvc
    );


#line 1091 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family





  extern "C" __declspec(dllimport) HRESULT __stdcall
CoSwitchCallContext(
      IUnknown * pNewObject,
     IUnknown ** ppOldObject
    );








#line 1113 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion


#line 1117 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#pragma region Desktop Family





  extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateInstance(
      const IID & rclsid,
      LPUNKNOWN pUnkOuter,
      DWORD dwClsContext,
      const IID & riid,
      LPVOID  * ppv
    );






  


  extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateInstanceEx(
      const IID & Clsid,
      IUnknown * punkOuter,
      DWORD dwClsCtx,
      COSERVERINFO * pServerInfo,
      DWORD dwCount,
      MULTI_QI * pResults
    );


#line 1153 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#line 1155 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion



  
#pragma region Application Family





  extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateInstanceFromApp(
      const IID & Clsid,
      IUnknown * punkOuter,
      DWORD dwClsCtx,
      PVOID reserved,
      DWORD dwCount,
      MULTI_QI * pResults
    );


#line 1178 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#line 1181 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"


#pragma region Application Family













































#line 1230 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion





#pragma region Desktop Family





  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetCancelObject(
      DWORD dwThreadId,
      const IID & iid,
     void ** ppUnk
    );




  extern "C" __declspec(dllimport) HRESULT __stdcall
CoSetCancelObject(
      IUnknown * pUnk
    );




  extern "C" __declspec(dllimport) HRESULT __stdcall
CoCancelCall(
      DWORD dwThreadId,
      ULONG ulTimeout
    );




  extern "C" __declspec(dllimport) HRESULT __stdcall
CoTestCancel(
    void
    );




  extern "C" __declspec(dllimport) HRESULT __stdcall
CoEnableCallCancellation(
      LPVOID pReserved
    );




  extern "C" __declspec(dllimport) HRESULT __stdcall
CoDisableCallCancellation(
      LPVOID pReserved
    );


#line 1292 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#line 1295 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#pragma region Application Family





  extern "C" __declspec(dllimport) HRESULT __stdcall
StringFromCLSID(
      const IID & rclsid,
     LPOLESTR  * lplpsz
    );

  extern "C" __declspec(dllimport) HRESULT __stdcall
CLSIDFromString(
      LPCOLESTR lpsz,
      LPCLSID pclsid
    );

  extern "C" __declspec(dllimport) HRESULT __stdcall
StringFromIID(
      const IID & rclsid,
     LPOLESTR  * lplpsz
    );

  extern "C" __declspec(dllimport) HRESULT __stdcall
IIDFromString(
      LPCOLESTR lpsz,
      LPIID lpiid
    );


#line 1328 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
ProgIDFromCLSID(
      const IID & clsid,
     LPOLESTR  * lplpszProgID
    );

  extern "C" __declspec(dllimport) HRESULT __stdcall
CLSIDFromProgID(
      LPCOLESTR lpszProgID,
      LPCLSID lpclsid
    );


#line 1348 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family



  extern "C" __declspec(dllimport) int __stdcall
StringFromGUID2(
      const GUID & rguid,
      LPOLESTR lpsz,
      int cchMax
    );


  extern "C" __declspec(dllimport) HRESULT __stdcall
CoCreateGuid(
      GUID  * pguid
    );




typedef struct tagPROPVARIANT PROPVARIANT;

 
extern "C" __declspec(dllimport) HRESULT __stdcall
PropVariantCopy(
      PROPVARIANT * pvarDest,
      const PROPVARIANT * pvarSrc
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
PropVariantClear(
      PROPVARIANT * pvar
    );


extern "C" __declspec(dllimport) HRESULT __stdcall
FreePropVariantArray(
      ULONG cVariants,
      PROPVARIANT * rgvars
    );


#line 1394 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion




#pragma region Desktop Family



#line 1404 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#line 1407 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"





#pragma region Desktop Family





  extern "C" __declspec(dllimport) HRESULT __stdcall
CoWaitForMultipleHandles(
      DWORD dwFlags,
      DWORD dwTimeout,
      ULONG cHandles,
      LPHANDLE pHandles,
      LPDWORD lpdwindex
    );


#line 1429 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family





typedef enum tagCOWAIT_FLAGS
{
  COWAIT_DEFAULT = 0,
  COWAIT_WAITALL = 1,
  COWAIT_ALERTABLE = 2,
  COWAIT_INPUTAVAILABLE = 4,

#line 1445 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family



  COWAIT_DISPATCH_CALLS = 8,
  COWAIT_DISPATCH_WINDOW_MESSAGES = 0x10,

#line 1455 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family



}COWAIT_FLAGS;

#line 1464 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion




#pragma region Application Family



typedef enum CWMO_FLAGS
{
  CWMO_DEFAULT = 0,
  CWMO_DISPATCH_CALLS = 1,

#line 1479 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Desktop Family



  CWMO_DISPATCH_WINDOW_MESSAGES = 2,

#line 1488 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#pragma region Application Family



} CWMO_FLAGS;

#line 1497 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#line 1500 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#pragma region Application Family





#line 1508 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#line 1511 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#pragma region Desktop Family



  extern "C" __declspec(dllimport) HRESULT __stdcall
CoGetTreatAsClass(
      const IID & clsidOld,
      LPCLSID pClsidNew
    );


#line 1524 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion






#pragma region Desktop Family






  extern "C" __declspec(dllimport) HRESULT __stdcall
CoInvalidateRemoteMachineBindings(
      LPOLESTR pszMachineName
    );


#line 1545 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion

#line 1548 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#pragma region Application Family



 








typedef HRESULT (__stdcall * LPFNGETCLASSOBJECT) (const IID &, const IID &, LPVOID *);





typedef HRESULT (__stdcall * LPFNCANUNLOADNOW)(void);


 
extern "C" HRESULT __stdcall  DllGetClassObject(  const IID & rclsid,   const IID & riid,  LPVOID * ppv);

extern "C" HRESULT __stdcall  DllCanUnloadNow(void);



extern "C" __declspec(dllimport)         LPVOID __stdcall
CoTaskMemAlloc(
      SIZE_T cb
    );

extern "C" __declspec(dllimport)      LPVOID __stdcall
CoTaskMemRealloc(
          LPVOID pv,
      SIZE_T cb
    );

extern "C" __declspec(dllimport) void __stdcall
CoTaskMemFree(
          LPVOID pv
    );
 
 

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 1597 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#line 1598 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"

#line 1600 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"
#pragma endregion




#line 1606 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\combaseapi.h"


#line 28 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"


typedef enum tagCOINIT
{
  COINIT_APARTMENTTHREADED  = 0x2,      


  
  COINIT_MULTITHREADED      = COINITBASE_MULTITHREADED,
  COINIT_DISABLE_OLE1DDE    = 0x4,      
  COINIT_SPEED_OVER_MEMORY  = 0x8,      
#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
} COINIT;
















































































#line 122 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"








#line 131 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"











typedef DWORD STGFMT;










#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"





 


#pragma warning( disable: 4049 )  






















#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"





#pragma once
#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"

 




































































































































































































































































































































































































typedef struct IMallocSpy IMallocSpy;

#line 433 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IBindCtx IBindCtx;

#line 440 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IEnumMoniker IEnumMoniker;

#line 447 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IRunnableObject IRunnableObject;

#line 454 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IRunningObjectTable IRunningObjectTable;

#line 461 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IPersist IPersist;

#line 468 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IPersistStream IPersistStream;

#line 475 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IMoniker IMoniker;

#line 482 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IROTData IROTData;

#line 489 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IEnumSTATSTG IEnumSTATSTG;

#line 496 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IStorage IStorage;

#line 503 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IPersistFile IPersistFile;

#line 510 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IPersistStorage IPersistStorage;

#line 517 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct ILockBytes ILockBytes;

#line 524 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IEnumFORMATETC IEnumFORMATETC;

#line 531 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IEnumSTATDATA IEnumSTATDATA;

#line 538 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IRootStorage IRootStorage;

#line 545 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IAdviseSink IAdviseSink;

#line 552 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct AsyncIAdviseSink AsyncIAdviseSink;

#line 559 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IAdviseSink2 IAdviseSink2;

#line 566 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct AsyncIAdviseSink2 AsyncIAdviseSink2;

#line 573 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IDataObject IDataObject;

#line 580 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IDataAdviseHolder IDataAdviseHolder;

#line 587 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IMessageFilter IMessageFilter;

#line 594 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IClassActivator IClassActivator;

#line 601 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IFillLockBytes IFillLockBytes;

#line 608 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IProgressNotify IProgressNotify;

#line 615 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct ILayoutStorage ILayoutStorage;

#line 622 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IBlockingLock IBlockingLock;

#line 629 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct ITimeAndNoticeControl ITimeAndNoticeControl;

#line 636 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IOplockStorage IOplockStorage;

#line 643 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IDirectWriterLock IDirectWriterLock;

#line 650 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IUrlMon IUrlMon;

#line 657 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IForegroundTransfer IForegroundTransfer;

#line 664 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IThumbnailExtractor IThumbnailExtractor;

#line 671 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IDummyHICONIncluder IDummyHICONIncluder;

#line 678 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IProcessLock IProcessLock;

#line 685 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct ISurrogateService ISurrogateService;

#line 692 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IInitializeSpy IInitializeSpy;

#line 699 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




typedef struct IApartmentShutdown IApartmentShutdown;

#line 706 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\unknwn.h"





 


#pragma warning( disable: 4049 )  






















#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\unknwn.h"





#pragma once
#line 40 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\unknwn.h"

 


























extern "C"{
#line 70 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\unknwn.h"



 








#pragma once
#line 84 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\unknwn.h"

#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0000_v0_0_s_ifspec;





























































































































































































#line 281 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\unknwn.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0001_v0_0_s_ifspec;






























































































































 

#line 417 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\unknwn.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0002_v0_0_s_ifspec;

































































































































 

#line 556 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\unknwn.h"
#pragma endregion


extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_unknwn_0000_0003_v0_0_s_ifspec;



 HRESULT __stdcall IClassFactory_CreateInstance_Proxy( 
    IClassFactory * This,
     
       IUnknown *pUnkOuter,
     
       const IID & riid,
     
      void **ppvObject);


 HRESULT __stdcall IClassFactory_CreateInstance_Stub( 
     IClassFactory * This,
      const IID & riid,
      IUnknown **ppvObject);

 HRESULT __stdcall IClassFactory_LockServer_Proxy( 
    IClassFactory * This,
     BOOL fLock);


 HRESULT __stdcall IClassFactory_LockServer_Stub( 
     IClassFactory * This,
     BOOL fLock);






}
#line 595 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\unknwn.h"

#line 597 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\unknwn.h"


#line 710 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"


extern "C"{
#line 714 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 











#line 730 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"


#line 733 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"


#line 736 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"


#line 739 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"





#pragma warning(push)
#line 746 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma warning(disable:4201)
#line 748 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"

#pragma once
#line 751 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"










#line 762 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"


#line 765 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"


#line 768 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"


#line 771 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"





#pragma warning(push)
#line 778 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma warning(disable:4201)
#line 780 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"

#pragma once
#line 783 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"







































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#pragma warning(pop)


#line 7898 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#line 7899 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"









#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0051_v0_0_s_ifspec;





 

typedef  IMallocSpy *LPMALLOCSPY;


extern "C" const IID IID_IMallocSpy;


    
    struct __declspec(uuid("0000001d-0000-0000-C000-000000000046")) __declspec(novtable)
    IMallocSpy : public IUnknown
    {
    public:
        virtual SIZE_T __stdcall PreAlloc( 
             
               SIZE_T cbRequest) = 0;
        
        virtual void *__stdcall PostAlloc( 
             
               void *pActual) = 0;
        
        virtual void *__stdcall PreFree( 
             
               void *pRequest,
             
               BOOL fSpyed) = 0;
        
        virtual void __stdcall PostFree( 
             
               BOOL fSpyed) = 0;
        
        virtual SIZE_T __stdcall PreRealloc( 
             
               void *pRequest,
             
               SIZE_T cbRequest,
             
              void **ppNewRequest,
             
               BOOL fSpyed) = 0;
        
        virtual void *__stdcall PostRealloc( 
             
               void *pActual,
             
               BOOL fSpyed) = 0;
        
        virtual void *__stdcall PreGetSize( 
             
               void *pRequest,
             
               BOOL fSpyed) = 0;
        
        virtual SIZE_T __stdcall PostGetSize( 
             
               SIZE_T cbActual,
             
               BOOL fSpyed) = 0;
        
        virtual void *__stdcall PreDidAlloc( 
             
               void *pRequest,
             
               BOOL fSpyed) = 0;
        
        virtual int __stdcall PostDidAlloc( 
             
               void *pRequest,
             
               BOOL fSpyed,
             
               int fActual) = 0;
        
        virtual void __stdcall PreHeapMinimize( void) = 0;
        
        virtual void __stdcall PostHeapMinimize( void) = 0;
        
    };
    
    




























































































































































#line 8156 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 8161 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 8167 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0052_v0_0_s_ifspec;





 

typedef    IBindCtx *LPBC;

typedef    IBindCtx *LPBINDCTX;


    typedef   struct tagBIND_OPTS {
    DWORD           cbStruct;
    DWORD           grfFlags;
    DWORD           grfMode;
    DWORD           dwTickCountDeadline;
    } BIND_OPTS, * LPBIND_OPTS;











#line 8204 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"

    typedef struct tagBIND_OPTS2 : tagBIND_OPTS {
    DWORD           dwTrackFlags;
    DWORD           dwClassContext;
    LCID            locale;
    COSERVERINFO *  pServerInfo;
    } BIND_OPTS2, * LPBIND_OPTS2;
















#line 8228 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"

    typedef struct tagBIND_OPTS3 : tagBIND_OPTS2 {
   HWND           hwnd;
    } BIND_OPTS3, * LPBIND_OPTS3;
















#line 8249 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
typedef 
enum tagBIND_FLAGS
    {
        BIND_MAYBOTHERUSER	= 1,
        BIND_JUSTTESTEXISTENCE	= 2
    } 	BIND_FLAGS;


extern "C" const IID IID_IBindCtx;


    
    struct __declspec(uuid("0000000e-0000-0000-C000-000000000046")) __declspec(novtable)
    IBindCtx : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterObjectBound( 
              IUnknown *punk) = 0;
        
        virtual HRESULT __stdcall RevokeObjectBound( 
              IUnknown *punk) = 0;
        
        virtual HRESULT __stdcall ReleaseBoundObjects( void) = 0;
        
        virtual  HRESULT __stdcall SetBindOptions( 
             
               BIND_OPTS *pbindopts) = 0;
        
        virtual  HRESULT __stdcall GetBindOptions( 
             
               BIND_OPTS *pbindopts) = 0;
        
        virtual HRESULT __stdcall GetRunningObjectTable( 
              IRunningObjectTable **pprot) = 0;
        
        virtual HRESULT __stdcall RegisterObjectParam( 
              LPOLESTR pszKey,
              IUnknown *punk) = 0;
        
        virtual HRESULT __stdcall GetObjectParam( 
              LPOLESTR pszKey,
              IUnknown **ppunk) = 0;
        
        virtual HRESULT __stdcall EnumObjectParam( 
              IEnumString **ppenum) = 0;
        
        virtual HRESULT __stdcall RevokeObjectParam( 
              LPOLESTR pszKey) = 0;
        
    };
    
    





















































































































#line 8419 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall IBindCtx_RemoteSetBindOptions_Proxy( 
     IBindCtx * This,
      BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteSetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindCtx_RemoteGetBindOptions_Proxy( 
     IBindCtx * This,
      BIND_OPTS2 *pbindopts);


void __stdcall IBindCtx_RemoteGetBindOptions_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8448 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 

typedef    IEnumMoniker *LPENUMMONIKER;


extern "C" const IID IID_IEnumMoniker;


    
    struct __declspec(uuid("00000102-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumMoniker : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             
               IMoniker **rgelt,
             
               ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
              IEnumMoniker **ppenum) = 0;
        
    };
    
    











































































#line 8561 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall IEnumMoniker_RemoteNext_Proxy( 
     IEnumMoniker * This,
     ULONG celt,
      IMoniker **rgelt,
      ULONG *pceltFetched);


void __stdcall IEnumMoniker_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8580 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 8586 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0054_v0_0_s_ifspec;





 

typedef    IRunnableObject *LPRUNNABLEOBJECT;


extern "C" const IID IID_IRunnableObject;


    
    struct __declspec(uuid("00000126-0000-0000-C000-000000000046")) __declspec(novtable)
    IRunnableObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetRunningClass( 
              LPCLSID lpClsid) = 0;
        
        virtual HRESULT __stdcall Run( 
              LPBINDCTX pbc) = 0;
        
        virtual  BOOL __stdcall IsRunning( void) = 0;
        
        virtual HRESULT __stdcall LockRunning( 
             BOOL fLock,
             BOOL fLastUnlockCloses) = 0;
        
        virtual HRESULT __stdcall SetContainedObject( 
             BOOL fContained) = 0;
        
    };
    
    















































































#line 8709 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall IRunnableObject_RemoteIsRunning_Proxy( 
     IRunnableObject * This);


void __stdcall IRunnableObject_RemoteIsRunning_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 8725 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 

typedef    IRunningObjectTable *LPRUNNINGOBJECTTABLE;


extern "C" const IID IID_IRunningObjectTable;


    
    struct __declspec(uuid("00000010-0000-0000-C000-000000000046")) __declspec(novtable)
    IRunningObjectTable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Register( 
             DWORD grfFlags,
              IUnknown *punkObject,
              IMoniker *pmkObjectName,
              DWORD *pdwRegister) = 0;
        
        virtual HRESULT __stdcall Revoke( 
             DWORD dwRegister) = 0;
        
        virtual HRESULT __stdcall IsRunning( 
              IMoniker *pmkObjectName) = 0;
        
        virtual HRESULT __stdcall GetObjectA( 
              IMoniker *pmkObjectName,
              IUnknown **ppunkObject) = 0;
        
        virtual HRESULT __stdcall NoteChangeTime( 
             DWORD dwRegister,
              FILETIME *pfiletime) = 0;
        
        virtual HRESULT __stdcall GetTimeOfLastChange( 
              IMoniker *pmkObjectName,
              FILETIME *pfiletime) = 0;
        
        virtual HRESULT __stdcall EnumRunning( 
              IEnumMoniker **ppenumMoniker) = 0;
        
    };
    
    



































































































#line 8874 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 8879 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 8885 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0056_v0_0_s_ifspec;





 

typedef    IPersist *LPPERSIST;


extern "C" const IID IID_IPersist;


    
    struct __declspec(uuid("0000010c-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersist : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassID( 
              CLSID *pClassID) = 0;
        
    };
    
    



















































#line 8968 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 8973 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 

typedef    IPersistStream *LPPERSISTSTREAM;


extern "C" const IID IID_IPersistStream;


    
    struct __declspec(uuid("00000109-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistStream : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall Load( 
              IStream *pStm) = 0;
        
        virtual HRESULT __stdcall Save( 
              IStream *pStm,
             BOOL fClearDirty) = 0;
        
        virtual HRESULT __stdcall GetSizeMax( 
              ULARGE_INTEGER *pcbSize) = 0;
        
    };
    
    
















































































#line 9088 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 9093 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 

typedef    IMoniker *LPMONIKER;

typedef 
enum tagMKSYS
    {
        MKSYS_NONE	= 0,
        MKSYS_GENERICCOMPOSITE	= 1,
        MKSYS_FILEMONIKER	= 2,
        MKSYS_ANTIMONIKER	= 3,
        MKSYS_ITEMMONIKER	= 4,
        MKSYS_POINTERMONIKER	= 5,
        MKSYS_CLASSMONIKER	= 7,
        MKSYS_OBJREFMONIKER	= 8,
        MKSYS_SESSIONMONIKER	= 9,
        MKSYS_LUAMONIKER	= 10
    } 	MKSYS;

typedef  
enum tagMKREDUCE
    {
        MKRREDUCE_ONE	= ( 3 << 16 ) ,
        MKRREDUCE_TOUSER	= ( 2 << 16 ) ,
        MKRREDUCE_THROUGHUSER	= ( 1 << 16 ) ,
        MKRREDUCE_ALL	= 0
    } 	MKRREDUCE;


extern "C" const IID IID_IMoniker;


    
    struct __declspec(uuid("0000000f-0000-0000-C000-000000000046")) __declspec(novtable)
    IMoniker : public IPersistStream
    {
    public:
        virtual  HRESULT __stdcall BindToObject( 
             
               IBindCtx *pbc,
             
               IMoniker *pmkToLeft,
             
               const IID & riidResult,
             
              void **ppvResult) = 0;
        
        virtual  HRESULT __stdcall BindToStorage( 
             
               IBindCtx *pbc,
             
               IMoniker *pmkToLeft,
             
               const IID & riid,
             
              void **ppvObj) = 0;
        
        virtual HRESULT __stdcall Reduce( 
              IBindCtx *pbc,
             DWORD dwReduceHowFar,
              IMoniker **ppmkToLeft,
              IMoniker **ppmkReduced) = 0;
        
        virtual HRESULT __stdcall ComposeWith( 
              IMoniker *pmkRight,
             BOOL fOnlyIfNotGeneric,
              IMoniker **ppmkComposite) = 0;
        
        virtual HRESULT __stdcall Enum( 
             BOOL fForward,
              IEnumMoniker **ppenumMoniker) = 0;
        
        virtual HRESULT __stdcall IsEqual( 
              IMoniker *pmkOtherMoniker) = 0;
        
        virtual HRESULT __stdcall Hash( 
              DWORD *pdwHash) = 0;
        
        virtual HRESULT __stdcall IsRunning( 
              IBindCtx *pbc,
              IMoniker *pmkToLeft,
              IMoniker *pmkNewlyRunning) = 0;
        
        virtual HRESULT __stdcall GetTimeOfLastChange( 
              IBindCtx *pbc,
              IMoniker *pmkToLeft,
              FILETIME *pFileTime) = 0;
        
        virtual HRESULT __stdcall Inverse( 
              IMoniker **ppmk) = 0;
        
        virtual HRESULT __stdcall CommonPrefixWith( 
              IMoniker *pmkOther,
              IMoniker **ppmkPrefix) = 0;
        
        virtual HRESULT __stdcall RelativePathTo( 
              IMoniker *pmkOther,
              IMoniker **ppmkRelPath) = 0;
        
        virtual HRESULT __stdcall GetDisplayName( 
              IBindCtx *pbc,
              IMoniker *pmkToLeft,
              LPOLESTR *ppszDisplayName) = 0;
        
        virtual HRESULT __stdcall ParseDisplayName( 
              IBindCtx *pbc,
              IMoniker *pmkToLeft,
              LPOLESTR pszDisplayName,
              ULONG *pchEaten,
              IMoniker **ppmkOut) = 0;
        
        virtual HRESULT __stdcall IsSystemMoniker( 
              DWORD *pdwMksys) = 0;
        
    };
    
    


























































































































































































































#line 9435 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall IMoniker_RemoteBindToObject_Proxy( 
     IMoniker * This,
      IBindCtx *pbc,
      IMoniker *pmkToLeft,
      const IID & riidResult,
      IUnknown **ppvResult);


void __stdcall IMoniker_RemoteBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IMoniker_RemoteBindToStorage_Proxy( 
     IMoniker * This,
      IBindCtx *pbc,
      IMoniker *pmkToLeft,
      const IID & riid,
      IUnknown **ppvObj);


void __stdcall IMoniker_RemoteBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9470 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 9476 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0059_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0059_v0_0_s_ifspec;





 


extern "C" const IID IID_IROTData;


    
    struct __declspec(uuid("f29f6bc0-5021-11ce-aa15-00006901293f")) __declspec(novtable)
    IROTData : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetComparisonData( 
              byte *pbData,
             ULONG cbMax,
              ULONG *pcbData) = 0;
        
    };
    
    





















































#line 9561 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 9566 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 9572 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0060_v0_0_s_ifspec;





 

typedef    IEnumSTATSTG *LPENUMSTATSTG;


extern "C" const IID IID_IEnumSTATSTG;


    
    struct __declspec(uuid("0000000d-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATSTG : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             
               STATSTG *rgelt,
             
               ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
              IEnumSTATSTG **ppenum) = 0;
        
    };
    
    











































































#line 9691 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall IEnumSTATSTG_RemoteNext_Proxy( 
     IEnumSTATSTG * This,
     ULONG celt,
      STATSTG *rgelt,
      ULONG *pceltFetched);


void __stdcall IEnumSTATSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 9710 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 

typedef    IStorage *LPSTORAGE;

typedef struct tagRemSNB
    {
    unsigned long ulCntStr;
    unsigned long ulCntChar;
     OLECHAR rgString[ 1 ];
    } 	RemSNB;

typedef    RemSNB *wireSNB;

typedef  LPOLESTR *SNB;


extern "C" const IID IID_IStorage;


    
    struct __declspec(uuid("0000000b-0000-0000-C000-000000000046")) __declspec(novtable)
    IStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateStream( 
              const OLECHAR *pwcsName,
             DWORD grfMode,
             DWORD reserved1,
             DWORD reserved2,
              IStream **ppstm) = 0;
        
        virtual  HRESULT __stdcall OpenStream( 
             
               const OLECHAR *pwcsName,
             
               void *reserved1,
             DWORD grfMode,
             DWORD reserved2,
             
              IStream **ppstm) = 0;
        
        virtual HRESULT __stdcall CreateStorage( 
              const OLECHAR *pwcsName,
             DWORD grfMode,
             DWORD reserved1,
             DWORD reserved2,
              IStorage **ppstg) = 0;
        
        virtual HRESULT __stdcall OpenStorage( 
              const OLECHAR *pwcsName,
              IStorage *pstgPriority,
             DWORD grfMode,
              SNB snbExclude,
             DWORD reserved,
              IStorage **ppstg) = 0;
        
        virtual  HRESULT __stdcall CopyTo( 
             DWORD ciidExclude,
             
               const IID *rgiidExclude,
             
               SNB snbExclude,
             
               IStorage *pstgDest) = 0;
        
        virtual HRESULT __stdcall MoveElementTo( 
              const OLECHAR *pwcsName,
              IStorage *pstgDest,
              const OLECHAR *pwcsNewName,
             DWORD grfFlags) = 0;
        
        virtual HRESULT __stdcall Commit( 
             DWORD grfCommitFlags) = 0;
        
        virtual HRESULT __stdcall Revert( void) = 0;
        
        virtual  HRESULT __stdcall EnumElements( 
             
               DWORD reserved1,
             
               void *reserved2,
             
               DWORD reserved3,
             
              IEnumSTATSTG **ppenum) = 0;
        
        virtual HRESULT __stdcall DestroyElement( 
              const OLECHAR *pwcsName) = 0;
        
        virtual HRESULT __stdcall RenameElement( 
              const OLECHAR *pwcsOldName,
              const OLECHAR *pwcsNewName) = 0;
        
        virtual HRESULT __stdcall SetElementTimes( 
              const OLECHAR *pwcsName,
              const FILETIME *pctime,
              const FILETIME *patime,
              const FILETIME *pmtime) = 0;
        
        virtual HRESULT __stdcall SetClass( 
              const IID & clsid) = 0;
        
        virtual HRESULT __stdcall SetStateBits( 
             DWORD grfStateBits,
             DWORD grfMask) = 0;
        
        virtual HRESULT __stdcall Stat( 
              STATSTG *pstatstg,
             DWORD grfStatFlag) = 0;
        
    };
    
    






























































































































































































#line 10020 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall IStorage_RemoteOpenStream_Proxy( 
     IStorage * This,
      const OLECHAR *pwcsName,
     unsigned long cbReserved1,
      byte *reserved1,
     DWORD grfMode,
     DWORD reserved2,
      IStream **ppstm);


void __stdcall IStorage_RemoteOpenStream_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStorage_RemoteCopyTo_Proxy( 
     IStorage * This,
     DWORD ciidExclude,
      const IID *rgiidExclude,
      SNB snbExclude,
      IStorage *pstgDest);


void __stdcall IStorage_RemoteCopyTo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IStorage_RemoteEnumElements_Proxy( 
     IStorage * This,
     DWORD reserved1,
     unsigned long cbReserved2,
      byte *reserved2,
     DWORD reserved3,
      IEnumSTATSTG **ppenum);


void __stdcall IStorage_RemoteEnumElements_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10073 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 10079 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0062_v0_0_s_ifspec;





 

typedef    IPersistFile *LPPERSISTFILE;


extern "C" const IID IID_IPersistFile;


    
    struct __declspec(uuid("0000010b-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistFile : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall Load( 
              LPCOLESTR pszFileName,
             DWORD dwMode) = 0;
        
        virtual HRESULT __stdcall Save( 
              LPCOLESTR pszFileName,
             BOOL fRemember) = 0;
        
        virtual HRESULT __stdcall SaveCompleted( 
              LPCOLESTR pszFileName) = 0;
        
        virtual HRESULT __stdcall GetCurFile( 
              LPOLESTR *ppszFileName) = 0;
        
    };
    
    
























































































#line 10212 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 10217 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 

typedef    IPersistStorage *LPPERSISTSTORAGE;


extern "C" const IID IID_IPersistStorage;


    
    struct __declspec(uuid("0000010a-0000-0000-C000-000000000046")) __declspec(novtable)
    IPersistStorage : public IPersist
    {
    public:
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall InitNew( 
              IStorage *pStg) = 0;
        
        virtual HRESULT __stdcall Load( 
              IStorage *pStg) = 0;
        
        virtual HRESULT __stdcall Save( 
              IStorage *pStgSave,
             BOOL fSameAsLoad) = 0;
        
        virtual HRESULT __stdcall SaveCompleted( 
              IStorage *pStgNew) = 0;
        
        virtual HRESULT __stdcall HandsOffStorage( void) = 0;
        
    };
    
    





























































































#line 10350 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 10355 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 10361 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0064_v0_0_s_ifspec;





 

typedef    ILockBytes *LPLOCKBYTES;


extern "C" const IID IID_ILockBytes;


    
    struct __declspec(uuid("0000000a-0000-0000-C000-000000000046")) __declspec(novtable)
    ILockBytes : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall ReadAt( 
             ULARGE_INTEGER ulOffset,
             
               void *pv,
             ULONG cb,
             
               ULONG *pcbRead) = 0;
        
        virtual  HRESULT __stdcall WriteAt( 
             ULARGE_INTEGER ulOffset,
             
               const void *pv,
             ULONG cb,
             
               ULONG *pcbWritten) = 0;
        
        virtual HRESULT __stdcall Flush( void) = 0;
        
        virtual HRESULT __stdcall SetSize( 
             ULARGE_INTEGER cb) = 0;
        
        virtual HRESULT __stdcall LockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall UnlockRegion( 
             ULARGE_INTEGER libOffset,
             ULARGE_INTEGER cb,
             DWORD dwLockType) = 0;
        
        virtual HRESULT __stdcall Stat( 
              STATSTG *pstatstg,
             DWORD grfStatFlag) = 0;
        
    };
    
    











































































































#line 10532 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall ILockBytes_RemoteReadAt_Proxy( 
     ILockBytes * This,
     ULARGE_INTEGER ulOffset,
      byte *pv,
     ULONG cb,
      ULONG *pcbRead);


void __stdcall ILockBytes_RemoteReadAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ILockBytes_RemoteWriteAt_Proxy( 
     ILockBytes * This,
     ULARGE_INTEGER ulOffset,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);


void __stdcall ILockBytes_RemoteWriteAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10567 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 

typedef    IEnumFORMATETC *LPENUMFORMATETC;


typedef struct tagDVTARGETDEVICE
    {
    DWORD tdSize;
    WORD tdDriverNameOffset;
    WORD tdDeviceNameOffset;
    WORD tdPortNameOffset;
    WORD tdExtDevmodeOffset;
     BYTE tdData[ 1 ];
    } 	DVTARGETDEVICE;


typedef CLIPFORMAT *LPCLIPFORMAT;

typedef struct tagFORMATETC
    {
    CLIPFORMAT cfFormat;
     DVTARGETDEVICE *ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } 	FORMATETC;

typedef struct tagFORMATETC *LPFORMATETC;


extern "C" const IID IID_IEnumFORMATETC;


    
    struct __declspec(uuid("00000103-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumFORMATETC : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             
               FORMATETC *rgelt,
             
               ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
              IEnumFORMATETC **ppenum) = 0;
        
    };
    
    











































































#line 10705 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall IEnumFORMATETC_RemoteNext_Proxy( 
     IEnumFORMATETC * This,
     ULONG celt,
      FORMATETC *rgelt,
      ULONG *pceltFetched);


void __stdcall IEnumFORMATETC_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10724 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 

typedef    IEnumSTATDATA *LPENUMSTATDATA;

typedef 
enum tagADVF
    {
        ADVF_NODATA	= 1,
        ADVF_PRIMEFIRST	= 2,
        ADVF_ONLYONCE	= 4,
        ADVF_DATAONSTOP	= 64,
        ADVFCACHE_NOHANDLER	= 8,
        ADVFCACHE_FORCEBUILTIN	= 16,
        ADVFCACHE_ONSAVE	= 32
    } 	ADVF;

typedef struct tagSTATDATA
    {
    FORMATETC formatetc;
    DWORD advf;
     IAdviseSink *pAdvSink;
    DWORD dwConnection;
    } 	STATDATA;

typedef STATDATA *LPSTATDATA;


extern "C" const IID IID_IEnumSTATDATA;


    
    struct __declspec(uuid("00000105-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATDATA : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             
               STATDATA *rgelt,
             
               ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
              IEnumSTATDATA **ppenum) = 0;
        
    };
    
    











































































#line 10859 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall IEnumSTATDATA_RemoteNext_Proxy( 
     IEnumSTATDATA * This,
     ULONG celt,
      STATDATA *rgelt,
      ULONG *pceltFetched);


void __stdcall IEnumSTATDATA_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 10878 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 

typedef    IRootStorage *LPROOTSTORAGE;


extern "C" const IID IID_IRootStorage;


    
    struct __declspec(uuid("00000012-0000-0000-C000-000000000046")) __declspec(novtable)
    IRootStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SwitchToFile( 
              LPOLESTR pszFile) = 0;
        
    };
    
    



















































#line 10955 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 10960 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 

typedef IAdviseSink *LPADVISESINK;

typedef  
enum tagTYMED
    {
        TYMED_HGLOBAL	= 1,
        TYMED_FILE	= 2,
        TYMED_ISTREAM	= 4,
        TYMED_ISTORAGE	= 8,
        TYMED_GDI	= 16,
        TYMED_MFPICT	= 32,
        TYMED_ENHMF	= 64,
        TYMED_NULL	= 0
    } 	TYMED;



#pragma warning(push)
#line 10987 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma warning(disable:4200)
#line 10989 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
typedef struct tagRemSTGMEDIUM
    {
    DWORD tymed;
    DWORD dwHandleType;
    unsigned long pData;
    unsigned long pUnkForRelease;
    unsigned long cbData;
     byte data[ 1 ];
    } 	RemSTGMEDIUM;



#pragma warning(pop)


#line 11005 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#line 11006 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"















typedef struct tagSTGMEDIUM
    {
    DWORD tymed;
     union 
        {
         HBITMAP hBitmap;
         HMETAFILEPICT hMetaFilePict;
         HENHMETAFILE hEnhMetaFile;
         HGLOBAL hGlobal;
         LPOLESTR lpszFileName;
         IStream *pstm;
         IStorage *pstg;
           
        } 	;
     IUnknown *pUnkForRelease;
    } 	uSTGMEDIUM;

#line 11039 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
typedef struct _GDI_OBJECT
    {
    DWORD ObjectType;
      union __MIDL_IAdviseSink_0002
        {
         wireHBITMAP hBitmap;
         wireHPALETTE hPalette;
         wireHGLOBAL hGeneric;
        } 	u;
    } 	GDI_OBJECT;

typedef struct _userSTGMEDIUM
    {
    struct _STGMEDIUM_UNION
        {
        DWORD tymed;
          union __MIDL_IAdviseSink_0003
            {
               
             wireHMETAFILEPICT hMetaFilePict;
             wireHENHMETAFILE hHEnhMetaFile;
             GDI_OBJECT *hGdiHandle;
             wireHGLOBAL hGlobal;
             LPOLESTR lpszFileName;
             BYTE_BLOB *pstm;
             BYTE_BLOB *pstg;
            } 	u;
        } 	;
    IUnknown *pUnkForRelease;
    } 	userSTGMEDIUM;

typedef    userSTGMEDIUM *wireSTGMEDIUM;

typedef  uSTGMEDIUM STGMEDIUM;

typedef    userSTGMEDIUM *wireASYNC_STGMEDIUM;

typedef  STGMEDIUM ASYNC_STGMEDIUM;

typedef STGMEDIUM *LPSTGMEDIUM;

typedef struct _userFLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    userSTGMEDIUM Stgmed;
    } 	userFLAG_STGMEDIUM;

typedef    userFLAG_STGMEDIUM *wireFLAG_STGMEDIUM;

typedef  struct _FLAG_STGMEDIUM
    {
    long ContextFlags;
    long fPassOwnership;
    STGMEDIUM Stgmed;
    } 	FLAG_STGMEDIUM;


extern "C" const IID IID_IAdviseSink;


    
    struct __declspec(uuid("0000010f-0000-0000-C000-000000000046")) __declspec(novtable)
    IAdviseSink : public IUnknown
    {
    public:
        virtual  void __stdcall OnDataChange( 
             
               FORMATETC *pFormatetc,
             
               STGMEDIUM *pStgmed) = 0;
        
        virtual  void __stdcall OnViewChange( 
             DWORD dwAspect,
             LONG lindex) = 0;
        
        virtual  void __stdcall OnRename( 
             
               IMoniker *pmk) = 0;
        
        virtual  void __stdcall OnSave( void) = 0;
        
        virtual  void __stdcall OnClose( void) = 0;
        
    };
    
    


















































































#line 11209 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall IAdviseSink_RemoteOnDataChange_Proxy( 
     IAdviseSink * This,
      FORMATETC *pFormatetc,
      ASYNC_STGMEDIUM *pStgmed);


void __stdcall IAdviseSink_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnViewChange_Proxy( 
     IAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);


void __stdcall IAdviseSink_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnRename_Proxy( 
     IAdviseSink * This,
      IMoniker *pmk);


void __stdcall IAdviseSink_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnSave_Proxy( 
     IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IAdviseSink_RemoteOnClose_Proxy( 
     IAdviseSink * This);


void __stdcall IAdviseSink_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11274 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 


extern "C" const IID IID_AsyncIAdviseSink;


    
    struct __declspec(uuid("00000150-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIAdviseSink : public IUnknown
    {
    public:
        virtual  void __stdcall Begin_OnDataChange( 
             
               FORMATETC *pFormatetc,
             
               STGMEDIUM *pStgmed) = 0;
        
        virtual  void __stdcall Finish_OnDataChange( void) = 0;
        
        virtual  void __stdcall Begin_OnViewChange( 
             DWORD dwAspect,
             LONG lindex) = 0;
        
        virtual  void __stdcall Finish_OnViewChange( void) = 0;
        
        virtual  void __stdcall Begin_OnRename( 
             
               IMoniker *pmk) = 0;
        
        virtual  void __stdcall Finish_OnRename( void) = 0;
        
        virtual  void __stdcall Begin_OnSave( void) = 0;
        
        virtual  void __stdcall Finish_OnSave( void) = 0;
        
        virtual  void __stdcall Begin_OnClose( void) = 0;
        
        virtual  void __stdcall Finish_OnClose( void) = 0;
        
    };
    
    
















































































































#line 11435 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Proxy( 
     AsyncIAdviseSink * This,
      FORMATETC *pFormatetc,
      ASYNC_STGMEDIUM *pStgmed);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Proxy( 
     AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnDataChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Proxy( 
     AsyncIAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Proxy( 
     AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnViewChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Proxy( 
     AsyncIAdviseSink * This,
      IMoniker *pmk);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Proxy( 
     AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnRename_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Proxy( 
     AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Proxy( 
     AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnSave_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Proxy( 
     AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Begin_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Proxy( 
     AsyncIAdviseSink * This);


void __stdcall AsyncIAdviseSink_Finish_RemoteOnClose_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11555 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 11561 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0069_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0069_v0_0_s_ifspec;





 

typedef    IAdviseSink2 *LPADVISESINK2;


extern "C" const IID IID_IAdviseSink2;


    
    struct __declspec(uuid("00000125-0000-0000-C000-000000000046")) __declspec(novtable)
    IAdviseSink2 : public IAdviseSink
    {
    public:
        virtual  void __stdcall OnLinkSrcChange( 
             
               IMoniker *pmk) = 0;
        
    };
    
    



























































































#line 11685 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Proxy( 
     IAdviseSink2 * This,
      IMoniker *pmk);


void __stdcall IAdviseSink2_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11702 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 


extern "C" const IID IID_AsyncIAdviseSink2;


    
    struct __declspec(uuid("00000151-0000-0000-C000-000000000046")) __declspec(novtable)
    AsyncIAdviseSink2 : public AsyncIAdviseSink
    {
    public:
        virtual  void __stdcall Begin_OnLinkSrcChange( 
             
               IMoniker *pmk) = 0;
        
        virtual  void __stdcall Finish_OnLinkSrcChange( void) = 0;
        
    };
    
    































































































































#line 11856 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Proxy( 
     AsyncIAdviseSink2 * This,
      IMoniker *pmk);


void __stdcall AsyncIAdviseSink2_Begin_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Proxy( 
     AsyncIAdviseSink2 * This);


void __stdcall AsyncIAdviseSink2_Finish_RemoteOnLinkSrcChange_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 11884 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 11890 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0070_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0070_v0_0_s_ifspec;





 

typedef    IDataObject *LPDATAOBJECT;

typedef 
enum tagDATADIR
    {
        DATADIR_GET	= 1,
        DATADIR_SET	= 2
    } 	DATADIR;


extern "C" const IID IID_IDataObject;


    
    struct __declspec(uuid("0000010e-0000-0000-C000-000000000046")) __declspec(novtable)
    IDataObject : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetData( 
             
               FORMATETC *pformatetcIn,
             
               STGMEDIUM *pmedium) = 0;
        
        virtual  HRESULT __stdcall GetDataHere( 
             
               FORMATETC *pformatetc,
             
               STGMEDIUM *pmedium) = 0;
        
        virtual HRESULT __stdcall QueryGetData( 
              FORMATETC *pformatetc) = 0;
        
        virtual HRESULT __stdcall GetCanonicalFormatEtc( 
              FORMATETC *pformatectIn,
              FORMATETC *pformatetcOut) = 0;
        
        virtual  HRESULT __stdcall SetData( 
             
               FORMATETC *pformatetc,
             
               STGMEDIUM *pmedium,
             BOOL fRelease) = 0;
        
        virtual HRESULT __stdcall EnumFormatEtc( 
             DWORD dwDirection,
              IEnumFORMATETC **ppenumFormatEtc) = 0;
        
        virtual HRESULT __stdcall DAdvise( 
              FORMATETC *pformatetc,
             DWORD advf,
              IAdviseSink *pAdvSink,
              DWORD *pdwConnection) = 0;
        
        virtual HRESULT __stdcall DUnadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumDAdvise( 
              IEnumSTATDATA **ppenumAdvise) = 0;
        
    };
    
    


























































































































#line 12090 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall IDataObject_RemoteGetData_Proxy( 
     IDataObject * This,
      FORMATETC *pformatetcIn,
      STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDataObject_RemoteGetDataHere_Proxy( 
     IDataObject * This,
      FORMATETC *pformatetc,
      STGMEDIUM *pRemoteMedium);


void __stdcall IDataObject_RemoteGetDataHere_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IDataObject_RemoteSetData_Proxy( 
     IDataObject * This,
      FORMATETC *pformatetc,
      FLAG_STGMEDIUM *pmedium,
     BOOL fRelease);


void __stdcall IDataObject_RemoteSetData_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12135 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 12141 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0071_v0_0_s_ifspec;





 

typedef  IDataAdviseHolder *LPDATAADVISEHOLDER;


extern "C" const IID IID_IDataAdviseHolder;


    
    struct __declspec(uuid("00000110-0000-0000-C000-000000000046")) __declspec(novtable)
    IDataAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise( 
             
               IDataObject *pDataObject,
             
               FORMATETC *pFetc,
             
               DWORD advf,
             
               IAdviseSink *pAdvise,
             
               DWORD *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             
               DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumAdvise( 
             
              IEnumSTATDATA **ppenumAdvise) = 0;
        
        virtual HRESULT __stdcall SendOnDataChange( 
             
               IDataObject *pDataObject,
             
               DWORD dwReserved,
             
               DWORD advf) = 0;
        
    };
    
    
























































































#line 12286 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 12291 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 

typedef  IMessageFilter *LPMESSAGEFILTER;

typedef 
enum tagCALLTYPE
    {
        CALLTYPE_TOPLEVEL	= 1,
        CALLTYPE_NESTED	= 2,
        CALLTYPE_ASYNC	= 3,
        CALLTYPE_TOPLEVEL_CALLPENDING	= 4,
        CALLTYPE_ASYNC_CALLPENDING	= 5
    } 	CALLTYPE;

typedef 
enum tagSERVERCALL
    {
        SERVERCALL_ISHANDLED	= 0,
        SERVERCALL_REJECTED	= 1,
        SERVERCALL_RETRYLATER	= 2
    } 	SERVERCALL;

typedef 
enum tagPENDINGTYPE
    {
        PENDINGTYPE_TOPLEVEL	= 1,
        PENDINGTYPE_NESTED	= 2
    } 	PENDINGTYPE;

typedef 
enum tagPENDINGMSG
    {
        PENDINGMSG_CANCELCALL	= 0,
        PENDINGMSG_WAITNOPROCESS	= 1,
        PENDINGMSG_WAITDEFPROCESS	= 2
    } 	PENDINGMSG;

typedef struct tagINTERFACEINFO
    {
    IUnknown *pUnk;
    IID iid;
    WORD wMethod;
    } 	INTERFACEINFO;

typedef struct tagINTERFACEINFO *LPINTERFACEINFO;


extern "C" const IID IID_IMessageFilter;


    
    struct __declspec(uuid("00000016-0000-0000-C000-000000000046")) __declspec(novtable)
    IMessageFilter : public IUnknown
    {
    public:
        virtual DWORD __stdcall HandleInComingCall( 
             
               DWORD dwCallType,
             
               HTASK htaskCaller,
             
               DWORD dwTickCount,
             
               LPINTERFACEINFO lpInterfaceInfo) = 0;
        
        virtual DWORD __stdcall RetryRejectedCall( 
             
               HTASK htaskCallee,
             
               DWORD dwTickCount,
             
               DWORD dwRejectType) = 0;
        
        virtual DWORD __stdcall MessagePending( 
             
               HTASK htaskCallee,
             
               DWORD dwTickCount,
             
               DWORD dwPendingType) = 0;
        
    };
    
    


















































































#line 12464 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 12469 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 



extern const FMTID FMTID_SummaryInformation;

extern const FMTID FMTID_DocSummaryInformation;

extern const FMTID FMTID_UserDefinedProperties;

extern const FMTID FMTID_DiscardableInformation;

extern const FMTID FMTID_ImageSummaryInformation;

extern const FMTID FMTID_AudioSummaryInformation;

extern const FMTID FMTID_VideoSummaryInformation;

extern const FMTID FMTID_MediaFileSummaryInformation;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0073_v0_0_s_ifspec;





 


extern "C" const IID IID_IClassActivator;


    
    struct __declspec(uuid("00000140-0000-0000-C000-000000000046")) __declspec(novtable)
    IClassActivator : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassObject( 
              const IID & rclsid,
             DWORD dwClassContext,
             LCID locale,
              const IID & riid,
              void **ppv) = 0;
        
    };
    
    























































#line 12578 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 12583 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 12589 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0074_v0_0_s_ifspec;





 


extern "C" const IID IID_IFillLockBytes;


    
    struct __declspec(uuid("99caf010-415e-11cf-8814-00aa00b569f5")) __declspec(novtable)
    IFillLockBytes : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall FillAppend( 
             
               const void *pv,
             
               ULONG cb,
             
               ULONG *pcbWritten) = 0;
        
        virtual  HRESULT __stdcall FillAt( 
             
               ULARGE_INTEGER ulOffset,
             
               const void *pv,
             
               ULONG cb,
             
               ULONG *pcbWritten) = 0;
        
        virtual HRESULT __stdcall SetFillSize( 
             ULARGE_INTEGER ulSize) = 0;
        
        virtual HRESULT __stdcall Terminate( 
             BOOL bCanceled) = 0;
        
    };
    
    




















































































#line 12724 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 HRESULT __stdcall IFillLockBytes_RemoteFillAppend_Proxy( 
     IFillLockBytes * This,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAppend_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IFillLockBytes_RemoteFillAt_Proxy( 
     IFillLockBytes * This,
     ULARGE_INTEGER ulOffset,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);


void __stdcall IFillLockBytes_RemoteFillAt_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 12758 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 12764 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0075_v0_0_s_ifspec;





 


extern "C" const IID IID_IProgressNotify;


    
    struct __declspec(uuid("a9d758a0-4617-11cf-95fc-00aa00680db4")) __declspec(novtable)
    IProgressNotify : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnProgress( 
             DWORD dwProgressCurrent,
             DWORD dwProgressMaximum,
             BOOL fAccurate,
             BOOL fOwner) = 0;
        
    };
    
    






















































#line 12851 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 12856 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 12862 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0076_v0_0_s_ifspec;





 

typedef struct tagStorageLayout
    {
    DWORD LayoutType;
    OLECHAR *pwcsElementName;
    LARGE_INTEGER cOffset;
    LARGE_INTEGER cBytes;
    } 	StorageLayout;


extern "C" const IID IID_ILayoutStorage;


    
    struct __declspec(uuid("0e6d4d90-6738-11cf-9608-00aa00680db4")) __declspec(novtable)
    ILayoutStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall LayoutScript( 
             
               StorageLayout *pStorageLayout,
             
               DWORD nEntries,
             
               DWORD glfInterleavedFlag) = 0;
        
        virtual HRESULT __stdcall BeginMonitor( void) = 0;
        
        virtual HRESULT __stdcall EndMonitor( void) = 0;
        
        virtual HRESULT __stdcall ReLayoutDocfile( 
             
              OLECHAR *pwcsNewDfName) = 0;
        
        virtual HRESULT __stdcall ReLayoutDocfileOnILockBytes( 
             
               ILockBytes *pILockBytes) = 0;
        
    };
    
    




















































































#line 13001 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 13006 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 13012 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0077_v0_0_s_ifspec;





 


extern "C" const IID IID_IBlockingLock;


    
    struct __declspec(uuid("30f3d47a-6447-11d1-8e3c-00c04fb9386d")) __declspec(novtable)
    IBlockingLock : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Lock( 
             DWORD dwTimeout) = 0;
        
        virtual HRESULT __stdcall Unlock( void) = 0;
        
    };
    
    

























































#line 13101 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 13106 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 


extern "C" const IID IID_ITimeAndNoticeControl;


    
    struct __declspec(uuid("bc0bf6ae-8878-11d1-83e9-00c04fc2c6d4")) __declspec(novtable)
    ITimeAndNoticeControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SuppressChanges( 
             DWORD res1,
             DWORD res2) = 0;
        
    };
    
    




















































#line 13183 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 13188 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 


extern "C" const IID IID_IOplockStorage;


    
    struct __declspec(uuid("8d19c834-8879-11d1-83e9-00c04fc2c6d4")) __declspec(novtable)
    IOplockStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateStorageEx( 
              LPCWSTR pwcsName,
             DWORD grfMode,
             DWORD stgfmt,
             DWORD grfAttrs,
              const IID & riid,
              void **ppstgOpen) = 0;
        
        virtual HRESULT __stdcall OpenStorageEx( 
              LPCWSTR pwcsName,
             DWORD grfMode,
             DWORD stgfmt,
             DWORD grfAttrs,
              const IID & riid,
              void **ppstgOpen) = 0;
        
    };
    
    




































































#line 13293 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 13298 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 13304 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0080_v0_0_s_ifspec;





 


extern "C" const IID IID_IDirectWriterLock;


    
    struct __declspec(uuid("0e6d4d92-6738-11cf-9608-00aa00680db4")) __declspec(novtable)
    IDirectWriterLock : public IUnknown
    {
    public:
        virtual HRESULT __stdcall WaitForWriteAccess( 
             DWORD dwTimeout) = 0;
        
        virtual HRESULT __stdcall ReleaseWriteAccess( void) = 0;
        
        virtual HRESULT __stdcall HaveWriteAccess( void) = 0;
        
    };
    
    































































#line 13401 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 13406 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 13412 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0081_v0_0_s_ifspec;





 


extern "C" const IID IID_IUrlMon;


    
    struct __declspec(uuid("00000026-0000-0000-C000-000000000046")) __declspec(novtable)
    IUrlMon : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AsyncGetClassBits( 
              const IID & rclsid,
              LPCWSTR pszTYPE,
              LPCWSTR pszExt,
             DWORD dwFileVersionMS,
             DWORD dwFileVersionLS,
              LPCWSTR pszCodeBase,
              IBindCtx *pbc,
             DWORD dwClassContext,
              const IID & riid,
             DWORD flags) = 0;
        
    };
    
    




























































#line 13511 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 13516 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 


extern "C" const IID IID_IForegroundTransfer;


    
    struct __declspec(uuid("00000145-0000-0000-C000-000000000046")) __declspec(novtable)
    IForegroundTransfer : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AllowForegroundTransfer( 
             
               void *lpvReserved) = 0;
        
    };
    
    




















































#line 13593 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 13598 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 


extern "C" const IID IID_IThumbnailExtractor;


    
    struct __declspec(uuid("969dc708-5c76-11d1-8d86-0000f804b057")) __declspec(novtable)
    IThumbnailExtractor : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ExtractThumbnail( 
              IStorage *pStg,
             ULONG ulLength,
             ULONG ulHeight,
              ULONG *pulOutputLength,
              ULONG *pulOutputHeight,
              HBITMAP *phOutputBitmap) = 0;
        
        virtual HRESULT __stdcall OnFileUpdated( 
              IStorage *pStg) = 0;
        
    };
    
    































































#line 13693 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 13698 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 


extern "C" const IID IID_IDummyHICONIncluder;


    
    struct __declspec(uuid("947990de-cc28-11d2-a0f7-00805f858fb1")) __declspec(novtable)
    IDummyHICONIncluder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Dummy( 
              HICON h1,
              HDC h2) = 0;
        
    };
    
    




















































#line 13775 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 13780 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

typedef 
enum tagApplicationType
    {
        ServerApplication	= 0,
        LibraryApplication	= ( ServerApplication + 1 ) 
    } 	ApplicationType;

typedef 
enum tagShutdownType
    {
        IdleShutdown	= 0,
        ForcedShutdown	= ( IdleShutdown + 1 ) 
    } 	ShutdownType;



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0085_v0_0_s_ifspec;





 


extern "C" const IID IID_IProcessLock;


    
    struct __declspec(uuid("000001d5-0000-0000-C000-000000000046")) __declspec(novtable)
    IProcessLock : public IUnknown
    {
    public:
        virtual ULONG __stdcall AddRefOnProcess( void) = 0;
        
        virtual ULONG __stdcall ReleaseRefOnProcess( void) = 0;
        
    };
    
    
























































#line 13883 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 13888 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"






 


extern "C" const IID IID_ISurrogateService;


    
    struct __declspec(uuid("000001d4-0000-0000-C000-000000000046")) __declspec(novtable)
    ISurrogateService : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Init( 
             
               const GUID & rguidProcessID,
             
               IProcessLock *pProcessLock,
             
               BOOL *pfApplicationAware) = 0;
        
        virtual HRESULT __stdcall ApplicationLaunch( 
             
               const GUID & rguidApplID,
             
               ApplicationType appType) = 0;
        
        virtual HRESULT __stdcall ApplicationFree( 
             
               const GUID & rguidApplID) = 0;
        
        virtual HRESULT __stdcall CatalogRefresh( 
             
               ULONG ulReserved) = 0;
        
        virtual HRESULT __stdcall ProcessShutdown( 
             
               ShutdownType shutdownType) = 0;
        
    };
    
    


























































































#line 14025 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 14030 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 




extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0087_v0_0_s_ifspec;





 

typedef  IInitializeSpy *LPINITIALIZESPY;


extern "C" const IID IID_IInitializeSpy;


    
    struct __declspec(uuid("00000034-0000-0000-C000-000000000046")) __declspec(novtable)
    IInitializeSpy : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PreInitialize( 
             
               DWORD dwCoInit,
             
               DWORD dwCurThreadAptRefs) = 0;
        
        virtual HRESULT __stdcall PostInitialize( 
             
               HRESULT hrCoInit,
             
               DWORD dwCoInit,
             
               DWORD dwNewThreadAptRefs) = 0;
        
        virtual HRESULT __stdcall PreUninitialize( 
             
               DWORD dwCurThreadAptRefs) = 0;
        
        virtual HRESULT __stdcall PostUninitialize( 
             
               DWORD dwNewThreadAptRefs) = 0;
        
    };
    
    


















































































#line 14166 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 14171 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 14177 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#line 14178 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0088_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0088_v0_0_s_ifspec;





 


extern "C" const IID IID_IApartmentShutdown;


    
    struct __declspec(uuid("A2F05A09-27A2-42B5-BC0E-AC163EF49D9B")) __declspec(novtable)
    IApartmentShutdown : public IUnknown
    {
    public:
        virtual void __stdcall OnUninitialize( 
             
               UINT64 ui64ApartmentIdentifier) = 0;
        
    };
    
    




















































#line 14261 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"




#line 14266 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



 

#line 14272 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#pragma endregion


#pragma warning(pop)


#line 14279 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"
#line 14280 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"


extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_objidl_0000_0089_v0_0_s_ifspec;



unsigned long             __stdcall  ASYNC_STGMEDIUM_UserSize(      unsigned long *, unsigned long            ,  ASYNC_STGMEDIUM * ); 
unsigned char * __stdcall  ASYNC_STGMEDIUM_UserMarshal(   unsigned long *,  unsigned char *,  ASYNC_STGMEDIUM * ); 
unsigned char * __stdcall  ASYNC_STGMEDIUM_UserUnmarshal( unsigned long *,  unsigned char *,  ASYNC_STGMEDIUM * ); 
void                      __stdcall  ASYNC_STGMEDIUM_UserFree(      unsigned long *,  ASYNC_STGMEDIUM * ); 

unsigned long             __stdcall  CLIPFORMAT_UserSize(      unsigned long *, unsigned long            ,  CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserMarshal(   unsigned long *,  unsigned char *,  CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserUnmarshal( unsigned long *,  unsigned char *,  CLIPFORMAT * ); 
void                      __stdcall  CLIPFORMAT_UserFree(      unsigned long *,  CLIPFORMAT * ); 

unsigned long             __stdcall  FLAG_STGMEDIUM_UserSize(      unsigned long *, unsigned long            ,  FLAG_STGMEDIUM * ); 
unsigned char * __stdcall  FLAG_STGMEDIUM_UserMarshal(   unsigned long *,  unsigned char *,  FLAG_STGMEDIUM * ); 
unsigned char * __stdcall  FLAG_STGMEDIUM_UserUnmarshal( unsigned long *,  unsigned char *,  FLAG_STGMEDIUM * ); 
void                      __stdcall  FLAG_STGMEDIUM_UserFree(      unsigned long *,  FLAG_STGMEDIUM * ); 

unsigned long             __stdcall  HBITMAP_UserSize(      unsigned long *, unsigned long            ,  HBITMAP * ); 
unsigned char * __stdcall  HBITMAP_UserMarshal(   unsigned long *,  unsigned char *,  HBITMAP * ); 
unsigned char * __stdcall  HBITMAP_UserUnmarshal( unsigned long *,  unsigned char *,  HBITMAP * ); 
void                      __stdcall  HBITMAP_UserFree(      unsigned long *,  HBITMAP * ); 

unsigned long             __stdcall  HDC_UserSize(      unsigned long *, unsigned long            ,  HDC * ); 
unsigned char * __stdcall  HDC_UserMarshal(   unsigned long *,  unsigned char *,  HDC * ); 
unsigned char * __stdcall  HDC_UserUnmarshal( unsigned long *,  unsigned char *,  HDC * ); 
void                      __stdcall  HDC_UserFree(      unsigned long *,  HDC * ); 

unsigned long             __stdcall  HICON_UserSize(      unsigned long *, unsigned long            ,  HICON * ); 
unsigned char * __stdcall  HICON_UserMarshal(   unsigned long *,  unsigned char *,  HICON * ); 
unsigned char * __stdcall  HICON_UserUnmarshal( unsigned long *,  unsigned char *,  HICON * ); 
void                      __stdcall  HICON_UserFree(      unsigned long *,  HICON * ); 

unsigned long             __stdcall  SNB_UserSize(      unsigned long *, unsigned long            ,  SNB * ); 
unsigned char * __stdcall  SNB_UserMarshal(   unsigned long *,  unsigned char *,  SNB * ); 
unsigned char * __stdcall  SNB_UserUnmarshal( unsigned long *,  unsigned char *,  SNB * ); 
void                      __stdcall  SNB_UserFree(      unsigned long *,  SNB * ); 

unsigned long             __stdcall  STGMEDIUM_UserSize(      unsigned long *, unsigned long            ,  STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserMarshal(   unsigned long *,  unsigned char *,  STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserUnmarshal( unsigned long *,  unsigned char *,  STGMEDIUM * ); 
void                      __stdcall  STGMEDIUM_UserFree(      unsigned long *,  STGMEDIUM * ); 

unsigned long             __stdcall  ASYNC_STGMEDIUM_UserSize64(      unsigned long *, unsigned long            ,  ASYNC_STGMEDIUM * ); 
unsigned char * __stdcall  ASYNC_STGMEDIUM_UserMarshal64(   unsigned long *,  unsigned char *,  ASYNC_STGMEDIUM * ); 
unsigned char * __stdcall  ASYNC_STGMEDIUM_UserUnmarshal64( unsigned long *,  unsigned char *,  ASYNC_STGMEDIUM * ); 
void                      __stdcall  ASYNC_STGMEDIUM_UserFree64(      unsigned long *,  ASYNC_STGMEDIUM * ); 

unsigned long             __stdcall  CLIPFORMAT_UserSize64(      unsigned long *, unsigned long            ,  CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserMarshal64(   unsigned long *,  unsigned char *,  CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserUnmarshal64( unsigned long *,  unsigned char *,  CLIPFORMAT * ); 
void                      __stdcall  CLIPFORMAT_UserFree64(      unsigned long *,  CLIPFORMAT * ); 

unsigned long             __stdcall  FLAG_STGMEDIUM_UserSize64(      unsigned long *, unsigned long            ,  FLAG_STGMEDIUM * ); 
unsigned char * __stdcall  FLAG_STGMEDIUM_UserMarshal64(   unsigned long *,  unsigned char *,  FLAG_STGMEDIUM * ); 
unsigned char * __stdcall  FLAG_STGMEDIUM_UserUnmarshal64( unsigned long *,  unsigned char *,  FLAG_STGMEDIUM * ); 
void                      __stdcall  FLAG_STGMEDIUM_UserFree64(      unsigned long *,  FLAG_STGMEDIUM * ); 

unsigned long             __stdcall  HBITMAP_UserSize64(      unsigned long *, unsigned long            ,  HBITMAP * ); 
unsigned char * __stdcall  HBITMAP_UserMarshal64(   unsigned long *,  unsigned char *,  HBITMAP * ); 
unsigned char * __stdcall  HBITMAP_UserUnmarshal64( unsigned long *,  unsigned char *,  HBITMAP * ); 
void                      __stdcall  HBITMAP_UserFree64(      unsigned long *,  HBITMAP * ); 

unsigned long             __stdcall  HDC_UserSize64(      unsigned long *, unsigned long            ,  HDC * ); 
unsigned char * __stdcall  HDC_UserMarshal64(   unsigned long *,  unsigned char *,  HDC * ); 
unsigned char * __stdcall  HDC_UserUnmarshal64( unsigned long *,  unsigned char *,  HDC * ); 
void                      __stdcall  HDC_UserFree64(      unsigned long *,  HDC * ); 

unsigned long             __stdcall  HICON_UserSize64(      unsigned long *, unsigned long            ,  HICON * ); 
unsigned char * __stdcall  HICON_UserMarshal64(   unsigned long *,  unsigned char *,  HICON * ); 
unsigned char * __stdcall  HICON_UserUnmarshal64( unsigned long *,  unsigned char *,  HICON * ); 
void                      __stdcall  HICON_UserFree64(      unsigned long *,  HICON * ); 

unsigned long             __stdcall  SNB_UserSize64(      unsigned long *, unsigned long            ,  SNB * ); 
unsigned char * __stdcall  SNB_UserMarshal64(   unsigned long *,  unsigned char *,  SNB * ); 
unsigned char * __stdcall  SNB_UserUnmarshal64( unsigned long *,  unsigned char *,  SNB * ); 
void                      __stdcall  SNB_UserFree64(      unsigned long *,  SNB * ); 

unsigned long             __stdcall  STGMEDIUM_UserSize64(      unsigned long *, unsigned long            ,  STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserMarshal64(   unsigned long *,  unsigned char *,  STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserUnmarshal64( unsigned long *,  unsigned char *,  STGMEDIUM * ); 
void                      __stdcall  STGMEDIUM_UserFree64(      unsigned long *,  STGMEDIUM * ); 

 HRESULT __stdcall IEnumUnknown_Next_Proxy( 
    IEnumUnknown * This,
     
       ULONG celt,
     
       IUnknown **rgelt,
     
       ULONG *pceltFetched);


 HRESULT __stdcall IEnumUnknown_Next_Stub( 
     IEnumUnknown * This,
     ULONG celt,
      IUnknown **rgelt,
      ULONG *pceltFetched);

 HRESULT __stdcall IEnumString_Next_Proxy( 
    IEnumString * This,
     ULONG celt,
     
       LPOLESTR *rgelt,
     
       ULONG *pceltFetched);


 HRESULT __stdcall IEnumString_Next_Stub( 
     IEnumString * This,
     ULONG celt,
      LPOLESTR *rgelt,
      ULONG *pceltFetched);

 HRESULT __stdcall ISequentialStream_Read_Proxy( 
    ISequentialStream * This,
     
       void *pv,
     
       ULONG cb,
     
       ULONG *pcbRead);


 HRESULT __stdcall ISequentialStream_Read_Stub( 
     ISequentialStream * This,
      byte *pv,
     ULONG cb,
      ULONG *pcbRead);

 HRESULT __stdcall ISequentialStream_Write_Proxy( 
    ISequentialStream * This,
     
       const void *pv,
     
       ULONG cb,
     
       ULONG *pcbWritten);


 HRESULT __stdcall ISequentialStream_Write_Stub( 
     ISequentialStream * This,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);

 HRESULT __stdcall IStream_Seek_Proxy( 
    IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
     
       ULARGE_INTEGER *plibNewPosition);


 HRESULT __stdcall IStream_Seek_Stub( 
     IStream * This,
     LARGE_INTEGER dlibMove,
     DWORD dwOrigin,
      ULARGE_INTEGER *plibNewPosition);

 HRESULT __stdcall IStream_CopyTo_Proxy( 
    IStream * This,
     
       IStream *pstm,
     ULARGE_INTEGER cb,
     
       ULARGE_INTEGER *pcbRead,
     
       ULARGE_INTEGER *pcbWritten);


 HRESULT __stdcall IStream_CopyTo_Stub( 
     IStream * This,
      IStream *pstm,
     ULARGE_INTEGER cb,
      ULARGE_INTEGER *pcbRead,
      ULARGE_INTEGER *pcbWritten);

 HRESULT __stdcall IBindCtx_SetBindOptions_Proxy( 
    IBindCtx * This,
     
       BIND_OPTS *pbindopts);


 HRESULT __stdcall IBindCtx_SetBindOptions_Stub( 
     IBindCtx * This,
      BIND_OPTS2 *pbindopts);

 HRESULT __stdcall IBindCtx_GetBindOptions_Proxy( 
    IBindCtx * This,
     
       BIND_OPTS *pbindopts);


 HRESULT __stdcall IBindCtx_GetBindOptions_Stub( 
     IBindCtx * This,
      BIND_OPTS2 *pbindopts);

 HRESULT __stdcall IEnumMoniker_Next_Proxy( 
    IEnumMoniker * This,
     ULONG celt,
     
       IMoniker **rgelt,
     
       ULONG *pceltFetched);


 HRESULT __stdcall IEnumMoniker_Next_Stub( 
     IEnumMoniker * This,
     ULONG celt,
      IMoniker **rgelt,
      ULONG *pceltFetched);

 BOOL __stdcall IRunnableObject_IsRunning_Proxy( 
    IRunnableObject * This);


 HRESULT __stdcall IRunnableObject_IsRunning_Stub( 
     IRunnableObject * This);

 HRESULT __stdcall IMoniker_BindToObject_Proxy( 
    IMoniker * This,
     
       IBindCtx *pbc,
     
       IMoniker *pmkToLeft,
     
       const IID & riidResult,
     
      void **ppvResult);


 HRESULT __stdcall IMoniker_BindToObject_Stub( 
     IMoniker * This,
      IBindCtx *pbc,
      IMoniker *pmkToLeft,
      const IID & riidResult,
      IUnknown **ppvResult);

 HRESULT __stdcall IMoniker_BindToStorage_Proxy( 
    IMoniker * This,
     
       IBindCtx *pbc,
     
       IMoniker *pmkToLeft,
     
       const IID & riid,
     
      void **ppvObj);


 HRESULT __stdcall IMoniker_BindToStorage_Stub( 
     IMoniker * This,
      IBindCtx *pbc,
      IMoniker *pmkToLeft,
      const IID & riid,
      IUnknown **ppvObj);

 HRESULT __stdcall IEnumSTATSTG_Next_Proxy( 
    IEnumSTATSTG * This,
     ULONG celt,
     
       STATSTG *rgelt,
     
       ULONG *pceltFetched);


 HRESULT __stdcall IEnumSTATSTG_Next_Stub( 
     IEnumSTATSTG * This,
     ULONG celt,
      STATSTG *rgelt,
      ULONG *pceltFetched);

 HRESULT __stdcall IStorage_OpenStream_Proxy( 
    IStorage * This,
     
       const OLECHAR *pwcsName,
     
       void *reserved1,
     DWORD grfMode,
     DWORD reserved2,
     
      IStream **ppstm);


 HRESULT __stdcall IStorage_OpenStream_Stub( 
     IStorage * This,
      const OLECHAR *pwcsName,
     unsigned long cbReserved1,
      byte *reserved1,
     DWORD grfMode,
     DWORD reserved2,
      IStream **ppstm);

 HRESULT __stdcall IStorage_CopyTo_Proxy( 
    IStorage * This,
     DWORD ciidExclude,
     
       const IID *rgiidExclude,
     
       SNB snbExclude,
     
       IStorage *pstgDest);


 HRESULT __stdcall IStorage_CopyTo_Stub( 
     IStorage * This,
     DWORD ciidExclude,
      const IID *rgiidExclude,
      SNB snbExclude,
      IStorage *pstgDest);

 HRESULT __stdcall IStorage_EnumElements_Proxy( 
    IStorage * This,
     
       DWORD reserved1,
     
       void *reserved2,
     
       DWORD reserved3,
     
      IEnumSTATSTG **ppenum);


 HRESULT __stdcall IStorage_EnumElements_Stub( 
     IStorage * This,
     DWORD reserved1,
     unsigned long cbReserved2,
      byte *reserved2,
     DWORD reserved3,
      IEnumSTATSTG **ppenum);

 HRESULT __stdcall ILockBytes_ReadAt_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     
       void *pv,
     ULONG cb,
     
       ULONG *pcbRead);


 HRESULT __stdcall ILockBytes_ReadAt_Stub( 
     ILockBytes * This,
     ULARGE_INTEGER ulOffset,
      byte *pv,
     ULONG cb,
      ULONG *pcbRead);

 HRESULT __stdcall ILockBytes_WriteAt_Proxy( 
    ILockBytes * This,
     ULARGE_INTEGER ulOffset,
     
       const void *pv,
     ULONG cb,
     
       ULONG *pcbWritten);


 HRESULT __stdcall ILockBytes_WriteAt_Stub( 
     ILockBytes * This,
     ULARGE_INTEGER ulOffset,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);

 HRESULT __stdcall IEnumFORMATETC_Next_Proxy( 
    IEnumFORMATETC * This,
     ULONG celt,
     
       FORMATETC *rgelt,
     
       ULONG *pceltFetched);


 HRESULT __stdcall IEnumFORMATETC_Next_Stub( 
     IEnumFORMATETC * This,
     ULONG celt,
      FORMATETC *rgelt,
      ULONG *pceltFetched);

 HRESULT __stdcall IEnumSTATDATA_Next_Proxy( 
    IEnumSTATDATA * This,
     ULONG celt,
     
       STATDATA *rgelt,
     
       ULONG *pceltFetched);


 HRESULT __stdcall IEnumSTATDATA_Next_Stub( 
     IEnumSTATDATA * This,
     ULONG celt,
      STATDATA *rgelt,
      ULONG *pceltFetched);

 void __stdcall IAdviseSink_OnDataChange_Proxy( 
    IAdviseSink * This,
     
       FORMATETC *pFormatetc,
     
       STGMEDIUM *pStgmed);


 HRESULT __stdcall IAdviseSink_OnDataChange_Stub( 
     IAdviseSink * This,
      FORMATETC *pFormatetc,
      ASYNC_STGMEDIUM *pStgmed);

 void __stdcall IAdviseSink_OnViewChange_Proxy( 
    IAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);


 HRESULT __stdcall IAdviseSink_OnViewChange_Stub( 
     IAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);

 void __stdcall IAdviseSink_OnRename_Proxy( 
    IAdviseSink * This,
     
       IMoniker *pmk);


 HRESULT __stdcall IAdviseSink_OnRename_Stub( 
     IAdviseSink * This,
      IMoniker *pmk);

 void __stdcall IAdviseSink_OnSave_Proxy( 
    IAdviseSink * This);


 HRESULT __stdcall IAdviseSink_OnSave_Stub( 
     IAdviseSink * This);

 void __stdcall IAdviseSink_OnClose_Proxy( 
    IAdviseSink * This);


 HRESULT __stdcall IAdviseSink_OnClose_Stub( 
     IAdviseSink * This);

 void __stdcall IAdviseSink2_OnLinkSrcChange_Proxy( 
    IAdviseSink2 * This,
     
       IMoniker *pmk);


 HRESULT __stdcall IAdviseSink2_OnLinkSrcChange_Stub( 
     IAdviseSink2 * This,
      IMoniker *pmk);

 HRESULT __stdcall IDataObject_GetData_Proxy( 
    IDataObject * This,
     
       FORMATETC *pformatetcIn,
     
       STGMEDIUM *pmedium);


 HRESULT __stdcall IDataObject_GetData_Stub( 
     IDataObject * This,
      FORMATETC *pformatetcIn,
      STGMEDIUM *pRemoteMedium);

 HRESULT __stdcall IDataObject_GetDataHere_Proxy( 
    IDataObject * This,
     
       FORMATETC *pformatetc,
     
       STGMEDIUM *pmedium);


 HRESULT __stdcall IDataObject_GetDataHere_Stub( 
     IDataObject * This,
      FORMATETC *pformatetc,
      STGMEDIUM *pRemoteMedium);

 HRESULT __stdcall IDataObject_SetData_Proxy( 
    IDataObject * This,
     
       FORMATETC *pformatetc,
     
       STGMEDIUM *pmedium,
     BOOL fRelease);


 HRESULT __stdcall IDataObject_SetData_Stub( 
     IDataObject * This,
      FORMATETC *pformatetc,
      FLAG_STGMEDIUM *pmedium,
     BOOL fRelease);

 HRESULT __stdcall IFillLockBytes_FillAppend_Proxy( 
    IFillLockBytes * This,
     
       const void *pv,
     
       ULONG cb,
     
       ULONG *pcbWritten);


 HRESULT __stdcall IFillLockBytes_FillAppend_Stub( 
     IFillLockBytes * This,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);

 HRESULT __stdcall IFillLockBytes_FillAt_Proxy( 
    IFillLockBytes * This,
     
       ULARGE_INTEGER ulOffset,
     
       const void *pv,
     
       ULONG cb,
     
       ULONG *pcbWritten);


 HRESULT __stdcall IFillLockBytes_FillAt_Stub( 
     IFillLockBytes * This,
     ULARGE_INTEGER ulOffset,
      const byte *pv,
     ULONG cb,
      ULONG *pcbWritten);

 void __stdcall AsyncIAdviseSink_Begin_OnDataChange_Proxy( 
    AsyncIAdviseSink * This,
     
       FORMATETC *pFormatetc,
     
       STGMEDIUM *pStgmed);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnDataChange_Stub( 
     AsyncIAdviseSink * This,
      FORMATETC *pFormatetc,
      ASYNC_STGMEDIUM *pStgmed);

 void __stdcall AsyncIAdviseSink_Finish_OnDataChange_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnDataChange_Stub( 
     AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Begin_OnViewChange_Proxy( 
    AsyncIAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnViewChange_Stub( 
     AsyncIAdviseSink * This,
     DWORD dwAspect,
     LONG lindex);

 void __stdcall AsyncIAdviseSink_Finish_OnViewChange_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnViewChange_Stub( 
     AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Begin_OnRename_Proxy( 
    AsyncIAdviseSink * This,
     
       IMoniker *pmk);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnRename_Stub( 
     AsyncIAdviseSink * This,
      IMoniker *pmk);

 void __stdcall AsyncIAdviseSink_Finish_OnRename_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnRename_Stub( 
     AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Begin_OnSave_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnSave_Stub( 
     AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Finish_OnSave_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnSave_Stub( 
     AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Begin_OnClose_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Begin_OnClose_Stub( 
     AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink_Finish_OnClose_Proxy( 
    AsyncIAdviseSink * This);


 HRESULT __stdcall AsyncIAdviseSink_Finish_OnClose_Stub( 
     AsyncIAdviseSink * This);

 void __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Proxy( 
    AsyncIAdviseSink2 * This,
     
       IMoniker *pmk);


 HRESULT __stdcall AsyncIAdviseSink2_Begin_OnLinkSrcChange_Stub( 
     AsyncIAdviseSink2 * This,
      IMoniker *pmk);

 void __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Proxy( 
    AsyncIAdviseSink2 * This);


 HRESULT __stdcall AsyncIAdviseSink2_Finish_OnLinkSrcChange_Stub( 
     AsyncIAdviseSink2 * This);






}
#line 14921 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"

#line 14923 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objidl.h"



#line 154 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"











#pragma region Desktop Family




extern "C" __declspec(dllimport) DWORD __stdcall CoBuildVersion( void );



  extern "C" __declspec(dllimport) HRESULT __stdcall  CoInitialize(  LPVOID pvReserved);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRegisterMallocSpy(  LPMALLOCSPY pMallocSpy);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoRevokeMallocSpy(void);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoCreateStandardMalloc(  DWORD memctx,  IMalloc * * ppMalloc);




  extern "C" __declspec(dllimport) HRESULT __stdcall  CoRegisterInitializeSpy(  LPINITIALIZESPY pSpy,   ULARGE_INTEGER *puliCookie);
  extern "C" __declspec(dllimport) HRESULT __stdcall  CoRevokeInitializeSpy(  ULARGE_INTEGER uliCookie);



typedef enum tagCOMSD
{
    SD_LAUNCHPERMISSIONS = 0,       
    SD_ACCESSPERMISSIONS = 1,       
    SD_LAUNCHRESTRICTIONS = 2,      
    SD_ACCESSRESTRICTIONS = 3       

} COMSD;
  extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetSystemSecurityPermissions(COMSD comSDType, PSECURITY_DESCRIPTOR *ppSD);

#line 198 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"



extern "C" __declspec(dllimport) HINSTANCE __stdcall CoLoadLibrary(  LPOLESTR lpszLibName,   BOOL bAutoFree);
extern "C" __declspec(dllimport) void __stdcall CoFreeLibrary(  HINSTANCE hInst);
extern "C" __declspec(dllimport) void __stdcall CoFreeAllLibraries(void);





  extern "C" __declspec(dllimport) HRESULT __stdcall CoGetInstanceFromFile(
      COSERVERINFO *            pServerInfo,
      CLSID        *            pClsid,
      IUnknown     *            punkOuter, 
      DWORD                         dwClsCtx,
      DWORD                         grfMode,
        OLECHAR *    pwszName,
      DWORD                         dwCount,
      MULTI_QI * pResults );


  extern "C" __declspec(dllimport) HRESULT __stdcall CoGetInstanceFromIStorage(
      COSERVERINFO *            pServerInfo,
      CLSID        *            pClsid,
      IUnknown     *            punkOuter, 
      DWORD                         dwClsCtx,
      struct IStorage  *            pstg,
      DWORD                         dwCount,
      MULTI_QI * pResults );

#line 230 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"





extern "C" __declspec(dllimport) HRESULT __stdcall CoAllowSetForegroundWindow(  IUnknown *pUnk,   LPVOID lpvReserved);


extern "C" __declspec(dllimport) HRESULT __stdcall DcomChannelSetHResult(  LPVOID pvReserved,   ULONG* pulReserved,   HRESULT appsHR);

#line 241 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"


extern "C" __declspec(dllimport) BOOL __stdcall CoIsOle1Class(  const IID & rclsid);
  extern "C" __declspec(dllimport) HRESULT __stdcall CLSIDFromProgIDEx (  LPCOLESTR lpszProgID,   LPCLSID lpclsid);

extern "C" __declspec(dllimport) BOOL __stdcall CoFileTimeToDosDateTime(
                   FILETIME * lpFileTime,   LPWORD lpDosDate,   LPWORD lpDosTime);
extern "C" __declspec(dllimport) BOOL __stdcall CoDosDateTimeToFileTime(
                         WORD nDosDate,   WORD nDosTime,   FILETIME * lpFileTime);
extern "C" __declspec(dllimport) HRESULT __stdcall  CoFileTimeNow(   FILETIME * lpFileTime );

  extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterMessageFilter(   LPMESSAGEFILTER lpMessageFilter,
                                 LPMESSAGEFILTER * lplpMessageFilter );



extern "C" __declspec(dllimport) HRESULT __stdcall CoRegisterChannelHook(   const GUID & ExtensionUuid,   IChannelHook *pChannelHook );
#line 259 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"




  extern "C" __declspec(dllimport) HRESULT __stdcall CoTreatAsClass(  const IID & clsidOld,   const IID & clsidNew);




extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataCache(  LPUNKNOWN pUnkOuter,   const IID & rclsid,
                            const IID & iid,   LPVOID * ppv);





#line 278 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
#pragma endregion

#pragma region Application Family


  extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateDocfile(    const WCHAR* pwcsName,
              DWORD grfMode,
              DWORD reserved,
             IStorage** ppstgOpen);

  extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateDocfileOnILockBytes(  ILockBytes* plkbyt,
                      DWORD grfMode,
                      DWORD reserved,
                     IStorage** ppstgOpen);

  extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorage(    const WCHAR* pwcsName,
                IStorage* pstgPriority,
                DWORD grfMode,
                SNB snbExclude,
                DWORD reserved,
               IStorage** ppstgOpen);
  extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorageOnILockBytes(  ILockBytes* plkbyt,
                    IStorage* pstgPriority,
                    DWORD grfMode,
                    SNB snbExclude,
                    DWORD reserved,
                   IStorage** ppstgOpen);

  extern "C" __declspec(dllimport) HRESULT __stdcall StgIsStorageFile(    const WCHAR* pwcsName);
  extern "C" __declspec(dllimport) HRESULT __stdcall StgIsStorageILockBytes(  ILockBytes* plkbyt);

  extern "C" __declspec(dllimport) HRESULT __stdcall StgSetTimes(    const WCHAR* lpszName,
                     const FILETIME* pctime,
                     const FILETIME* patime,
                     const FILETIME* pmtime);

  extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenAsyncDocfileOnIFillLockBytes(   IFillLockBytes *pflb,
               DWORD grfMode,
               DWORD asyncFlags,
              IStorage** ppstgOpen);

  extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnILockBytes(   ILockBytes *pilb,
              IFillLockBytes** ppflb);

  extern "C" __declspec(dllimport) HRESULT __stdcall StgGetIFillLockBytesOnFile(    OLECHAR const *pwcsName,
              IFillLockBytes** ppflb);

#line 326 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
#pragma endregion

#pragma region Desktop Family



  extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenLayoutDocfile(    OLECHAR const *pwcsDfName,
               DWORD grfMode,
               DWORD reserved,
              IStorage** ppstgOpen);

#line 338 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
#pragma endregion




#line 344 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"



#line 348 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"

typedef struct tagSTGOPTIONS
{
    USHORT usVersion;            
    USHORT reserved;             
    ULONG ulSectorSize;          

    const WCHAR *pwcsTemplateFile;  
#line 357 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
} STGOPTIONS;


#pragma region Application Family


  extern "C" __declspec(dllimport) HRESULT __stdcall StgCreateStorageEx (    const WCHAR* pwcsName,
              DWORD grfMode,
              DWORD stgfmt,              
              DWORD grfAttrs,
              STGOPTIONS* pStgOptions,
              PSECURITY_DESCRIPTOR pSecurityDescriptor,
              const IID & riid,
             void** ppObjectOpen);

  extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenStorageEx (    const WCHAR* pwcsName,
              DWORD grfMode,
              DWORD stgfmt,              
              DWORD grfAttrs,
              STGOPTIONS* pStgOptions,
              PSECURITY_DESCRIPTOR pSecurityDescriptor,
              const IID & riid,
             void** ppObjectOpen);






  extern "C" __declspec(dllimport) HRESULT __stdcall  BindMoniker(  LPMONIKER pmk,   DWORD grfOpt,   const IID & iidResult,  LPVOID * ppvResult);

#line 389 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
#pragma endregion

#pragma region Desktop Family


extern "C" __declspec(dllimport) HRESULT __stdcall  CoInstall(
      IBindCtx     * pbc,
      DWORD          dwFlags,
      uCLSSPEC     * pClassSpec,
      QUERYCONTEXT * pQuery,
      LPWSTR         pszCodeBase);

#line 402 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
#pragma endregion

#pragma region Application Family


  extern "C" __declspec(dllimport) HRESULT __stdcall  CoGetObject(  LPCWSTR pszName,   BIND_OPTS *pBindOptions,   const IID & riid,  void **ppv);
  extern "C" __declspec(dllimport) HRESULT __stdcall  MkParseDisplayName(  LPBC pbc,   LPCOLESTR szUserName,
                  ULONG  * pchEaten,  LPMONIKER  * ppmk);
  extern "C" __declspec(dllimport) HRESULT __stdcall  MonikerRelativePathTo(  LPMONIKER pmkSrc,   LPMONIKER pmkDest,  LPMONIKER
                * ppmkRelPath,   BOOL dwReserved);
  extern "C" __declspec(dllimport) HRESULT __stdcall  MonikerCommonPrefixWith(  LPMONIKER pmkThis,   LPMONIKER pmkOther,
                 LPMONIKER * ppmkCommon);  
  extern "C" __declspec(dllimport) HRESULT __stdcall  CreateBindCtx(  DWORD reserved,  LPBC * ppbc);   
  extern "C" __declspec(dllimport) HRESULT __stdcall  CreateGenericComposite(  LPMONIKER pmkFirst,   LPMONIKER pmkRest,  
     LPMONIKER * ppmkComposite);  
  extern "C" __declspec(dllimport) HRESULT __stdcall  GetClassFile (  LPCOLESTR szFilename,   CLSID * pclsid);  

  extern "C" __declspec(dllimport) HRESULT __stdcall  CreateClassMoniker(  const IID & rclsid,  LPMONIKER * ppmk);   

  extern "C" __declspec(dllimport) HRESULT __stdcall  CreateFileMoniker(  LPCOLESTR lpszPathName,  LPMONIKER * ppmk);  

  extern "C" __declspec(dllimport) HRESULT __stdcall  CreateItemMoniker(  LPCOLESTR lpszDelim,   LPCOLESTR lpszItem,
                           LPMONIKER * ppmk);   
  extern "C" __declspec(dllimport) HRESULT __stdcall  CreateAntiMoniker( LPMONIKER * ppmk);    
  extern "C" __declspec(dllimport) HRESULT __stdcall  CreatePointerMoniker(  LPUNKNOWN punk,  LPMONIKER * ppmk);  
  extern "C" __declspec(dllimport) HRESULT __stdcall  CreateObjrefMoniker(  LPUNKNOWN punk,  LPMONIKER  * ppmk);   

#line 430 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
#pragma endregion

#pragma region Desktop Family


  extern "C" __declspec(dllimport) HRESULT __stdcall  GetRunningObjectTable(   DWORD reserved,  LPRUNNINGOBJECTTABLE * pprot);

#line 438 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
#pragma endregion

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"





 


#pragma warning( disable: 4049 )  






















#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"





#pragma once
#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"

 



typedef struct IPersistMoniker IPersistMoniker;

#line 48 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IMonikerProp IMonikerProp;

#line 55 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IBindProtocol IBindProtocol;

#line 62 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IBinding IBinding;

#line 69 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IBindStatusCallback IBindStatusCallback;

#line 76 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IBindStatusCallbackEx IBindStatusCallbackEx;

#line 83 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IAuthenticate IAuthenticate;

#line 90 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IAuthenticateEx IAuthenticateEx;

#line 97 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IHttpNegotiate IHttpNegotiate;

#line 104 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IHttpNegotiate2 IHttpNegotiate2;

#line 111 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IHttpNegotiate3 IHttpNegotiate3;

#line 118 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IWinInetFileStream IWinInetFileStream;

#line 125 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IWindowForBindingUI IWindowForBindingUI;

#line 132 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct ICodeInstall ICodeInstall;

#line 139 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IUri IUri;

#line 146 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IUriContainer IUriContainer;

#line 153 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IUriBuilder IUriBuilder;

#line 160 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IUriBuilderFactory IUriBuilderFactory;

#line 167 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IWinInetInfo IWinInetInfo;

#line 174 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IHttpSecurity IHttpSecurity;

#line 181 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IWinInetHttpInfo IWinInetHttpInfo;

#line 188 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IWinInetHttpTimeouts IWinInetHttpTimeouts;

#line 195 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IWinInetCacheHints IWinInetCacheHints;

#line 202 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IWinInetCacheHints2 IWinInetCacheHints2;

#line 209 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IBindHost IBindHost;

#line 216 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternet IInternet;

#line 223 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetBindInfo IInternetBindInfo;

#line 230 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetBindInfoEx IInternetBindInfoEx;

#line 237 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetProtocolRoot IInternetProtocolRoot;

#line 244 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetProtocol IInternetProtocol;

#line 251 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetProtocolEx IInternetProtocolEx;

#line 258 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetProtocolSink IInternetProtocolSink;

#line 265 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetProtocolSinkStackable IInternetProtocolSinkStackable;

#line 272 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetSession IInternetSession;

#line 279 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetThreadSwitch IInternetThreadSwitch;

#line 286 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetPriority IInternetPriority;

#line 293 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetProtocolInfo IInternetProtocolInfo;

#line 300 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetSecurityMgrSite IInternetSecurityMgrSite;

#line 307 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetSecurityManager IInternetSecurityManager;

#line 314 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetSecurityManagerEx IInternetSecurityManagerEx;

#line 321 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetSecurityManagerEx2 IInternetSecurityManagerEx2;

#line 328 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IZoneIdentifier IZoneIdentifier;

#line 335 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetHostSecurityManager IInternetHostSecurityManager;

#line 342 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetZoneManager IInternetZoneManager;

#line 349 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetZoneManagerEx IInternetZoneManagerEx;

#line 356 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IInternetZoneManagerEx2 IInternetZoneManagerEx2;

#line 363 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct ISoftDistExt ISoftDistExt;

#line 370 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct ICatalogFileInfo ICatalogFileInfo;

#line 377 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IDataFilter IDataFilter;

#line 384 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IEncodingFilterFactory IEncodingFilterFactory;

#line 391 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IWrappedProtocol IWrappedProtocol;

#line 398 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IGetBindHandle IGetBindHandle;

#line 405 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




typedef struct IBindCallbackRedirect IBindCallbackRedirect;

#line 412 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"





 


#pragma warning( disable: 4049 )  






















#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"





#pragma once
#line 40 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"

 



typedef struct IOleAdviseHolder IOleAdviseHolder;

#line 48 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleCache IOleCache;

#line 55 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleCache2 IOleCache2;

#line 62 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleCacheControl IOleCacheControl;

#line 69 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IParseDisplayName IParseDisplayName;

#line 76 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleContainer IOleContainer;

#line 83 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleClientSite IOleClientSite;

#line 90 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleObject IOleObject;

#line 97 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleWindow IOleWindow;

#line 104 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleLink IOleLink;

#line 111 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleItemContainer IOleItemContainer;

#line 118 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleInPlaceUIWindow IOleInPlaceUIWindow;

#line 125 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleInPlaceActiveObject IOleInPlaceActiveObject;

#line 132 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleInPlaceFrame IOleInPlaceFrame;

#line 139 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleInPlaceObject IOleInPlaceObject;

#line 146 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IOleInPlaceSite IOleInPlaceSite;

#line 153 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IContinue IContinue;

#line 160 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IViewObject IViewObject;

#line 167 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IViewObject2 IViewObject2;

#line 174 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IDropSource IDropSource;

#line 181 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IDropTarget IDropTarget;

#line 188 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IDropSourceNotify IDropSourceNotify;

#line 195 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




typedef struct IEnumOLEVERB IEnumOLEVERB;

#line 202 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






extern "C"{
#line 210 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"



 








#pragma once
#line 224 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"

#pragma region Desktop Family





extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0000_v0_0_s_ifspec;





 

typedef  IOleAdviseHolder *LPOLEADVISEHOLDER;


extern "C" const IID IID_IOleAdviseHolder;


    
    struct __declspec(uuid("00000111-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleAdviseHolder : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Advise( 
             
               IAdviseSink *pAdvise,
             
               DWORD *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumAdvise( 
             
              IEnumSTATDATA **ppenumAdvise) = 0;
        
        virtual HRESULT __stdcall SendOnRename( 
             
               IMoniker *pmk) = 0;
        
        virtual HRESULT __stdcall SendOnSave( void) = 0;
        
        virtual HRESULT __stdcall SendOnClose( void) = 0;
        
    };
    
    

























































































#line 365 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 370 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"



 

#line 376 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0001_v0_0_s_ifspec;





 

typedef    IOleCache *LPOLECACHE;


extern "C" const IID IID_IOleCache;


    
    struct __declspec(uuid("0000011e-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCache : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Cache( 
              FORMATETC *pformatetc,
             DWORD advf,
              DWORD *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Uncache( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumCache( 
              IEnumSTATDATA **ppenumSTATDATA) = 0;
        
        virtual HRESULT __stdcall InitCache( 
              IDataObject *pDataObject) = 0;
        
        virtual HRESULT __stdcall SetData( 
              FORMATETC *pformatetc,
              STGMEDIUM *pmedium,
             BOOL fRelease) = 0;
        
    };
    
    



















































































#line 507 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 512 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IOleCache2 *LPOLECACHE2;



















typedef  
enum tagDISCARDCACHE
    {
        DISCARDCACHE_SAVEIFDIRTY	= 0,
        DISCARDCACHE_NOSAVE	= 1
    } 	DISCARDCACHE;


extern "C" const IID IID_IOleCache2;


    
    struct __declspec(uuid("00000128-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCache2 : public IOleCache
    {
    public:
        virtual  HRESULT __stdcall UpdateCache( 
             
               LPDATAOBJECT pDataObject,
             
               DWORD grfUpdf,
             
               LPVOID pReserved) = 0;
        
        virtual HRESULT __stdcall DiscardCache( 
             DWORD dwDiscardOptions) = 0;
        
    };
    
    







































































































#line 674 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"



 HRESULT __stdcall IOleCache2_RemoteUpdateCache_Proxy( 
     IOleCache2 * This,
      LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     LONG_PTR pReserved);


void __stdcall IOleCache2_RemoteUpdateCache_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 693 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"



 

#line 699 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0003_v0_0_s_ifspec;





 

typedef    IOleCacheControl *LPOLECACHECONTROL;


extern "C" const IID IID_IOleCacheControl;


    
    struct __declspec(uuid("00000129-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleCacheControl : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnRun( 
             LPDATAOBJECT pDataObject) = 0;
        
        virtual HRESULT __stdcall OnStop( void) = 0;
        
    };
    
    

























































#line 790 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 795 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IParseDisplayName *LPPARSEDISPLAYNAME;


extern "C" const IID IID_IParseDisplayName;


    
    struct __declspec(uuid("0000011a-0000-0000-C000-000000000046")) __declspec(novtable)
    IParseDisplayName : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseDisplayName( 
              IBindCtx *pbc,
              LPOLESTR pszDisplayName,
              ULONG *pchEaten,
              IMoniker **ppmkOut) = 0;
        
    };
    
    






















































#line 878 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 883 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IOleContainer *LPOLECONTAINER;


extern "C" const IID IID_IOleContainer;


    
    struct __declspec(uuid("0000011b-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleContainer : public IParseDisplayName
    {
    public:
        virtual HRESULT __stdcall EnumObjects( 
             DWORD grfFlags,
              IEnumUnknown **ppenum) = 0;
        
        virtual HRESULT __stdcall LockContainer( 
             BOOL fLock) = 0;
        
    };
    
    






































































#line 983 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 988 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IOleClientSite *LPOLECLIENTSITE;


extern "C" const IID IID_IOleClientSite;


    
    struct __declspec(uuid("00000118-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleClientSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SaveObject( void) = 0;
        
        virtual HRESULT __stdcall GetMoniker( 
             DWORD dwAssign,
             DWORD dwWhichMoniker,
              IMoniker **ppmk) = 0;
        
        virtual HRESULT __stdcall GetContainer( 
              IOleContainer **ppContainer) = 0;
        
        virtual HRESULT __stdcall ShowObject( void) = 0;
        
        virtual HRESULT __stdcall OnShowWindow( 
             BOOL fShow) = 0;
        
        virtual HRESULT __stdcall RequestNewObjectLayout( void) = 0;
        
    };
    
    





















































































#line 1113 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 1118 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IOleObject *LPOLEOBJECT;

typedef 
enum tagOLEGETMONIKER
    {
        OLEGETMONIKER_ONLYIFTHERE	= 1,
        OLEGETMONIKER_FORCEASSIGN	= 2,
        OLEGETMONIKER_UNASSIGN	= 3,
        OLEGETMONIKER_TEMPFORUSER	= 4
    } 	OLEGETMONIKER;

typedef 
enum tagOLEWHICHMK
    {
        OLEWHICHMK_CONTAINER	= 1,
        OLEWHICHMK_OBJREL	= 2,
        OLEWHICHMK_OBJFULL	= 3
    } 	OLEWHICHMK;

typedef 
enum tagUSERCLASSTYPE
    {
        USERCLASSTYPE_FULL	= 1,
        USERCLASSTYPE_SHORT	= 2,
        USERCLASSTYPE_APPNAME	= 3
    } 	USERCLASSTYPE;

typedef 
enum tagOLEMISC
    {
        OLEMISC_RECOMPOSEONRESIZE	= 0x1,
        OLEMISC_ONLYICONIC	= 0x2,
        OLEMISC_INSERTNOTREPLACE	= 0x4,
        OLEMISC_STATIC	= 0x8,
        OLEMISC_CANTLINKINSIDE	= 0x10,
        OLEMISC_CANLINKBYOLE1	= 0x20,
        OLEMISC_ISLINKOBJECT	= 0x40,
        OLEMISC_INSIDEOUT	= 0x80,
        OLEMISC_ACTIVATEWHENVISIBLE	= 0x100,
        OLEMISC_RENDERINGISDEVICEINDEPENDENT	= 0x200,
        OLEMISC_INVISIBLEATRUNTIME	= 0x400,
        OLEMISC_ALWAYSRUN	= 0x800,
        OLEMISC_ACTSLIKEBUTTON	= 0x1000,
        OLEMISC_ACTSLIKELABEL	= 0x2000,
        OLEMISC_NOUIACTIVATE	= 0x4000,
        OLEMISC_ALIGNABLE	= 0x8000,
        OLEMISC_SIMPLEFRAME	= 0x10000,
        OLEMISC_SETCLIENTSITEFIRST	= 0x20000,
        OLEMISC_IMEMODE	= 0x40000,
        OLEMISC_IGNOREACTIVATEWHENVISIBLE	= 0x80000,
        OLEMISC_WANTSTOMENUMERGE	= 0x100000,
        OLEMISC_SUPPORTSMULTILEVELUNDO	= 0x200000
    } 	OLEMISC;

typedef 
enum tagOLECLOSE
    {
        OLECLOSE_SAVEIFDIRTY	= 0,
        OLECLOSE_NOSAVE	= 1,
        OLECLOSE_PROMPTSAVE	= 2
    } 	OLECLOSE;


extern "C" const IID IID_IOleObject;


    
    struct __declspec(uuid("00000112-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleObject : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetClientSite( 
              IOleClientSite *pClientSite) = 0;
        
        virtual HRESULT __stdcall GetClientSite( 
              IOleClientSite **ppClientSite) = 0;
        
        virtual HRESULT __stdcall SetHostNames( 
              LPCOLESTR szContainerApp,
              LPCOLESTR szContainerObj) = 0;
        
        virtual HRESULT __stdcall Close( 
             DWORD dwSaveOption) = 0;
        
        virtual HRESULT __stdcall SetMoniker( 
             DWORD dwWhichMoniker,
              IMoniker *pmk) = 0;
        
        virtual HRESULT __stdcall GetMoniker( 
             DWORD dwAssign,
             DWORD dwWhichMoniker,
              IMoniker **ppmk) = 0;
        
        virtual HRESULT __stdcall InitFromData( 
              IDataObject *pDataObject,
             BOOL fCreation,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall GetClipboardData( 
             DWORD dwReserved,
              IDataObject **ppDataObject) = 0;
        
        virtual HRESULT __stdcall DoVerb( 
             LONG iVerb,
              LPMSG lpmsg,
              IOleClientSite *pActiveSite,
             LONG lindex,
              HWND hwndParent,
              LPCRECT lprcPosRect) = 0;
        
        virtual HRESULT __stdcall EnumVerbs( 
              IEnumOLEVERB **ppEnumOleVerb) = 0;
        
        virtual HRESULT __stdcall Update( void) = 0;
        
        virtual HRESULT __stdcall IsUpToDate( void) = 0;
        
        virtual HRESULT __stdcall GetUserClassID( 
              CLSID *pClsid) = 0;
        
        virtual HRESULT __stdcall GetUserType( 
             DWORD dwFormOfType,
              LPOLESTR *pszUserType) = 0;
        
        virtual HRESULT __stdcall SetExtent( 
             DWORD dwDrawAspect,
              SIZEL *psizel) = 0;
        
        virtual HRESULT __stdcall GetExtent( 
             DWORD dwDrawAspect,
              SIZEL *psizel) = 0;
        
        virtual HRESULT __stdcall Advise( 
              IAdviseSink *pAdvSink,
              DWORD *pdwConnection) = 0;
        
        virtual HRESULT __stdcall Unadvise( 
             DWORD dwConnection) = 0;
        
        virtual HRESULT __stdcall EnumAdvise( 
              IEnumSTATDATA **ppenumAdvise) = 0;
        
        virtual HRESULT __stdcall GetMiscStatus( 
             DWORD dwAspect,
              DWORD *pdwStatus) = 0;
        
        virtual HRESULT __stdcall SetColorScheme( 
              LOGPALETTE *pLogpal) = 0;
        
    };
    
    














































































































































































































#line 1485 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 1490 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef 
enum tagOLERENDER
    {
        OLERENDER_NONE	= 0,
        OLERENDER_DRAW	= 1,
        OLERENDER_FORMAT	= 2,
        OLERENDER_ASIS	= 3
    } 	OLERENDER;

typedef OLERENDER *LPOLERENDER;

typedef struct tagOBJECTDESCRIPTOR
    {
    ULONG cbSize;
    CLSID clsid;
    DWORD dwDrawAspect;
    SIZEL sizel;
    POINTL pointl;
    DWORD dwStatus;
    DWORD dwFullUserTypeName;
    DWORD dwSrcOfCopy;
    } 	OBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *POBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPOBJECTDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR LINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *PLINKSRCDESCRIPTOR;

typedef struct tagOBJECTDESCRIPTOR *LPLINKSRCDESCRIPTOR;



extern RPC_IF_HANDLE IOLETypes_v0_0_c_ifspec;
extern RPC_IF_HANDLE IOLETypes_v0_0_s_ifspec;
#line 1536 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"





 

typedef    IOleWindow *LPOLEWINDOW;


extern "C" const IID IID_IOleWindow;


    
    struct __declspec(uuid("00000114-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleWindow : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetWindow( 
              HWND *phwnd) = 0;
        
        virtual HRESULT __stdcall ContextSensitiveHelp( 
             BOOL fEnterMode) = 0;
        
    };
    
    


























































#line 1622 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 1627 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IOleLink *LPOLELINK;

typedef 
enum tagOLEUPDATE
    {
        OLEUPDATE_ALWAYS	= 1,
        OLEUPDATE_ONCALL	= 3
    } 	OLEUPDATE;

typedef OLEUPDATE *LPOLEUPDATE;

typedef OLEUPDATE *POLEUPDATE;

typedef 
enum tagOLELINKBIND
    {
        OLELINKBIND_EVENIFCLASSDIFF	= 1
    } 	OLELINKBIND;


extern "C" const IID IID_IOleLink;


    
    struct __declspec(uuid("0000011d-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleLink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetUpdateOptions( 
             DWORD dwUpdateOpt) = 0;
        
        virtual HRESULT __stdcall GetUpdateOptions( 
              DWORD *pdwUpdateOpt) = 0;
        
        virtual HRESULT __stdcall SetSourceMoniker( 
              IMoniker *pmk,
              const IID & rclsid) = 0;
        
        virtual HRESULT __stdcall GetSourceMoniker( 
              IMoniker **ppmk) = 0;
        
        virtual HRESULT __stdcall SetSourceDisplayName( 
              LPCOLESTR pszStatusText) = 0;
        
        virtual HRESULT __stdcall GetSourceDisplayName( 
              LPOLESTR *ppszDisplayName) = 0;
        
        virtual HRESULT __stdcall BindToSource( 
             DWORD bindflags,
              IBindCtx *pbc) = 0;
        
        virtual HRESULT __stdcall BindIfRunning( void) = 0;
        
        virtual HRESULT __stdcall GetBoundSource( 
              IUnknown **ppunk) = 0;
        
        virtual HRESULT __stdcall UnbindSource( void) = 0;
        
        virtual HRESULT __stdcall Update( 
              IBindCtx *pbc) = 0;
        
    };
    
    

























































































































#line 1821 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 1826 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IOleItemContainer *LPOLEITEMCONTAINER;

typedef 
enum tagBINDSPEED
    {
        BINDSPEED_INDEFINITE	= 1,
        BINDSPEED_MODERATE	= 2,
        BINDSPEED_IMMEDIATE	= 3
    } 	BINDSPEED;

typedef  
enum tagOLECONTF
    {
        OLECONTF_EMBEDDINGS	= 1,
        OLECONTF_LINKS	= 2,
        OLECONTF_OTHERS	= 4,
        OLECONTF_ONLYUSER	= 8,
        OLECONTF_ONLYIFRUNNING	= 16
    } 	OLECONTF;


extern "C" const IID IID_IOleItemContainer;


    
    struct __declspec(uuid("0000011c-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleItemContainer : public IOleContainer
    {
    public:
        virtual HRESULT __stdcall GetObjectA( 
              LPOLESTR pszItem,
             DWORD dwSpeedNeeded,
              IBindCtx *pbc,
              const IID & riid,
              void **ppvObject) = 0;
        
        virtual HRESULT __stdcall GetObjectStorage( 
              LPOLESTR pszItem,
              IBindCtx *pbc,
              const IID & riid,
              void **ppvStorage) = 0;
        
        virtual HRESULT __stdcall IsRunning( 
              LPOLESTR pszItem) = 0;
        
    };
    
    



































































































#line 1982 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 1987 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IOleInPlaceUIWindow *LPOLEINPLACEUIWINDOW;

typedef RECT BORDERWIDTHS;

typedef LPRECT LPBORDERWIDTHS;

typedef LPCRECT LPCBORDERWIDTHS;


extern "C" const IID IID_IOleInPlaceUIWindow;


    
    struct __declspec(uuid("00000115-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceUIWindow : public IOleWindow
    {
    public:
        virtual  HRESULT __stdcall GetBorder( 
              LPRECT lprectBorder) = 0;
        
        virtual  HRESULT __stdcall RequestBorderSpace( 
              LPCBORDERWIDTHS pborderwidths) = 0;
        
        virtual  HRESULT __stdcall SetBorderSpace( 
              LPCBORDERWIDTHS pborderwidths) = 0;
        
        virtual HRESULT __stdcall SetActiveObject( 
              IOleInPlaceActiveObject *pActiveObject,
              LPCOLESTR pszObjName) = 0;
        
    };
    
    
























































































#line 2117 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 2122 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IOleInPlaceActiveObject *LPOLEINPLACEACTIVEOBJECT;


extern "C" const IID IID_IOleInPlaceActiveObject;


    
    struct __declspec(uuid("00000117-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceActiveObject : public IOleWindow
    {
    public:
        virtual  HRESULT __stdcall TranslateAcceleratorA( 
             
               LPMSG lpmsg) = 0;
        
        virtual  HRESULT __stdcall OnFrameWindowActivate( 
             BOOL fActivate) = 0;
        
        virtual  HRESULT __stdcall OnDocWindowActivate( 
             BOOL fActivate) = 0;
        
        virtual  HRESULT __stdcall ResizeBorder( 
             
               LPCRECT prcBorder,
             
               IOleInPlaceUIWindow *pUIWindow,
             
               BOOL fFrameWindow) = 0;
        
        virtual HRESULT __stdcall EnableModeless( 
             BOOL fEnable) = 0;
        
    };
    
    




































































































#line 2266 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"



 HRESULT __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Proxy( 
     IOleInPlaceActiveObject * This);


void __stdcall IOleInPlaceActiveObject_RemoteTranslateAccelerator_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Proxy( 
     IOleInPlaceActiveObject * This,
      LPCRECT prcBorder,
      const IID & riid,
      IOleInPlaceUIWindow *pUIWindow,
     BOOL fFrameWindow);


void __stdcall IOleInPlaceActiveObject_RemoteResizeBorder_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2297 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IOleInPlaceFrame *LPOLEINPLACEFRAME;

typedef struct tagOIFI
    {
    UINT cb;
    BOOL fMDIApp;
    HWND hwndFrame;
    HACCEL haccel;
    UINT cAccelEntries;
    } 	OLEINPLACEFRAMEINFO;

typedef struct tagOIFI *LPOLEINPLACEFRAMEINFO;

typedef struct tagOleMenuGroupWidths
    {
    LONG width[ 6 ];
    } 	OLEMENUGROUPWIDTHS;

typedef struct tagOleMenuGroupWidths *LPOLEMENUGROUPWIDTHS;

typedef HGLOBAL HOLEMENU;


extern "C" const IID IID_IOleInPlaceFrame;


    
    struct __declspec(uuid("00000116-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceFrame : public IOleInPlaceUIWindow
    {
    public:
        virtual HRESULT __stdcall InsertMenus( 
              HMENU hmenuShared,
              LPOLEMENUGROUPWIDTHS lpMenuWidths) = 0;
        
        virtual  HRESULT __stdcall SetMenu( 
              HMENU hmenuShared,
              HOLEMENU holemenu,
              HWND hwndActiveObject) = 0;
        
        virtual HRESULT __stdcall RemoveMenus( 
              HMENU hmenuShared) = 0;
        
        virtual  HRESULT __stdcall SetStatusText( 
              LPCOLESTR pszStatusText) = 0;
        
        virtual HRESULT __stdcall EnableModeless( 
             BOOL fEnable) = 0;
        
        virtual HRESULT __stdcall TranslateAcceleratorA( 
              LPMSG lpmsg,
             WORD wID) = 0;
        
    };
    
    







































































































































#line 2497 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 2502 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IOleInPlaceObject *LPOLEINPLACEOBJECT;


extern "C" const IID IID_IOleInPlaceObject;


    
    struct __declspec(uuid("00000113-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceObject : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall InPlaceDeactivate( void) = 0;
        
        virtual HRESULT __stdcall UIDeactivate( void) = 0;
        
        virtual  HRESULT __stdcall SetObjectRects( 
              LPCRECT lprcPosRect,
              LPCRECT lprcClipRect) = 0;
        
        virtual HRESULT __stdcall ReactivateAndUndo( void) = 0;
        
    };
    
    





















































































#line 2620 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 2625 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IOleInPlaceSite *LPOLEINPLACESITE;


extern "C" const IID IID_IOleInPlaceSite;


    
    struct __declspec(uuid("00000119-0000-0000-C000-000000000046")) __declspec(novtable)
    IOleInPlaceSite : public IOleWindow
    {
    public:
        virtual HRESULT __stdcall CanInPlaceActivate( void) = 0;
        
        virtual HRESULT __stdcall OnInPlaceActivate( void) = 0;
        
        virtual HRESULT __stdcall OnUIActivate( void) = 0;
        
        virtual HRESULT __stdcall GetWindowContext( 
              IOleInPlaceFrame **ppFrame,
              IOleInPlaceUIWindow **ppDoc,
              LPRECT lprcPosRect,
              LPRECT lprcClipRect,
              LPOLEINPLACEFRAMEINFO lpFrameInfo) = 0;
        
        virtual HRESULT __stdcall Scroll( 
             SIZE scrollExtant) = 0;
        
        virtual HRESULT __stdcall OnUIDeactivate( 
             BOOL fUndoable) = 0;
        
        virtual HRESULT __stdcall OnInPlaceDeactivate( void) = 0;
        
        virtual HRESULT __stdcall DiscardUndoState( void) = 0;
        
        virtual HRESULT __stdcall DeactivateAndUndo( void) = 0;
        
        virtual HRESULT __stdcall OnPosRectChange( 
              LPCRECT lprcPosRect) = 0;
        
    };
    
    































































































































#line 2803 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 2808 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 


extern "C" const IID IID_IContinue;


    
    struct __declspec(uuid("0000012a-0000-0000-C000-000000000046")) __declspec(novtable)
    IContinue : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FContinue( void) = 0;
        
    };
    
    


















































#line 2881 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 2886 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IViewObject *LPVIEWOBJECT;


extern "C" const IID IID_IViewObject;


    
    struct __declspec(uuid("0000010d-0000-0000-C000-000000000046")) __declspec(novtable)
    IViewObject : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Draw( 
             
               DWORD dwDrawAspect,
             
               LONG lindex,
             
              void *pvAspect,
             
               DVTARGETDEVICE *ptd,
             
               HDC hdcTargetDev,
             
               HDC hdcDraw,
             
               LPCRECTL lprcBounds,
             
               LPCRECTL lprcWBounds,
             
               BOOL ( __stdcall *pfnContinue )( 
                ULONG_PTR dwContinue),
             
               ULONG_PTR dwContinue) = 0;
        
        virtual  HRESULT __stdcall GetColorSet( 
             
               DWORD dwDrawAspect,
             
               LONG lindex,
             
              void *pvAspect,
             
               DVTARGETDEVICE *ptd,
             
               HDC hicTargetDev,
             
              LOGPALETTE **ppColorSet) = 0;
        
        virtual  HRESULT __stdcall Freeze( 
             
               DWORD dwDrawAspect,
             
               LONG lindex,
             
              void *pvAspect,
             
               DWORD *pdwFreeze) = 0;
        
        virtual HRESULT __stdcall Unfreeze( 
             DWORD dwFreeze) = 0;
        
        virtual HRESULT __stdcall SetAdvise( 
             DWORD aspects,
             DWORD advf,
              IAdviseSink *pAdvSink) = 0;
        
        virtual  HRESULT __stdcall GetAdvise( 
             
               DWORD *pAspects,
             
               DWORD *pAdvf,
             
              IAdviseSink **ppAdvSink) = 0;
        
    };
    
    



































































































































#line 3103 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"



 HRESULT __stdcall IViewObject_RemoteDraw_Proxy( 
     IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
      DVTARGETDEVICE *ptd,
      HDC hdcTargetDev,
      HDC hdcDraw,
      LPCRECTL lprcBounds,
      LPCRECTL lprcWBounds,
      IContinue *pContinue);


void __stdcall IViewObject_RemoteDraw_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteGetColorSet_Proxy( 
     IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
      DVTARGETDEVICE *ptd,
     ULONG_PTR hicTargetDev,
      LOGPALETTE **ppColorSet);


void __stdcall IViewObject_RemoteGetColorSet_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteFreeze_Proxy( 
     IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
      DWORD *pdwFreeze);


void __stdcall IViewObject_RemoteFreeze_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IViewObject_RemoteGetAdvise_Proxy( 
     IViewObject * This,
      DWORD *pAspects,
      DWORD *pAdvf,
      IAdviseSink **ppAdvSink);


void __stdcall IViewObject_RemoteGetAdvise_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3174 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IViewObject2 *LPVIEWOBJECT2;


extern "C" const IID IID_IViewObject2;


    
    struct __declspec(uuid("00000127-0000-0000-C000-000000000046")) __declspec(novtable)
    IViewObject2 : public IViewObject
    {
    public:
        virtual HRESULT __stdcall GetExtent( 
             DWORD dwDrawAspect,
             LONG lindex,
              DVTARGETDEVICE *ptd,
              LPSIZEL lpsizel) = 0;
        
    };
    
    














































































































































#line 3345 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 3350 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef  IDropSource *LPDROPSOURCE;


extern "C" const IID IID_IDropSource;


    
    struct __declspec(uuid("00000121-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropSource : public IUnknown
    {
    public:
        virtual HRESULT __stdcall QueryContinueDrag( 
             
               BOOL fEscapePressed,
             
               DWORD grfKeyState) = 0;
        
        virtual HRESULT __stdcall GiveFeedback( 
             
               DWORD dwEffect) = 0;
        
    };
    
    






























































#line 3445 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 3450 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 

typedef    IDropTarget *LPDROPTARGET;


































extern "C" const IID IID_IDropTarget;


    
    struct __declspec(uuid("00000122-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropTarget : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DragEnter( 
              IDataObject *pDataObj,
             DWORD grfKeyState,
             POINTL pt,
              DWORD *pdwEffect) = 0;
        
        virtual HRESULT __stdcall DragOver( 
             DWORD grfKeyState,
             POINTL pt,
              DWORD *pdwEffect) = 0;
        
        virtual HRESULT __stdcall DragLeave( void) = 0;
        
        virtual HRESULT __stdcall Drop( 
              IDataObject *pDataObj,
             DWORD grfKeyState,
             POINTL pt,
              DWORD *pdwEffect) = 0;
        
    };
    
    















































































#line 3603 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 3608 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"






 


extern "C" const IID IID_IDropSourceNotify;


    
    struct __declspec(uuid("0000012B-0000-0000-C000-000000000046")) __declspec(novtable)
    IDropSourceNotify : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DragEnterTarget( 
             
               HWND hwndTarget) = 0;
        
        virtual HRESULT __stdcall DragLeaveTarget( void) = 0;
        
    };
    
    


























































#line 3693 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"




#line 3698 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"



 

#line 3704 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0023_v0_0_s_ifspec;





 

typedef    IEnumOLEVERB *LPENUMOLEVERB;

typedef struct tagOLEVERB
    {
    LONG lVerb;
    LPOLESTR lpszVerbName;
    DWORD fuFlags;
    DWORD grfAttribs;
    } 	OLEVERB;

typedef struct tagOLEVERB *LPOLEVERB;

typedef  
enum tagOLEVERBATTRIB
    {
        OLEVERBATTRIB_NEVERDIRTIES	= 1,
        OLEVERBATTRIB_ONCONTAINERMENU	= 2
    } 	OLEVERBATTRIB;


extern "C" const IID IID_IEnumOLEVERB;


    
    struct __declspec(uuid("00000104-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumOLEVERB : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             
               ULONG celt,
             
               LPOLEVERB rgelt,
             
               ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
              IEnumOLEVERB **ppenum) = 0;
        
    };
    
    












































































#line 3842 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"



 HRESULT __stdcall IEnumOLEVERB_RemoteNext_Proxy( 
     IEnumOLEVERB * This,
     ULONG celt,
      LPOLEVERB rgelt,
      ULONG *pceltFetched);


void __stdcall IEnumOLEVERB_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3861 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"



 

#line 3867 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"
#pragma endregion


extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oleidl_0000_0024_v0_0_s_ifspec;



unsigned long             __stdcall  CLIPFORMAT_UserSize(      unsigned long *, unsigned long            ,  CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserMarshal(   unsigned long *,  unsigned char *,  CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserUnmarshal( unsigned long *,  unsigned char *,  CLIPFORMAT * ); 
void                      __stdcall  CLIPFORMAT_UserFree(      unsigned long *,  CLIPFORMAT * ); 

unsigned long             __stdcall  HACCEL_UserSize(      unsigned long *, unsigned long            ,  HACCEL * ); 
unsigned char * __stdcall  HACCEL_UserMarshal(   unsigned long *,  unsigned char *,  HACCEL * ); 
unsigned char * __stdcall  HACCEL_UserUnmarshal( unsigned long *,  unsigned char *,  HACCEL * ); 
void                      __stdcall  HACCEL_UserFree(      unsigned long *,  HACCEL * ); 

unsigned long             __stdcall  HDC_UserSize(      unsigned long *, unsigned long            ,  HDC * ); 
unsigned char * __stdcall  HDC_UserMarshal(   unsigned long *,  unsigned char *,  HDC * ); 
unsigned char * __stdcall  HDC_UserUnmarshal( unsigned long *,  unsigned char *,  HDC * ); 
void                      __stdcall  HDC_UserFree(      unsigned long *,  HDC * ); 

unsigned long             __stdcall  HGLOBAL_UserSize(      unsigned long *, unsigned long            ,  HGLOBAL * ); 
unsigned char * __stdcall  HGLOBAL_UserMarshal(   unsigned long *,  unsigned char *,  HGLOBAL * ); 
unsigned char * __stdcall  HGLOBAL_UserUnmarshal( unsigned long *,  unsigned char *,  HGLOBAL * ); 
void                      __stdcall  HGLOBAL_UserFree(      unsigned long *,  HGLOBAL * ); 

unsigned long             __stdcall  HMENU_UserSize(      unsigned long *, unsigned long            ,  HMENU * ); 
unsigned char * __stdcall  HMENU_UserMarshal(   unsigned long *,  unsigned char *,  HMENU * ); 
unsigned char * __stdcall  HMENU_UserUnmarshal( unsigned long *,  unsigned char *,  HMENU * ); 
void                      __stdcall  HMENU_UserFree(      unsigned long *,  HMENU * ); 

unsigned long             __stdcall  HWND_UserSize(      unsigned long *, unsigned long            ,  HWND * ); 
unsigned char * __stdcall  HWND_UserMarshal(   unsigned long *,  unsigned char *,  HWND * ); 
unsigned char * __stdcall  HWND_UserUnmarshal( unsigned long *,  unsigned char *,  HWND * ); 
void                      __stdcall  HWND_UserFree(      unsigned long *,  HWND * ); 

unsigned long             __stdcall  STGMEDIUM_UserSize(      unsigned long *, unsigned long            ,  STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserMarshal(   unsigned long *,  unsigned char *,  STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserUnmarshal( unsigned long *,  unsigned char *,  STGMEDIUM * ); 
void                      __stdcall  STGMEDIUM_UserFree(      unsigned long *,  STGMEDIUM * ); 

unsigned long             __stdcall  CLIPFORMAT_UserSize64(      unsigned long *, unsigned long            ,  CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserMarshal64(   unsigned long *,  unsigned char *,  CLIPFORMAT * ); 
unsigned char * __stdcall  CLIPFORMAT_UserUnmarshal64( unsigned long *,  unsigned char *,  CLIPFORMAT * ); 
void                      __stdcall  CLIPFORMAT_UserFree64(      unsigned long *,  CLIPFORMAT * ); 

unsigned long             __stdcall  HACCEL_UserSize64(      unsigned long *, unsigned long            ,  HACCEL * ); 
unsigned char * __stdcall  HACCEL_UserMarshal64(   unsigned long *,  unsigned char *,  HACCEL * ); 
unsigned char * __stdcall  HACCEL_UserUnmarshal64( unsigned long *,  unsigned char *,  HACCEL * ); 
void                      __stdcall  HACCEL_UserFree64(      unsigned long *,  HACCEL * ); 

unsigned long             __stdcall  HDC_UserSize64(      unsigned long *, unsigned long            ,  HDC * ); 
unsigned char * __stdcall  HDC_UserMarshal64(   unsigned long *,  unsigned char *,  HDC * ); 
unsigned char * __stdcall  HDC_UserUnmarshal64( unsigned long *,  unsigned char *,  HDC * ); 
void                      __stdcall  HDC_UserFree64(      unsigned long *,  HDC * ); 

unsigned long             __stdcall  HGLOBAL_UserSize64(      unsigned long *, unsigned long            ,  HGLOBAL * ); 
unsigned char * __stdcall  HGLOBAL_UserMarshal64(   unsigned long *,  unsigned char *,  HGLOBAL * ); 
unsigned char * __stdcall  HGLOBAL_UserUnmarshal64( unsigned long *,  unsigned char *,  HGLOBAL * ); 
void                      __stdcall  HGLOBAL_UserFree64(      unsigned long *,  HGLOBAL * ); 

unsigned long             __stdcall  HMENU_UserSize64(      unsigned long *, unsigned long            ,  HMENU * ); 
unsigned char * __stdcall  HMENU_UserMarshal64(   unsigned long *,  unsigned char *,  HMENU * ); 
unsigned char * __stdcall  HMENU_UserUnmarshal64( unsigned long *,  unsigned char *,  HMENU * ); 
void                      __stdcall  HMENU_UserFree64(      unsigned long *,  HMENU * ); 

unsigned long             __stdcall  HWND_UserSize64(      unsigned long *, unsigned long            ,  HWND * ); 
unsigned char * __stdcall  HWND_UserMarshal64(   unsigned long *,  unsigned char *,  HWND * ); 
unsigned char * __stdcall  HWND_UserUnmarshal64( unsigned long *,  unsigned char *,  HWND * ); 
void                      __stdcall  HWND_UserFree64(      unsigned long *,  HWND * ); 

unsigned long             __stdcall  STGMEDIUM_UserSize64(      unsigned long *, unsigned long            ,  STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserMarshal64(   unsigned long *,  unsigned char *,  STGMEDIUM * ); 
unsigned char * __stdcall  STGMEDIUM_UserUnmarshal64( unsigned long *,  unsigned char *,  STGMEDIUM * ); 
void                      __stdcall  STGMEDIUM_UserFree64(      unsigned long *,  STGMEDIUM * ); 

 HRESULT __stdcall IOleCache2_UpdateCache_Proxy( 
    IOleCache2 * This,
     
       LPDATAOBJECT pDataObject,
     
       DWORD grfUpdf,
     
       LPVOID pReserved);


 HRESULT __stdcall IOleCache2_UpdateCache_Stub( 
     IOleCache2 * This,
      LPDATAOBJECT pDataObject,
     DWORD grfUpdf,
     LONG_PTR pReserved);

 HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Proxy( 
    IOleInPlaceActiveObject * This,
     
       LPMSG lpmsg);


 HRESULT __stdcall IOleInPlaceActiveObject_TranslateAccelerator_Stub( 
     IOleInPlaceActiveObject * This);

 HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Proxy( 
    IOleInPlaceActiveObject * This,
     
       LPCRECT prcBorder,
     
       IOleInPlaceUIWindow *pUIWindow,
     
       BOOL fFrameWindow);


 HRESULT __stdcall IOleInPlaceActiveObject_ResizeBorder_Stub( 
     IOleInPlaceActiveObject * This,
      LPCRECT prcBorder,
      const IID & riid,
      IOleInPlaceUIWindow *pUIWindow,
     BOOL fFrameWindow);

 HRESULT __stdcall IViewObject_Draw_Proxy( 
    IViewObject * This,
     
       DWORD dwDrawAspect,
     
       LONG lindex,
     
      void *pvAspect,
     
       DVTARGETDEVICE *ptd,
     
       HDC hdcTargetDev,
     
       HDC hdcDraw,
     
       LPCRECTL lprcBounds,
     
       LPCRECTL lprcWBounds,
     
       BOOL ( __stdcall *pfnContinue )( 
        ULONG_PTR dwContinue),
     
       ULONG_PTR dwContinue);


 HRESULT __stdcall IViewObject_Draw_Stub( 
     IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
      DVTARGETDEVICE *ptd,
      HDC hdcTargetDev,
      HDC hdcDraw,
      LPCRECTL lprcBounds,
      LPCRECTL lprcWBounds,
      IContinue *pContinue);

 HRESULT __stdcall IViewObject_GetColorSet_Proxy( 
    IViewObject * This,
     
       DWORD dwDrawAspect,
     
       LONG lindex,
     
      void *pvAspect,
     
       DVTARGETDEVICE *ptd,
     
       HDC hicTargetDev,
     
      LOGPALETTE **ppColorSet);


 HRESULT __stdcall IViewObject_GetColorSet_Stub( 
     IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
      DVTARGETDEVICE *ptd,
     ULONG_PTR hicTargetDev,
      LOGPALETTE **ppColorSet);

 HRESULT __stdcall IViewObject_Freeze_Proxy( 
    IViewObject * This,
     
       DWORD dwDrawAspect,
     
       LONG lindex,
     
      void *pvAspect,
     
       DWORD *pdwFreeze);


 HRESULT __stdcall IViewObject_Freeze_Stub( 
     IViewObject * This,
     DWORD dwDrawAspect,
     LONG lindex,
     ULONG_PTR pvAspect,
      DWORD *pdwFreeze);

 HRESULT __stdcall IViewObject_GetAdvise_Proxy( 
    IViewObject * This,
     
       DWORD *pAspects,
     
       DWORD *pAdvf,
     
      IAdviseSink **ppAdvSink);


 HRESULT __stdcall IViewObject_GetAdvise_Stub( 
     IViewObject * This,
      DWORD *pAspects,
      DWORD *pAdvf,
      IAdviseSink **ppAdvSink);

 HRESULT __stdcall IEnumOLEVERB_Next_Proxy( 
    IEnumOLEVERB * This,
     
       ULONG celt,
     
       LPOLEVERB rgelt,
     
       ULONG *pceltFetched);


 HRESULT __stdcall IEnumOLEVERB_Next_Stub( 
     IEnumOLEVERB * This,
     ULONG celt,
      LPOLEVERB rgelt,
      ULONG *pceltFetched);






}
#line 4107 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"

#line 4109 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oleidl.h"



#line 417 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\servprov.h"





 


#pragma warning( disable: 4049 )  






















#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\servprov.h"





#pragma once
#line 40 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\servprov.h"

 



typedef struct IServiceProvider IServiceProvider;

#line 48 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\servprov.h"






extern "C"{
#line 56 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\servprov.h"



 












#pragma comment(lib,"uuid.lib")





#pragma region Desktop Family




extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0000_v0_0_s_ifspec;





 

typedef    IServiceProvider *LPSERVICEPROVIDER;


    extern "C" const IID IID_IServiceProvider;
    extern "C++"
    {
        struct __declspec(uuid("6d5140c1-7436-11ce-8034-00aa006009fa")) __declspec(novtable)
        IServiceProvider : public IUnknown
        {
        public:
            virtual  HRESULT __stdcall QueryService( 
                   const GUID & guidService,
                   const IID & riid,
                  void  * *ppvObject) = 0;
            
            template <class Q>
            HRESULT __stdcall QueryService(  const GUID & guidService,  Q** pp)
            {
                return QueryService(guidService, __uuidof(Q), (void **)pp);
            }
        };
    }

     HRESULT __stdcall IServiceProvider_RemoteQueryService_Proxy( 
          IServiceProvider  * This,
           const GUID & guidService,
           const IID & riid,
          IUnknown  * *ppvObject);

    void __stdcall IServiceProvider_RemoteQueryService_Stub(
        IRpcStubBuffer *This,
        IRpcChannelBuffer *_pRpcChannelBuffer,
        PRPC_MESSAGE _pRpcMessage,
        DWORD *_pdwStubPhase);

































































































#line 224 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\servprov.h"



 

#line 230 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\servprov.h"
#line 231 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\servprov.h"
#pragma endregion


extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_servprov_0000_0001_v0_0_s_ifspec;



 HRESULT __stdcall IServiceProvider_QueryService_Proxy( 
    IServiceProvider * This,
     
       const GUID & guidService,
     
       const IID & riid,
     
      void **ppvObject);


 HRESULT __stdcall IServiceProvider_QueryService_Stub( 
     IServiceProvider * This,
      const GUID & guidService,
      const IID & riid,
      IUnknown **ppvObject);






}
#line 262 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\servprov.h"

#line 264 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\servprov.h"


#line 418 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"





 


#pragma warning( disable: 4049 )  
























#pragma once
#line 36 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"

 



typedef struct IXMLDOMImplementation IXMLDOMImplementation;

#line 44 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMNode IXMLDOMNode;

#line 51 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMDocumentFragment IXMLDOMDocumentFragment;

#line 58 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMDocument IXMLDOMDocument;

#line 65 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMNodeList IXMLDOMNodeList;

#line 72 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMNamedNodeMap IXMLDOMNamedNodeMap;

#line 79 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMCharacterData IXMLDOMCharacterData;

#line 86 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMAttribute IXMLDOMAttribute;

#line 93 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMElement IXMLDOMElement;

#line 100 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMText IXMLDOMText;

#line 107 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMComment IXMLDOMComment;

#line 114 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMProcessingInstruction IXMLDOMProcessingInstruction;

#line 121 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMCDATASection IXMLDOMCDATASection;

#line 128 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMDocumentType IXMLDOMDocumentType;

#line 135 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMNotation IXMLDOMNotation;

#line 142 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMEntity IXMLDOMEntity;

#line 149 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMEntityReference IXMLDOMEntityReference;

#line 156 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDOMParseError IXMLDOMParseError;

#line 163 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXTLRuntime IXTLRuntime;

#line 170 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct XMLDOMDocumentEvents XMLDOMDocumentEvents;

#line 177 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






typedef class DOMDocument DOMDocument;


#line 187 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"

#line 189 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






typedef class DOMFreeThreadedDocument DOMFreeThreadedDocument;


#line 199 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"

#line 201 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLHttpRequest IXMLHttpRequest;

#line 208 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






typedef class XMLHTTPRequest XMLHTTPRequest;


#line 218 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"

#line 220 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDSOControl IXMLDSOControl;

#line 227 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






typedef class XMLDSOControl XMLDSOControl;


#line 237 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"

#line 239 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLElementCollection IXMLElementCollection;

#line 246 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDocument IXMLDocument;

#line 253 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLDocument2 IXMLDocument2;

#line 260 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLElement IXMLElement;

#line 267 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLElement2 IXMLElement2;

#line 274 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLAttribute IXMLAttribute;

#line 281 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




typedef struct IXMLError IXMLError;

#line 288 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






typedef class XMLDocument XMLDocument;


#line 298 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"

#line 300 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"





#line 1 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"





 


#pragma warning( disable: 4049 )  






















#line 33 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"





#pragma once
#line 40 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"

 



typedef struct ICreateTypeInfo ICreateTypeInfo;

#line 48 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct ICreateTypeInfo2 ICreateTypeInfo2;

#line 55 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct ICreateTypeLib ICreateTypeLib;

#line 62 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct ICreateTypeLib2 ICreateTypeLib2;

#line 69 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct IDispatch IDispatch;

#line 76 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct IEnumVARIANT IEnumVARIANT;

#line 83 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct ITypeComp ITypeComp;

#line 90 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct ITypeInfo ITypeInfo;

#line 97 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct ITypeInfo2 ITypeInfo2;

#line 104 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct ITypeLib ITypeLib;

#line 111 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct ITypeLib2 ITypeLib2;

#line 118 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct ITypeChangeEvents ITypeChangeEvents;

#line 125 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct IErrorInfo IErrorInfo;

#line 132 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct ICreateErrorInfo ICreateErrorInfo;

#line 139 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct ISupportErrorInfo ISupportErrorInfo;

#line 146 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct ITypeFactory ITypeFactory;

#line 153 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct ITypeMarshal ITypeMarshal;

#line 160 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct IRecordInfo IRecordInfo;

#line 167 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct IErrorLog IErrorLog;

#line 174 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




typedef struct IPropertyBag IPropertyBag;

#line 181 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






extern "C"{
#line 189 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 










#pragma warning(push)
#line 205 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
#pragma warning(disable:4201)    
#line 207 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"

#pragma once
#line 210 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
#pragma region Desktop Family





#line 217 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
#pragma endregion
#pragma region Application Family




#line 224 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
#pragma endregion
#pragma region Desktop Family












#line 239 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0000_v0_0_s_ifspec;





 

typedef CY CURRENCY;

typedef struct tagSAFEARRAYBOUND
    {
    ULONG cElements;
    LONG lLbound;
    } 	SAFEARRAYBOUND;

typedef struct tagSAFEARRAYBOUND *LPSAFEARRAYBOUND;


typedef    struct _wireVARIANT *wireVARIANT;

typedef    struct _wireBRECORD *wireBRECORD;

typedef struct _wireSAFEARR_BSTR
    {
    ULONG Size;
     wireBSTR *aBstr;
    } 	SAFEARR_BSTR;

typedef struct _wireSAFEARR_UNKNOWN
    {
    ULONG Size;
     IUnknown **apUnknown;
    } 	SAFEARR_UNKNOWN;

typedef struct _wireSAFEARR_DISPATCH
    {
    ULONG Size;
     IDispatch **apDispatch;
    } 	SAFEARR_DISPATCH;

typedef struct _wireSAFEARR_VARIANT
    {
    ULONG Size;
     wireVARIANT *aVariant;
    } 	SAFEARR_VARIANT;

typedef struct _wireSAFEARR_BRECORD
    {
    ULONG Size;
     wireBRECORD *aRecord;
    } 	SAFEARR_BRECORD;

typedef struct _wireSAFEARR_HAVEIID
    {
    ULONG Size;
     IUnknown **apUnknown;
    IID iid;
    } 	SAFEARR_HAVEIID;

typedef  
enum tagSF_TYPE
    {
        SF_ERROR	= VT_ERROR,
        SF_I1	= VT_I1,
        SF_I2	= VT_I2,
        SF_I4	= VT_I4,
        SF_I8	= VT_I8,
        SF_BSTR	= VT_BSTR,
        SF_UNKNOWN	= VT_UNKNOWN,
        SF_DISPATCH	= VT_DISPATCH,
        SF_VARIANT	= VT_VARIANT,
        SF_RECORD	= VT_RECORD,
        SF_HAVEIID	= ( VT_UNKNOWN | VT_RESERVED ) 
    } 	SF_TYPE;

typedef struct _wireSAFEARRAY_UNION
    {
    ULONG sfType;
      union __MIDL_IOleAutomationTypes_0001
        {
         SAFEARR_BSTR BstrStr;
         SAFEARR_UNKNOWN UnknownStr;
         SAFEARR_DISPATCH DispatchStr;
         SAFEARR_VARIANT VariantStr;
         SAFEARR_BRECORD RecordStr;
         SAFEARR_HAVEIID HaveIidStr;
         BYTE_SIZEDARR ByteStr;
         WORD_SIZEDARR WordStr;
         DWORD_SIZEDARR LongStr;
         HYPER_SIZEDARR HyperStr;
        } 	u;
    } 	SAFEARRAYUNION;

typedef    struct _wireSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    SAFEARRAYUNION uArrayStructs;
     SAFEARRAYBOUND rgsabound[ 1 ];
    } 	*wireSAFEARRAY;

typedef    wireSAFEARRAY *wirePSAFEARRAY;

typedef struct tagSAFEARRAY
    {
    USHORT cDims;
    USHORT fFeatures;
    ULONG cbElements;
    ULONG cLocks;
    PVOID pvData;
    SAFEARRAYBOUND rgsabound[ 1 ];
    } 	SAFEARRAY;

typedef  SAFEARRAY *LPSAFEARRAY;


















































































#line 445 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






#line 452 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
typedef  struct tagVARIANT VARIANT;

struct tagVARIANT
    {
    union 
        {
        struct 
            {
            VARTYPE vt;
            WORD wReserved1;
            WORD wReserved2;
            WORD wReserved3;
            union 
                {
                LONGLONG llVal;
                LONG lVal;
                BYTE bVal;
                SHORT iVal;
                FLOAT fltVal;
                DOUBLE dblVal;
                VARIANT_BOOL boolVal;
                
                SCODE scode;
                CY cyVal;
                DATE date;
                BSTR bstrVal;
                IUnknown *punkVal;
                IDispatch *pdispVal;
                SAFEARRAY *parray;
                BYTE *pbVal;
                SHORT *piVal;
                LONG *plVal;
                LONGLONG *pllVal;
                FLOAT *pfltVal;
                DOUBLE *pdblVal;
                VARIANT_BOOL *pboolVal;
                
                SCODE *pscode;
                CY *pcyVal;
                DATE *pdate;
                BSTR *pbstrVal;
                IUnknown **ppunkVal;
                IDispatch **ppdispVal;
                SAFEARRAY **pparray;
                VARIANT *pvarVal;
                PVOID byref;
                CHAR cVal;
                USHORT uiVal;
                ULONG ulVal;
                ULONGLONG ullVal;
                INT intVal;
                UINT uintVal;
                DECIMAL *pdecVal;
                CHAR *pcVal;
                USHORT *puiVal;
                ULONG *pulVal;
                ULONGLONG *pullVal;
                INT *pintVal;
                UINT *puintVal;
                struct 
                    {
                    PVOID pvRecord;
                    IRecordInfo *pRecInfo;
                    } 	;
                } 	;
            } 	;
        DECIMAL decVal;
        } 	;
    } ;
typedef VARIANT *LPVARIANT;

typedef VARIANT VARIANTARG;

typedef VARIANT *LPVARIANTARG;












#line 539 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
#line 540 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"

#line 542 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"


struct _wireBRECORD
    {
    ULONG fFlags;
    ULONG clSize;
    IRecordInfo *pRecInfo;
     byte *pRecord;
    } ;
struct _wireVARIANT
    {
    DWORD clSize;
    DWORD rpcReserved;
    USHORT vt;
    USHORT wReserved1;
    USHORT wReserved2;
    USHORT wReserved3;
     union 
        {
         LONGLONG llVal;
         LONG lVal;
         BYTE bVal;
         SHORT iVal;
         FLOAT fltVal;
         DOUBLE dblVal;
         VARIANT_BOOL boolVal;
         SCODE scode;
         CY cyVal;
         DATE date;
         wireBSTR bstrVal;
         IUnknown *punkVal;
         IDispatch *pdispVal;
         wirePSAFEARRAY parray;
         wireBRECORD brecVal;
         BYTE *pbVal;
         SHORT *piVal;
         LONG *plVal;
         LONGLONG *pllVal;
         FLOAT *pfltVal;
         DOUBLE *pdblVal;
         VARIANT_BOOL *pboolVal;
         SCODE *pscode;
         CY *pcyVal;
         DATE *pdate;
         wireBSTR *pbstrVal;
         IUnknown **ppunkVal;
         IDispatch **ppdispVal;
         wirePSAFEARRAY *pparray;
         wireVARIANT *pvarVal;
         CHAR cVal;
         USHORT uiVal;
         ULONG ulVal;
         ULONGLONG ullVal;
         INT intVal;
         UINT uintVal;
         DECIMAL decVal;
         DECIMAL *pdecVal;
         CHAR *pcVal;
         USHORT *puiVal;
         ULONG *pulVal;
         ULONGLONG *pullVal;
         INT *pintVal;
         UINT *puintVal;
           
           
        } 	;
    } ;
typedef LONG DISPID;

typedef DISPID MEMBERID;

typedef DWORD HREFTYPE;

typedef  
enum tagTYPEKIND
    {
        TKIND_ENUM	= 0,
        TKIND_RECORD	= ( TKIND_ENUM + 1 ) ,
        TKIND_MODULE	= ( TKIND_RECORD + 1 ) ,
        TKIND_INTERFACE	= ( TKIND_MODULE + 1 ) ,
        TKIND_DISPATCH	= ( TKIND_INTERFACE + 1 ) ,
        TKIND_COCLASS	= ( TKIND_DISPATCH + 1 ) ,
        TKIND_ALIAS	= ( TKIND_COCLASS + 1 ) ,
        TKIND_UNION	= ( TKIND_ALIAS + 1 ) ,
        TKIND_MAX	= ( TKIND_UNION + 1 ) 
    } 	TYPEKIND;

typedef struct tagTYPEDESC
    {
     union 
        {
         struct tagTYPEDESC *lptdesc;
         struct tagARRAYDESC *lpadesc;
         HREFTYPE hreftype;
           
        } 	;
    VARTYPE vt;
    } 	TYPEDESC;

typedef struct tagARRAYDESC
    {
    TYPEDESC tdescElem;
    USHORT cDims;
     SAFEARRAYBOUND rgbounds[ 1 ];
    } 	ARRAYDESC;

typedef struct tagPARAMDESCEX
    {
    ULONG cBytes;
    VARIANTARG varDefaultValue;
    } 	PARAMDESCEX;

typedef struct tagPARAMDESCEX *LPPARAMDESCEX;

typedef struct tagPARAMDESC
    {
    LPPARAMDESCEX pparamdescex;
    USHORT wParamFlags;
    } 	PARAMDESC;

typedef struct tagPARAMDESC *LPPARAMDESC;

















typedef struct tagIDLDESC
    {
    ULONG_PTR dwReserved;
    USHORT wIDLFlags;
    } 	IDLDESC;

typedef struct tagIDLDESC *LPIDLDESC;




















#line 708 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"

typedef struct tagELEMDESC {
    TYPEDESC tdesc;             
    union {
        IDLDESC idldesc;        
        PARAMDESC paramdesc;    
    } ;
} ELEMDESC, * LPELEMDESC;

#line 718 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"

typedef struct tagTYPEATTR
    {
    GUID guid;
    LCID lcid;
    DWORD dwReserved;
    MEMBERID memidConstructor;
    MEMBERID memidDestructor;
    LPOLESTR lpstrSchema;
    ULONG cbSizeInstance;
    TYPEKIND typekind;
    WORD cFuncs;
    WORD cVars;
    WORD cImplTypes;
    WORD cbSizeVft;
    WORD cbAlignment;
    WORD wTypeFlags;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    TYPEDESC tdescAlias;
    IDLDESC idldescType;
    } 	TYPEATTR;

typedef struct tagTYPEATTR *LPTYPEATTR;

typedef struct tagDISPPARAMS
    {
     VARIANTARG *rgvarg;
     DISPID *rgdispidNamedArgs;
    UINT cArgs;
    UINT cNamedArgs;
    } 	DISPPARAMS;


















#line 769 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"

typedef struct tagEXCEPINFO {
    WORD  wCode;
    WORD  wReserved;
    BSTR  bstrSource;
    BSTR  bstrDescription;
    BSTR  bstrHelpFile;
    DWORD dwHelpContext;
    PVOID pvReserved;
    HRESULT (__stdcall *pfnDeferredFillIn)(struct tagEXCEPINFO *);
    SCODE scode;
} EXCEPINFO, * LPEXCEPINFO;

#line 783 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"

typedef  
enum tagCALLCONV
    {
        CC_FASTCALL	= 0,
        CC_CDECL	= 1,
        CC_MSCPASCAL	= ( CC_CDECL + 1 ) ,
        CC_PASCAL	= CC_MSCPASCAL,
        CC_MACPASCAL	= ( CC_PASCAL + 1 ) ,
        CC_STDCALL	= ( CC_MACPASCAL + 1 ) ,
        CC_FPFASTCALL	= ( CC_STDCALL + 1 ) ,
        CC_SYSCALL	= ( CC_FPFASTCALL + 1 ) ,
        CC_MPWCDECL	= ( CC_SYSCALL + 1 ) ,
        CC_MPWPASCAL	= ( CC_MPWCDECL + 1 ) ,
        CC_MAX	= ( CC_MPWPASCAL + 1 ) 
    } 	CALLCONV;

typedef  
enum tagFUNCKIND
    {
        FUNC_VIRTUAL	= 0,
        FUNC_PUREVIRTUAL	= ( FUNC_VIRTUAL + 1 ) ,
        FUNC_NONVIRTUAL	= ( FUNC_PUREVIRTUAL + 1 ) ,
        FUNC_STATIC	= ( FUNC_NONVIRTUAL + 1 ) ,
        FUNC_DISPATCH	= ( FUNC_STATIC + 1 ) 
    } 	FUNCKIND;

typedef  
enum tagINVOKEKIND
    {
        INVOKE_FUNC	= 1,
        INVOKE_PROPERTYGET	= 2,
        INVOKE_PROPERTYPUT	= 4,
        INVOKE_PROPERTYPUTREF	= 8
    } 	INVOKEKIND;

typedef struct tagFUNCDESC
    {
    MEMBERID memid;
     SCODE *lprgscode;
     ELEMDESC *lprgelemdescParam;
    FUNCKIND funckind;
    INVOKEKIND invkind;
    CALLCONV callconv;
    SHORT cParams;
    SHORT cParamsOpt;
    SHORT oVft;
    SHORT cScodes;
    ELEMDESC elemdescFunc;
    WORD wFuncFlags;
    } 	FUNCDESC;

typedef struct tagFUNCDESC *LPFUNCDESC;

typedef  
enum tagVARKIND
    {
        VAR_PERINSTANCE	= 0,
        VAR_STATIC	= ( VAR_PERINSTANCE + 1 ) ,
        VAR_CONST	= ( VAR_STATIC + 1 ) ,
        VAR_DISPATCH	= ( VAR_CONST + 1 ) 
    } 	VARKIND;









typedef struct tagVARDESC
    {
    MEMBERID memid;
    LPOLESTR lpstrSchema;
     union 
        {
         ULONG oInst;
         VARIANT *lpvarValue;
        } 	;
    ELEMDESC elemdescVar;
    WORD wVarFlags;
    VARKIND varkind;
    } 	VARDESC;

typedef struct tagVARDESC *LPVARDESC;

typedef 
enum tagTYPEFLAGS
    {
        TYPEFLAG_FAPPOBJECT	= 0x1,
        TYPEFLAG_FCANCREATE	= 0x2,
        TYPEFLAG_FLICENSED	= 0x4,
        TYPEFLAG_FPREDECLID	= 0x8,
        TYPEFLAG_FHIDDEN	= 0x10,
        TYPEFLAG_FCONTROL	= 0x20,
        TYPEFLAG_FDUAL	= 0x40,
        TYPEFLAG_FNONEXTENSIBLE	= 0x80,
        TYPEFLAG_FOLEAUTOMATION	= 0x100,
        TYPEFLAG_FRESTRICTED	= 0x200,
        TYPEFLAG_FAGGREGATABLE	= 0x400,
        TYPEFLAG_FREPLACEABLE	= 0x800,
        TYPEFLAG_FDISPATCHABLE	= 0x1000,
        TYPEFLAG_FREVERSEBIND	= 0x2000,
        TYPEFLAG_FPROXY	= 0x4000
    } 	TYPEFLAGS;

typedef 
enum tagFUNCFLAGS
    {
        FUNCFLAG_FRESTRICTED	= 0x1,
        FUNCFLAG_FSOURCE	= 0x2,
        FUNCFLAG_FBINDABLE	= 0x4,
        FUNCFLAG_FREQUESTEDIT	= 0x8,
        FUNCFLAG_FDISPLAYBIND	= 0x10,
        FUNCFLAG_FDEFAULTBIND	= 0x20,
        FUNCFLAG_FHIDDEN	= 0x40,
        FUNCFLAG_FUSESGETLASTERROR	= 0x80,
        FUNCFLAG_FDEFAULTCOLLELEM	= 0x100,
        FUNCFLAG_FUIDEFAULT	= 0x200,
        FUNCFLAG_FNONBROWSABLE	= 0x400,
        FUNCFLAG_FREPLACEABLE	= 0x800,
        FUNCFLAG_FIMMEDIATEBIND	= 0x1000
    } 	FUNCFLAGS;

typedef 
enum tagVARFLAGS
    {
        VARFLAG_FREADONLY	= 0x1,
        VARFLAG_FSOURCE	= 0x2,
        VARFLAG_FBINDABLE	= 0x4,
        VARFLAG_FREQUESTEDIT	= 0x8,
        VARFLAG_FDISPLAYBIND	= 0x10,
        VARFLAG_FDEFAULTBIND	= 0x20,
        VARFLAG_FHIDDEN	= 0x40,
        VARFLAG_FRESTRICTED	= 0x80,
        VARFLAG_FDEFAULTCOLLELEM	= 0x100,
        VARFLAG_FUIDEFAULT	= 0x200,
        VARFLAG_FNONBROWSABLE	= 0x400,
        VARFLAG_FREPLACEABLE	= 0x800,
        VARFLAG_FIMMEDIATEBIND	= 0x1000
    } 	VARFLAGS;

typedef  struct tagCLEANLOCALSTORAGE
    {
    IUnknown *pInterface;
    PVOID pStorage;
    DWORD flags;
    } 	CLEANLOCALSTORAGE;

typedef struct tagCUSTDATAITEM
    {
    GUID guid;
    VARIANTARG varValue;
    } 	CUSTDATAITEM;

typedef struct tagCUSTDATAITEM *LPCUSTDATAITEM;

typedef struct tagCUSTDATA
    {
    DWORD cCustData;
     LPCUSTDATAITEM prgCustData;
    } 	CUSTDATA;

typedef struct tagCUSTDATA *LPCUSTDATA;



extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_c_ifspec;
extern RPC_IF_HANDLE IOleAutomationTypes_v1_0_s_ifspec;
#line 954 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"


 

#line 959 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0001_v0_0_s_ifspec;





 

typedef  ICreateTypeInfo *LPCREATETYPEINFO;


extern "C" const IID IID_ICreateTypeInfo;


    
    struct __declspec(uuid("00020405-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGuid( 
             const GUID & guid) = 0;
        
        virtual HRESULT __stdcall SetTypeFlags( 
             UINT uTypeFlags) = 0;
        
        virtual HRESULT __stdcall SetDocString( 
             
              LPOLESTR pStrDoc) = 0;
        
        virtual HRESULT __stdcall SetHelpContext( 
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetVersion( 
             WORD wMajorVerNum,
             WORD wMinorVerNum) = 0;
        
        virtual HRESULT __stdcall AddRefTypeInfo( 
             ITypeInfo *pTInfo,
             HREFTYPE *phRefType) = 0;
        
        virtual HRESULT __stdcall AddFuncDesc( 
             UINT index,
             FUNCDESC *pFuncDesc) = 0;
        
        virtual HRESULT __stdcall AddImplType( 
             UINT index,
             HREFTYPE hRefType) = 0;
        
        virtual HRESULT __stdcall SetImplTypeFlags( 
             UINT index,
             INT implTypeFlags) = 0;
        
        virtual HRESULT __stdcall SetAlignment( 
             WORD cbAlignment) = 0;
        
        virtual HRESULT __stdcall SetSchema( 
             
              LPOLESTR pStrSchema) = 0;
        
        virtual HRESULT __stdcall AddVarDesc( 
             UINT index,
             VARDESC *pVarDesc) = 0;
        
        virtual HRESULT __stdcall SetFuncAndParamNames( 
             UINT index,
             
              LPOLESTR *rgszNames,
             UINT cNames) = 0;
        
        virtual HRESULT __stdcall SetVarName( 
             UINT index,
             
              LPOLESTR szName) = 0;
        
        virtual HRESULT __stdcall SetTypeDescAlias( 
             TYPEDESC *pTDescAlias) = 0;
        
        virtual HRESULT __stdcall DefineFuncAsDllEntry( 
             UINT index,
             
              LPOLESTR szDllName,
             
              LPOLESTR szProcName) = 0;
        
        virtual HRESULT __stdcall SetFuncDocString( 
             UINT index,
             
              LPOLESTR szDocString) = 0;
        
        virtual HRESULT __stdcall SetVarDocString( 
             UINT index,
             
              LPOLESTR szDocString) = 0;
        
        virtual HRESULT __stdcall SetFuncHelpContext( 
             UINT index,
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetVarHelpContext( 
             UINT index,
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetMops( 
             UINT index,
             BSTR bstrMops) = 0;
        
        virtual HRESULT __stdcall SetTypeIdldesc( 
             IDLDESC *pIdlDesc) = 0;
        
        virtual HRESULT __stdcall LayOut( void) = 0;
        
    };
    
    




































































































































































































































#line 1308 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




#line 1313 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 

typedef  ICreateTypeInfo2 *LPCREATETYPEINFO2;


extern "C" const IID IID_ICreateTypeInfo2;


    
    struct __declspec(uuid("0002040E-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeInfo2 : public ICreateTypeInfo
    {
    public:
        virtual HRESULT __stdcall DeleteFuncDesc( 
             UINT index) = 0;
        
        virtual HRESULT __stdcall DeleteFuncDescByMemId( 
             MEMBERID memid,
             INVOKEKIND invKind) = 0;
        
        virtual HRESULT __stdcall DeleteVarDesc( 
             UINT index) = 0;
        
        virtual HRESULT __stdcall DeleteVarDescByMemId( 
             MEMBERID memid) = 0;
        
        virtual HRESULT __stdcall DeleteImplType( 
             UINT index) = 0;
        
        virtual HRESULT __stdcall SetCustData( 
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetFuncCustData( 
             UINT index,
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetParamCustData( 
             UINT indexFunc,
             UINT indexParam,
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetVarCustData( 
             UINT index,
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetImplTypeCustData( 
             UINT index,
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetHelpStringContext( 
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall SetFuncHelpStringContext( 
             UINT index,
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall SetVarHelpStringContext( 
             UINT index,
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall Invalidate( void) = 0;
        
        virtual HRESULT __stdcall SetName( 
             
              LPOLESTR szName) = 0;
        
    };
    
    



























































































































































































































































































































































#line 1741 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




#line 1746 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 

typedef  ICreateTypeLib *LPCREATETYPELIB;


extern "C" const IID IID_ICreateTypeLib;


    
    struct __declspec(uuid("00020406-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeLib : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateTypeInfo( 
             
              LPOLESTR szName,
             TYPEKIND tkind,
             ICreateTypeInfo **ppCTInfo) = 0;
        
        virtual HRESULT __stdcall SetName( 
             
              LPOLESTR szName) = 0;
        
        virtual HRESULT __stdcall SetVersion( 
             WORD wMajorVerNum,
             WORD wMinorVerNum) = 0;
        
        virtual HRESULT __stdcall SetGuid( 
             const GUID & guid) = 0;
        
        virtual HRESULT __stdcall SetDocString( 
             
              LPOLESTR szDoc) = 0;
        
        virtual HRESULT __stdcall SetHelpFileName( 
             
              LPOLESTR szHelpFileName) = 0;
        
        virtual HRESULT __stdcall SetHelpContext( 
             DWORD dwHelpContext) = 0;
        
        virtual HRESULT __stdcall SetLcid( 
             LCID lcid) = 0;
        
        virtual HRESULT __stdcall SetLibFlags( 
             UINT uLibFlags) = 0;
        
        virtual HRESULT __stdcall SaveAllChanges( void) = 0;
        
    };
    
    
























































































































#line 1925 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




#line 1930 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 

typedef  ICreateTypeLib2 *LPCREATETYPELIB2;


extern "C" const IID IID_ICreateTypeLib2;


    
    struct __declspec(uuid("0002040F-0000-0000-C000-000000000046")) __declspec(novtable)
    ICreateTypeLib2 : public ICreateTypeLib
    {
    public:
        virtual HRESULT __stdcall DeleteTypeInfo( 
             
              LPOLESTR szName) = 0;
        
        virtual HRESULT __stdcall SetCustData( 
             const GUID & guid,
             VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall SetHelpStringContext( 
             ULONG dwHelpStringContext) = 0;
        
        virtual HRESULT __stdcall SetHelpStringDll( 
             
              LPOLESTR szFileName) = 0;
        
    };
    
    
























































































































































#line 2120 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




#line 2125 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 

#line 2131 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0005_v0_0_s_ifspec;





 

typedef    IDispatch *LPDISPATCH;

































extern "C" const IID IID_IDispatch;


    
    struct __declspec(uuid("00020400-0000-0000-C000-000000000046")) __declspec(novtable)
    IDispatch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetTypeInfoCount( 
              UINT *pctinfo) = 0;
        
        virtual HRESULT __stdcall GetTypeInfo( 
             UINT iTInfo,
             LCID lcid,
              ITypeInfo **ppTInfo) = 0;
        
        virtual HRESULT __stdcall GetIDsOfNames( 
              const IID & riid,
              LPOLESTR *rgszNames,
              UINT cNames,
             LCID lcid,
              DISPID *rgDispId) = 0;
        
        virtual  HRESULT __stdcall Invoke( 
             
               DISPID dispIdMember,
             
               const IID & riid,
             
               LCID lcid,
             
               WORD wFlags,
             
               DISPPARAMS *pDispParams,
             
               VARIANT *pVarResult,
             
               EXCEPINFO *pExcepInfo,
             
               UINT *puArgErr) = 0;
        
    };
    
    





























































































#line 2317 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 HRESULT __stdcall IDispatch_RemoteInvoke_Proxy( 
     IDispatch * This,
     DISPID dispIdMember,
      const IID & riid,
     LCID lcid,
     DWORD dwFlags,
      DISPPARAMS *pDispParams,
      VARIANT *pVarResult,
      EXCEPINFO *pExcepInfo,
      UINT *pArgErr,
     UINT cVarRef,
      UINT *rgVarRefIdx,
      VARIANTARG *rgVarRef);


void __stdcall IDispatch_RemoteInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2344 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 

typedef    IEnumVARIANT *LPENUMVARIANT;


extern "C" const IID IID_IEnumVARIANT;


    
    struct __declspec(uuid("00020404-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumVARIANT : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             VARIANT *rgVar,
             ULONG *pCeltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
              IEnumVARIANT **ppEnum) = 0;
        
    };
    
    









































































#line 2453 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 HRESULT __stdcall IEnumVARIANT_RemoteNext_Proxy( 
     IEnumVARIANT * This,
     ULONG celt,
      VARIANT *rgVar,
      ULONG *pCeltFetched);


void __stdcall IEnumVARIANT_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2472 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 

typedef    ITypeComp *LPTYPECOMP;

typedef  
enum tagDESCKIND
    {
        DESCKIND_NONE	= 0,
        DESCKIND_FUNCDESC	= ( DESCKIND_NONE + 1 ) ,
        DESCKIND_VARDESC	= ( DESCKIND_FUNCDESC + 1 ) ,
        DESCKIND_TYPECOMP	= ( DESCKIND_VARDESC + 1 ) ,
        DESCKIND_IMPLICITAPPOBJ	= ( DESCKIND_TYPECOMP + 1 ) ,
        DESCKIND_MAX	= ( DESCKIND_IMPLICITAPPOBJ + 1 ) 
    } 	DESCKIND;

typedef union tagBINDPTR
    {
    FUNCDESC *lpfuncdesc;
    VARDESC *lpvardesc;
    ITypeComp *lptcomp;
    } 	BINDPTR;

typedef union tagBINDPTR *LPBINDPTR;


extern "C" const IID IID_ITypeComp;


    
    struct __declspec(uuid("00020403-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeComp : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Bind( 
             
              LPOLESTR szName,
             ULONG lHashVal,
             WORD wFlags,
             ITypeInfo **ppTInfo,
             DESCKIND *pDescKind,
             BINDPTR *pBindPtr) = 0;
        
        virtual  HRESULT __stdcall BindType( 
             
              LPOLESTR szName,
             ULONG lHashVal,
             ITypeInfo **ppTInfo,
             ITypeComp **ppTComp) = 0;
        
    };
    
    




































































#line 2599 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 HRESULT __stdcall ITypeComp_RemoteBind_Proxy( 
     ITypeComp * This,
      LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
      ITypeInfo **ppTInfo,
      DESCKIND *pDescKind,
      LPFUNCDESC *ppFuncDesc,
      LPVARDESC *ppVarDesc,
      ITypeComp **ppTypeComp,
      CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeComp_RemoteBind_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeComp_RemoteBindType_Proxy( 
     ITypeComp * This,
      LPOLESTR szName,
     ULONG lHashVal,
      ITypeInfo **ppTInfo);


void __stdcall ITypeComp_RemoteBindType_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 2638 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 

#line 2644 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0008_v0_0_s_ifspec;





 

typedef    ITypeInfo *LPTYPEINFO;


extern "C" const IID IID_ITypeInfo;


    
    struct __declspec(uuid("00020401-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeInfo : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetTypeAttr( 
             TYPEATTR **ppTypeAttr) = 0;
        
        virtual HRESULT __stdcall GetTypeComp( 
              ITypeComp **ppTComp) = 0;
        
        virtual  HRESULT __stdcall GetFuncDesc( 
             UINT index,
             FUNCDESC **ppFuncDesc) = 0;
        
        virtual  HRESULT __stdcall GetVarDesc( 
             UINT index,
             VARDESC **ppVarDesc) = 0;
        
        virtual  HRESULT __stdcall GetNames( 
             MEMBERID memid,
             BSTR *rgBstrNames,
             UINT cMaxNames,
             UINT *pcNames) = 0;
        
        virtual HRESULT __stdcall GetRefTypeOfImplType( 
             UINT index,
              HREFTYPE *pRefType) = 0;
        
        virtual HRESULT __stdcall GetImplTypeFlags( 
             UINT index,
              INT *pImplTypeFlags) = 0;
        
        virtual  HRESULT __stdcall GetIDsOfNames( 
             
              LPOLESTR *rgszNames,
             UINT cNames,
             MEMBERID *pMemId) = 0;
        
        virtual  HRESULT __stdcall Invoke( 
             PVOID pvInstance,
             MEMBERID memid,
             WORD wFlags,
             DISPPARAMS *pDispParams,
             VARIANT *pVarResult,
             EXCEPINFO *pExcepInfo,
             UINT *puArgErr) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation( 
             MEMBERID memid,
             BSTR *pBstrName,
             BSTR *pBstrDocString,
             DWORD *pdwHelpContext,
             BSTR *pBstrHelpFile) = 0;
        
        virtual  HRESULT __stdcall GetDllEntry( 
             MEMBERID memid,
             INVOKEKIND invKind,
             BSTR *pBstrDllName,
             BSTR *pBstrName,
             WORD *pwOrdinal) = 0;
        
        virtual HRESULT __stdcall GetRefTypeInfo( 
             HREFTYPE hRefType,
              ITypeInfo **ppTInfo) = 0;
        
        virtual  HRESULT __stdcall AddressOfMember( 
             MEMBERID memid,
             INVOKEKIND invKind,
             PVOID *ppv) = 0;
        
        virtual  HRESULT __stdcall CreateInstance( 
             IUnknown *pUnkOuter,
             const IID & riid,
             PVOID *ppvObj) = 0;
        
        virtual HRESULT __stdcall GetMops( 
             MEMBERID memid,
              BSTR *pBstrMops) = 0;
        
        virtual  HRESULT __stdcall GetContainingTypeLib( 
             ITypeLib **ppTLib,
             UINT *pIndex) = 0;
        
        virtual  void __stdcall ReleaseTypeAttr( 
             TYPEATTR *pTypeAttr) = 0;
        
        virtual  void __stdcall ReleaseFuncDesc( 
             FUNCDESC *pFuncDesc) = 0;
        
        virtual  void __stdcall ReleaseVarDesc( 
             VARDESC *pVarDesc) = 0;
        
    };
    
    
















































































































































































































#line 2969 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 HRESULT __stdcall ITypeInfo_RemoteGetTypeAttr_Proxy( 
     ITypeInfo * This,
      LPTYPEATTR *ppTypeAttr,
      CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetFuncDesc_Proxy( 
     ITypeInfo * This,
     UINT index,
      LPFUNCDESC *ppFuncDesc,
      CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetVarDesc_Proxy( 
     ITypeInfo * This,
     UINT index,
      LPVARDESC *ppVarDesc,
      CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeInfo_RemoteGetVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetNames_Proxy( 
     ITypeInfo * This,
     MEMBERID memid,
      BSTR *rgBstrNames,
     UINT cMaxNames,
      UINT *pcNames);


void __stdcall ITypeInfo_RemoteGetNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalGetIDsOfNames_Proxy( 
     ITypeInfo * This);


void __stdcall ITypeInfo_LocalGetIDsOfNames_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalInvoke_Proxy( 
     ITypeInfo * This);


void __stdcall ITypeInfo_LocalInvoke_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetDocumentation_Proxy( 
     ITypeInfo * This,
     MEMBERID memid,
     DWORD refPtrFlags,
      BSTR *pBstrName,
      BSTR *pBstrDocString,
      DWORD *pdwHelpContext,
      BSTR *pBstrHelpFile);


void __stdcall ITypeInfo_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetDllEntry_Proxy( 
     ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     DWORD refPtrFlags,
      BSTR *pBstrDllName,
      BSTR *pBstrName,
      WORD *pwOrdinal);


void __stdcall ITypeInfo_RemoteGetDllEntry_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalAddressOfMember_Proxy( 
     ITypeInfo * This);


void __stdcall ITypeInfo_LocalAddressOfMember_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteCreateInstance_Proxy( 
     ITypeInfo * This,
      const IID & riid,
      IUnknown **ppvObj);


void __stdcall ITypeInfo_RemoteCreateInstance_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_RemoteGetContainingTypeLib_Proxy( 
     ITypeInfo * This,
      ITypeLib **ppTLib,
      UINT *pIndex);


void __stdcall ITypeInfo_RemoteGetContainingTypeLib_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseTypeAttr_Proxy( 
     ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseTypeAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseFuncDesc_Proxy( 
     ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseFuncDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeInfo_LocalReleaseVarDesc_Proxy( 
     ITypeInfo * This);


void __stdcall ITypeInfo_LocalReleaseVarDesc_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3156 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 

typedef    ITypeInfo2 *LPTYPEINFO2;


extern "C" const IID IID_ITypeInfo2;


    
    struct __declspec(uuid("00020412-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeInfo2 : public ITypeInfo
    {
    public:
        virtual HRESULT __stdcall GetTypeKind( 
              TYPEKIND *pTypeKind) = 0;
        
        virtual HRESULT __stdcall GetTypeFlags( 
              ULONG *pTypeFlags) = 0;
        
        virtual HRESULT __stdcall GetFuncIndexOfMemId( 
             MEMBERID memid,
             INVOKEKIND invKind,
              UINT *pFuncIndex) = 0;
        
        virtual HRESULT __stdcall GetVarIndexOfMemId( 
             MEMBERID memid,
              UINT *pVarIndex) = 0;
        
        virtual HRESULT __stdcall GetCustData( 
              const GUID & guid,
              VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetFuncCustData( 
             UINT index,
              const GUID & guid,
              VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetParamCustData( 
             UINT indexFunc,
             UINT indexParam,
              const GUID & guid,
              VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetVarCustData( 
             UINT index,
              const GUID & guid,
              VARIANT *pVarVal) = 0;
        
        virtual HRESULT __stdcall GetImplTypeCustData( 
             UINT index,
              const GUID & guid,
              VARIANT *pVarVal) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation2( 
             MEMBERID memid,
             LCID lcid,
             BSTR *pbstrHelpString,
             DWORD *pdwHelpStringContext,
             BSTR *pbstrHelpStringDll) = 0;
        
        virtual HRESULT __stdcall GetAllCustData( 
              CUSTDATA *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllFuncCustData( 
             UINT index,
              CUSTDATA *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllParamCustData( 
             UINT indexFunc,
             UINT indexParam,
              CUSTDATA *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllVarCustData( 
             UINT index,
              CUSTDATA *pCustData) = 0;
        
        virtual HRESULT __stdcall GetAllImplTypeCustData( 
             UINT index,
              CUSTDATA *pCustData) = 0;
        
    };
    
    
















































































































































































































































































































































#line 3582 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 HRESULT __stdcall ITypeInfo2_RemoteGetDocumentation2_Proxy( 
     ITypeInfo2 * This,
     MEMBERID memid,
     LCID lcid,
     DWORD refPtrFlags,
      BSTR *pbstrHelpString,
      DWORD *pdwHelpStringContext,
      BSTR *pbstrHelpStringDll);


void __stdcall ITypeInfo2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3604 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 

#line 3610 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
#pragma endregion
#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0010_v0_0_s_ifspec;





 

typedef  
enum tagSYSKIND
    {
        SYS_WIN16	= 0,
        SYS_WIN32	= ( SYS_WIN16 + 1 ) ,
        SYS_MAC	= ( SYS_WIN32 + 1 ) ,
        SYS_WIN64	= ( SYS_MAC + 1 ) 
    } 	SYSKIND;

typedef  
enum tagLIBFLAGS
    {
        LIBFLAG_FRESTRICTED	= 0x1,
        LIBFLAG_FCONTROL	= 0x2,
        LIBFLAG_FHIDDEN	= 0x4,
        LIBFLAG_FHASDISKIMAGE	= 0x8
    } 	LIBFLAGS;

typedef    ITypeLib *LPTYPELIB;

typedef struct tagTLIBATTR
    {
    GUID guid;
    LCID lcid;
    SYSKIND syskind;
    WORD wMajorVerNum;
    WORD wMinorVerNum;
    WORD wLibFlags;
    } 	TLIBATTR;

typedef struct tagTLIBATTR *LPTLIBATTR;


extern "C" const IID IID_ITypeLib;


    
    struct __declspec(uuid("00020402-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeLib : public IUnknown
    {
    public:
        virtual  UINT __stdcall GetTypeInfoCount( void) = 0;
        
        virtual HRESULT __stdcall GetTypeInfo( 
             UINT index,
              ITypeInfo **ppTInfo) = 0;
        
        virtual HRESULT __stdcall GetTypeInfoType( 
             UINT index,
              TYPEKIND *pTKind) = 0;
        
        virtual HRESULT __stdcall GetTypeInfoOfGuid( 
              const GUID & guid,
              ITypeInfo **ppTinfo) = 0;
        
        virtual  HRESULT __stdcall GetLibAttr( 
             TLIBATTR **ppTLibAttr) = 0;
        
        virtual HRESULT __stdcall GetTypeComp( 
              ITypeComp **ppTComp) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation( 
             INT index,
             BSTR *pBstrName,
             BSTR *pBstrDocString,
             DWORD *pdwHelpContext,
             BSTR *pBstrHelpFile) = 0;
        
        virtual  HRESULT __stdcall IsName( 
             
              LPOLESTR szNameBuf,
             ULONG lHashVal,
             BOOL *pfName) = 0;
        
        virtual  HRESULT __stdcall FindName( 
             
              LPOLESTR szNameBuf,
             ULONG lHashVal,
             ITypeInfo **ppTInfo,
             MEMBERID *rgMemId,
             USHORT *pcFound) = 0;
        
        virtual  void __stdcall ReleaseTLibAttr( 
             TLIBATTR *pTLibAttr) = 0;
        
    };
    
    
































































































































#line 3841 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 HRESULT __stdcall ITypeLib_RemoteGetTypeInfoCount_Proxy( 
     ITypeLib * This,
      UINT *pcTInfo);


void __stdcall ITypeLib_RemoteGetTypeInfoCount_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteGetLibAttr_Proxy( 
     ITypeLib * This,
      LPTLIBATTR *ppTLibAttr,
      CLEANLOCALSTORAGE *pDummy);


void __stdcall ITypeLib_RemoteGetLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteGetDocumentation_Proxy( 
     ITypeLib * This,
     INT index,
     DWORD refPtrFlags,
      BSTR *pBstrName,
      BSTR *pBstrDocString,
      DWORD *pdwHelpContext,
      BSTR *pBstrHelpFile);


void __stdcall ITypeLib_RemoteGetDocumentation_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteIsName_Proxy( 
     ITypeLib * This,
      LPOLESTR szNameBuf,
     ULONG lHashVal,
      BOOL *pfName,
      BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteIsName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_RemoteFindName_Proxy( 
     ITypeLib * This,
      LPOLESTR szNameBuf,
     ULONG lHashVal,
      ITypeInfo **ppTInfo,
      MEMBERID *rgMemId,
      USHORT *pcFound,
      BSTR *pBstrLibName);


void __stdcall ITypeLib_RemoteFindName_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib_LocalReleaseTLibAttr_Proxy( 
     ITypeLib * This);


void __stdcall ITypeLib_LocalReleaseTLibAttr_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3931 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 

#line 3937 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
#pragma endregion
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0011_v0_0_s_ifspec;





 

typedef    ITypeLib2 *LPTYPELIB2;


extern "C" const IID IID_ITypeLib2;


    
    struct __declspec(uuid("00020411-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeLib2 : public ITypeLib
    {
    public:
        virtual HRESULT __stdcall GetCustData( 
              const GUID & guid,
              VARIANT *pVarVal) = 0;
        
        virtual  HRESULT __stdcall GetLibStatistics( 
             ULONG *pcUniqueNames,
             ULONG *pcchUniqueNames) = 0;
        
        virtual  HRESULT __stdcall GetDocumentation2( 
             INT index,
             LCID lcid,
             BSTR *pbstrHelpString,
             DWORD *pdwHelpStringContext,
             BSTR *pbstrHelpStringDll) = 0;
        
        virtual HRESULT __stdcall GetAllCustData( 
              CUSTDATA *pCustData) = 0;
        
    };
    
    



































































































































































#line 4147 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 HRESULT __stdcall ITypeLib2_RemoteGetLibStatistics_Proxy( 
     ITypeLib2 * This,
      ULONG *pcUniqueNames,
      ULONG *pcchUniqueNames);


void __stdcall ITypeLib2_RemoteGetLibStatistics_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall ITypeLib2_RemoteGetDocumentation2_Proxy( 
     ITypeLib2 * This,
     INT index,
     LCID lcid,
     DWORD refPtrFlags,
      BSTR *pbstrHelpString,
      DWORD *pdwHelpStringContext,
      BSTR *pbstrHelpStringDll);


void __stdcall ITypeLib2_RemoteGetDocumentation2_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4182 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 

typedef  ITypeChangeEvents *LPTYPECHANGEEVENTS;

typedef 
enum tagCHANGEKIND
    {
        CHANGEKIND_ADDMEMBER	= 0,
        CHANGEKIND_DELETEMEMBER	= ( CHANGEKIND_ADDMEMBER + 1 ) ,
        CHANGEKIND_SETNAMES	= ( CHANGEKIND_DELETEMEMBER + 1 ) ,
        CHANGEKIND_SETDOCUMENTATION	= ( CHANGEKIND_SETNAMES + 1 ) ,
        CHANGEKIND_GENERAL	= ( CHANGEKIND_SETDOCUMENTATION + 1 ) ,
        CHANGEKIND_INVALIDATE	= ( CHANGEKIND_GENERAL + 1 ) ,
        CHANGEKIND_CHANGEFAILED	= ( CHANGEKIND_INVALIDATE + 1 ) ,
        CHANGEKIND_MAX	= ( CHANGEKIND_CHANGEFAILED + 1 ) 
    } 	CHANGEKIND;


extern "C" const IID IID_ITypeChangeEvents;


    
    struct __declspec(uuid("00020410-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeChangeEvents : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RequestTypeChange( 
             CHANGEKIND changeKind,
             ITypeInfo *pTInfoBefore,
             
              LPOLESTR pStrName,
             INT *pfCancel) = 0;
        
        virtual HRESULT __stdcall AfterTypeChange( 
             CHANGEKIND changeKind,
             ITypeInfo *pTInfoAfter,
             
              LPOLESTR pStrName) = 0;
        
    };
    
    

































































#line 4296 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




#line 4301 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 

typedef    IErrorInfo *LPERRORINFO;


extern "C" const IID IID_IErrorInfo;


    
    struct __declspec(uuid("1CF2B120-547D-101B-8E65-08002B2BD119")) __declspec(novtable)
    IErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetGUID( 
              GUID *pGUID) = 0;
        
        virtual HRESULT __stdcall GetSource( 
              BSTR *pBstrSource) = 0;
        
        virtual HRESULT __stdcall GetDescription( 
              BSTR *pBstrDescription) = 0;
        
        virtual HRESULT __stdcall GetHelpFile( 
              BSTR *pBstrHelpFile) = 0;
        
        virtual HRESULT __stdcall GetHelpContext( 
              DWORD *pdwHelpContext) = 0;
        
    };
    
    















































































#line 4418 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




#line 4423 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 

typedef    ICreateErrorInfo *LPCREATEERRORINFO;


extern "C" const IID IID_ICreateErrorInfo;


    
    struct __declspec(uuid("22F03340-547D-101B-8E65-08002B2BD119")) __declspec(novtable)
    ICreateErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetGUID( 
              const GUID & rguid) = 0;
        
        virtual HRESULT __stdcall SetSource( 
              LPOLESTR szSource) = 0;
        
        virtual HRESULT __stdcall SetDescription( 
              LPOLESTR szDescription) = 0;
        
        virtual HRESULT __stdcall SetHelpFile( 
              LPOLESTR szHelpFile) = 0;
        
        virtual HRESULT __stdcall SetHelpContext( 
             DWORD dwHelpContext) = 0;
        
    };
    
    















































































#line 4540 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




#line 4545 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 

typedef    ISupportErrorInfo *LPSUPPORTERRORINFO;


extern "C" const IID IID_ISupportErrorInfo;


    
    struct __declspec(uuid("DF0B3D60-548F-101B-8E65-08002B2BD119")) __declspec(novtable)
    ISupportErrorInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall InterfaceSupportsErrorInfo( 
              const IID & riid) = 0;
        
    };
    
    



















































#line 4622 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




#line 4627 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 


extern "C" const IID IID_ITypeFactory;


    
    struct __declspec(uuid("0000002E-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateFromTypeInfo( 
              ITypeInfo *pTypeInfo,
              const IID & riid,
              IUnknown **ppv) = 0;
        
    };
    
    





















































#line 4706 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




#line 4711 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 


extern "C" const IID IID_ITypeMarshal;


    
    struct __declspec(uuid("0000002D-0000-0000-C000-000000000046")) __declspec(novtable)
    ITypeMarshal : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Size( 
             PVOID pvType,
             DWORD dwDestContext,
             PVOID pvDestContext,
             ULONG *pSize) = 0;
        
        virtual HRESULT __stdcall Marshal( 
             PVOID pvType,
             DWORD dwDestContext,
             PVOID pvDestContext,
             ULONG cbBufferLength,
             
               BYTE *pBuffer,
             
               ULONG *pcbWritten) = 0;
        
        virtual HRESULT __stdcall Unmarshal( 
             PVOID pvType,
             DWORD dwFlags,
             ULONG cbBufferLength,
             
               BYTE *pBuffer,
             
               ULONG *pcbRead) = 0;
        
        virtual HRESULT __stdcall Free( 
             PVOID pvType) = 0;
        
    };
    
    
























































































#line 4848 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




#line 4853 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 

typedef  IRecordInfo *LPRECORDINFO;


extern "C" const IID IID_IRecordInfo;


    
    struct __declspec(uuid("0000002F-0000-0000-C000-000000000046")) __declspec(novtable)
    IRecordInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RecordInit( 
             PVOID pvNew) = 0;
        
        virtual HRESULT __stdcall RecordClear( 
             PVOID pvExisting) = 0;
        
        virtual HRESULT __stdcall RecordCopy( 
             PVOID pvExisting,
             PVOID pvNew) = 0;
        
        virtual HRESULT __stdcall GetGuid( 
             GUID *pguid) = 0;
        
        virtual HRESULT __stdcall GetName( 
             BSTR *pbstrName) = 0;
        
        virtual HRESULT __stdcall GetSize( 
             ULONG *pcbSize) = 0;
        
        virtual HRESULT __stdcall GetTypeInfo( 
             ITypeInfo **ppTypeInfo) = 0;
        
        virtual HRESULT __stdcall GetField( 
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField) = 0;
        
        virtual HRESULT __stdcall GetFieldNoCopy( 
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField,
             PVOID *ppvDataCArray) = 0;
        
        virtual HRESULT __stdcall PutField( 
             ULONG wFlags,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField) = 0;
        
        virtual HRESULT __stdcall PutFieldNoCopy( 
             ULONG wFlags,
             PVOID pvData,
             LPCOLESTR szFieldName,
             VARIANT *pvarField) = 0;
        
        virtual HRESULT __stdcall GetFieldNames( 
             ULONG *pcNames,
             BSTR *rgBstrNames) = 0;
        
        virtual BOOL __stdcall IsMatchingType( 
             IRecordInfo *pRecordInfo) = 0;
        
        virtual PVOID __stdcall RecordCreate( void) = 0;
        
        virtual HRESULT __stdcall RecordCreateCopy( 
             PVOID pvSource,
             PVOID *ppvDest) = 0;
        
        virtual HRESULT __stdcall RecordDestroy( 
             PVOID pvRecord) = 0;
        
    };
    
    









































































































































































#line 5106 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




#line 5111 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 

typedef IErrorLog *LPERRORLOG;


extern "C" const IID IID_IErrorLog;


    
    struct __declspec(uuid("3127CA40-446E-11CE-8135-00AA004BB851")) __declspec(novtable)
    IErrorLog : public IUnknown
    {
    public:
        virtual HRESULT __stdcall AddError( 
              LPCOLESTR pszPropName,
              EXCEPINFO *pExcepInfo) = 0;
        
    };
    
    




















































#line 5190 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"




#line 5195 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"






 

typedef IPropertyBag *LPPROPERTYBAG;


extern "C" const IID IID_IPropertyBag;


    
    struct __declspec(uuid("55272A00-42CB-11CE-8135-00AA004BB851")) __declspec(novtable)
    IPropertyBag : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Read( 
             LPCOLESTR pszPropName,
             VARIANT *pVar,
             IErrorLog *pErrorLog) = 0;
        
        virtual HRESULT __stdcall Write( 
              LPCOLESTR pszPropName,
              VARIANT *pVar) = 0;
        
    };
    
    





























































#line 5288 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 HRESULT __stdcall IPropertyBag_RemoteRead_Proxy( 
     IPropertyBag * This,
      LPCOLESTR pszPropName,
      VARIANT *pVar,
      IErrorLog *pErrorLog,
     DWORD varType,
      IUnknown *pUnkObj);


void __stdcall IPropertyBag_RemoteRead_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 5309 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



 

#line 5315 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
#pragma endregion


#pragma warning(pop)


#line 5322 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"
#line 5323 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"


extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_oaidl_0000_0021_v0_0_s_ifspec;



unsigned long             __stdcall  BSTR_UserSize(      unsigned long *, unsigned long            ,  BSTR * ); 
unsigned char * __stdcall  BSTR_UserMarshal(   unsigned long *,  unsigned char *,  BSTR * ); 
unsigned char * __stdcall  BSTR_UserUnmarshal( unsigned long *,  unsigned char *,  BSTR * ); 
void                      __stdcall  BSTR_UserFree(      unsigned long *,  BSTR * ); 

unsigned long             __stdcall  CLEANLOCALSTORAGE_UserSize(      unsigned long *, unsigned long            ,  CLEANLOCALSTORAGE * ); 
unsigned char * __stdcall  CLEANLOCALSTORAGE_UserMarshal(   unsigned long *,  unsigned char *,  CLEANLOCALSTORAGE * ); 
unsigned char * __stdcall  CLEANLOCALSTORAGE_UserUnmarshal( unsigned long *,  unsigned char *,  CLEANLOCALSTORAGE * ); 
void                      __stdcall  CLEANLOCALSTORAGE_UserFree(      unsigned long *,  CLEANLOCALSTORAGE * ); 

unsigned long             __stdcall  VARIANT_UserSize(      unsigned long *, unsigned long            ,  VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserMarshal(   unsigned long *,  unsigned char *,  VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserUnmarshal( unsigned long *,  unsigned char *,  VARIANT * ); 
void                      __stdcall  VARIANT_UserFree(      unsigned long *,  VARIANT * ); 

unsigned long             __stdcall  BSTR_UserSize64(      unsigned long *, unsigned long            ,  BSTR * ); 
unsigned char * __stdcall  BSTR_UserMarshal64(   unsigned long *,  unsigned char *,  BSTR * ); 
unsigned char * __stdcall  BSTR_UserUnmarshal64( unsigned long *,  unsigned char *,  BSTR * ); 
void                      __stdcall  BSTR_UserFree64(      unsigned long *,  BSTR * ); 

unsigned long             __stdcall  CLEANLOCALSTORAGE_UserSize64(      unsigned long *, unsigned long            ,  CLEANLOCALSTORAGE * ); 
unsigned char * __stdcall  CLEANLOCALSTORAGE_UserMarshal64(   unsigned long *,  unsigned char *,  CLEANLOCALSTORAGE * ); 
unsigned char * __stdcall  CLEANLOCALSTORAGE_UserUnmarshal64( unsigned long *,  unsigned char *,  CLEANLOCALSTORAGE * ); 
void                      __stdcall  CLEANLOCALSTORAGE_UserFree64(      unsigned long *,  CLEANLOCALSTORAGE * ); 

unsigned long             __stdcall  VARIANT_UserSize64(      unsigned long *, unsigned long            ,  VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserMarshal64(   unsigned long *,  unsigned char *,  VARIANT * ); 
unsigned char * __stdcall  VARIANT_UserUnmarshal64( unsigned long *,  unsigned char *,  VARIANT * ); 
void                      __stdcall  VARIANT_UserFree64(      unsigned long *,  VARIANT * ); 

 HRESULT __stdcall IDispatch_Invoke_Proxy( 
    IDispatch * This,
     
       DISPID dispIdMember,
     
       const IID & riid,
     
       LCID lcid,
     
       WORD wFlags,
     
       DISPPARAMS *pDispParams,
     
       VARIANT *pVarResult,
     
       EXCEPINFO *pExcepInfo,
     
       UINT *puArgErr);


 HRESULT __stdcall IDispatch_Invoke_Stub( 
     IDispatch * This,
     DISPID dispIdMember,
      const IID & riid,
     LCID lcid,
     DWORD dwFlags,
      DISPPARAMS *pDispParams,
      VARIANT *pVarResult,
      EXCEPINFO *pExcepInfo,
      UINT *pArgErr,
     UINT cVarRef,
      UINT *rgVarRefIdx,
      VARIANTARG *rgVarRef);

 HRESULT __stdcall IEnumVARIANT_Next_Proxy( 
    IEnumVARIANT * This,
     ULONG celt,
     VARIANT *rgVar,
     ULONG *pCeltFetched);


 HRESULT __stdcall IEnumVARIANT_Next_Stub( 
     IEnumVARIANT * This,
     ULONG celt,
      VARIANT *rgVar,
      ULONG *pCeltFetched);

 HRESULT __stdcall ITypeComp_Bind_Proxy( 
    ITypeComp * This,
     
      LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
     ITypeInfo **ppTInfo,
     DESCKIND *pDescKind,
     BINDPTR *pBindPtr);


 HRESULT __stdcall ITypeComp_Bind_Stub( 
     ITypeComp * This,
      LPOLESTR szName,
     ULONG lHashVal,
     WORD wFlags,
      ITypeInfo **ppTInfo,
      DESCKIND *pDescKind,
      LPFUNCDESC *ppFuncDesc,
      LPVARDESC *ppVarDesc,
      ITypeComp **ppTypeComp,
      CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeComp_BindType_Proxy( 
    ITypeComp * This,
     
      LPOLESTR szName,
     ULONG lHashVal,
     ITypeInfo **ppTInfo,
     ITypeComp **ppTComp);


 HRESULT __stdcall ITypeComp_BindType_Stub( 
     ITypeComp * This,
      LPOLESTR szName,
     ULONG lHashVal,
      ITypeInfo **ppTInfo);

 HRESULT __stdcall ITypeInfo_GetTypeAttr_Proxy( 
    ITypeInfo * This,
     TYPEATTR **ppTypeAttr);


 HRESULT __stdcall ITypeInfo_GetTypeAttr_Stub( 
     ITypeInfo * This,
      LPTYPEATTR *ppTypeAttr,
      CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeInfo_GetFuncDesc_Proxy( 
    ITypeInfo * This,
     UINT index,
     FUNCDESC **ppFuncDesc);


 HRESULT __stdcall ITypeInfo_GetFuncDesc_Stub( 
     ITypeInfo * This,
     UINT index,
      LPFUNCDESC *ppFuncDesc,
      CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeInfo_GetVarDesc_Proxy( 
    ITypeInfo * This,
     UINT index,
     VARDESC **ppVarDesc);


 HRESULT __stdcall ITypeInfo_GetVarDesc_Stub( 
     ITypeInfo * This,
     UINT index,
      LPVARDESC *ppVarDesc,
      CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeInfo_GetNames_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *rgBstrNames,
     UINT cMaxNames,
     UINT *pcNames);


 HRESULT __stdcall ITypeInfo_GetNames_Stub( 
     ITypeInfo * This,
     MEMBERID memid,
      BSTR *rgBstrNames,
     UINT cMaxNames,
      UINT *pcNames);

 HRESULT __stdcall ITypeInfo_GetIDsOfNames_Proxy( 
    ITypeInfo * This,
     
      LPOLESTR *rgszNames,
     UINT cNames,
     MEMBERID *pMemId);


 HRESULT __stdcall ITypeInfo_GetIDsOfNames_Stub( 
     ITypeInfo * This);

 HRESULT __stdcall ITypeInfo_Invoke_Proxy( 
    ITypeInfo * This,
     PVOID pvInstance,
     MEMBERID memid,
     WORD wFlags,
     DISPPARAMS *pDispParams,
     VARIANT *pVarResult,
     EXCEPINFO *pExcepInfo,
     UINT *puArgErr);


 HRESULT __stdcall ITypeInfo_Invoke_Stub( 
     ITypeInfo * This);

 HRESULT __stdcall ITypeInfo_GetDocumentation_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);


 HRESULT __stdcall ITypeInfo_GetDocumentation_Stub( 
     ITypeInfo * This,
     MEMBERID memid,
     DWORD refPtrFlags,
      BSTR *pBstrName,
      BSTR *pBstrDocString,
      DWORD *pdwHelpContext,
      BSTR *pBstrHelpFile);

 HRESULT __stdcall ITypeInfo_GetDllEntry_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     BSTR *pBstrDllName,
     BSTR *pBstrName,
     WORD *pwOrdinal);


 HRESULT __stdcall ITypeInfo_GetDllEntry_Stub( 
     ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     DWORD refPtrFlags,
      BSTR *pBstrDllName,
      BSTR *pBstrName,
      WORD *pwOrdinal);

 HRESULT __stdcall ITypeInfo_AddressOfMember_Proxy( 
    ITypeInfo * This,
     MEMBERID memid,
     INVOKEKIND invKind,
     PVOID *ppv);


 HRESULT __stdcall ITypeInfo_AddressOfMember_Stub( 
     ITypeInfo * This);

 HRESULT __stdcall ITypeInfo_CreateInstance_Proxy( 
    ITypeInfo * This,
     IUnknown *pUnkOuter,
     const IID & riid,
     PVOID *ppvObj);


 HRESULT __stdcall ITypeInfo_CreateInstance_Stub( 
     ITypeInfo * This,
      const IID & riid,
      IUnknown **ppvObj);

 HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Proxy( 
    ITypeInfo * This,
     ITypeLib **ppTLib,
     UINT *pIndex);


 HRESULT __stdcall ITypeInfo_GetContainingTypeLib_Stub( 
     ITypeInfo * This,
      ITypeLib **ppTLib,
      UINT *pIndex);

 void __stdcall ITypeInfo_ReleaseTypeAttr_Proxy( 
    ITypeInfo * This,
     TYPEATTR *pTypeAttr);


 HRESULT __stdcall ITypeInfo_ReleaseTypeAttr_Stub( 
     ITypeInfo * This);

 void __stdcall ITypeInfo_ReleaseFuncDesc_Proxy( 
    ITypeInfo * This,
     FUNCDESC *pFuncDesc);


 HRESULT __stdcall ITypeInfo_ReleaseFuncDesc_Stub( 
     ITypeInfo * This);

 void __stdcall ITypeInfo_ReleaseVarDesc_Proxy( 
    ITypeInfo * This,
     VARDESC *pVarDesc);


 HRESULT __stdcall ITypeInfo_ReleaseVarDesc_Stub( 
     ITypeInfo * This);

 HRESULT __stdcall ITypeInfo2_GetDocumentation2_Proxy( 
    ITypeInfo2 * This,
     MEMBERID memid,
     LCID lcid,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);


 HRESULT __stdcall ITypeInfo2_GetDocumentation2_Stub( 
     ITypeInfo2 * This,
     MEMBERID memid,
     LCID lcid,
     DWORD refPtrFlags,
      BSTR *pbstrHelpString,
      DWORD *pdwHelpStringContext,
      BSTR *pbstrHelpStringDll);

 UINT __stdcall ITypeLib_GetTypeInfoCount_Proxy( 
    ITypeLib * This);


 HRESULT __stdcall ITypeLib_GetTypeInfoCount_Stub( 
     ITypeLib * This,
      UINT *pcTInfo);

 HRESULT __stdcall ITypeLib_GetLibAttr_Proxy( 
    ITypeLib * This,
     TLIBATTR **ppTLibAttr);


 HRESULT __stdcall ITypeLib_GetLibAttr_Stub( 
     ITypeLib * This,
      LPTLIBATTR *ppTLibAttr,
      CLEANLOCALSTORAGE *pDummy);

 HRESULT __stdcall ITypeLib_GetDocumentation_Proxy( 
    ITypeLib * This,
     INT index,
     BSTR *pBstrName,
     BSTR *pBstrDocString,
     DWORD *pdwHelpContext,
     BSTR *pBstrHelpFile);


 HRESULT __stdcall ITypeLib_GetDocumentation_Stub( 
     ITypeLib * This,
     INT index,
     DWORD refPtrFlags,
      BSTR *pBstrName,
      BSTR *pBstrDocString,
      DWORD *pdwHelpContext,
      BSTR *pBstrHelpFile);

 HRESULT __stdcall ITypeLib_IsName_Proxy( 
    ITypeLib * This,
     
      LPOLESTR szNameBuf,
     ULONG lHashVal,
     BOOL *pfName);


 HRESULT __stdcall ITypeLib_IsName_Stub( 
     ITypeLib * This,
      LPOLESTR szNameBuf,
     ULONG lHashVal,
      BOOL *pfName,
      BSTR *pBstrLibName);

 HRESULT __stdcall ITypeLib_FindName_Proxy( 
    ITypeLib * This,
     
      LPOLESTR szNameBuf,
     ULONG lHashVal,
     ITypeInfo **ppTInfo,
     MEMBERID *rgMemId,
     USHORT *pcFound);


 HRESULT __stdcall ITypeLib_FindName_Stub( 
     ITypeLib * This,
      LPOLESTR szNameBuf,
     ULONG lHashVal,
      ITypeInfo **ppTInfo,
      MEMBERID *rgMemId,
      USHORT *pcFound,
      BSTR *pBstrLibName);

 void __stdcall ITypeLib_ReleaseTLibAttr_Proxy( 
    ITypeLib * This,
     TLIBATTR *pTLibAttr);


 HRESULT __stdcall ITypeLib_ReleaseTLibAttr_Stub( 
     ITypeLib * This);

 HRESULT __stdcall ITypeLib2_GetLibStatistics_Proxy( 
    ITypeLib2 * This,
     ULONG *pcUniqueNames,
     ULONG *pcchUniqueNames);


 HRESULT __stdcall ITypeLib2_GetLibStatistics_Stub( 
     ITypeLib2 * This,
      ULONG *pcUniqueNames,
      ULONG *pcchUniqueNames);

 HRESULT __stdcall ITypeLib2_GetDocumentation2_Proxy( 
    ITypeLib2 * This,
     INT index,
     LCID lcid,
     BSTR *pbstrHelpString,
     DWORD *pdwHelpStringContext,
     BSTR *pbstrHelpStringDll);


 HRESULT __stdcall ITypeLib2_GetDocumentation2_Stub( 
     ITypeLib2 * This,
     INT index,
     LCID lcid,
     DWORD refPtrFlags,
      BSTR *pbstrHelpString,
      DWORD *pdwHelpStringContext,
      BSTR *pbstrHelpStringDll);

 HRESULT __stdcall IPropertyBag_Read_Proxy( 
    IPropertyBag * This,
     LPCOLESTR pszPropName,
     VARIANT *pVar,
     IErrorLog *pErrorLog);


 HRESULT __stdcall IPropertyBag_Read_Stub( 
     IPropertyBag * This,
      LPCOLESTR pszPropName,
      VARIANT *pVar,
      IErrorLog *pErrorLog,
     DWORD varType,
      IUnknown *pUnkObj);






}
#line 5759 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"

#line 5761 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\oaidl.h"



#line 306 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"


extern "C"{
#line 310 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"



 







#pragma once
#pragma region Desktop Family
#pragma endregion

#pragma region Desktop Family

typedef struct _xml_error
    {
    unsigned int _nLine;
    BSTR _pchBuf;
    unsigned int _cchBuf;
    unsigned int _ich;
    BSTR _pszFound;
    BSTR _pszExpected;
    DWORD _reserved1;
    DWORD _reserved2;
    } 	XML_ERROR;



extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0000_v0_0_s_ifspec;






 






#pragma region Desktop Family
#pragma endregion



















typedef  
enum tagDOMNodeType
    {
        NODE_INVALID	= 0,
        NODE_ELEMENT	= ( NODE_INVALID + 1 ) ,
        NODE_ATTRIBUTE	= ( NODE_ELEMENT + 1 ) ,
        NODE_TEXT	= ( NODE_ATTRIBUTE + 1 ) ,
        NODE_CDATA_SECTION	= ( NODE_TEXT + 1 ) ,
        NODE_ENTITY_REFERENCE	= ( NODE_CDATA_SECTION + 1 ) ,
        NODE_ENTITY	= ( NODE_ENTITY_REFERENCE + 1 ) ,
        NODE_PROCESSING_INSTRUCTION	= ( NODE_ENTITY + 1 ) ,
        NODE_COMMENT	= ( NODE_PROCESSING_INSTRUCTION + 1 ) ,
        NODE_DOCUMENT	= ( NODE_COMMENT + 1 ) ,
        NODE_DOCUMENT_TYPE	= ( NODE_DOCUMENT + 1 ) ,
        NODE_DOCUMENT_FRAGMENT	= ( NODE_DOCUMENT_TYPE + 1 ) ,
        NODE_NOTATION	= ( NODE_DOCUMENT_FRAGMENT + 1 ) 
    } 	DOMNodeType;







#pragma region Desktop Family
#pragma endregion









typedef  
enum tagXMLEMEM_TYPE
    {
        XMLELEMTYPE_ELEMENT	= 0,
        XMLELEMTYPE_TEXT	= ( XMLELEMTYPE_ELEMENT + 1 ) ,
        XMLELEMTYPE_COMMENT	= ( XMLELEMTYPE_TEXT + 1 ) ,
        XMLELEMTYPE_DOCUMENT	= ( XMLELEMTYPE_COMMENT + 1 ) ,
        XMLELEMTYPE_DTD	= ( XMLELEMTYPE_DOCUMENT + 1 ) ,
        XMLELEMTYPE_PI	= ( XMLELEMTYPE_DTD + 1 ) ,
        XMLELEMTYPE_OTHER	= ( XMLELEMTYPE_PI + 1 ) 
    } 	XMLELEM_TYPE;


extern "C" const IID LIBID_MSXML;





 


extern "C" const IID IID_IXMLDOMImplementation;


    
    struct __declspec(uuid("2933BF8F-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMImplementation : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall hasFeature( 
             BSTR feature,
             BSTR version,
             VARIANT_BOOL *hasFeature) = 0;
        
    };
    
    







































































































#line 554 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 559 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMNode;


    
    struct __declspec(uuid("2933BF80-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNode : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_nodeName( 
             BSTR *name) = 0;
        
        virtual  HRESULT __stdcall get_nodeValue( 
             VARIANT *value) = 0;
        
        virtual  HRESULT __stdcall put_nodeValue( 
             VARIANT value) = 0;
        
        virtual  HRESULT __stdcall get_nodeType( 
             DOMNodeType *type) = 0;
        
        virtual  HRESULT __stdcall get_parentNode( 
             IXMLDOMNode **parent) = 0;
        
        virtual  HRESULT __stdcall get_childNodes( 
             IXMLDOMNodeList **childList) = 0;
        
        virtual  HRESULT __stdcall get_firstChild( 
             IXMLDOMNode **firstChild) = 0;
        
        virtual  HRESULT __stdcall get_lastChild( 
             IXMLDOMNode **lastChild) = 0;
        
        virtual  HRESULT __stdcall get_previousSibling( 
             IXMLDOMNode **previousSibling) = 0;
        
        virtual  HRESULT __stdcall get_nextSibling( 
             IXMLDOMNode **nextSibling) = 0;
        
        virtual  HRESULT __stdcall get_attributes( 
             IXMLDOMNamedNodeMap **attributeMap) = 0;
        
        virtual  HRESULT __stdcall insertBefore( 
             IXMLDOMNode *newChild,
             VARIANT refChild,
             IXMLDOMNode **outNewChild) = 0;
        
        virtual  HRESULT __stdcall replaceChild( 
             IXMLDOMNode *newChild,
             IXMLDOMNode *oldChild,
             IXMLDOMNode **outOldChild) = 0;
        
        virtual  HRESULT __stdcall removeChild( 
             IXMLDOMNode *childNode,
             IXMLDOMNode **oldChild) = 0;
        
        virtual  HRESULT __stdcall appendChild( 
             IXMLDOMNode *newChild,
             IXMLDOMNode **outNewChild) = 0;
        
        virtual  HRESULT __stdcall hasChildNodes( 
             VARIANT_BOOL *hasChild) = 0;
        
        virtual  HRESULT __stdcall get_ownerDocument( 
             IXMLDOMDocument **XMLDOMDocument) = 0;
        
        virtual  HRESULT __stdcall cloneNode( 
             VARIANT_BOOL deep,
             IXMLDOMNode **cloneRoot) = 0;
        
        virtual  HRESULT __stdcall get_nodeTypeString( 
             BSTR *nodeType) = 0;
        
        virtual  HRESULT __stdcall get_text( 
             BSTR *text) = 0;
        
        virtual  HRESULT __stdcall put_text( 
             BSTR text) = 0;
        
        virtual  HRESULT __stdcall get_specified( 
             VARIANT_BOOL *isSpecified) = 0;
        
        virtual  HRESULT __stdcall get_definition( 
             IXMLDOMNode **definitionNode) = 0;
        
        virtual  HRESULT __stdcall get_nodeTypedValue( 
             VARIANT *typedValue) = 0;
        
        virtual  HRESULT __stdcall put_nodeTypedValue( 
             VARIANT typedValue) = 0;
        
        virtual  HRESULT __stdcall get_dataType( 
             VARIANT *dataTypeName) = 0;
        
        virtual  HRESULT __stdcall put_dataType( 
             BSTR dataTypeName) = 0;
        
        virtual  HRESULT __stdcall get_xml( 
             BSTR *xmlString) = 0;
        
        virtual  HRESULT __stdcall transformNode( 
             IXMLDOMNode *stylesheet,
             BSTR *xmlString) = 0;
        
        virtual  HRESULT __stdcall selectNodes( 
             BSTR queryString,
             IXMLDOMNodeList **resultList) = 0;
        
        virtual  HRESULT __stdcall selectSingleNode( 
             BSTR queryString,
             IXMLDOMNode **resultNode) = 0;
        
        virtual  HRESULT __stdcall get_parsed( 
             VARIANT_BOOL *isParsed) = 0;
        
        virtual  HRESULT __stdcall get_namespaceURI( 
             BSTR *namespaceURI) = 0;
        
        virtual  HRESULT __stdcall get_prefix( 
             BSTR *prefixString) = 0;
        
        virtual  HRESULT __stdcall get_baseName( 
             BSTR *nameString) = 0;
        
        virtual  HRESULT __stdcall transformNodeToObject( 
             IXMLDOMNode *stylesheet,
             VARIANT outputObject) = 0;
        
    };
    
    





































































































































































































































































































































































#line 1056 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 1061 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMDocumentFragment;


    
    struct __declspec(uuid("3efaa413-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXMLDOMDocumentFragment : public IXMLDOMNode
    {
    public:
    };
    
    






































































































































































































































































































































































#line 1440 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 1445 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMDocument;


    
    struct __declspec(uuid("2933BF81-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMDocument : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_doctype( 
             IXMLDOMDocumentType **documentType) = 0;
        
        virtual  HRESULT __stdcall get_implementation( 
             IXMLDOMImplementation **impl) = 0;
        
        virtual  HRESULT __stdcall get_documentElement( 
             IXMLDOMElement **DOMElement) = 0;
        
        virtual  HRESULT __stdcall putref_documentElement( 
             IXMLDOMElement *DOMElement) = 0;
        
        virtual  HRESULT __stdcall createElement( 
             BSTR tagName,
             IXMLDOMElement **element) = 0;
        
        virtual  HRESULT __stdcall createDocumentFragment( 
             IXMLDOMDocumentFragment **docFrag) = 0;
        
        virtual  HRESULT __stdcall createTextNode( 
             BSTR data,
             IXMLDOMText **text) = 0;
        
        virtual  HRESULT __stdcall createComment( 
             BSTR data,
             IXMLDOMComment **comment) = 0;
        
        virtual  HRESULT __stdcall createCDATASection( 
             BSTR data,
             IXMLDOMCDATASection **cdata) = 0;
        
        virtual  HRESULT __stdcall createProcessingInstruction( 
             BSTR target,
             BSTR data,
             IXMLDOMProcessingInstruction **pi) = 0;
        
        virtual  HRESULT __stdcall createAttribute( 
             BSTR name,
             IXMLDOMAttribute **attribute) = 0;
        
        virtual  HRESULT __stdcall createEntityReference( 
             BSTR name,
             IXMLDOMEntityReference **entityRef) = 0;
        
        virtual  HRESULT __stdcall getElementsByTagName( 
             BSTR tagName,
             IXMLDOMNodeList **resultList) = 0;
        
        virtual  HRESULT __stdcall createNode( 
             VARIANT Type,
             BSTR name,
             BSTR namespaceURI,
             IXMLDOMNode **node) = 0;
        
        virtual  HRESULT __stdcall nodeFromID( 
             BSTR idString,
             IXMLDOMNode **node) = 0;
        
        virtual  HRESULT __stdcall load( 
             VARIANT xmlSource,
             VARIANT_BOOL *isSuccessful) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
             long *value) = 0;
        
        virtual  HRESULT __stdcall get_parseError( 
             IXMLDOMParseError **errorObj) = 0;
        
        virtual  HRESULT __stdcall get_url( 
             BSTR *urlString) = 0;
        
        virtual  HRESULT __stdcall get_async( 
             VARIANT_BOOL *isAsync) = 0;
        
        virtual  HRESULT __stdcall put_async( 
             VARIANT_BOOL isAsync) = 0;
        
        virtual  HRESULT __stdcall abort( void) = 0;
        
        virtual  HRESULT __stdcall loadXML( 
             BSTR bstrXML,
             VARIANT_BOOL *isSuccessful) = 0;
        
        virtual  HRESULT __stdcall save( 
             VARIANT destination) = 0;
        
        virtual  HRESULT __stdcall get_validateOnParse( 
             VARIANT_BOOL *isValidating) = 0;
        
        virtual  HRESULT __stdcall put_validateOnParse( 
             VARIANT_BOOL isValidating) = 0;
        
        virtual  HRESULT __stdcall get_resolveExternals( 
             VARIANT_BOOL *isResolving) = 0;
        
        virtual  HRESULT __stdcall put_resolveExternals( 
             VARIANT_BOOL isResolving) = 0;
        
        virtual  HRESULT __stdcall get_preserveWhiteSpace( 
             VARIANT_BOOL *isPreserving) = 0;
        
        virtual  HRESULT __stdcall put_preserveWhiteSpace( 
             VARIANT_BOOL isPreserving) = 0;
        
        virtual  HRESULT __stdcall put_onreadystatechange( 
             VARIANT readystatechangeSink) = 0;
        
        virtual  HRESULT __stdcall put_ondataavailable( 
             VARIANT ondataavailableSink) = 0;
        
        virtual  HRESULT __stdcall put_ontransformnode( 
             VARIANT ontransformnodeSink) = 0;
        
    };
    
    



























































































































































































































































































































































































































































































































































































































#line 2182 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 2187 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMNodeList;


    
    struct __declspec(uuid("2933BF82-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNodeList : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_item( 
             long index,
             IXMLDOMNode **listItem) = 0;
        
        virtual  HRESULT __stdcall get_length( 
             long *listLength) = 0;
        
        virtual  HRESULT __stdcall nextNode( 
             IXMLDOMNode **nextItem) = 0;
        
        virtual  HRESULT __stdcall reset( void) = 0;
        
        virtual  HRESULT __stdcall get__newEnum( 
             IUnknown **ppUnk) = 0;
        
    };
    
    

































































































































#line 2352 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 2357 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMNamedNodeMap;


    
    struct __declspec(uuid("2933BF83-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNamedNodeMap : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall getNamedItem( 
             BSTR name,
             IXMLDOMNode **namedItem) = 0;
        
        virtual  HRESULT __stdcall setNamedItem( 
             IXMLDOMNode *newItem,
             IXMLDOMNode **nameItem) = 0;
        
        virtual  HRESULT __stdcall removeNamedItem( 
             BSTR name,
             IXMLDOMNode **namedItem) = 0;
        
        virtual  HRESULT __stdcall get_item( 
             long index,
             IXMLDOMNode **listItem) = 0;
        
        virtual  HRESULT __stdcall get_length( 
             long *listLength) = 0;
        
        virtual  HRESULT __stdcall getQualifiedItem( 
             BSTR baseName,
             BSTR namespaceURI,
             IXMLDOMNode **qualifiedItem) = 0;
        
        virtual  HRESULT __stdcall removeQualifiedItem( 
             BSTR baseName,
             BSTR namespaceURI,
             IXMLDOMNode **qualifiedItem) = 0;
        
        virtual  HRESULT __stdcall nextNode( 
             IXMLDOMNode **nextItem) = 0;
        
        virtual  HRESULT __stdcall reset( void) = 0;
        
        virtual  HRESULT __stdcall get__newEnum( 
             IUnknown **ppUnk) = 0;
        
    };
    
    











































































































































































#line 2586 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 2591 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMCharacterData;


    
    struct __declspec(uuid("2933BF84-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMCharacterData : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_data( 
             BSTR *data) = 0;
        
        virtual  HRESULT __stdcall put_data( 
             BSTR data) = 0;
        
        virtual  HRESULT __stdcall get_length( 
             long *dataLength) = 0;
        
        virtual  HRESULT __stdcall substringData( 
             long offset,
             long count,
             BSTR *data) = 0;
        
        virtual  HRESULT __stdcall appendData( 
             BSTR data) = 0;
        
        virtual  HRESULT __stdcall insertData( 
             long offset,
             BSTR data) = 0;
        
        virtual  HRESULT __stdcall deleteData( 
             long offset,
             long count) = 0;
        
        virtual  HRESULT __stdcall replaceData( 
             long offset,
             long count,
             BSTR data) = 0;
        
    };
    
    




































































































































































































































































































































































































































#line 3062 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 3067 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMAttribute;


    
    struct __declspec(uuid("2933BF85-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMAttribute : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_name( 
             BSTR *attributeName) = 0;
        
        virtual  HRESULT __stdcall get_value( 
             VARIANT *attributeValue) = 0;
        
        virtual  HRESULT __stdcall put_value( 
             VARIANT attributeValue) = 0;
        
    };
    
    



























































































































































































































































































































































































#line 3476 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 3481 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMElement;


    
    struct __declspec(uuid("2933BF86-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMElement : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_tagName( 
             BSTR *tagName) = 0;
        
        virtual  HRESULT __stdcall getAttribute( 
             BSTR name,
             VARIANT *value) = 0;
        
        virtual  HRESULT __stdcall setAttribute( 
             BSTR name,
             VARIANT value) = 0;
        
        virtual  HRESULT __stdcall removeAttribute( 
             BSTR name) = 0;
        
        virtual  HRESULT __stdcall getAttributeNode( 
             BSTR name,
             IXMLDOMAttribute **attributeNode) = 0;
        
        virtual  HRESULT __stdcall setAttributeNode( 
             IXMLDOMAttribute *DOMAttribute,
             IXMLDOMAttribute **attributeNode) = 0;
        
        virtual  HRESULT __stdcall removeAttributeNode( 
             IXMLDOMAttribute *DOMAttribute,
             IXMLDOMAttribute **attributeNode) = 0;
        
        virtual  HRESULT __stdcall getElementsByTagName( 
             BSTR tagName,
             IXMLDOMNodeList **resultList) = 0;
        
        virtual  HRESULT __stdcall normalize( void) = 0;
        
    };
    
    










































































































































































































































































































































































































































#line 3960 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 3965 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMText;


    
    struct __declspec(uuid("2933BF87-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMText : public IXMLDOMCharacterData
    {
    public:
        virtual  HRESULT __stdcall splitText( 
             long offset,
             IXMLDOMText **rightHandTextNode) = 0;
        
    };
    
    













































































































































































































































































































































































































































#line 4419 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 4424 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMComment;


    
    struct __declspec(uuid("2933BF88-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMComment : public IXMLDOMCharacterData
    {
    public:
    };
    
    





































































































































































































































































































































































































































#line 4866 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 4871 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMProcessingInstruction;


    
    struct __declspec(uuid("2933BF89-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMProcessingInstruction : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_target( 
             BSTR *name) = 0;
        
        virtual  HRESULT __stdcall get_data( 
             BSTR *value) = 0;
        
        virtual  HRESULT __stdcall put_data( 
             BSTR value) = 0;
        
    };
    
    



























































































































































































































































































































































































#line 5280 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 5285 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMCDATASection;


    
    struct __declspec(uuid("2933BF8A-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMCDATASection : public IXMLDOMText
    {
    public:
    };
    
    














































































































































































































































































































































































































































#line 5736 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 5741 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMDocumentType;


    
    struct __declspec(uuid("2933BF8B-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMDocumentType : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_name( 
             BSTR *rootName) = 0;
        
        virtual  HRESULT __stdcall get_entities( 
             IXMLDOMNamedNodeMap **entityMap) = 0;
        
        virtual  HRESULT __stdcall get_notations( 
             IXMLDOMNamedNodeMap **notationMap) = 0;
        
    };
    
    



























































































































































































































































































































































































#line 6150 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 6155 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMNotation;


    
    struct __declspec(uuid("2933BF8C-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMNotation : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_publicId( 
             VARIANT *publicID) = 0;
        
        virtual  HRESULT __stdcall get_systemId( 
             VARIANT *systemID) = 0;
        
    };
    
    




















































































































































































































































































































































































#line 6554 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 6559 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMEntity;


    
    struct __declspec(uuid("2933BF8D-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMEntity : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall get_publicId( 
             VARIANT *publicID) = 0;
        
        virtual  HRESULT __stdcall get_systemId( 
             VARIANT *systemID) = 0;
        
        virtual  HRESULT __stdcall get_notationName( 
             BSTR *name) = 0;
        
    };
    
    



























































































































































































































































































































































































#line 6968 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 6973 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMEntityReference;


    
    struct __declspec(uuid("2933BF8E-7B36-11d2-B20E-00C04F983E60")) __declspec(novtable)
    IXMLDOMEntityReference : public IXMLDOMNode
    {
    public:
    };
    
    






































































































































































































































































































































































#line 7352 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 7357 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDOMParseError;


    
    struct __declspec(uuid("3efaa426-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXMLDOMParseError : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_errorCode( 
             long *errorCode) = 0;
        
        virtual  HRESULT __stdcall get_url( 
             BSTR *urlString) = 0;
        
        virtual  HRESULT __stdcall get_reason( 
             BSTR *reasonString) = 0;
        
        virtual  HRESULT __stdcall get_srcText( 
             BSTR *sourceString) = 0;
        
        virtual  HRESULT __stdcall get_line( 
             long *lineNumber) = 0;
        
        virtual  HRESULT __stdcall get_linepos( 
             long *linePosition) = 0;
        
        virtual  HRESULT __stdcall get_filepos( 
             long *filePosition) = 0;
        
    };
    
    















































































































































#line 7542 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 7547 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXTLRuntime;


    
    struct __declspec(uuid("3efaa425-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    IXTLRuntime : public IXMLDOMNode
    {
    public:
        virtual  HRESULT __stdcall uniqueID( 
             IXMLDOMNode *pNode,
             long *pID) = 0;
        
        virtual  HRESULT __stdcall depth( 
             IXMLDOMNode *pNode,
             long *pDepth) = 0;
        
        virtual  HRESULT __stdcall childNumber( 
             IXMLDOMNode *pNode,
             long *pNumber) = 0;
        
        virtual  HRESULT __stdcall ancestorChildNumber( 
             BSTR bstrNodeName,
             IXMLDOMNode *pNode,
             long *pNumber) = 0;
        
        virtual  HRESULT __stdcall absoluteChildNumber( 
             IXMLDOMNode *pNode,
             long *pNumber) = 0;
        
        virtual  HRESULT __stdcall formatIndex( 
             long lIndex,
             BSTR bstrFormat,
             BSTR *pbstrFormattedString) = 0;
        
        virtual  HRESULT __stdcall formatNumber( 
             double dblNumber,
             BSTR bstrFormat,
             BSTR *pbstrFormattedString) = 0;
        
        virtual  HRESULT __stdcall formatDate( 
             VARIANT varDate,
             BSTR bstrFormat,
             VARIANT varDestLocale,
             BSTR *pbstrFormattedString) = 0;
        
        virtual  HRESULT __stdcall formatTime( 
             VARIANT varTime,
             BSTR bstrFormat,
             VARIANT varDestLocale,
             BSTR *pbstrFormattedString) = 0;
        
    };
    
    





















































































































































































































































































































































































































































#line 8048 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 8053 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID DIID_XMLDOMDocumentEvents;



    struct __declspec(uuid("3efaa427-272f-11d2-836f-0000f87a7782")) __declspec(novtable)
    XMLDOMDocumentEvents : public IDispatch
    {
    };
    





























































































#line 8165 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"


#line 8168 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"


extern "C" const CLSID CLSID_DOMDocument;



class __declspec(uuid("2933BF90-7B36-11d2-B20E-00C04F983E60"))
DOMDocument;
#line 8177 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"

extern "C" const CLSID CLSID_DOMFreeThreadedDocument;



class __declspec(uuid("2933BF91-7B36-11d2-B20E-00C04F983E60"))
DOMFreeThreadedDocument;
#line 8185 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"





 


extern "C" const IID IID_IXMLHttpRequest;


    
    struct __declspec(uuid("ED8C108D-4349-11D2-91A4-00C04F7969E8")) __declspec(novtable)
    IXMLHttpRequest : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall open( 
              BSTR bstrMethod,
              BSTR bstrUrl,
             VARIANT varAsync,
             VARIANT bstrUser,
             VARIANT bstrPassword) = 0;
        
        virtual  HRESULT __stdcall setRequestHeader( 
              BSTR bstrHeader,
              BSTR bstrValue) = 0;
        
        virtual  HRESULT __stdcall getResponseHeader( 
              BSTR bstrHeader,
              BSTR *pbstrValue) = 0;
        
        virtual  HRESULT __stdcall getAllResponseHeaders( 
              BSTR *pbstrHeaders) = 0;
        
        virtual  HRESULT __stdcall send( 
             VARIANT varBody) = 0;
        
        virtual  HRESULT __stdcall abort( void) = 0;
        
        virtual  HRESULT __stdcall get_status( 
              long *plStatus) = 0;
        
        virtual  HRESULT __stdcall get_statusText( 
              BSTR *pbstrStatus) = 0;
        
        virtual  HRESULT __stdcall get_responseXML( 
              IDispatch **ppBody) = 0;
        
        virtual  HRESULT __stdcall get_responseText( 
              BSTR *pbstrBody) = 0;
        
        virtual  HRESULT __stdcall get_responseBody( 
              VARIANT *pvarBody) = 0;
        
        virtual  HRESULT __stdcall get_responseStream( 
              VARIANT *pvarBody) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
              long *plState) = 0;
        
        virtual  HRESULT __stdcall put_onreadystatechange( 
              IDispatch *pReadyStateSink) = 0;
        
    };
    
    





































































































































































































#line 8449 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 8454 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"


extern "C" const CLSID CLSID_XMLHTTPRequest;



class __declspec(uuid("ED8C108E-4349-11D2-91A4-00C04F7969E8"))
XMLHTTPRequest;
#line 8463 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"





 


extern "C" const IID IID_IXMLDSOControl;


    
    struct __declspec(uuid("310afa62-0575-11d2-9ca9-0060b0ec3d39")) __declspec(novtable)
    IXMLDSOControl : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_XMLDocument( 
             IXMLDOMDocument **ppDoc) = 0;
        
        virtual  HRESULT __stdcall put_XMLDocument( 
             IXMLDOMDocument *ppDoc) = 0;
        
        virtual  HRESULT __stdcall get_JavaDSOCompatible( 
             BOOL *fJavaDSOCompatible) = 0;
        
        virtual  HRESULT __stdcall put_JavaDSOCompatible( 
             BOOL fJavaDSOCompatible) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
             long *state) = 0;
        
    };
    
    

































































































































#line 8627 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 8632 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"


extern "C" const CLSID CLSID_XMLDSOControl;



class __declspec(uuid("550dda30-0541-11d2-9ca9-0060b0ec3d39"))
XMLDSOControl;
#line 8641 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"





 


extern "C" const IID IID_IXMLElementCollection;


    
    struct __declspec(uuid("65725580-9B5D-11d0-9BFE-00C04FC99C8E")) __declspec(novtable)
    IXMLElementCollection : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall put_length( 
             long v) = 0;
        
        virtual  HRESULT __stdcall get_length( 
             long *p) = 0;
        
        virtual  HRESULT __stdcall get__newEnum( 
             IUnknown **ppUnk) = 0;
        
        virtual  HRESULT __stdcall item( 
             VARIANT var1,
             VARIANT var2,
             IDispatch **ppDisp) = 0;
        
    };
    
    




























































































































#line 8799 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 8804 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDocument;


    
    struct __declspec(uuid("F52E2B61-18A1-11d1-B105-00805F49916B")) __declspec(novtable)
    IXMLDocument : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_root( 
             IXMLElement **p) = 0;
        
        virtual  HRESULT __stdcall get_fileSize( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_fileModifiedDate( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_fileUpdatedDate( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_URL( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_URL( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_mimeType( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
             long *pl) = 0;
        
        virtual  HRESULT __stdcall get_charset( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_charset( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_version( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_doctype( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_dtdURL( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall createElement( 
             VARIANT vType,
             VARIANT var1,
             IXMLElement **ppElem) = 0;
        
    };
    
    


































































































































































































#line 9063 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 9068 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLDocument2;


    
    struct __declspec(uuid("2B8DE2FE-8D2D-11d1-B2FC-00C04FD915A9")) __declspec(novtable)
    IXMLDocument2 : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_root( 
             IXMLElement2 **p) = 0;
        
        virtual  HRESULT __stdcall get_fileSize( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_fileModifiedDate( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_fileUpdatedDate( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_URL( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_URL( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_mimeType( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_readyState( 
             long *pl) = 0;
        
        virtual  HRESULT __stdcall get_charset( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_charset( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_version( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_doctype( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall get_dtdURL( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall createElement( 
             VARIANT vType,
             VARIANT var1,
             IXMLElement2 **ppElem) = 0;
        
        virtual  HRESULT __stdcall get_async( 
             VARIANT_BOOL *pf) = 0;
        
        virtual  HRESULT __stdcall put_async( 
             VARIANT_BOOL f) = 0;
        
    };
    
    
















































































































































































































#line 9347 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 9352 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLElement;


    
    struct __declspec(uuid("3F7F31AC-E15F-11d0-9C25-00C04FC99C8E")) __declspec(novtable)
    IXMLElement : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_tagName( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_tagName( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_parent( 
             IXMLElement **ppParent) = 0;
        
        virtual  HRESULT __stdcall setAttribute( 
             BSTR strPropertyName,
             VARIANT PropertyValue) = 0;
        
        virtual  HRESULT __stdcall getAttribute( 
             BSTR strPropertyName,
             VARIANT *PropertyValue) = 0;
        
        virtual  HRESULT __stdcall removeAttribute( 
             BSTR strPropertyName) = 0;
        
        virtual  HRESULT __stdcall get_children( 
             IXMLElementCollection **pp) = 0;
        
        virtual  HRESULT __stdcall get_type( 
             long *plType) = 0;
        
        virtual  HRESULT __stdcall get_text( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_text( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall addChild( 
             IXMLElement *pChildElem,
            long lIndex,
            long lReserved) = 0;
        
        virtual  HRESULT __stdcall removeChild( 
             IXMLElement *pChildElem) = 0;
        
    };
    
    






















































































































































































#line 9595 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 9600 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLElement2;


    
    struct __declspec(uuid("2B8DE2FF-8D2D-11d1-B2FC-00C04FD915A9")) __declspec(novtable)
    IXMLElement2 : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_tagName( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_tagName( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall get_parent( 
             IXMLElement2 **ppParent) = 0;
        
        virtual  HRESULT __stdcall setAttribute( 
             BSTR strPropertyName,
             VARIANT PropertyValue) = 0;
        
        virtual  HRESULT __stdcall getAttribute( 
             BSTR strPropertyName,
             VARIANT *PropertyValue) = 0;
        
        virtual  HRESULT __stdcall removeAttribute( 
             BSTR strPropertyName) = 0;
        
        virtual  HRESULT __stdcall get_children( 
             IXMLElementCollection **pp) = 0;
        
        virtual  HRESULT __stdcall get_type( 
             long *plType) = 0;
        
        virtual  HRESULT __stdcall get_text( 
             BSTR *p) = 0;
        
        virtual  HRESULT __stdcall put_text( 
             BSTR p) = 0;
        
        virtual  HRESULT __stdcall addChild( 
             IXMLElement2 *pChildElem,
            long lIndex,
            long lReserved) = 0;
        
        virtual  HRESULT __stdcall removeChild( 
             IXMLElement2 *pChildElem) = 0;
        
        virtual  HRESULT __stdcall get_attributes( 
             IXMLElementCollection **pp) = 0;
        
    };
    
    





























































































































































































#line 9853 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 9858 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLAttribute;


    
    struct __declspec(uuid("D4D4A0FC-3B73-11d1-B2B4-00C04FB92596")) __declspec(novtable)
    IXMLAttribute : public IDispatch
    {
    public:
        virtual  HRESULT __stdcall get_name( 
             BSTR *n) = 0;
        
        virtual  HRESULT __stdcall get_value( 
             BSTR *v) = 0;
        
    };
    
    












































































































#line 9993 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 9998 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"






 


extern "C" const IID IID_IXMLError;


    
    struct __declspec(uuid("948C5AD3-C58D-11d0-9C0B-00C04FC99C8E")) __declspec(novtable)
    IXMLError : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetErrorInfo( 
            XML_ERROR *pErrorReturn) = 0;
        
    };
    
    



















































#line 10073 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"




#line 10078 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"


extern "C" const CLSID CLSID_XMLDocument;



class __declspec(uuid("CFC399AF-D876-11d0-9C10-00C04FC99C8E"))
XMLDocument;
#line 10087 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"
#line 10088 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"


 

#line 10093 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"
#pragma endregion


extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_msxml_0000_0001_v0_0_s_ifspec;






}
#line 10106 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"

#line 10108 "c:\\program files (x86)\\windows kits\\8.0\\include\\um\\msxml.h"



#line 419 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"


extern "C"{
#line 423 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 












#pragma comment(lib,"uuid.lib")





#pragma region Desktop Family
















extern "C" const IID CLSID_SBS_StdURLMoniker;  
extern "C" const IID CLSID_SBS_HttpProtocol;   
extern "C" const IID CLSID_SBS_FtpProtocol;    
extern "C" const IID CLSID_SBS_GopherProtocol; 
extern "C" const IID CLSID_SBS_HttpSProtocol;  
extern "C" const IID CLSID_SBS_FileProtocol;   
extern "C" const IID CLSID_SBS_MkProtocol;     
extern "C" const IID CLSID_SBS_UrlMkBindCtx;   
extern "C" const IID CLSID_SBS_SoftDistExt;  
extern "C" const IID CLSID_SBS_CdlProtocol;          
extern "C" const IID CLSID_SBS_ClassInstallFilter;   
extern "C" const IID CLSID_SBS_InternetSecurityManager;  
extern "C" const IID CLSID_SBS_InternetZoneManager;  







extern "C" const IID IID_IAsyncMoniker;    
extern "C" const IID CLSID_StdURLMoniker;  
extern "C" const IID CLSID_HttpProtocol;   
extern "C" const IID CLSID_FtpProtocol;    
extern "C" const IID CLSID_GopherProtocol; 
extern "C" const IID CLSID_HttpSProtocol;  
extern "C" const IID CLSID_FileProtocol;   
extern "C" const IID CLSID_MkProtocol;     
extern "C" const IID CLSID_StdURLProtocol; 
extern "C" const IID CLSID_UrlMkBindCtx;   
extern "C" const IID CLSID_CdlProtocol;          
extern "C" const IID CLSID_ClassInstallFilter;   
extern "C" const IID IID_IAsyncBindCtx;    
 






 
extern "C" HRESULT __stdcall CreateURLMoniker(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER  * ppmk);             
extern "C" HRESULT __stdcall CreateURLMonikerEx(LPMONIKER pMkCtx, LPCWSTR szURL, LPMONIKER  * ppmk, DWORD dwFlags);             
extern "C" HRESULT __stdcall GetClassURL(LPCWSTR szURL, CLSID *pClsID);                                           
extern "C" HRESULT __stdcall CreateAsyncBindCtx(DWORD reserved, IBindStatusCallback *pBSCb,                       
                                IEnumFORMATETC *pEFetc, IBindCtx **ppBC);                   

extern "C" HRESULT __stdcall CreateURLMonikerEx2(LPMONIKER pMkCtx, IUri* pUri, LPMONIKER  * ppmk, DWORD dwFlags);             
#line 511 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
extern "C" HRESULT __stdcall CreateAsyncBindCtxEx(IBindCtx *pbc, DWORD dwOptions, IBindStatusCallback *pBSCb, IEnumFORMATETC *pEnum,   
                            IBindCtx **ppBC, DWORD reserved);                                                     
extern "C" HRESULT __stdcall MkParseDisplayNameEx(IBindCtx *pbc, LPCWSTR szDisplayName, ULONG *pchEaten,          
                                LPMONIKER *ppmk);                                           
extern "C" HRESULT __stdcall RegisterBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb,                     
                                IBindStatusCallback**  ppBSCBPrev, DWORD dwReserved);       
extern "C" HRESULT __stdcall RevokeBindStatusCallback(LPBC pBC, IBindStatusCallback *pBSCb);                      
extern "C" HRESULT __stdcall GetClassFileOrMime(LPBC pBC, LPCWSTR szFilename, LPVOID pBuffer, DWORD cbSize, LPCWSTR szMime, DWORD dwReserved, CLSID *pclsid); 
extern "C" HRESULT __stdcall IsValidURL(LPBC pBC, LPCWSTR szURL, DWORD dwReserved);                               
extern "C" HRESULT __stdcall CoGetClassObjectFromURL( const IID & rCLASSID,
            LPCWSTR szCODE, DWORD dwFileVersionMS, 
            DWORD dwFileVersionLS, LPCWSTR szTYPE,
            LPBINDCTX pBindCtx, DWORD dwClsContext,
            LPVOID pvReserved, const IID & riid, LPVOID * ppv);
extern "C" HRESULT __stdcall IEInstallScope(  LPDWORD pdwScope);
extern "C" HRESULT __stdcall FaultInIEFeature( HWND hWnd,
              uCLSSPEC *pClassSpec,
              QUERYCONTEXT *pQuery, DWORD dwFlags);                                           
extern "C" HRESULT __stdcall GetComponentIDFromCLSSPEC(  uCLSSPEC *pClassspec,
             LPSTR * ppszComponentID);                                                      


                                                 
                                                 
                                                 


 

extern "C" HRESULT __stdcall IsAsyncMoniker(IMoniker* pmk);                                                       
extern "C" HRESULT __stdcall CreateURLBinding(LPCWSTR lpszUrl,   IBindCtx *pbc,   IBinding **ppBdg);
 
extern "C" HRESULT __stdcall RegisterMediaTypes(UINT ctypes, const LPCSTR* rgszTypes, CLIPFORMAT* rgcfTypes);            
extern "C" HRESULT __stdcall FindMediaType(LPCSTR rgszTypes,   CLIPFORMAT* rgcfTypes);                                       
extern "C" HRESULT __stdcall CreateFormatEnumerator( UINT cfmtetc, FORMATETC* rgfmtetc, IEnumFORMATETC** ppenumfmtetc); 
extern "C" HRESULT __stdcall RegisterFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc, DWORD reserved);          
extern "C" HRESULT __stdcall RevokeFormatEnumerator(LPBC pBC, IEnumFORMATETC *pEFetc);                            
extern "C" HRESULT __stdcall RegisterMediaTypeClass(LPBC pBC,UINT ctypes, const LPCSTR* rgszTypes, CLSID *rgclsID, DWORD reserved);    
extern "C" HRESULT __stdcall FindMediaTypeClass(LPBC pBC, LPCSTR szType, CLSID *pclsID, DWORD reserved);                          
extern "C" HRESULT __stdcall UrlMkSetSessionOption(DWORD dwOption,   LPVOID pBuffer, DWORD dwBufferLength,   DWORD dwReserved);       
extern "C" HRESULT __stdcall UrlMkGetSessionOption(DWORD dwOption,   LPVOID pBuffer, DWORD dwBufferLength,   DWORD *pdwBufferLengthOut,   DWORD dwReserved);       
extern "C" HRESULT __stdcall FindMimeFromData(                                                                                                                  
                          LPBC    pBC,                   
                          LPCWSTR pwzUrl,                
      LPVOID  pBuffer,               
                                 DWORD   cbSize,                
                          LPCWSTR pwzMimeProposed,       
                                 DWORD   dwMimeFlags,           
                         LPWSTR  *ppwzMimeOut,          
                        DWORD   dwReserved);           





#line 567 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern "C" HRESULT __stdcall ObtainUserAgentString(                           
                                         DWORD dwOption, 
         LPSTR pszUAOut, 
                                   DWORD *cbSize); 
extern "C" HRESULT __stdcall CompareSecurityIds(  BYTE* pbSecurityId1,   DWORD dwLen1,   BYTE* pbSecurityId2,   DWORD dwLen2,   DWORD dwReserved);    
extern "C" HRESULT __stdcall CompatFlagsFromClsid(  CLSID *pclsid,   LPDWORD pdwCompatFlags,   LPDWORD pdwMiscStatusFlags);             
 






#line 585 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"


#line 588 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 589 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#pragma endregion
#pragma region Application Family

 











































 






#line 644 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
                                                                             



                                                                             










































#line 692 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"







#line 700 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#pragma endregion
#pragma region Desktop Family





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0000_v0_0_s_ifspec;





 

typedef    IPersistMoniker *LPPERSISTMONIKER;


extern "C" const IID IID_IPersistMoniker;


    
    struct __declspec(uuid("79eac9c9-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IPersistMoniker : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetClassID( 
              CLSID *pClassID) = 0;
        
        virtual HRESULT __stdcall IsDirty( void) = 0;
        
        virtual HRESULT __stdcall Load( 
             BOOL fFullyAvailable,
              IMoniker *pimkName,
              LPBC pibc,
             DWORD grfMode) = 0;
        
        virtual HRESULT __stdcall Save( 
              IMoniker *pimkName,
              LPBC pbc,
             BOOL fRemember) = 0;
        
        virtual HRESULT __stdcall SaveCompleted( 
              IMoniker *pimkName,
              LPBC pibc) = 0;
        
        virtual HRESULT __stdcall GetCurMoniker( 
              IMoniker **ppimkName) = 0;
        
    };
    
    



























































































#line 845 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 850 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 856 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0001_v0_0_s_ifspec;





 

typedef    IMonikerProp *LPMONIKERPROP;

typedef  
enum __MIDL_IMonikerProp_0001
    {
        MIMETYPEPROP	= 0,
        USE_SRC_URL	= 0x1,
        CLASSIDPROP	= 0x2,
        TRUSTEDDOWNLOADPROP	= 0x3,
        POPUPLEVELPROP	= 0x4
    } 	MONIKERPROPERTY;


extern "C" const IID IID_IMonikerProp;


    
    struct __declspec(uuid("a5ca5f7f-1847-4d87-9c5b-918509f7511d")) __declspec(novtable)
    IMonikerProp : public IUnknown
    {
    public:
        virtual HRESULT __stdcall PutProperty( 
             MONIKERPROPERTY mkp,
              LPCWSTR val) = 0;
        
    };
    
    




















































#line 950 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 955 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 961 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0002_v0_0_s_ifspec;





 

typedef  IBindProtocol *LPBINDPROTOCOL;


extern "C" const IID IID_IBindProtocol;


    
    struct __declspec(uuid("79eac9cd-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBindProtocol : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateBinding( 
             LPCWSTR szUrl,
             IBindCtx *pbc,
             IBinding **ppb) = 0;
        
    };
    
    





















































#line 1047 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 1052 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 1058 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0003_v0_0_s_ifspec;





 

typedef    IBinding *LPBINDING;


extern "C" const IID IID_IBinding;


    
    struct __declspec(uuid("79eac9c0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBinding : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Abort( void) = 0;
        
        virtual HRESULT __stdcall Suspend( void) = 0;
        
        virtual HRESULT __stdcall Resume( void) = 0;
        
        virtual HRESULT __stdcall SetPriority( 
             LONG nPriority) = 0;
        
        virtual HRESULT __stdcall GetPriority( 
              LONG *pnPriority) = 0;
        
        virtual  HRESULT __stdcall GetBindResult( 
             CLSID *pclsidProtocol,
             DWORD *pdwResult,
             
              LPOLESTR *pszResult,
             DWORD *pdwReserved) = 0;
        
    };
    
    























































































#line 1192 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 HRESULT __stdcall IBinding_RemoteGetBindResult_Proxy( 
     IBinding * This,
      CLSID *pclsidProtocol,
      DWORD *pdwResult,
      LPOLESTR *pszResult,
     DWORD dwReserved);


void __stdcall IBinding_RemoteGetBindResult_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1212 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 1218 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 1219 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#pragma endregion
#pragma region Application Family





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0004_v0_0_s_ifspec;





 

typedef    IBindStatusCallback *LPBINDSTATUSCALLBACK;

typedef  
enum __MIDL_IBindStatusCallback_0001
    {
        BINDVERB_GET	= 0,
        BINDVERB_POST	= 0x1,
        BINDVERB_PUT	= 0x2,
        BINDVERB_CUSTOM	= 0x3,
        BINDVERB_RESERVED1	= 0x4
    } 	BINDVERB;

typedef  
enum __MIDL_IBindStatusCallback_0002
    {
        BINDINFOF_URLENCODESTGMEDDATA	= 0x1,
        BINDINFOF_URLENCODEDEXTRAINFO	= 0x2
    } 	BINDINFOF;

typedef  
enum __MIDL_IBindStatusCallback_0003
    {
        BINDF_ASYNCHRONOUS	= 0x1,
        BINDF_ASYNCSTORAGE	= 0x2,
        BINDF_NOPROGRESSIVERENDERING	= 0x4,
        BINDF_OFFLINEOPERATION	= 0x8,
        BINDF_GETNEWESTVERSION	= 0x10,
        BINDF_NOWRITECACHE	= 0x20,
        BINDF_NEEDFILE	= 0x40,
        BINDF_PULLDATA	= 0x80,
        BINDF_IGNORESECURITYPROBLEM	= 0x100,
        BINDF_RESYNCHRONIZE	= 0x200,
        BINDF_HYPERLINK	= 0x400,
        BINDF_NO_UI	= 0x800,
        BINDF_SILENTOPERATION	= 0x1000,
        BINDF_PRAGMA_NO_CACHE	= 0x2000,
        BINDF_GETCLASSOBJECT	= 0x4000,
        BINDF_RESERVED_1	= 0x8000,
        BINDF_FREE_THREADED	= 0x10000,
        BINDF_DIRECT_READ	= 0x20000,
        BINDF_FORMS_SUBMIT	= 0x40000,
        BINDF_GETFROMCACHE_IF_NET_FAIL	= 0x80000,
        BINDF_FROMURLMON	= 0x100000,
        BINDF_FWD_BACK	= 0x200000,
        BINDF_PREFERDEFAULTHANDLER	= 0x400000,
        BINDF_ENFORCERESTRICTED	= 0x800000,
        BINDF_RESERVED_2	= 0x80000000,
        BINDF_RESERVED_3	= 0x1000000,
        BINDF_RESERVED_4	= 0x2000000,
        BINDF_RESERVED_5	= 0x4000000,
        BINDF_RESERVED_6	= 0x8000000,
        BINDF_RESERVED_7	= 0x40000000,
        BINDF_RESERVED_8	= 0x20000000
    } 	BINDF;

typedef  
enum __MIDL_IBindStatusCallback_0004
    {
        URL_ENCODING_NONE	= 0,
        URL_ENCODING_ENABLE_UTF8	= 0x10000000,
        URL_ENCODING_DISABLE_UTF8	= 0x20000000
    } 	URL_ENCODING;

typedef struct _tagBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    STGMEDIUM stgmedData;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    SECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } 	BINDINFO;

typedef struct _REMSECURITY_ATTRIBUTES
    {
    DWORD nLength;
    DWORD lpSecurityDescriptor;
    BOOL bInheritHandle;
    } 	REMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *PREMSECURITY_ATTRIBUTES;

typedef struct _REMSECURITY_ATTRIBUTES *LPREMSECURITY_ATTRIBUTES;

typedef struct _tagRemBINDINFO
    {
    ULONG cbSize;
    LPWSTR szExtraInfo;
    DWORD grfBindInfoF;
    DWORD dwBindVerb;
    LPWSTR szCustomVerb;
    DWORD cbstgmedData;
    DWORD dwOptions;
    DWORD dwOptionsFlags;
    DWORD dwCodePage;
    REMSECURITY_ATTRIBUTES securityAttributes;
    IID iid;
    IUnknown *pUnk;
    DWORD dwReserved;
    } 	RemBINDINFO;

typedef struct tagRemFORMATETC
    {
    DWORD cfFormat;
    DWORD ptd;
    DWORD dwAspect;
    LONG lindex;
    DWORD tymed;
    } 	RemFORMATETC;

typedef struct tagRemFORMATETC *LPREMFORMATETC;

typedef  
enum __MIDL_IBindStatusCallback_0005
    {
        BINDINFO_OPTIONS_WININETFLAG	= 0x10000,
        BINDINFO_OPTIONS_ENABLE_UTF8	= 0x20000,
        BINDINFO_OPTIONS_DISABLE_UTF8	= 0x40000,
        BINDINFO_OPTIONS_USE_IE_ENCODING	= 0x80000,
        BINDINFO_OPTIONS_BINDTOOBJECT	= 0x100000,
        BINDINFO_OPTIONS_SECURITYOPTOUT	= 0x200000,
        BINDINFO_OPTIONS_IGNOREMIMETEXTPLAIN	= 0x400000,
        BINDINFO_OPTIONS_USEBINDSTRINGCREDS	= 0x800000,
        BINDINFO_OPTIONS_IGNOREHTTPHTTPSREDIRECTS	= 0x1000000,
        BINDINFO_OPTIONS_IGNORE_SSLERRORS_ONCE	= 0x2000000,
        BINDINFO_WPC_DOWNLOADBLOCKED	= 0x8000000,
        BINDINFO_WPC_LOGGING_ENABLED	= 0x10000000,
        BINDINFO_OPTIONS_ALLOWCONNECTDATA	= 0x20000000,
        BINDINFO_OPTIONS_DISABLEAUTOREDIRECTS	= 0x40000000,
        BINDINFO_OPTIONS_SHDOCVW_NAVIGATE	= ( int  )0x80000000
    } 	BINDINFO_OPTIONS;

typedef  
enum __MIDL_IBindStatusCallback_0006
    {
        BSCF_FIRSTDATANOTIFICATION	= 0x1,
        BSCF_INTERMEDIATEDATANOTIFICATION	= 0x2,
        BSCF_LASTDATANOTIFICATION	= 0x4,
        BSCF_DATAFULLYAVAILABLE	= 0x8,
        BSCF_AVAILABLEDATASIZEUNKNOWN	= 0x10,
        BSCF_SKIPDRAINDATAFORFILEURLS	= 0x20,
        BSCF_64BITLENGTHDOWNLOAD	= 0x40
    } 	BSCF;

typedef 
enum tagBINDSTATUS
    {
        BINDSTATUS_FINDINGRESOURCE	= 1,
        BINDSTATUS_CONNECTING	= ( BINDSTATUS_FINDINGRESOURCE + 1 ) ,
        BINDSTATUS_REDIRECTING	= ( BINDSTATUS_CONNECTING + 1 ) ,
        BINDSTATUS_BEGINDOWNLOADDATA	= ( BINDSTATUS_REDIRECTING + 1 ) ,
        BINDSTATUS_DOWNLOADINGDATA	= ( BINDSTATUS_BEGINDOWNLOADDATA + 1 ) ,
        BINDSTATUS_ENDDOWNLOADDATA	= ( BINDSTATUS_DOWNLOADINGDATA + 1 ) ,
        BINDSTATUS_BEGINDOWNLOADCOMPONENTS	= ( BINDSTATUS_ENDDOWNLOADDATA + 1 ) ,
        BINDSTATUS_INSTALLINGCOMPONENTS	= ( BINDSTATUS_BEGINDOWNLOADCOMPONENTS + 1 ) ,
        BINDSTATUS_ENDDOWNLOADCOMPONENTS	= ( BINDSTATUS_INSTALLINGCOMPONENTS + 1 ) ,
        BINDSTATUS_USINGCACHEDCOPY	= ( BINDSTATUS_ENDDOWNLOADCOMPONENTS + 1 ) ,
        BINDSTATUS_SENDINGREQUEST	= ( BINDSTATUS_USINGCACHEDCOPY + 1 ) ,
        BINDSTATUS_CLASSIDAVAILABLE	= ( BINDSTATUS_SENDINGREQUEST + 1 ) ,
        BINDSTATUS_MIMETYPEAVAILABLE	= ( BINDSTATUS_CLASSIDAVAILABLE + 1 ) ,
        BINDSTATUS_CACHEFILENAMEAVAILABLE	= ( BINDSTATUS_MIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_BEGINSYNCOPERATION	= ( BINDSTATUS_CACHEFILENAMEAVAILABLE + 1 ) ,
        BINDSTATUS_ENDSYNCOPERATION	= ( BINDSTATUS_BEGINSYNCOPERATION + 1 ) ,
        BINDSTATUS_BEGINUPLOADDATA	= ( BINDSTATUS_ENDSYNCOPERATION + 1 ) ,
        BINDSTATUS_UPLOADINGDATA	= ( BINDSTATUS_BEGINUPLOADDATA + 1 ) ,
        BINDSTATUS_ENDUPLOADDATA	= ( BINDSTATUS_UPLOADINGDATA + 1 ) ,
        BINDSTATUS_PROTOCOLCLASSID	= ( BINDSTATUS_ENDUPLOADDATA + 1 ) ,
        BINDSTATUS_ENCODING	= ( BINDSTATUS_PROTOCOLCLASSID + 1 ) ,
        BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE	= ( BINDSTATUS_ENCODING + 1 ) ,
        BINDSTATUS_CLASSINSTALLLOCATION	= ( BINDSTATUS_VERIFIEDMIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_DECODING	= ( BINDSTATUS_CLASSINSTALLLOCATION + 1 ) ,
        BINDSTATUS_LOADINGMIMEHANDLER	= ( BINDSTATUS_DECODING + 1 ) ,
        BINDSTATUS_CONTENTDISPOSITIONATTACH	= ( BINDSTATUS_LOADINGMIMEHANDLER + 1 ) ,
        BINDSTATUS_FILTERREPORTMIMETYPE	= ( BINDSTATUS_CONTENTDISPOSITIONATTACH + 1 ) ,
        BINDSTATUS_CLSIDCANINSTANTIATE	= ( BINDSTATUS_FILTERREPORTMIMETYPE + 1 ) ,
        BINDSTATUS_IUNKNOWNAVAILABLE	= ( BINDSTATUS_CLSIDCANINSTANTIATE + 1 ) ,
        BINDSTATUS_DIRECTBIND	= ( BINDSTATUS_IUNKNOWNAVAILABLE + 1 ) ,
        BINDSTATUS_RAWMIMETYPE	= ( BINDSTATUS_DIRECTBIND + 1 ) ,
        BINDSTATUS_PROXYDETECTING	= ( BINDSTATUS_RAWMIMETYPE + 1 ) ,
        BINDSTATUS_ACCEPTRANGES	= ( BINDSTATUS_PROXYDETECTING + 1 ) ,
        BINDSTATUS_COOKIE_SENT	= ( BINDSTATUS_ACCEPTRANGES + 1 ) ,
        BINDSTATUS_COMPACT_POLICY_RECEIVED	= ( BINDSTATUS_COOKIE_SENT + 1 ) ,
        BINDSTATUS_COOKIE_SUPPRESSED	= ( BINDSTATUS_COMPACT_POLICY_RECEIVED + 1 ) ,
        BINDSTATUS_COOKIE_STATE_UNKNOWN	= ( BINDSTATUS_COOKIE_SUPPRESSED + 1 ) ,
        BINDSTATUS_COOKIE_STATE_ACCEPT	= ( BINDSTATUS_COOKIE_STATE_UNKNOWN + 1 ) ,
        BINDSTATUS_COOKIE_STATE_REJECT	= ( BINDSTATUS_COOKIE_STATE_ACCEPT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_PROMPT	= ( BINDSTATUS_COOKIE_STATE_REJECT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_LEASH	= ( BINDSTATUS_COOKIE_STATE_PROMPT + 1 ) ,
        BINDSTATUS_COOKIE_STATE_DOWNGRADE	= ( BINDSTATUS_COOKIE_STATE_LEASH + 1 ) ,
        BINDSTATUS_POLICY_HREF	= ( BINDSTATUS_COOKIE_STATE_DOWNGRADE + 1 ) ,
        BINDSTATUS_P3P_HEADER	= ( BINDSTATUS_POLICY_HREF + 1 ) ,
        BINDSTATUS_SESSION_COOKIE_RECEIVED	= ( BINDSTATUS_P3P_HEADER + 1 ) ,
        BINDSTATUS_PERSISTENT_COOKIE_RECEIVED	= ( BINDSTATUS_SESSION_COOKIE_RECEIVED + 1 ) ,
        BINDSTATUS_SESSION_COOKIES_ALLOWED	= ( BINDSTATUS_PERSISTENT_COOKIE_RECEIVED + 1 ) ,
        BINDSTATUS_CACHECONTROL	= ( BINDSTATUS_SESSION_COOKIES_ALLOWED + 1 ) ,
        BINDSTATUS_CONTENTDISPOSITIONFILENAME	= ( BINDSTATUS_CACHECONTROL + 1 ) ,
        BINDSTATUS_MIMETEXTPLAINMISMATCH	= ( BINDSTATUS_CONTENTDISPOSITIONFILENAME + 1 ) ,
        BINDSTATUS_PUBLISHERAVAILABLE	= ( BINDSTATUS_MIMETEXTPLAINMISMATCH + 1 ) ,
        BINDSTATUS_DISPLAYNAMEAVAILABLE	= ( BINDSTATUS_PUBLISHERAVAILABLE + 1 ) ,
        BINDSTATUS_SSLUX_NAVBLOCKED	= ( BINDSTATUS_DISPLAYNAMEAVAILABLE + 1 ) ,
        BINDSTATUS_SERVER_MIMETYPEAVAILABLE	= ( BINDSTATUS_SSLUX_NAVBLOCKED + 1 ) ,
        BINDSTATUS_SNIFFED_CLASSIDAVAILABLE	= ( BINDSTATUS_SERVER_MIMETYPEAVAILABLE + 1 ) ,
        BINDSTATUS_64BIT_PROGRESS	= ( BINDSTATUS_SNIFFED_CLASSIDAVAILABLE + 1 ) ,
        BINDSTATUS_LAST	= BINDSTATUS_64BIT_PROGRESS,
        BINDSTATUS_RESERVED_0	= ( BINDSTATUS_LAST + 1 ) ,
        BINDSTATUS_RESERVED_1	= ( BINDSTATUS_RESERVED_0 + 1 ) ,
        BINDSTATUS_RESERVED_2	= ( BINDSTATUS_RESERVED_1 + 1 ) ,
        BINDSTATUS_RESERVED_3	= ( BINDSTATUS_RESERVED_2 + 1 ) ,
        BINDSTATUS_RESERVED_4	= ( BINDSTATUS_RESERVED_3 + 1 ) ,
        BINDSTATUS_RESERVED_5	= ( BINDSTATUS_RESERVED_4 + 1 ) ,
        BINDSTATUS_RESERVED_6	= ( BINDSTATUS_RESERVED_5 + 1 ) ,
        BINDSTATUS_RESERVED_7	= ( BINDSTATUS_RESERVED_6 + 1 ) ,
        BINDSTATUS_RESERVED_8	= ( BINDSTATUS_RESERVED_7 + 1 ) ,
        BINDSTATUS_RESERVED_9	= ( BINDSTATUS_RESERVED_8 + 1 ) ,
        BINDSTATUS_LAST_PRIVATE	= BINDSTATUS_RESERVED_9
    } 	BINDSTATUS;


extern "C" const IID IID_IBindStatusCallback;


    
    struct __declspec(uuid("79eac9c1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IBindStatusCallback : public IUnknown
    {
    public:
        virtual HRESULT __stdcall OnStartBinding( 
             DWORD dwReserved,
              IBinding *pib) = 0;
        
        virtual HRESULT __stdcall GetPriority( 
              LONG *pnPriority) = 0;
        
        virtual HRESULT __stdcall OnLowResource( 
             DWORD reserved) = 0;
        
        virtual HRESULT __stdcall OnProgress( 
             ULONG ulProgress,
             ULONG ulProgressMax,
             ULONG ulStatusCode,
              LPCWSTR szStatusText) = 0;
        
        virtual HRESULT __stdcall OnStopBinding( 
             HRESULT hresult,
              LPCWSTR szError) = 0;
        
        virtual  HRESULT __stdcall GetBindInfo( 
             DWORD *grfBINDF,
             BINDINFO *pbindinfo) = 0;
        
        virtual  HRESULT __stdcall OnDataAvailable( 
             DWORD grfBSCF,
             DWORD dwSize,
             FORMATETC *pformatetc,
             STGMEDIUM *pstgmed) = 0;
        
        virtual HRESULT __stdcall OnObjectAvailable( 
              const IID & riid,
              IUnknown *punk) = 0;
        
    };
    
    














































































































#line 1617 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 HRESULT __stdcall IBindStatusCallback_RemoteGetBindInfo_Proxy( 
     IBindStatusCallback * This,
      DWORD *grfBINDF,
      RemBINDINFO *pbindinfo,
      RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteGetBindInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindStatusCallback_RemoteOnDataAvailable_Proxy( 
     IBindStatusCallback * This,
     DWORD grfBSCF,
     DWORD dwSize,
      RemFORMATETC *pformatetc,
      RemSTGMEDIUM *pstgmed);


void __stdcall IBindStatusCallback_RemoteOnDataAvailable_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1651 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 1657 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 1658 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#pragma endregion
#pragma region Desktop Family





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0005_v0_0_s_ifspec;





 

typedef    IBindStatusCallbackEx *LPBINDSTATUSCALLBACKEX;

typedef  
enum __MIDL_IBindStatusCallbackEx_0001
    {
        BINDF2_DISABLEBASICOVERHTTP	= 0x1,
        BINDF2_DISABLEAUTOCOOKIEHANDLING	= 0x2,
        BINDF2_READ_DATA_GREATER_THAN_4GB	= 0x4,
        BINDF2_DISABLE_HTTP_REDIRECT_XSECURITYID	= 0x8,
        BINDF2_SETDOWNLOADMODE	= 0x20,
        BINDF2_DISABLE_HTTP_REDIRECT_CACHING	= 0x40,
        BINDF2_KEEP_CALLBACK_MODULE_LOADED	= 0x80,
        BINDF2_ALLOW_PROXY_CRED_PROMPT	= 0x100,
        BINDF2_RESERVED_F	= 0x20000,
        BINDF2_RESERVED_E	= 0x40000,
        BINDF2_RESERVED_D	= 0x80000,
        BINDF2_RESERVED_C	= 0x100000,
        BINDF2_RESERVED_B	= 0x200000,
        BINDF2_RESERVED_A	= 0x400000,
        BINDF2_RESERVED_9	= 0x800000,
        BINDF2_RESERVED_8	= 0x1000000,
        BINDF2_RESERVED_7	= 0x2000000,
        BINDF2_RESERVED_6	= 0x4000000,
        BINDF2_RESERVED_5	= 0x8000000,
        BINDF2_RESERVED_4	= 0x10000000,
        BINDF2_RESERVED_3	= 0x20000000,
        BINDF2_RESERVED_2	= 0x40000000,
        BINDF2_RESERVED_1	= 0x80000000
    } 	BINDF2;


extern "C" const IID IID_IBindStatusCallbackEx;


    
    struct __declspec(uuid("aaa74ef9-8ee7-4659-88d9-f8c504da73cc")) __declspec(novtable)
    IBindStatusCallbackEx : public IBindStatusCallback
    {
    public:
        virtual  HRESULT __stdcall GetBindInfoEx( 
             DWORD *grfBINDF,
             BINDINFO *pbindinfo,
             DWORD *grfBINDF2,
             DWORD *pdwReserved) = 0;
        
    };
    
    

























































































































#line 1844 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 HRESULT __stdcall IBindStatusCallbackEx_RemoteGetBindInfoEx_Proxy( 
     IBindStatusCallbackEx * This,
      DWORD *grfBINDF,
      RemBINDINFO *pbindinfo,
      RemSTGMEDIUM *pstgmed,
      DWORD *grfBINDF2,
      DWORD *pdwReserved);


void __stdcall IBindStatusCallbackEx_RemoteGetBindInfoEx_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1865 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 1871 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0006_v0_0_s_ifspec;





 

typedef    IAuthenticate *LPAUTHENTICATION;


extern "C" const IID IID_IAuthenticate;


    
    struct __declspec(uuid("79eac9d0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IAuthenticate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Authenticate( 
              HWND *phwnd,
              LPWSTR *pszUsername,
              LPWSTR *pszPassword) = 0;
        
    };
    
    





















































#line 1957 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 1962 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 1968 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0007_v0_0_s_ifspec;





 

typedef    IAuthenticateEx *LPAUTHENTICATIONEX;

typedef  
enum __MIDL_IAuthenticateEx_0001
    {
        AUTHENTICATEF_PROXY	= 0x1,
        AUTHENTICATEF_BASIC	= 0x2,
        AUTHENTICATEF_HTTP	= 0x4
    } 	AUTHENTICATEF;

typedef struct _tagAUTHENTICATEINFO
    {
    DWORD dwFlags;
    DWORD dwReserved;
    } 	AUTHENTICATEINFO;


extern "C" const IID IID_IAuthenticateEx;


    
    struct __declspec(uuid("2ad1edaf-d83d-48b5-9adf-03dbe19f53bd")) __declspec(novtable)
    IAuthenticateEx : public IAuthenticate
    {
    public:
        virtual HRESULT __stdcall AuthenticateEx( 
              HWND *phwnd,
              LPWSTR *pszUsername,
              LPWSTR *pszPassword,
              AUTHENTICATEINFO *pauthinfo) = 0;
        
    };
    
    
































































#line 2080 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 2085 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 2091 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0008_v0_0_s_ifspec;





 

typedef    IHttpNegotiate *LPHTTPNEGOTIATE;


extern "C" const IID IID_IHttpNegotiate;


    
    struct __declspec(uuid("79eac9d2-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IHttpNegotiate : public IUnknown
    {
    public:
        virtual HRESULT __stdcall BeginningTransaction( 
              LPCWSTR szURL,
              LPCWSTR szHeaders,
             DWORD dwReserved,
              LPWSTR *pszAdditionalHeaders) = 0;
        
        virtual HRESULT __stdcall OnResponse( 
             DWORD dwResponseCode,
              LPCWSTR szResponseHeaders,
              LPCWSTR szRequestHeaders,
              LPWSTR *pszAdditionalRequestHeaders) = 0;
        
    };
    
    
































































#line 2195 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 2200 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 2206 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0009_v0_0_s_ifspec;





 

typedef    IHttpNegotiate2 *LPHTTPNEGOTIATE2;


extern "C" const IID IID_IHttpNegotiate2;


    
    struct __declspec(uuid("4F9F9FCB-E0F4-48eb-B7AB-FA2EA9365CB4")) __declspec(novtable)
    IHttpNegotiate2 : public IHttpNegotiate
    {
    public:
        virtual HRESULT __stdcall GetRootSecurityId( 
              BYTE *pbSecurityId,
              DWORD *pcbSecurityId,
             DWORD_PTR dwReserved) = 0;
        
    };
    
    










































































#line 2313 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 2318 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 2324 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0010_v0_0_s_ifspec;





 

typedef    IHttpNegotiate3 *LPHTTPNEGOTIATE3;


extern "C" const IID IID_IHttpNegotiate3;


    
    struct __declspec(uuid("57b6c80a-34c2-4602-bc26-66a02fc57153")) __declspec(novtable)
    IHttpNegotiate3 : public IHttpNegotiate2
    {
    public:
        virtual HRESULT __stdcall GetSerializedClientCertContext( 
              BYTE **ppbCert,
              DWORD *pcbCert) = 0;
        
    };
    
    



















































































#line 2439 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 2444 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 2450 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0011_v0_0_s_ifspec;





 

typedef    IWinInetFileStream *LPWININETFILESTREAM;


extern "C" const IID IID_IWinInetFileStream;


    
    struct __declspec(uuid("F134C4B7-B1F8-4e75-B886-74B90943BECB")) __declspec(novtable)
    IWinInetFileStream : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetHandleForUnlock( 
             DWORD_PTR hWinInetLockHandle,
             DWORD_PTR dwReserved) = 0;
        
        virtual HRESULT __stdcall SetDeleteFile( 
             DWORD_PTR dwReserved) = 0;
        
    };
    
    



























































#line 2544 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 2549 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 2555 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0012_v0_0_s_ifspec;





 

typedef  IWindowForBindingUI *LPWINDOWFORBINDINGUI;


extern "C" const IID IID_IWindowForBindingUI;


    
    struct __declspec(uuid("79eac9d5-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWindowForBindingUI : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow( 
             const GUID & rguidReason,
             HWND *phwnd) = 0;
        
    };
    
    




















































#line 2639 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 2644 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 2650 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0013_v0_0_s_ifspec;





 

typedef  ICodeInstall *LPCODEINSTALL;

typedef  
enum __MIDL_ICodeInstall_0001
    {
        CIP_DISK_FULL	= 0,
        CIP_ACCESS_DENIED	= ( CIP_DISK_FULL + 1 ) ,
        CIP_NEWER_VERSION_EXISTS	= ( CIP_ACCESS_DENIED + 1 ) ,
        CIP_OLDER_VERSION_EXISTS	= ( CIP_NEWER_VERSION_EXISTS + 1 ) ,
        CIP_NAME_CONFLICT	= ( CIP_OLDER_VERSION_EXISTS + 1 ) ,
        CIP_TRUST_VERIFICATION_COMPONENT_MISSING	= ( CIP_NAME_CONFLICT + 1 ) ,
        CIP_EXE_SELF_REGISTERATION_TIMEOUT	= ( CIP_TRUST_VERIFICATION_COMPONENT_MISSING + 1 ) ,
        CIP_UNSAFE_TO_ABORT	= ( CIP_EXE_SELF_REGISTERATION_TIMEOUT + 1 ) ,
        CIP_NEED_REBOOT	= ( CIP_UNSAFE_TO_ABORT + 1 ) ,
        CIP_NEED_REBOOT_UI_PERMISSION	= ( CIP_NEED_REBOOT + 1 ) 
    } 	CIP_STATUS;


extern "C" const IID IID_ICodeInstall;


    
    struct __declspec(uuid("79eac9d1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    ICodeInstall : public IWindowForBindingUI
    {
    public:
        virtual HRESULT __stdcall OnCodeInstallProblem( 
             ULONG ulStatusCode,
             LPCWSTR szDestination,
             LPCWSTR szSource,
             DWORD dwReserved) = 0;
        
    };
    
    































































#line 2762 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 2767 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 2773 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 2774 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#pragma endregion



#pragma region Application Family



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0014_v0_0_s_ifspec;





 

typedef  
enum __MIDL_IUri_0001
    {
        Uri_PROPERTY_ABSOLUTE_URI	= 0,
        Uri_PROPERTY_STRING_START	= Uri_PROPERTY_ABSOLUTE_URI,
        Uri_PROPERTY_AUTHORITY	= 1,
        Uri_PROPERTY_DISPLAY_URI	= 2,
        Uri_PROPERTY_DOMAIN	= 3,
        Uri_PROPERTY_EXTENSION	= 4,
        Uri_PROPERTY_FRAGMENT	= 5,
        Uri_PROPERTY_HOST	= 6,
        Uri_PROPERTY_PASSWORD	= 7,
        Uri_PROPERTY_PATH	= 8,
        Uri_PROPERTY_PATH_AND_QUERY	= 9,
        Uri_PROPERTY_QUERY	= 10,
        Uri_PROPERTY_RAW_URI	= 11,
        Uri_PROPERTY_SCHEME_NAME	= 12,
        Uri_PROPERTY_USER_INFO	= 13,
        Uri_PROPERTY_USER_NAME	= 14,
        Uri_PROPERTY_STRING_LAST	= Uri_PROPERTY_USER_NAME,
        Uri_PROPERTY_HOST_TYPE	= 15,
        Uri_PROPERTY_DWORD_START	= Uri_PROPERTY_HOST_TYPE,
        Uri_PROPERTY_PORT	= 16,
        Uri_PROPERTY_SCHEME	= 17,
        Uri_PROPERTY_ZONE	= 18,
        Uri_PROPERTY_DWORD_LAST	= Uri_PROPERTY_ZONE
    } 	Uri_PROPERTY;

typedef  
enum __MIDL_IUri_0002
    {
        Uri_HOST_UNKNOWN	= 0,
        Uri_HOST_DNS	= ( Uri_HOST_UNKNOWN + 1 ) ,
        Uri_HOST_IPV4	= ( Uri_HOST_DNS + 1 ) ,
        Uri_HOST_IPV6	= ( Uri_HOST_IPV4 + 1 ) ,
        Uri_HOST_IDN	= ( Uri_HOST_IPV6 + 1 ) 
    } 	Uri_HOST_TYPE;


extern "C" const IID IID_IUri;


    
    struct __declspec(uuid("A39EE748-6A27-4817-A6F2-13914BEF5890")) __declspec(novtable)
    IUri : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetPropertyBSTR( 
             Uri_PROPERTY uriProp,
              BSTR *pbstrProperty,
             DWORD dwFlags) = 0;
        
        virtual  HRESULT __stdcall GetPropertyLength( 
             Uri_PROPERTY uriProp,
              DWORD *pcchProperty,
             DWORD dwFlags) = 0;
        
        virtual  HRESULT __stdcall GetPropertyDWORD( 
             Uri_PROPERTY uriProp,
              DWORD *pdwProperty,
             DWORD dwFlags) = 0;
        
        virtual  HRESULT __stdcall HasProperty( 
             Uri_PROPERTY uriProp,
              BOOL *pfHasProperty) = 0;
        
        virtual  HRESULT __stdcall GetAbsoluteUri( 
              BSTR *pbstrAbsoluteUri) = 0;
        
        virtual  HRESULT __stdcall GetAuthority( 
              BSTR *pbstrAuthority) = 0;
        
        virtual  HRESULT __stdcall GetDisplayUri( 
              BSTR *pbstrDisplayString) = 0;
        
        virtual  HRESULT __stdcall GetDomain( 
              BSTR *pbstrDomain) = 0;
        
        virtual  HRESULT __stdcall GetExtension( 
              BSTR *pbstrExtension) = 0;
        
        virtual  HRESULT __stdcall GetFragment( 
              BSTR *pbstrFragment) = 0;
        
        virtual  HRESULT __stdcall GetHost( 
              BSTR *pbstrHost) = 0;
        
        virtual  HRESULT __stdcall GetPassword( 
              BSTR *pbstrPassword) = 0;
        
        virtual  HRESULT __stdcall GetPath( 
              BSTR *pbstrPath) = 0;
        
        virtual  HRESULT __stdcall GetPathAndQuery( 
              BSTR *pbstrPathAndQuery) = 0;
        
        virtual  HRESULT __stdcall GetQuery( 
              BSTR *pbstrQuery) = 0;
        
        virtual  HRESULT __stdcall GetRawUri( 
              BSTR *pbstrRawUri) = 0;
        
        virtual  HRESULT __stdcall GetSchemeName( 
              BSTR *pbstrSchemeName) = 0;
        
        virtual  HRESULT __stdcall GetUserInfo( 
              BSTR *pbstrUserInfo) = 0;
        
        virtual  HRESULT __stdcall GetUserNameA( 
              BSTR *pbstrUserName) = 0;
        
        virtual  HRESULT __stdcall GetHostType( 
              DWORD *pdwHostType) = 0;
        
        virtual  HRESULT __stdcall GetPort( 
              DWORD *pdwPort) = 0;
        
        virtual  HRESULT __stdcall GetScheme( 
              DWORD *pdwScheme) = 0;
        
        virtual  HRESULT __stdcall GetZone( 
              DWORD *pdwZone) = 0;
        
        virtual  HRESULT __stdcall GetProperties( 
              LPDWORD pdwFlags) = 0;
        
        virtual  HRESULT __stdcall IsEqual( 
              IUri *pUri,
              BOOL *pfEqual) = 0;
        
    };
    
    



































































































































































































































#line 3152 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 3157 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

extern "C" HRESULT __stdcall CreateUri(  LPCWSTR pwzURI,
                   DWORD dwFlags,
                   DWORD_PTR dwReserved,   
                   IUri** ppURI);

extern "C" HRESULT __stdcall CreateUriWithFragment(
                   LPCWSTR pwzURI,
                   LPCWSTR pwzFragment,        
                   DWORD dwFlags,
                   DWORD_PTR dwReserved,   
                   IUri** ppURI);

#line 3175 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#pragma endregion
#pragma region Desktop Family


extern "C" HRESULT __stdcall CreateUriFromMultiByteString(
            LPCSTR    pszANSIInputUri,
               DWORD     dwEncodingFlags, 
               DWORD     dwCodePage,
               DWORD     dwCreateFlags,
      DWORD_PTR dwReserved,   
           IUri**    ppUri);

#line 3188 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#pragma endregion
#pragma region Application Family

































































#line 3256 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#pragma endregion
#line 3258 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#pragma region Desktop Family



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0015_v0_0_s_ifspec;





 


extern "C" const IID IID_IUriContainer;


    
    struct __declspec(uuid("a158a630-ed6f-45fb-b987-f68676f57752")) __declspec(novtable)
    IUriContainer : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetIUri( 
             IUri **ppIUri) = 0;
        
    };
    
    



















































#line 3338 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 3343 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"






 


extern "C" const IID IID_IUriBuilder;


    
    struct __declspec(uuid("4221B2E1-8955-46c0-BD5B-DE9897565DE7")) __declspec(novtable)
    IUriBuilder : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall CreateUriSimple( 
             DWORD dwAllowEncodingPropertyMask,
             DWORD_PTR dwReserved,
             
              IUri **ppIUri) = 0;
        
        virtual  HRESULT __stdcall CreateUri( 
             DWORD dwCreateFlags,
             DWORD dwAllowEncodingPropertyMask,
             DWORD_PTR dwReserved,
             
              IUri **ppIUri) = 0;
        
        virtual  HRESULT __stdcall CreateUriWithFlags( 
             DWORD dwCreateFlags,
             DWORD dwUriBuilderFlags,
             DWORD dwAllowEncodingPropertyMask,
             DWORD_PTR dwReserved,
             
              IUri **ppIUri) = 0;
        
        virtual  HRESULT __stdcall GetIUri( 
             
              IUri **ppIUri) = 0;
        
        virtual  HRESULT __stdcall SetIUri( 
             
               IUri *pIUri) = 0;
        
        virtual  HRESULT __stdcall GetFragment( 
             
               DWORD *pcchFragment,
             
              LPCWSTR *ppwzFragment) = 0;
        
        virtual  HRESULT __stdcall GetHost( 
             
               DWORD *pcchHost,
             
              LPCWSTR *ppwzHost) = 0;
        
        virtual  HRESULT __stdcall GetPassword( 
             
               DWORD *pcchPassword,
             
              LPCWSTR *ppwzPassword) = 0;
        
        virtual  HRESULT __stdcall GetPath( 
             
               DWORD *pcchPath,
             
              LPCWSTR *ppwzPath) = 0;
        
        virtual  HRESULT __stdcall GetPort( 
             
               BOOL *pfHasPort,
             
               DWORD *pdwPort) = 0;
        
        virtual  HRESULT __stdcall GetQuery( 
             
               DWORD *pcchQuery,
             
              LPCWSTR *ppwzQuery) = 0;
        
        virtual  HRESULT __stdcall GetSchemeName( 
             
               DWORD *pcchSchemeName,
             
              LPCWSTR *ppwzSchemeName) = 0;
        
        virtual  HRESULT __stdcall GetUserNameA( 
             
               DWORD *pcchUserName,
             
              LPCWSTR *ppwzUserName) = 0;
        
        virtual  HRESULT __stdcall SetFragment( 
             
               LPCWSTR pwzNewValue) = 0;
        
        virtual  HRESULT __stdcall SetHost( 
             
               LPCWSTR pwzNewValue) = 0;
        
        virtual  HRESULT __stdcall SetPassword( 
             
               LPCWSTR pwzNewValue) = 0;
        
        virtual  HRESULT __stdcall SetPath( 
             
               LPCWSTR pwzNewValue) = 0;
        
        virtual  HRESULT __stdcall SetPortA( 
             BOOL fHasPort,
             DWORD dwNewValue) = 0;
        
        virtual  HRESULT __stdcall SetQuery( 
             
               LPCWSTR pwzNewValue) = 0;
        
        virtual  HRESULT __stdcall SetSchemeName( 
             
               LPCWSTR pwzNewValue) = 0;
        
        virtual  HRESULT __stdcall SetUserName( 
             
               LPCWSTR pwzNewValue) = 0;
        
        virtual  HRESULT __stdcall RemoveProperties( 
             DWORD dwPropertyMask) = 0;
        
        virtual  HRESULT __stdcall HasBeenModified( 
             
               BOOL *pfModified) = 0;
        
    };
    
    




























































































































































































































































#line 3732 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 3737 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"






 


extern "C" const IID IID_IUriBuilderFactory;


    
    struct __declspec(uuid("E982CE48-0B96-440c-BC37-0C869B27A29E")) __declspec(novtable)
    IUriBuilderFactory : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall CreateIUriBuilder( 
             
               DWORD dwFlags,
             
               DWORD_PTR dwReserved,
             
               IUriBuilder **ppIUriBuilder) = 0;
        
        virtual  HRESULT __stdcall CreateInitializedIUriBuilder( 
             
               DWORD dwFlags,
             
               DWORD_PTR dwReserved,
             
               IUriBuilder **ppIUriBuilder) = 0;
        
    };
    
    




































































#line 3842 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 3847 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

extern "C" HRESULT __stdcall CreateIUriBuilder(
          IUri         *pIUri,
              DWORD         dwFlags,
              DWORD_PTR     dwReserved,
             IUriBuilder **ppIUriBuilder
    );
#line 3859 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#pragma endregion
#line 3861 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#pragma region Desktop Family





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0018_v0_0_s_ifspec;





 

typedef    IWinInetInfo *LPWININETINFO;


extern "C" const IID IID_IWinInetInfo;


    
    struct __declspec(uuid("79eac9d6-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWinInetInfo : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall QueryOption( 
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pcbBuf) = 0;
        
    };
    
    





















































#line 3949 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 HRESULT __stdcall IWinInetInfo_RemoteQueryOption_Proxy( 
     IWinInetInfo * This,
     DWORD dwOption,
      BYTE *pBuffer,
      DWORD *pcbBuf);


void __stdcall IWinInetInfo_RemoteQueryOption_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 3968 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 3974 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0019_v0_0_s_ifspec;





 

typedef  IHttpSecurity *LPHTTPSECURITY;


extern "C" const IID IID_IHttpSecurity;


    
    struct __declspec(uuid("79eac9d7-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IHttpSecurity : public IWindowForBindingUI
    {
    public:
        virtual HRESULT __stdcall OnSecurityProblem( 
             DWORD dwProblem) = 0;
        
    };
    
    




























































#line 4066 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 4071 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 4077 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0020_v0_0_s_ifspec;





 

typedef    IWinInetHttpInfo *LPWININETHTTPINFO;


extern "C" const IID IID_IWinInetHttpInfo;


    
    struct __declspec(uuid("79eac9d8-bafa-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IWinInetHttpInfo : public IWinInetInfo
    {
    public:
        virtual  HRESULT __stdcall QueryInfo( 
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pcbBuf,
             DWORD *pdwFlags,
             DWORD *pdwReserved) = 0;
        
    };
    
    

































































#line 4177 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 HRESULT __stdcall IWinInetHttpInfo_RemoteQueryInfo_Proxy( 
     IWinInetHttpInfo * This,
     DWORD dwOption,
      BYTE *pBuffer,
      DWORD *pcbBuf,
      DWORD *pdwFlags,
      DWORD *pdwReserved);


void __stdcall IWinInetHttpInfo_RemoteQueryInfo_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4198 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 4204 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0021_v0_0_s_ifspec;





 


extern "C" const IID IID_IWinInetHttpTimeouts;


    
    struct __declspec(uuid("F286FA56-C1FD-4270-8E67-B3EB790A81E8")) __declspec(novtable)
    IWinInetHttpTimeouts : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall GetRequestTimeouts( 
             
               DWORD *pdwConnectTimeout,
             
               DWORD *pdwSendTimeout,
             
               DWORD *pdwReceiveTimeout) = 0;
        
    };
    
    
























































#line 4294 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 4299 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 4305 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0022_v0_0_s_ifspec;





 

typedef  IWinInetCacheHints *LPWININETCACHEHINTS;


extern "C" const IID IID_IWinInetCacheHints;


    
    struct __declspec(uuid("DD1EC3B3-8391-4fdb-A9E6-347C3CAAA7DD")) __declspec(novtable)
    IWinInetCacheHints : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetCacheExtension( 
             LPCWSTR pwzExt,
             LPVOID pszCacheFile,
             DWORD *pcbCacheFile,
             DWORD *pdwWinInetError,
             DWORD *pdwReserved) = 0;
        
    };
    
    























































#line 4396 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 4401 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 4407 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 4408 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0023_v0_0_s_ifspec;





 

typedef  IWinInetCacheHints2 *LPWININETCACHEHINTS2;


extern "C" const IID IID_IWinInetCacheHints2;


    
    struct __declspec(uuid("7857AEAC-D31F-49bf-884E-DD46DF36780A")) __declspec(novtable)
    IWinInetCacheHints2 : public IWinInetCacheHints
    {
    public:
        virtual HRESULT __stdcall SetCacheExtension2( 
             LPCWSTR pwzExt,
             
              WCHAR *pwzCacheFile,
             DWORD *pcchCacheFile,
             DWORD *pdwWinInetError,
             DWORD *pdwReserved) = 0;
        
    };
    
    




































































#line 4513 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 4518 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 4524 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 4525 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern "C" const GUID SID_BindHost;


extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0024_v0_0_s_ifspec;





 

typedef    IBindHost *LPBINDHOST;


extern "C" const IID IID_IBindHost;


    
    struct __declspec(uuid("fc4801a1-2ba9-11cf-a229-00aa003d7352")) __declspec(novtable)
    IBindHost : public IUnknown
    {
    public:
        virtual HRESULT __stdcall CreateMoniker( 
              LPOLESTR szName,
              IBindCtx *pBC,
              IMoniker **ppmk,
             DWORD dwReserved) = 0;
        
        virtual  HRESULT __stdcall MonikerBindToStorage( 
             IMoniker *pMk,
             IBindCtx *pBC,
             IBindStatusCallback *pBSC,
             const IID & riid,
             void **ppvObj) = 0;
        
        virtual  HRESULT __stdcall MonikerBindToObject( 
             IMoniker *pMk,
             IBindCtx *pBC,
             IBindStatusCallback *pBSC,
             const IID & riid,
             void **ppvObj) = 0;
        
    };
    
    












































































#line 4652 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 HRESULT __stdcall IBindHost_RemoteMonikerBindToStorage_Proxy( 
     IBindHost * This,
      IMoniker *pMk,
      IBindCtx *pBC,
      IBindStatusCallback *pBSC,
      const IID & riid,
      IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToStorage_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);


 HRESULT __stdcall IBindHost_RemoteMonikerBindToObject_Proxy( 
     IBindHost * This,
      IMoniker *pMk,
      IBindCtx *pBC,
      IBindStatusCallback *pBSC,
      const IID & riid,
      IUnknown **ppvObj);


void __stdcall IBindHost_RemoteMonikerBindToObject_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 4689 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 4695 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
                                                                                                           





                                                                                                           
                                                                                                           
struct IBindStatusCallback;                                                                                
extern "C" HRESULT __stdcall HlinkSimpleNavigateToString(                                                                        
     LPCWSTR szTarget,         
     LPCWSTR szLocation,       
     LPCWSTR szTargetFrameName,
     IUnknown *pUnk,           
     IBindCtx *pbc,            
     IBindStatusCallback *,                                                                      
     DWORD grfHLNF,            
     DWORD dwReserved          
);                                                                                                         
                                                                                                           
extern "C" HRESULT __stdcall HlinkSimpleNavigateToMoniker(                                                                       
     IMoniker *pmkTarget,      
     LPCWSTR szLocation,       
     LPCWSTR szTargetFrameName,
     IUnknown *pUnk,           
     IBindCtx *pbc,            
     IBindStatusCallback *,                                                                      
     DWORD grfHLNF,            
     DWORD dwReserved          
);                                                                                                         
                                                                                                           
extern "C" HRESULT __stdcall URLOpenStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                                        
extern "C" HRESULT __stdcall URLOpenStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                                       
extern "C" HRESULT __stdcall URLOpenPullStreamA(LPUNKNOWN,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                                    
extern "C" HRESULT __stdcall URLOpenPullStreamW(LPUNKNOWN,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                                   
extern "C" HRESULT __stdcall URLDownloadToFileA(LPUNKNOWN,LPCSTR,LPCSTR,DWORD,LPBINDSTATUSCALLBACK);                             
extern "C" HRESULT __stdcall URLDownloadToFileW(LPUNKNOWN,LPCWSTR,LPCWSTR,DWORD,LPBINDSTATUSCALLBACK);                           
extern "C" HRESULT __stdcall URLDownloadToCacheFileA(  LPUNKNOWN,   LPCSTR,    LPSTR,  DWORD cchFileName, DWORD,   LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLDownloadToCacheFileW(  LPUNKNOWN,   LPCWSTR,   LPWSTR, DWORD cchFileName, DWORD,   LPBINDSTATUSCALLBACK);
extern "C" HRESULT __stdcall URLOpenBlockingStreamA(LPUNKNOWN,LPCSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);                      
extern "C" HRESULT __stdcall URLOpenBlockingStreamW(LPUNKNOWN,LPCWSTR,LPSTREAM*,DWORD,LPBINDSTATUSCALLBACK);                     
                                                                                                           












#line 4750 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
                                                                                                           
                                                                                                           
extern "C" HRESULT __stdcall HlinkGoBack(IUnknown *pUnk);                                                                        
extern "C" HRESULT __stdcall HlinkGoForward(IUnknown *pUnk);                                                                     
extern "C" HRESULT __stdcall HlinkNavigateString(IUnknown *pUnk, LPCWSTR szTarget);                                              
extern "C" HRESULT __stdcall HlinkNavigateMoniker(IUnknown *pUnk, IMoniker *pmkTarget);                                          
                                                                                                           















extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0025_v0_0_s_ifspec;





 

typedef  IInternet *LPIINTERNET;


extern "C" const IID IID_IInternet;


    
    struct __declspec(uuid("79eac9e0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternet : public IUnknown
    {
    public:
    };
    
    












































#line 4840 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 4845 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 4851 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0026_v0_0_s_ifspec;





 

typedef  IInternetBindInfo *LPIINTERNETBINDINFO;

typedef 
enum tagBINDSTRING
    {
        BINDSTRING_HEADERS	= 1,
        BINDSTRING_ACCEPT_MIMES	= ( BINDSTRING_HEADERS + 1 ) ,
        BINDSTRING_EXTRA_URL	= ( BINDSTRING_ACCEPT_MIMES + 1 ) ,
        BINDSTRING_LANGUAGE	= ( BINDSTRING_EXTRA_URL + 1 ) ,
        BINDSTRING_USERNAME	= ( BINDSTRING_LANGUAGE + 1 ) ,
        BINDSTRING_PASSWORD	= ( BINDSTRING_USERNAME + 1 ) ,
        BINDSTRING_UA_PIXELS	= ( BINDSTRING_PASSWORD + 1 ) ,
        BINDSTRING_UA_COLOR	= ( BINDSTRING_UA_PIXELS + 1 ) ,
        BINDSTRING_OS	= ( BINDSTRING_UA_COLOR + 1 ) ,
        BINDSTRING_USER_AGENT	= ( BINDSTRING_OS + 1 ) ,
        BINDSTRING_ACCEPT_ENCODINGS	= ( BINDSTRING_USER_AGENT + 1 ) ,
        BINDSTRING_POST_COOKIE	= ( BINDSTRING_ACCEPT_ENCODINGS + 1 ) ,
        BINDSTRING_POST_DATA_MIME	= ( BINDSTRING_POST_COOKIE + 1 ) ,
        BINDSTRING_URL	= ( BINDSTRING_POST_DATA_MIME + 1 ) ,
        BINDSTRING_IID	= ( BINDSTRING_URL + 1 ) ,
        BINDSTRING_FLAG_BIND_TO_OBJECT	= ( BINDSTRING_IID + 1 ) ,
        BINDSTRING_PTR_BIND_CONTEXT	= ( BINDSTRING_FLAG_BIND_TO_OBJECT + 1 ) ,
        BINDSTRING_XDR_ORIGIN	= ( BINDSTRING_PTR_BIND_CONTEXT + 1 ) ,
        BINDSTRING_DOWNLOADPATH	= ( BINDSTRING_XDR_ORIGIN + 1 ) ,
        BINDSTRING_ROOTDOC_URL	= ( BINDSTRING_DOWNLOADPATH + 1 ) ,
        BINDSTRING_INITIAL_FILENAME	= ( BINDSTRING_ROOTDOC_URL + 1 ) ,
        BINDSTRING_PROXY_USERNAME	= ( BINDSTRING_INITIAL_FILENAME + 1 ) ,
        BINDSTRING_PROXY_PASSWORD	= ( BINDSTRING_PROXY_USERNAME + 1 ) 
    } 	BINDSTRING;


extern "C" const IID IID_IInternetBindInfo;


    
    struct __declspec(uuid("79eac9e1-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetBindInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBindInfo( 
             DWORD *grfBINDF,
             BINDINFO *pbindinfo) = 0;
        
        virtual HRESULT __stdcall GetBindString( 
             ULONG ulStringType,
             
              LPOLESTR *ppwzStr,
             ULONG cEl,
             ULONG *pcElFetched) = 0;
        
    };
    
    































































#line 4981 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 4986 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 4992 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0027_v0_0_s_ifspec;





 

typedef  IInternetBindInfoEx *LPIINTERNETBINDINFOEX;


extern "C" const IID IID_IInternetBindInfoEx;


    
    struct __declspec(uuid("a3e015b7-a82c-4dcd-a150-569aeeed36ab")) __declspec(novtable)
    IInternetBindInfoEx : public IInternetBindInfo
    {
    public:
        virtual HRESULT __stdcall GetBindInfoEx( 
             DWORD *grfBINDF,
             BINDINFO *pbindinfo,
             DWORD *grfBINDF2,
             DWORD *pdwReserved) = 0;
        
    };
    
    










































































#line 5100 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 5105 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 5111 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0028_v0_0_s_ifspec;





 

typedef  IInternetProtocolRoot *LPIINTERNETPROTOCOLROOT;

typedef 
enum _tagPI_FLAGS
    {
        PI_PARSE_URL	= 0x1,
        PI_FILTER_MODE	= 0x2,
        PI_FORCE_ASYNC	= 0x4,
        PI_USE_WORKERTHREAD	= 0x8,
        PI_MIMEVERIFICATION	= 0x10,
        PI_CLSIDLOOKUP	= 0x20,
        PI_DATAPROGRESS	= 0x40,
        PI_SYNCHRONOUS	= 0x80,
        PI_APARTMENTTHREADED	= 0x100,
        PI_CLASSINSTALL	= 0x200,
        PI_PASSONBINDCTX	= 0x2000,
        PI_NOMIMEHANDLER	= 0x8000,
        PI_LOADAPPDIRECT	= 0x4000,
        PD_FORCE_SWITCH	= 0x10000,
        PI_PREFERDEFAULTHANDLER	= 0x20000
    } 	PI_FLAGS;

typedef struct _tagPROTOCOLDATA
    {
    DWORD grfFlags;
    DWORD dwState;
    LPVOID pData;
    ULONG cbData;
    } 	PROTOCOLDATA;

typedef struct _tagStartParam
    {
    IID iid;
    IBindCtx *pIBindCtx;
    IUnknown *pItf;
    } 	StartParam;


extern "C" const IID IID_IInternetProtocolRoot;


    
    struct __declspec(uuid("79eac9e3-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolRoot : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Start( 
             LPCWSTR szUrl,
             IInternetProtocolSink *pOIProtSink,
             IInternetBindInfo *pOIBindInfo,
             DWORD grfPI,
             HANDLE_PTR dwReserved) = 0;
        
        virtual HRESULT __stdcall Continue( 
             PROTOCOLDATA *pProtocolData) = 0;
        
        virtual HRESULT __stdcall Abort( 
             HRESULT hrReason,
             DWORD dwOptions) = 0;
        
        virtual HRESULT __stdcall Terminate( 
             DWORD dwOptions) = 0;
        
        virtual HRESULT __stdcall Suspend( void) = 0;
        
        virtual HRESULT __stdcall Resume( void) = 0;
        
    };
    
    

























































































#line 5284 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 5289 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 5295 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0029_v0_0_s_ifspec;





 

typedef  IInternetProtocol *LPIINTERNETPROTOCOL;


extern "C" const IID IID_IInternetProtocol;


    
    struct __declspec(uuid("79eac9e4-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocol : public IInternetProtocolRoot
    {
    public:
        virtual HRESULT __stdcall Read( 
             void *pv,
             ULONG cb,
             ULONG *pcbRead) = 0;
        
        virtual HRESULT __stdcall Seek( 
             LARGE_INTEGER dlibMove,
             DWORD dwOrigin,
             ULARGE_INTEGER *plibNewPosition) = 0;
        
        virtual HRESULT __stdcall LockRequest( 
             DWORD dwOptions) = 0;
        
        virtual HRESULT __stdcall UnlockRequest( void) = 0;
        
    };
    
    

























































































































#line 5459 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 5464 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 5470 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0030_v0_0_s_ifspec;





 


extern "C" const IID IID_IInternetProtocolEx;


    
    struct __declspec(uuid("C7A98E66-1010-492c-A1C8-C809E1F75905")) __declspec(novtable)
    IInternetProtocolEx : public IInternetProtocol
    {
    public:
        virtual HRESULT __stdcall StartEx( 
             IUri *pUri,
             IInternetProtocolSink *pOIProtSink,
             IInternetBindInfo *pOIBindInfo,
             DWORD grfPI,
             HANDLE_PTR dwReserved) = 0;
        
    };
    
    





































































































































#line 5637 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 5642 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 5648 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 5649 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0031_v0_0_s_ifspec;





 

typedef  IInternetProtocolSink *LPIINTERNETPROTOCOLSINK;


extern "C" const IID IID_IInternetProtocolSink;


    
    struct __declspec(uuid("79eac9e5-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolSink : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Switch( 
             PROTOCOLDATA *pProtocolData) = 0;
        
        virtual HRESULT __stdcall ReportProgress( 
             ULONG ulStatusCode,
             LPCWSTR szStatusText) = 0;
        
        virtual HRESULT __stdcall ReportData( 
             DWORD grfBSCF,
             ULONG ulProgress,
             ULONG ulProgressMax) = 0;
        
        virtual HRESULT __stdcall ReportResult( 
             HRESULT hrResult,
             DWORD dwError,
             LPCWSTR szResult) = 0;
        
    };
    
    













































































#line 5771 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 5776 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 5782 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0032_v0_0_s_ifspec;





 

typedef  IInternetProtocolSinkStackable *LPIINTERNETPROTOCOLSINKStackable;


extern "C" const IID IID_IInternetProtocolSinkStackable;


    
    struct __declspec(uuid("79eac9f0-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolSinkStackable : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SwitchSink( 
             IInternetProtocolSink *pOIProtSink) = 0;
        
        virtual HRESULT __stdcall CommitSwitch( void) = 0;
        
        virtual HRESULT __stdcall RollbackSwitch( void) = 0;
        
    };
    
    































































#line 5880 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 5885 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 5891 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0033_v0_0_s_ifspec;





 

typedef  IInternetSession *LPIINTERNETSESSION;

typedef 
enum _tagOIBDG_FLAGS
    {
        OIBDG_APARTMENTTHREADED	= 0x100,
        OIBDG_DATAONLY	= 0x1000
    } 	OIBDG_FLAGS;


extern "C" const IID IID_IInternetSession;


    
    struct __declspec(uuid("79eac9e7-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSession : public IUnknown
    {
    public:
        virtual HRESULT __stdcall RegisterNameSpace( 
             IClassFactory *pCF,
             const IID & rclsid,
             LPCWSTR pwzProtocol,
             ULONG cPatterns,
             const LPCWSTR *ppwzPatterns,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall UnregisterNameSpace( 
             IClassFactory *pCF,
             LPCWSTR pszProtocol) = 0;
        
        virtual HRESULT __stdcall RegisterMimeFilter( 
             IClassFactory *pCF,
             const IID & rclsid,
             LPCWSTR pwzType) = 0;
        
        virtual HRESULT __stdcall UnregisterMimeFilter( 
             IClassFactory *pCF,
             LPCWSTR pwzType) = 0;
        
        virtual HRESULT __stdcall CreateBinding( 
             LPBC pBC,
             LPCWSTR szUrl,
             IUnknown *pUnkOuter,
             IUnknown **ppUnk,
             IInternetProtocol **ppOInetProt,
             DWORD dwOption) = 0;
        
        virtual HRESULT __stdcall SetSessionOption( 
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD dwBufferLength,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall GetSessionOption( 
             DWORD dwOption,
             LPVOID pBuffer,
             DWORD *pdwBufferLength,
             DWORD dwReserved) = 0;
        
    };
    
    

















































































































#line 6080 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 6085 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 6091 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0034_v0_0_s_ifspec;





 

typedef  IInternetThreadSwitch *LPIINTERNETTHREADSWITCH;


extern "C" const IID IID_IInternetThreadSwitch;


    
    struct __declspec(uuid("79eac9e8-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetThreadSwitch : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Prepare( void) = 0;
        
        virtual HRESULT __stdcall Continue( void) = 0;
        
    };
    
    
























































#line 6179 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 6184 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 6190 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0035_v0_0_s_ifspec;





 

typedef  IInternetPriority *LPIINTERNETPRIORITY;


extern "C" const IID IID_IInternetPriority;


    
    struct __declspec(uuid("79eac9eb-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetPriority : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetPriority( 
             LONG nPriority) = 0;
        
        virtual HRESULT __stdcall GetPriority( 
             LONG *pnPriority) = 0;
        
    };
    
    


























































#line 6282 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 6287 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 6293 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0036_v0_0_s_ifspec;





 

typedef  IInternetProtocolInfo *LPIINTERNETPROTOCOLINFO;

typedef 
enum _tagPARSEACTION
    {
        PARSE_CANONICALIZE	= 1,
        PARSE_FRIENDLY	= ( PARSE_CANONICALIZE + 1 ) ,
        PARSE_SECURITY_URL	= ( PARSE_FRIENDLY + 1 ) ,
        PARSE_ROOTDOCUMENT	= ( PARSE_SECURITY_URL + 1 ) ,
        PARSE_DOCUMENT	= ( PARSE_ROOTDOCUMENT + 1 ) ,
        PARSE_ANCHOR	= ( PARSE_DOCUMENT + 1 ) ,
        PARSE_ENCODE_IS_UNESCAPE	= ( PARSE_ANCHOR + 1 ) ,
        PARSE_DECODE_IS_ESCAPE	= ( PARSE_ENCODE_IS_UNESCAPE + 1 ) ,
        PARSE_PATH_FROM_URL	= ( PARSE_DECODE_IS_ESCAPE + 1 ) ,
        PARSE_URL_FROM_PATH	= ( PARSE_PATH_FROM_URL + 1 ) ,
        PARSE_MIME	= ( PARSE_URL_FROM_PATH + 1 ) ,
        PARSE_SERVER	= ( PARSE_MIME + 1 ) ,
        PARSE_SCHEMA	= ( PARSE_SERVER + 1 ) ,
        PARSE_SITE	= ( PARSE_SCHEMA + 1 ) ,
        PARSE_DOMAIN	= ( PARSE_SITE + 1 ) ,
        PARSE_LOCATION	= ( PARSE_DOMAIN + 1 ) ,
        PARSE_SECURITY_DOMAIN	= ( PARSE_LOCATION + 1 ) ,
        PARSE_ESCAPE	= ( PARSE_SECURITY_DOMAIN + 1 ) ,
        PARSE_UNESCAPE	= ( PARSE_ESCAPE + 1 ) 
    } 	PARSEACTION;

typedef 
enum _tagPSUACTION
    {
        PSU_DEFAULT	= 1,
        PSU_SECURITY_URL_ONLY	= ( PSU_DEFAULT + 1 ) 
    } 	PSUACTION;

typedef 
enum _tagQUERYOPTION
    {
        QUERY_EXPIRATION_DATE	= 1,
        QUERY_TIME_OF_LAST_CHANGE	= ( QUERY_EXPIRATION_DATE + 1 ) ,
        QUERY_CONTENT_ENCODING	= ( QUERY_TIME_OF_LAST_CHANGE + 1 ) ,
        QUERY_CONTENT_TYPE	= ( QUERY_CONTENT_ENCODING + 1 ) ,
        QUERY_REFRESH	= ( QUERY_CONTENT_TYPE + 1 ) ,
        QUERY_RECOMBINE	= ( QUERY_REFRESH + 1 ) ,
        QUERY_CAN_NAVIGATE	= ( QUERY_RECOMBINE + 1 ) ,
        QUERY_USES_NETWORK	= ( QUERY_CAN_NAVIGATE + 1 ) ,
        QUERY_IS_CACHED	= ( QUERY_USES_NETWORK + 1 ) ,
        QUERY_IS_INSTALLEDENTRY	= ( QUERY_IS_CACHED + 1 ) ,
        QUERY_IS_CACHED_OR_MAPPED	= ( QUERY_IS_INSTALLEDENTRY + 1 ) ,
        QUERY_USES_CACHE	= ( QUERY_IS_CACHED_OR_MAPPED + 1 ) ,
        QUERY_IS_SECURE	= ( QUERY_USES_CACHE + 1 ) ,
        QUERY_IS_SAFE	= ( QUERY_IS_SECURE + 1 ) ,
        QUERY_USES_HISTORYFOLDER	= ( QUERY_IS_SAFE + 1 ) ,
        QUERY_IS_CACHED_AND_USABLE_OFFLINE	= ( QUERY_USES_HISTORYFOLDER + 1 ) 
    } 	QUERYOPTION;


extern "C" const IID IID_IInternetProtocolInfo;


    
    struct __declspec(uuid("79eac9ec-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetProtocolInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ParseUrl( 
             LPCWSTR pwzUrl,
             PARSEACTION ParseAction,
             DWORD dwParseFlags,
             
              LPWSTR pwzResult,
             DWORD cchResult,
             DWORD *pcchResult,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall CombineUrl( 
             LPCWSTR pwzBaseUrl,
             LPCWSTR pwzRelativeUrl,
             DWORD dwCombineFlags,
             
              LPWSTR pwzResult,
             DWORD cchResult,
             DWORD *pcchResult,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall CompareUrl( 
             LPCWSTR pwzUrl1,
             LPCWSTR pwzUrl2,
             DWORD dwCompareFlags) = 0;
        
        virtual HRESULT __stdcall QueryInfo( 
             LPCWSTR pwzUrl,
             QUERYOPTION OueryOption,
             DWORD dwQueryFlags,
             LPVOID pBuffer,
             DWORD cbBuffer,
             DWORD *pcbBuf,
             DWORD dwReserved) = 0;
        
    };
    
    






























































































#line 6501 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 6506 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 






#line 6517 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 6518 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"







#line 6526 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"













#line 6540 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"













#line 6554 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"






extern "C" HRESULT __stdcall CoInternetParseUrl(                              
                                             LPCWSTR      pwzUrl,        
                                             PARSEACTION  ParseAction,   
                                             DWORD        dwFlags,       
      LPWSTR       pszResult,     
                                             DWORD        cchResult,     
                                         DWORD       *pcchResult,    
                                             DWORD        dwReserved     
    );                                                  

extern "C" HRESULT __stdcall CoInternetParseIUri(                             
                                          IUri        *pIUri,         
                                             PARSEACTION  ParseAction,   
                                             DWORD        dwFlags,       
      LPWSTR       pwzResult,     
                                             DWORD        cchResult,     
                                         DWORD       *pcchResult,    
                                             DWORD_PTR    dwReserved     
    );                                                  
#line 6580 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
extern "C" HRESULT __stdcall CoInternetCombineUrl(                                           
                                             LPCWSTR   pwzBaseUrl,     
                                             LPCWSTR   pwzRelativeUrl, 
                                             DWORD     dwCombineFlags, 
      LPWSTR    pszResult,      
                                             DWORD     cchResult,      
                                     DWORD     *pcchResult,    
                                    DWORD     dwReserved      
    );                                                                 

extern "C" HRESULT __stdcall CoInternetCombineUrlEx(               
          IUri       *pBaseUri,       
          LPCWSTR     pwzRelativeUrl, 
                 DWORD       dwCombineFlags, 
         IUri      **ppCombinedUri,  
          DWORD_PTR   dwReserved      
    );                                       
extern "C" HRESULT __stdcall CoInternetCombineIUri (               
              IUri       *pBaseUri,       
              IUri       *pRelativeUri,   
                 DWORD       dwCombineFlags, 
         IUri      **ppCombinedUri,  
          DWORD_PTR   dwReserved      
    );                                       
#line 6605 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
extern "C" HRESULT __stdcall CoInternetCompareUrl(             
    LPCWSTR pwzUrl1,                     
    LPCWSTR pwzUrl2,                     
    DWORD dwFlags                        
    );                                   
extern "C" HRESULT __stdcall CoInternetGetProtocolFlags(       
             LPCWSTR     pwzUrl,         
         DWORD      *pdwFlags,       
             DWORD       dwReserved      
    );                                   
extern "C" HRESULT __stdcall CoInternetQueryInfo(                                                
                                                 LPCWSTR     pwzUrl,       
                                                 QUERYOPTION QueryOptions, 
                                                 DWORD       dwQueryFlags, 
       LPVOID      pvBuffer,     
                     DWORD       cbBuffer,     
                                         DWORD      *pcbBuffer,    
                                                 DWORD       dwReserved    
    );                                                                     
extern "C" HRESULT __stdcall CoInternetGetSession(                             
                 DWORD               dwSessionMode,      
         IInternetSession  **ppIInternetSession, 
                 DWORD               dwReserved          
    );                                                   
extern "C" HRESULT __stdcall CoInternetGetSecurityUrl(         
                 LPCWSTR pwszUrl,        
         LPWSTR *ppwszSecUrl,    
              PSUACTION   psuAction,  
        DWORD dwReserved        
    );                                   
extern "C" HRESULT __stdcall AsyncInstallDistributionUnit(     
    LPCWSTR szDistUnit,                  
    LPCWSTR szTYPE,                      
    LPCWSTR szExt,                       
    DWORD dwFileVersionMS,               
    DWORD dwFileVersionLS,               
    LPCWSTR szURL,                       
    IBindCtx *pbc,                       
    LPVOID   pvReserved,                 
    DWORD   flags                        
    );                                   

extern "C" HRESULT __stdcall CoInternetGetSecurityUrlEx(           
              IUri           *pUri,       
         IUri          **ppSecUri,   
                 PSUACTION       psuAction,  
        DWORD_PTR       dwReserved  
    );                                       
#line 6654 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



typedef 
enum _tagINTERNETFEATURELIST
    {
        FEATURE_OBJECT_CACHING	= 0,
        FEATURE_ZONE_ELEVATION	= ( FEATURE_OBJECT_CACHING + 1 ) ,
        FEATURE_MIME_HANDLING	= ( FEATURE_ZONE_ELEVATION + 1 ) ,
        FEATURE_MIME_SNIFFING	= ( FEATURE_MIME_HANDLING + 1 ) ,
        FEATURE_WINDOW_RESTRICTIONS	= ( FEATURE_MIME_SNIFFING + 1 ) ,
        FEATURE_WEBOC_POPUPMANAGEMENT	= ( FEATURE_WINDOW_RESTRICTIONS + 1 ) ,
        FEATURE_BEHAVIORS	= ( FEATURE_WEBOC_POPUPMANAGEMENT + 1 ) ,
        FEATURE_DISABLE_MK_PROTOCOL	= ( FEATURE_BEHAVIORS + 1 ) ,
        FEATURE_LOCALMACHINE_LOCKDOWN	= ( FEATURE_DISABLE_MK_PROTOCOL + 1 ) ,
        FEATURE_SECURITYBAND	= ( FEATURE_LOCALMACHINE_LOCKDOWN + 1 ) ,
        FEATURE_RESTRICT_ACTIVEXINSTALL	= ( FEATURE_SECURITYBAND + 1 ) ,
        FEATURE_VALIDATE_NAVIGATE_URL	= ( FEATURE_RESTRICT_ACTIVEXINSTALL + 1 ) ,
        FEATURE_RESTRICT_FILEDOWNLOAD	= ( FEATURE_VALIDATE_NAVIGATE_URL + 1 ) ,
        FEATURE_ADDON_MANAGEMENT	= ( FEATURE_RESTRICT_FILEDOWNLOAD + 1 ) ,
        FEATURE_PROTOCOL_LOCKDOWN	= ( FEATURE_ADDON_MANAGEMENT + 1 ) ,
        FEATURE_HTTP_USERNAME_PASSWORD_DISABLE	= ( FEATURE_PROTOCOL_LOCKDOWN + 1 ) ,
        FEATURE_SAFE_BINDTOOBJECT	= ( FEATURE_HTTP_USERNAME_PASSWORD_DISABLE + 1 ) ,
        FEATURE_UNC_SAVEDFILECHECK	= ( FEATURE_SAFE_BINDTOOBJECT + 1 ) ,
        FEATURE_GET_URL_DOM_FILEPATH_UNENCODED	= ( FEATURE_UNC_SAVEDFILECHECK + 1 ) ,
        FEATURE_TABBED_BROWSING	= ( FEATURE_GET_URL_DOM_FILEPATH_UNENCODED + 1 ) ,
        FEATURE_SSLUX	= ( FEATURE_TABBED_BROWSING + 1 ) ,
        FEATURE_DISABLE_NAVIGATION_SOUNDS	= ( FEATURE_SSLUX + 1 ) ,
        FEATURE_DISABLE_LEGACY_COMPRESSION	= ( FEATURE_DISABLE_NAVIGATION_SOUNDS + 1 ) ,
        FEATURE_FORCE_ADDR_AND_STATUS	= ( FEATURE_DISABLE_LEGACY_COMPRESSION + 1 ) ,
        FEATURE_XMLHTTP	= ( FEATURE_FORCE_ADDR_AND_STATUS + 1 ) ,
        FEATURE_DISABLE_TELNET_PROTOCOL	= ( FEATURE_XMLHTTP + 1 ) ,
        FEATURE_FEEDS	= ( FEATURE_DISABLE_TELNET_PROTOCOL + 1 ) ,
        FEATURE_BLOCK_INPUT_PROMPTS	= ( FEATURE_FEEDS + 1 ) ,
        FEATURE_ENTRY_COUNT	= ( FEATURE_BLOCK_INPUT_PROMPTS + 1 ) 
    } 	INTERNETFEATURELIST;


























#line 6717 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
extern "C" HRESULT __stdcall CoInternetSetFeatureEnabled(      
    INTERNETFEATURELIST FeatureEntry,    
    DWORD dwFlags,                       
    BOOL fEnable                         
    );                                   
extern "C" HRESULT __stdcall CoInternetIsFeatureEnabled(       
    INTERNETFEATURELIST FeatureEntry,    
    DWORD dwFlags                        
    );                                   
extern "C" HRESULT __stdcall CoInternetIsFeatureEnabledForUrl( 
    INTERNETFEATURELIST FeatureEntry,    
    DWORD dwFlags,                       
    LPCWSTR szURL,                       
    IInternetSecurityManager *pSecMgr    
    );                                   
extern "C" HRESULT __stdcall CoInternetIsFeatureEnabledForIUri( 
    INTERNETFEATURELIST FeatureEntry,     
    DWORD dwFlags,                        
    IUri * pIUri,                         
    IInternetSecurityManagerEx2 *pSecMgr  
    );                                    
extern "C" HRESULT __stdcall CoInternetIsFeatureZoneElevationEnabled( 
    LPCWSTR szFromURL,                          
    LPCWSTR szToURL,                            
    IInternetSecurityManager *pSecMgr,          
    DWORD dwFlags                               
    );                                          
#line 6745 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
 
extern "C" HRESULT __stdcall CopyStgMedium(const STGMEDIUM * pcstgmedSrc,  
                           STGMEDIUM * pstgmedDest); 
extern "C" HRESULT __stdcall CopyBindInfo( const BINDINFO * pcbiSrc,   
                           BINDINFO * pbiDest ); 
extern "C" void __stdcall ReleaseBindInfo( BINDINFO * pbindinfo );  
 










#line 6763 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



#line 6767 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"







extern "C" HRESULT __stdcall CoInternetCreateSecurityManager(IServiceProvider *pSP, IInternetSecurityManager **ppSM, DWORD dwReserved);

extern "C" HRESULT __stdcall CoInternetCreateZoneManager(IServiceProvider *pSP, IInternetZoneManager **ppZM, DWORD dwReserved);



extern "C" const IID CLSID_InternetSecurityManager;  
extern "C" const IID CLSID_InternetZoneManager;  

extern "C" const IID CLSID_PersistentZoneIdentifier;  
#line 6785 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"





#line 6791 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



#line 6795 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"







extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0037_v0_0_s_ifspec;





 


extern "C" const IID IID_IInternetSecurityMgrSite;


    
    struct __declspec(uuid("79eac9ed-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSecurityMgrSite : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWindow( 
             HWND *phwnd) = 0;
        
        virtual HRESULT __stdcall EnableModeless( 
             BOOL fEnable) = 0;
        
    };
    
    


























































#line 6888 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 6893 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 6899 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0038_v0_0_s_ifspec;





 













typedef  
enum __MIDL_IInternetSecurityManager_0001
    {
        PUAF_DEFAULT	= 0,
        PUAF_NOUI	= 0x1,
        PUAF_ISFILE	= 0x2,
        PUAF_WARN_IF_DENIED	= 0x4,
        PUAF_FORCEUI_FOREGROUND	= 0x8,
        PUAF_CHECK_TIFS	= 0x10,
        PUAF_DONTCHECKBOXINDIALOG	= 0x20,
        PUAF_TRUSTED	= 0x40,
        PUAF_ACCEPT_WILDCARD_SCHEME	= 0x80,
        PUAF_ENFORCERESTRICTED	= 0x100,
        PUAF_NOSAVEDFILECHECK	= 0x200,
        PUAF_REQUIRESAVEDFILECHECK	= 0x400,
        PUAF_DONT_USE_CACHE	= 0x1000,
        PUAF_RESERVED1	= 0x2000,
        PUAF_RESERVED2	= 0x4000,
        PUAF_LMZ_UNLOCKED	= 0x10000,
        PUAF_LMZ_LOCKED	= 0x20000,
        PUAF_DEFAULTZONEPOL	= 0x40000,
        PUAF_NPL_USE_LOCKED_IF_RESTRICTED	= 0x80000,
        PUAF_NOUIIFLOCKED	= 0x100000,
        PUAF_DRAGPROTOCOLCHECK	= 0x200000
    } 	PUAF;

typedef  
enum __MIDL_IInternetSecurityManager_0002
    {
        PUAFOUT_DEFAULT	= 0,
        PUAFOUT_ISLOCKZONEPOLICY	= 0x1
    } 	PUAFOUT;







typedef  
enum __MIDL_IInternetSecurityManager_0003
    {
        SZM_CREATE	= 0,
        SZM_DELETE	= 0x1
    } 	SZM_FLAGS;
















extern "C" const IID IID_IInternetSecurityManager;


    
    struct __declspec(uuid("79eac9ee-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetSecurityManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall SetSecuritySite( 
              IInternetSecurityMgrSite *pSite) = 0;
        
        virtual HRESULT __stdcall GetSecuritySite( 
              IInternetSecurityMgrSite **ppSite) = 0;
        
        virtual HRESULT __stdcall MapUrlToZone( 
              LPCWSTR pwszUrl,
              DWORD *pdwZone,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall GetSecurityId( 
              LPCWSTR pwszUrl,
              BYTE *pbSecurityId,
              DWORD *pcbSecurityId,
             DWORD_PTR dwReserved) = 0;
        
        virtual HRESULT __stdcall ProcessUrlAction( 
              LPCWSTR pwszUrl,
             DWORD dwAction,
              BYTE *pPolicy,
             DWORD cbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall QueryCustomPolicy( 
              LPCWSTR pwszUrl,
              const GUID & guidKey,
              BYTE **ppPolicy,
              DWORD *pcbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall SetZoneMapping( 
             DWORD dwZone,
              LPCWSTR lpszPattern,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall GetZoneMappings( 
             DWORD dwZone,
              IEnumString **ppenumString,
             DWORD dwFlags) = 0;
        
    };
    
    


























































































































#line 7165 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 7170 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 7176 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0039_v0_0_s_ifspec;





 







extern "C" const IID IID_IInternetSecurityManagerEx;


    
    struct __declspec(uuid("F164EDF1-CC7C-4f0d-9A94-34222625C393")) __declspec(novtable)
    IInternetSecurityManagerEx : public IInternetSecurityManager
    {
    public:
        virtual HRESULT __stdcall ProcessUrlActionEx( 
              LPCWSTR pwszUrl,
             DWORD dwAction,
              BYTE *pPolicy,
             DWORD cbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved,
              DWORD *pdwOutFlags) = 0;
        
    };
    
    










































































































































#line 7357 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 7362 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 7368 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 7369 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0040_v0_0_s_ifspec;





 




extern "C" const IID IID_IInternetSecurityManagerEx2;


    
    struct __declspec(uuid("F1E50292-A795-4117-8E09-2B560A72AC60")) __declspec(novtable)
    IInternetSecurityManagerEx2 : public IInternetSecurityManagerEx
    {
    public:
        virtual HRESULT __stdcall MapUrlToZoneEx2( 
             
               IUri *pUri,
              DWORD *pdwZone,
             DWORD dwFlags,
             
              LPWSTR *ppwszMappedUrl,
             
               DWORD *pdwOutFlags) = 0;
        
        virtual HRESULT __stdcall ProcessUrlActionEx2( 
             
               IUri *pUri,
             DWORD dwAction,
              BYTE *pPolicy,
             DWORD cbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD_PTR dwReserved,
              DWORD *pdwOutFlags) = 0;
        
        virtual HRESULT __stdcall GetSecurityIdEx2( 
             
               IUri *pUri,
              BYTE *pbSecurityId,
              DWORD *pcbSecurityId,
             DWORD_PTR dwReserved) = 0;
        
        virtual HRESULT __stdcall QueryCustomPolicyEx2( 
             
               IUri *pUri,
              const GUID & guidKey,
              BYTE **ppPolicy,
              DWORD *pcbPolicy,
              BYTE *pContext,
             DWORD cbContext,
             DWORD_PTR dwReserved) = 0;
        
    };
    
    


































































































































































































#line 7631 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 7636 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 7642 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 7643 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0041_v0_0_s_ifspec;





 


extern "C" const IID IID_IZoneIdentifier;


    
    struct __declspec(uuid("cd45f185-1b21-48e2-967b-ead743a8914e")) __declspec(novtable)
    IZoneIdentifier : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetId( 
              DWORD *pdwZone) = 0;
        
        virtual HRESULT __stdcall SetId( 
             DWORD dwZone) = 0;
        
        virtual HRESULT __stdcall Remove( void) = 0;
        
    };
    
    
































































#line 7740 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 7745 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 7751 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"







extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0042_v0_0_s_ifspec;





 


extern "C" const IID IID_IInternetHostSecurityManager;


    
    struct __declspec(uuid("3af280b6-cb3f-11d0-891e-00c04fb6bfc4")) __declspec(novtable)
    IInternetHostSecurityManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetSecurityId( 
             
               BYTE *pbSecurityId,
             
                   DWORD *pcbSecurityId,
             DWORD_PTR dwReserved) = 0;
        
        virtual HRESULT __stdcall ProcessUrlAction( 
             DWORD dwAction,
             
               BYTE *pPolicy,
             DWORD cbPolicy,
             
               BYTE *pContext,
             DWORD cbContext,
             DWORD dwFlags,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall QueryCustomPolicy( 
             const GUID & guidKey,
             
              BYTE **ppPolicy,
             
               DWORD *pcbPolicy,
             
               BYTE *pContext,
             DWORD cbContext,
             DWORD dwReserved) = 0;
        
    };
    
    





















































































#line 7894 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 7899 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 7905 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"

















































































#line 7987 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"





#line 7993 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"

































































#line 8059 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"























#line 8083 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"















#line 8099 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




























































extern "C" const GUID GUID_CUSTOM_LOCALMACHINEZONEUNLOCKED; 
#line 8161 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0043_v0_0_s_ifspec;





 

typedef  IInternetZoneManager *LPURLZONEMANAGER;

typedef 
enum tagURLZONE
    {
        URLZONE_INVALID	= -1,
        URLZONE_PREDEFINED_MIN	= 0,
        URLZONE_LOCAL_MACHINE	= 0,
        URLZONE_INTRANET	= ( URLZONE_LOCAL_MACHINE + 1 ) ,
        URLZONE_TRUSTED	= ( URLZONE_INTRANET + 1 ) ,
        URLZONE_INTERNET	= ( URLZONE_TRUSTED + 1 ) ,
        URLZONE_UNTRUSTED	= ( URLZONE_INTERNET + 1 ) ,
        URLZONE_PREDEFINED_MAX	= 999,
        URLZONE_USER_MIN	= 1000,
        URLZONE_USER_MAX	= 10000
    } 	URLZONE;



typedef 
enum tagURLTEMPLATE
    {
        URLTEMPLATE_CUSTOM	= 0,
        URLTEMPLATE_PREDEFINED_MIN	= 0x10000,
        URLTEMPLATE_LOW	= 0x10000,
        URLTEMPLATE_MEDLOW	= 0x10500,
        URLTEMPLATE_MEDIUM	= 0x11000,
        URLTEMPLATE_MEDHIGH	= 0x11500,
        URLTEMPLATE_HIGH	= 0x12000,
        URLTEMPLATE_PREDEFINED_MAX	= 0x20000
    } 	URLTEMPLATE;


enum __MIDL_IInternetZoneManager_0001
    {
        MAX_ZONE_PATH	= 260,
        MAX_ZONE_DESCRIPTION	= 200
    } ;
typedef  
enum __MIDL_IInternetZoneManager_0002
    {
        ZAFLAGS_CUSTOM_EDIT	= 0x1,
        ZAFLAGS_ADD_SITES	= 0x2,
        ZAFLAGS_REQUIRE_VERIFICATION	= 0x4,
        ZAFLAGS_INCLUDE_PROXY_OVERRIDE	= 0x8,
        ZAFLAGS_INCLUDE_INTRANET_SITES	= 0x10,
        ZAFLAGS_NO_UI	= 0x20,
        ZAFLAGS_SUPPORTS_VERIFICATION	= 0x40,
        ZAFLAGS_UNC_AS_INTRANET	= 0x80,
        ZAFLAGS_DETECT_INTRANET	= 0x100,
        ZAFLAGS_USE_LOCKED_ZONES	= 0x10000,
        ZAFLAGS_VERIFY_TEMPLATE_SETTINGS	= 0x20000,
        ZAFLAGS_NO_CACHE	= 0x40000
    } 	ZAFLAGS;

typedef struct _ZONEATTRIBUTES
    {
    ULONG cbSize;
    WCHAR szDisplayName[ 260 ];
    WCHAR szDescription[ 200 ];
    WCHAR szIconPath[ 260 ];
    DWORD dwTemplateMinLevel;
    DWORD dwTemplateRecommended;
    DWORD dwTemplateCurrentLevel;
    DWORD dwFlags;
    } 	ZONEATTRIBUTES;

typedef struct _ZONEATTRIBUTES *LPZONEATTRIBUTES;

















typedef 
enum _URLZONEREG
    {
        URLZONEREG_DEFAULT	= 0,
        URLZONEREG_HKLM	= ( URLZONEREG_DEFAULT + 1 ) ,
        URLZONEREG_HKCU	= ( URLZONEREG_HKLM + 1 ) 
    } 	URLZONEREG;
































extern "C" const IID IID_IInternetZoneManager;


    
    struct __declspec(uuid("79eac9ef-baf9-11ce-8c82-00aa004ba90b")) __declspec(novtable)
    IInternetZoneManager : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetZoneAttributes( 
             DWORD dwZone,
             
               ZONEATTRIBUTES *pZoneAttributes) = 0;
        
        virtual HRESULT __stdcall SetZoneAttributes( 
             DWORD dwZone,
             
               ZONEATTRIBUTES *pZoneAttributes) = 0;
        
        virtual HRESULT __stdcall GetZoneCustomPolicy( 
             DWORD dwZone,
             const GUID & guidKey,
             
              BYTE **ppPolicy,
             
               DWORD *pcbPolicy,
             URLZONEREG urlZoneReg) = 0;
        
        virtual HRESULT __stdcall SetZoneCustomPolicy( 
             DWORD dwZone,
             const GUID & guidKey,
             
               BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg) = 0;
        
        virtual HRESULT __stdcall GetZoneActionPolicy( 
             DWORD dwZone,
             DWORD dwAction,
             
               BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg) = 0;
        
        virtual HRESULT __stdcall SetZoneActionPolicy( 
             DWORD dwZone,
             DWORD dwAction,
             
               BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg) = 0;
        
        virtual HRESULT __stdcall PromptAction( 
             DWORD dwAction,
             HWND hwndParent,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwPromptFlags) = 0;
        
        virtual HRESULT __stdcall LogAction( 
             DWORD dwAction,
             LPCWSTR pwszUrl,
             LPCWSTR pwszText,
             DWORD dwLogFlags) = 0;
        
        virtual HRESULT __stdcall CreateZoneEnumerator( 
             DWORD *pdwEnum,
             DWORD *pdwCount,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall GetZoneAt( 
             DWORD dwEnum,
             DWORD dwIndex,
             DWORD *pdwZone) = 0;
        
        virtual HRESULT __stdcall DestroyZoneEnumerator( 
             DWORD dwEnum) = 0;
        
        virtual HRESULT __stdcall CopyTemplatePoliciesToZone( 
             DWORD dwTemplate,
             DWORD dwZone,
             DWORD dwReserved) = 0;
        
    };
    
    






































































































































































#line 8550 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 8555 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 8561 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"





extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0044_v0_0_s_ifspec;





 










extern "C" const IID IID_IInternetZoneManagerEx;


    
    struct __declspec(uuid("A4C23339-8E06-431e-9BF4-7E711C085648")) __declspec(novtable)
    IInternetZoneManagerEx : public IInternetZoneManager
    {
    public:
        virtual HRESULT __stdcall GetZoneActionPolicyEx( 
             DWORD dwZone,
             DWORD dwAction,
             
               BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall SetZoneActionPolicyEx( 
             DWORD dwZone,
             DWORD dwAction,
             
               BYTE *pPolicy,
             DWORD cbPolicy,
             URLZONEREG urlZoneReg,
             DWORD dwFlags) = 0;
        
    };
    
    

































































































































































































#line 8807 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 8812 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 8818 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 8819 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"







extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0045_v0_0_s_ifspec;





 





extern "C" const IID IID_IInternetZoneManagerEx2;


    
    struct __declspec(uuid("EDC17559-DD5D-4846-8EEF-8BECBA5A4ABF")) __declspec(novtable)
    IInternetZoneManagerEx2 : public IInternetZoneManagerEx
    {
    public:
        virtual HRESULT __stdcall GetZoneAttributesEx( 
             DWORD dwZone,
             ZONEATTRIBUTES *pZoneAttributes,
             DWORD dwFlags) = 0;
        
        virtual HRESULT __stdcall GetZoneSecurityState( 
             DWORD dwZoneIndex,
             BOOL fRespectPolicy,
             LPDWORD pdwState,
             BOOL *pfPolicyEncountered) = 0;
        
        virtual HRESULT __stdcall GetIESecurityState( 
             BOOL fRespectPolicy,
             LPDWORD pdwState,
             BOOL *pfPolicyEncountered,
             BOOL fNoCache) = 0;
        
        virtual HRESULT __stdcall FixUnsecureSettings( void) = 0;
        
    };
    
    





































































































































































































































#line 9099 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 9104 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 9110 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 9111 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
extern "C" const IID CLSID_SoftDistExt;  














typedef struct _tagCODEBASEHOLD
    {
    ULONG cbSize;
    LPWSTR szDistUnit;
    LPWSTR szCodeBase;
    DWORD dwVersionMS;
    DWORD dwVersionLS;
    DWORD dwStyle;
    } 	CODEBASEHOLD;

typedef struct _tagCODEBASEHOLD *LPCODEBASEHOLD;

typedef struct _tagSOFTDISTINFO
    {
    ULONG cbSize;
    DWORD dwFlags;
    DWORD dwAdState;
    LPWSTR szTitle;
    LPWSTR szAbstract;
    LPWSTR szHREF;
    DWORD dwInstalledVersionMS;
    DWORD dwInstalledVersionLS;
    DWORD dwUpdateVersionMS;
    DWORD dwUpdateVersionLS;
    DWORD dwAdvertisedVersionMS;
    DWORD dwAdvertisedVersionLS;
    DWORD dwReserved;
    } 	SOFTDISTINFO;

typedef struct _tagSOFTDISTINFO *LPSOFTDISTINFO;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0046_v0_0_s_ifspec;





 


extern "C" const IID IID_ISoftDistExt;


    
    struct __declspec(uuid("B15B8DC1-C7E1-11d0-8680-00AA00BDCB71")) __declspec(novtable)
    ISoftDistExt : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ProcessSoftDist( 
             LPCWSTR szCDFURL,
             IXMLElement *pSoftDistElement,
             LPSOFTDISTINFO lpsdi) = 0;
        
        virtual HRESULT __stdcall GetFirstCodeBase( 
             
              LPWSTR *szCodeBase,
             LPDWORD dwMaxSize) = 0;
        
        virtual HRESULT __stdcall GetNextCodeBase( 
             
              LPWSTR *szCodeBase,
             LPDWORD dwMaxSize) = 0;
        
        virtual HRESULT __stdcall AsyncInstallDistributionUnit( 
             IBindCtx *pbc,
             LPVOID pvReserved,
             DWORD flags,
             LPCODEBASEHOLD lpcbh) = 0;
        
    };
    
    

















































































#line 9283 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 9288 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

extern "C" HRESULT __stdcall GetSoftwareUpdateInfo( LPCWSTR szDistUnit, LPSOFTDISTINFO psdi );
extern "C" HRESULT __stdcall SetSoftwareUpdateAdvertisementState( LPCWSTR szDistUnit, DWORD dwAdState, DWORD dwAdvertisedVersionMS, DWORD dwAdvertisedVersionLS );
#line 9296 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0047_v0_0_s_ifspec;





 

typedef  ICatalogFileInfo *LPCATALOGFILEINFO;


extern "C" const IID IID_ICatalogFileInfo;


    
    struct __declspec(uuid("711C7600-6B48-11d1-B403-00AA00B92AF1")) __declspec(novtable)
    ICatalogFileInfo : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetCatalogFile( 
             
              LPSTR *ppszCatalogFile) = 0;
        
        virtual HRESULT __stdcall GetJavaTrust( 
             void **ppJavaTrust) = 0;
        
    };
    
    



























































#line 9390 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 9395 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 9401 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0048_v0_0_s_ifspec;





 

typedef    IDataFilter *LPDATAFILTER;


extern "C" const IID IID_IDataFilter;


    
    struct __declspec(uuid("69d14c80-c18e-11d0-a9ce-006097942311")) __declspec(novtable)
    IDataFilter : public IUnknown
    {
    public:
        virtual HRESULT __stdcall DoEncode( 
             DWORD dwFlags,
             LONG lInBufferSize,
              BYTE *pbInBuffer,
             LONG lOutBufferSize,
              BYTE *pbOutBuffer,
             LONG lInBytesAvailable,
              LONG *plInBytesRead,
              LONG *plOutBytesWritten,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall DoDecode( 
             DWORD dwFlags,
             LONG lInBufferSize,
              BYTE *pbInBuffer,
             LONG lOutBufferSize,
              BYTE *pbOutBuffer,
             LONG lInBytesAvailable,
              LONG *plInBytesRead,
              LONG *plOutBytesWritten,
             DWORD dwReserved) = 0;
        
        virtual HRESULT __stdcall SetEncodingLevel( 
             DWORD dwEncLevel) = 0;
        
    };
    
    

















































































#line 9535 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 9540 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 9546 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"


typedef struct _tagPROTOCOLFILTERDATA
    {
    DWORD cbSize;
    IInternetProtocolSink *pProtocolSink;
    IInternetProtocol *pProtocol;
    IUnknown *pUnk;
    DWORD dwFilterFlags;
    } 	PROTOCOLFILTERDATA;



extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0049_v0_0_s_ifspec;





 

typedef  IEncodingFilterFactory *LPENCODINGFILTERFACTORY;

typedef struct _tagDATAINFO
    {
    ULONG ulTotalSize;
    ULONG ulavrPacketSize;
    ULONG ulConnectSpeed;
    ULONG ulProcessorSpeed;
    } 	DATAINFO;


extern "C" const IID IID_IEncodingFilterFactory;


    
    struct __declspec(uuid("70bdde00-c18e-11d0-a9ce-006097942311")) __declspec(novtable)
    IEncodingFilterFactory : public IUnknown
    {
    public:
        virtual HRESULT __stdcall FindBestFilter( 
             LPCWSTR pwzCodeIn,
             LPCWSTR pwzCodeOut,
             DATAINFO info,
             IDataFilter **ppDF) = 0;
        
        virtual HRESULT __stdcall GetDefaultFilter( 
             LPCWSTR pwzCodeIn,
             LPCWSTR pwzCodeOut,
             IDataFilter **ppDF) = 0;
        
    };
    
    































































#line 9665 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 9670 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 9676 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



BOOL __stdcall IsLoggingEnabledA(  LPCSTR  pszUrl);                    
BOOL __stdcall IsLoggingEnabledW(  LPCWSTR  pwszUrl);                  




#line 9686 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
typedef struct _tagHIT_LOGGING_INFO
    {
    DWORD dwStructSize;
    LPSTR lpszLoggedUrlName;
    SYSTEMTIME StartTime;
    SYSTEMTIME EndTime;
    LPSTR lpszExtendedInfo;
    } 	HIT_LOGGING_INFO;

typedef struct _tagHIT_LOGGING_INFO *LPHIT_LOGGING_INFO;

BOOL __stdcall WriteHitLogging(  LPHIT_LOGGING_INFO lpLogginginfo);    

struct CONFIRMSAFETY
    {
    CLSID clsid;
    IUnknown *pUnk;
    DWORD dwFlags;
    } ;
extern "C" const GUID GUID_CUSTOM_CONFIRMOBJECTSAFETY; 
#line 9707 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0050_v0_0_s_ifspec;





 

typedef  IWrappedProtocol *LPIWRAPPEDPROTOCOL;


extern "C" const IID IID_IWrappedProtocol;


    
    struct __declspec(uuid("53c84785-8425-4dc5-971b-e58d9c19f9b6")) __declspec(novtable)
    IWrappedProtocol : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetWrapperCode( 
             LONG *pnCode,
             DWORD_PTR dwReserved) = 0;
        
    };
    
    




















































#line 9791 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 9796 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 9802 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0051_v0_0_s_ifspec;





 

typedef  IGetBindHandle *LPGETBINDHANDLE;

typedef  
enum __MIDL_IGetBindHandle_0001
    {
        BINDHANDLETYPES_APPCACHE	= 0,
        BINDHANDLETYPES_DEPENDENCY	= 0x1,
        BINDHANDLETYPES_COUNT	= ( BINDHANDLETYPES_DEPENDENCY + 1 ) 
    } 	BINDHANDLETYPES;


extern "C" const IID IID_IGetBindHandle;


    
    struct __declspec(uuid("AF0FF408-129D-4b20-91F0-02BD23D88352")) __declspec(novtable)
    IGetBindHandle : public IUnknown
    {
    public:
        virtual HRESULT __stdcall GetBindHandle( 
             BINDHANDLETYPES enumRequestedHandle,
             HANDLE *pRetHandle) = 0;
        
    };
    
    




















































#line 9894 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 9899 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 9905 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"


typedef struct _tagPROTOCOL_ARGUMENT
    {
    LPCWSTR szMethod;
    LPCWSTR szTargetUrl;
    } 	PROTOCOL_ARGUMENT;

typedef struct _tagPROTOCOL_ARGUMENT *LPPROTOCOL_ARGUMENT;

#line 9916 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0052_v0_0_s_ifspec;





 

typedef  IBindCallbackRedirect *LPBINDCALLBACKREDIRECT;


extern "C" const IID IID_IBindCallbackRedirect;


    
    struct __declspec(uuid("11C81BC2-121E-4ed5-B9C4-B430BD54F2C0")) __declspec(novtable)
    IBindCallbackRedirect : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Redirect( 
             LPCWSTR lpcUrl,
             VARIANT_BOOL *vbCancel) = 0;
        
    };
    
    




















































#line 10000 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"




#line 10005 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



 

#line 10011 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#line 10012 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"
#pragma endregion


extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_urlmon_0000_0053_v0_0_s_ifspec;



unsigned long             __stdcall  BSTR_UserSize(      unsigned long *, unsigned long            ,  BSTR * ); 
unsigned char * __stdcall  BSTR_UserMarshal(   unsigned long *,  unsigned char *,  BSTR * ); 
unsigned char * __stdcall  BSTR_UserUnmarshal( unsigned long *,  unsigned char *,  BSTR * ); 
void                      __stdcall  BSTR_UserFree(      unsigned long *,  BSTR * ); 

unsigned long             __stdcall  HWND_UserSize(      unsigned long *, unsigned long            ,  HWND * ); 
unsigned char * __stdcall  HWND_UserMarshal(   unsigned long *,  unsigned char *,  HWND * ); 
unsigned char * __stdcall  HWND_UserUnmarshal( unsigned long *,  unsigned char *,  HWND * ); 
void                      __stdcall  HWND_UserFree(      unsigned long *,  HWND * ); 

unsigned long             __stdcall  BSTR_UserSize64(      unsigned long *, unsigned long            ,  BSTR * ); 
unsigned char * __stdcall  BSTR_UserMarshal64(   unsigned long *,  unsigned char *,  BSTR * ); 
unsigned char * __stdcall  BSTR_UserUnmarshal64( unsigned long *,  unsigned char *,  BSTR * ); 
void                      __stdcall  BSTR_UserFree64(      unsigned long *,  BSTR * ); 

unsigned long             __stdcall  HWND_UserSize64(      unsigned long *, unsigned long            ,  HWND * ); 
unsigned char * __stdcall  HWND_UserMarshal64(   unsigned long *,  unsigned char *,  HWND * ); 
unsigned char * __stdcall  HWND_UserUnmarshal64( unsigned long *,  unsigned char *,  HWND * ); 
void                      __stdcall  HWND_UserFree64(      unsigned long *,  HWND * ); 

 HRESULT __stdcall IBinding_GetBindResult_Proxy( 
    IBinding * This,
     CLSID *pclsidProtocol,
     DWORD *pdwResult,
     
      LPOLESTR *pszResult,
     DWORD *pdwReserved);


 HRESULT __stdcall IBinding_GetBindResult_Stub( 
     IBinding * This,
      CLSID *pclsidProtocol,
      DWORD *pdwResult,
      LPOLESTR *pszResult,
     DWORD dwReserved);

 HRESULT __stdcall IBindStatusCallback_GetBindInfo_Proxy( 
    IBindStatusCallback * This,
     DWORD *grfBINDF,
     BINDINFO *pbindinfo);


 HRESULT __stdcall IBindStatusCallback_GetBindInfo_Stub( 
     IBindStatusCallback * This,
      DWORD *grfBINDF,
      RemBINDINFO *pbindinfo,
      RemSTGMEDIUM *pstgmed);

 HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Proxy( 
    IBindStatusCallback * This,
     DWORD grfBSCF,
     DWORD dwSize,
     FORMATETC *pformatetc,
     STGMEDIUM *pstgmed);


 HRESULT __stdcall IBindStatusCallback_OnDataAvailable_Stub( 
     IBindStatusCallback * This,
     DWORD grfBSCF,
     DWORD dwSize,
      RemFORMATETC *pformatetc,
      RemSTGMEDIUM *pstgmed);

 HRESULT __stdcall IBindStatusCallbackEx_GetBindInfoEx_Proxy( 
    IBindStatusCallbackEx * This,
     DWORD *grfBINDF,
     BINDINFO *pbindinfo,
     DWORD *grfBINDF2,
     DWORD *pdwReserved);


 HRESULT __stdcall IBindStatusCallbackEx_GetBindInfoEx_Stub( 
     IBindStatusCallbackEx * This,
      DWORD *grfBINDF,
      RemBINDINFO *pbindinfo,
      RemSTGMEDIUM *pstgmed,
      DWORD *grfBINDF2,
      DWORD *pdwReserved);

 HRESULT __stdcall IWinInetInfo_QueryOption_Proxy( 
    IWinInetInfo * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD *pcbBuf);


 HRESULT __stdcall IWinInetInfo_QueryOption_Stub( 
     IWinInetInfo * This,
     DWORD dwOption,
      BYTE *pBuffer,
      DWORD *pcbBuf);

 HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Proxy( 
    IWinInetHttpInfo * This,
     DWORD dwOption,
     LPVOID pBuffer,
     DWORD *pcbBuf,
     DWORD *pdwFlags,
     DWORD *pdwReserved);


 HRESULT __stdcall IWinInetHttpInfo_QueryInfo_Stub( 
     IWinInetHttpInfo * This,
     DWORD dwOption,
      BYTE *pBuffer,
      DWORD *pcbBuf,
      DWORD *pdwFlags,
      DWORD *pdwReserved);

 HRESULT __stdcall IBindHost_MonikerBindToStorage_Proxy( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID & riid,
     void **ppvObj);


 HRESULT __stdcall IBindHost_MonikerBindToStorage_Stub( 
     IBindHost * This,
      IMoniker *pMk,
      IBindCtx *pBC,
      IBindStatusCallback *pBSC,
      const IID & riid,
      IUnknown **ppvObj);

 HRESULT __stdcall IBindHost_MonikerBindToObject_Proxy( 
    IBindHost * This,
     IMoniker *pMk,
     IBindCtx *pBC,
     IBindStatusCallback *pBSC,
     const IID & riid,
     void **ppvObj);


 HRESULT __stdcall IBindHost_MonikerBindToObject_Stub( 
     IBindHost * This,
      IMoniker *pMk,
      IBindCtx *pBC,
      IBindStatusCallback *pBSC,
      const IID & riid,
      IUnknown **ppvObj);






}
#line 10170 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"

#line 10172 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\urlmon.h"



#line 441 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"





 


#pragma warning( disable: 4049 )  






















#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"





#pragma once
#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"

 



typedef struct IPropertyStorage IPropertyStorage;

#line 48 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"




typedef struct IPropertySetStorage IPropertySetStorage;

#line 55 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"




typedef struct IEnumSTATPROPSTG IEnumSTATPROPSTG;

#line 62 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"




typedef struct IEnumSTATPROPSETSTG IEnumSTATPROPSETSTG;

#line 69 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"







extern "C"{
#line 78 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"



 










#pragma warning(push)
#line 94 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"
#pragma warning(disable:4201)    
#pragma warning(disable:4237)    
#line 97 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"

#pragma once
#line 100 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"
#pragma region Application Family




typedef struct tagVersionedStream
    {
    GUID guidVersion;
    IStream *pStream;
    } 	VERSIONEDSTREAM;

typedef struct tagVersionedStream *LPVERSIONEDSTREAM;

























typedef struct tagPROPVARIANT PROPVARIANT;
#line 139 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"
typedef struct tagCAC
    {
    ULONG cElems;
     CHAR *pElems;
    } 	CAC;

typedef struct tagCAUB
    {
    ULONG cElems;
     UCHAR *pElems;
    } 	CAUB;

typedef struct tagCAI
    {
    ULONG cElems;
     SHORT *pElems;
    } 	CAI;

typedef struct tagCAUI
    {
    ULONG cElems;
     USHORT *pElems;
    } 	CAUI;

typedef struct tagCAL
    {
    ULONG cElems;
     LONG *pElems;
    } 	CAL;

typedef struct tagCAUL
    {
    ULONG cElems;
     ULONG *pElems;
    } 	CAUL;

typedef struct tagCAFLT
    {
    ULONG cElems;
     FLOAT *pElems;
    } 	CAFLT;

typedef struct tagCADBL
    {
    ULONG cElems;
     DOUBLE *pElems;
    } 	CADBL;

typedef struct tagCACY
    {
    ULONG cElems;
     CY *pElems;
    } 	CACY;

typedef struct tagCADATE
    {
    ULONG cElems;
     DATE *pElems;
    } 	CADATE;

typedef struct tagCABSTR
    {
    ULONG cElems;
     BSTR *pElems;
    } 	CABSTR;

typedef struct tagCABSTRBLOB
    {
    ULONG cElems;
     BSTRBLOB *pElems;
    } 	CABSTRBLOB;

typedef struct tagCABOOL
    {
    ULONG cElems;
     VARIANT_BOOL *pElems;
    } 	CABOOL;

typedef struct tagCASCODE
    {
    ULONG cElems;
     SCODE *pElems;
    } 	CASCODE;

typedef struct tagCAPROPVARIANT
    {
    ULONG cElems;
     PROPVARIANT *pElems;
    } 	CAPROPVARIANT;

typedef struct tagCAH
    {
    ULONG cElems;
     LARGE_INTEGER *pElems;
    } 	CAH;

typedef struct tagCAUH
    {
    ULONG cElems;
     ULARGE_INTEGER *pElems;
    } 	CAUH;

typedef struct tagCALPSTR
    {
    ULONG cElems;
     LPSTR *pElems;
    } 	CALPSTR;

typedef struct tagCALPWSTR
    {
    ULONG cElems;
     LPWSTR *pElems;
    } 	CALPWSTR;

typedef struct tagCAFILETIME
    {
    ULONG cElems;
     FILETIME *pElems;
    } 	CAFILETIME;

typedef struct tagCACLIPDATA
    {
    ULONG cElems;
     CLIPDATA *pElems;
    } 	CACLIPDATA;

typedef struct tagCACLSID
    {
    ULONG cElems;
     CLSID *pElems;
    } 	CACLSID;











typedef WORD PROPVAR_PAD1;
typedef WORD PROPVAR_PAD2;
typedef WORD PROPVAR_PAD3;

#line 286 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"





#line 292 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"

struct tagPROPVARIANT {
  union {
#line 296 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"
struct 
    {
    VARTYPE vt;
    PROPVAR_PAD1 wReserved1;
    PROPVAR_PAD2 wReserved2;
    PROPVAR_PAD3 wReserved3;
      union 
        {
           
         CHAR cVal;
         UCHAR bVal;
         SHORT iVal;
         USHORT uiVal;
         LONG lVal;
         ULONG ulVal;
         INT intVal;
         UINT uintVal;
         LARGE_INTEGER hVal;
         ULARGE_INTEGER uhVal;
         FLOAT fltVal;
         DOUBLE dblVal;
         VARIANT_BOOL boolVal;
         
         SCODE scode;
         CY cyVal;
         DATE date;
         FILETIME filetime;
         CLSID *puuid;
         CLIPDATA *pclipdata;
         BSTR bstrVal;
         BSTRBLOB bstrblobVal;
         BLOB blob;
         LPSTR pszVal;
         LPWSTR pwszVal;
         IUnknown *punkVal;
         IDispatch *pdispVal;
         IStream *pStream;
         IStorage *pStorage;
         LPVERSIONEDSTREAM pVersionedStream;
         LPSAFEARRAY parray;
         CAC cac;
         CAUB caub;
         CAI cai;
         CAUI caui;
         CAL cal;
         CAUL caul;
         CAH cah;
         CAUH cauh;
         CAFLT caflt;
         CADBL cadbl;
         CABOOL cabool;
         CASCODE cascode;
         CACY cacy;
         CADATE cadate;
         CAFILETIME cafiletime;
         CACLSID cauuid;
         CACLIPDATA caclipdata;
         CABSTR cabstr;
         CABSTRBLOB cabstrblob;
         CALPSTR calpstr;
         CALPWSTR calpwstr;
         CAPROPVARIANT capropvar;
         CHAR *pcVal;
         UCHAR *pbVal;
         SHORT *piVal;
         USHORT *puiVal;
         LONG *plVal;
         ULONG *pulVal;
         INT *pintVal;
         UINT *puintVal;
         FLOAT *pfltVal;
         DOUBLE *pdblVal;
         VARIANT_BOOL *pboolVal;
         DECIMAL *pdecVal;
         SCODE *pscode;
         CY *pcyVal;
         DATE *pdate;
         BSTR *pbstrVal;
         IUnknown **ppunkVal;
         IDispatch **ppdispVal;
         LPSAFEARRAY *pparray;
         PROPVARIANT *pvarVal;
        } 	;
    } ;

    DECIMAL decVal;
  };
};
#line 385 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"

#line 387 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"










typedef struct tagPROPVARIANT * LPPROPVARIANT;







#line 406 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"
#line 407 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"

#line 409 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"

























#line 435 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"
#pragma endregion
#pragma region Desktop Family




























































enum PIDMSI_STATUS_VALUE
    {
        PIDMSI_STATUS_NORMAL	= 0,
        PIDMSI_STATUS_NEW	= ( PIDMSI_STATUS_NORMAL + 1 ) ,
        PIDMSI_STATUS_PRELIM	= ( PIDMSI_STATUS_NEW + 1 ) ,
        PIDMSI_STATUS_DRAFT	= ( PIDMSI_STATUS_PRELIM + 1 ) ,
        PIDMSI_STATUS_INPROGRESS	= ( PIDMSI_STATUS_DRAFT + 1 ) ,
        PIDMSI_STATUS_EDIT	= ( PIDMSI_STATUS_INPROGRESS + 1 ) ,
        PIDMSI_STATUS_REVIEW	= ( PIDMSI_STATUS_EDIT + 1 ) ,
        PIDMSI_STATUS_PROOF	= ( PIDMSI_STATUS_REVIEW + 1 ) ,
        PIDMSI_STATUS_FINAL	= ( PIDMSI_STATUS_PROOF + 1 ) ,
        PIDMSI_STATUS_OTHER	= 0x7fff
    } ;
#line 511 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"
#pragma endregion
#pragma region Application Family







typedef struct tagPROPSPEC
    {
    ULONG ulKind;
      union 
        {
         PROPID propid;
         LPOLESTR lpwstr;
           
        } 	;
    } 	PROPSPEC;

typedef struct tagSTATPROPSTG
    {
    LPOLESTR lpwstrName;
    PROPID propid;
    VARTYPE vt;
    } 	STATPROPSTG;






typedef struct tagSTATPROPSETSTG
    {
    FMTID fmtid;
    CLSID clsid;
    DWORD grfFlags;
    FILETIME mtime;
    FILETIME ctime;
    FILETIME atime;
    DWORD dwOSVersion;
    } 	STATPROPSETSTG;



extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0000_v0_0_s_ifspec;





 


extern "C" const IID IID_IPropertyStorage;


    
    struct __declspec(uuid("00000138-0000-0000-C000-000000000046")) __declspec(novtable)
    IPropertyStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall ReadMultiple( 
             ULONG cpspec,
              const PROPSPEC rgpspec[  ],
              PROPVARIANT rgpropvar[  ]) = 0;
        
        virtual HRESULT __stdcall WriteMultiple( 
             ULONG cpspec,
              const PROPSPEC rgpspec[  ],
              const PROPVARIANT rgpropvar[  ],
             PROPID propidNameFirst) = 0;
        
        virtual HRESULT __stdcall DeleteMultiple( 
             ULONG cpspec,
              const PROPSPEC rgpspec[  ]) = 0;
        
        virtual HRESULT __stdcall ReadPropertyNames( 
             ULONG cpropid,
              const PROPID rgpropid[  ],
              LPOLESTR rglpwstrName[  ]) = 0;
        
        virtual HRESULT __stdcall WritePropertyNames( 
             ULONG cpropid,
              const PROPID rgpropid[  ],
              const LPOLESTR rglpwstrName[  ]) = 0;
        
        virtual HRESULT __stdcall DeletePropertyNames( 
             ULONG cpropid,
              const PROPID rgpropid[  ]) = 0;
        
        virtual HRESULT __stdcall Commit( 
             DWORD grfCommitFlags) = 0;
        
        virtual HRESULT __stdcall Revert( void) = 0;
        
        virtual HRESULT __stdcall Enum( 
              IEnumSTATPROPSTG **ppenum) = 0;
        
        virtual HRESULT __stdcall SetTimes( 
              const FILETIME *pctime,
              const FILETIME *patime,
              const FILETIME *pmtime) = 0;
        
        virtual HRESULT __stdcall SetClass( 
              const IID & clsid) = 0;
        
        virtual HRESULT __stdcall Stat( 
              STATPROPSETSTG *pstatpsstg) = 0;
        
    };
    
    












































































































































#line 766 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"




#line 771 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"






 

typedef    IPropertySetStorage *LPPROPERTYSETSTORAGE;


extern "C" const IID IID_IPropertySetStorage;


    
    struct __declspec(uuid("0000013A-0000-0000-C000-000000000046")) __declspec(novtable)
    IPropertySetStorage : public IUnknown
    {
    public:
        virtual HRESULT __stdcall Create( 
              const IID & rfmtid,
              const CLSID *pclsid,
             DWORD grfFlags,
             DWORD grfMode,
              IPropertyStorage **ppprstg) = 0;
        
        virtual HRESULT __stdcall Open( 
              const IID & rfmtid,
             DWORD grfMode,
              IPropertyStorage **ppprstg) = 0;
        
        virtual HRESULT __stdcall Delete( 
              const IID & rfmtid) = 0;
        
        virtual HRESULT __stdcall Enum( 
              IEnumSTATPROPSETSTG **ppenum) = 0;
        
    };
    
    














































































#line 890 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"




#line 895 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"






 

typedef    IEnumSTATPROPSTG *LPENUMSTATPROPSTG;


extern "C" const IID IID_IEnumSTATPROPSTG;


    
    struct __declspec(uuid("00000139-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATPROPSTG : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             
               STATPROPSTG *rgelt,
             
                 ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
              IEnumSTATPROPSTG **ppenum) = 0;
        
    };
    
    











































































#line 1008 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"



 HRESULT __stdcall IEnumSTATPROPSTG_RemoteNext_Proxy( 
     IEnumSTATPROPSTG * This,
     ULONG celt,
      STATPROPSTG *rgelt,
      ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1027 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"






 

typedef    IEnumSTATPROPSETSTG *LPENUMSTATPROPSETSTG;


extern "C" const IID IID_IEnumSTATPROPSETSTG;


    
    struct __declspec(uuid("0000013B-0000-0000-C000-000000000046")) __declspec(novtable)
    IEnumSTATPROPSETSTG : public IUnknown
    {
    public:
        virtual  HRESULT __stdcall Next( 
             ULONG celt,
             
               STATPROPSETSTG *rgelt,
             
                 ULONG *pceltFetched) = 0;
        
        virtual HRESULT __stdcall Skip( 
             ULONG celt) = 0;
        
        virtual HRESULT __stdcall Reset( void) = 0;
        
        virtual HRESULT __stdcall Clone( 
              IEnumSTATPROPSETSTG **ppenum) = 0;
        
    };
    
    











































































#line 1140 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"



 HRESULT __stdcall IEnumSTATPROPSETSTG_RemoteNext_Proxy( 
     IEnumSTATPROPSETSTG * This,
     ULONG celt,
      STATPROPSETSTG *rgelt,
      ULONG *pceltFetched);


void __stdcall IEnumSTATPROPSETSTG_RemoteNext_Stub(
    IRpcStubBuffer *This,
    IRpcChannelBuffer *_pRpcChannelBuffer,
    PRPC_MESSAGE _pRpcMessage,
    DWORD *_pdwStubPhase);



#line 1159 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"



 

typedef    IPropertyStorage *LPPROPERTYSTORAGE;

  extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantCopy(
              PROPVARIANT* pvarDest,
              const PROPVARIANT * pvarSrc);

extern "C" __declspec(dllimport) HRESULT __stdcall PropVariantClear(  PROPVARIANT* pvar);

extern "C" __declspec(dllimport) HRESULT __stdcall FreePropVariantArray(
              ULONG cVariants,
              PROPVARIANT* rgvars);








inline void PropVariantInit (  PROPVARIANT * pvar )
{
    memset ( pvar, 0, sizeof(PROPVARIANT) );
}





#line 1193 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"


#line 1196 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"




  extern "C" __declspec(dllimport) HRESULT __stdcall StgCreatePropStg(
              IUnknown* pUnk,
              const IID & fmtid,
              const CLSID* pclsid,
              DWORD grfFlags,
              DWORD dwReserved,
             IPropertyStorage** ppPropStg);

  extern "C" __declspec(dllimport) HRESULT __stdcall StgOpenPropStg(
              IUnknown* pUnk,
              const IID & fmtid,
              DWORD grfFlags,
              DWORD dwReserved,
             IPropertyStorage** ppPropStg);

  extern "C" __declspec(dllimport) HRESULT __stdcall StgCreatePropSetStg(
              IStorage* pStorage,
              DWORD dwReserved,
             IPropertySetStorage** ppPropSetStg);



  extern "C" __declspec(dllimport) HRESULT __stdcall FmtIdToPropStgName(
              const FMTID* pfmtid,
              LPOLESTR oszName);

  extern "C" __declspec(dllimport) HRESULT __stdcall PropStgNameToFmtId(
              const LPOLESTR oszName,
              FMTID* pfmtid);

#line 1231 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"



typedef struct tagSERIALIZEDPROPERTYVALUE
{
    DWORD	dwType;
    BYTE	rgb[1];
} SERIALIZEDPROPERTYVALUE;
#line 1240 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"

#line 1242 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"
#pragma endregion

#pragma region Desktop Family


extern "C"
   
SERIALIZEDPROPERTYVALUE* __stdcall
StgConvertVariantToProperty(
              const PROPVARIANT* pvar,
              USHORT CodePage,
              SERIALIZEDPROPERTYVALUE* pprop,
              ULONG* pcb,
              PROPID pid,
              BOOLEAN fReserved,
              ULONG* pcIndirect);


class PMemoryAllocator;

extern "C"
   
BOOLEAN __stdcall
StgConvertPropertyToVariant(
              const SERIALIZEDPROPERTYVALUE* pprop,
              USHORT CodePage,
              PROPVARIANT* pvar,
              PMemoryAllocator* pma);
#line 1271 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"

#line 1273 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"
#pragma endregion


#pragma warning(pop)



#line 1281 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"


extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_c_ifspec;
extern RPC_IF_HANDLE __MIDL_itf_propidl_0000_0004_v0_0_s_ifspec;



unsigned long             __stdcall  BSTR_UserSize(      unsigned long *, unsigned long            ,  BSTR * ); 
unsigned char * __stdcall  BSTR_UserMarshal(   unsigned long *,  unsigned char *,  BSTR * ); 
unsigned char * __stdcall  BSTR_UserUnmarshal( unsigned long *,  unsigned char *,  BSTR * ); 
void                      __stdcall  BSTR_UserFree(      unsigned long *,  BSTR * ); 

unsigned long             __stdcall  LPSAFEARRAY_UserSize(      unsigned long *, unsigned long            ,  LPSAFEARRAY * ); 
unsigned char * __stdcall  LPSAFEARRAY_UserMarshal(   unsigned long *,  unsigned char *,  LPSAFEARRAY * ); 
unsigned char * __stdcall  LPSAFEARRAY_UserUnmarshal( unsigned long *,  unsigned char *,  LPSAFEARRAY * ); 
void                      __stdcall  LPSAFEARRAY_UserFree(      unsigned long *,  LPSAFEARRAY * ); 

unsigned long             __stdcall  BSTR_UserSize64(      unsigned long *, unsigned long            ,  BSTR * ); 
unsigned char * __stdcall  BSTR_UserMarshal64(   unsigned long *,  unsigned char *,  BSTR * ); 
unsigned char * __stdcall  BSTR_UserUnmarshal64( unsigned long *,  unsigned char *,  BSTR * ); 
void                      __stdcall  BSTR_UserFree64(      unsigned long *,  BSTR * ); 

unsigned long             __stdcall  LPSAFEARRAY_UserSize64(      unsigned long *, unsigned long            ,  LPSAFEARRAY * ); 
unsigned char * __stdcall  LPSAFEARRAY_UserMarshal64(   unsigned long *,  unsigned char *,  LPSAFEARRAY * ); 
unsigned char * __stdcall  LPSAFEARRAY_UserUnmarshal64( unsigned long *,  unsigned char *,  LPSAFEARRAY * ); 
void                      __stdcall  LPSAFEARRAY_UserFree64(      unsigned long *,  LPSAFEARRAY * ); 

 HRESULT __stdcall IEnumSTATPROPSTG_Next_Proxy( 
    IEnumSTATPROPSTG * This,
     ULONG celt,
     
       STATPROPSTG *rgelt,
     
         ULONG *pceltFetched);


 HRESULT __stdcall IEnumSTATPROPSTG_Next_Stub( 
     IEnumSTATPROPSTG * This,
     ULONG celt,
      STATPROPSTG *rgelt,
      ULONG *pceltFetched);

 HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Proxy( 
    IEnumSTATPROPSETSTG * This,
     ULONG celt,
     
       STATPROPSETSTG *rgelt,
     
         ULONG *pceltFetched);


 HRESULT __stdcall IEnumSTATPROPSETSTG_Next_Stub( 
     IEnumSTATPROPSETSTG * This,
     ULONG celt,
      STATPROPSETSTG *rgelt,
      ULONG *pceltFetched);






}
#line 1345 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"

#line 1347 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\propidl.h"



#line 442 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"

#pragma region Desktop Family





extern "C" __declspec(dllimport) HRESULT __stdcall CreateStdProgressIndicator(  HWND hwndParent,
                                     LPCOLESTR pszTitle,
                                     IBindStatusCallback * pIbscCaller,
                                    IBindStatusCallback ** ppIbsc);

#line 455 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
#pragma endregion



#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 460 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
#line 461 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"

#line 463 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\objbase.h"
#line 40 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"

















#pragma once
#line 20 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"























#pragma warning(disable:4103)

#pragma pack(push,8)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack8.h"
#line 24 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#line 25 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"









#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"

extern "C" const IID IID_StdOle;





























#pragma region Application Family


extern "C" __declspec(dllimport) BSTR __stdcall SysAllocString(  const OLECHAR * psz);
extern "C" __declspec(dllimport) INT __stdcall  SysReAllocString(   BSTR* pbstr,   const OLECHAR* psz);
extern "C" __declspec(dllimport)   BSTR __stdcall SysAllocStringLen(  const OLECHAR * strIn, UINT ui);
  extern "C" __declspec(dllimport) INT __stdcall  SysReAllocStringLen(   BSTR* pbstr,   const OLECHAR* psz,   unsigned int len);
extern "C" __declspec(dllimport) void __stdcall SysFreeString(  BSTR bstrString);
extern "C" __declspec(dllimport)   UINT __stdcall SysStringLen(  BSTR pbstr);


extern "C" __declspec(dllimport)   UINT __stdcall SysStringByteLen(  BSTR bstr);
extern "C" __declspec(dllimport) BSTR __stdcall SysAllocStringByteLen(  LPCSTR psz,   UINT len);

#line 81 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"

#line 83 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion





#pragma region Desktop Family


extern "C" __declspec(dllimport) INT __stdcall DosDateTimeToVariantTime(  USHORT wDosDate,   USHORT wDosTime,   DOUBLE * pvtime);

extern "C" __declspec(dllimport) INT __stdcall VariantTimeToDosDateTime(  DOUBLE vtime,   USHORT * pwDosDate,   USHORT * pwDosTime);

#line 97 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion



#pragma region Application Family


extern "C" __declspec(dllimport) INT __stdcall SystemTimeToVariantTime(  LPSYSTEMTIME lpSystemTime,   DOUBLE *pvtime);
extern "C" __declspec(dllimport) INT __stdcall VariantTimeToSystemTime(  DOUBLE vtime,   LPSYSTEMTIME lpSystemTime);

#line 108 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion

#line 111 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"






#pragma region Application Family


extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptor(  UINT cDims,  SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocDescriptorEx(  VARTYPE vt,   UINT cDims,  SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAllocData(  SAFEARRAY * psa);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreate(  VARTYPE vt,   UINT cDims,   SAFEARRAYBOUND * rgsabound);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateEx(  VARTYPE vt,   UINT cDims,   SAFEARRAYBOUND * rgsabound,   PVOID pvExtra);
 
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopyData(  SAFEARRAY *psaSource,   SAFEARRAY *psaTarget);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyDescriptor(  SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroyData(  SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayDestroy(  SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayRedim(  SAFEARRAY * psa,   SAFEARRAYBOUND * psaboundNew);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetDim(  SAFEARRAY * psa);
extern "C" __declspec(dllimport) UINT __stdcall SafeArrayGetElemsize(  SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetUBound(  SAFEARRAY * psa,   UINT nDim,   LONG * plUbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetLBound(  SAFEARRAY * psa,   UINT nDim,   LONG * plLbound);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayLock(  SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnlock(  SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayAccessData(  SAFEARRAY * psa,  void ** ppvData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayUnaccessData(  SAFEARRAY * psa);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetElement(  SAFEARRAY * psa,   LONG * rgIndices,   void * pv);
 
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPutElement(  SAFEARRAY * psa,   LONG * rgIndices,   void * pv);
 
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayCopy(  SAFEARRAY * psa,  SAFEARRAY ** ppsaOut);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayPtrOfIndex(  SAFEARRAY * psa,   LONG * rgIndices,  void ** ppvData);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArraySetRecordInfo(  SAFEARRAY * psa,   IRecordInfo * prinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetRecordInfo(  SAFEARRAY * psa,  IRecordInfo ** prinfo);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArraySetIID(  SAFEARRAY * psa,   const GUID & guid);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetIID(  SAFEARRAY * psa,   GUID * pguid);
extern "C" __declspec(dllimport) HRESULT __stdcall SafeArrayGetVartype(  SAFEARRAY * psa,   VARTYPE * pvt);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVector(  VARTYPE vt,   LONG lLbound,   ULONG cElements);
extern "C" __declspec(dllimport) SAFEARRAY * __stdcall SafeArrayCreateVectorEx(  VARTYPE vt,   LONG lLbound,   ULONG cElements,   PVOID pvExtra);

#line 154 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion






#pragma region Application Family


extern "C" __declspec(dllimport) void __stdcall VariantInit(  VARIANTARG * pvarg);
extern "C" __declspec(dllimport) HRESULT __stdcall VariantClear(  VARIANTARG * pvarg);
 
extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopy(  VARIANTARG * pvargDest,   const VARIANTARG * pvargSrc);
 
extern "C" __declspec(dllimport) HRESULT __stdcall VariantCopyInd(  VARIANT * pvarDest,   const VARIANTARG * pvargSrc);
 
extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeType(  VARIANTARG * pvargDest,
                 const VARIANTARG * pvarSrc,   USHORT wFlags,   VARTYPE vt);
 
extern "C" __declspec(dllimport) HRESULT __stdcall VariantChangeTypeEx(  VARIANTARG * pvargDest,
                 const VARIANTARG * pvarSrc,   LCID lcid,   USHORT wFlags,   VARTYPE vt);

#line 178 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion




                                      
                                      

				      
				      


                                      
                                      







#pragma region Desktop Family


 
extern "C" __declspec(dllimport) HRESULT __stdcall VectorFromBstr (  BSTR bstr,  SAFEARRAY ** ppsa);
 
extern "C" __declspec(dllimport) HRESULT __stdcall BstrFromVector (  SAFEARRAY *psa,   BSTR *pbstr);

#line 208 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion














































#line 256 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"






















#pragma region Application Family


extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI2(SHORT sIn,   BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI4(LONG lIn,   BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI8(LONG64 i64In,   BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR4(FLOAT fltIn,   BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromR8(DOUBLE dblIn,   BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromCy(CY cyIn,   BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDate(DATE dateIn,   BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromStr(  LPCOLESTR strIn, LCID lcid, ULONG dwFlags,   BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDisp(IDispatch * pdispIn, LCID lcid,   BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromBool(VARIANT_BOOL boolIn,   BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromI1(CHAR cIn,   BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI2(USHORT uiIn,   BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI4(ULONG ulIn,   BYTE *pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromUI8(ULONG64 ui64In,   BYTE * pbOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI1FromDec(  const DECIMAL *pdecIn,   BYTE *pbOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI1(BYTE bIn,   SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI4(LONG lIn,   SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI8(LONG64 i64In,   SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR4(FLOAT fltIn,   SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromR8(DOUBLE dblIn,   SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromCy(CY cyIn, SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDate(DATE dateIn,   SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromStr(  LPCOLESTR strIn, LCID lcid, ULONG dwFlags,   SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDisp(IDispatch * pdispIn, LCID lcid,   SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromBool(VARIANT_BOOL boolIn,   SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromI1(CHAR cIn,   SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI2(USHORT uiIn,   SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI4(ULONG ulIn,   SHORT *psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromUI8(ULONG64 ui64In,   SHORT * psOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI2FromDec(  const DECIMAL *pdecIn,   SHORT *psOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI1(BYTE bIn,   LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI2(SHORT sIn,   LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI8(LONG64 i64In,   LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR4(FLOAT fltIn,   LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromR8(DOUBLE dblIn,   LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromCy(CY cyIn,   LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDate(DATE dateIn,   LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromStr(  LPCOLESTR strIn, LCID lcid, ULONG dwFlags,   LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDisp(IDispatch * pdispIn,   LCID lcid,   LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromBool(VARIANT_BOOL boolIn,   LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI1(CHAR cIn,   LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI2(USHORT uiIn,   LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI4(ULONG ulIn,   LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In,   LONG * plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromDec(  const DECIMAL *pdecIn,   LONG *plOut);



extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI1(BYTE bIn,   LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromI2(SHORT sIn,   LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromR4(FLOAT fltIn,   LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromR8(DOUBLE dblIn,   LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromCy(  CY cyIn,   LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDate(DATE dateIn,   LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromStr(  LPCOLESTR strIn,   LCID lcid,   unsigned long dwFlags,   LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDisp(IDispatch * pdispIn,   LCID lcid,   LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromBool(VARIANT_BOOL boolIn,   LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromI1(CHAR cIn,   LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI2(USHORT uiIn,   LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI4(ULONG ulIn,   LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromUI8(ULONG64 ui64In,   LONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI8FromDec(  const DECIMAL *pdecIn,   LONG64 * pi64Out);





extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI1(BYTE bIn,   FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI2(SHORT sIn,   FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI4(LONG lIn,   FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI8(LONG64 i64In,   FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromR8(DOUBLE dblIn,   FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromCy(CY cyIn, FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDate(DATE dateIn,   FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromStr(  LPCOLESTR strIn, LCID lcid, ULONG dwFlags,   FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDisp(IDispatch * pdispIn, LCID lcid,   FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromBool(VARIANT_BOOL boolIn,   FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromI1(CHAR cIn,   FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI2(USHORT uiIn,   FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI4(ULONG ulIn,   FLOAT *pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromUI8(ULONG64 ui64In,   FLOAT * pfltOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR4FromDec(  const DECIMAL *pdecIn,   FLOAT *pfltOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI1(BYTE bIn,   DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI2(SHORT sIn,   DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI4(LONG lIn,   DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI8(LONG64 i64In,   DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromR4(FLOAT fltIn,   DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromCy(CY cyIn, DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDate(DATE dateIn,   DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromStr(  LPCOLESTR strIn, LCID lcid, ULONG dwFlags,   DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDisp(IDispatch * pdispIn, LCID lcid,   DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromBool(VARIANT_BOOL boolIn,   DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromI1(CHAR cIn, DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI2(USHORT uiIn,   DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI4(ULONG ulIn,   DOUBLE *pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromUI8(ULONG64 ui64In,   DOUBLE * pdblOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarR8FromDec(  const DECIMAL *pdecIn,   DOUBLE *pdblOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI1(BYTE bIn,   DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI2(SHORT sIn,   DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI4(LONG lIn,   DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI8(LONG64 i64In,   DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR4(FLOAT fltIn,   DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromR8(DOUBLE dblIn,   DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromCy(CY cyIn,   DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromStr(  LPCOLESTR strIn,   LCID lcid,   ULONG dwFlags,   DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDisp(IDispatch * pdispIn, LCID lcid,   DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromBool(VARIANT_BOOL boolIn,   DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromI1(CHAR cIn,   DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI2(USHORT uiIn,   DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI4(ULONG ulIn,   DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUI8(ULONG64 ui64In,   DATE * pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromDec(  const DECIMAL *pdecIn,   DATE *pdateOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI1(BYTE bIn,   CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI2(SHORT sIn,   CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI4(LONG lIn,   CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI8(LONG64 i64In,   CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR4(FLOAT fltIn,   CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromR8(DOUBLE dblIn,   CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDate(DATE dateIn,   CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromStr(  LPCOLESTR strIn,   LCID lcid,   ULONG dwFlags,   CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDisp(  IDispatch * pdispIn, LCID lcid,   CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromBool(VARIANT_BOOL boolIn,   CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromI1(CHAR cIn,   CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI2(USHORT uiIn,   CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI4(ULONG ulIn,   CY *pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromUI8(ULONG64 ui64In,   CY * pcyOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarCyFromDec(  const DECIMAL *pdecIn,   CY *pcyOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI1(BYTE bVal, LCID lcid, ULONG dwFlags,   BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI2(SHORT iVal, LCID lcid, ULONG dwFlags, BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI4(LONG lIn, LCID lcid, ULONG dwFlags,   BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI8(LONG64 i64In, LCID lcid, unsigned long dwFlags,   BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR4(FLOAT fltIn, LCID lcid, ULONG dwFlags,   BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromR8(DOUBLE dblIn, LCID lcid, ULONG dwFlags,   BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromCy(CY cyIn, LCID lcid, ULONG dwFlags,   BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDate(  DATE dateIn,   LCID lcid,   ULONG dwFlags,   BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDisp(IDispatch * pdispIn, LCID lcid, ULONG dwFlags,   BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromBool(VARIANT_BOOL boolIn, LCID lcid, ULONG dwFlags,   BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromI1(CHAR cIn, LCID lcid, ULONG dwFlags,   BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI2(USHORT uiIn, LCID lcid, ULONG dwFlags,   BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI4(ULONG ulIn, LCID lcid, ULONG dwFlags,   BSTR *pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromUI8(ULONG64 ui64In, LCID lcid, unsigned long dwFlags,   BSTR * pbstrOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBstrFromDec(  const DECIMAL *pdecIn,   LCID lcid,   ULONG dwFlags,   BSTR *pbstrOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI1(BYTE bIn,   VARIANT_BOOL * pboolOut);
  extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI2(  SHORT sIn,   VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI4(LONG lIn,   VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI8(LONG64 i64In,   VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR4(FLOAT fltIn,   VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromR8(DOUBLE dblIn,   VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDate(DATE dateIn,   VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromCy(CY cyIn,   VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromStr(  LPCOLESTR strIn, LCID lcid, ULONG dwFlags,   VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDisp(IDispatch * pdispIn, LCID lcid,   VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromI1(CHAR cIn,   VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI2(USHORT uiIn,   VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI4(ULONG ulIn,   VARIANT_BOOL *pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromUI8(ULONG64 i64In,   VARIANT_BOOL * pboolOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarBoolFromDec(  const DECIMAL *pdecIn,   VARIANT_BOOL *pboolOut);

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromUI1(
      BYTE bIn,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromI2(
      SHORT uiIn,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromI4(
      LONG lIn,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromI8(
      LONG64 i64In,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromR4(
      FLOAT fltIn,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromR8(
      DOUBLE dblIn,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromDate(
      DATE dateIn,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromCy(
      CY cyIn,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromStr(
      LPCOLESTR strIn,
      LCID lcid,
      ULONG dwFlags,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromDisp(
      IDispatch *pdispIn,
      LCID lcid,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromBool(
      VARIANT_BOOL boolIn,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromUI2(
      USHORT uiIn,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromUI4(
      ULONG ulIn,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromUI8(
      ULONG64 i64In,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall 
VarI1FromDec(
      const DECIMAL *pdecIn,
      CHAR *pcOut
    );

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI1(BYTE bIn,   USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI2(SHORT uiIn,   USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI4(LONG lIn,   USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI8(LONG64 i64In,   USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR4(FLOAT fltIn,   USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromR8(DOUBLE dblIn, USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDate(DATE dateIn,   USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromCy(CY cyIn,   USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromStr(  LPCOLESTR strIn,   LCID lcid,   ULONG dwFlags,   USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDisp(  IDispatch *pdispIn, LCID lcid,   USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromBool(VARIANT_BOOL boolIn,   USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromI1(CHAR cIn,   USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI4(ULONG ulIn,   USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromUI8(ULONG64 i64In,   USHORT *puiOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI2FromDec(  const DECIMAL *pdecIn,   USHORT *puiOut);

extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI1(BYTE bIn,   ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI2(  SHORT uiIn,   ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI4(LONG lIn,   ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI8(LONG64 i64In,   ULONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR4(FLOAT fltIn,   ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromR8(DOUBLE dblIn,   ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDate(DATE dateIn,   ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromCy(CY cyIn,   ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromStr(  LPCOLESTR strIn,   LCID lcid,   ULONG dwFlags,   ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDisp(  IDispatch *pdispIn, LCID lcid,   ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromBool(VARIANT_BOOL boolIn,   ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromI1(CHAR cIn,   ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI2(USHORT uiIn,   ULONG *pulOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromUI8(ULONG64 ui64In,   ULONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI4FromDec(  const DECIMAL *pdecIn,   ULONG *pulOut);



extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI1(BYTE bIn,   ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI2(SHORT sIn,   ULONG64 * pi64Out);

#line 577 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion

#pragma region Desktop Family


extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI4(LONG lIn,   ULONG64 * pi64Out);

#line 585 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion

#pragma region Application Family


extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI8(LONG64 ui64In,   ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromR4(FLOAT fltIn,   ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromR8(DOUBLE dblIn,   ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromCy(CY cyIn,   ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDate(DATE dateIn,   ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromStr(  LPCOLESTR strIn,   LCID lcid,   unsigned long dwFlags,   ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDisp(  IDispatch * pdispIn, LCID lcid,   ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromBool(VARIANT_BOOL boolIn,   ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromI1(CHAR cIn,   ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI2(USHORT uiIn,   ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromUI4(ULONG ulIn,   ULONG64 * pi64Out);
extern "C" __declspec(dllimport) HRESULT __stdcall VarUI8FromDec(  const DECIMAL *pdecIn,   ULONG64 * pi64Out);






extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI1(  BYTE bIn,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI2(  SHORT uiIn,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI4(  LONG lIn,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI8(LONG64 i64In,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR4(  FLOAT fltIn,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromR8(  DOUBLE dblIn,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDate(  DATE dateIn,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromCy(  CY cyIn,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromStr(  LPCOLESTR strIn,   LCID lcid,   ULONG dwFlags,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromDisp(  IDispatch *pdispIn,   LCID lcid,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromBool(  VARIANT_BOOL boolIn,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromI1(  CHAR cIn,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI2(  USHORT uiIn,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI4(  ULONG ulIn,   DECIMAL *pdecOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDecFromUI8(ULONG64 ui64In,   DECIMAL *pdecOut);

#line 625 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion





#pragma region Application Family


extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromI8(LONG64 i64In,   LONG *plOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarI4FromUI8(ULONG64 ui64In,   LONG *plOut);

#line 638 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion










#pragma region Desktop Family




#line 655 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion





































































typedef struct {
    INT   cDig;
    ULONG dwInFlags;
    ULONG dwOutFlags;
    INT   cchUsed;
    INT   nBaseShift;
    INT   nPwr10;
} NUMPARSE;







































#pragma region Application Family


 
extern "C" __declspec(dllimport) HRESULT __stdcall VarParseNumFromStr(  LPCOLESTR strIn,   LCID lcid,   ULONG dwFlags,
              NUMPARSE * pnumprs,   BYTE * rgbDig);

 
extern "C" __declspec(dllimport) HRESULT __stdcall VarNumFromParseNum(  NUMPARSE * pnumprs,   BYTE * rgbDig,
              ULONG dwVtBits,   VARIANT * pvar);

#line 784 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion





#pragma region Application Family


extern "C" HRESULT __stdcall VarAdd(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarAnd(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarCat(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarDiv(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarEqv(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarIdiv(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarImp(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarMod(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarMul(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarOr(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarPow(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarSub(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarXor(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LPVARIANT pvarResult);

extern "C" HRESULT __stdcall VarAbs(  LPVARIANT pvarIn,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarFix(  LPVARIANT pvarIn,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarInt(  LPVARIANT pvarIn,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarNeg(  LPVARIANT pvarIn,   LPVARIANT pvarResult);
extern "C" HRESULT __stdcall VarNot(  LPVARIANT pvarIn,   LPVARIANT pvarResult);

extern "C" HRESULT __stdcall VarRound(  LPVARIANT pvarIn,   int cDecimals,   LPVARIANT pvarResult);


extern "C" HRESULT __stdcall VarCmp(  LPVARIANT pvarLeft,   LPVARIANT pvarRight,   LCID lcid,   ULONG dwFlags);

#line 819 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion


extern "C++" {

#pragma region Application Family



__inline
HRESULT

__stdcall
#line 833 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
VarCmp(LPVARIANT pvarLeft, LPVARIANT pvarRight, LCID lcid) {
    return VarCmp(pvarLeft, pvarRight, lcid, 0);
}

#line 838 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion

} 
#line 842 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"





#pragma region Application Family


extern "C" HRESULT __stdcall VarDecAdd(  LPDECIMAL pdecLeft,   LPDECIMAL pdecRight,   LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecDiv(  LPDECIMAL pdecLeft,   LPDECIMAL pdecRight,   LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecMul(  LPDECIMAL pdecLeft,   LPDECIMAL pdecRight,   LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecSub(  LPDECIMAL pdecLeft,   LPDECIMAL pdecRight,   LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecAbs(  LPDECIMAL pdecIn,   LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecFix(  LPDECIMAL pdecIn,   LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecInt(  LPDECIMAL pdecIn,   LPDECIMAL pdecResult);
extern "C" HRESULT __stdcall VarDecNeg(  LPDECIMAL pdecIn,   LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecRound(  LPDECIMAL pdecIn, int cDecimals,   LPDECIMAL pdecResult);

extern "C" HRESULT __stdcall VarDecCmp(  LPDECIMAL pdecLeft,   LPDECIMAL pdecRight);
extern "C" HRESULT __stdcall VarDecCmpR8(  LPDECIMAL pdecLeft,   double dblRight);




extern "C" HRESULT __stdcall VarCyAdd(  CY cyLeft,   CY cyRight,   LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMul(  CY cyLeft,   CY cyRight,   LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMulI4(  CY cyLeft,   long lRight,   LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyMulI8(  CY cyLeft,   LONG64 lRight,   LPCY pcyResult);
extern "C" HRESULT __stdcall VarCySub(  CY cyLeft,   CY cyRight,   LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyAbs(  CY cyIn,   LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyFix(  CY cyIn,   LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyInt(  CY cyIn,   LPCY pcyResult);
extern "C" HRESULT __stdcall VarCyNeg(  CY cyIn,   LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyRound(  CY cyIn,   int cDecimals,   LPCY pcyResult);

extern "C" HRESULT __stdcall VarCyCmp(  CY cyLeft,   CY cyRight);
extern "C" HRESULT __stdcall VarCyCmpR8(  CY cyLeft,   double dblRight);




extern "C" HRESULT __stdcall VarBstrCat(  BSTR bstrLeft,   BSTR bstrRight,   LPBSTR pbstrResult);
extern "C" HRESULT __stdcall VarBstrCmp(  BSTR bstrLeft,   BSTR bstrRight,   LCID lcid,   ULONG dwFlags); 
extern "C" HRESULT __stdcall VarR8Pow(  double dblLeft,   double dblRight,   double *pdblResult);
extern "C" HRESULT __stdcall VarR4CmpR8(  float fltLeft,   double dblRight);
extern "C" HRESULT __stdcall VarR8Round(  double dblIn,   int cDecimals,   double *pdblResult);

#line 894 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion

























typedef struct {
    SYSTEMTIME st;
    USHORT  wDayOfYear;
} UDATE;






#pragma region Application Family


 
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUdate(  UDATE *pudateIn,   ULONG dwFlags,   DATE *pdateOut);
extern "C" __declspec(dllimport) HRESULT __stdcall VarDateFromUdateEx(  UDATE *pudateIn,   LCID lcid,   ULONG dwFlags,   DATE *pdateOut);
 
extern "C" __declspec(dllimport) HRESULT __stdcall VarUdateFromDate(  DATE dateIn,   ULONG dwFlags,   UDATE *pudateOut);

#line 940 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion

#pragma region Desktop Family




   
 
extern "C" __declspec(dllimport) HRESULT __stdcall GetAltMonthNames(LCID lcid,  LPOLESTR * * prgp);





#line 956 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion

#pragma region Application Family


extern "C" __declspec(dllimport) HRESULT __stdcall VarFormat(
	  LPVARIANT pvarIn,
	  LPOLESTR pstrFormat, 
	int iFirstDay, 
	int iFirstWeek, 
	ULONG dwFlags, 
	  BSTR *pbstrOut
	);
	
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatDateTime(
	  LPVARIANT pvarIn, 
	int iNamedFormat, 
	ULONG dwFlags, 
	  BSTR *pbstrOut
	);
	
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatNumber(
	  LPVARIANT pvarIn, 
	int iNumDig, 
	int iIncLead, 
	int iUseParens, 
	int iGroup, 
	ULONG dwFlags, 
	  BSTR *pbstrOut
	);
	
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatPercent(
	  LPVARIANT pvarIn, 
	int iNumDig, 
	int iIncLead, 
	int iUseParens, 
	int iGroup, 
	ULONG dwFlags, 
	  BSTR *pbstrOut
	);
	
extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatCurrency(
	  LPVARIANT pvarIn, 
	int iNumDig, 
	int iIncLead,  
	int iUseParens, 
	int iGroup, 
	ULONG dwFlags, 
	  BSTR *pbstrOut
	);

extern "C" __declspec(dllimport) HRESULT __stdcall VarWeekdayName(
	int iWeekday, 
	int fAbbrev, 
	int iFirstDay, 
	ULONG dwFlags, 
	  BSTR *pbstrOut
	);
	
extern "C" __declspec(dllimport) HRESULT __stdcall VarMonthName(
	int iMonth, 
	int fAbbrev, 
	ULONG dwFlags, 
	  BSTR *pbstrOut
	);

extern "C" __declspec(dllimport) HRESULT __stdcall VarFormatFromTokens(
	  LPVARIANT pvarIn, 
	  LPOLESTR pstrFormat, 
	  LPBYTE pbTokCur, 
	ULONG dwFlags, 
	  BSTR *pbstrOut, 
	LCID lcid
	);
	
extern "C" __declspec(dllimport) HRESULT __stdcall VarTokenizeFormatString(
	  LPOLESTR pstrFormat, 
	  LPBYTE rgbTok, 
	int cbTok, 
	int iFirstDay, 
	int iFirstWeek, 
	LCID lcid, 
	  int *pcbActual
	);

#line 1042 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion

#pragma region Desktop Family






typedef    ITypeLib *LPTYPELIB;







typedef LONG DISPID;
typedef DISPID MEMBERID;




#line 1066 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion

#pragma region Application Family








#line 1078 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion

#pragma region Desktop Family


typedef    ITypeInfo *LPTYPEINFO;






typedef    ITypeComp *LPTYPECOMP;






typedef ICreateTypeLib * LPCREATETYPELIB;

typedef ICreateTypeInfo * LPCREATETYPEINFO;








 
extern "C" __declspec(dllimport) ULONG __stdcall LHashValOfNameSysA(SYSKIND syskind, LCID lcid,
            LPCSTR szName);
#line 1112 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"

 
extern "C" __declspec(dllimport) ULONG __stdcall
LHashValOfNameSys(SYSKIND syskind, LCID lcid, const OLECHAR * szName);












extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLib(  LPCOLESTR szFile, ITypeLib ** pptlib);



typedef enum tagREGKIND
{
    REGKIND_DEFAULT,
    REGKIND_REGISTER,
    REGKIND_NONE
} REGKIND;








 
extern "C" __declspec(dllimport) HRESULT __stdcall LoadTypeLibEx(LPCOLESTR szFile, REGKIND regkind,
            ITypeLib ** pptlib);



 
extern "C" __declspec(dllimport) HRESULT __stdcall LoadRegTypeLib(const GUID & rguid, WORD wVerMajor, WORD wVerMinor,
            LCID lcid, ITypeLib ** pptlib);



extern "C" __declspec(dllimport) HRESULT __stdcall QueryPathOfRegTypeLib(const GUID & guid, USHORT wMaj, USHORT wMin,
            LCID lcid,   LPBSTR lpbstrPathName);



 
extern "C" __declspec(dllimport) HRESULT __stdcall RegisterTypeLib(ITypeLib * ptlib,   LPCOLESTR szFullPath,
              LPCOLESTR szHelpDir);




 
extern "C" __declspec(dllimport) HRESULT __stdcall UnRegisterTypeLib(const GUID & libID, WORD wVerMajor,
            WORD wVerMinor, LCID lcid, SYSKIND syskind);



extern "C" __declspec(dllimport) HRESULT __stdcall RegisterTypeLibForUser(ITypeLib *ptlib,  OLECHAR  *szFullPath,
			  OLECHAR  *szHelpDir);



extern "C" __declspec(dllimport) HRESULT __stdcall UnRegisterTypeLibForUser(
    const GUID &         libID,
    WORD   wMajorVerNum, 
    WORD   wMinorVerNum, 
    LCID            lcid, 
    SYSKIND         syskind);
			
 
extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib ** ppctlib);

 
extern "C" __declspec(dllimport) HRESULT __stdcall CreateTypeLib2(SYSKIND syskind, LPCOLESTR szFile,
            ICreateTypeLib2 **ppctlib);






typedef    IDispatch *LPDISPATCH;

typedef struct tagPARAMDATA {
    OLECHAR * szName;   
    VARTYPE vt;         
} PARAMDATA, * LPPARAMDATA;

typedef struct tagMETHODDATA {
    OLECHAR * szName;   
    PARAMDATA * ppdata; 
    DISPID dispid;      
    UINT iMeth;         
    CALLCONV cc;        
    UINT cArgs;         
    WORD wFlags;        
    VARTYPE vtReturn;
} METHODDATA, * LPMETHODDATA;

typedef struct tagINTERFACEDATA {
    METHODDATA * pmethdata;  
    UINT cMembers;      
} INTERFACEDATA, * LPINTERFACEDATA;






 
extern "C" __declspec(dllimport) HRESULT __stdcall DispGetParam(
	  DISPPARAMS * pdispparams, 
	UINT position,
	VARTYPE vtTarg, 
	  VARIANT * pvarResult, 
	  UINT * puArgErr
	);



  extern "C" __declspec(dllimport) HRESULT __stdcall DispGetIDsOfNames(ITypeInfo * ptinfo,   OLECHAR ** rgszNames,
            UINT cNames,   DISPID * rgdispid);



 

#line 1248 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion

#pragma region Application Family


extern "C" __declspec(dllimport) HRESULT __stdcall DispInvoke(void * _this, ITypeInfo * ptinfo, DISPID dispidMember,
            WORD wFlags, DISPPARAMS * pparams, VARIANT * pvarResult,
            EXCEPINFO * pexcepinfo, UINT * puArgErr);

#line 1258 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion

#pragma region Desktop Family




 
extern "C" __declspec(dllimport) HRESULT __stdcall CreateDispTypeInfo(INTERFACEDATA * pidata, LCID lcid,
            ITypeInfo ** pptinfo);




 
extern "C" __declspec(dllimport) HRESULT __stdcall CreateStdDispatch(IUnknown * punkOuter, void * pvThis,
            ITypeInfo * ptinfo, IUnknown ** ppunkStdDisp);




extern "C" __declspec(dllimport) HRESULT __stdcall DispCallFunc(void * pvInstance, ULONG_PTR oVft, CALLCONV cc,
            VARTYPE vtReturn, UINT  cActuals, VARTYPE * prgvt,
            VARIANTARG ** prgpvarg, VARIANT * pvargResult);










 
extern "C" __declspec(dllimport) HRESULT __stdcall RegisterActiveObject(IUnknown * punk, const IID & rclsid,
            DWORD dwFlags, DWORD * pdwRegister);

extern "C" __declspec(dllimport) HRESULT __stdcall RevokeActiveObject(DWORD dwRegister, void * pvReserved);

extern "C" __declspec(dllimport) HRESULT __stdcall GetActiveObject(const IID & rclsid, void * pvReserved,
            IUnknown ** ppunk);





extern "C" __declspec(dllimport) HRESULT __stdcall SetErrorInfo(  ULONG dwReserved,   IErrorInfo * perrinfo);
 
extern "C" __declspec(dllimport) HRESULT __stdcall GetErrorInfo(  ULONG dwReserved,  IErrorInfo ** pperrinfo);
 
extern "C" __declspec(dllimport) HRESULT __stdcall CreateErrorInfo( ICreateErrorInfo ** pperrinfo);





extern "C" __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromTypeInfo(ITypeInfo * pTypeInfo,
            IRecordInfo ** ppRecInfo);

extern "C" __declspec(dllimport) HRESULT __stdcall GetRecordInfoFromGuids(const GUID & rGuidTypeLib,
            ULONG uVerMajor, ULONG uVerMinor, LCID lcid,
            const GUID & rGuidTypeInfo, IRecordInfo ** ppRecInfo);





extern "C" __declspec(dllimport) ULONG __stdcall OaBuildVersion(void);

extern "C" __declspec(dllimport) void __stdcall ClearCustData(LPCUSTDATA pCustData);


extern "C" __declspec(dllimport) void __stdcall OaEnablePerUserTLibRegistration(void);
#line 1333 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"

#line 1335 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#pragma endregion








#line 1345 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"




#line 1350 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"











































#line 1394 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
























#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 1419 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"
#line 1420 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"

#line 1422 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\oleauto.h"

#line 41 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"








































































#pragma region Desktop Family









extern "C" __declspec(dllimport) HRESULT __stdcall CreateDataAdviseHolder( LPDATAADVISEHOLDER * ppDAHolder);
#line 128 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"



extern "C" __declspec(dllimport) DWORD __stdcall OleBuildVersion( void );

#line 134 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"
#pragma endregion

#pragma region Application Family


extern "C" __declspec(dllimport) HRESULT __stdcall ReadClassStg( LPSTORAGE pStg,  CLSID * pclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall WriteClassStg( LPSTORAGE pStg,  const IID & rclsid);
extern "C" __declspec(dllimport) HRESULT __stdcall ReadClassStm( LPSTREAM pStm,  CLSID * pclsid);  
extern "C" __declspec(dllimport) HRESULT __stdcall WriteClassStm( LPSTREAM pStm,  const IID & rclsid);   

#line 145 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"
#pragma endregion

#pragma region Desktop Family


  extern "C" __declspec(dllimport) HRESULT __stdcall WriteFmtUserTypeStg ( LPSTORAGE pstg,  CLIPFORMAT cf,   LPOLESTR lpszUserType);
extern "C" __declspec(dllimport) HRESULT __stdcall ReadFmtUserTypeStg ( LPSTORAGE pstg,  CLIPFORMAT * pcf,  LPOLESTR * lplpszUserType);




  extern "C" __declspec(dllimport) HRESULT __stdcall OleInitialize( LPVOID pvReserved);
extern "C" __declspec(dllimport) void __stdcall OleUninitialize(void);





extern "C" __declspec(dllimport) HRESULT __stdcall  OleQueryLinkFromData( LPDATAOBJECT pSrcDataObject);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleQueryCreateFromData( LPDATAOBJECT pSrcDataObject);




extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreate( const IID & rclsid,  const IID & riid,  DWORD renderopt,
                 LPFORMATETC pFormatEtc,  LPOLECLIENTSITE pClientSite,
                 LPSTORAGE pStg,  LPVOID * ppvObj);

 
extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateEx( const IID & rclsid,  const IID & riid,  DWORD dwFlags,
                 DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
                 LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
                 DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
                 LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromData( LPDATAOBJECT pSrcDataObj,  const IID & riid,
                 DWORD renderopt,  LPFORMATETC pFormatEtc,
                 LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,
                 LPVOID * ppvObj);

 
extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromDataEx( LPDATAOBJECT pSrcDataObj,  const IID & riid,
                 DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
                 LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
                 DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
                 LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkFromData( LPDATAOBJECT pSrcDataObj,  const IID & riid,
                 DWORD renderopt,  LPFORMATETC pFormatEtc,
                 LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,
                 LPVOID * ppvObj);

 
extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkFromDataEx( LPDATAOBJECT pSrcDataObj,  const IID & riid,
                 DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
                 LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
                  DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
                 LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateStaticFromData( LPDATAOBJECT pSrcDataObj,  const IID & iid,
                 DWORD renderopt,  LPFORMATETC pFormatEtc,
                 LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,
                 LPVOID * ppvObj);


extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLink( LPMONIKER pmkLinkSrc,  const IID & riid,
             DWORD renderopt,  LPFORMATETC lpFormatEtc,
             LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkEx( LPMONIKER pmkLinkSrc,  const IID & riid,
             DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
             LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
             DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
             LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkToFile( LPCOLESTR lpszFileName,  const IID & riid,
             DWORD renderopt,  LPFORMATETC lpFormatEtc,
             LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateLinkToFileEx( LPCOLESTR lpszFileName,  const IID & riid,
             DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
             LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
             DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
             LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromFile( const IID & rclsid,  LPCOLESTR lpszFileName,  const IID & riid,
             DWORD renderopt,  LPFORMATETC lpFormatEtc,
             LPOLECLIENTSITE pClientSite,  LPSTORAGE pStg,  LPVOID * ppvObj);

 
extern "C" __declspec(dllimport) HRESULT __stdcall  OleCreateFromFileEx( const IID & rclsid,  LPCOLESTR lpszFileName,  const IID & riid,
             DWORD dwFlags,  DWORD renderopt,  ULONG cFormats,  DWORD* rgAdvf,
             LPFORMATETC rgFormatEtc,  IAdviseSink * lpAdviseSink,
             DWORD * rgdwConnection,  LPOLECLIENTSITE pClientSite,
             LPSTORAGE pStg,  LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleLoad( LPSTORAGE pStg,  const IID & riid,  LPOLECLIENTSITE pClientSite,
             LPVOID * ppvObj);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleSave( LPPERSISTSTORAGE pPS,  LPSTORAGE pStg,  BOOL fSameAsLoad);

extern "C" __declspec(dllimport) HRESULT __stdcall  OleLoadFromStream(  LPSTREAM pStm,  const IID & iidInterface,  LPVOID * ppvObj);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleSaveToStream(  LPPERSISTSTREAM pPStm,  LPSTREAM pStm );


extern "C" __declspec(dllimport) HRESULT __stdcall  OleSetContainedObject( LPUNKNOWN pUnknown,  BOOL fContained);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleNoteObjectVisible( LPUNKNOWN pUnknown,  BOOL fVisible);




extern "C" __declspec(dllimport) HRESULT __stdcall  RegisterDragDrop( HWND hwnd,  LPDROPTARGET pDropTarget);
extern "C" __declspec(dllimport) HRESULT __stdcall  RevokeDragDrop( HWND hwnd);
extern "C" __declspec(dllimport) HRESULT __stdcall  DoDragDrop( LPDATAOBJECT pDataObj,  LPDROPSOURCE pDropSource,
             DWORD dwOKEffects,  LPDWORD pdwEffect);



extern "C" __declspec(dllimport) HRESULT __stdcall  OleSetClipboard( LPDATAOBJECT pDataObj);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleGetClipboard( LPDATAOBJECT * ppDataObj);
extern "C" __declspec(dllimport) HRESULT __stdcall  OleFlushClipboard(void);   
extern "C" __declspec(dllimport) HRESULT __stdcall  OleIsCurrentClipboard( LPDATAOBJECT pDataObj);   



extern "C" __declspec(dllimport) HOLEMENU __stdcall   OleCreateMenuDescriptor ( HMENU hmenuCombined,
                                 LPOLEMENUGROUPWIDTHS lpMenuWidths);
extern "C" __declspec(dllimport) HRESULT __stdcall              OleSetMenuDescriptor ( HOLEMENU holemenu,  HWND hwndFrame,
                                 HWND hwndActiveObject,
                                 LPOLEINPLACEFRAME lpFrame,
                                 LPOLEINPLACEACTIVEOBJECT lpActiveObj);
extern "C" __declspec(dllimport) HRESULT __stdcall              OleDestroyMenuDescriptor ( HOLEMENU holemenu);

extern "C" __declspec(dllimport) HRESULT __stdcall              OleTranslateAccelerator ( LPOLEINPLACEFRAME lpFrame,
                             LPOLEINPLACEFRAMEINFO lpFrameInfo,  LPMSG lpmsg);




extern "C" __declspec(dllimport) HANDLE __stdcall OleDuplicateData ( HANDLE hSrc,  CLIPFORMAT cfFormat,
                         UINT uiFlags);



extern "C" __declspec(dllimport) HRESULT __stdcall          OleDraw ( LPUNKNOWN pUnknown,  DWORD dwAspect,  HDC hdcDraw,
                     LPCRECT lprcBounds);

  extern "C" __declspec(dllimport) HRESULT __stdcall          OleRun( LPUNKNOWN pUnknown);
extern "C" __declspec(dllimport) BOOL __stdcall   OleIsRunning( LPOLEOBJECT pObject);
extern "C" __declspec(dllimport) HRESULT __stdcall          OleLockRunning( LPUNKNOWN pUnknown,  BOOL fLock,  BOOL fLastUnlockCloses);

extern "C" __declspec(dllimport) void __stdcall   ReleaseStgMedium( LPSTGMEDIUM);

extern "C" __declspec(dllimport) HRESULT __stdcall          CreateOleAdviseHolder( LPOLEADVISEHOLDER * ppOAHolder);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleCreateDefaultHandler( const IID & clsid,  LPUNKNOWN pUnkOuter,
                     const IID & riid,  LPVOID * lplpObj);

extern "C" __declspec(dllimport) HRESULT __stdcall          OleCreateEmbeddingHelper( const IID & clsid,  LPUNKNOWN pUnkOuter,
                     DWORD flags,  LPCLASSFACTORY pCF,
                     const IID & riid,  LPVOID * lplpObj);

extern "C" __declspec(dllimport) BOOL __stdcall   IsAccelerator( HACCEL hAccel,  int cAccelEntries,  LPMSG lpMsg,
                                         WORD * lpwCmd);


extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfFile(  LPOLESTR lpszPath,  BOOL fUseFileAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleGetIconOfClass( const IID & rclsid,   LPOLESTR lpszLabel,
                                         BOOL fUseTypeAsLabel);

extern "C" __declspec(dllimport) HGLOBAL __stdcall OleMetafilePictFromIconAndLabel( HICON hIcon,   LPOLESTR lpszLabel,
                                          LPOLESTR lpszSourceFile,  UINT iIconIndex);





  extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegGetUserType ( const IID & clsid,  DWORD dwFormOfType,
                                         LPOLESTR * pszUserType);

extern "C" __declspec(dllimport) HRESULT __stdcall                  OleRegGetMiscStatus     ( const IID & clsid,  DWORD dwAspect,
                                         DWORD * pdwStatus);

extern "C" __declspec(dllimport) HRESULT __stdcall OleRegEnumFormatEtc( const IID & clsid,  DWORD dwDirection,
                               LPENUMFORMATETC * ppenum);

extern "C" __declspec(dllimport) HRESULT __stdcall OleRegEnumVerbs ( const IID & clsid,  LPENUMOLEVERB * ppenum);


























typedef struct _OLESTREAM *  LPOLESTREAM;

typedef struct _OLESTREAMVTBL
{
    DWORD (__stdcall* Get)(LPOLESTREAM, void *, DWORD);
    DWORD (__stdcall* Put)(LPOLESTREAM, const void *, DWORD);
} OLESTREAMVTBL;
typedef  OLESTREAMVTBL *  LPOLESTREAMVTBL;

typedef struct _OLESTREAM
{
    LPOLESTREAMVTBL lpstbl;
} OLESTREAM;


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorage
    ( LPOLESTREAM                lpolestream,
     LPSTORAGE                   pstg,
     const DVTARGETDEVICE *   ptd);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAM
    ( LPSTORAGE      pstg,
     LPOLESTREAM     lpolestream);




#line 387 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"
#pragma endregion

#pragma region Application Family


  extern "C" __declspec(dllimport) HRESULT __stdcall GetHGlobalFromILockBytes ( LPLOCKBYTES plkbyt,  HGLOBAL * phglobal);
  extern "C" __declspec(dllimport) HRESULT __stdcall CreateILockBytesOnHGlobal ( HGLOBAL hGlobal,  BOOL fDeleteOnRelease,
                                     LPLOCKBYTES * pplkbyt);  

#line 397 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"
#pragma endregion

#pragma region Desktop Family





extern "C" __declspec(dllimport) HRESULT __stdcall OleDoAutoConvert( LPSTORAGE pStg,  LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleGetAutoConvert( const IID & clsidOld,  LPCLSID pClsidNew);
extern "C" __declspec(dllimport) HRESULT __stdcall OleSetAutoConvert( const IID & clsidOld,  const IID & clsidNew);
#line 409 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"

#pragma endregion

#pragma region Application Family


extern "C" __declspec(dllimport) HRESULT __stdcall GetConvertStg( LPSTORAGE pStg);

#line 418 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"
#pragma endregion

#pragma region Desktop Family


extern "C" __declspec(dllimport) HRESULT __stdcall SetConvertStg( LPSTORAGE pStg,  BOOL fConvert);


extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertIStorageToOLESTREAMEx
    ( LPSTORAGE          pstg,
                                    
      CLIPFORMAT         cfFormat,   
      LONG               lWidth,     
      LONG               lHeight,    
      DWORD              dwSize,     
      LPSTGMEDIUM        pmedium,    
      LPOLESTREAM        polestm);

extern "C" __declspec(dllimport) HRESULT __stdcall OleConvertOLESTREAMToIStorageEx
    ( LPOLESTREAM        polestm,
      LPSTORAGE          pstg,
                                    
      CLIPFORMAT *    pcfFormat,  
      LONG *          plwWidth,   
      LONG *          plHeight,   
      DWORD *         pdwSize,    
      LPSTGMEDIUM        pmedium);   

#line 447 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"
#pragma endregion



#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 452 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"
#line 453 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"




#line 458 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"


#line 461 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ole2.h"

#line 211 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 212 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 213 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
























extern "C" const GUID  IID_IPrintDialogCallback;






extern "C" const GUID  IID_IPrintDialogServices;

#line 35 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"




#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\prsht.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 42 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"























#pragma warning(disable:4103)

#pragma pack(push,1)


#line 30 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\pshpack1.h"
#line 45 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
#line 46 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"


extern "C" {            
#line 50 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

#pragma region Desktop Family











#line 64 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
#line 65 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"


















#line 84 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"















typedef UINT_PTR (__stdcall *LPOFNHOOKPROC) (HWND, UINT, WPARAM, LPARAM);




#line 105 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"










typedef struct tagOFN_NT4A {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCSTR       lpstrFilter;
   LPSTR        lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPSTR        lpstrFile;
   DWORD        nMaxFile;
   LPSTR        lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCSTR       lpstrInitialDir;
   LPCSTR       lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCSTR       lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR       lpTemplateName;
} OPENFILENAME_NT4A, *LPOPENFILENAME_NT4A;
typedef struct tagOFN_NT4W {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCWSTR      lpstrFilter;
   LPWSTR       lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPWSTR       lpstrFile;
   DWORD        nMaxFile;
   LPWSTR       lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCWSTR      lpstrInitialDir;
   LPCWSTR      lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCWSTR      lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR      lpTemplateName;
} OPENFILENAME_NT4W, *LPOPENFILENAME_NT4W;




typedef OPENFILENAME_NT4A OPENFILENAME_NT4;
typedef LPOPENFILENAME_NT4A LPOPENFILENAME_NT4;
#line 166 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

typedef struct tagOFNA {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCSTR       lpstrFilter;
   LPSTR        lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPSTR        lpstrFile;
   DWORD        nMaxFile;
   LPSTR        lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCSTR       lpstrInitialDir;
   LPCSTR       lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCSTR       lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCSTR       lpTemplateName;





   void *        pvReserved;
   DWORD        dwReserved;
   DWORD        FlagsEx;
#line 197 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
} OPENFILENAMEA, *LPOPENFILENAMEA;
typedef struct tagOFNW {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HINSTANCE    hInstance;
   LPCWSTR      lpstrFilter;
   LPWSTR       lpstrCustomFilter;
   DWORD        nMaxCustFilter;
   DWORD        nFilterIndex;
   LPWSTR       lpstrFile;
   DWORD        nMaxFile;
   LPWSTR       lpstrFileTitle;
   DWORD        nMaxFileTitle;
   LPCWSTR      lpstrInitialDir;
   LPCWSTR      lpstrTitle;
   DWORD        Flags;
   WORD         nFileOffset;
   WORD         nFileExtension;
   LPCWSTR      lpstrDefExt;
   LPARAM       lCustData;
   LPOFNHOOKPROC lpfnHook;
   LPCWSTR      lpTemplateName;





   void *        pvReserved;
   DWORD        dwReserved;
   DWORD        FlagsEx;
#line 228 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
} OPENFILENAMEW, *LPOPENFILENAMEW;




typedef OPENFILENAMEA OPENFILENAME;
typedef LPOPENFILENAMEA LPOPENFILENAME;
#line 236 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"








#line 245 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
#line 246 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"


__declspec(dllimport) BOOL  __stdcall GetOpenFileNameA(LPOPENFILENAMEA);
__declspec(dllimport) BOOL  __stdcall GetOpenFileNameW(LPOPENFILENAMEW);




#line 255 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
__declspec(dllimport) BOOL  __stdcall GetSaveFileNameA(LPOPENFILENAMEA);
__declspec(dllimport) BOOL  __stdcall GetSaveFileNameW(LPOPENFILENAMEW);




#line 262 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"


__declspec(dllimport) short __stdcall GetFileTitleA(LPCSTR,   LPSTR Buf,   WORD cchSize);
__declspec(dllimport) short __stdcall GetFileTitleW(LPCWSTR,   LPWSTR Buf,   WORD cchSize);




#line 271 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"




























#line 300 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"



#line 304 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"




#line 309 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"















typedef UINT_PTR (__stdcall *LPCCHOOKPROC) (HWND, UINT, WPARAM, LPARAM);



typedef struct _OFNOTIFYA
{
        NMHDR           hdr;
        LPOPENFILENAMEA lpOFN;
        LPSTR           pszFile;        
} OFNOTIFYA, *LPOFNOTIFYA;

typedef struct _OFNOTIFYW
{
        NMHDR           hdr;
        LPOPENFILENAMEW lpOFN;
        LPWSTR          pszFile;        
} OFNOTIFYW, *LPOFNOTIFYW;




typedef OFNOTIFYA OFNOTIFY;
typedef LPOFNOTIFYA LPOFNOTIFY;
#line 348 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"



typedef struct _OFNOTIFYEXA
{
        NMHDR           hdr;
        LPOPENFILENAMEA lpOFN;
        LPVOID          psf;
        LPVOID          pidl;          
} OFNOTIFYEXA, *LPOFNOTIFYEXA;

typedef struct _OFNOTIFYEXW
{
        NMHDR           hdr;
        LPOPENFILENAMEW lpOFN;
        LPVOID          psf;
        LPVOID          pidl;          
} OFNOTIFYEXW, *LPOFNOTIFYEXW;




typedef OFNOTIFYEXA OFNOTIFYEX;
typedef LPOFNOTIFYEXA LPOFNOTIFYEX;
#line 373 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"















#line 389 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"



















#line 409 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"













#line 423 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"













#line 437 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"




























#line 466 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"


typedef struct tagCHOOSECOLORA {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HWND         hInstance;
   COLORREF     rgbResult;
   COLORREF*    lpCustColors;
   DWORD        Flags;
   LPARAM       lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCSTR       lpTemplateName;
} CHOOSECOLORA, *LPCHOOSECOLORA;
typedef struct tagCHOOSECOLORW {
   DWORD        lStructSize;
   HWND         hwndOwner;
   HWND         hInstance;
   COLORREF     rgbResult;
   COLORREF*    lpCustColors;
   DWORD        Flags;
   LPARAM       lCustData;
   LPCCHOOKPROC lpfnHook;
   LPCWSTR      lpTemplateName;
} CHOOSECOLORW, *LPCHOOSECOLORW;




typedef CHOOSECOLORA CHOOSECOLOR;
typedef LPCHOOSECOLORA LPCHOOSECOLOR;
#line 497 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
































#line 530 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

__declspec(dllimport) BOOL __stdcall ChooseColorA(LPCHOOSECOLORA);
__declspec(dllimport) BOOL __stdcall ChooseColorW(LPCHOOSECOLORW);




#line 538 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"











#line 550 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

typedef UINT_PTR (__stdcall *LPFRHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagFINDREPLACEA {
   DWORD        lStructSize;        
   HWND         hwndOwner;          
   HINSTANCE    hInstance;          
                                    
   DWORD        Flags;              
   LPSTR        lpstrFindWhat;      
   LPSTR        lpstrReplaceWith;   
   WORD         wFindWhatLen;       
   WORD         wReplaceWithLen;    
   LPARAM       lCustData;          
   LPFRHOOKPROC lpfnHook;           
   LPCSTR       lpTemplateName;     
} FINDREPLACEA, *LPFINDREPLACEA;
typedef struct tagFINDREPLACEW {
   DWORD        lStructSize;        
   HWND         hwndOwner;          
   HINSTANCE    hInstance;          
                                    
   DWORD        Flags;              
   LPWSTR       lpstrFindWhat;      
   LPWSTR       lpstrReplaceWith;   
   WORD         wFindWhatLen;       
   WORD         wReplaceWithLen;    
   LPARAM       lCustData;          
   LPFRHOOKPROC lpfnHook;           
   LPCWSTR      lpTemplateName;     
} FINDREPLACEW, *LPFINDREPLACEW;




typedef FINDREPLACEA FINDREPLACE;
typedef LPFINDREPLACEA LPFINDREPLACE;
#line 588 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"























#line 612 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

__declspec(dllimport) HWND __stdcall FindTextA(LPFINDREPLACEA);
__declspec(dllimport) HWND __stdcall FindTextW(LPFINDREPLACEW);




#line 620 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

__declspec(dllimport) HWND __stdcall ReplaceTextA(LPFINDREPLACEA);
__declspec(dllimport) HWND __stdcall ReplaceTextW(LPFINDREPLACEW);




#line 628 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"








#line 637 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

typedef UINT_PTR (__stdcall *LPCFHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagCHOOSEFONTA {
   DWORD           lStructSize;
   HWND            hwndOwner;          
   HDC             hDC;                
   LPLOGFONTA      lpLogFont;          
   INT             iPointSize;         
   DWORD           Flags;              
   COLORREF        rgbColors;          
   LPARAM          lCustData;          
   LPCFHOOKPROC    lpfnHook;           
   LPCSTR          lpTemplateName;     
   HINSTANCE       hInstance;          
                                       
   LPSTR           lpszStyle;          
                                       
   WORD            nFontType;          
                                       
                                       
   WORD            ___MISSING_ALIGNMENT__;
   INT             nSizeMin;           
   INT             nSizeMax;           
                                       
} CHOOSEFONTA;
typedef struct tagCHOOSEFONTW {
   DWORD           lStructSize;
   HWND            hwndOwner;          
   HDC             hDC;                
   LPLOGFONTW      lpLogFont;          
   INT             iPointSize;         
   DWORD           Flags;              
   COLORREF        rgbColors;          
   LPARAM          lCustData;          
   LPCFHOOKPROC    lpfnHook;           
   LPCWSTR         lpTemplateName;     
   HINSTANCE       hInstance;          
                                       
   LPWSTR          lpszStyle;          
                                       
   WORD            nFontType;          
                                       
                                       
   WORD            ___MISSING_ALIGNMENT__;
   INT             nSizeMin;           
   INT             nSizeMax;           
                                       
} CHOOSEFONTW;



typedef CHOOSEFONTA CHOOSEFONT;
#line 691 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
typedef CHOOSEFONTA *LPCHOOSEFONTA;
typedef CHOOSEFONTW *LPCHOOSEFONTW;



typedef LPCHOOSEFONTA LPCHOOSEFONT;
#line 698 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
typedef const CHOOSEFONTA *PCCHOOSEFONTA;
typedef const CHOOSEFONTW *PCCHOOSEFONTW;




typedef CHOOSEFONTA CHOOSEFONT;
typedef PCCHOOSEFONTA PCCHOOSEFONT;
#line 707 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

__declspec(dllimport) BOOL __stdcall ChooseFontA(LPCHOOSEFONTA);
__declspec(dllimport) BOOL __stdcall ChooseFontW(LPCHOOSEFONTW);




#line 715 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"















#line 731 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
















#line 748 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"


#line 751 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"





















#line 773 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"


#line 776 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"





#line 782 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"




































#line 819 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"







typedef UINT_PTR (__stdcall *LPPRINTHOOKPROC) (HWND, UINT, WPARAM, LPARAM);
typedef UINT_PTR (__stdcall *LPSETUPHOOKPROC) (HWND, UINT, WPARAM, LPARAM);

typedef struct tagPDA {
   DWORD            lStructSize;
   HWND             hwndOwner;
   HGLOBAL          hDevMode;
   HGLOBAL          hDevNames;
   HDC              hDC;
   DWORD            Flags;
   WORD             nFromPage;
   WORD             nToPage;
   WORD             nMinPage;
   WORD             nMaxPage;
   WORD             nCopies;
   HINSTANCE        hInstance;
   LPARAM           lCustData;
   LPPRINTHOOKPROC  lpfnPrintHook;
   LPSETUPHOOKPROC  lpfnSetupHook;
   LPCSTR           lpPrintTemplateName;
   LPCSTR           lpSetupTemplateName;
   HGLOBAL          hPrintTemplate;
   HGLOBAL          hSetupTemplate;
} PRINTDLGA, *LPPRINTDLGA;
typedef struct tagPDW {
   DWORD            lStructSize;
   HWND             hwndOwner;
   HGLOBAL          hDevMode;
   HGLOBAL          hDevNames;
   HDC              hDC;
   DWORD            Flags;
   WORD             nFromPage;
   WORD             nToPage;
   WORD             nMinPage;
   WORD             nMaxPage;
   WORD             nCopies;
   HINSTANCE        hInstance;
   LPARAM           lCustData;
   LPPRINTHOOKPROC  lpfnPrintHook;
   LPSETUPHOOKPROC  lpfnSetupHook;
   LPCWSTR          lpPrintTemplateName;
   LPCWSTR          lpSetupTemplateName;
   HGLOBAL          hPrintTemplate;
   HGLOBAL          hSetupTemplate;
} PRINTDLGW, *LPPRINTDLGW;




typedef PRINTDLGA PRINTDLG;
typedef LPPRINTDLGA LPPRINTDLG;
#line 878 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

__declspec(dllimport)   BOOL __stdcall PrintDlgA(  LPPRINTDLGA pPD);
__declspec(dllimport)   BOOL __stdcall PrintDlgW(  LPPRINTDLGW pPD);




#line 886 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"






































struct __declspec(uuid("5852A2C3-6530-11D1-B6A3-0000F8757BF9")) __declspec(novtable) IPrintDialogCallback : public IUnknown
{
    
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface (   const IID & riid,  void **ppvObj) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef (void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    
    virtual __declspec(nothrow) HRESULT __stdcall InitDone (void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall SelectionChange (void) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall HandleMessage ( HWND hDlg, UINT uMsg, WPARAM wParam, LPARAM lParam, LRESULT *pResult) = 0;
};




















struct __declspec(uuid("509AAEDA-5639-11D1-B6A1-0000F8757BF9")) __declspec(novtable) IPrintDialogServices : public IUnknown
{
    
    virtual __declspec(nothrow) HRESULT __stdcall QueryInterface (   const IID & riid,  void **ppvObj) = 0;
    virtual __declspec(nothrow) ULONG __stdcall AddRef (void) = 0;
    virtual __declspec(nothrow) ULONG __stdcall Release(void) = 0;

    
    virtual __declspec(nothrow) HRESULT __stdcall GetCurrentDevMode (   LPDEVMODE pDevMode,   UINT *pcbSize) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetCurrentPrinterName (   LPWSTR pPrinterName,   UINT *pcchSize) = 0;
    virtual __declspec(nothrow) HRESULT __stdcall GetCurrentPortName (   LPWSTR pPortName,   UINT *pcchSize) = 0;
};





typedef struct tagPRINTPAGERANGE {
   DWORD  nFromPage;
   DWORD  nToPage;
} PRINTPAGERANGE;
typedef PRINTPAGERANGE *LPPRINTPAGERANGE;
typedef const PRINTPAGERANGE *PCPRINTPAGERANGE;





typedef struct tagPDEXA {
   DWORD                 lStructSize;          
   HWND                  hwndOwner;            
   HGLOBAL               hDevMode;             
   HGLOBAL               hDevNames;            
   HDC                   hDC;                  
   DWORD                 Flags;                
   DWORD                 Flags2;               
   DWORD                 ExclusionFlags;       
   DWORD                 nPageRanges;          
   DWORD                 nMaxPageRanges;       
   LPPRINTPAGERANGE      lpPageRanges;         
   DWORD                 nMinPage;             
   DWORD                 nMaxPage;             
   DWORD                 nCopies;              
   HINSTANCE             hInstance;            
   LPCSTR                lpPrintTemplateName;  
   LPUNKNOWN             lpCallback;           
   DWORD                 nPropertyPages;       
   HPROPSHEETPAGE       *lphPropertyPages;     
   DWORD                 nStartPage;           
   DWORD                 dwResultAction;       
} PRINTDLGEXA, *LPPRINTDLGEXA;



typedef struct tagPDEXW {
   DWORD                 lStructSize;          
   HWND                  hwndOwner;            
   HGLOBAL               hDevMode;             
   HGLOBAL               hDevNames;            
   HDC                   hDC;                  
   DWORD                 Flags;                
   DWORD                 Flags2;               
   DWORD                 ExclusionFlags;       
   DWORD                 nPageRanges;          
   DWORD                 nMaxPageRanges;       
   LPPRINTPAGERANGE      lpPageRanges;         
   DWORD                 nMinPage;             
   DWORD                 nMaxPage;             
   DWORD                 nCopies;              
   HINSTANCE             hInstance;            
   LPCWSTR               lpPrintTemplateName;  
   LPUNKNOWN             lpCallback;           
   DWORD                 nPropertyPages;       
   HPROPSHEETPAGE       *lphPropertyPages;     
   DWORD                 nStartPage;           
   DWORD                 dwResultAction;       
} PRINTDLGEXW, *LPPRINTDLGEXW;




typedef PRINTDLGEXA PRINTDLGEX;
typedef LPPRINTDLGEXA LPPRINTDLGEX;
#line 1040 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"



__declspec(dllimport) HRESULT __stdcall PrintDlgExA(  LPPRINTDLGEXA pPD);
__declspec(dllimport) HRESULT __stdcall PrintDlgExW(  LPPRINTDLGEXW pPD);




#line 1050 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

#line 1052 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

#line 1054 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

































#line 1088 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"























#line 1112 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"




typedef struct tagDEVNAMES {
   WORD wDriverOffset;
   WORD wDeviceOffset;
   WORD wOutputOffset;
   WORD wDefault;
} DEVNAMES;
typedef DEVNAMES *LPDEVNAMES;
typedef const DEVNAMES *PCDEVNAMES;




__declspec(dllimport) DWORD __stdcall CommDlgExtendedError(void);










typedef UINT_PTR (__stdcall* LPPAGEPAINTHOOK)( HWND, UINT, WPARAM, LPARAM );
typedef UINT_PTR (__stdcall* LPPAGESETUPHOOK)( HWND, UINT, WPARAM, LPARAM );

typedef struct tagPSDA
{
    DWORD           lStructSize;
    HWND            hwndOwner;
    HGLOBAL         hDevMode;
    HGLOBAL         hDevNames;
    DWORD           Flags;
    POINT           ptPaperSize;
    RECT            rtMinMargin;
    RECT            rtMargin;
    HINSTANCE       hInstance;
    LPARAM          lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCSTR          lpPageSetupTemplateName;
    HGLOBAL         hPageSetupTemplate;
} PAGESETUPDLGA, * LPPAGESETUPDLGA;
typedef struct tagPSDW
{
    DWORD           lStructSize;
    HWND            hwndOwner;
    HGLOBAL         hDevMode;
    HGLOBAL         hDevNames;
    DWORD           Flags;
    POINT           ptPaperSize;
    RECT            rtMinMargin;
    RECT            rtMargin;
    HINSTANCE       hInstance;
    LPARAM          lCustData;
    LPPAGESETUPHOOK lpfnPageSetupHook;
    LPPAGEPAINTHOOK lpfnPagePaintHook;
    LPCWSTR         lpPageSetupTemplateName;
    HGLOBAL         hPageSetupTemplate;
} PAGESETUPDLGW, * LPPAGESETUPDLGW;




typedef PAGESETUPDLGA PAGESETUPDLG;
typedef LPPAGESETUPDLGA LPPAGESETUPDLG;
#line 1183 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"

__declspec(dllimport) BOOL __stdcall PageSetupDlgA( LPPAGESETUPDLGA );
__declspec(dllimport) BOOL __stdcall PageSetupDlgW( LPPAGESETUPDLGW );




#line 1191 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"





















#line 1213 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"


#line 1216 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
#pragma endregion






#line 1224 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
#line 1225 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"


}
#line 1229 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


























#pragma warning(disable:4103)

#pragma pack(pop)


#line 33 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"


#line 36 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 37 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\poppack.h"
#line 1232 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
#line 1233 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
#line 1234 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"
#line 1235 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\commdlg.h"


#line 214 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 215 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 216 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"




















































#line 54 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"
#line 55 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"




#line 60 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"

#line 62 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"
#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"


extern "C" {
#line 67 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"

#pragma region Desktop Family














#line 84 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"



















#line 104 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"

__inline
PUWSTR
static
__declspec(deprecated)
ua_wcscpy(
      PUWSTR  Destination,
      PCUWSTR Source
    )
{
#pragma warning(push)
#pragma warning(disable:4995)
#pragma warning(disable:4996)



    return wcscpy(Destination, Source);
#pragma warning(pop)
}












































































































































































































































































































































































#line 488 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"






































































#line 559 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"




































#line 596 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"











































#line 640 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"



#line 644 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"














#line 659 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"










#line 670 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"

#line 672 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"



#line 676 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"

#line 678 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"
#pragma endregion


}
#line 683 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"

#line 685 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\shared\\stralign.h"








#line 218 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"












#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"
































#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"


extern "C" {
#line 38 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

#pragma region Desktop Family





































#line 78 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"


































































































































































































































































extern "C" const GUID  NETWORK_MANAGER_FIRST_IP_ADDRESS_ARRIVAL_GUID;
#line 343 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

extern "C" const GUID  NETWORK_MANAGER_LAST_IP_ADDRESS_REMOVAL_GUID;
#line 351 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"




extern "C" const GUID  DOMAIN_JOIN_GUID;
#line 362 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

extern "C" const GUID  DOMAIN_LEAVE_GUID;
#line 370 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"





extern "C" const GUID  FIREWALL_PORT_OPEN_GUID;
#line 382 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

extern "C" const GUID  FIREWALL_PORT_CLOSE_GUID;
#line 390 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"





extern "C" const GUID  MACHINE_POLICY_PRESENT_GUID;
#line 402 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

extern "C" const GUID  USER_POLICY_PRESENT_GUID;
#line 410 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"





extern "C" const GUID  RPC_INTERFACE_EVENT_GUID;
#line 422 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

extern "C" const GUID  NAMED_PIPE_EVENT_GUID;
#line 430 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"




extern "C" const GUID  CUSTOM_SYSTEM_STATE_CHANGE_EVENT_GUID;
#line 441 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"
  



typedef struct
{
    DWORD Data[2];
} SERVICE_TRIGGER_CUSTOM_STATE_ID;

typedef struct _SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM {
    union {
        SERVICE_TRIGGER_CUSTOM_STATE_ID CustomStateId;
        struct {
            DWORD DataOffset;
            BYTE Data[1];
        } s;
    } u;
} SERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM, *LPSERVICE_CUSTOM_SYSTEM_STATE_CHANGE_DATA_ITEM;
















typedef struct _SERVICE_DESCRIPTIONA {
    LPSTR       lpDescription;
} SERVICE_DESCRIPTIONA, *LPSERVICE_DESCRIPTIONA;



typedef struct _SERVICE_DESCRIPTIONW {
    LPWSTR      lpDescription;
} SERVICE_DESCRIPTIONW, *LPSERVICE_DESCRIPTIONW;




typedef SERVICE_DESCRIPTIONA SERVICE_DESCRIPTION;
typedef LPSERVICE_DESCRIPTIONA LPSERVICE_DESCRIPTION;
#line 491 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"




typedef enum _SC_ACTION_TYPE {
        SC_ACTION_NONE          = 0,
        SC_ACTION_RESTART       = 1,
        SC_ACTION_REBOOT        = 2,
        SC_ACTION_RUN_COMMAND   = 3
} SC_ACTION_TYPE;

typedef struct _SC_ACTION {
    SC_ACTION_TYPE  Type;
    DWORD           Delay;
} SC_ACTION, *LPSC_ACTION;

typedef struct _SERVICE_FAILURE_ACTIONSA {
    DWORD       dwResetPeriod;
    LPSTR       lpRebootMsg;
    LPSTR       lpCommand;



    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSA, *LPSERVICE_FAILURE_ACTIONSA;
typedef struct _SERVICE_FAILURE_ACTIONSW {
    DWORD       dwResetPeriod;
    LPWSTR      lpRebootMsg;
    LPWSTR      lpCommand;



    DWORD       cActions;



    SC_ACTION * lpsaActions;
} SERVICE_FAILURE_ACTIONSW, *LPSERVICE_FAILURE_ACTIONSW;




typedef SERVICE_FAILURE_ACTIONSA SERVICE_FAILURE_ACTIONS;
typedef LPSERVICE_FAILURE_ACTIONSA LPSERVICE_FAILURE_ACTIONS;
#line 540 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"




typedef struct _SERVICE_DELAYED_AUTO_START_INFO {
    BOOL       fDelayedAutostart;      
} SERVICE_DELAYED_AUTO_START_INFO, *LPSERVICE_DELAYED_AUTO_START_INFO;




typedef struct _SERVICE_FAILURE_ACTIONS_FLAG {
    BOOL       fFailureActionsOnNonCrashFailures;       
} SERVICE_FAILURE_ACTIONS_FLAG, *LPSERVICE_FAILURE_ACTIONS_FLAG;




typedef struct _SERVICE_SID_INFO {
    DWORD       dwServiceSidType;     
} SERVICE_SID_INFO, *LPSERVICE_SID_INFO;




typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOA {
    LPSTR       pmszRequiredPrivileges;             
} SERVICE_REQUIRED_PRIVILEGES_INFOA, *LPSERVICE_REQUIRED_PRIVILEGES_INFOA;



typedef struct _SERVICE_REQUIRED_PRIVILEGES_INFOW {
    LPWSTR      pmszRequiredPrivileges;             
} SERVICE_REQUIRED_PRIVILEGES_INFOW, *LPSERVICE_REQUIRED_PRIVILEGES_INFOW;




typedef SERVICE_REQUIRED_PRIVILEGES_INFOA SERVICE_REQUIRED_PRIVILEGES_INFO;
typedef LPSERVICE_REQUIRED_PRIVILEGES_INFOA LPSERVICE_REQUIRED_PRIVILEGES_INFO;
#line 581 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"




typedef struct _SERVICE_PRESHUTDOWN_INFO {
    DWORD       dwPreshutdownTimeout;   
} SERVICE_PRESHUTDOWN_INFO, *LPSERVICE_PRESHUTDOWN_INFO;




typedef struct _SERVICE_TRIGGER_SPECIFIC_DATA_ITEM
{
    DWORD   dwDataType; 



    DWORD   cbData;     



    PBYTE   pData;      
} SERVICE_TRIGGER_SPECIFIC_DATA_ITEM, *PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM;




typedef struct _SERVICE_TRIGGER
{
    DWORD                       dwTriggerType;              
    DWORD                       dwAction;                   
    GUID    *                   pTriggerSubtype;            
                                                            
                                                            



    DWORD                       cDataItems;                 



    PSERVICE_TRIGGER_SPECIFIC_DATA_ITEM  pDataItems;       
} SERVICE_TRIGGER, *PSERVICE_TRIGGER;




typedef struct _SERVICE_TRIGGER_INFO {



    DWORD                   cTriggers;  



    PSERVICE_TRIGGER        pTriggers;  
    PBYTE                   pReserved;  
} SERVICE_TRIGGER_INFO, *PSERVICE_TRIGGER_INFO;




typedef struct _SERVICE_PREFERRED_NODE_INFO {
    USHORT                  usPreferredNode;    
    BOOLEAN                 fDelete;            
} SERVICE_PREFERRED_NODE_INFO, *LPSERVICE_PREFERRED_NODE_INFO;




typedef struct _SERVICE_TIMECHANGE_INFO {
    LARGE_INTEGER   liNewTime;      
    LARGE_INTEGER   liOldTime;      
} SERVICE_TIMECHANGE_INFO, *PSERVICE_TIMECHANGE_INFO;





struct SC_HANDLE__{int unused;}; typedef struct SC_HANDLE__ *SC_HANDLE;
typedef SC_HANDLE   *LPSC_HANDLE;

struct SERVICE_STATUS_HANDLE__{int unused;}; typedef struct SERVICE_STATUS_HANDLE__ *SERVICE_STATUS_HANDLE;





typedef enum _SC_STATUS_TYPE {
    SC_STATUS_PROCESS_INFO      = 0
} SC_STATUS_TYPE;




typedef enum _SC_ENUM_TYPE {
    SC_ENUM_PROCESS_INFO        = 0
} SC_ENUM_TYPE;






typedef struct _SERVICE_STATUS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
} SERVICE_STATUS, *LPSERVICE_STATUS;

typedef struct _SERVICE_STATUS_PROCESS {
    DWORD   dwServiceType;
    DWORD   dwCurrentState;
    DWORD   dwControlsAccepted;
    DWORD   dwWin32ExitCode;
    DWORD   dwServiceSpecificExitCode;
    DWORD   dwCheckPoint;
    DWORD   dwWaitHint;
    DWORD   dwProcessId;
    DWORD   dwServiceFlags;
} SERVICE_STATUS_PROCESS, *LPSERVICE_STATUS_PROCESS;






typedef struct _ENUM_SERVICE_STATUSA {
    LPSTR             lpServiceName;
    LPSTR             lpDisplayName;
    SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSA, *LPENUM_SERVICE_STATUSA;
typedef struct _ENUM_SERVICE_STATUSW {
    LPWSTR            lpServiceName;
    LPWSTR            lpDisplayName;
    SERVICE_STATUS    ServiceStatus;
} ENUM_SERVICE_STATUSW, *LPENUM_SERVICE_STATUSW;




typedef ENUM_SERVICE_STATUSA ENUM_SERVICE_STATUS;
typedef LPENUM_SERVICE_STATUSA LPENUM_SERVICE_STATUS;
#line 729 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

typedef struct _ENUM_SERVICE_STATUS_PROCESSA {
    LPSTR                     lpServiceName;
    LPSTR                     lpDisplayName;
    SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSA, *LPENUM_SERVICE_STATUS_PROCESSA;
typedef struct _ENUM_SERVICE_STATUS_PROCESSW {
    LPWSTR                    lpServiceName;
    LPWSTR                    lpDisplayName;
    SERVICE_STATUS_PROCESS    ServiceStatusProcess;
} ENUM_SERVICE_STATUS_PROCESSW, *LPENUM_SERVICE_STATUS_PROCESSW;




typedef ENUM_SERVICE_STATUS_PROCESSA ENUM_SERVICE_STATUS_PROCESS;
typedef LPENUM_SERVICE_STATUS_PROCESSA LPENUM_SERVICE_STATUS_PROCESS;
#line 747 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"





typedef LPVOID  SC_LOCK;

typedef struct _QUERY_SERVICE_LOCK_STATUSA {
    DWORD   fIsLocked;
    LPSTR   lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSA, *LPQUERY_SERVICE_LOCK_STATUSA;
typedef struct _QUERY_SERVICE_LOCK_STATUSW {
    DWORD   fIsLocked;
    LPWSTR  lpLockOwner;
    DWORD   dwLockDuration;
} QUERY_SERVICE_LOCK_STATUSW, *LPQUERY_SERVICE_LOCK_STATUSW;




typedef QUERY_SERVICE_LOCK_STATUSA QUERY_SERVICE_LOCK_STATUS;
typedef LPQUERY_SERVICE_LOCK_STATUSA LPQUERY_SERVICE_LOCK_STATUS;
#line 771 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"







typedef struct _QUERY_SERVICE_CONFIGA {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPSTR   lpBinaryPathName;
    LPSTR   lpLoadOrderGroup;
    DWORD   dwTagId;
    LPSTR   lpDependencies;
    LPSTR   lpServiceStartName;
    LPSTR   lpDisplayName;
} QUERY_SERVICE_CONFIGA, *LPQUERY_SERVICE_CONFIGA;
typedef struct _QUERY_SERVICE_CONFIGW {
    DWORD   dwServiceType;
    DWORD   dwStartType;
    DWORD   dwErrorControl;
    LPWSTR  lpBinaryPathName;
    LPWSTR  lpLoadOrderGroup;
    DWORD   dwTagId;
    LPWSTR  lpDependencies;
    LPWSTR  lpServiceStartName;
    LPWSTR  lpDisplayName;
} QUERY_SERVICE_CONFIGW, *LPQUERY_SERVICE_CONFIGW;




typedef QUERY_SERVICE_CONFIGA QUERY_SERVICE_CONFIG;
typedef LPQUERY_SERVICE_CONFIGA LPQUERY_SERVICE_CONFIG;
#line 807 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"







typedef void __stdcall SERVICE_MAIN_FUNCTIONW (
    DWORD dwNumServicesArgs,
    LPWSTR *lpServiceArgVectors
    );

typedef void __stdcall SERVICE_MAIN_FUNCTIONA (
    DWORD dwNumServicesArgs,
    LPTSTR *lpServiceArgVectors
    );





#line 829 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONW)(
    DWORD   dwNumServicesArgs,
    LPWSTR  *lpServiceArgVectors
    );

typedef void (__stdcall *LPSERVICE_MAIN_FUNCTIONA)(
    DWORD   dwNumServicesArgs,
    LPSTR   *lpServiceArgVectors
    );





#line 845 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"






typedef struct _SERVICE_TABLE_ENTRYA {
    LPSTR                       lpServiceName;
    LPSERVICE_MAIN_FUNCTIONA    lpServiceProc;
}SERVICE_TABLE_ENTRYA, *LPSERVICE_TABLE_ENTRYA;
typedef struct _SERVICE_TABLE_ENTRYW {
    LPWSTR                      lpServiceName;
    LPSERVICE_MAIN_FUNCTIONW    lpServiceProc;
}SERVICE_TABLE_ENTRYW, *LPSERVICE_TABLE_ENTRYW;




typedef SERVICE_TABLE_ENTRYA SERVICE_TABLE_ENTRY;
typedef LPSERVICE_TABLE_ENTRYA LPSERVICE_TABLE_ENTRY;
#line 866 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"





typedef void __stdcall HANDLER_FUNCTION (
    DWORD    dwControl
    );

typedef DWORD __stdcall HANDLER_FUNCTION_EX (
    DWORD    dwControl,
    DWORD    dwEventType,
    LPVOID   lpEventData,
    LPVOID   lpContext
    );

typedef void (__stdcall *LPHANDLER_FUNCTION)(
    DWORD    dwControl
    );

typedef DWORD (__stdcall *LPHANDLER_FUNCTION_EX)(
    DWORD    dwControl,
    DWORD    dwEventType,
    LPVOID   lpEventData,
    LPVOID   lpContext
    );




typedef
void
( __stdcall * PFN_SC_NOTIFY_CALLBACK ) (
      PVOID pParameter
    );




typedef struct _SERVICE_NOTIFY_1 {
    DWORD                   dwVersion;
    PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
    PVOID                   pContext;
    DWORD                   dwNotificationStatus;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_NOTIFY_1, *PSERVICE_NOTIFY_1;

typedef struct _SERVICE_NOTIFY_2A {
    DWORD                   dwVersion;
    PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
    PVOID                   pContext;
    DWORD                   dwNotificationStatus;
    SERVICE_STATUS_PROCESS  ServiceStatus;
    DWORD                   dwNotificationTriggered;
    LPSTR                   pszServiceNames;
} SERVICE_NOTIFY_2A, *PSERVICE_NOTIFY_2A;
typedef struct _SERVICE_NOTIFY_2W {
    DWORD                   dwVersion;
    PFN_SC_NOTIFY_CALLBACK  pfnNotifyCallback;
    PVOID                   pContext;
    DWORD                   dwNotificationStatus;
    SERVICE_STATUS_PROCESS  ServiceStatus;
    DWORD                   dwNotificationTriggered;
    LPWSTR                  pszServiceNames;
} SERVICE_NOTIFY_2W, *PSERVICE_NOTIFY_2W;




typedef SERVICE_NOTIFY_2A SERVICE_NOTIFY_2;
typedef PSERVICE_NOTIFY_2A PSERVICE_NOTIFY_2;
#line 938 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

typedef SERVICE_NOTIFY_2A SERVICE_NOTIFYA, *PSERVICE_NOTIFYA;
typedef SERVICE_NOTIFY_2W SERVICE_NOTIFYW, *PSERVICE_NOTIFYW;




typedef SERVICE_NOTIFYA SERVICE_NOTIFY;
typedef PSERVICE_NOTIFYA PSERVICE_NOTIFY;
#line 948 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"




typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSA {
    DWORD                   dwReason;
    LPSTR                   pszComment;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSA, *PSERVICE_CONTROL_STATUS_REASON_PARAMSA;



typedef struct _SERVICE_CONTROL_STATUS_REASON_PARAMSW {
    DWORD                   dwReason;
    LPWSTR                  pszComment;
    SERVICE_STATUS_PROCESS  ServiceStatus;
} SERVICE_CONTROL_STATUS_REASON_PARAMSW, *PSERVICE_CONTROL_STATUS_REASON_PARAMSW;




typedef SERVICE_CONTROL_STATUS_REASON_PARAMSA SERVICE_CONTROL_STATUS_REASON_PARAMS;
typedef PSERVICE_CONTROL_STATUS_REASON_PARAMSA PSERVICE_CONTROL_STATUS_REASON_PARAMS;
#line 972 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"




typedef struct _SERVICE_START_REASON {
    DWORD                   dwReason;
} SERVICE_START_REASON, *PSERVICE_START_REASON;





__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigA(
             SC_HANDLE    hService,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCSTR     lpBinaryPathName,
         LPCSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCSTR     lpDependencies,
         LPCSTR     lpServiceStartName,
         LPCSTR     lpPassword,
         LPCSTR     lpDisplayName
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfigW(
             SC_HANDLE    hService,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCWSTR     lpBinaryPathName,
         LPCWSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCWSTR     lpDependencies,
         LPCWSTR     lpServiceStartName,
         LPCWSTR     lpPassword,
         LPCWSTR     lpDisplayName
    );




#line 1021 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2A(
             SC_HANDLE    hService,
             DWORD        dwInfoLevel,
         LPVOID       lpInfo
    );
__declspec(dllimport)
BOOL
__stdcall
ChangeServiceConfig2W(
             SC_HANDLE    hService,
             DWORD        dwInfoLevel,
         LPVOID       lpInfo
    );




#line 1043 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
CloseServiceHandle(
             SC_HANDLE   hSCObject
    );

__declspec(dllimport)
BOOL
__stdcall
ControlService(
             SC_HANDLE           hService,
             DWORD               dwControl,
            LPSERVICE_STATUS    lpServiceStatus
    );

 
__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceA(
             SC_HANDLE    hSCManager,
             LPCSTR     lpServiceName,
         LPCSTR     lpDisplayName,
             DWORD        dwDesiredAccess,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCSTR     lpBinaryPathName,
         LPCSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCSTR     lpDependencies,
         LPCSTR     lpServiceStartName,
         LPCSTR     lpPassword
    );
 
__declspec(dllimport)
SC_HANDLE
__stdcall
CreateServiceW(
             SC_HANDLE    hSCManager,
             LPCWSTR     lpServiceName,
         LPCWSTR     lpDisplayName,
             DWORD        dwDesiredAccess,
             DWORD        dwServiceType,
             DWORD        dwStartType,
             DWORD        dwErrorControl,
         LPCWSTR     lpBinaryPathName,
         LPCWSTR     lpLoadOrderGroup,
        LPDWORD      lpdwTagId,
         LPCWSTR     lpDependencies,
         LPCWSTR     lpServiceStartName,
         LPCWSTR     lpPassword
    );




#line 1103 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
DeleteService(
             SC_HANDLE   hService
    );

 
__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesA(
                 SC_HANDLE               hService,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSA  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned
    );
 
__declspec(dllimport)
BOOL
__stdcall
EnumDependentServicesW(
                 SC_HANDLE               hService,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSW  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned
    );




#line 1142 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusA(
                 SC_HANDLE               hSCManager,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSA  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle
    );
 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusW(
                 SC_HANDLE               hSCManager,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPENUM_SERVICE_STATUSW  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle
    );




#line 1178 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExA(
                 SC_HANDLE               hSCManager,
                 SC_ENUM_TYPE            InfoLevel,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPBYTE                  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle,
             LPCSTR                pszGroupName
    );
 
__declspec(dllimport)
BOOL
__stdcall
EnumServicesStatusExW(
                 SC_HANDLE               hSCManager,
                 SC_ENUM_TYPE            InfoLevel,
                 DWORD                   dwServiceType,
                 DWORD                   dwServiceState,
     
                    LPBYTE                  lpServices,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded,
                LPDWORD                 lpServicesReturned,
          LPDWORD                 lpResumeHandle,
             LPCWSTR                pszGroupName
    );




#line 1218 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameA(
                 SC_HANDLE               hSCManager,
                 LPCSTR                lpDisplayName,
     
                    LPSTR                 lpServiceName,
              LPDWORD                 lpcchBuffer
    );
 
__declspec(dllimport)
BOOL
__stdcall
GetServiceKeyNameW(
                 SC_HANDLE               hSCManager,
                 LPCWSTR                lpDisplayName,
     
                    LPWSTR                 lpServiceName,
              LPDWORD                 lpcchBuffer
    );




#line 1246 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameA(
                 SC_HANDLE               hSCManager,
                 LPCSTR                lpServiceName,
     
                    LPSTR                 lpDisplayName,
              LPDWORD                 lpcchBuffer
    );
 
__declspec(dllimport)
BOOL
__stdcall
GetServiceDisplayNameW(
                 SC_HANDLE               hSCManager,
                 LPCWSTR                lpServiceName,
     
                    LPWSTR                 lpDisplayName,
              LPDWORD                 lpcchBuffer
    );




#line 1274 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

__declspec(dllimport)
SC_LOCK
__stdcall
LockServiceDatabase(
                 SC_HANDLE               hSCManager
    );

__declspec(dllimport)
BOOL
__stdcall
NotifyBootConfigStatus(
                 BOOL                    BootAcceptable
    );

 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerA(
             LPCSTR                lpMachineName,
             LPCSTR                lpDatabaseName,
                 DWORD                   dwDesiredAccess
    );
 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenSCManagerW(
             LPCWSTR                lpMachineName,
             LPCWSTR                lpDatabaseName,
                 DWORD                   dwDesiredAccess
    );




#line 1312 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceA(
                 SC_HANDLE               hSCManager,
                 LPCSTR                lpServiceName,
                 DWORD                   dwDesiredAccess
    );
 
__declspec(dllimport)
SC_HANDLE
__stdcall
OpenServiceW(
                 SC_HANDLE               hSCManager,
                 LPCWSTR                lpServiceName,
                 DWORD                   dwDesiredAccess
    );




#line 1336 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigA(
                 SC_HANDLE               hService,
     
                    LPQUERY_SERVICE_CONFIGA lpServiceConfig,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfigW(
                 SC_HANDLE               hService,
     
                    LPQUERY_SERVICE_CONFIGW lpServiceConfig,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );




#line 1364 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"


#line 1367 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

#line 1369 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

#line 1372 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2A(
                 SC_HANDLE               hService,
                 DWORD                   dwInfoLevel,
     
                    LPBYTE                  lpBuffer,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );

#line 1386 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

#line 1388 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

#line 1391 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceConfig2W(
                 SC_HANDLE               hService,
                 DWORD                   dwInfoLevel,
     
                    LPBYTE                  lpBuffer,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );




#line 1408 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusA(
                 SC_HANDLE                       hSCManager,
     
                    LPQUERY_SERVICE_LOCK_STATUSA    lpLockStatus,
                 DWORD                           cbBufSize,
                LPDWORD                         pcbBytesNeeded
    );
 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceLockStatusW(
                 SC_HANDLE                       hSCManager,
     
                    LPQUERY_SERVICE_LOCK_STATUSW    lpLockStatus,
                 DWORD                           cbBufSize,
                LPDWORD                         pcbBytesNeeded
    );




#line 1436 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceObjectSecurity(
                 SC_HANDLE               hService,
                 SECURITY_INFORMATION    dwSecurityInformation,
     
                    PSECURITY_DESCRIPTOR    lpSecurityDescriptor,
                 DWORD                   cbBufSize,
                LPDWORD                 pcbBytesNeeded
    );

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatus(
                 SC_HANDLE           hService,
                LPSERVICE_STATUS    lpServiceStatus
    );

 
__declspec(dllimport)
BOOL
__stdcall
QueryServiceStatusEx(
                 SC_HANDLE           hService,
                 SC_STATUS_TYPE      InfoLevel,
     
                    LPBYTE              lpBuffer,
                 DWORD               cbBufSize,
                LPDWORD             pcbBytesNeeded
    );

 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerA(
         LPCSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION          lpHandlerProc
    );
 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerW(
         LPCWSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION          lpHandlerProc
    );




#line 1495 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExA(
         LPCSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION_EX       lpHandlerProc,
      LPVOID                     lpContext
    );
 
__declspec(dllimport)
SERVICE_STATUS_HANDLE
__stdcall
RegisterServiceCtrlHandlerExW(
         LPCWSTR                    lpServiceName,
         
            LPHANDLER_FUNCTION_EX       lpHandlerProc,
      LPVOID                     lpContext
    );




#line 1521 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
SetServiceObjectSecurity(
             SC_HANDLE               hService,
             SECURITY_INFORMATION    dwSecurityInformation,
             PSECURITY_DESCRIPTOR    lpSecurityDescriptor
    );

__declspec(dllimport)
BOOL
__stdcall
SetServiceStatus(
             SERVICE_STATUS_HANDLE   hServiceStatus,
             LPSERVICE_STATUS        lpServiceStatus
    );

__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherA(
      const  SERVICE_TABLE_ENTRYA    *lpServiceStartTable
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceCtrlDispatcherW(
      const  SERVICE_TABLE_ENTRYW    *lpServiceStartTable
    );




#line 1556 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"


__declspec(dllimport)
BOOL
__stdcall
StartServiceA(
                 SC_HANDLE            hService,
                 DWORD                dwNumServiceArgs,
     
                    LPCSTR             *lpServiceArgVectors
    );
__declspec(dllimport)
BOOL
__stdcall
StartServiceW(
                 SC_HANDLE            hService,
                 DWORD                dwNumServiceArgs,
     
                    LPCWSTR             *lpServiceArgVectors
    );




#line 1581 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
UnlockServiceDatabase(
                 SC_LOCK             ScLock
    );



__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeA (
             SC_HANDLE               hService,
             DWORD                   dwNotifyMask,
             PSERVICE_NOTIFYA        pNotifyBuffer
    );
__declspec(dllimport)
DWORD
__stdcall
NotifyServiceStatusChangeW (
             SC_HANDLE               hService,
             DWORD                   dwNotifyMask,
             PSERVICE_NOTIFYW        pNotifyBuffer
    );




#line 1612 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
ControlServiceExA(
             SC_HANDLE               hService,
             DWORD                   dwControl,
             DWORD                   dwInfoLevel,
          PVOID                   pControlParams
    );
__declspec(dllimport)
BOOL
__stdcall
ControlServiceExW(
             SC_HANDLE               hService,
             DWORD                   dwControl,
             DWORD                   dwInfoLevel,
          PVOID                   pControlParams
    );




#line 1636 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

__declspec(dllimport)
BOOL
__stdcall
QueryServiceDynamicInformation (
             SERVICE_STATUS_HANDLE   hServiceStatus,
             DWORD                   dwInfoLevel,
        PVOID           *       ppDynamicInfo
    );

#line 1647 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

#line 1649 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"
#pragma endregion


}
#line 1654 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"

#line 1656 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\winsvc.h"


#line 231 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 232 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mcx.h"












#pragma once
#line 15 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mcx.h"

typedef struct _MODEMDEVCAPS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwModemProviderVersion;
    DWORD   dwModemManufacturerOffset;
    DWORD   dwModemManufacturerSize;
    DWORD   dwModemModelOffset;
    DWORD   dwModemModelSize;
    DWORD   dwModemVersionOffset;
    DWORD   dwModemVersionSize;

    
    DWORD   dwDialOptions;          
    DWORD   dwCallSetupFailTimer;   
    DWORD   dwInactivityTimeout;    
    DWORD   dwSpeakerVolume;        
    DWORD   dwSpeakerMode;          
    DWORD   dwModemOptions;         
    DWORD   dwMaxDTERate;           
    DWORD   dwMaxDCERate;           

    
    BYTE    abVariablePortion [1];
} MODEMDEVCAPS, *PMODEMDEVCAPS, *LPMODEMDEVCAPS;

typedef struct _MODEMSETTINGS {
    DWORD   dwActualSize;
    DWORD   dwRequiredSize;
    DWORD   dwDevSpecificOffset;
    DWORD   dwDevSpecificSize;

    
    DWORD   dwCallSetupFailTimer;       
    DWORD   dwInactivityTimeout;        
    DWORD   dwSpeakerVolume;            
    DWORD   dwSpeakerMode;              
    DWORD   dwPreferredModemOptions;    

    
    DWORD   dwNegotiatedModemOptions;   
    DWORD   dwNegotiatedDCERate;        

    
    BYTE    abVariablePortion [1];
} MODEMSETTINGS, *PMODEMSETTINGS, *LPMODEMSETTINGS;

















































































































































































































































































































































































































































































































































































































































































#line 723 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\mcx.h"
#line 236 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 237 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"













extern "C" {
#line 16 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"






#pragma region Application Family



struct HIMC__{int unused;}; typedef struct HIMC__ *HIMC;
struct HIMCC__{int unused;}; typedef struct HIMCC__ *HIMCC;



#line 32 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

#line 34 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"
#pragma endregion

#pragma region Desktop Family


typedef HKL   *LPHKL;
typedef UINT  *LPUINT;

#line 43 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"
#pragma endregion

#pragma region Application Family


typedef struct tagCOMPOSITIONFORM {
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} COMPOSITIONFORM, *PCOMPOSITIONFORM,  *NPCOMPOSITIONFORM,  *LPCOMPOSITIONFORM;


typedef struct tagCANDIDATEFORM {
    DWORD dwIndex;
    DWORD dwStyle;
    POINT ptCurrentPos;
    RECT  rcArea;
} CANDIDATEFORM, *PCANDIDATEFORM,  *NPCANDIDATEFORM,  *LPCANDIDATEFORM;

#line 63 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagCANDIDATELIST {
    DWORD dwSize;
    DWORD dwStyle;
    DWORD dwCount;
    DWORD dwSelection;
    DWORD dwPageStart;
    DWORD dwPageSize;
    DWORD dwOffset[1];
} CANDIDATELIST, *PCANDIDATELIST,  *NPCANDIDATELIST,  *LPCANDIDATELIST;

#line 81 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"
#pragma endregion


#pragma region Application Family


typedef struct tagREGISTERWORDA {
    LPSTR   lpReading;
    LPSTR   lpWord;
} REGISTERWORDA, *PREGISTERWORDA,  *NPREGISTERWORDA,  *LPREGISTERWORDA;
typedef struct tagREGISTERWORDW {
    LPWSTR  lpReading;
    LPWSTR  lpWord;
} REGISTERWORDW, *PREGISTERWORDW,  *NPREGISTERWORDW,  *LPREGISTERWORDW;






typedef REGISTERWORDA REGISTERWORD;
typedef PREGISTERWORDA PREGISTERWORD;
typedef NPREGISTERWORDA NPREGISTERWORD;
typedef LPREGISTERWORDA LPREGISTERWORD;
#line 106 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

#line 108 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"
#pragma endregion



#pragma region Desktop Family


typedef struct tagRECONVERTSTRING {
    DWORD dwSize;
    DWORD dwVersion;
    DWORD dwStrLen;
    DWORD dwStrOffset;
    DWORD dwCompStrLen;
    DWORD dwCompStrOffset;
    DWORD dwTargetStrLen;
    DWORD dwTargetStrOffset;
} RECONVERTSTRING, *PRECONVERTSTRING,  *NPRECONVERTSTRING,  *LPRECONVERTSTRING;

#line 127 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"
#pragma endregion

#line 130 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"



#pragma region Application Family


typedef struct tagSTYLEBUFA {
    DWORD       dwStyle;
    CHAR        szDescription[32];
} STYLEBUFA, *PSTYLEBUFA,  *NPSTYLEBUFA,  *LPSTYLEBUFA;
typedef struct tagSTYLEBUFW {
    DWORD       dwStyle;
    WCHAR       szDescription[32];
} STYLEBUFW, *PSTYLEBUFW,  *NPSTYLEBUFW,  *LPSTYLEBUFW;






typedef STYLEBUFA STYLEBUF;
typedef PSTYLEBUFA PSTYLEBUF;
typedef NPSTYLEBUFA NPSTYLEBUF;
typedef LPSTYLEBUFA LPSTYLEBUF;
#line 155 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

#line 157 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"
#pragma endregion

#pragma region Desktop Family



#line 164 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"
#pragma endregion





#pragma region Desktop Family


typedef struct tagIMEMENUITEMINFOA {
    UINT        cbSize;
    UINT        fType;
    UINT        fState;
    UINT        wID;
    HBITMAP     hbmpChecked;
    HBITMAP     hbmpUnchecked;
    DWORD       dwItemData;
    CHAR        szString[80];
    HBITMAP     hbmpItem;
} IMEMENUITEMINFOA, *PIMEMENUITEMINFOA,  *NPIMEMENUITEMINFOA,  *LPIMEMENUITEMINFOA;
typedef struct tagIMEMENUITEMINFOW {
    UINT        cbSize;
    UINT        fType;
    UINT        fState;
    UINT        wID;
    HBITMAP     hbmpChecked;
    HBITMAP     hbmpUnchecked;
    DWORD       dwItemData;
    WCHAR       szString[80];
    HBITMAP     hbmpItem;
} IMEMENUITEMINFOW, *PIMEMENUITEMINFOW,  *NPIMEMENUITEMINFOW,  *LPIMEMENUITEMINFOW;






typedef IMEMENUITEMINFOA IMEMENUITEMINFO;
typedef PIMEMENUITEMINFOA PIMEMENUITEMINFO;
typedef NPIMEMENUITEMINFOA NPIMEMENUITEMINFO;
typedef LPIMEMENUITEMINFOA LPIMEMENUITEMINFO;
#line 206 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

typedef struct tagIMECHARPOSITION {
    DWORD       dwSize;
    DWORD       dwCharPos;
    POINT       pt;
    UINT        cLineHeight;
    RECT        rcDocument;
} IMECHARPOSITION, *PIMECHARPOSITION,  *NPIMECHARPOSITION,  *LPIMECHARPOSITION;

typedef BOOL    (__stdcall* IMCENUMPROC)(HIMC, LPARAM);

#line 218 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"
#pragma endregion

#line 221 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"





#pragma region Desktop Family


HKL  __stdcall ImmInstallIMEA(  LPCSTR lpszIMEFileName,   LPCSTR lpszLayoutText);
HKL  __stdcall ImmInstallIMEW(  LPCWSTR lpszIMEFileName,   LPCWSTR lpszLayoutText);




#line 236 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

HWND __stdcall ImmGetDefaultIMEWnd( HWND);

UINT __stdcall ImmGetDescriptionA( HKL,   LPSTR lpszDescription,  UINT uBufLen);
UINT __stdcall ImmGetDescriptionW( HKL,   LPWSTR lpszDescription,  UINT uBufLen);




#line 246 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

UINT __stdcall ImmGetIMEFileNameA( HKL,   LPSTR lpszFileName,  UINT uBufLen);
UINT __stdcall ImmGetIMEFileNameW( HKL,   LPWSTR lpszFileName,  UINT uBufLen);




#line 254 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

DWORD __stdcall ImmGetProperty( HKL,  DWORD);

BOOL __stdcall ImmIsIME( HKL);

BOOL __stdcall ImmSimulateHotKey( HWND,  DWORD);

HIMC __stdcall ImmCreateContext(void);
BOOL __stdcall ImmDestroyContext( HIMC);
HIMC __stdcall ImmGetContext( HWND);
BOOL __stdcall ImmReleaseContext( HWND,  HIMC);
HIMC __stdcall ImmAssociateContext( HWND,  HIMC);

BOOL __stdcall ImmAssociateContextEx( HWND,  HIMC,  DWORD);
#line 269 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

LONG  __stdcall ImmGetCompositionStringA( HIMC,  DWORD,   LPVOID lpBuf,  DWORD dwBufLen);
LONG  __stdcall ImmGetCompositionStringW( HIMC,  DWORD,   LPVOID lpBuf,  DWORD dwBufLen);




#line 277 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

BOOL  __stdcall ImmSetCompositionStringA( HIMC,  DWORD dwIndex,   LPVOID lpComp,  DWORD dwCompLen,   LPVOID lpRead,  DWORD dwReadLen);
BOOL  __stdcall ImmSetCompositionStringW( HIMC,  DWORD dwIndex,   LPVOID lpComp,  DWORD dwCompLen,   LPVOID lpRead,  DWORD dwReadLen);




#line 285 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

DWORD __stdcall ImmGetCandidateListCountA( HIMC,   LPDWORD lpdwListCount);
DWORD __stdcall ImmGetCandidateListCountW( HIMC,   LPDWORD lpdwListCount);




#line 293 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

DWORD __stdcall ImmGetCandidateListA( HIMC,  DWORD deIndex,   LPCANDIDATELIST lpCandList,  DWORD dwBufLen);
DWORD __stdcall ImmGetCandidateListW( HIMC,  DWORD deIndex,   LPCANDIDATELIST lpCandList,  DWORD dwBufLen);




#line 301 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

DWORD __stdcall ImmGetGuideLineA(  HIMC,   DWORD dwIndex,   LPSTR lpBuf,   DWORD dwBufLen);
DWORD __stdcall ImmGetGuideLineW(  HIMC,   DWORD dwIndex,   LPWSTR lpBuf,   DWORD dwBufLen);




#line 309 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

BOOL __stdcall ImmGetConversionStatus( HIMC,   LPDWORD lpfdwConversion,   LPDWORD lpfdwSentence);
BOOL __stdcall ImmSetConversionStatus( HIMC,  DWORD,  DWORD);
BOOL __stdcall ImmGetOpenStatus( HIMC);
BOOL __stdcall ImmSetOpenStatus( HIMC,  BOOL);


BOOL __stdcall ImmGetCompositionFontA( HIMC,   LPLOGFONTA lplf);
BOOL __stdcall ImmGetCompositionFontW( HIMC,   LPLOGFONTW lplf);




#line 323 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

BOOL __stdcall ImmSetCompositionFontA( HIMC,   LPLOGFONTA lplf);
BOOL __stdcall ImmSetCompositionFontW( HIMC,   LPLOGFONTW lplf);




#line 331 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"
#line 332 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

BOOL    __stdcall ImmConfigureIMEA( HKL,  HWND,  DWORD,  LPVOID);
BOOL    __stdcall ImmConfigureIMEW( HKL,  HWND,  DWORD,  LPVOID);




#line 340 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

LRESULT __stdcall ImmEscapeA( HKL,  HIMC,  UINT,  LPVOID);
LRESULT __stdcall ImmEscapeW( HKL,  HIMC,  UINT,  LPVOID);




#line 348 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

DWORD   __stdcall ImmGetConversionListA( HKL,  HIMC,   LPCSTR lpSrc,   LPCANDIDATELIST lpDst,  DWORD dwBufLen,  UINT uFlag);
DWORD   __stdcall ImmGetConversionListW( HKL,  HIMC,   LPCWSTR lpSrc,   LPCANDIDATELIST lpDst,  DWORD dwBufLen,  UINT uFlag);




#line 356 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

BOOL    __stdcall ImmNotifyIME( HIMC,  DWORD dwAction,  DWORD dwIndex,  DWORD dwValue);

BOOL __stdcall ImmGetStatusWindowPos( HIMC,   LPPOINT lpptPos);
BOOL __stdcall ImmSetStatusWindowPos( HIMC,   LPPOINT lpptPos);
BOOL __stdcall ImmGetCompositionWindow( HIMC,   LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmSetCompositionWindow( HIMC,   LPCOMPOSITIONFORM lpCompForm);
BOOL __stdcall ImmGetCandidateWindow( HIMC,  DWORD,   LPCANDIDATEFORM lpCandidate);
BOOL __stdcall ImmSetCandidateWindow( HIMC,   LPCANDIDATEFORM lpCandidate);

BOOL __stdcall ImmIsUIMessageA( HWND,  UINT,  WPARAM,  LPARAM);
BOOL __stdcall ImmIsUIMessageW( HWND,  UINT,  WPARAM,  LPARAM);




#line 373 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"


UINT __stdcall ImmGetVirtualKey( HWND);

typedef int (__stdcall *REGISTERWORDENUMPROCA)(  LPCSTR lpszReading, DWORD,   LPCSTR lpszString, LPVOID);
typedef int (__stdcall *REGISTERWORDENUMPROCW)(  LPCWSTR lpszReading, DWORD,   LPCWSTR lpszString, LPVOID);




#line 384 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

BOOL __stdcall ImmRegisterWordA( HKL,   LPCSTR lpszReading,  DWORD,   LPCSTR lpszRegister);
BOOL __stdcall ImmRegisterWordW( HKL,   LPCWSTR lpszReading,  DWORD,   LPCWSTR lpszRegister);




#line 392 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

BOOL __stdcall ImmUnregisterWordA( HKL,   LPCSTR lpszReading,  DWORD,   LPCSTR lpszUnregister);
BOOL __stdcall ImmUnregisterWordW( HKL,   LPCWSTR lpszReading,  DWORD,   LPCWSTR lpszUnregister);




#line 400 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

UINT __stdcall ImmGetRegisterWordStyleA( HKL,  UINT nItem,   LPSTYLEBUFA lpStyleBuf);
UINT __stdcall ImmGetRegisterWordStyleW( HKL,  UINT nItem,   LPSTYLEBUFW lpStyleBuf);




#line 408 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

UINT __stdcall ImmEnumRegisterWordA( HKL,  REGISTERWORDENUMPROCA,   LPCSTR lpszReading,  DWORD,   LPCSTR lpszRegister,  LPVOID);
UINT __stdcall ImmEnumRegisterWordW( HKL,  REGISTERWORDENUMPROCW,   LPCWSTR lpszReading,  DWORD,   LPCWSTR lpszRegister,  LPVOID);




#line 416 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"


BOOL __stdcall ImmDisableIME( DWORD);
BOOL __stdcall ImmEnumInputContext(DWORD idThread, IMCENUMPROC lpfn, LPARAM lParam);
DWORD __stdcall ImmGetImeMenuItemsA( HIMC,  DWORD,  DWORD,   LPIMEMENUITEMINFOA lpImeParentMenu,   LPIMEMENUITEMINFOA lpImeMenu,  DWORD dwSize);
DWORD __stdcall ImmGetImeMenuItemsW( HIMC,  DWORD,  DWORD,   LPIMEMENUITEMINFOW lpImeParentMenu,   LPIMEMENUITEMINFOW lpImeMenu,  DWORD dwSize);




#line 427 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

BOOL __stdcall ImmDisableTextFrameService(DWORD idThread);
#line 430 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"


BOOL __stdcall ImmDisableLegacyIME();
#line 434 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

#line 436 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"
#pragma endregion









































































































































































































#line 1 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ime_cmodes.h"



#pragma once

















#line 23 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\ime_cmodes.h"

#line 639 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"






















































#line 694 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"






































































#line 765 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"








#line 774 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"


}
#line 778 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"

#line 780 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\imm.h"


#line 240 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 241 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 242 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 243 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"




#pragma warning(pop)





#line 254 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 255 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#line 256 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#line 258 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#line 260 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"
#pragma endregion

#line 263 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#line 265 "C:\\Program Files (x86)\\Windows Kits\\8.0\\include\\um\\windows.h"

#line 2 "test.cpp"

int main()
{
}
