CORE
main.c
--no-standard-checks --apply-loop-contracts
^EXIT=10$
^SIGNAL=0$
^\[main\.\d+\] .* Check loop invariant before entry: SUCCESS$
^\[main\.\d+\] .* Check that loop invariant is preserved: SUCCESS$
^\[main.assigns.\d+\] .* Check that data\[(\(signed long (long )?int\))?4\]\[(\(signed long (long )?int\))?5\]\[(\(signed long (long )?int\))?6\] is assignable: SUCCESS$
^\[main\.assertion\.\d+\] .* assertion data\[4\]\[5\]\[6\] == 0: FAILURE$
^\[main\.assertion\.\d+\] .* assertion data\[1\]\[2\]\[3\] == 0: SUCCESS$
^VERIFICATION FAILED$
--
--
Test case related to issue #6020: it checks that multi dimensional arrays
are correctly havoced when enforcing invariant contracts.

The `data[4][5][6] == 0` assertion is expected to fail since `data[4][5][6]`
is havoced and the invariant does not reestablish its value.
However, the `data[1][2][3] == 0` assertion is expected to pass -- we should
not havoc the entire `data` array, if only a constant index if being modified.
