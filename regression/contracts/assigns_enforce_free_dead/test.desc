CORE
main.c
--enforce-contract foo _ --malloc-may-fail --malloc-fail-null --pointer-primitive-check
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line 4 Check that \*x is valid: SUCCESS$
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line 4 Check that \*p is valid when .*: SUCCESS$
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line 4 Check that \*\(\*p\) is valid when .*: SUCCESS$
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line 7 Check that \*\(\*p\) is assignable: SUCCESS$
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line 24 Check that \*\(\*p\) is assignable: FAILURE$
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line \d+ Check that \*p is assignable: SUCCESS$
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line \d+ Check that \*q is assignable: SUCCESS$
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line \d+ Check that \*w is assignable: SUCCESS$
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line \d+ Check that \*x is assignable: SUCCESS$
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line \d+ Check that __CPROVER_POINTER_OBJECT\(\(void \*\)z\) is assignable: SUCCESS$
^EXIT=10$
^SIGNAL=0$
^VERIFICATION FAILED$
--
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line \d+ Check that \*p is assignable: FAILURE$
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line \d+ Check that \*q is assignable: FAILURE$
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line \d+ Check that \*w is assignable: FAILURE$
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line \d+ Check that \*x is assignable: FAILURE$
^\[__CPROVER_contracts_original_foo.assigns.\d+\] line \d+ Check that __CPROVER_POINTER_OBJECT\(\(void \*\)z\) is assignable: FAILURE$
--
Checks that invalidated CARs are correctly tracked on `free` and `DEAD`.

Since several variables are assigned multiple times,
we rule out all failures using the negative regex matches above.

We also check (using positive regex matches above) that
`**p` should be assignable in one case and should not be assignable in the other.
