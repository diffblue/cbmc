CORE
main.c
--no-standard-checks --apply-loop-contracts
^EXIT=10$
^SIGNAL=0$
^\[main\.\d+\] .* Check loop invariant before entry: SUCCESS$
^\[main\.\d+\] .* Check that loop invariant is preserved: SUCCESS$
^\[main.assigns.\d+\] .* Check that i is assignable: SUCCESS$
^\[main.assigns.\d+\] .* Check that data\[(\(signed long (long )?int\))?4\]\[(\(signed (long (long )?)?int\))?i\]\[(\(signed long (long )?int\))?6\] is assignable: SUCCESS$
^\[main\.assertion\.\d+\] .* assertion data\[1\]\[2\]\[3\] == 0: FAILURE$
^\[main\.assertion\.\d+\] .* assertion data\[4\]\[5\]\[6\] == 0: FAILURE$
^VERIFICATION FAILED$
--
--
Test case related to issue #6020: it checks that multi dimensional arrays
are correctly havoced when enforcing invariant contracts.

Here, both assertions are expected to fail -- the entire `data` array should
be havoced since we are assigning to a non-constant index.
We _could_ do a more precise analysis in future where we only havoc
`data[4][5][6]` but not `data[1][2][3]` since the latter clearly cannot be
modified in the given loop.
