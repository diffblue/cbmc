CORE
main.c
--no-standard-checks --apply-loop-contracts
^EXIT=10$
^SIGNAL=0$
^\[main\.\d+\] .* Check loop invariant before entry: SUCCESS$
^\[main\.\d+\] .* Check that loop invariant is preserved: SUCCESS$
^\[main.assigns.\d+\] .* Check that i is assignable: SUCCESS$
^\[main.assigns.\d+\] .* Check that data\[(\(signed (long (long )?)?int\))?i\] is assignable: SUCCESS$
^\[main\.assertion\.\d+\] .* assertion data\[5\] == 0: FAILURE$
^\[main\.assertion\.\d+\] .* assertion data\[5\] == 1: FAILURE$
^VERIFICATION FAILED$
--
--
Test case related to issue #6020: it checks that dynamically allocated arrays
are correctly havoced when enforcing loop invariant contracts.
The `data[5] == 0` assertion is expected to fail since `data` is havoced.
The `data[5] == 1` assertion is also expected to fail since the invariant does
not reestablish the value for `data[5]`.
