CORE
main.c
--apply-loop-contracts _ --unsigned-overflow-check
^\[main.1\] .* Check loop invariant before entry: SUCCESS$
^\[main.2\] .* Check that loop invariant is preserved: SUCCESS$
^\[main.3\] .* Check decreases clause (max - i) on loop iteration: SUCCESS$
^\[main.overflow.1\] .* arithmetic overflow on unsigned - in max - i: SUCCESS$
^\[main.overflow.3\] .* arithmetic overflow on unsigned - in max - i: SUCCESS$
^\[main.overflow.2\] .* arithmetic overflow on unsigned \+ in i \+ 1u: SUCCESS$
^VERIFICATION SUCCESSFUL$
^EXIT=0$
^SIGNAL=0$
--
--
This test checks that the decreases clause is evaluated only within the loop iteration,
not outside of it (before the loop guard).
The `main.overflow.1` check would fail if the decreases clause `(max - i)` is evaluated
before the loop guard is satisfied. This would occur when `start > max` and therefore
`i > max` after assuming the invariant.
