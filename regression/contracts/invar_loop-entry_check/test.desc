CORE
main.c
--no-standard-checks --apply-loop-contracts _ --pointer-primitive-check
^EXIT=0$
^SIGNAL=0$
^\[main\.\d+\] .* Check loop invariant before entry: SUCCESS$
^\[main\.\d+\] .* Check that loop invariant is preserved: SUCCESS$
^\[main\.assertion\.\d+\] .* assertion \*x1 == z1: SUCCESS$
^\[main\.\d+\] .* Check loop invariant before entry: SUCCESS$
^\[main\.\d+\] .* Check that loop invariant is preserved: SUCCESS$
^\[main\.assertion\.\d+\] .* assertion x2 == z2: SUCCESS$
^\[main\.\d+\] .* Check loop invariant before entry: SUCCESS$
^\[main\.\d+\] .* Check that loop invariant is preserved: SUCCESS$
^\[main.assigns.\d+\] .* Check that y1 is assignable: SUCCESS$
^\[main.assigns.\d+\] line 18 Check that \*x1 is assignable: SUCCESS$
^\[main.assigns.\d+\] line 19 Check that \*x1 is assignable: SUCCESS$
^\[main.assigns.\d+\] .* Check that y2 is assignable: SUCCESS$
^\[main.assigns.\d+\] line 30 Check that x2 is assignable: SUCCESS$
^\[main.assigns.\d+\] line 31 Check that x2 is assignable: SUCCESS$
^\[main.assigns.\d+\] .* Check that y3 is assignable: SUCCESS$
^\[main.assigns.\d+\] .* Check that s0\.n is assignable: SUCCESS$
^\[main.assigns.\d+\] .* Check that s2->n is assignable: SUCCESS$
^\[main\.assertion\.\d+\] .* assertion \*\(s1\.n\) == \*\(s2->n\): SUCCESS$
^VERIFICATION SUCCESSFUL$
--
--
This test checks that __CPROVER_loop_entry is supported.
