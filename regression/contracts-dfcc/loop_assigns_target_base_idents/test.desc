CORE dfcc-only
main.c
--no-standard-checks --malloc-may-fail --malloc-fail-null --dfcc main --enforce-contract foo --apply-loop-contracts
^\[foo.assigns.\d+\] line .* Check that i is assignable: SUCCESS$
^\[foo.loop_assigns.\d+\] line .* Check assigns clause inclusion for loop foo.0: SUCCESS$
^\[foo.loop_invariant_base.\d+\] line .* Check invariant before entry for loop foo.0: SUCCESS$
^\[foo.loop_invariant_step.\d+\] line .* Check invariant after step for loop foo.0: SUCCESS$
^\[foo.loop_step_unwinding.\d+\] line .* Check step was unwound for loop foo.0: SUCCESS$
^\[foo.assigns.\d+\] line .* Check that buf1\[(\(.*\))?i\] is assignable: SUCCESS$
^\[foo.assigns.\d+\] line .* Check that buf1\[(\(.*\))?\(?32 - 1\)?\] is assignable: SUCCESS$
^\[foo.assigns.\d+\] line .* Check that buf2\[(\(.*\))?0\] is assignable: FAILURE$
^\[foo.assigns.\d+\] line .* Check that buf2\[(\(.*\))?10\] is assignable: SUCCESS$
^\[foo.assigns.\d+\] line .* Check that buf2\[(\(.*\))?11\] is assignable: SUCCESS$
^\[foo.assigns.\d+\] line .* Check that buf1\[(\(.*\))?\(?32 - 1\)?\] is assignable: SUCCESS$
^\[foo.assigns.\d+\] line .* Check that buf3\[(\(.*\))?0\] is assignable: FAILURE$
^\[foo.assigns.\d+\] line .* Check that buf3\[(\(.*\))?9\] is assignable: FAILURE$
^\[foo.assigns.\d+\] line .* Check that buf3\[(\(.*\))?10\] is assignable: SUCCESS$
^\[foo.assigns.\d+\] line .* Check that buf3\[(\(.*\))?11\] is assignable: FAILURE$
^\[foo.assigns.\d+\] line .* Check that buf3\[(\(.*\))?\(?32 - 1\)?\] is assignable: FAILURE$
^\[foo.assigns.\d+\] line .* Check that i is assignable: SUCCESS$
^EXIT=10$
^SIGNAL=0$
^VERIFICATION FAILED$
--
--
This test checks that the optimisation that consists in not tracking locally
declared array symbols in the write set *not* kick in when said symbols are
assigned by a loop. This specifically tests the pattern matchin logic that is
used to identify the set of base symbols touched by an assigns clause target.
In particular the succesfull check
`[foo.assigns.*] Check assigns clause inclusion for loop foo.0`
shows that the targets listed in the loop's assigns clause are also found in the
function write set and hence explicitly tracked.
