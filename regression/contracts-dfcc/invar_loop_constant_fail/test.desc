CORE dfcc-only
main.c
--no-standard-checks --dfcc main --apply-loop-contracts
^EXIT=10$
^SIGNAL=0$
^\[main.loop_assigns.\d+\] line 8 Check assigns clause inclusion for loop .*: SUCCESS$
^\[main.loop_assigns.\d+\] line 8 Check assigns clause inclusion for loop .*: SUCCESS$
^\[main.loop_invariant_base.\d+\] line 8 Check invariant before entry for loop .*: SUCCESS$
^\[main.loop_invariant_base.\d+\] line 8 Check invariant before entry for loop .*: SUCCESS$
^\[main.loop_invariant_step.\d+\] line 8 Check invariant after step for loop .*: SUCCESS$
^\[main.loop_step_unwinding.\d+\] line 8 Check step was unwound for loop .*: SUCCESS$
^\[main.assigns.\d+\] .* Check that s is assignable: SUCCESS$
^\[main.assigns.\d+\] .* Check that r is assignable: SUCCESS$
^\[main\.assertion\.\d+\] .* assertion r == 0: SUCCESS$
^\[main\.assertion\.\d+\] .* assertion s == 1: FAILURE$
^VERIFICATION FAILED$
--
This test is expected to fail because it modifies a variable within a loop,
but attempts to check that it is "effectively constant" without asserting so
within the loop invariant.
The current implementation of `check_apply_invariant` correctly havocs all
variables that are modified within the loop.
The fact that a variable is "effectively constant" within a loop must be
established using an appropriate clause in the invariant.
