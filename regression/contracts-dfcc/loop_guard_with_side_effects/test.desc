CORE dfcc-only
main.c
--no-standard-checks --dfcc main --apply-loop-contracts _ --unsigned-overflow-check
\[main.loop_assigns.\d+\] line 18 Check assigns clause inclusion for loop .*: SUCCESS$
\[main.loop_invariant_base.\d+\] line 18 Check invariant before entry for loop .*: SUCCESS$
\[main.loop_invariant_step.\d+\] line 18 Check invariant after step for loop .*: SUCCESS$
\[main.loop_step_unwinding.\d+\] line 18 Check step was unwound for loop .*: SUCCESS$
\[check.assigns.\d+\] line \d+ Check that \*j is assignable: SUCCESS$
\[check.overflow.\d+\] line \d+ arithmetic overflow on unsigned \+ in \*j \+ 1u: SUCCESS
\[check.overflow.\d+\] line \d+ arithmetic overflow on unsigned \+ in \*j \+ 1u: SUCCESS
\[main.assigns.\d+\] line \d+ Check that i is assignable: SUCCESS$
\[main.overflow.\d+\] line \d+ arithmetic overflow on unsigned \+ in i \+ 1u: SUCCESS
\[main.assertion.\d+\] line \d+ assertion i == k: SUCCESS$
\[main.overflow.\d+\] line \d+ arithmetic overflow on unsigned \+ in k \+ \(unsigned int\)1: SUCCESS
\[main.assertion.\d+\] line \d+ assertion j == k \+ 1: SUCCESS$
^EXIT=0$
^SIGNAL=0$
^VERIFICATION SUCCESSFUL$
--
--
This test demonstrates a case where the loop guard has side effects.
The loop contracts must specify the state of all modified variables,
including those in the loop guard.
