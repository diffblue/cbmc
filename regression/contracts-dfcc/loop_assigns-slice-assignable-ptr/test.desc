CORE dfcc-only
main.c
--no-standard-checks --dfcc main --apply-loop-contracts
^EXIT=0$
^SIGNAL=0$
^\[main.loop_assigns.\d+\] line 24 Check assigns clause inclusion for loop .*: SUCCESS$
^\[main.loop_invariant_base.\d+\] line 24 Check invariant before entry for loop .*: SUCCESS$
^\[main.loop_invariant_step.\d+\] line 24 Check invariant after step for loop .*: SUCCESS$
^\[main.loop_step_unwinding.\d+\] line 24 Check step was unwound for loop .*: SUCCESS$
^\[main.assigns.\d+\] .* Check that i is assignable: SUCCESS$
^\[main.assigns.\d+\] .* Check that b->data is assignable: SUCCESS$
^\[main.assigns.\d+\] .* Check that \*b->data is assignable: SUCCESS$
^\[main.assertion.\d+\] .* assertion b->data == start: SUCCESS$
^\[main.assertion.\d+\] .* assertion start <= b->data && b->data <= end: SUCCESS$
^VERIFICATION SUCCESSFUL$
--
--
This test checks that __CPROVER_typed_target(ptr) is supported in loop contracts
for pointer typed targets and gets translated to
__CPROVER_assignable(address_of(ptr), sizeof(ptr), TRUE).
