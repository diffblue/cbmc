CORE smt-backend broken-cprover-smt-backend thorough-smt-backend dfcc-only
main.c
--no-standard-checks --dfcc main --apply-loop-contracts _ --z3
^EXIT=0$
^SIGNAL=0$
^\[main.loop_assigns.\d+\] line 9 Check assigns clause inclusion for loop .*: SUCCESS$
^\[main.loop_assigns.\d+\] line 9 Check assigns clause inclusion for loop .*: SUCCESS$
^\[main.loop_invariant_base.\d+\] line 9 Check invariant before entry for loop .*: SUCCESS$
^\[main.loop_invariant_base.\d+\] line 9 Check invariant before entry for loop .*: SUCCESS$
^\[main.loop_invariant_step.\d+\] line 9 Check invariant after step for loop .*: SUCCESS$
^\[main.loop_step_unwinding.\d+\] line 9 Check step was unwound for loop .*: SUCCESS$
^\[main.assigns.\d+\] line .* Check that i is assignable: SUCCESS$
^\[main.assigns.\d+\] line .* Check that a\[(\(signed (long (long )?)?int\))?i\] is assignable: SUCCESS$
^\[main.assertion.\d+\] line .* assertion .*: SUCCESS$
^VERIFICATION SUCCESSFUL$
--
^warning: ignoring
--
This test case checks the handling of a universal quantifier, with a symbolic
upper bound, within a loop invariant.

TODO: This test should:
- not use the `_ --z3` parameters:
  once SMT-related tags are supported by the `Makefile`.
