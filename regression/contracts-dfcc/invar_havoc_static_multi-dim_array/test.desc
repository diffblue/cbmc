CORE dfcc-only
main.c
--no-standard-checks --dfcc main --apply-loop-contracts
^EXIT=10$
^SIGNAL=0$
^\[main.loop_assigns.\d+\] line 13 Check assigns clause inclusion for loop .*: SUCCESS$
^\[main.loop_invariant_base.\d+\] line 13 Check invariant before entry for loop .*: SUCCESS$
^\[main.loop_invariant_step.\d+\] line 13 Check invariant after step for loop .*: SUCCESS$
^\[main.loop_step_unwinding.\d+\] line 13 Check step was unwound for loop .*: SUCCESS$
^\[main\.assertion\.\d+\] .* assertion __CPROVER_same_object\(old_data123, &\(data\[1\]\[2\]\[3\]\)\): SUCCESS$
^\[main\.assertion\.\d+\] .* assertion data\[1\]\[2\]\[3\] == 0: FAILURE$
^VERIFICATION FAILED$
--
--
Test case related to issue #6020: it checks that multi dimensional arrays
are correctly havoced when enforcing invariant contracts.

The `__CPROVER_same_object(old_data123, &(data[1][2][3]))` assertion is expected
to pass -- we should not mistakenly havoc the allocations, just their values.
However, the `data[1][2][3] == 0` assertion is expected to fail since `data`
is havoced.
