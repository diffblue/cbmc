CORE
main.c
--variable --structs --arrays --pointers --value-set --show --pointer-check
^file main.c line 25 function main: replacing function pointer by 2 possible targets$
^file main.c line 28 function main: replacing function pointer by 2 possible targets$
^file main.c line 33 function main: replacing function pointer by 2 possible targets$
^file main.c line 41 function main: replacing function pointer by 2 possible targets$
^file main.c line 49 function main: replacing function pointer by 2 possible targets$
^main::1::fun0 \(\) -> TOP$
^main::1::fun1 \(\) -> value-set-begin: ptr ->\(f\), :value-set-end$
^main::1::fun2_show \(\) -> value-set-begin: ptr ->\([fg]\), ptr ->\([fg]\), :value-set-end$
^main::1::fun3_show \(\) -> value-set-begin: ptr ->\([fg]\), ptr ->\([fg]\), :value-set-end$
^fun_global_show \(\) -> value-set-begin: ptr ->\([fg]\), ptr ->\([fg]\), :value-set-end$
^EXIT=0$
^SIGNAL=0$
--
^warning: ignoring
^main::1::fun0_show \(\) -> value-set-begin: .* :value-set-end$
^main::1::fun1_show \(\) -> value-set-begin: .*ptr ->\(h\).* :value-set-end$
^main::1::fun2_show \(\) -> value-set-begin: .*ptr ->\(h\).* :value-set-end$
^main::1::fun3_show \(\) -> \{\[0\] = value-set-begin: .*ptr ->\(h\).* :value-set-end$
^fun_global_show \(\) -> value-set-begin: .*ptr ->\(h\).* :value-set-end$
--
ADA-495 has been filed to fix this bug.
It fails because after the line "fun_global_show = fun_global", fun_global_show
gets the following value set:
fun_global_show () -> value-set-begin: TOP, ptr ->(g), ptr ->(f), :value-set-end
which is wrong
