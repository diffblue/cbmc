language: cpp

matrix:
  include:

    # Alpine Linux with musl-libc using g++
    - os: linux
      sudo: required
      compiler: gcc
      cache: ccache
      services:
        - docker
      before_install:
        - docker pull diffblue/cbmc-builder:alpine-0.0.1
      env:
        - PRE_COMMAND="docker run -v ${TRAVIS_BUILD_DIR}:/cbmc -v ${HOME}/.ccache:/root/.ccache diffblue/cbmc-builder:alpine-0.0.1"
        - COMPILER="ccache g++"

    # OS X using g++
    - os: osx
      sudo: false
      compiler: gcc
      cache: ccache
      before_install:
          #we create symlink to non-ccache gcc, to be used in tests
        - mkdir bin ; ln -s /usr/bin/gcc bin/gcc
        - HOMEBREW_NO_AUTO_UPDATE=1 brew install ccache
        - export PATH=/usr/local/opt/ccache/libexec:$PATH
        - ccache -M 1G
      env: COMPILER=g++

    # OS X using clang++
    - os: osx
      sudo: false
      compiler: clang
      cache: ccache
      before_install:
        - HOMEBREW_NO_AUTO_UPDATE=1 brew install ccache
        - export PATH=/usr/local/opt/ccache/libexec:$PATH
        - ccache -M 1G
      env:
        - COMPILER="ccache clang++ -Qunused-arguments -fcolor-diagnostics"
        - CCACHE_CPP2=yes

    # Ubuntu Linux with glibc using g++-5
    - os: linux
      sudo: false
      compiler: gcc
      cache: ccache
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libwww-perl
            - g++-5
            - libubsan0
      before_install:
        - mkdir bin ; ln -s /usr/bin/gcc-5 bin/gcc
      # env: COMPILER=g++-5 SAN_FLAGS="-fsanitize=undefined -fno-sanitize-recover -fno-omit-frame-pointer"
      env: COMPILER="g++-5"

    # Ubuntu Linux with glibc using g++-5, debug mode
    - os: linux
      sudo: false
      compiler: gcc
      cache: ccache
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
          packages:
            - libwww-perl
            - g++-5
            - libubsan0
      before_install:
        - mkdir bin ; ln -s /usr/bin/gcc-5 bin/gcc
      # env: COMPILER=g++-5 SAN_FLAGS="-fsanitize=undefined -fno-sanitize-recover -fno-omit-frame-pointer"
      env:
        - COMPILER="g++-5"
        - EXTRA_CXXFLAGS="-DDEBUG"
      script: echo "Not running any tests for a debug build."

    # Ubuntu Linux with glibc using clang++-3.7
    - os: linux
      sudo: false
      compiler: clang
      cache: ccache
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.7
          packages:
            - libwww-perl
            - clang-3.7
            - libstdc++-5-dev
            - libubsan0
      before_install:
        - mkdir bin ; ln -s /usr/bin/clang-3.7 bin/gcc
        - export CCACHE_CPP2=yes
      # env: COMPILER=clang++-3.7 SAN_FLAGS="-fsanitize=undefined -fno-sanitize-recover=undefined,integer -fno-omit-frame-pointer"
      env:
        - COMPILER="ccache clang++-3.7 -Qunused-arguments -fcolor-diagnostics"
        - CCACHE_CPP2=yes

    # Ubuntu Linux with glibc using clang++-3.7, debug mode
    - os: linux
      sudo: false
      compiler: clang
      cache: ccache
      addons:
        apt:
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.7
          packages:
            - libwww-perl
            - clang-3.7
            - libstdc++-5-dev
            - libubsan0
      before_install:
        - mkdir bin ; ln -s /usr/bin/clang-3.7 bin/gcc
        - export CCACHE_CPP2=yes
      # env: COMPILER=clang++-3.7 SAN_FLAGS="-fsanitize=undefined -fno-sanitize-recover=undefined,integer -fno-omit-frame-pointer"
      env:
        - COMPILER="ccache clang++-3.7 -Qunused-arguments -fcolor-diagnostics"
        - CCACHE_CPP2=yes
        - EXTRA_CXXFLAGS="-DDEBUG"
      script: echo "Not running any tests for a debug build."

    - env: NAME="CPP-LINT"
      install:
      script: scripts/travis_lint.sh
      before_cache:

    - env: NAME="DOXYGEN-CHECK"
      addons:
        apt:
          packages:
            - doxygen
      install:
      script: scripts/travis_doxygen.sh
      before_cache:

  allow_failures:
    - env: NAME="CPP-LINT"
      install:
      script: scripts/travis_lint.sh
      before_cache:

install:
  - COMMAND="make -C src minisat2-download" &&
    eval ${PRE_COMMAND} ${COMMAND}
  - COMMAND="make -C src CXX=\"$COMPILER\" CXXFLAGS=\"-Wall -Werror -pedantic -O2 -g $EXTRA_CXXFLAGS\" -j2" &&
    eval ${PRE_COMMAND} ${COMMAND}
  - COMMAND="make -C src CXX=\"$COMPILER\" CXXFLAGS=\"$FLAGS $EXTRA_CXXFLAGS\" -j2 clobber.dir memory-models.dir musketeer.dir" &&
    eval ${PRE_COMMAND} ${COMMAND}

script:
  - if [ -e bin/gcc ] ; then export PATH=$PWD/bin:$PATH ; fi ;
    COMMAND="env UBSAN_OPTIONS=print_stacktrace=1 make -C regression test CXX=\"$COMPILER\" CXXFLAGS=\"-Wall -Werror -pedantic -O2 -g $EXTRA_CXXFLAGS\"" &&
    eval ${PRE_COMMAND} ${COMMAND}
  - COMMAND="make -C unit CXX=\"$COMPILER\" CXXFLAGS=\"-Wall -Werror -pedantic -O2 -g $EXTRA_CXXFLAGS\" -j2" &&
    eval ${PRE_COMMAND} ${COMMAND}
  - COMMAND="make -C unit test" && eval ${PRE_COMMAND} ${COMMAND}

before_cache:
  - ccache -s
