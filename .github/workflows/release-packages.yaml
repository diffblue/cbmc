on:
  release:
    types: [created]
env:
  cvc5-version: "0.0.9"

name: Upload additional release assets
jobs:
  ubuntu-20_04-package:
    runs-on: ubuntu-20.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y g++ gdb flex bison cmake ninja-build maven jq libxml2-utils dpkg-dev ccache z3
      - name: Confirm z3 solver is available and log the version installed
        run: z3 --version
      - name: Download cvc-5 from the releases page and make sure it can be deployed
        run: |
          wget -O cvc5 https://github.com/cvc5/cvc5/releases/download/cvc5-${{env.cvc5-version}}/cvc5-Linux
          chmod u+x cvc5
          mv cvc5 /usr/local/bin
          cvc5 --version
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-20.04-Release-${{ github.ref }}-${{ github.sha }}-RELEASEPKG
          restore-keys: |
            ${{ runner.os }}-20.04-Release-${{ github.ref }}
            ${{ runner.os }}-20.04-Release
      - name: ccache environment
        run: |
          echo "CCACHE_BASEDIR=$PWD" >> $GITHUB_ENV
          echo "CCACHE_DIR=$PWD/.ccache" >> $GITHUB_ENV
      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
      - name: Zero ccache stats and limit in size
        run: ccache -z --max-size=500M
      - name: Build using Ninja
        run: |
          cd build
          ninja -j2
      - name: Print ccache stats
        run: ccache -s
      - name: Run CTest
        run: cd build; ctest . -V -L CORE -C Release -j2
      - name: Create packages
        id: create_packages
        run: |
          cd build
          ninja package
          deb_package_name="$(ls *.deb)"
          echo "::set-output name=deb_package::./build/$deb_package_name"
          echo "::set-output name=deb_package_name::ubuntu-20.04-$deb_package_name"
      - name: Get release info
        id: get_release_info
        uses: bruceadams/get-release@v1.2.0
      - name: Upload binary packages
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ steps.create_packages.outputs.deb_package }}
          asset_name: ${{ steps.create_packages.outputs.deb_package_name }}
          asset_content_type: application/x-deb

  ubuntu-18_04-package:
    runs-on: ubuntu-18.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y g++ gdb flex bison cmake ninja-build maven jq libxml2-utils dpkg-dev ccache z3
          # remove libgcc-s1, which isn't normally available in Ubuntu 18.04
          target=$(dpkg-query -W --showformat='${Version}\n' gcc-8-base | head -n 1)
          # libgcc1 uses an epoch, thus the extra 1:
          sudo apt-get install -y --allow-downgrades --reinstall gcc g++ libgcc-s1- libstdc++6=$target liblsan0=$target libtsan0=$target libcc1-0=$target libgcc1=1:$target gdb=8.1.1-0ubuntu1
      - name: Confirm z3 solver is available and log the version installed
        run: z3 --version
      - name: Download cvc-5 from the releases page and make sure it can be deployed
        run: |
          wget -O cvc5 https://github.com/cvc5/cvc5/releases/download/cvc5-${{env.cvc5-version}}/cvc5-Linux
          chmod u+x cvc5
          mv cvc5 /usr/local/bin
          cvc5 --version
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-18.04-Release-${{ github.ref }}-${{ github.sha }}-RELEASEPKG
          restore-keys: |
            ${{ runner.os }}-18.04-Release-${{ github.ref }}
            ${{ runner.os }}-18.04-Release
      - name: ccache environment
        run: |
          echo "CCACHE_BASEDIR=$PWD" >> $GITHUB_ENV
          echo "CCACHE_DIR=$PWD/.ccache" >> $GITHUB_ENV
      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
      - name: Zero ccache stats and limit in size
        run: ccache -z --max-size=500M
      - name: Build using Ninja
        run: |
          cd build
          ninja -j2
      - name: Print ccache stats
        run: ccache -s
      - name: Run CTest
        run: cd build; ctest . -V -L CORE -C Release -j2
      - name: Create packages
        id: create_packages
        run: |
          cd build
          ninja package
          deb_package_name="$(ls *.deb)"
          echo "::set-output name=deb_package::./build/$deb_package_name"
          echo "::set-output name=deb_package_name::ubuntu-18.04-$deb_package_name"
      - name: Get release info
        id: get_release_info
        uses: bruceadams/get-release@v1.2.0
      - name: Upload binary packages
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ steps.create_packages.outputs.deb_package }}
          asset_name: ${{ steps.create_packages.outputs.deb_package_name }}
          asset_content_type: application/x-deb


  homebrew-pr:
    runs-on: macos-10.15
    steps:
      - name: Get release tag name
        # The GITHUB_REF we get has refs/tags/ in front of the tag name so we
        # strip that here
        run: echo "RELEASE_TAG=${GITHUB_REF/refs\/tags\/}" >> $GITHUB_ENV
      - name: Configure git user name and email
        uses: Homebrew/actions/git-user-config@07da0794847043a11761f14c97cc682577c74d5d
        with:
          username: db-ci-cprover
      - name: Create homebrew PR
        run: |
          brew update-reset
          brew bump-formula-pr --tag "$RELEASE_TAG" --revision "$GITHUB_SHA" cbmc
        env:
          HOMEBREW_GITHUB_API_TOKEN: ${{ secrets.DB_CI_CPROVER_ACCESS_TOKEN }}

  windows-msi-package:
    runs-on: windows-2019
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: nuget/setup-nuget@v1
        with:
          nuget-version: '5.8.x'
      - name: Fetch dependencies
        run: |
          choco install winflexbison3
          nuget install clcache -OutputDirectory "c:\tools" -ExcludeVersion -Version 4.1.0
          echo "c:\tools\clcache\clcache-4.1.0" >> $env:GITHUB_PATH
      - name: Setup Visual Studio environment
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Setup code sign environment
        run: |
          echo "$(Split-Path -Path $(Get-ChildItem -Path "${env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\signtool.exe"))" >> $env:GITHUB_PATH
          echo "pfxcert=$([string](Get-Location)+'\CodeSignCertificate.pfx')" >> $env:GITHUB_ENV
      - name: Prepare ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ runner.os }}-msbuild-${{ github.ref }}-${{ github.sha }}-RELEASEPKG
          restore-keys: |
            ${{ runner.os }}-msbuild-${{ github.ref }}
            ${{ runner.os }}-msbuild
      - name: ccache environment
        run: |
          echo "CLCACHE_BASEDIR=$((Get-Item -Path '.\').FullName)" >> $env:GITHUB_ENV
          echo "CLCACHE_DIR=$pwd\.ccache" >> $env:GITHUB_ENV
      - name: Configure with cmake
        run: cmake -S . -B build
      - name: Build Release
        run: cmake --build build --config Release -- /p:UseMultiToolTask=true /p:CLToolExe=clcache
      - name: Print ccache stats
        run: clcache -s
      - name: Create packages
        id: create_packages
        # We need to get the path to cpack because fascinatingly,
        # chocolatey also includes a command called "cpack" which takes precedence
        run: |
          Set-Location build
          $cpack = "$(Split-Path -Parent (Get-Command cmake).Source)\cpack.exe"
          & $cpack . -C Release
          $msi_name = Get-ChildItem -Filter *.msi -Name
          Write-Output "::set-output name=msi_installer::build/$msi_name"
          Write-Output "::set-output name=msi_name::$msi_name"
      - name: Decode signing certificate
        id: decode_certificate
        run: |
          $pfx_bytes=[System.Convert]::FromBase64String("${{ secrets.CODESIGNCERTPFX }}")
          [IO.File]::WriteAllBytes($env:pfxcert, $pfx_bytes)
      - name: Sign the installer
        id: code_sign
        run: |
          $servers = @('http://ts.ssl.com', 'http://timestamp.digicert.com', 'http://timestamp.sectigo.com')
          foreach($ts_server in $servers)
          {
            & signtool.exe sign /f $env:pfxcert /p "${{ secrets.CODESIGNCERTPASSWORD }}" /tr $ts_server /td SHA256 /fd SHA256 ${{ steps.create_packages.outputs.msi_installer }}
            if ($LastExitCode -eq "0")
            {
              # Stop if code-signing the binary using this server was successful.
              break
            }
          }
      - name: Remove signing certificate
        id: remove_certificate
        run: |
          Remove-Item $env:pfxcert
      - name: Verify installer signature
        id: verify_codesign
        run: |
          & signtool.exe verify /pa ${{ steps.create_packages.outputs.msi_installer }}
      - name: Get release info
        id: get_release_info
        uses: bruceadams/get-release@v1.2.0
      - name: Upload binary packages
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.get_release_info.outputs.upload_url }}
          asset_path: ${{ steps.create_packages.outputs.msi_installer }}
          asset_name: ${{ steps.create_packages.outputs.msi_name }}
          asset_content_type: application/x-msi

  push-docker-image-dockerhub:
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout CBMC source
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Set Image Tag
        run: |
          # Isolate the version number from a reference to a tag, for example,
          # '5.20.3' from a string like 'refs/tags/cbmc-5.20.3-exp'
          VERSION=$(echo ${{ github.ref }} | cut -d "/" -f 3 | cut -d "-" -f 2)
          echo "IMAGE_TAG=diffblue/cbmc:$VERSION" >> $GITHUB_ENV
      - name: Build docker image
        run: docker build -t "$IMAGE_TAG" .
      - name: Push docker image to DockerHub
        run: |
          echo ${{ secrets.DOCKERHUB_ACCESS_DB_CI_CPROVER }} | docker login --username=dbcicprover --password-stdin
          docker image push "$IMAGE_TAG"
          # For security reasons remove stored login credentials from
          # configuration file they are stored at by docker login.
          docker logout
