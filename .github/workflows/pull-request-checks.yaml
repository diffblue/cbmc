name: pull-request-checks
on:
  pull_request:
    branches: [ develop ]

jobs:
  check-ubuntu-20_04-cmake-gcc:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install -yq cmake ninja-build gcc g++ maven flex bison libxml2-utils cpanminus dpkg-dev
          cpanm Thread::Pool::Simple
      - name: Configure using CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++
      - name: Build with Ninja
        run: cd build; ninja
      - name: Check if package building works
        run: |
          cd build
          ninja package
          ls *.deb
      - name: Run tests
        run: cd build; ctest . -V -L CORE
        env:
          TESTPL_JOBS: 2

  check-ubuntu-20_04-cmake-clang-8:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install -yq cmake ninja-build clang-8 clang++-8 maven flex bison libxml2-utils cpanminus dpkg-dev
          cpanm Thread::Pool::Simple
      - name: Configure using CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang-8 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-8
      - name: Build with Ninja
        run: cd build; ninja
      - name: Check if package building works
        run: |
          cd build
          ninja package
          ls *.deb
      - name: Run tests
        run: cd build; ctest . -V -L CORE
        env:
          TESTPL_JOBS: 2

  check-ubuntu-20_04-cmake-clang-3_8:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install -yq cmake ninja-build clang-3.8 clang++-3.8 maven flex bison libxml2-utils cpanminus dpkg-dev
          cpanm Thread::Pool::Simple
      - name: Configure using CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang-3.8 -DCMAKE_CXX_COMPILER=/usr/bin/clang++-3.8
      - name: Build with Ninja
        run: cd build; ninja
      - name: Check if package building works
        run: |
          cd build
          ninja package
          ls *.deb
      - name: Run tests
        run: cd build; ctest . -V -L CORE
        env:
          TESTPL_JOBS: 2

  check-macos-10_15-cmake-clang:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Fetch dependencies
        run: brew install cmake ninja maven flex bison
      - name: Configure using CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++
      - name: Build with Ninja
        run: cd build; ninja
      - name: Run CTest
        run: cd build; ctest -V -L CORE .

  check-vs-2019-build-and-test:
    runs-on: windows-2019
    env:
      SCRIPT_DIR: .github/workflows/vs2019
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install bison and flex
        run: "${{env.SCRIPT_DIR}}\\install-bison.bat"

      - name: Install z3
        run: |
          Invoke-WebRequest "https://github.com/Z3Prover/z3/releases/download/z3-4.8.8/z3-4.8.8-x64-win.zip" -OutFile z3.zip
          Expand-Archive z3.zip
          # We need Get-ChildItem.Name here because the path includes
          # the z3 version number, which we expect to change.
          $z3_path = "$(Get-Location)\z3\$((Get-ChildItem z3).Name)"
          $env:PATH += ";$z3_path"
          Write-Output "::set-env name=PATH::$env:PATH"

      - name: Build cbmc
        run: "${{env.SCRIPT_DIR}}\\build-cbmc.bat"

      - name: Test cbmc
        run: "${{env.SCRIPT_DIR}}\\run-tests.bat"

  check-clang-format:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install -yq clang-format-7
      - name: Check updated lines of code match clang-format-7 style
        env:
          BASE_BRANCH: ${{ github.base_ref }}
          MERGE_BRANCH: ${{ github.ref }}
        run: ./.github/workflows/pull-request-check-clang-format.sh

  check-cpplint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          pip install unidiff
      - name: Check updated lines of code meet linting standards
        env:
          BASE_BRANCH: ${{ github.base_ref }}
          MERGE_BRANCH: ${{ github.ref }}
        run: ./.github/workflows/pull-request-check-cpplint.sh

  # I just added this to check if my stuff is working on github actions
  windows-msi-package:
    runs-on: windows-2019
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        run: |
          choco install winflexbison3
      - uses: microsoft/setup-msbuild@v1.0.1
      - name: Configure with cmake
        run: |
          New-Item -ItemType Directory -Path build
          Set-Location build
          cmake ..
      - name: Build Release
        run: |
          Set-Location build
          cmake --build . --config Release
      - name: Create packages
        id: create_packages
        # We need to get the path to cpack because fascinatingly,
        # chocolatey also includes a command called "cpack" which takes precedence
        run: |
          Set-Location build
          $cpack = "$(Split-Path -Parent (Get-Command cmake).Source)\cpack.exe"
          & $cpack . -C Release
          $msi_name = (Get-ChildItem -name *.msi).Name
          Write-Output "::set-output name=msi_installer::build/$msi_name"
          Write-Output "::set-output name=msi_name::$msi_name"

  ubuntu-18_04-package:
    runs-on: ubuntu-18.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Fetch dependencies
        run: sudo apt install g++ flex bison cmake ninja-build maven jq libxml2-utils dpkg-dev
      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release
      - name: Build using Ninja
        run: |
          cd build
          ninja
      - name: Run CTest
        run: cd build; ctest . -V -L CORE -C Release
      - name: Create packages
        id: create_packages
        run: |
          cd build
          ninja package
          deb_package_name="$(ls *.deb)"
          echo "::set-output name=deb_package::./build/$deb_package_name"
          echo "::set-output name=deb_package_name::ubuntu-18.04-$deb_package_name"


  check-string-table:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Check for unused irep ids
        run: ./scripts/string_table_check.sh
