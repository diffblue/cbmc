name: pull-request-checks
on:
  pull_request:
    branches: [ develop ]

jobs:
  check-ubuntu-20_04-make-gcc:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
          TESTPL_JOBS: 4
        run: |
          sudo apt-get install -yq gcc gdb g++ maven jq flex bison libxml2-utils cpanminus
          make -C src minisat2-download
          cpanm Thread::Pool::Simple
      - name: Build with make
        run: |
          make -C src CXX='/usr/bin/g++' -j2
          make -C unit CXX='/usr/bin/g++' -j2
          make -C jbmc/src  CXX='/usr/bin/g++' -j2
          make -C jbmc/unit CXX='/usr/bin/g++' -j2
      - name: Run unit tests
        run: |
          make -C unit test
          make -C jbmc/unit test
          echo "Running expected failure tests"
          make TAGS="[!shouldfail]" -C unit test
          make TAGS="[!shouldfail]" -C jbmc/unit test
      - name: Run regression tests
        run: |
          make -C regression test
          make -C regression/cbmc test-paths-lifo
          env PATH=$PATH:`pwd`/src/solvers make -C regression/cbmc test-cprover-smt2
          make -C jbmc/regression test
  check-ubuntu-20_04-cmake-gcc:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install -yq cmake ninja-build gcc g++ maven flex bison libxml2-utils cpanminus dpkg-dev
          cpanm Thread::Pool::Simple
      - name: Configure using CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++
      - name: Build with Ninja
        run: cd build; ninja
      - name: Check if package building works
        run: |
          cd build
          ninja package
          ls *.deb
      - name: Run tests
        run: cd build; ctest . -V -L CORE
        env:
          TESTPL_JOBS: 2
  check-ubuntu-20_04-source-packaging:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install -yq cmake ninja-build gcc g++ maven flex bison libxml2-utils dpkg-dev lintian
      - name: Configure using CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/gcc -DCMAKE_CXX_COMPILER=/usr/bin/g++
      - name: Build source package
        run: ninja -C build package_source
      - name: Check source package is valid
        run: |
          cd build
          lintian $(ls | grep Source.deb)

  check-macos-10_15-make-clang:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Fetch dependencies
        run: brew install maven flex bison
      - name: Build using Make
        run: |
          make -C src minisat2-download
          make -C src
          make -C jbmc/src
          make -C unit
          make -C jbmc/unit
      - name: Run unit tests
        run: cd unit; ./unit_tests
      - name: Run JBMC unit tests
        run: cd jbmc/unit; ./unit_tests
      - name: Run regression tests
        run: cd regression; make
      - name: Run JBMC regression tests
        run: cd jbmc/regression; make

  check-macos-10_15-cmake-clang:
    runs-on: macos-10.15
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - name: Fetch dependencies
        run: brew install cmake ninja maven flex bison
      - name: Configure using CMake
        run: |
          mkdir build
          cd build
          cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++
      - name: Build with Ninja
        run: cd build; ninja
      - name: Run CTest
        run: cd build; ctest -V -L CORE .
  check-vs-2019-build-only:
    runs-on: windows-2019
    env:
      SCRIPT_DIR: .github/workflows/vs2019
    defaults:
      run:
        shell: cmd
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Install bison and flex
        run: "%SCRIPT_DIR%\\install-bison.bat"

      - name: Build cbmc
        run: "%SCRIPT_DIR%\\build-cbmc.bat"

  check-clang-format:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo apt-get install -yq clang-format-7
      - name: Check updated lines of code match clang-format-7 style
        env:
          BASE_BRANCH: ${{ github.base_ref }}
          MERGE_BRANCH: ${{ github.ref }}
        run: ./.github/workflows/pull-request-check-clang-format.sh

  check-cpplint:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
          fetch-depth: 0
      - name: Fetch dependencies
        env:
          # This is needed in addition to -yq to prevent apt-get from asking for
          # user input
          DEBIAN_FRONTEND: noninteractive
        run: |
          pip install unidiff
      - name: Check updated lines of code meet linting standards
        env:
          BASE_BRANCH: ${{ github.base_ref }}
          MERGE_BRANCH: ${{ github.ref }}
        run: ./.github/workflows/pull-request-check-cpplint.sh

  check-string-table:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: Check for unused irep ids
        run: ./scripts/string_table_check.sh
